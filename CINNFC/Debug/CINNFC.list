
CINNFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cda4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002378  0800cf3c  0800cf3c  0001cf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2b4  0800f2b4  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2b4  0800f2b4  0001f2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2bc  0800f2bc  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2bc  0800f2bc  0001f2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2c0  0800f2c0  0001f2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800f2c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002438  200000ac  0800f370  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024e4  0800f370  000224e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d944  00000000  00000000  0002011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004784  00000000  00000000  0003da63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  000421e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001178  00000000  00000000  00043720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d8d7  00000000  00000000  00044898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001feb4  00000000  00000000  0006216f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0e3c  00000000  00000000  00082023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060a0  00000000  00000000  00122e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00128f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000ac 	.word	0x200000ac
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800cf24 	.word	0x0800cf24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b0 	.word	0x200000b0
 80001d4:	0800cf24 	.word	0x0800cf24

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <calculate_mac>:
    for (int x = 0; x < 8; x++) {
       src[x] =  src[x] ^ dest[x];
    }
}

void calculate_mac(uint8_t* eifd, size_t eifd_len, uint8_t* kmac, size_t *mac_len){
 80004d4:	b5b0      	push	{r4, r5, r7, lr}
 80004d6:	b0aa      	sub	sp, #168	; 0xa8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	603b      	str	r3, [r7, #0]
//
//	CC;



	const unsigned char msg[40] = { 0x72, 0xC2, 0x9C, 0x23, 0x71, 0xCC, 0x9B, 0xDB,
 80004e2:	4b2a      	ldr	r3, [pc, #168]	; (800058c <calculate_mac+0xb8>)
 80004e4:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80004e8:	461d      	mov	r5, r3
 80004ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004f6:	e884 0003 	stmia.w	r4, {r0, r1}
	                              0xEC, 0xC1, 0x54, 0xAA, 0x56, 0xA8, 0x79, 0x9F,
	                              0xAE, 0x2F, 0x49, 0x8F, 0x76, 0xED, 0x92, 0xF2,
	                              0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

	//initialization vector
	unsigned char iv[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80004fa:	4a25      	ldr	r2, [pc, #148]	; (8000590 <calculate_mac+0xbc>)
 80004fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000500:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000504:	e883 0003 	stmia.w	r3, {r0, r1}

	unsigned char k0[16] = { 0x79, 0x62, 0xD9, 0xEC, 0xE0, 0x3D, 0x1A, 0xCD, 0x4C, 0x76, 0x08, 0x9D, 0xCE, 0x13, 0x15, 0x43};
 8000508:	4b22      	ldr	r3, [pc, #136]	; (8000594 <calculate_mac+0xc0>)
 800050a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800050e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint8_t myout[8] = {0};
 8000514:	2300      	movs	r3, #0
 8000516:	65bb      	str	r3, [r7, #88]	; 0x58
 8000518:	2300      	movs	r3, #0
 800051a:	65fb      	str	r3, [r7, #92]	; 0x5c

	mbedtls_cipher_context_t ctx;
	mbedtls_cipher_init(&ctx);
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	4618      	mov	r0, r3
 8000522:	f006 f82f 	bl	8006584 <mbedtls_cipher_init>
	int ret = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

#define MBEDTLS_CMAC_C

	const mbedtls_cipher_info_t *cipher_info;
	cipher_info = mbedtls_cipher_info_from_type(MBEDTLS_CIPHER_AES_128_ECB);
 800052c:	2002      	movs	r0, #2
 800052e:	f005 ffcf 	bl	80064d0 <mbedtls_cipher_info_from_type>
 8000532:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

	if ((ret = mbedtls_cipher_setup(&ctx, cipher_info)) != 0) {
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800053e:	4618      	mov	r0, r3
 8000540:	f006 f856 	bl	80065f0 <mbedtls_cipher_setup>
 8000544:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		ret;
	}

	ret = mbedtls_cipher_cmac_starts(&ctx, k0, 128);
 8000548:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	4618      	mov	r0, r3
 8000554:	f007 f97c 	bl	8007850 <mbedtls_cipher_cmac_starts>
 8000558:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	if (ret != 0) {
		ret;
	}

	ret = mbedtls_cipher_cmac_update(&ctx, msg, 40);
 800055c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	2228      	movs	r2, #40	; 0x28
 8000566:	4618      	mov	r0, r3
 8000568:	f007 f9be 	bl	80078e8 <mbedtls_cipher_cmac_update>
 800056c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	if (ret != 0) {
		ret;
	}

	ret = mbedtls_cipher_cmac_finish(&ctx, myout);
 8000570:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4611      	mov	r1, r2
 800057a:	4618      	mov	r0, r3
 800057c:	f007 fb0e 	bl	8007b9c <mbedtls_cipher_cmac_finish>
 8000580:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
//	//mbedtls_des3_crypt_cbc(&des1, MBEDTLS_DES_ENCRYPT, 8, iv, h5decrypt, MAC);
//	//configure_des(kmac1, h5decrypt, MAC);
//	MAC;


}
 8000584:	bf00      	nop
 8000586:	37a8      	adds	r7, #168	; 0xa8
 8000588:	46bd      	mov	sp, r7
 800058a:	bdb0      	pop	{r4, r5, r7, pc}
 800058c:	0800d228 	.word	0x0800d228
 8000590:	0800d250 	.word	0x0800d250
 8000594:	0800d258 	.word	0x0800d258

08000598 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d013      	beq.n	80005d8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d00b      	beq.n	80005d8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c0:	e000      	b.n	80005c4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d0f9      	beq.n	80005c2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	b2d2      	uxtb	r2, r2
 80005d6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d8:	687b      	ldr	r3, [r7, #4]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b0ca      	sub	sp, #296	; 0x128
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t buff[255];
  uint8_t uid[MIFARE_UID_MAX_LENGTH];
  int32_t uid_len = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* USER CODE END 1 */
  uint8_t indx = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f00a fc1d 	bl	800ae38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f827 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8e7 	bl	80007d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f8bb 	bl	8000780 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800060a:	f000 f88b 	bl	8000724 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	const char* CIN_num = "L898902C<3";
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <main+0x58>)
 8000610:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	const char* birth_date = "6908061";     // Format YYMMDD
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <main+0x5c>)
 8000616:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	const char* expiry_date = "9406236";    // Format YYMMDD
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <main+0x60>)
 800061c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Start \n");
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <main+0x64>)
 8000622:	f00c fa35 	bl	800ca90 <puts>

  uint8_t x, y;
  calculate_mac(&x, 1, &y, 1);
 8000626:	1dba      	adds	r2, r7, #6
 8000628:	1df8      	adds	r0, r7, #7
 800062a:	2301      	movs	r3, #1
 800062c:	2101      	movs	r1, #1
 800062e:	f7ff ff51 	bl	80004d4 <calculate_mac>
  return 0;
 8000632:	2300      	movs	r3, #0
		indx = 0;
	}
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000634:	4618      	mov	r0, r3
 8000636:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	0800d268 	.word	0x0800d268
 8000644:	0800d274 	.word	0x0800d274
 8000648:	0800d27c 	.word	0x0800d27c
 800064c:	0800d284 	.word	0x0800d284

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f00c faf6 	bl	800cc50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f00a ffe8 	bl	800b6ac <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e2:	f000 f901 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2102      	movs	r1, #2
 8000702:	4618      	mov	r0, r3
 8000704:	f00b fa4a 	bl	800bb9c <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f8eb 	bl	80008e8 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C1_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	; (8000778 <MX_I2C1_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_I2C1_Init+0x50>)
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_I2C1_Init+0x58>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_I2C1_Init+0x50>)
 8000742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_I2C1_Init+0x50>)
 8000762:	f00a fe5f 	bl	800b424 <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 f8bc 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000c8 	.word	0x200000c8
 8000778:	40005400 	.word	0x40005400
 800077c:	000186a0 	.word	0x000186a0

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_USART2_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b8:	f00b fc10 	bl	800bfdc <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f891 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000011c 	.word	0x2000011c
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <MX_GPIO_Init+0xd0>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a25      	ldr	r2, [pc, #148]	; (80008a4 <MX_GPIO_Init+0xd0>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <MX_GPIO_Init+0xd0>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <MX_GPIO_Init+0xd0>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_Led_GPIO_Port, G_Led_Pin, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2120      	movs	r1, #32
 800085e:	4812      	ldr	r0, [pc, #72]	; (80008a8 <MX_GPIO_Init+0xd4>)
 8000860:	f00a fdc6 	bl	800b3f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	480c      	ldr	r0, [pc, #48]	; (80008ac <MX_GPIO_Init+0xd8>)
 800087c:	f00a fc34 	bl	800b0e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : G_Led_Pin */
  GPIO_InitStruct.Pin = G_Led_Pin;
 8000880:	2320      	movs	r3, #32
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_Led_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_GPIO_Init+0xd4>)
 8000898:	f00a fc26 	bl	800b0e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020800 	.word	0x40020800

080008b0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	e009      	b.n	80008d6 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar((*ptr++));
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	60ba      	str	r2, [r7, #8]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe64 	bl	8000598 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	3301      	adds	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	429a      	cmp	r2, r3
 80008dc:	dbf1      	blt.n	80008c2 <_write+0x12>
  }
  return len;
 80008de:	687b      	ldr	r3, [r7, #4]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000932:	2007      	movs	r0, #7
 8000934:	f00a fba4 	bl	800b080 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a19      	ldr	r2, [pc, #100]	; (80009c8 <HAL_I2C_MspInit+0x84>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d12c      	bne.n	80009c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_I2C_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a17      	ldr	r2, [pc, #92]	; (80009cc <HAL_I2C_MspInit+0x88>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <HAL_I2C_MspInit+0x88>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000982:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000994:	2304      	movs	r3, #4
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	480c      	ldr	r0, [pc, #48]	; (80009d0 <HAL_I2C_MspInit+0x8c>)
 80009a0:	f00a fba2 	bl	800b0e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_I2C_MspInit+0x88>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_I2C_MspInit+0x88>)
 80009ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_I2C_MspInit+0x88>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40005400 	.word	0x40005400
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020400 	.word	0x40020400

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <HAL_UART_MspInit+0x84>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d12b      	bne.n	8000a4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_UART_MspInit+0x88>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a10      	ldr	r2, [pc, #64]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a2e:	230c      	movs	r3, #12
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <HAL_UART_MspInit+0x8c>)
 8000a4a:	f00a fb4d 	bl	800b0e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	; 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020000 	.word	0x40020000

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab0:	f00a fa14 	bl	800aedc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e00a      	b.n	8000ae0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aca:	f3af 8000 	nop.w
 8000ace:	4601      	mov	r1, r0
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	60ba      	str	r2, [r7, #8]
 8000ad6:	b2ca      	uxtb	r2, r1
 8000ad8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	dbf0      	blt.n	8000aca <_read+0x12>
  }

  return len;
 8000ae8:	687b      	ldr	r3, [r7, #4]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_isatty>:

int _isatty(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d207      	bcs.n	8000b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b8c:	f00c f8be 	bl	800cd0c <__errno>
 8000b90:	4603      	mov	r3, r0
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e009      	b.n	8000bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <_sbrk+0x64>)
 8000bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20020000 	.word	0x20020000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	20000164 	.word	0x20000164
 8000bc4:	200024e8 	.word	0x200024e8

08000bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <mbedtls_ctr_increment_counter>:
 *                      This is quite performance-sensitive for AES-CTR and CTR-DRBG.
 *
 * \param n             A 16-byte value to be incremented.
 */
static inline void mbedtls_ctr_increment_counter(uint8_t n[16])
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    // The 32-bit version seems to perform about the same as a 64-bit version
    // on 64-bit architectures, so no need to define a 64-bit version.
    for (int i = 3;; i--) {
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	61fb      	str	r3, [r7, #28]
        uint32_t x = MBEDTLS_GET_UINT32_BE(n, i << 2);
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	681b      	ldr	r3, [r3, #0]
    r = *p32;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint32_unaligned_t *p32 = (mbedtls_uint32_unaligned_t *) p;
    r = p32->x;
#else
    memcpy(&r, p, sizeof(r));
 8000c08:	60bb      	str	r3, [r7, #8]
#endif
    return r;
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	ba1b      	rev	r3, r3
 8000c0e:	61bb      	str	r3, [r7, #24]
        x += 1;
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	3301      	adds	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
        MBEDTLS_PUT_UINT32_BE(x, n, i << 2);
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	441a      	add	r2, r3
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	ba1b      	rev	r3, r3
 8000c24:	613a      	str	r2, [r7, #16]
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fa      	ldr	r2, [r7, #12]
    *p32 = x;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint32_unaligned_t *p32 = (mbedtls_uint32_unaligned_t *) p;
    p32->x = x;
#else
    memcpy(p, &x, sizeof(x));
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	601a      	str	r2, [r3, #0]
#endif
}
 8000c2e:	bf00      	nop
        if (x != 0 || i == 0) {
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d106      	bne.n	8000c44 <mbedtls_ctr_increment_counter+0x58>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <mbedtls_ctr_increment_counter+0x58>
    for (int i = 3;; i--) {
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	e7d9      	b.n	8000bf8 <mbedtls_ctr_increment_counter+0xc>
            break;
        }
    }
}
 8000c44:	bf00      	nop
 8000c46:	3724      	adds	r7, #36	; 0x24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <aes_gen_tables>:
#define MUL(x, y) (((x) && (y)) ? pow[(log[(x)]+log[(y)]) % 255] : 0)

MBEDTLS_MAYBE_UNUSED static int aes_init_done = 0;

MBEDTLS_MAYBE_UNUSED static void aes_gen_tables(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8000c56:	af00      	add	r7, sp, #0
    uint8_t log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for (i = 0, x = 1; i < 256; i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8000c64:	e02b      	b.n	8000cbe <aes_gen_tables+0x6e>
        pow[i] = x;
 8000c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c6a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8000c6e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000c72:	4413      	add	r3, r2
 8000c74:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8000c78:	701a      	strb	r2, [r3, #0]
        log[x] = (uint8_t) i;
 8000c7a:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000c7e:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8000c82:	b2d1      	uxtb	r1, r2
 8000c84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8000c88:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8000c8c:	54d1      	strb	r1, [r2, r3]
        x ^= XTIME(x);
 8000c8e:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	f997 2203 	ldrsb.w	r2, [r7, #515]	; 0x203
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	da01      	bge.n	8000ca2 <aes_gen_tables+0x52>
 8000c9e:	221b      	movs	r2, #27
 8000ca0:	e000      	b.n	8000ca4 <aes_gen_tables+0x54>
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4053      	eors	r3, r2
 8000ca6:	b25a      	sxtb	r2, r3
 8000ca8:	f997 3203 	ldrsb.w	r3, [r7, #515]	; 0x203
 8000cac:	4053      	eors	r3, r2
 8000cae:	b25b      	sxtb	r3, r3
 8000cb0:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
    for (i = 0, x = 1; i < 256; i++) {
 8000cb4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000cbe:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000cc2:	2bff      	cmp	r3, #255	; 0xff
 8000cc4:	ddcf      	ble.n	8000c66 <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for (i = 0, x = 1; i < 10; i++) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000ccc:	2301      	movs	r3, #1
 8000cce:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8000cd2:	e01a      	b.n	8000d0a <aes_gen_tables+0xba>
        round_constants[i] = x;
 8000cd4:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8000cd8:	49cd      	ldr	r1, [pc, #820]	; (8001010 <aes_gen_tables+0x3c0>)
 8000cda:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = XTIME(x);
 8000ce2:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	f997 2203 	ldrsb.w	r2, [r7, #515]	; 0x203
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	da01      	bge.n	8000cf6 <aes_gen_tables+0xa6>
 8000cf2:	221b      	movs	r2, #27
 8000cf4:	e000      	b.n	8000cf8 <aes_gen_tables+0xa8>
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4053      	eors	r3, r2
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
    for (i = 0, x = 1; i < 10; i++) {
 8000d00:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000d04:	3301      	adds	r3, #1
 8000d06:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000d0a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000d0e:	2b09      	cmp	r3, #9
 8000d10:	dde0      	ble.n	8000cd4 <aes_gen_tables+0x84>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8000d12:	4bc0      	ldr	r3, [pc, #768]	; (8001014 <aes_gen_tables+0x3c4>)
 8000d14:	2263      	movs	r2, #99	; 0x63
 8000d16:	701a      	strb	r2, [r3, #0]
#if defined(MBEDTLS_AES_NEED_REVERSE_TABLES)
    RSb[0x63] = 0x00;
 8000d18:	4bbf      	ldr	r3, [pc, #764]	; (8001018 <aes_gen_tables+0x3c8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
#endif

    for (i = 1; i < 256; i++) {
 8000d20:	2301      	movs	r3, #1
 8000d22:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000d26:	e07a      	b.n	8000e1e <aes_gen_tables+0x1ce>
        x = pow[255 - log[i]];
 8000d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d2c:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8000d30:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000d3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8000d40:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000d44:	5cd3      	ldrb	r3, [r2, r3]
 8000d46:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203

        y  = x; y = (y << 1) | (y >> 7);
 8000d4a:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000d4e:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
 8000d52:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	b25a      	sxtb	r2, r3
 8000d5a:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8000d5e:	09db      	lsrs	r3, r3, #7
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        x ^= y; y = (y << 1) | (y >> 7);
 8000d6c:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8000d70:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8000d74:	4053      	eors	r3, r2
 8000d76:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8000d7a:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	b25a      	sxtb	r2, r3
 8000d82:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8000d86:	09db      	lsrs	r3, r3, #7
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        x ^= y; y = (y << 1) | (y >> 7);
 8000d94:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8000d98:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8000d9c:	4053      	eors	r3, r2
 8000d9e:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8000da2:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	b25a      	sxtb	r2, r3
 8000daa:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8000dae:	09db      	lsrs	r3, r3, #7
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        x ^= y; y = (y << 1) | (y >> 7);
 8000dbc:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8000dc0:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8000dc4:	4053      	eors	r3, r2
 8000dc6:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8000dca:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	b25a      	sxtb	r2, r3
 8000dd2:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8000dd6:	09db      	lsrs	r3, r3, #7
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        x ^= y ^ 0x63;
 8000de4:	f897 2202 	ldrb.w	r2, [r7, #514]	; 0x202
 8000de8:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000dec:	4053      	eors	r3, r2
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f083 0363 	eor.w	r3, r3, #99	; 0x63
 8000df4:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203

        FSb[i] = x;
 8000df8:	4a86      	ldr	r2, [pc, #536]	; (8001014 <aes_gen_tables+0x3c4>)
 8000dfa:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000dfe:	4413      	add	r3, r2
 8000e00:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8000e04:	701a      	strb	r2, [r3, #0]
#if defined(MBEDTLS_AES_NEED_REVERSE_TABLES)
        RSb[x] = (unsigned char) i;
 8000e06:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000e0a:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8000e0e:	b2d1      	uxtb	r1, r2
 8000e10:	4a81      	ldr	r2, [pc, #516]	; (8001018 <aes_gen_tables+0x3c8>)
 8000e12:	54d1      	strb	r1, [r2, r3]
    for (i = 1; i < 256; i++) {
 8000e14:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000e1e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e22:	2bff      	cmp	r3, #255	; 0xff
 8000e24:	dd80      	ble.n	8000d28 <aes_gen_tables+0xd8>
    }

    /*
     * generate the forward and reverse tables
     */
    for (i = 0; i < 256; i++) {
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000e2c:	e131      	b.n	8001092 <aes_gen_tables+0x442>
        x = FSb[i];
 8000e2e:	4a79      	ldr	r2, [pc, #484]	; (8001014 <aes_gen_tables+0x3c4>)
 8000e30:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
        y = XTIME(x);
 8000e3c:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	b25b      	sxtb	r3, r3
 8000e44:	f997 2203 	ldrsb.w	r2, [r7, #515]	; 0x203
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	da01      	bge.n	8000e50 <aes_gen_tables+0x200>
 8000e4c:	221b      	movs	r2, #27
 8000e4e:	e000      	b.n	8000e52 <aes_gen_tables+0x202>
 8000e50:	2200      	movs	r2, #0
 8000e52:	4053      	eors	r3, r2
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        z = y ^ x;
 8000e5a:	f897 2202 	ldrb.w	r2, [r7, #514]	; 0x202
 8000e5e:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000e62:	4053      	eors	r3, r2
 8000e64:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201

        FT0[i] = ((uint32_t) y) ^
 8000e68:	f897 2202 	ldrb.w	r2, [r7, #514]	; 0x202
                 ((uint32_t) x <<  8) ^
 8000e6c:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000e70:	021b      	lsls	r3, r3, #8
        FT0[i] = ((uint32_t) y) ^
 8000e72:	405a      	eors	r2, r3
                 ((uint32_t) x << 16) ^
 8000e74:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000e78:	041b      	lsls	r3, r3, #16
                 ((uint32_t) x <<  8) ^
 8000e7a:	405a      	eors	r2, r3
                 ((uint32_t) z << 24);
 8000e7c:	f897 3201 	ldrb.w	r3, [r7, #513]	; 0x201
 8000e80:	061b      	lsls	r3, r3, #24
                 ((uint32_t) x << 16) ^
 8000e82:	405a      	eors	r2, r3
        FT0[i] = ((uint32_t) y) ^
 8000e84:	4965      	ldr	r1, [pc, #404]	; (800101c <aes_gen_tables+0x3cc>)
 8000e86:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8(FT0[i]);
 8000e8e:	4a63      	ldr	r2, [pc, #396]	; (800101c <aes_gen_tables+0x3cc>)
 8000e90:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e98:	ea4f 6233 	mov.w	r2, r3, ror #24
 8000e9c:	4960      	ldr	r1, [pc, #384]	; (8001020 <aes_gen_tables+0x3d0>)
 8000e9e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8(FT1[i]);
 8000ea6:	4a5e      	ldr	r2, [pc, #376]	; (8001020 <aes_gen_tables+0x3d0>)
 8000ea8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	ea4f 6233 	mov.w	r2, r3, ror #24
 8000eb4:	495b      	ldr	r1, [pc, #364]	; (8001024 <aes_gen_tables+0x3d4>)
 8000eb6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8(FT2[i]);
 8000ebe:	4a59      	ldr	r2, [pc, #356]	; (8001024 <aes_gen_tables+0x3d4>)
 8000ec0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec8:	ea4f 6233 	mov.w	r2, r3, ror #24
 8000ecc:	4956      	ldr	r1, [pc, #344]	; (8001028 <aes_gen_tables+0x3d8>)
 8000ece:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

#if defined(MBEDTLS_AES_NEED_REVERSE_TABLES)
        x = RSb[i];
 8000ed6:	4a50      	ldr	r2, [pc, #320]	; (8001018 <aes_gen_tables+0x3c8>)
 8000ed8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203

        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^
 8000ee4:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d01f      	beq.n	8000f2c <aes_gen_tables+0x2dc>
 8000eec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ef0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000ef4:	7b9b      	ldrb	r3, [r3, #14]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000efc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8000f00:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8000f04:	5cd3      	ldrb	r3, [r2, r3]
 8000f06:	18ca      	adds	r2, r1, r3
 8000f08:	4b48      	ldr	r3, [pc, #288]	; (800102c <aes_gen_tables+0x3dc>)
 8000f0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f0e:	4413      	add	r3, r2
 8000f10:	11d9      	asrs	r1, r3, #7
 8000f12:	17d3      	asrs	r3, r2, #31
 8000f14:	1ac9      	subs	r1, r1, r3
 8000f16:	460b      	mov	r3, r1
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	1a5b      	subs	r3, r3, r1
 8000f1c:	1ad1      	subs	r1, r2, r3
 8000f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f26:	5c5b      	ldrb	r3, [r3, r1]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e000      	b.n	8000f2e <aes_gen_tables+0x2de>
 8000f2c:	2000      	movs	r0, #0
                 ((uint32_t) MUL(0x09, x) <<  8) ^
 8000f2e:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d01f      	beq.n	8000f76 <aes_gen_tables+0x326>
 8000f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f3a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000f3e:	7a5b      	ldrb	r3, [r3, #9]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000f46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8000f4a:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8000f4e:	5cd3      	ldrb	r3, [r2, r3]
 8000f50:	18ca      	adds	r2, r1, r3
 8000f52:	4b36      	ldr	r3, [pc, #216]	; (800102c <aes_gen_tables+0x3dc>)
 8000f54:	fb83 1302 	smull	r1, r3, r3, r2
 8000f58:	4413      	add	r3, r2
 8000f5a:	11d9      	asrs	r1, r3, #7
 8000f5c:	17d3      	asrs	r3, r2, #31
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	460b      	mov	r3, r1
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	1ad1      	subs	r1, r2, r3
 8000f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f70:	5c5b      	ldrb	r3, [r3, r1]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	e000      	b.n	8000f78 <aes_gen_tables+0x328>
 8000f76:	2300      	movs	r3, #0
        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^
 8000f78:	4058      	eors	r0, r3
                 ((uint32_t) MUL(0x0D, x) << 16) ^
 8000f7a:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d01f      	beq.n	8000fc2 <aes_gen_tables+0x372>
 8000f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f86:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000f8a:	7b5b      	ldrb	r3, [r3, #13]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000f92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8000f96:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8000f9a:	5cd3      	ldrb	r3, [r2, r3]
 8000f9c:	18ca      	adds	r2, r1, r3
 8000f9e:	4b23      	ldr	r3, [pc, #140]	; (800102c <aes_gen_tables+0x3dc>)
 8000fa0:	fb83 1302 	smull	r1, r3, r3, r2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	11d9      	asrs	r1, r3, #7
 8000fa8:	17d3      	asrs	r3, r2, #31
 8000faa:	1ac9      	subs	r1, r1, r3
 8000fac:	460b      	mov	r3, r1
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	1ad1      	subs	r1, r2, r3
 8000fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fbc:	5c5b      	ldrb	r3, [r3, r1]
 8000fbe:	041b      	lsls	r3, r3, #16
 8000fc0:	e000      	b.n	8000fc4 <aes_gen_tables+0x374>
 8000fc2:	2300      	movs	r3, #0
                 ((uint32_t) MUL(0x09, x) <<  8) ^
 8000fc4:	4058      	eors	r0, r3
                 ((uint32_t) MUL(0x0B, x) << 24);
 8000fc6:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d030      	beq.n	8001030 <aes_gen_tables+0x3e0>
 8000fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fd2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000fd6:	7adb      	ldrb	r3, [r3, #11]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8000fde:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8000fe2:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8000fe6:	5cd3      	ldrb	r3, [r2, r3]
 8000fe8:	18ca      	adds	r2, r1, r3
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <aes_gen_tables+0x3dc>)
 8000fec:	fb83 1302 	smull	r1, r3, r3, r2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	11d9      	asrs	r1, r3, #7
 8000ff4:	17d3      	asrs	r3, r2, #31
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	1a5b      	subs	r3, r3, r1
 8000ffe:	1ad1      	subs	r1, r2, r3
 8001000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001008:	5c5b      	ldrb	r3, [r3, r1]
 800100a:	061b      	lsls	r3, r3, #24
 800100c:	e011      	b.n	8001032 <aes_gen_tables+0x3e2>
 800100e:	bf00      	nop
 8001010:	20002368 	.word	0x20002368
 8001014:	20000168 	.word	0x20000168
 8001018:	20001268 	.word	0x20001268
 800101c:	20000268 	.word	0x20000268
 8001020:	20000668 	.word	0x20000668
 8001024:	20000a68 	.word	0x20000a68
 8001028:	20000e68 	.word	0x20000e68
 800102c:	80808081 	.word	0x80808081
 8001030:	2300      	movs	r3, #0
                 ((uint32_t) MUL(0x0D, x) << 16) ^
 8001032:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^
 8001036:	491d      	ldr	r1, [pc, #116]	; (80010ac <aes_gen_tables+0x45c>)
 8001038:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800103c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8(RT0[i]);
 8001040:	4a1a      	ldr	r2, [pc, #104]	; (80010ac <aes_gen_tables+0x45c>)
 8001042:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	ea4f 6233 	mov.w	r2, r3, ror #24
 800104e:	4918      	ldr	r1, [pc, #96]	; (80010b0 <aes_gen_tables+0x460>)
 8001050:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8(RT1[i]);
 8001058:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <aes_gen_tables+0x460>)
 800105a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	ea4f 6233 	mov.w	r2, r3, ror #24
 8001066:	4913      	ldr	r1, [pc, #76]	; (80010b4 <aes_gen_tables+0x464>)
 8001068:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8(RT2[i]);
 8001070:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <aes_gen_tables+0x464>)
 8001072:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	ea4f 6233 	mov.w	r2, r3, ror #24
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <aes_gen_tables+0x468>)
 8001080:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (i = 0; i < 256; i++) {
 8001088:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800108c:	3301      	adds	r3, #1
 800108e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001092:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001096:	2bff      	cmp	r3, #255	; 0xff
 8001098:	f77f aec9 	ble.w	8000e2e <aes_gen_tables+0x1de>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
#endif /* MBEDTLS_AES_NEED_REVERSE_TABLES */
    }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	20001368 	.word	0x20001368
 80010b0:	20001768 	.word	0x20001768
 80010b4:	20001b68 	.word	0x20001b68
 80010b8:	20001f68 	.word	0x20001f68

080010bc <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init(mbedtls_aes_context *ctx)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_aes_context));
 80010c4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80010c8:	2100      	movs	r1, #0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f00b fdc0 	bl	800cc50 <memset>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <mbedtls_aes_free>:

void mbedtls_aes_free(mbedtls_aes_context *ctx)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <mbedtls_aes_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_aes_context));
 80010e6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f009 f9b2 	bl	800a454 <mbedtls_platform_zeroize>
 80010f0:	e000      	b.n	80010f4 <mbedtls_aes_free+0x1c>
        return;
 80010f2:	bf00      	nop
}
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <mbedtls_aes_xts_init>:

#if defined(MBEDTLS_CIPHER_MODE_XTS)
void mbedtls_aes_xts_init(mbedtls_aes_xts_context *ctx)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
    mbedtls_aes_init(&ctx->crypt);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffd9 	bl	80010bc <mbedtls_aes_init>
    mbedtls_aes_init(&ctx->tweak);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ffd3 	bl	80010bc <mbedtls_aes_init>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <mbedtls_aes_xts_free>:

void mbedtls_aes_xts_free(mbedtls_aes_xts_context *ctx)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00a      	beq.n	8001142 <mbedtls_aes_xts_free+0x24>
        return;
    }

    mbedtls_aes_free(&ctx->crypt);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ffd2 	bl	80010d8 <mbedtls_aes_free>
    mbedtls_aes_free(&ctx->tweak);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffcc 	bl	80010d8 <mbedtls_aes_free>
 8001140:	e000      	b.n	8001144 <mbedtls_aes_xts_free+0x26>
        return;
 8001142:	bf00      	nop
}
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <mbedtls_aes_rk_offset>:
    (defined(MBEDTLS_AESNI_C) && MBEDTLS_AESNI_HAVE_CODE == 2)
#define MAY_NEED_TO_ALIGN
#endif

MBEDTLS_MAYBE_UNUSED static unsigned mbedtls_aes_rk_offset(uint32_t *buf)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
    }
#else /* MAY_NEED_TO_ALIGN */
    (void) buf;
#endif /* MAY_NEED_TO_ALIGN */

    return 0;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc(mbedtls_aes_context *ctx, const unsigned char *key,
                           unsigned int keybits)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	; 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    switch (keybits) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001172:	d012      	beq.n	800119a <mbedtls_aes_setkey_enc+0x3a>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800117a:	d812      	bhi.n	80011a2 <mbedtls_aes_setkey_enc+0x42>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b80      	cmp	r3, #128	; 0x80
 8001180:	d003      	beq.n	800118a <mbedtls_aes_setkey_enc+0x2a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2bc0      	cmp	r3, #192	; 0xc0
 8001186:	d004      	beq.n	8001192 <mbedtls_aes_setkey_enc+0x32>
 8001188:	e00b      	b.n	80011a2 <mbedtls_aes_setkey_enc+0x42>
        case 128: ctx->nr = 10; break;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	220a      	movs	r2, #10
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e00a      	b.n	80011a8 <mbedtls_aes_setkey_enc+0x48>
#if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
        case 192: ctx->nr = 12; break;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	220c      	movs	r2, #12
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e006      	b.n	80011a8 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	220e      	movs	r2, #14
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e002      	b.n	80011a8 <mbedtls_aes_setkey_enc+0x48>
#endif /* !MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH */
        default: return MBEDTLS_ERR_AES_INVALID_KEY_LENGTH;
 80011a2:	f06f 031f 	mvn.w	r3, #31
 80011a6:	e1b9      	b.n	800151c <mbedtls_aes_setkey_enc+0x3bc>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if (aes_init_done == 0) {
 80011a8:	4b86      	ldr	r3, [pc, #536]	; (80013c4 <mbedtls_aes_setkey_enc+0x264>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d104      	bne.n	80011ba <mbedtls_aes_setkey_enc+0x5a>
        aes_gen_tables();
 80011b0:	f7ff fd4e 	bl	8000c50 <aes_gen_tables>
        aes_init_done = 1;
 80011b4:	4b83      	ldr	r3, [pc, #524]	; (80013c4 <mbedtls_aes_setkey_enc+0x264>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
    }
#endif

    ctx->rk_offset = mbedtls_aes_rk_offset(ctx->buf);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3308      	adds	r3, #8
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ffc3 	bl	800114a <mbedtls_aes_rk_offset>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	605a      	str	r2, [r3, #4]
    RK = ctx->buf + ctx->rk_offset;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f103 0208 	add.w	r2, r3, #8
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        return mbedtls_aesce_setkey_enc((unsigned char *) RK, key, keybits);
    }
#endif

#if !defined(MBEDTLS_AES_USE_HARDWARE_ONLY)
    for (unsigned int i = 0; i < (keybits >> 5); i++) {
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80011de:	e010      	b.n	8001202 <mbedtls_aes_setkey_enc+0xa2>
        RK[i] = MBEDTLS_GET_UINT32_LE(key, i << 2);
 80011e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	441a      	add	r2, r3
 80011e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011ee:	440b      	add	r3, r1
 80011f0:	61ba      	str	r2, [r7, #24]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	6812      	ldr	r2, [r2, #0]
    memcpy(&r, p, sizeof(r));
 80011f6:	617a      	str	r2, [r7, #20]
    return r;
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	601a      	str	r2, [r3, #0]
    for (unsigned int i = 0; i < (keybits >> 5); i++) {
 80011fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fe:	3301      	adds	r3, #1
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	095b      	lsrs	r3, r3, #5
 8001206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001208:	429a      	cmp	r2, r3
 800120a:	d3e9      	bcc.n	80011e0 <mbedtls_aes_setkey_enc+0x80>
    }

    switch (ctx->nr) {
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b0e      	cmp	r3, #14
 8001212:	f000 80d4 	beq.w	80013be <mbedtls_aes_setkey_enc+0x25e>
 8001216:	2b0e      	cmp	r3, #14
 8001218:	f300 817f 	bgt.w	800151a <mbedtls_aes_setkey_enc+0x3ba>
 800121c:	2b0a      	cmp	r3, #10
 800121e:	d002      	beq.n	8001226 <mbedtls_aes_setkey_enc+0xc6>
 8001220:	2b0c      	cmp	r3, #12
 8001222:	d05c      	beq.n	80012de <mbedtls_aes_setkey_enc+0x17e>
 8001224:	e179      	b.n	800151a <mbedtls_aes_setkey_enc+0x3ba>
        case 10:

            for (unsigned int i = 0; i < 10; i++, RK += 4) {
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
 800122a:	e054      	b.n	80012d6 <mbedtls_aes_setkey_enc+0x176>
                RK[4]  = RK[0] ^ round_constants[i] ^
 800122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4965      	ldr	r1, [pc, #404]	; (80013c8 <mbedtls_aes_setkey_enc+0x268>)
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001238:	4053      	eors	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[3])]) ^
 800123a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800123c:	320c      	adds	r2, #12
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	0a12      	lsrs	r2, r2, #8
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	4611      	mov	r1, r2
 8001246:	4a61      	ldr	r2, [pc, #388]	; (80013cc <mbedtls_aes_setkey_enc+0x26c>)
 8001248:	5c52      	ldrb	r2, [r2, r1]
                RK[4]  = RK[0] ^ round_constants[i] ^
 800124a:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[3])] <<  8) ^
 800124c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124e:	330c      	adds	r3, #12
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	0c1b      	lsrs	r3, r3, #16
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4619      	mov	r1, r3
 8001258:	4b5c      	ldr	r3, [pc, #368]	; (80013cc <mbedtls_aes_setkey_enc+0x26c>)
 800125a:	5c5b      	ldrb	r3, [r3, r1]
 800125c:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[3])]) ^
 800125e:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	330c      	adds	r3, #12
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	0e1b      	lsrs	r3, r3, #24
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4619      	mov	r1, r3
 800126c:	4b57      	ldr	r3, [pc, #348]	; (80013cc <mbedtls_aes_setkey_enc+0x26c>)
 800126e:	5c5b      	ldrb	r3, [r3, r1]
 8001270:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[3])] <<  8) ^
 8001272:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[3])] << 24);
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	330c      	adds	r3, #12
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	4b52      	ldr	r3, [pc, #328]	; (80013cc <mbedtls_aes_setkey_enc+0x26c>)
 8001282:	5c9b      	ldrb	r3, [r3, r2]
 8001284:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ round_constants[i] ^
 8001286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001288:	3310      	adds	r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 800128a:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ round_constants[i] ^
 800128c:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	3304      	adds	r3, #4
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001296:	3310      	adds	r3, #16
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129c:	3314      	adds	r3, #20
 800129e:	404a      	eors	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 80012a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a4:	3308      	adds	r3, #8
 80012a6:	6819      	ldr	r1, [r3, #0]
 80012a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012aa:	3314      	adds	r3, #20
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b0:	3318      	adds	r3, #24
 80012b2:	404a      	eors	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 80012b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b8:	330c      	adds	r3, #12
 80012ba:	6819      	ldr	r1, [r3, #0]
 80012bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012be:	3318      	adds	r3, #24
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	331c      	adds	r3, #28
 80012c6:	404a      	eors	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
            for (unsigned int i = 0; i < 10; i++, RK += 4) {
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	3301      	adds	r3, #1
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
 80012d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d2:	3310      	adds	r3, #16
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	2b09      	cmp	r3, #9
 80012da:	d9a7      	bls.n	800122c <mbedtls_aes_setkey_enc+0xcc>
            }
            break;
 80012dc:	e11d      	b.n	800151a <mbedtls_aes_setkey_enc+0x3ba>

#if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
        case 12:

            for (unsigned int i = 0; i < 8; i++, RK += 6) {
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
 80012e2:	e068      	b.n	80013b6 <mbedtls_aes_setkey_enc+0x256>
                RK[6]  = RK[0] ^ round_constants[i] ^
 80012e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4937      	ldr	r1, [pc, #220]	; (80013c8 <mbedtls_aes_setkey_enc+0x268>)
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012f0:	4053      	eors	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[5])]) ^
 80012f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012f4:	3214      	adds	r2, #20
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	0a12      	lsrs	r2, r2, #8
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	4611      	mov	r1, r2
 80012fe:	4a33      	ldr	r2, [pc, #204]	; (80013cc <mbedtls_aes_setkey_enc+0x26c>)
 8001300:	5c52      	ldrb	r2, [r2, r1]
                RK[6]  = RK[0] ^ round_constants[i] ^
 8001302:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[5])] <<  8) ^
 8001304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001306:	3314      	adds	r3, #20
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	0c1b      	lsrs	r3, r3, #16
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4619      	mov	r1, r3
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <mbedtls_aes_setkey_enc+0x26c>)
 8001312:	5c5b      	ldrb	r3, [r3, r1]
 8001314:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[5])]) ^
 8001316:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 8001318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131a:	3314      	adds	r3, #20
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	0e1b      	lsrs	r3, r3, #24
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4619      	mov	r1, r3
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <mbedtls_aes_setkey_enc+0x26c>)
 8001326:	5c5b      	ldrb	r3, [r3, r1]
 8001328:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[5])] <<  8) ^
 800132a:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[5])] << 24);
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	3314      	adds	r3, #20
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <mbedtls_aes_setkey_enc+0x26c>)
 800133a:	5c9b      	ldrb	r3, [r3, r2]
 800133c:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ round_constants[i] ^
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	3318      	adds	r3, #24
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 8001342:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ round_constants[i] ^
 8001344:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	3304      	adds	r3, #4
 800134a:	6819      	ldr	r1, [r3, #0]
 800134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134e:	3318      	adds	r3, #24
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	331c      	adds	r3, #28
 8001356:	404a      	eors	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	3308      	adds	r3, #8
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001362:	331c      	adds	r3, #28
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001368:	3320      	adds	r3, #32
 800136a:	404a      	eors	r2, r1
 800136c:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 800136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001370:	330c      	adds	r3, #12
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001376:	3320      	adds	r3, #32
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137c:	3324      	adds	r3, #36	; 0x24
 800137e:	404a      	eors	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8001382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001384:	3310      	adds	r3, #16
 8001386:	6819      	ldr	r1, [r3, #0]
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138a:	3324      	adds	r3, #36	; 0x24
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001390:	3328      	adds	r3, #40	; 0x28
 8001392:	404a      	eors	r2, r1
 8001394:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	3314      	adds	r3, #20
 800139a:	6819      	ldr	r1, [r3, #0]
 800139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139e:	3328      	adds	r3, #40	; 0x28
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	332c      	adds	r3, #44	; 0x2c
 80013a6:	404a      	eors	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]
            for (unsigned int i = 0; i < 8; i++, RK += 6) {
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	3301      	adds	r3, #1
 80013ae:	623b      	str	r3, [r7, #32]
 80013b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b2:	3318      	adds	r3, #24
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	2b07      	cmp	r3, #7
 80013ba:	d993      	bls.n	80012e4 <mbedtls_aes_setkey_enc+0x184>
            }
            break;
 80013bc:	e0ad      	b.n	800151a <mbedtls_aes_setkey_enc+0x3ba>

        case 14:

            for (unsigned int i = 0; i < 7; i++, RK += 8) {
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	e0a5      	b.n	8001510 <mbedtls_aes_setkey_enc+0x3b0>
 80013c4:	20002390 	.word	0x20002390
 80013c8:	20002368 	.word	0x20002368
 80013cc:	20000168 	.word	0x20000168
                RK[8]  = RK[0] ^ round_constants[i] ^
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4953      	ldr	r1, [pc, #332]	; (8001524 <mbedtls_aes_setkey_enc+0x3c4>)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013dc:	4053      	eors	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[7])]) ^
 80013de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e0:	321c      	adds	r2, #28
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	0a12      	lsrs	r2, r2, #8
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	4611      	mov	r1, r2
 80013ea:	4a4f      	ldr	r2, [pc, #316]	; (8001528 <mbedtls_aes_setkey_enc+0x3c8>)
 80013ec:	5c52      	ldrb	r2, [r2, r1]
                RK[8]  = RK[0] ^ round_constants[i] ^
 80013ee:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[7])] <<  8) ^
 80013f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f2:	331c      	adds	r3, #28
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	0c1b      	lsrs	r3, r3, #16
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	4619      	mov	r1, r3
 80013fc:	4b4a      	ldr	r3, [pc, #296]	; (8001528 <mbedtls_aes_setkey_enc+0x3c8>)
 80013fe:	5c5b      	ldrb	r3, [r3, r1]
 8001400:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[7])]) ^
 8001402:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 8001404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001406:	331c      	adds	r3, #28
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0e1b      	lsrs	r3, r3, #24
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4619      	mov	r1, r3
 8001410:	4b45      	ldr	r3, [pc, #276]	; (8001528 <mbedtls_aes_setkey_enc+0x3c8>)
 8001412:	5c5b      	ldrb	r3, [r3, r1]
 8001414:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[7])] <<  8) ^
 8001416:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[7])] << 24);
 800141a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141c:	331c      	adds	r3, #28
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	4b40      	ldr	r3, [pc, #256]	; (8001528 <mbedtls_aes_setkey_enc+0x3c8>)
 8001426:	5c9b      	ldrb	r3, [r3, r2]
 8001428:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ round_constants[i] ^
 800142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142c:	3320      	adds	r3, #32
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 800142e:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ round_constants[i] ^
 8001430:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8001432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001434:	3304      	adds	r3, #4
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800143a:	3320      	adds	r3, #32
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001440:	3324      	adds	r3, #36	; 0x24
 8001442:	404a      	eors	r2, r1
 8001444:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8001446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001448:	3308      	adds	r3, #8
 800144a:	6819      	ldr	r1, [r3, #0]
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	3324      	adds	r3, #36	; 0x24
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	3328      	adds	r3, #40	; 0x28
 8001456:	404a      	eors	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 800145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145c:	330c      	adds	r3, #12
 800145e:	6819      	ldr	r1, [r3, #0]
 8001460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001462:	3328      	adds	r3, #40	; 0x28
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001468:	332c      	adds	r3, #44	; 0x2c
 800146a:	404a      	eors	r2, r1
 800146c:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 800146e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001470:	3310      	adds	r3, #16
 8001472:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[11])]) ^
 8001474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001476:	322c      	adds	r2, #44	; 0x2c
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	4611      	mov	r1, r2
 800147e:	4a2a      	ldr	r2, [pc, #168]	; (8001528 <mbedtls_aes_setkey_enc+0x3c8>)
 8001480:	5c52      	ldrb	r2, [r2, r1]
                RK[12] = RK[4] ^
 8001482:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[11])] <<  8) ^
 8001484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001486:	332c      	adds	r3, #44	; 0x2c
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4619      	mov	r1, r3
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <mbedtls_aes_setkey_enc+0x3c8>)
 8001492:	5c5b      	ldrb	r3, [r3, r1]
 8001494:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[11])]) ^
 8001496:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^
 8001498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149a:	332c      	adds	r3, #44	; 0x2c
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	0c1b      	lsrs	r3, r3, #16
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4619      	mov	r1, r3
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <mbedtls_aes_setkey_enc+0x3c8>)
 80014a6:	5c5b      	ldrb	r3, [r3, r1]
 80014a8:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[11])] <<  8) ^
 80014aa:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[11])] << 24);
 80014ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b0:	332c      	adds	r3, #44	; 0x2c
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0e1b      	lsrs	r3, r3, #24
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <mbedtls_aes_setkey_enc+0x3c8>)
 80014bc:	5c9b      	ldrb	r3, [r3, r2]
 80014be:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 80014c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c2:	3330      	adds	r3, #48	; 0x30
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^
 80014c4:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 80014c6:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 80014c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ca:	3314      	adds	r3, #20
 80014cc:	6819      	ldr	r1, [r3, #0]
 80014ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d0:	3330      	adds	r3, #48	; 0x30
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d6:	3334      	adds	r3, #52	; 0x34
 80014d8:	404a      	eors	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 80014dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014de:	3318      	adds	r3, #24
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e4:	3334      	adds	r3, #52	; 0x34
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	3338      	adds	r3, #56	; 0x38
 80014ec:	404a      	eors	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	331c      	adds	r3, #28
 80014f4:	6819      	ldr	r1, [r3, #0]
 80014f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f8:	3338      	adds	r3, #56	; 0x38
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fe:	333c      	adds	r3, #60	; 0x3c
 8001500:	404a      	eors	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
            for (unsigned int i = 0; i < 7; i++, RK += 8) {
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3301      	adds	r3, #1
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	3320      	adds	r3, #32
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b06      	cmp	r3, #6
 8001514:	f67f af5c 	bls.w	80013d0 <mbedtls_aes_setkey_enc+0x270>
            }
            break;
 8001518:	bf00      	nop
#endif /* !MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH */
    }

    return 0;
 800151a:	2300      	movs	r3, #0
#endif /* !MBEDTLS_AES_USE_HARDWARE_ONLY */
}
 800151c:	4618      	mov	r0, r3
 800151e:	3730      	adds	r7, #48	; 0x30
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20002368 	.word	0x20002368
 8001528:	20000168 	.word	0x20000168

0800152c <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT) && !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
int mbedtls_aes_setkey_dec(mbedtls_aes_context *ctx, const unsigned char *key,
                           unsigned int keybits)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b0d0      	sub	sp, #320	; 0x140
 8001530:	af00      	add	r7, sp, #0
 8001532:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001536:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800153a:	6018      	str	r0, [r3, #0]
 800153c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001540:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001544:	6019      	str	r1, [r3, #0]
 8001546:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800154a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800154e:	601a      	str	r2, [r3, #0]
    int ret;
    mbedtls_aes_context cty;
    uint32_t *RK;


    mbedtls_aes_init(&cty);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fdb1 	bl	80010bc <mbedtls_aes_init>

    ctx->rk_offset = mbedtls_aes_rk_offset(ctx->buf);
 800155a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800155e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3308      	adds	r3, #8
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fdef 	bl	800114a <mbedtls_aes_rk_offset>
 800156c:	4602      	mov	r2, r0
 800156e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001572:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
    RK = ctx->buf + ctx->rk_offset;
 800157a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800157e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f103 0208 	add.w	r2, r3, #8
 8001588:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800158c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Also checks keybits */
    if ((ret = mbedtls_aes_setkey_enc(&cty, key, keybits)) != 0) {
 800159c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80015a0:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 80015a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80015a8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015ac:	f107 0014 	add.w	r0, r7, #20
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	6819      	ldr	r1, [r3, #0]
 80015b4:	f7ff fdd4 	bl	8001160 <mbedtls_aes_setkey_enc>
 80015b8:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 80015bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f040 80e7 	bne.w	8001794 <mbedtls_aes_setkey_dec+0x268>
        goto exit;
    }

    ctx->nr = cty.nr;
 80015c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80015ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80015d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	601a      	str	r2, [r3, #0]
        goto exit;
    }
#endif

#if !defined(MBEDTLS_AES_USE_HARDWARE_ONLY)
    SK = cty.buf + cty.rk_offset + cty.nr * 4;
 80015dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80015e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80015ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	f107 0214 	add.w	r2, r7, #20
 80015fa:	3208      	adds	r2, #8
 80015fc:	4413      	add	r3, r2
 80015fe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    *RK++ = *SK++;
 8001602:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001606:	1d13      	adds	r3, r2, #4
 8001608:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800160c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001610:	1d19      	adds	r1, r3, #4
 8001612:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800161a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800161e:	1d13      	adds	r3, r2, #4
 8001620:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001624:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001628:	1d19      	adds	r1, r3, #4
 800162a:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8001632:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001636:	1d13      	adds	r3, r2, #4
 8001638:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800163c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001640:	1d19      	adds	r1, r3, #4
 8001642:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800164a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800164e:	1d13      	adds	r3, r2, #4
 8001650:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001654:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001658:	1d19      	adds	r1, r3, #4
 800165a:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	601a      	str	r2, [r3, #0]
    SK -= 8;
 8001662:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001666:	3b20      	subs	r3, #32
 8001668:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    for (int i = ctx->nr - 1; i > 0; i--, SK -= 8) {
 800166c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001670:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3b01      	subs	r3, #1
 800167a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800167e:	e054      	b.n	800172a <mbedtls_aes_setkey_dec+0x1fe>
        for (int j = 0; j < 4; j++, SK++) {
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001686:	e042      	b.n	800170e <mbedtls_aes_setkey_dec+0x1e2>
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 8001688:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	461a      	mov	r2, r3
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <mbedtls_aes_setkey_dec+0x284>)
 8001694:	5c9b      	ldrb	r3, [r3, r2]
 8001696:	461a      	mov	r2, r3
 8001698:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <mbedtls_aes_setkey_dec+0x288>)
 800169a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1(FSb[MBEDTLS_BYTE_1(*SK)]) ^
 800169e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4619      	mov	r1, r3
 80016aa:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <mbedtls_aes_setkey_dec+0x284>)
 80016ac:	5c5b      	ldrb	r3, [r3, r1]
 80016ae:	4619      	mov	r1, r3
 80016b0:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <mbedtls_aes_setkey_dec+0x28c>)
 80016b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 80016b6:	405a      	eors	r2, r3
                    AES_RT2(FSb[MBEDTLS_BYTE_2(*SK)]) ^
 80016b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4619      	mov	r1, r3
 80016c4:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <mbedtls_aes_setkey_dec+0x284>)
 80016c6:	5c5b      	ldrb	r3, [r3, r1]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4b3c      	ldr	r3, [pc, #240]	; (80017bc <mbedtls_aes_setkey_dec+0x290>)
 80016cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1(FSb[MBEDTLS_BYTE_1(*SK)]) ^
 80016d0:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3(FSb[MBEDTLS_BYTE_3(*SK)]);
 80016d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	0e1b      	lsrs	r3, r3, #24
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <mbedtls_aes_setkey_dec+0x284>)
 80016e2:	5c9b      	ldrb	r3, [r3, r2]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <mbedtls_aes_setkey_dec+0x294>)
 80016e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 80016ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80016f0:	1d18      	adds	r0, r3, #4
 80016f2:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
                    AES_RT2(FSb[MBEDTLS_BYTE_2(*SK)]) ^
 80016f6:	404a      	eors	r2, r1
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 80016f8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 4; j++, SK++) {
 80016fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016fe:	3301      	adds	r3, #1
 8001700:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001704:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001708:	3304      	adds	r3, #4
 800170a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800170e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001712:	2b03      	cmp	r3, #3
 8001714:	ddb8      	ble.n	8001688 <mbedtls_aes_setkey_dec+0x15c>
    for (int i = ctx->nr - 1; i > 0; i--, SK -= 8) {
 8001716:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800171a:	3b01      	subs	r3, #1
 800171c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001720:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001724:	3b20      	subs	r3, #32
 8001726:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800172a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800172e:	2b00      	cmp	r3, #0
 8001730:	dca6      	bgt.n	8001680 <mbedtls_aes_setkey_dec+0x154>
        }
    }

    *RK++ = *SK++;
 8001732:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001736:	1d13      	adds	r3, r2, #4
 8001738:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800173c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001740:	1d19      	adds	r1, r3, #4
 8001742:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800174a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800174e:	1d13      	adds	r3, r2, #4
 8001750:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001754:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001758:	1d19      	adds	r1, r3, #4
 800175a:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8001762:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001766:	1d13      	adds	r3, r2, #4
 8001768:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800176c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001770:	1d19      	adds	r1, r3, #4
 8001772:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800177a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800177e:	1d13      	adds	r3, r2, #4
 8001780:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001784:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001788:	1d19      	adds	r1, r3, #4
 800178a:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e000      	b.n	8001796 <mbedtls_aes_setkey_dec+0x26a>
        goto exit;
 8001794:	bf00      	nop
#endif /* !MBEDTLS_AES_USE_HARDWARE_ONLY */
exit:
    mbedtls_aes_free(&cty);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fc9c 	bl	80010d8 <mbedtls_aes_free>

    return ret;
 80017a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000168 	.word	0x20000168
 80017b4:	20001368 	.word	0x20001368
 80017b8:	20001768 	.word	0x20001768
 80017bc:	20001b68 	.word	0x20001b68
 80017c0:	20001f68 	.word	0x20001f68

080017c4 <mbedtls_aes_xts_decode_keys>:
                                       unsigned int keybits,
                                       const unsigned char **key1,
                                       unsigned int *key1bits,
                                       const unsigned char **key2,
                                       unsigned int *key2bits)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
    const unsigned int half_keybits = keybits / 2;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
    const unsigned int half_keybytes = half_keybits / 8;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	08db      	lsrs	r3, r3, #3
 80017dc:	613b      	str	r3, [r7, #16]

    switch (keybits) {
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e4:	d006      	beq.n	80017f4 <mbedtls_aes_xts_decode_keys+0x30>
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ec:	d004      	beq.n	80017f8 <mbedtls_aes_xts_decode_keys+0x34>
        case 256: break;
        case 512: break;
        default: return MBEDTLS_ERR_AES_INVALID_KEY_LENGTH;
 80017ee:	f06f 031f 	mvn.w	r3, #31
 80017f2:	e011      	b.n	8001818 <mbedtls_aes_xts_decode_keys+0x54>
        case 256: break;
 80017f4:	bf00      	nop
 80017f6:	e000      	b.n	80017fa <mbedtls_aes_xts_decode_keys+0x36>
        case 512: break;
 80017f8:	bf00      	nop
    }

    *key1bits = half_keybits;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	601a      	str	r2, [r3, #0]
    *key2bits = half_keybits;
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	601a      	str	r2, [r3, #0]
    *key1 = &key[0];
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	601a      	str	r2, [r3, #0]
    *key2 = &key[half_keybytes];
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	441a      	add	r2, r3
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	601a      	str	r2, [r3, #0]

    return 0;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <mbedtls_aes_xts_setkey_enc>:

int mbedtls_aes_xts_setkey_enc(mbedtls_aes_xts_context *ctx,
                               const unsigned char *key,
                               unsigned int keybits)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8001830:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *key1, *key2;
    unsigned int key1bits, key2bits;

    ret = mbedtls_aes_xts_decode_keys(key, keybits, &key1, &key1bits,
 8001836:	f107 0118 	add.w	r1, r7, #24
 800183a:	f107 0220 	add.w	r2, r7, #32
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	460b      	mov	r3, r1
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	68b8      	ldr	r0, [r7, #8]
 8001850:	f7ff ffb8 	bl	80017c4 <mbedtls_aes_xts_decode_keys>
 8001854:	6278      	str	r0, [r7, #36]	; 0x24
                                      &key2, &key2bits);
    if (ret != 0) {
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <mbedtls_aes_xts_setkey_enc+0x3c>
        return ret;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	e014      	b.n	800188a <mbedtls_aes_xts_setkey_enc+0x66>
    }

    /* Set the tweak key. Always set tweak key for the encryption mode. */
    ret = mbedtls_aes_setkey_enc(&ctx->tweak, key2, key2bits);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001866:	69f9      	ldr	r1, [r7, #28]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fc78 	bl	8001160 <mbedtls_aes_setkey_enc>
 8001870:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret != 0) {
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <mbedtls_aes_xts_setkey_enc+0x58>
        return ret;
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	e006      	b.n	800188a <mbedtls_aes_xts_setkey_enc+0x66>
    }

    /* Set crypt key for encryption. */
    return mbedtls_aes_setkey_enc(&ctx->crypt, key1, key1bits);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6a39      	ldr	r1, [r7, #32]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fc6c 	bl	8001160 <mbedtls_aes_setkey_enc>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <mbedtls_aes_xts_setkey_dec>:

int mbedtls_aes_xts_setkey_dec(mbedtls_aes_xts_context *ctx,
                               const unsigned char *key,
                               unsigned int keybits)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b08c      	sub	sp, #48	; 0x30
 8001896:	af02      	add	r7, sp, #8
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800189e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *key1, *key2;
    unsigned int key1bits, key2bits;

    ret = mbedtls_aes_xts_decode_keys(key, keybits, &key1, &key1bits,
 80018a4:	f107 0118 	add.w	r1, r7, #24
 80018a8:	f107 0220 	add.w	r2, r7, #32
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	460b      	mov	r3, r1
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	68b8      	ldr	r0, [r7, #8]
 80018be:	f7ff ff81 	bl	80017c4 <mbedtls_aes_xts_decode_keys>
 80018c2:	6278      	str	r0, [r7, #36]	; 0x24
                                      &key2, &key2bits);
    if (ret != 0) {
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <mbedtls_aes_xts_setkey_dec+0x3c>
        return ret;
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	e014      	b.n	80018f8 <mbedtls_aes_xts_setkey_dec+0x66>
    }

    /* Set the tweak key. Always set tweak key for encryption. */
    ret = mbedtls_aes_setkey_enc(&ctx->tweak, key2, key2bits);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80018d4:	69f9      	ldr	r1, [r7, #28]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fc41 	bl	8001160 <mbedtls_aes_setkey_enc>
 80018de:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret != 0) {
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <mbedtls_aes_xts_setkey_dec+0x58>
        return ret;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	e006      	b.n	80018f8 <mbedtls_aes_xts_setkey_dec+0x66>
    }

    /* Set crypt key for decryption. */
    return mbedtls_aes_setkey_dec(&ctx->crypt, key1, key1bits);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a39      	ldr	r1, [r7, #32]
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe1b 	bl	800152c <mbedtls_aes_setkey_dec>
 80018f6:	4603      	mov	r3, r0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3728      	adds	r7, #40	; 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt(mbedtls_aes_context *ctx,
                                 const unsigned char input[16],
                                 unsigned char output[16])
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b09e      	sub	sp, #120	; 0x78
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->buf + ctx->rk_offset;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f103 0208 	add.w	r2, r3, #8
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	677b      	str	r3, [r7, #116]	; 0x74
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	663b      	str	r3, [r7, #96]	; 0x60
 8001920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001922:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8001924:	61fb      	str	r3, [r7, #28]
    return r;
 8001926:	69fb      	ldr	r3, [r7, #28]
    struct {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE(input,  0); t.X[0] ^= *RK++;
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
 800192a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800192c:	1d1a      	adds	r2, r3, #4
 800192e:	677a      	str	r2, [r7, #116]	; 0x74
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001934:	4053      	eors	r3, r2
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
    t.X[1] = MBEDTLS_GET_UINT32_LE(input,  4); t.X[1] ^= *RK++;
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	3304      	adds	r3, #4
 800193c:	667b      	str	r3, [r7, #100]	; 0x64
 800193e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001940:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8001942:	61bb      	str	r3, [r7, #24]
    return r;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	637b      	str	r3, [r7, #52]	; 0x34
 8001948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800194a:	1d1a      	adds	r2, r3, #4
 800194c:	677a      	str	r2, [r7, #116]	; 0x74
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001952:	4053      	eors	r3, r2
 8001954:	637b      	str	r3, [r7, #52]	; 0x34
    t.X[2] = MBEDTLS_GET_UINT32_LE(input,  8); t.X[2] ^= *RK++;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	3308      	adds	r3, #8
 800195a:	66bb      	str	r3, [r7, #104]	; 0x68
 800195c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800195e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8001960:	617b      	str	r3, [r7, #20]
    return r;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	63bb      	str	r3, [r7, #56]	; 0x38
 8001966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001968:	1d1a      	adds	r2, r3, #4
 800196a:	677a      	str	r2, [r7, #116]	; 0x74
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001970:	4053      	eors	r3, r2
 8001972:	63bb      	str	r3, [r7, #56]	; 0x38
    t.X[3] = MBEDTLS_GET_UINT32_LE(input, 12); t.X[3] ^= *RK++;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	330c      	adds	r3, #12
 8001978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800197a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800197c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800197e:	613b      	str	r3, [r7, #16]
    return r;
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001986:	1d1a      	adds	r2, r3, #4
 8001988:	677a      	str	r2, [r7, #116]	; 0x74
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800198e:	4053      	eors	r3, r2
 8001990:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	105b      	asrs	r3, r3, #1
 8001998:	3b01      	subs	r3, #1
 800199a:	673b      	str	r3, [r7, #112]	; 0x70
 800199c:	e122      	b.n	8001be4 <mbedtls_internal_aes_encrypt+0x2e4>
        AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 800199e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019a0:	1d1a      	adds	r2, r3, #4
 80019a2:	677a      	str	r2, [r7, #116]	; 0x74
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	4619      	mov	r1, r3
 80019ac:	4bb0      	ldr	r3, [pc, #704]	; (8001c70 <mbedtls_internal_aes_encrypt+0x370>)
 80019ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019b2:	405a      	eors	r2, r3
 80019b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4619      	mov	r1, r3
 80019bc:	4bad      	ldr	r3, [pc, #692]	; (8001c74 <mbedtls_internal_aes_encrypt+0x374>)
 80019be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019c2:	405a      	eors	r2, r3
 80019c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c6:	0c1b      	lsrs	r3, r3, #16
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4619      	mov	r1, r3
 80019cc:	4baa      	ldr	r3, [pc, #680]	; (8001c78 <mbedtls_internal_aes_encrypt+0x378>)
 80019ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019d2:	405a      	eors	r2, r3
 80019d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d6:	0e1b      	lsrs	r3, r3, #24
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4619      	mov	r1, r3
 80019dc:	4ba7      	ldr	r3, [pc, #668]	; (8001c7c <mbedtls_internal_aes_encrypt+0x37c>)
 80019de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019e2:	4053      	eors	r3, r2
 80019e4:	643b      	str	r3, [r7, #64]	; 0x40
 80019e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019e8:	1d1a      	adds	r2, r3, #4
 80019ea:	677a      	str	r2, [r7, #116]	; 0x74
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	4619      	mov	r1, r3
 80019f4:	4b9e      	ldr	r3, [pc, #632]	; (8001c70 <mbedtls_internal_aes_encrypt+0x370>)
 80019f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019fa:	405a      	eors	r2, r3
 80019fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	4619      	mov	r1, r3
 8001a04:	4b9b      	ldr	r3, [pc, #620]	; (8001c74 <mbedtls_internal_aes_encrypt+0x374>)
 8001a06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a0a:	405a      	eors	r2, r3
 8001a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a0e:	0c1b      	lsrs	r3, r3, #16
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4619      	mov	r1, r3
 8001a14:	4b98      	ldr	r3, [pc, #608]	; (8001c78 <mbedtls_internal_aes_encrypt+0x378>)
 8001a16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a1a:	405a      	eors	r2, r3
 8001a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1e:	0e1b      	lsrs	r3, r3, #24
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4619      	mov	r1, r3
 8001a24:	4b95      	ldr	r3, [pc, #596]	; (8001c7c <mbedtls_internal_aes_encrypt+0x37c>)
 8001a26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a2a:	4053      	eors	r3, r2
 8001a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8001a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a30:	1d1a      	adds	r2, r3, #4
 8001a32:	677a      	str	r2, [r7, #116]	; 0x74
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4b8c      	ldr	r3, [pc, #560]	; (8001c70 <mbedtls_internal_aes_encrypt+0x370>)
 8001a3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a42:	405a      	eors	r2, r3
 8001a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4b89      	ldr	r3, [pc, #548]	; (8001c74 <mbedtls_internal_aes_encrypt+0x374>)
 8001a4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a52:	405a      	eors	r2, r3
 8001a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4b86      	ldr	r3, [pc, #536]	; (8001c78 <mbedtls_internal_aes_encrypt+0x378>)
 8001a5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a62:	405a      	eors	r2, r3
 8001a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a66:	0e1b      	lsrs	r3, r3, #24
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4b83      	ldr	r3, [pc, #524]	; (8001c7c <mbedtls_internal_aes_encrypt+0x37c>)
 8001a6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a72:	4053      	eors	r3, r2
 8001a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a78:	1d1a      	adds	r2, r3, #4
 8001a7a:	677a      	str	r2, [r7, #116]	; 0x74
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	4b7a      	ldr	r3, [pc, #488]	; (8001c70 <mbedtls_internal_aes_encrypt+0x370>)
 8001a86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a8a:	405a      	eors	r2, r3
 8001a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4619      	mov	r1, r3
 8001a94:	4b77      	ldr	r3, [pc, #476]	; (8001c74 <mbedtls_internal_aes_encrypt+0x374>)
 8001a96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a9a:	405a      	eors	r2, r3
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9e:	0c1b      	lsrs	r3, r3, #16
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4b74      	ldr	r3, [pc, #464]	; (8001c78 <mbedtls_internal_aes_encrypt+0x378>)
 8001aa6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001aaa:	405a      	eors	r2, r3
 8001aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aae:	0e1b      	lsrs	r3, r3, #24
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4b71      	ldr	r3, [pc, #452]	; (8001c7c <mbedtls_internal_aes_encrypt+0x37c>)
 8001ab6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001aba:	4053      	eors	r3, r2
 8001abc:	64fb      	str	r3, [r7, #76]	; 0x4c
        AES_FROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 8001abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ac0:	1d1a      	adds	r2, r3, #4
 8001ac2:	677a      	str	r2, [r7, #116]	; 0x74
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	4b68      	ldr	r3, [pc, #416]	; (8001c70 <mbedtls_internal_aes_encrypt+0x370>)
 8001ace:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ad2:	405a      	eors	r2, r3
 8001ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	4619      	mov	r1, r3
 8001adc:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <mbedtls_internal_aes_encrypt+0x374>)
 8001ade:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ae2:	405a      	eors	r2, r3
 8001ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae6:	0c1b      	lsrs	r3, r3, #16
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	4619      	mov	r1, r3
 8001aec:	4b62      	ldr	r3, [pc, #392]	; (8001c78 <mbedtls_internal_aes_encrypt+0x378>)
 8001aee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001af2:	405a      	eors	r2, r3
 8001af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af6:	0e1b      	lsrs	r3, r3, #24
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	4b5f      	ldr	r3, [pc, #380]	; (8001c7c <mbedtls_internal_aes_encrypt+0x37c>)
 8001afe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b02:	4053      	eors	r3, r2
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
 8001b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b08:	1d1a      	adds	r2, r3, #4
 8001b0a:	677a      	str	r2, [r7, #116]	; 0x74
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	4619      	mov	r1, r3
 8001b14:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <mbedtls_internal_aes_encrypt+0x370>)
 8001b16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b1a:	405a      	eors	r2, r3
 8001b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	4619      	mov	r1, r3
 8001b24:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <mbedtls_internal_aes_encrypt+0x374>)
 8001b26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b2a:	405a      	eors	r2, r3
 8001b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2e:	0c1b      	lsrs	r3, r3, #16
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	4619      	mov	r1, r3
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <mbedtls_internal_aes_encrypt+0x378>)
 8001b36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b3a:	405a      	eors	r2, r3
 8001b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b3e:	0e1b      	lsrs	r3, r3, #24
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	4619      	mov	r1, r3
 8001b44:	4b4d      	ldr	r3, [pc, #308]	; (8001c7c <mbedtls_internal_aes_encrypt+0x37c>)
 8001b46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b4a:	4053      	eors	r3, r2
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b50:	1d1a      	adds	r2, r3, #4
 8001b52:	677a      	str	r2, [r7, #116]	; 0x74
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <mbedtls_internal_aes_encrypt+0x370>)
 8001b5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b62:	405a      	eors	r2, r3
 8001b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <mbedtls_internal_aes_encrypt+0x374>)
 8001b6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b72:	405a      	eors	r2, r3
 8001b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b76:	0c1b      	lsrs	r3, r3, #16
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <mbedtls_internal_aes_encrypt+0x378>)
 8001b7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b82:	405a      	eors	r2, r3
 8001b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b86:	0e1b      	lsrs	r3, r3, #24
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <mbedtls_internal_aes_encrypt+0x37c>)
 8001b8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b92:	4053      	eors	r3, r2
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b98:	1d1a      	adds	r2, r3, #4
 8001b9a:	677a      	str	r2, [r7, #116]	; 0x74
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <mbedtls_internal_aes_encrypt+0x370>)
 8001ba6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001baa:	405a      	eors	r2, r3
 8001bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <mbedtls_internal_aes_encrypt+0x374>)
 8001bb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bba:	405a      	eors	r2, r3
 8001bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bbe:	0c1b      	lsrs	r3, r3, #16
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <mbedtls_internal_aes_encrypt+0x378>)
 8001bc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bca:	405a      	eors	r2, r3
 8001bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bce:	0e1b      	lsrs	r3, r3, #24
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <mbedtls_internal_aes_encrypt+0x37c>)
 8001bd6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bda:	4053      	eors	r3, r2
 8001bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 8001bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001be0:	3b01      	subs	r3, #1
 8001be2:	673b      	str	r3, [r7, #112]	; 0x70
 8001be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f73f aed9 	bgt.w	800199e <mbedtls_internal_aes_encrypt+0x9e>
    }

    AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8001bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bee:	1d1a      	adds	r2, r3, #4
 8001bf0:	677a      	str	r2, [r7, #116]	; 0x74
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <mbedtls_internal_aes_encrypt+0x370>)
 8001bfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c00:	405a      	eors	r2, r3
 8001c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <mbedtls_internal_aes_encrypt+0x374>)
 8001c0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c10:	405a      	eors	r2, r3
 8001c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <mbedtls_internal_aes_encrypt+0x378>)
 8001c1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c20:	405a      	eors	r2, r3
 8001c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c24:	0e1b      	lsrs	r3, r3, #24
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <mbedtls_internal_aes_encrypt+0x37c>)
 8001c2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c30:	4053      	eors	r3, r2
 8001c32:	643b      	str	r3, [r7, #64]	; 0x40
 8001c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c36:	1d1a      	adds	r2, r3, #4
 8001c38:	677a      	str	r2, [r7, #116]	; 0x74
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4619      	mov	r1, r3
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <mbedtls_internal_aes_encrypt+0x370>)
 8001c44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c48:	405a      	eors	r2, r3
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	4619      	mov	r1, r3
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <mbedtls_internal_aes_encrypt+0x374>)
 8001c54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c58:	405a      	eors	r2, r3
 8001c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c5c:	0c1b      	lsrs	r3, r3, #16
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4619      	mov	r1, r3
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <mbedtls_internal_aes_encrypt+0x378>)
 8001c64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c68:	405a      	eors	r2, r3
 8001c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6c:	e008      	b.n	8001c80 <mbedtls_internal_aes_encrypt+0x380>
 8001c6e:	bf00      	nop
 8001c70:	20000268 	.word	0x20000268
 8001c74:	20000668 	.word	0x20000668
 8001c78:	20000a68 	.word	0x20000a68
 8001c7c:	20000e68 	.word	0x20000e68
 8001c80:	0e1b      	lsrs	r3, r3, #24
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4619      	mov	r1, r3
 8001c86:	4b84      	ldr	r3, [pc, #528]	; (8001e98 <mbedtls_internal_aes_encrypt+0x598>)
 8001c88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c8c:	4053      	eors	r3, r2
 8001c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c92:	1d1a      	adds	r2, r3, #4
 8001c94:	677a      	str	r2, [r7, #116]	; 0x74
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4b7f      	ldr	r3, [pc, #508]	; (8001e9c <mbedtls_internal_aes_encrypt+0x59c>)
 8001ca0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ca4:	405a      	eors	r2, r3
 8001ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4619      	mov	r1, r3
 8001cae:	4b7c      	ldr	r3, [pc, #496]	; (8001ea0 <mbedtls_internal_aes_encrypt+0x5a0>)
 8001cb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cb4:	405a      	eors	r2, r3
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4b79      	ldr	r3, [pc, #484]	; (8001ea4 <mbedtls_internal_aes_encrypt+0x5a4>)
 8001cc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cc4:	405a      	eors	r2, r3
 8001cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc8:	0e1b      	lsrs	r3, r3, #24
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4b72      	ldr	r3, [pc, #456]	; (8001e98 <mbedtls_internal_aes_encrypt+0x598>)
 8001cd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cd4:	4053      	eors	r3, r2
 8001cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cda:	1d1a      	adds	r2, r3, #4
 8001cdc:	677a      	str	r2, [r7, #116]	; 0x74
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4b6d      	ldr	r3, [pc, #436]	; (8001e9c <mbedtls_internal_aes_encrypt+0x59c>)
 8001ce8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cec:	405a      	eors	r2, r3
 8001cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4b6a      	ldr	r3, [pc, #424]	; (8001ea0 <mbedtls_internal_aes_encrypt+0x5a0>)
 8001cf8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cfc:	405a      	eors	r2, r3
 8001cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4619      	mov	r1, r3
 8001d06:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <mbedtls_internal_aes_encrypt+0x5a4>)
 8001d08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d0c:	405a      	eors	r2, r3
 8001d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d10:	0e1b      	lsrs	r3, r3, #24
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	4619      	mov	r1, r3
 8001d16:	4b60      	ldr	r3, [pc, #384]	; (8001e98 <mbedtls_internal_aes_encrypt+0x598>)
 8001d18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d1c:	4053      	eors	r3, r2
 8001d1e:	64fb      	str	r3, [r7, #76]	; 0x4c

    t.X[0] = *RK++ ^ \
 8001d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d22:	1d1a      	adds	r2, r3, #4
 8001d24:	677a      	str	r2, [r7, #116]	; 0x74
 8001d26:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 8001d28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001d30:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 8001d32:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 8001d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001d3e:	5c5b      	ldrb	r3, [r3, r1]
 8001d40:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 8001d42:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8001d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d46:	0c1b      	lsrs	r3, r3, #16
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4b56      	ldr	r3, [pc, #344]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001d4e:	5c5b      	ldrb	r3, [r3, r1]
 8001d50:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 8001d52:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[3])] << 24);
 8001d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d56:	0e1b      	lsrs	r3, r3, #24
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4b52      	ldr	r3, [pc, #328]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001d5e:	5c5b      	ldrb	r3, [r3, r1]
 8001d60:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8001d62:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30

    t.X[1] = *RK++ ^ \
 8001d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d68:	1d1a      	adds	r2, r3, #4
 8001d6a:	677a      	str	r2, [r7, #116]	; 0x74
 8001d6c:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 8001d6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	4611      	mov	r1, r2
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001d76:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8001d78:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8001d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	4619      	mov	r1, r3
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001d84:	5c5b      	ldrb	r3, [r3, r1]
 8001d86:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 8001d88:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 8001d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d8c:	0c1b      	lsrs	r3, r3, #16
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4619      	mov	r1, r3
 8001d92:	4b45      	ldr	r3, [pc, #276]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001d94:	5c5b      	ldrb	r3, [r3, r1]
 8001d96:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8001d98:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[0])] << 24);
 8001d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d9c:	0e1b      	lsrs	r3, r3, #24
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	4619      	mov	r1, r3
 8001da2:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001da4:	5c5b      	ldrb	r3, [r3, r1]
 8001da6:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 8001da8:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34

    t.X[2] = *RK++ ^ \
 8001dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dae:	1d1a      	adds	r2, r3, #4
 8001db0:	677a      	str	r2, [r7, #116]	; 0x74
 8001db2:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 8001db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	4611      	mov	r1, r2
 8001dba:	4a3b      	ldr	r2, [pc, #236]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001dbc:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8001dbe:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8001dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001dca:	5c5b      	ldrb	r3, [r3, r1]
 8001dcc:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 8001dce:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8001dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd2:	0c1b      	lsrs	r3, r3, #16
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001dda:	5c5b      	ldrb	r3, [r3, r1]
 8001ddc:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8001dde:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[1])] << 24);
 8001de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001de2:	0e1b      	lsrs	r3, r3, #24
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4619      	mov	r1, r3
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001dea:	5c5b      	ldrb	r3, [r3, r1]
 8001dec:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8001dee:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8001df0:	63bb      	str	r3, [r7, #56]	; 0x38

    t.X[3] = *RK++ ^ \
 8001df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df4:	1d1a      	adds	r2, r3, #4
 8001df6:	677a      	str	r2, [r7, #116]	; 0x74
 8001df8:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 8001dfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4a29      	ldr	r2, [pc, #164]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001e02:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 8001e04:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 8001e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001e10:	5c5b      	ldrb	r3, [r3, r1]
 8001e12:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 8001e14:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 8001e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e18:	0c1b      	lsrs	r3, r3, #16
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001e20:	5c5b      	ldrb	r3, [r3, r1]
 8001e22:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 8001e24:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[2])] << 24);
 8001e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e28:	0e1b      	lsrs	r3, r3, #24
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <mbedtls_internal_aes_encrypt+0x5a8>)
 8001e30:	5c5b      	ldrb	r3, [r3, r1]
 8001e32:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 8001e34:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT32_LE(t.X[0], output,  0);
 8001e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8001e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e44:	601a      	str	r2, [r3, #0]
}
 8001e46:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[1], output,  4);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	1d1a      	adds	r2, r3, #4
 8001e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 8001e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e56:	601a      	str	r2, [r3, #0]
}
 8001e58:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[2], output,  8);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f103 0208 	add.w	r2, r3, #8
 8001e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e62:	657a      	str	r2, [r7, #84]	; 0x54
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 8001e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6a:	601a      	str	r2, [r3, #0]
}
 8001e6c:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[3], output, 12);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f103 020c 	add.w	r2, r3, #12
 8001e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e76:	653a      	str	r2, [r7, #80]	; 0x50
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    memcpy(p, &x, sizeof(x));
 8001e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e7e:	601a      	str	r2, [r3, #0]
}
 8001e80:	bf00      	nop

    mbedtls_platform_zeroize(&t, sizeof(t));
 8001e82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e86:	2120      	movs	r1, #32
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f008 fae3 	bl	800a454 <mbedtls_platform_zeroize>

    return 0;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3778      	adds	r7, #120	; 0x78
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000e68 	.word	0x20000e68
 8001e9c:	20000268 	.word	0x20000268
 8001ea0:	20000668 	.word	0x20000668
 8001ea4:	20000a68 	.word	0x20000a68
 8001ea8:	20000168 	.word	0x20000168

08001eac <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT) && !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
int mbedtls_internal_aes_decrypt(mbedtls_aes_context *ctx,
                                 const unsigned char input[16],
                                 unsigned char output[16])
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b09e      	sub	sp, #120	; 0x78
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->buf + ctx->rk_offset;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f103 0208 	add.w	r2, r3, #8
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	677b      	str	r3, [r7, #116]	; 0x74
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	663b      	str	r3, [r7, #96]	; 0x60
 8001ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ece:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8001ed0:	61fb      	str	r3, [r7, #28]
    return r;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
    struct {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE(input,  0); t.X[0] ^= *RK++;
 8001ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ed8:	1d1a      	adds	r2, r3, #4
 8001eda:	677a      	str	r2, [r7, #116]	; 0x74
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee0:	4053      	eors	r3, r2
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
    t.X[1] = MBEDTLS_GET_UINT32_LE(input,  4); t.X[1] ^= *RK++;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8001eea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eec:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8001eee:	61bb      	str	r3, [r7, #24]
    return r;
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef6:	1d1a      	adds	r2, r3, #4
 8001ef8:	677a      	str	r2, [r7, #116]	; 0x74
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efe:	4053      	eors	r3, r2
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
    t.X[2] = MBEDTLS_GET_UINT32_LE(input,  8); t.X[2] ^= *RK++;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	3308      	adds	r3, #8
 8001f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f0a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8001f0c:	617b      	str	r3, [r7, #20]
    return r;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f14:	1d1a      	adds	r2, r3, #4
 8001f16:	677a      	str	r2, [r7, #116]	; 0x74
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1c:	4053      	eors	r3, r2
 8001f1e:	63bb      	str	r3, [r7, #56]	; 0x38
    t.X[3] = MBEDTLS_GET_UINT32_LE(input, 12); t.X[3] ^= *RK++;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	330c      	adds	r3, #12
 8001f24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f28:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8001f2a:	613b      	str	r3, [r7, #16]
    return r;
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f32:	1d1a      	adds	r2, r3, #4
 8001f34:	677a      	str	r2, [r7, #116]	; 0x74
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f3a:	4053      	eors	r3, r2
 8001f3c:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	105b      	asrs	r3, r3, #1
 8001f44:	3b01      	subs	r3, #1
 8001f46:	673b      	str	r3, [r7, #112]	; 0x70
 8001f48:	e122      	b.n	8002190 <mbedtls_internal_aes_decrypt+0x2e4>
        AES_RROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8001f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f4c:	1d1a      	adds	r2, r3, #4
 8001f4e:	677a      	str	r2, [r7, #116]	; 0x74
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	4619      	mov	r1, r3
 8001f58:	4bb0      	ldr	r3, [pc, #704]	; (800221c <mbedtls_internal_aes_decrypt+0x370>)
 8001f5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f5e:	405a      	eors	r2, r3
 8001f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	4619      	mov	r1, r3
 8001f68:	4bad      	ldr	r3, [pc, #692]	; (8002220 <mbedtls_internal_aes_decrypt+0x374>)
 8001f6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f6e:	405a      	eors	r2, r3
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	0c1b      	lsrs	r3, r3, #16
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	4baa      	ldr	r3, [pc, #680]	; (8002224 <mbedtls_internal_aes_decrypt+0x378>)
 8001f7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f7e:	405a      	eors	r2, r3
 8001f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f82:	0e1b      	lsrs	r3, r3, #24
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	4619      	mov	r1, r3
 8001f88:	4ba7      	ldr	r3, [pc, #668]	; (8002228 <mbedtls_internal_aes_decrypt+0x37c>)
 8001f8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f8e:	4053      	eors	r3, r2
 8001f90:	643b      	str	r3, [r7, #64]	; 0x40
 8001f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f94:	1d1a      	adds	r2, r3, #4
 8001f96:	677a      	str	r2, [r7, #116]	; 0x74
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4b9e      	ldr	r3, [pc, #632]	; (800221c <mbedtls_internal_aes_decrypt+0x370>)
 8001fa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fa6:	405a      	eors	r2, r3
 8001fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001faa:	0a1b      	lsrs	r3, r3, #8
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4b9b      	ldr	r3, [pc, #620]	; (8002220 <mbedtls_internal_aes_decrypt+0x374>)
 8001fb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fb6:	405a      	eors	r2, r3
 8001fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fba:	0c1b      	lsrs	r3, r3, #16
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4b98      	ldr	r3, [pc, #608]	; (8002224 <mbedtls_internal_aes_decrypt+0x378>)
 8001fc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fc6:	405a      	eors	r2, r3
 8001fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fca:	0e1b      	lsrs	r3, r3, #24
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4b95      	ldr	r3, [pc, #596]	; (8002228 <mbedtls_internal_aes_decrypt+0x37c>)
 8001fd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fd6:	4053      	eors	r3, r2
 8001fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8001fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fdc:	1d1a      	adds	r2, r3, #4
 8001fde:	677a      	str	r2, [r7, #116]	; 0x74
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4b8c      	ldr	r3, [pc, #560]	; (800221c <mbedtls_internal_aes_decrypt+0x370>)
 8001fea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fee:	405a      	eors	r2, r3
 8001ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4b89      	ldr	r3, [pc, #548]	; (8002220 <mbedtls_internal_aes_decrypt+0x374>)
 8001ffa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ffe:	405a      	eors	r2, r3
 8002000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002002:	0c1b      	lsrs	r3, r3, #16
 8002004:	b2db      	uxtb	r3, r3
 8002006:	4619      	mov	r1, r3
 8002008:	4b86      	ldr	r3, [pc, #536]	; (8002224 <mbedtls_internal_aes_decrypt+0x378>)
 800200a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800200e:	405a      	eors	r2, r3
 8002010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002012:	0e1b      	lsrs	r3, r3, #24
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4619      	mov	r1, r3
 8002018:	4b83      	ldr	r3, [pc, #524]	; (8002228 <mbedtls_internal_aes_decrypt+0x37c>)
 800201a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800201e:	4053      	eors	r3, r2
 8002020:	64bb      	str	r3, [r7, #72]	; 0x48
 8002022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002024:	1d1a      	adds	r2, r3, #4
 8002026:	677a      	str	r2, [r7, #116]	; 0x74
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800202c:	b2db      	uxtb	r3, r3
 800202e:	4619      	mov	r1, r3
 8002030:	4b7a      	ldr	r3, [pc, #488]	; (800221c <mbedtls_internal_aes_decrypt+0x370>)
 8002032:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002036:	405a      	eors	r2, r3
 8002038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	b2db      	uxtb	r3, r3
 800203e:	4619      	mov	r1, r3
 8002040:	4b77      	ldr	r3, [pc, #476]	; (8002220 <mbedtls_internal_aes_decrypt+0x374>)
 8002042:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002046:	405a      	eors	r2, r3
 8002048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204a:	0c1b      	lsrs	r3, r3, #16
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	4b74      	ldr	r3, [pc, #464]	; (8002224 <mbedtls_internal_aes_decrypt+0x378>)
 8002052:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002056:	405a      	eors	r2, r3
 8002058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205a:	0e1b      	lsrs	r3, r3, #24
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4619      	mov	r1, r3
 8002060:	4b71      	ldr	r3, [pc, #452]	; (8002228 <mbedtls_internal_aes_decrypt+0x37c>)
 8002062:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002066:	4053      	eors	r3, r2
 8002068:	64fb      	str	r3, [r7, #76]	; 0x4c
        AES_RROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 800206a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800206c:	1d1a      	adds	r2, r3, #4
 800206e:	677a      	str	r2, [r7, #116]	; 0x74
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4619      	mov	r1, r3
 8002078:	4b68      	ldr	r3, [pc, #416]	; (800221c <mbedtls_internal_aes_decrypt+0x370>)
 800207a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800207e:	405a      	eors	r2, r3
 8002080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	b2db      	uxtb	r3, r3
 8002086:	4619      	mov	r1, r3
 8002088:	4b65      	ldr	r3, [pc, #404]	; (8002220 <mbedtls_internal_aes_decrypt+0x374>)
 800208a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800208e:	405a      	eors	r2, r3
 8002090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002092:	0c1b      	lsrs	r3, r3, #16
 8002094:	b2db      	uxtb	r3, r3
 8002096:	4619      	mov	r1, r3
 8002098:	4b62      	ldr	r3, [pc, #392]	; (8002224 <mbedtls_internal_aes_decrypt+0x378>)
 800209a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800209e:	405a      	eors	r2, r3
 80020a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a2:	0e1b      	lsrs	r3, r3, #24
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4619      	mov	r1, r3
 80020a8:	4b5f      	ldr	r3, [pc, #380]	; (8002228 <mbedtls_internal_aes_decrypt+0x37c>)
 80020aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020ae:	4053      	eors	r3, r2
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
 80020b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b4:	1d1a      	adds	r2, r3, #4
 80020b6:	677a      	str	r2, [r7, #116]	; 0x74
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	4619      	mov	r1, r3
 80020c0:	4b56      	ldr	r3, [pc, #344]	; (800221c <mbedtls_internal_aes_decrypt+0x370>)
 80020c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020c6:	405a      	eors	r2, r3
 80020c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	4619      	mov	r1, r3
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <mbedtls_internal_aes_decrypt+0x374>)
 80020d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020d6:	405a      	eors	r2, r3
 80020d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020da:	0c1b      	lsrs	r3, r3, #16
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	4619      	mov	r1, r3
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <mbedtls_internal_aes_decrypt+0x378>)
 80020e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020e6:	405a      	eors	r2, r3
 80020e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ea:	0e1b      	lsrs	r3, r3, #24
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	4619      	mov	r1, r3
 80020f0:	4b4d      	ldr	r3, [pc, #308]	; (8002228 <mbedtls_internal_aes_decrypt+0x37c>)
 80020f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020f6:	4053      	eors	r3, r2
 80020f8:	637b      	str	r3, [r7, #52]	; 0x34
 80020fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020fc:	1d1a      	adds	r2, r3, #4
 80020fe:	677a      	str	r2, [r7, #116]	; 0x74
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002104:	b2db      	uxtb	r3, r3
 8002106:	4619      	mov	r1, r3
 8002108:	4b44      	ldr	r3, [pc, #272]	; (800221c <mbedtls_internal_aes_decrypt+0x370>)
 800210a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800210e:	405a      	eors	r2, r3
 8002110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	b2db      	uxtb	r3, r3
 8002116:	4619      	mov	r1, r3
 8002118:	4b41      	ldr	r3, [pc, #260]	; (8002220 <mbedtls_internal_aes_decrypt+0x374>)
 800211a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800211e:	405a      	eors	r2, r3
 8002120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002122:	0c1b      	lsrs	r3, r3, #16
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4619      	mov	r1, r3
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <mbedtls_internal_aes_decrypt+0x378>)
 800212a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800212e:	405a      	eors	r2, r3
 8002130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002132:	0e1b      	lsrs	r3, r3, #24
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4619      	mov	r1, r3
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <mbedtls_internal_aes_decrypt+0x37c>)
 800213a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800213e:	4053      	eors	r3, r2
 8002140:	63bb      	str	r3, [r7, #56]	; 0x38
 8002142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002144:	1d1a      	adds	r2, r3, #4
 8002146:	677a      	str	r2, [r7, #116]	; 0x74
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800214c:	b2db      	uxtb	r3, r3
 800214e:	4619      	mov	r1, r3
 8002150:	4b32      	ldr	r3, [pc, #200]	; (800221c <mbedtls_internal_aes_decrypt+0x370>)
 8002152:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002156:	405a      	eors	r2, r3
 8002158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	b2db      	uxtb	r3, r3
 800215e:	4619      	mov	r1, r3
 8002160:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <mbedtls_internal_aes_decrypt+0x374>)
 8002162:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002166:	405a      	eors	r2, r3
 8002168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	b2db      	uxtb	r3, r3
 800216e:	4619      	mov	r1, r3
 8002170:	4b2c      	ldr	r3, [pc, #176]	; (8002224 <mbedtls_internal_aes_decrypt+0x378>)
 8002172:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002176:	405a      	eors	r2, r3
 8002178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800217a:	0e1b      	lsrs	r3, r3, #24
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4619      	mov	r1, r3
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <mbedtls_internal_aes_decrypt+0x37c>)
 8002182:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002186:	4053      	eors	r3, r2
 8002188:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 800218a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800218c:	3b01      	subs	r3, #1
 800218e:	673b      	str	r3, [r7, #112]	; 0x70
 8002190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002192:	2b00      	cmp	r3, #0
 8002194:	f73f aed9 	bgt.w	8001f4a <mbedtls_internal_aes_decrypt+0x9e>
    }

    AES_RROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8002198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800219a:	1d1a      	adds	r2, r3, #4
 800219c:	677a      	str	r2, [r7, #116]	; 0x74
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <mbedtls_internal_aes_decrypt+0x370>)
 80021a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021ac:	405a      	eors	r2, r3
 80021ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	4619      	mov	r1, r3
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <mbedtls_internal_aes_decrypt+0x374>)
 80021b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021bc:	405a      	eors	r2, r3
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4619      	mov	r1, r3
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <mbedtls_internal_aes_decrypt+0x378>)
 80021c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021cc:	405a      	eors	r2, r3
 80021ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d0:	0e1b      	lsrs	r3, r3, #24
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4619      	mov	r1, r3
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <mbedtls_internal_aes_decrypt+0x37c>)
 80021d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021dc:	4053      	eors	r3, r2
 80021de:	643b      	str	r3, [r7, #64]	; 0x40
 80021e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021e2:	1d1a      	adds	r2, r3, #4
 80021e4:	677a      	str	r2, [r7, #116]	; 0x74
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4619      	mov	r1, r3
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <mbedtls_internal_aes_decrypt+0x370>)
 80021f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021f4:	405a      	eors	r2, r3
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4619      	mov	r1, r3
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <mbedtls_internal_aes_decrypt+0x374>)
 8002200:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002204:	405a      	eors	r2, r3
 8002206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002208:	0c1b      	lsrs	r3, r3, #16
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4619      	mov	r1, r3
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <mbedtls_internal_aes_decrypt+0x378>)
 8002210:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002214:	405a      	eors	r2, r3
 8002216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002218:	e008      	b.n	800222c <mbedtls_internal_aes_decrypt+0x380>
 800221a:	bf00      	nop
 800221c:	20001368 	.word	0x20001368
 8002220:	20001768 	.word	0x20001768
 8002224:	20001b68 	.word	0x20001b68
 8002228:	20001f68 	.word	0x20001f68
 800222c:	0e1b      	lsrs	r3, r3, #24
 800222e:	b2db      	uxtb	r3, r3
 8002230:	4619      	mov	r1, r3
 8002232:	4b84      	ldr	r3, [pc, #528]	; (8002444 <mbedtls_internal_aes_decrypt+0x598>)
 8002234:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002238:	4053      	eors	r3, r2
 800223a:	647b      	str	r3, [r7, #68]	; 0x44
 800223c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800223e:	1d1a      	adds	r2, r3, #4
 8002240:	677a      	str	r2, [r7, #116]	; 0x74
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4619      	mov	r1, r3
 800224a:	4b7f      	ldr	r3, [pc, #508]	; (8002448 <mbedtls_internal_aes_decrypt+0x59c>)
 800224c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002250:	405a      	eors	r2, r3
 8002252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	b2db      	uxtb	r3, r3
 8002258:	4619      	mov	r1, r3
 800225a:	4b7c      	ldr	r3, [pc, #496]	; (800244c <mbedtls_internal_aes_decrypt+0x5a0>)
 800225c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002260:	405a      	eors	r2, r3
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	0c1b      	lsrs	r3, r3, #16
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	4b79      	ldr	r3, [pc, #484]	; (8002450 <mbedtls_internal_aes_decrypt+0x5a4>)
 800226c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002270:	405a      	eors	r2, r3
 8002272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002274:	0e1b      	lsrs	r3, r3, #24
 8002276:	b2db      	uxtb	r3, r3
 8002278:	4619      	mov	r1, r3
 800227a:	4b72      	ldr	r3, [pc, #456]	; (8002444 <mbedtls_internal_aes_decrypt+0x598>)
 800227c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002280:	4053      	eors	r3, r2
 8002282:	64bb      	str	r3, [r7, #72]	; 0x48
 8002284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002286:	1d1a      	adds	r2, r3, #4
 8002288:	677a      	str	r2, [r7, #116]	; 0x74
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800228e:	b2db      	uxtb	r3, r3
 8002290:	4619      	mov	r1, r3
 8002292:	4b6d      	ldr	r3, [pc, #436]	; (8002448 <mbedtls_internal_aes_decrypt+0x59c>)
 8002294:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002298:	405a      	eors	r2, r3
 800229a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4619      	mov	r1, r3
 80022a2:	4b6a      	ldr	r3, [pc, #424]	; (800244c <mbedtls_internal_aes_decrypt+0x5a0>)
 80022a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022a8:	405a      	eors	r2, r3
 80022aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	4619      	mov	r1, r3
 80022b2:	4b67      	ldr	r3, [pc, #412]	; (8002450 <mbedtls_internal_aes_decrypt+0x5a4>)
 80022b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022b8:	405a      	eors	r2, r3
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022bc:	0e1b      	lsrs	r3, r3, #24
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	4619      	mov	r1, r3
 80022c2:	4b60      	ldr	r3, [pc, #384]	; (8002444 <mbedtls_internal_aes_decrypt+0x598>)
 80022c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022c8:	4053      	eors	r3, r2
 80022ca:	64fb      	str	r3, [r7, #76]	; 0x4c

    t.X[0] = *RK++ ^ \
 80022cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ce:	1d1a      	adds	r2, r3, #4
 80022d0:	677a      	str	r2, [r7, #116]	; 0x74
 80022d2:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 80022d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	4611      	mov	r1, r2
 80022da:	4a5e      	ldr	r2, [pc, #376]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 80022dc:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 80022de:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 80022e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	4619      	mov	r1, r3
 80022e8:	4b5a      	ldr	r3, [pc, #360]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 80022ea:	5c5b      	ldrb	r3, [r3, r1]
 80022ec:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 80022ee:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 80022f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f2:	0c1b      	lsrs	r3, r3, #16
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	4b56      	ldr	r3, [pc, #344]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 80022fa:	5c5b      	ldrb	r3, [r3, r1]
 80022fc:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 80022fe:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[1])] << 24);
 8002300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002302:	0e1b      	lsrs	r3, r3, #24
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4619      	mov	r1, r3
 8002308:	4b52      	ldr	r3, [pc, #328]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 800230a:	5c5b      	ldrb	r3, [r3, r1]
 800230c:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 800230e:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8002310:	633b      	str	r3, [r7, #48]	; 0x30

    t.X[1] = *RK++ ^ \
 8002312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002314:	1d1a      	adds	r2, r3, #4
 8002316:	677a      	str	r2, [r7, #116]	; 0x74
 8002318:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 800231a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	4611      	mov	r1, r2
 8002320:	4a4c      	ldr	r2, [pc, #304]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 8002322:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8002324:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 8002326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	b2db      	uxtb	r3, r3
 800232c:	4619      	mov	r1, r3
 800232e:	4b49      	ldr	r3, [pc, #292]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 8002330:	5c5b      	ldrb	r3, [r3, r1]
 8002332:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 8002334:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 8002336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	b2db      	uxtb	r3, r3
 800233c:	4619      	mov	r1, r3
 800233e:	4b45      	ldr	r3, [pc, #276]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 8002340:	5c5b      	ldrb	r3, [r3, r1]
 8002342:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 8002344:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[2])] << 24);
 8002346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002348:	0e1b      	lsrs	r3, r3, #24
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4619      	mov	r1, r3
 800234e:	4b41      	ldr	r3, [pc, #260]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 8002350:	5c5b      	ldrb	r3, [r3, r1]
 8002352:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 8002354:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8002356:	637b      	str	r3, [r7, #52]	; 0x34

    t.X[2] = *RK++ ^ \
 8002358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800235a:	1d1a      	adds	r2, r3, #4
 800235c:	677a      	str	r2, [r7, #116]	; 0x74
 800235e:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 8002360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	4611      	mov	r1, r2
 8002366:	4a3b      	ldr	r2, [pc, #236]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 8002368:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 800236a:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 800236c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	4b37      	ldr	r3, [pc, #220]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 8002376:	5c5b      	ldrb	r3, [r3, r1]
 8002378:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 800237a:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 800237c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800237e:	0c1b      	lsrs	r3, r3, #16
 8002380:	b2db      	uxtb	r3, r3
 8002382:	4619      	mov	r1, r3
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 8002386:	5c5b      	ldrb	r3, [r3, r1]
 8002388:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 800238a:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[3])] << 24);
 800238c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800238e:	0e1b      	lsrs	r3, r3, #24
 8002390:	b2db      	uxtb	r3, r3
 8002392:	4619      	mov	r1, r3
 8002394:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 8002396:	5c5b      	ldrb	r3, [r3, r1]
 8002398:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 800239a:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 800239c:	63bb      	str	r3, [r7, #56]	; 0x38

    t.X[3] = *RK++ ^ \
 800239e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023a0:	1d1a      	adds	r2, r3, #4
 80023a2:	677a      	str	r2, [r7, #116]	; 0x74
 80023a4:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 80023a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	4611      	mov	r1, r2
 80023ac:	4a29      	ldr	r2, [pc, #164]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 80023ae:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 80023b0:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 80023b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	4619      	mov	r1, r3
 80023ba:	4b26      	ldr	r3, [pc, #152]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 80023bc:	5c5b      	ldrb	r3, [r3, r1]
 80023be:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 80023c0:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 80023c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	4619      	mov	r1, r3
 80023ca:	4b22      	ldr	r3, [pc, #136]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 80023cc:	5c5b      	ldrb	r3, [r3, r1]
 80023ce:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 80023d0:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[0])] << 24);
 80023d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d4:	0e1b      	lsrs	r3, r3, #24
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	4619      	mov	r1, r3
 80023da:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <mbedtls_internal_aes_decrypt+0x5a8>)
 80023dc:	5c5b      	ldrb	r3, [r3, r1]
 80023de:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 80023e0:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 80023e2:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT32_LE(t.X[0], output,  0);
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80023ea:	623b      	str	r3, [r7, #32]
 80023ec:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 80023ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f0:	601a      	str	r2, [r3, #0]
}
 80023f2:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[1], output,  4);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	1d1a      	adds	r2, r3, #4
 80023f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
 80023fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 8002400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002402:	601a      	str	r2, [r3, #0]
}
 8002404:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[2], output,  8);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f103 0208 	add.w	r2, r3, #8
 800240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240e:	657a      	str	r2, [r7, #84]	; 0x54
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
 8002412:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 8002414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002416:	601a      	str	r2, [r3, #0]
}
 8002418:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[3], output, 12);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f103 020c 	add.w	r2, r3, #12
 8002420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002422:	653a      	str	r2, [r7, #80]	; 0x50
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    memcpy(p, &x, sizeof(x));
 8002428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800242a:	601a      	str	r2, [r3, #0]
}
 800242c:	bf00      	nop

    mbedtls_platform_zeroize(&t, sizeof(t));
 800242e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002432:	2120      	movs	r1, #32
 8002434:	4618      	mov	r0, r3
 8002436:	f008 f80d 	bl	800a454 <mbedtls_platform_zeroize>

    return 0;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3778      	adds	r7, #120	; 0x78
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20001f68 	.word	0x20001f68
 8002448:	20001368 	.word	0x20001368
 800244c:	20001768 	.word	0x20001768
 8002450:	20001b68 	.word	0x20001b68
 8002454:	20001268 	.word	0x20001268

08002458 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb(mbedtls_aes_context *ctx,
                          int mode,
                          const unsigned char input[16],
                          unsigned char output[16])
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d005      	beq.n	8002478 <mbedtls_aes_crypt_ecb+0x20>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <mbedtls_aes_crypt_ecb+0x20>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8002472:	f06f 0320 	mvn.w	r3, #32
 8002476:	e00f      	b.n	8002498 <mbedtls_aes_crypt_ecb+0x40>
    }
#endif

#if !defined(MBEDTLS_AES_USE_HARDWARE_ONLY)
#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
    if (mode == MBEDTLS_AES_DECRYPT) {
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <mbedtls_aes_crypt_ecb+0x34>
        return mbedtls_internal_aes_decrypt(ctx, input, output);
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f7ff fd12 	bl	8001eac <mbedtls_internal_aes_decrypt>
 8002488:	4603      	mov	r3, r0
 800248a:	e005      	b.n	8002498 <mbedtls_aes_crypt_ecb+0x40>
    } else
#endif
    {
        return mbedtls_internal_aes_encrypt(ctx, input, output);
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f7ff fa35 	bl	8001900 <mbedtls_internal_aes_encrypt>
 8002496:	4603      	mov	r3, r0
    }
#endif /* !MBEDTLS_AES_USE_HARDWARE_ONLY */
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <mbedtls_aes_crypt_cbc>:
                          int mode,
                          size_t length,
                          unsigned char iv[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b0a2      	sub	sp, #136	; 0x88
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80024ae:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80024b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    unsigned char temp[16];

    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d005      	beq.n	80024c8 <mbedtls_aes_crypt_cbc+0x28>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <mbedtls_aes_crypt_cbc+0x28>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 80024c2:	f06f 0320 	mvn.w	r3, #32
 80024c6:	e108      	b.n	80026da <mbedtls_aes_crypt_cbc+0x23a>
    }

    /* Nothing to do if length is zero. */
    if (length == 0) {
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <mbedtls_aes_crypt_cbc+0x32>
        return 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e103      	b.n	80026da <mbedtls_aes_crypt_cbc+0x23a>
    }

    if (length % 16) {
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <mbedtls_aes_crypt_cbc+0x42>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 80024dc:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80024e0:	e0fb      	b.n	80026da <mbedtls_aes_crypt_cbc+0x23a>
        // unaccelerated mode
        //
    }
#endif

    const unsigned char *ivp = iv;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    if (mode == MBEDTLS_AES_DECRYPT) {
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 80e3 	bne.w	80026b6 <mbedtls_aes_crypt_cbc+0x216>
        while (length > 0) {
 80024f0:	e075      	b.n	80025de <mbedtls_aes_crypt_cbc+0x13e>
            memcpy(temp, input, 16);
 80024f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024f6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	6859      	ldr	r1, [r3, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            ret = mbedtls_aes_crypt_ecb(ctx, mode, input, output);
 8002504:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002508:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f7ff ffa2 	bl	8002458 <mbedtls_aes_crypt_ecb>
 8002514:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            if (ret != 0) {
 8002518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 80d7 	bne.w	80026d0 <mbedtls_aes_crypt_cbc+0x230>
 8002522:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002526:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800252c:	67bb      	str	r3, [r7, #120]	; 0x78
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	677b      	str	r3, [r7, #116]	; 0x74
 8002532:	2310      	movs	r3, #16
 8002534:	673b      	str	r3, [r7, #112]	; 0x70
static inline void mbedtls_xor_no_simd(unsigned char *r,
                                       const unsigned char *a,
                                       const unsigned char *b,
                                       size_t n)
{
    size_t i = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (n % 8 == 0) {
        return;
    }
#endif
#else
    for (; (i + 4) <= n; i += 4) {
 800253a:	e01e      	b.n	800257a <mbedtls_aes_crypt_cbc+0xda>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800253c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800253e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002540:	4413      	add	r3, r2
 8002542:	66bb      	str	r3, [r7, #104]	; 0x68
 8002544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002546:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8002548:	61bb      	str	r3, [r7, #24]
    return r;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800254e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002550:	440b      	add	r3, r1
 8002552:	667b      	str	r3, [r7, #100]	; 0x64
 8002554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002556:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8002558:	617b      	str	r3, [r7, #20]
    return r;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	4053      	eors	r3, r2
 800255e:	663b      	str	r3, [r7, #96]	; 0x60
        mbedtls_put_unaligned_uint32(r + i, x);
 8002560:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002564:	4413      	add	r3, r2
 8002566:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 800256e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002570:	601a      	str	r2, [r3, #0]
}
 8002572:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8002574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002576:	3304      	adds	r3, #4
 8002578:	66fb      	str	r3, [r7, #108]	; 0x6c
 800257a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257c:	3304      	adds	r3, #4
 800257e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002580:	429a      	cmp	r2, r3
 8002582:	d2db      	bcs.n	800253c <mbedtls_aes_crypt_cbc+0x9c>
        return;
    }
#endif
#endif
#endif
    for (; i < n; i++) {
 8002584:	e010      	b.n	80025a8 <mbedtls_aes_crypt_cbc+0x108>
        r[i] = a[i] ^ b[i];
 8002586:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258a:	4413      	add	r3, r2
 800258c:	7819      	ldrb	r1, [r3, #0]
 800258e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002592:	4413      	add	r3, r2
 8002594:	781a      	ldrb	r2, [r3, #0]
 8002596:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259a:	4403      	add	r3, r0
 800259c:	404a      	eors	r2, r1
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80025a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a4:	3301      	adds	r3, #1
 80025a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80025aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d8ea      	bhi.n	8002586 <mbedtls_aes_crypt_cbc+0xe6>
    }
}
 80025b0:	bf00      	nop
            /* Avoid using the NEON implementation of mbedtls_xor. Because of the dependency on
             * the result for the next block in CBC, and the cost of transferring that data from
             * NEON registers, NEON is slower on aarch64. */
            mbedtls_xor_no_simd(output, output, iv, 16);

            memcpy(iv, temp, 16);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	461d      	mov	r5, r3
 80025b6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80025ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025bc:	6028      	str	r0, [r5, #0]
 80025be:	6069      	str	r1, [r5, #4]
 80025c0:	60aa      	str	r2, [r5, #8]
 80025c2:	60eb      	str	r3, [r5, #12]

            input  += 16;
 80025c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025c8:	3310      	adds	r3, #16
 80025ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            output += 16;
 80025ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025d2:	3310      	adds	r3, #16
 80025d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            length -= 16;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b10      	subs	r3, #16
 80025dc:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d186      	bne.n	80024f2 <mbedtls_aes_crypt_cbc+0x52>
 80025e4:	e070      	b.n	80026c8 <mbedtls_aes_crypt_cbc+0x228>
 80025e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80025ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025f0:	657b      	str	r3, [r7, #84]	; 0x54
 80025f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025f6:	653b      	str	r3, [r7, #80]	; 0x50
 80025f8:	2310      	movs	r3, #16
 80025fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t i = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	64bb      	str	r3, [r7, #72]	; 0x48
    for (; (i + 4) <= n; i += 4) {
 8002600:	e01e      	b.n	8002640 <mbedtls_aes_crypt_cbc+0x1a0>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8002602:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002606:	4413      	add	r3, r2
 8002608:	647b      	str	r3, [r7, #68]	; 0x44
 800260a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8002610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002612:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002616:	440b      	add	r3, r1
 8002618:	643b      	str	r3, [r7, #64]	; 0x40
 800261a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800261c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800261e:	623b      	str	r3, [r7, #32]
    return r;
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	4053      	eors	r3, r2
 8002624:	63fb      	str	r3, [r7, #60]	; 0x3c
        mbedtls_put_unaligned_uint32(r + i, x);
 8002626:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800262a:	4413      	add	r3, r2
 800262c:	63bb      	str	r3, [r7, #56]	; 0x38
 800262e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 8002634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002636:	601a      	str	r2, [r3, #0]
}
 8002638:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800263a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800263c:	3304      	adds	r3, #4
 800263e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002642:	3304      	adds	r3, #4
 8002644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002646:	429a      	cmp	r2, r3
 8002648:	d2db      	bcs.n	8002602 <mbedtls_aes_crypt_cbc+0x162>
    for (; i < n; i++) {
 800264a:	e010      	b.n	800266e <mbedtls_aes_crypt_cbc+0x1ce>
        r[i] = a[i] ^ b[i];
 800264c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800264e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002650:	4413      	add	r3, r2
 8002652:	7819      	ldrb	r1, [r3, #0]
 8002654:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002658:	4413      	add	r3, r2
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800265e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002660:	4403      	add	r3, r0
 8002662:	404a      	eors	r2, r1
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8002668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266a:	3301      	adds	r3, #1
 800266c:	64bb      	str	r3, [r7, #72]	; 0x48
 800266e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002672:	429a      	cmp	r2, r3
 8002674:	d8ea      	bhi.n	800264c <mbedtls_aes_crypt_cbc+0x1ac>
}
 8002676:	bf00      	nop
        }
    } else {
        while (length > 0) {
            mbedtls_xor_no_simd(output, input, ivp, 16);

            ret = mbedtls_aes_crypt_ecb(ctx, mode, output, output);
 8002678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800267c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f7ff fee8 	bl	8002458 <mbedtls_aes_crypt_ecb>
 8002688:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            if (ret != 0) {
 800268c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002690:	2b00      	cmp	r3, #0
 8002692:	d11f      	bne.n	80026d4 <mbedtls_aes_crypt_cbc+0x234>
                goto exit;
            }
            ivp = output;
 8002694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            input  += 16;
 800269c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026a0:	3310      	adds	r3, #16
 80026a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            output += 16;
 80026a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026aa:	3310      	adds	r3, #16
 80026ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            length -= 16;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b10      	subs	r3, #16
 80026b4:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d194      	bne.n	80025e6 <mbedtls_aes_crypt_cbc+0x146>
        }
        memcpy(iv, ivp, 16);
 80026bc:	2210      	movs	r2, #16
 80026be:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80026c2:	6838      	ldr	r0, [r7, #0]
 80026c4:	f00a fb4f 	bl	800cd66 <memcpy>
    }
    ret = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026ce:	e002      	b.n	80026d6 <mbedtls_aes_crypt_cbc+0x236>
                goto exit;
 80026d0:	bf00      	nop
 80026d2:	e000      	b.n	80026d6 <mbedtls_aes_crypt_cbc+0x236>
                goto exit;
 80026d4:	bf00      	nop

exit:
    return ret;
 80026d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3788      	adds	r7, #136	; 0x88
 80026de:	46bd      	mov	sp, r7
 80026e0:	bdb0      	pop	{r4, r5, r7, pc}

080026e2 <mbedtls_gf128mul_x_ble>:
#if defined(MBEDTLS_AESCE_C) || defined(MBEDTLS_AESNI_C)
MBEDTLS_OPTIMIZE_FOR_PERFORMANCE
#endif
static inline void mbedtls_gf128mul_x_ble(unsigned char r[16],
                                          const unsigned char x[16])
{
 80026e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e6:	b09a      	sub	sp, #104	; 0x68
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6178      	str	r0, [r7, #20]
 80026ec:	6139      	str	r1, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	643b      	str	r3, [r7, #64]	; 0x40
    r = *p64;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint64_unaligned_t *p64 = (mbedtls_uint64_unaligned_t *) p;
    r = p64->x;
#else
    memcpy(&r, p, sizeof(r));
 80026f2:	f107 0320 	add.w	r3, r7, #32
 80026f6:	2208      	movs	r2, #8
 80026f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026fa:	4618      	mov	r0, r3
 80026fc:	f00a fb33 	bl	800cd66 <memcpy>
#endif
    return r;
 8002700:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    uint64_t a, b, ra, rb;

    a = MBEDTLS_GET_UINT64_LE(x, 0);
 8002704:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    b = MBEDTLS_GET_UINT64_LE(x, 8);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	3308      	adds	r3, #8
 800270c:	647b      	str	r3, [r7, #68]	; 0x44
    memcpy(&r, p, sizeof(r));
 800270e:	f107 0318 	add.w	r3, r7, #24
 8002712:	2208      	movs	r2, #8
 8002714:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002716:	4618      	mov	r0, r3
 8002718:	f00a fb25 	bl	800cd66 <memcpy>
    return r;
 800271c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002720:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    ra = (a << 1)  ^ 0x0087 >> (8 - ((b >> 63) << 3));
 8002724:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002728:	1894      	adds	r4, r2, r2
 800272a:	eb43 0503 	adc.w	r5, r3, r3
 800272e:	4620      	mov	r0, r4
 8002730:	4629      	mov	r1, r5
 8002732:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	0fea      	lsrs	r2, r5, #31
 8002740:	2300      	movs	r3, #0
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	f1c3 0308 	rsb	r3, r3, #8
 800274a:	2287      	movs	r2, #135	; 0x87
 800274c:	fa42 f303 	asr.w	r3, r2, r3
 8002750:	17da      	asrs	r2, r3, #31
 8002752:	4698      	mov	r8, r3
 8002754:	4691      	mov	r9, r2
 8002756:	ea80 0308 	eor.w	r3, r0, r8
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	ea81 0309 	eor.w	r3, r1, r9
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002766:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    rb = (a >> 63) | (b << 1);
 800276a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800276e:	f04f 0000 	mov.w	r0, #0
 8002772:	f04f 0100 	mov.w	r1, #0
 8002776:	0fd8      	lsrs	r0, r3, #31
 8002778:	2100      	movs	r1, #0
 800277a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800277e:	1894      	adds	r4, r2, r2
 8002780:	603c      	str	r4, [r7, #0]
 8002782:	415b      	adcs	r3, r3
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800278a:	ea40 0a02 	orr.w	sl, r0, r2
 800278e:	ea41 0b03 	orr.w	fp, r1, r3
 8002792:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800279a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800279e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    *p64 = x;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint64_unaligned_t *p64 = (mbedtls_uint64_unaligned_t *) p;
    p64->x = x;
#else
    memcpy(p, &x, sizeof(x));
 80027a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027a6:	2208      	movs	r2, #8
 80027a8:	4619      	mov	r1, r3
 80027aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027ac:	f00a fadb 	bl	800cd66 <memcpy>
#endif
}
 80027b0:	bf00      	nop

    MBEDTLS_PUT_UINT64_LE(ra, r, 0);
    MBEDTLS_PUT_UINT64_LE(rb, r, 8);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3308      	adds	r3, #8
 80027b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    memcpy(p, &x, sizeof(x));
 80027c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027c4:	2208      	movs	r2, #8
 80027c6:	4619      	mov	r1, r3
 80027c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027ca:	f00a facc 	bl	800cd66 <memcpy>
}
 80027ce:	bf00      	nop
}
 80027d0:	bf00      	nop
 80027d2:	3768      	adds	r7, #104	; 0x68
 80027d4:	46bd      	mov	sp, r7
 80027d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080027da <mbedtls_aes_crypt_xts>:
                          int mode,
                          size_t length,
                          const unsigned char data_unit[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 80027da:	b590      	push	{r4, r7, lr}
 80027dc:	b0d3      	sub	sp, #332	; 0x14c
 80027de:	af00      	add	r7, sp, #0
 80027e0:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 80027e4:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 80027e8:	6020      	str	r0, [r4, #0]
 80027ea:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80027ee:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 80027f2:	6001      	str	r1, [r0, #0]
 80027f4:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80027f8:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 80027fc:	600a      	str	r2, [r1, #0]
 80027fe:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002802:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8002806:	6013      	str	r3, [r2, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8002808:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800280c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    size_t blocks = length / 16;
 8002810:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002814:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    size_t leftover = length % 16;
 8002820:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002824:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    unsigned char tweak[16];
    unsigned char prev_tweak[16];
    unsigned char tmp[16];

    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 8002832:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002836:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d009      	beq.n	8002854 <mbedtls_aes_crypt_xts+0x7a>
 8002840:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002844:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <mbedtls_aes_crypt_xts+0x7a>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 800284e:	f06f 0320 	mvn.w	r3, #32
 8002852:	e380      	b.n	8002f56 <mbedtls_aes_crypt_xts+0x77c>
    }

    /* Data units must be at least 16 bytes long. */
    if (length < 16) {
 8002854:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002858:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b0f      	cmp	r3, #15
 8002860:	d802      	bhi.n	8002868 <mbedtls_aes_crypt_xts+0x8e>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8002862:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8002866:	e376      	b.n	8002f56 <mbedtls_aes_crypt_xts+0x77c>
    }

    /* NIST SP 800-38E disallows data units larger than 2**20 blocks. */
    if (length > (1 << 20) * 16) {
 8002868:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800286c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002876:	d902      	bls.n	800287e <mbedtls_aes_crypt_xts+0xa4>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8002878:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800287c:	e36b      	b.n	8002f56 <mbedtls_aes_crypt_xts+0x77c>
    }

    /* Compute the tweak. */
    ret = mbedtls_aes_crypt_ecb(&ctx->tweak, MBEDTLS_AES_ENCRYPT,
 800287e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002882:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f503 708c 	add.w	r0, r3, #280	; 0x118
 800288c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002890:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002894:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	2101      	movs	r1, #1
 800289c:	f7ff fddc 	bl	8002458 <mbedtls_aes_crypt_ecb>
 80028a0:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
                                data_unit, tweak);
    if (ret != 0) {
 80028a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8168 	beq.w	8002b7e <mbedtls_aes_crypt_xts+0x3a4>
        return ret;
 80028ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80028b2:	e350      	b.n	8002f56 <mbedtls_aes_crypt_xts+0x77c>
    }

    while (blocks--) {
        if (MBEDTLS_UNLIKELY(leftover && (mode == MBEDTLS_AES_DECRYPT) && blocks == 0)) {
 80028b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00d      	beq.n	80028e2 <mbedtls_aes_crypt_xts+0x108>
 80028c6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80028ca:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <mbedtls_aes_crypt_xts+0x108>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <mbedtls_aes_crypt_xts+0x10a>
 80028e2:	2300      	movs	r3, #0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d017      	beq.n	8002918 <mbedtls_aes_crypt_xts+0x13e>
 80028e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00e      	beq.n	8002918 <mbedtls_aes_crypt_xts+0x13e>
            /* We are on the last block in a decrypt operation that has
             * leftover bytes, so we need to use the next tweak for this block,
             * and this tweak for the leftover bytes. Save the current tweak for
             * the leftovers and then update the current tweak for use on this,
             * the last full block. */
            memcpy(prev_tweak, tweak, sizeof(tweak));
 80028fa:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80028fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            mbedtls_gf128mul_x_ble(tweak, tweak);
 8002908:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800290c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fee5 	bl	80026e2 <mbedtls_gf128mul_x_ble>
 8002918:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800291c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002920:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002924:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002928:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800292c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002930:	2310      	movs	r3, #16
 8002932:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    size_t i = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for (; (i + 4) <= n; i += 4) {
 800293c:	e048      	b.n	80029d0 <mbedtls_aes_crypt_xts+0x1f6>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800293e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002942:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002946:	4413      	add	r3, r2
 8002948:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800294c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8002954:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002958:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800295c:	601a      	str	r2, [r3, #0]
    return r;
 800295e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002962:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800296c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002970:	440b      	add	r3, r1
 8002972:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 800297e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002982:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002986:	6019      	str	r1, [r3, #0]
    return r;
 8002988:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800298c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4053      	eors	r3, r2
 8002994:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        mbedtls_put_unaligned_uint32(r + i, x);
 8002998:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800299c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029a0:	4413      	add	r3, r2
 80029a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80029a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80029aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029ae:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80029b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029bc:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 80029be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029c2:	601a      	str	r2, [r3, #0]
}
 80029c4:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80029c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029ca:	3304      	adds	r3, #4
 80029cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029d4:	3304      	adds	r3, #4
 80029d6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80029da:	429a      	cmp	r2, r3
 80029dc:	d2af      	bcs.n	800293e <mbedtls_aes_crypt_xts+0x164>
    for (; i < n; i++) {
 80029de:	e018      	b.n	8002a12 <mbedtls_aes_crypt_xts+0x238>
        r[i] = a[i] ^ b[i];
 80029e0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80029e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029e8:	4413      	add	r3, r2
 80029ea:	7819      	ldrb	r1, [r3, #0]
 80029ec:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80029f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029f4:	4413      	add	r3, r2
 80029f6:	781a      	ldrb	r2, [r3, #0]
 80029f8:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80029fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a00:	4403      	add	r3, r0
 8002a02:	404a      	eors	r2, r1
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8002a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a12:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d8e0      	bhi.n	80029e0 <mbedtls_aes_crypt_xts+0x206>
}
 8002a1e:	bf00      	nop
        }

        mbedtls_xor(tmp, input, tweak, 16);

        ret = mbedtls_aes_crypt_ecb(&ctx->crypt, mode, tmp, tmp);
 8002a20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002a24:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a2e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002a32:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8002a36:	f5a1 71a0 	sub.w	r1, r1, #320	; 0x140
 8002a3a:	6809      	ldr	r1, [r1, #0]
 8002a3c:	f7ff fd0c 	bl	8002458 <mbedtls_aes_crypt_ecb>
 8002a40:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
        if (ret != 0) {
 8002a44:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <mbedtls_aes_crypt_xts+0x278>
            return ret;
 8002a4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002a50:	e281      	b.n	8002f56 <mbedtls_aes_crypt_xts+0x77c>
 8002a52:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002a56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002a5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    size_t i = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (; (i + 4) <= n; i += 4) {
 8002a76:	e048      	b.n	8002b0a <mbedtls_aes_crypt_xts+0x330>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8002a78:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002a7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a80:	4413      	add	r3, r2
 8002a82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8002a8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002a92:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a96:	601a      	str	r2, [r3, #0]
    return r;
 8002a98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002a9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8002aa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002aaa:	440b      	add	r3, r1
 8002aac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002ab0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 8002ab8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002abc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ac0:	6019      	str	r1, [r3, #0]
    return r;
 8002ac2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ac6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4053      	eors	r3, r2
 8002ace:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        mbedtls_put_unaligned_uint32(r + i, x);
 8002ad2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ada:	4413      	add	r3, r2
 8002adc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ae0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ae8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002af6:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8002af8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002afc:	601a      	str	r2, [r3, #0]
}
 8002afe:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8002b00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b04:	3304      	adds	r3, #4
 8002b06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b0e:	3304      	adds	r3, #4
 8002b10:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d2af      	bcs.n	8002a78 <mbedtls_aes_crypt_xts+0x29e>
    for (; i < n; i++) {
 8002b18:	e018      	b.n	8002b4c <mbedtls_aes_crypt_xts+0x372>
        r[i] = a[i] ^ b[i];
 8002b1a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002b1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b22:	4413      	add	r3, r2
 8002b24:	7819      	ldrb	r1, [r3, #0]
 8002b26:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b2e:	4413      	add	r3, r2
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b3a:	4403      	add	r3, r0
 8002b3c:	404a      	eors	r2, r1
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8002b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b46:	3301      	adds	r3, #1
 8002b48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002b4c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8002b50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d8e0      	bhi.n	8002b1a <mbedtls_aes_crypt_xts+0x340>
}
 8002b58:	bf00      	nop
        }

        mbedtls_xor(output, tmp, tweak, 16);

        /* Update the tweak for the next block. */
        mbedtls_gf128mul_x_ble(tweak, tweak);
 8002b5a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002b5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fdbc 	bl	80026e2 <mbedtls_gf128mul_x_ble>

        output += 16;
 8002b6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002b6e:	3310      	adds	r3, #16
 8002b70:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        input += 16;
 8002b74:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b78:	3310      	adds	r3, #16
 8002b7a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    while (blocks--) {
 8002b7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b82:	1e5a      	subs	r2, r3, #1
 8002b84:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f47f ae93 	bne.w	80028b4 <mbedtls_aes_crypt_xts+0xda>
    }

    if (leftover) {
 8002b8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 81de 	beq.w	8002f54 <mbedtls_aes_crypt_xts+0x77a>
        /* If we are on the leftover bytes in a decrypt operation, we need to
         * use the previous tweak for these bytes (as saved in prev_tweak). */
        unsigned char *t = mode == MBEDTLS_AES_DECRYPT ? prev_tweak : tweak;
 8002b98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002b9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <mbedtls_aes_crypt_xts+0x3d2>
 8002ba6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002baa:	e001      	b.n	8002bb0 <mbedtls_aes_crypt_xts+0x3d6>
 8002bac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bb0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        /* We are now on the final part of the data unit, which doesn't divide
         * evenly by 16. It's time for ciphertext stealing. */
        size_t i;
        unsigned char *prev_output = output - 16;
 8002bb4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002bb8:	3b10      	subs	r3, #16
 8002bba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

        /* Copy ciphertext bytes from the previous block to our output for each
         * byte of ciphertext we won't steal. */
        for (i = 0; i < leftover; i++) {
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002bc4:	e010      	b.n	8002be8 <mbedtls_aes_crypt_xts+0x40e>
            output[i] = prev_output[i];
 8002bc6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8002bca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002bce:	441a      	add	r2, r3
 8002bd0:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8002bd4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002bd8:	440b      	add	r3, r1
 8002bda:	7812      	ldrb	r2, [r2, #0]
 8002bdc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < leftover; i++) {
 8002bde:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002be2:	3301      	adds	r3, #1
 8002be4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002be8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002bec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d3e8      	bcc.n	8002bc6 <mbedtls_aes_crypt_xts+0x3ec>
 8002bf4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bfc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002c04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    size_t i = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    for (; (i + 4) <= n; i += 4) {
 8002c1a:	e048      	b.n	8002cae <mbedtls_aes_crypt_xts+0x4d4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8002c1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c24:	4413      	add	r3, r2
 8002c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8002c32:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c36:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002c3a:	601a      	str	r2, [r3, #0]
    return r;
 8002c3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8002c4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c4e:	440b      	add	r3, r1
 8002c50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 8002c5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c60:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c64:	6019      	str	r1, [r3, #0]
    return r;
 8002c66:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4053      	eors	r3, r2
 8002c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        mbedtls_put_unaligned_uint32(r + i, x);
 8002c76:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c7e:	4413      	add	r3, r2
 8002c80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c8c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c9a:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8002c9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ca0:	601a      	str	r2, [r3, #0]
}
 8002ca2:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8002ca4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ca8:	3304      	adds	r3, #4
 8002caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d2af      	bcs.n	8002c1c <mbedtls_aes_crypt_xts+0x442>
    for (; i < n; i++) {
 8002cbc:	e018      	b.n	8002cf0 <mbedtls_aes_crypt_xts+0x516>
        r[i] = a[i] ^ b[i];
 8002cbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cc6:	4413      	add	r3, r2
 8002cc8:	7819      	ldrb	r1, [r3, #0]
 8002cca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002cce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cd2:	4413      	add	r3, r2
 8002cd4:	781a      	ldrb	r2, [r3, #0]
 8002cd6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8002cda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cde:	4403      	add	r3, r0
 8002ce0:	404a      	eors	r2, r1
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8002ce6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cea:	3301      	adds	r3, #1
 8002cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cf0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d8e0      	bhi.n	8002cbe <mbedtls_aes_crypt_xts+0x4e4>
}
 8002cfc:	bf00      	nop
        /* Copy the remainder of the input for this final round. */
        mbedtls_xor(tmp, input, t, leftover);

        /* Copy ciphertext bytes from the previous block for input in this
         * round. */
        mbedtls_xor(tmp + i, prev_output + i, t + i, 16 - i);
 8002cfe:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002d02:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002d06:	18d0      	adds	r0, r2, r3
 8002d08:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8002d0c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002d10:	18d1      	adds	r1, r2, r3
 8002d12:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8002d16:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002d1a:	441a      	add	r2, r3
 8002d1c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002d20:	f1c3 0310 	rsb	r3, r3, #16
 8002d24:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 8002d28:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8002d2c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    size_t i = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    for (; (i + 4) <= n; i += 4) {
 8002d3a:	e048      	b.n	8002dce <mbedtls_aes_crypt_xts+0x5f4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8002d3c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d44:	4413      	add	r3, r2
 8002d46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8002d52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d5a:	601a      	str	r2, [r3, #0]
    return r;
 8002d5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8002d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d6e:	440b      	add	r3, r1
 8002d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 8002d7c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d84:	6019      	str	r1, [r3, #0]
    return r;
 8002d86:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d8a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4053      	eors	r3, r2
 8002d92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        mbedtls_put_unaligned_uint32(r + i, x);
 8002d96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d9e:	4413      	add	r3, r2
 8002da0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002da4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002da8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dac:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002db6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dba:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8002dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dc0:	601a      	str	r2, [r3, #0]
}
 8002dc2:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8002dc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dc8:	3304      	adds	r3, #4
 8002dca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d2af      	bcs.n	8002d3c <mbedtls_aes_crypt_xts+0x562>
    for (; i < n; i++) {
 8002ddc:	e018      	b.n	8002e10 <mbedtls_aes_crypt_xts+0x636>
        r[i] = a[i] ^ b[i];
 8002dde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002de6:	4413      	add	r3, r2
 8002de8:	7819      	ldrb	r1, [r3, #0]
 8002dea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002df2:	4413      	add	r3, r2
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8002dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dfe:	4403      	add	r3, r0
 8002e00:	404a      	eors	r2, r1
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8002e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e10:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002e14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d8e0      	bhi.n	8002dde <mbedtls_aes_crypt_xts+0x604>
}
 8002e1c:	bf00      	nop

        ret = mbedtls_aes_crypt_ecb(&ctx->crypt, mode, tmp, tmp);
 8002e1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002e22:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e2c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002e30:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8002e34:	f5a1 71a0 	sub.w	r1, r1, #320	; 0x140
 8002e38:	6809      	ldr	r1, [r1, #0]
 8002e3a:	f7ff fb0d 	bl	8002458 <mbedtls_aes_crypt_ecb>
 8002e3e:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
        if (ret != 0) {
 8002e42:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <mbedtls_aes_crypt_xts+0x676>
            return ret;
 8002e4a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002e4e:	e082      	b.n	8002f56 <mbedtls_aes_crypt_xts+0x77c>
 8002e50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002e64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e68:	2310      	movs	r3, #16
 8002e6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    size_t i = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    for (; (i + 4) <= n; i += 4) {
 8002e74:	e046      	b.n	8002f04 <mbedtls_aes_crypt_xts+0x72a>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8002e76:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e7e:	4413      	add	r3, r2
 8002e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8002e8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002e90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e94:	601a      	str	r2, [r3, #0]
    return r;
 8002e96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002e9a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8002ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ea8:	440b      	add	r3, r1
 8002eaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002eae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 8002eb6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002eba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ebe:	6019      	str	r1, [r3, #0]
    return r;
 8002ec0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ec4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4053      	eors	r3, r2
 8002ecc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        mbedtls_put_unaligned_uint32(r + i, x);
 8002ed0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ed8:	4413      	add	r3, r2
 8002eda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002edc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ee0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ee4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002eee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ef2:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8002ef4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ef6:	601a      	str	r2, [r3, #0]
}
 8002ef8:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8002efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002efe:	3304      	adds	r3, #4
 8002f00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f08:	3304      	adds	r3, #4
 8002f0a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d2b1      	bcs.n	8002e76 <mbedtls_aes_crypt_xts+0x69c>
    for (; i < n; i++) {
 8002f12:	e018      	b.n	8002f46 <mbedtls_aes_crypt_xts+0x76c>
        r[i] = a[i] ^ b[i];
 8002f14:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f1c:	4413      	add	r3, r2
 8002f1e:	7819      	ldrb	r1, [r3, #0]
 8002f20:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f28:	4413      	add	r3, r2
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f34:	4403      	add	r3, r0
 8002f36:	404a      	eors	r2, r1
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8002f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f40:	3301      	adds	r3, #1
 8002f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002f46:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d8e0      	bhi.n	8002f14 <mbedtls_aes_crypt_xts+0x73a>
}
 8002f52:	bf00      	nop
        /* Write the result back to the previous block, overriding the previous
         * output we copied. */
        mbedtls_xor(prev_output, tmp, t, 16);
    }

    return 0;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd90      	pop	{r4, r7, pc}

08002f60 <mbedtls_aes_crypt_cfb128>:
                             size_t length,
                             size_t *iv_off,
                             unsigned char iv[16],
                             const unsigned char *input,
                             unsigned char *output)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
    int c;
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8002f6e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8002f72:	61fb      	str	r3, [r7, #28]
    size_t n;

    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d005      	beq.n	8002f86 <mbedtls_aes_crypt_cfb128+0x26>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <mbedtls_aes_crypt_cfb128+0x26>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8002f80:	f06f 0320 	mvn.w	r3, #32
 8002f84:	e071      	b.n	800306a <mbedtls_aes_crypt_cfb128+0x10a>
    }

    n = *iv_off;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	61bb      	str	r3, [r7, #24]

    if (n > 15) {
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b0f      	cmp	r3, #15
 8002f90:	d902      	bls.n	8002f98 <mbedtls_aes_crypt_cfb128+0x38>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8002f92:	f06f 0320 	mvn.w	r3, #32
 8002f96:	e068      	b.n	800306a <mbedtls_aes_crypt_cfb128+0x10a>
    }

    if (mode == MBEDTLS_AES_DECRYPT) {
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d156      	bne.n	800304c <mbedtls_aes_crypt_cfb128+0xec>
        while (length--) {
 8002f9e:	e02a      	b.n	8002ff6 <mbedtls_aes_crypt_cfb128+0x96>
            if (n == 0) {
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <mbedtls_aes_crypt_cfb128+0x5a>
                ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002faa:	2101      	movs	r1, #1
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7ff fa53 	bl	8002458 <mbedtls_aes_crypt_ecb>
 8002fb2:	61f8      	str	r0, [r7, #28]
                if (ret != 0) {
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d153      	bne.n	8003062 <mbedtls_aes_crypt_cfb128+0x102>
                    goto exit;
                }
            }

            c = *input++;
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	617b      	str	r3, [r7, #20]
            *output++ = (unsigned char) (c ^ iv[n]);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	b25a      	sxtb	r2, r3
 8002fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	440b      	add	r3, r1
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	b25b      	sxtb	r3, r3
 8002fd2:	4053      	eors	r3, r2
 8002fd4:	b259      	sxtb	r1, r3
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	633a      	str	r2, [r7, #48]	; 0x30
 8002fdc:	b2ca      	uxtb	r2, r1
 8002fde:	701a      	strb	r2, [r3, #0]
            iv[n] = (unsigned char) c;
 8002fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]

            n = (n + 1) & 0x0F;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	61bb      	str	r3, [r7, #24]
        while (length--) {
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	1e5a      	subs	r2, r3, #1
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1cf      	bne.n	8002fa0 <mbedtls_aes_crypt_cfb128+0x40>
 8003000:	e029      	b.n	8003056 <mbedtls_aes_crypt_cfb128+0xf6>
        }
    } else {
        while (length--) {
            if (n == 0) {
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <mbedtls_aes_crypt_cfb128+0xbc>
                ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800300c:	2101      	movs	r1, #1
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff fa22 	bl	8002458 <mbedtls_aes_crypt_ecb>
 8003014:	61f8      	str	r0, [r7, #28]
                if (ret != 0) {
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d124      	bne.n	8003066 <mbedtls_aes_crypt_cfb128+0x106>
                    goto exit;
                }
            }

            iv[n] = *output++ = (unsigned char) (iv[n] ^ *input++);
 800301c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4413      	add	r3, r2
 8003022:	7819      	ldrb	r1, [r3, #0]
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	62fa      	str	r2, [r7, #44]	; 0x2c
 800302a:	781a      	ldrb	r2, [r3, #0]
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	1c58      	adds	r0, r3, #1
 8003030:	6338      	str	r0, [r7, #48]	; 0x30
 8003032:	404a      	eors	r2, r1
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	440a      	add	r2, r1
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	7013      	strb	r3, [r2, #0]

            n = (n + 1) & 0x0F;
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	3301      	adds	r3, #1
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	61bb      	str	r3, [r7, #24]
        while (length--) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	1e5a      	subs	r2, r3, #1
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1d5      	bne.n	8003002 <mbedtls_aes_crypt_cfb128+0xa2>
        }
    }

    *iv_off = n;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	601a      	str	r2, [r3, #0]
    ret = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	e002      	b.n	8003068 <mbedtls_aes_crypt_cfb128+0x108>
                    goto exit;
 8003062:	bf00      	nop
 8003064:	e000      	b.n	8003068 <mbedtls_aes_crypt_cfb128+0x108>
                    goto exit;
 8003066:	bf00      	nop

exit:
    return ret;
 8003068:	69fb      	ldr	r3, [r7, #28]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3720      	adds	r7, #32
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <mbedtls_aes_crypt_ofb>:
                          size_t length,
                          size_t *iv_off,
                          unsigned char iv[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
    size_t n;

    n = *iv_off;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	613b      	str	r3, [r7, #16]

    if (n > 15) {
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b0f      	cmp	r3, #15
 800308e:	d922      	bls.n	80030d6 <mbedtls_aes_crypt_ofb+0x64>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8003090:	f06f 0320 	mvn.w	r3, #32
 8003094:	e02a      	b.n	80030ec <mbedtls_aes_crypt_ofb+0x7a>
    }

    while (length--) {
        if (n == 0) {
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d109      	bne.n	80030b0 <mbedtls_aes_crypt_ofb+0x3e>
            ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	2101      	movs	r1, #1
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f7ff f9d8 	bl	8002458 <mbedtls_aes_crypt_ecb>
 80030a8:	6178      	str	r0, [r7, #20]
            if (ret != 0) {
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d11b      	bne.n	80030e8 <mbedtls_aes_crypt_ofb+0x76>
                goto exit;
            }
        }
        *output++ =  *input++ ^ iv[n];
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	623a      	str	r2, [r7, #32]
 80030b6:	7819      	ldrb	r1, [r3, #0]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	1c58      	adds	r0, r3, #1
 80030c4:	6278      	str	r0, [r7, #36]	; 0x24
 80030c6:	404a      	eors	r2, r1
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	701a      	strb	r2, [r3, #0]

        n = (n + 1) & 0x0F;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	3301      	adds	r3, #1
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	613b      	str	r3, [r7, #16]
    while (length--) {
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	1e5a      	subs	r2, r3, #1
 80030da:	60ba      	str	r2, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1da      	bne.n	8003096 <mbedtls_aes_crypt_ofb+0x24>
    }

    *iv_off = n;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e000      	b.n	80030ea <mbedtls_aes_crypt_ofb+0x78>
                goto exit;
 80030e8:	bf00      	nop

exit:
    return ret;
 80030ea:	697b      	ldr	r3, [r7, #20]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <mbedtls_aes_crypt_ctr>:
                          size_t *nc_off,
                          unsigned char nonce_counter[16],
                          unsigned char stream_block[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b094      	sub	sp, #80	; 0x50
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8003102:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8003106:	64fb      	str	r3, [r7, #76]	; 0x4c

    size_t offset = *nc_off;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	64bb      	str	r3, [r7, #72]	; 0x48

    if (offset > 0x0F) {
 800310e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003110:	2b0f      	cmp	r3, #15
 8003112:	d902      	bls.n	800311a <mbedtls_aes_crypt_ctr+0x26>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8003114:	f06f 0320 	mvn.w	r3, #32
 8003118:	e086      	b.n	8003228 <mbedtls_aes_crypt_ctr+0x134>
    }

    for (size_t i = 0; i < length;) {
 800311a:	2300      	movs	r3, #0
 800311c:	647b      	str	r3, [r7, #68]	; 0x44
 800311e:	e072      	b.n	8003206 <mbedtls_aes_crypt_ctr+0x112>
        size_t n = 16;
 8003120:	2310      	movs	r3, #16
 8003122:	643b      	str	r3, [r7, #64]	; 0x40
        if (offset == 0) {
 8003124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10d      	bne.n	8003146 <mbedtls_aes_crypt_ctr+0x52>
            ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block);
 800312a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	2101      	movs	r1, #1
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7ff f991 	bl	8002458 <mbedtls_aes_crypt_ecb>
 8003136:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != 0) {
 8003138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d172      	bne.n	8003224 <mbedtls_aes_crypt_ctr+0x130>
                goto exit;
            }
            mbedtls_ctr_increment_counter(nonce_counter);
 800313e:	6838      	ldr	r0, [r7, #0]
 8003140:	f7fd fd54 	bl	8000bec <mbedtls_ctr_increment_counter>
 8003144:	e003      	b.n	800314e <mbedtls_aes_crypt_ctr+0x5a>
        } else {
            n -= offset;
 8003146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	643b      	str	r3, [r7, #64]	; 0x40
        }

        if (n > (length - i)) {
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003156:	429a      	cmp	r2, r3
 8003158:	d903      	bls.n	8003162 <mbedtls_aes_crypt_ctr+0x6e>
            n = (length - i);
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	643b      	str	r3, [r7, #64]	; 0x40
        }
        mbedtls_xor(&output[i], &input[i], &stream_block[offset], n);
 8003162:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003166:	18d1      	adds	r1, r2, r3
 8003168:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800316a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316c:	441a      	add	r2, r3
 800316e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003172:	4403      	add	r3, r0
 8003174:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003176:	63ba      	str	r2, [r7, #56]	; 0x38
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
 800317a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317c:	633b      	str	r3, [r7, #48]	; 0x30
    size_t i = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (; (i + 4) <= n; i += 4) {
 8003182:	e01e      	b.n	80031c2 <mbedtls_aes_crypt_ctr+0xce>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8003184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	4413      	add	r3, r2
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
 800318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003190:	61bb      	str	r3, [r7, #24]
    return r;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	440b      	add	r3, r1
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80031a0:	617b      	str	r3, [r7, #20]
    return r;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	4053      	eors	r3, r2
 80031a6:	623b      	str	r3, [r7, #32]
        mbedtls_put_unaligned_uint32(r + i, x);
 80031a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	4413      	add	r3, r2
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	3304      	adds	r3, #4
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	3304      	adds	r3, #4
 80031c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d2db      	bcs.n	8003184 <mbedtls_aes_crypt_ctr+0x90>
    for (; i < n; i++) {
 80031cc:	e010      	b.n	80031f0 <mbedtls_aes_crypt_ctr+0xfc>
        r[i] = a[i] ^ b[i];
 80031ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d2:	4413      	add	r3, r2
 80031d4:	7819      	ldrb	r1, [r3, #0]
 80031d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	4413      	add	r3, r2
 80031dc:	781a      	ldrb	r2, [r3, #0]
 80031de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	4403      	add	r3, r0
 80031e4:	404a      	eors	r2, r1
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	3301      	adds	r3, #1
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d8ea      	bhi.n	80031ce <mbedtls_aes_crypt_ctr+0xda>
}
 80031f8:	bf00      	nop
        // offset might be non-zero for the last block, but in that case, we don't use it again
        offset = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	64bb      	str	r3, [r7, #72]	; 0x48
        i += n;
 80031fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003202:	4413      	add	r3, r2
 8003204:	647b      	str	r3, [r7, #68]	; 0x44
    for (size_t i = 0; i < length;) {
 8003206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	d388      	bcc.n	8003120 <mbedtls_aes_crypt_ctr+0x2c>
    }

    // capture offset for future resumption
    *nc_off = (*nc_off + length) % 16;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4413      	add	r3, r2
 8003216:	f003 020f 	and.w	r2, r3, #15
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	601a      	str	r2, [r3, #0]

    ret = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003222:	e000      	b.n	8003226 <mbedtls_aes_crypt_ctr+0x132>
                goto exit;
 8003224:	bf00      	nop

exit:
    return ret;
 8003226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003228:	4618      	mov	r0, r3
 800322a:	3750      	adds	r7, #80	; 0x50
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <aria_p1>:
/* armcc5 --gnu defines __GNUC__ but doesn't support GNU's extended asm */
#if defined(__GNUC__) && \
    (!defined(__ARMCC_VERSION) || __ARMCC_VERSION >= 6000000) && \
    __ARM_ARCH >= 6
static inline uint32_t aria_p1(uint32_t x)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    uint32_t r;
    __asm("rev16 %0, %1" : "=l" (r) : "l" (x));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	ba5b      	rev16	r3, r3
 800323c:	60fb      	str	r3, [r7, #12]
    return r;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <aria_a>:
 * half of App. B.1 in [1] in terms of 4-byte operators P1, P2, P3 and P4.
 * The implementation below uses only P1 and P2 as they are sufficient.
 */
static inline void aria_a(uint32_t *a, uint32_t *b,
                          uint32_t *c, uint32_t *d)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
    uint32_t ta, tb, tc;
    ta  =  *b;                      // 4567
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	61fb      	str	r3, [r7, #28]
    *b  =  *a;                      // 0123
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	601a      	str	r2, [r3, #0]
    *a  =  ARIA_P2(ta);             // 6745
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	ea4f 4233 	mov.w	r2, r3, ror #16
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	601a      	str	r2, [r3, #0]
    tb  =  ARIA_P2(*d);             // efcd
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	ea4f 4333 	mov.w	r3, r3, ror #16
 800327a:	61bb      	str	r3, [r7, #24]
    *d  =  ARIA_P1(*c);             // 98ba
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ffd5 	bl	8003230 <aria_p1>
 8003286:	4602      	mov	r2, r0
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	601a      	str	r2, [r3, #0]
    *c  =  ARIA_P1(tb);             // fedc
 800328c:	69b8      	ldr	r0, [r7, #24]
 800328e:	f7ff ffcf 	bl	8003230 <aria_p1>
 8003292:	4602      	mov	r2, r0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	601a      	str	r2, [r3, #0]
    ta  ^= *d;                      // 4567+98ba
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	4053      	eors	r3, r2
 80032a0:	61fb      	str	r3, [r7, #28]
    tc  =  ARIA_P2(*b);             // 2301
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	ea4f 4333 	mov.w	r3, r3, ror #16
 80032aa:	617b      	str	r3, [r7, #20]
    ta  =  ARIA_P1(ta) ^ tc ^ *c;   // 2301+5476+89ab+fedc
 80032ac:	69f8      	ldr	r0, [r7, #28]
 80032ae:	f7ff ffbf 	bl	8003230 <aria_p1>
 80032b2:	4602      	mov	r2, r0
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	405a      	eors	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4053      	eors	r3, r2
 80032be:	61fb      	str	r3, [r7, #28]
    tb  ^= ARIA_P2(*d);             // ba98+efcd
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	ea4f 4333 	mov.w	r3, r3, ror #16
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4053      	eors	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
    tc  ^= ARIA_P1(*a);             // 2301+7654
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ffac 	bl	8003230 <aria_p1>
 80032d8:	4602      	mov	r2, r0
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	4053      	eors	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
    *b  ^= ta ^ tb;                 // 0123+2301+5476+89ab+ba98+efcd+fedc OUT
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	69f9      	ldr	r1, [r7, #28]
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	404b      	eors	r3, r1
 80032ea:	405a      	eors	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	601a      	str	r2, [r3, #0]
    tb  =  ARIA_P2(tb) ^ ta;        // 2301+5476+89ab+98ba+cdef+fedc
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	ea4f 4333 	mov.w	r3, r3, ror #16
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	4053      	eors	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
    *a  ^= ARIA_P1(tb);             // 3210+4567+6745+89ab+98ba+dcfe+efcd OUT
 80032fc:	69b8      	ldr	r0, [r7, #24]
 80032fe:	f7ff ff97 	bl	8003230 <aria_p1>
 8003302:	4602      	mov	r2, r0
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	405a      	eors	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	601a      	str	r2, [r3, #0]
    ta  =  ARIA_P2(ta);             // 0123+7654+ab89+dcfe
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	ea4f 4333 	mov.w	r3, r3, ror #16
 8003314:	61fb      	str	r3, [r7, #28]
    *d  ^= ARIA_P1(ta) ^ tc;        // 1032+2301+6745+7654+98ba+ba98+cdef OUT
 8003316:	69f8      	ldr	r0, [r7, #28]
 8003318:	f7ff ff8a 	bl	8003230 <aria_p1>
 800331c:	4602      	mov	r2, r0
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	405a      	eors	r2, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	405a      	eors	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	601a      	str	r2, [r3, #0]
    tc  =  ARIA_P2(tc);             // 0123+5476
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	ea4f 4333 	mov.w	r3, r3, ror #16
 8003332:	617b      	str	r3, [r7, #20]
    *c  ^= ARIA_P1(tc) ^ ta;        // 0123+1032+4567+7654+ab89+dcfe+fedc OUT
 8003334:	6978      	ldr	r0, [r7, #20]
 8003336:	f7ff ff7b 	bl	8003230 <aria_p1>
 800333a:	4602      	mov	r2, r0
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	405a      	eors	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	405a      	eors	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	601a      	str	r2, [r3, #0]
}
 800334a:	bf00      	nop
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <aria_sl>:
 */
static inline void aria_sl(uint32_t *a, uint32_t *b,
                           uint32_t *c, uint32_t *d,
                           const uint8_t sa[256], const uint8_t sb[256],
                           const uint8_t sc[256], const uint8_t sd[256])
{
 8003352:	b480      	push	{r7}
 8003354:	b085      	sub	sp, #20
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	603b      	str	r3, [r7, #0]
    *a = ((uint32_t) sa[MBEDTLS_BYTE_0(*a)]) ^
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4413      	add	r3, r2
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*a)]) <<  8) ^
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	b2db      	uxtb	r3, r3
 8003378:	4619      	mov	r1, r3
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	440b      	add	r3, r1
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	021b      	lsls	r3, r3, #8
    *a = ((uint32_t) sa[MBEDTLS_BYTE_0(*a)]) ^
 8003382:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*a)]) << 16) ^
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	b2db      	uxtb	r3, r3
 800338c:	4619      	mov	r1, r3
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	440b      	add	r3, r1
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*a)]) <<  8) ^
 8003396:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*a)]) << 24);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	0e1b      	lsrs	r3, r3, #24
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	4619      	mov	r1, r3
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	440b      	add	r3, r1
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*a)]) << 16) ^
 80033aa:	405a      	eors	r2, r3
    *a = ((uint32_t) sa[MBEDTLS_BYTE_0(*a)]) ^
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	601a      	str	r2, [r3, #0]
    *b = ((uint32_t) sa[MBEDTLS_BYTE_0(*b)]) ^
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	4413      	add	r3, r2
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*b)]) <<  8) ^
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	4619      	mov	r1, r3
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	440b      	add	r3, r1
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	021b      	lsls	r3, r3, #8
    *b = ((uint32_t) sa[MBEDTLS_BYTE_0(*b)]) ^
 80033d2:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*b)]) << 16) ^
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	0c1b      	lsrs	r3, r3, #16
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	4619      	mov	r1, r3
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	440b      	add	r3, r1
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*b)]) <<  8) ^
 80033e6:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*b)]) << 24);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0e1b      	lsrs	r3, r3, #24
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	4619      	mov	r1, r3
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	440b      	add	r3, r1
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*b)]) << 16) ^
 80033fa:	405a      	eors	r2, r3
    *b = ((uint32_t) sa[MBEDTLS_BYTE_0(*b)]) ^
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	601a      	str	r2, [r3, #0]
    *c = ((uint32_t) sa[MBEDTLS_BYTE_0(*c)]) ^
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	4413      	add	r3, r2
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*c)]) <<  8) ^
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	b2db      	uxtb	r3, r3
 8003418:	4619      	mov	r1, r3
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	440b      	add	r3, r1
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	021b      	lsls	r3, r3, #8
    *c = ((uint32_t) sa[MBEDTLS_BYTE_0(*c)]) ^
 8003422:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*c)]) << 16) ^
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	b2db      	uxtb	r3, r3
 800342c:	4619      	mov	r1, r3
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	440b      	add	r3, r1
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*c)]) <<  8) ^
 8003436:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*c)]) << 24);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	0e1b      	lsrs	r3, r3, #24
 800343e:	b2db      	uxtb	r3, r3
 8003440:	4619      	mov	r1, r3
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	440b      	add	r3, r1
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*c)]) << 16) ^
 800344a:	405a      	eors	r2, r3
    *c = ((uint32_t) sa[MBEDTLS_BYTE_0(*c)]) ^
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	601a      	str	r2, [r3, #0]
    *d = ((uint32_t) sa[MBEDTLS_BYTE_0(*d)]) ^
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	4413      	add	r3, r2
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*d)]) <<  8) ^
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	b2db      	uxtb	r3, r3
 8003468:	4619      	mov	r1, r3
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	440b      	add	r3, r1
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	021b      	lsls	r3, r3, #8
    *d = ((uint32_t) sa[MBEDTLS_BYTE_0(*d)]) ^
 8003472:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*d)]) << 16) ^
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	b2db      	uxtb	r3, r3
 800347c:	4619      	mov	r1, r3
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	440b      	add	r3, r1
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*d)]) <<  8) ^
 8003486:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*d)]) << 24);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	0e1b      	lsrs	r3, r3, #24
 800348e:	b2db      	uxtb	r3, r3
 8003490:	4619      	mov	r1, r3
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	440b      	add	r3, r1
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*d)]) << 16) ^
 800349a:	405a      	eors	r2, r3
    *d = ((uint32_t) sa[MBEDTLS_BYTE_0(*d)]) ^
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	601a      	str	r2, [r3, #0]
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <aria_fo_xor>:
/*
 * Helper for key schedule: r = FO( p, k ) ^ x
 */
static void aria_fo_xor(uint32_t r[4], const uint32_t p[4],
                        const uint32_t k[4], const uint32_t x[4])
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b08d      	sub	sp, #52	; 0x34
 80034b0:	af04      	add	r7, sp, #16
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
    uint32_t a, b, c, d;

    a = p[0] ^ k[0];
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4053      	eors	r3, r2
 80034c4:	61fb      	str	r3, [r7, #28]
    b = p[1] ^ k[1];
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	3304      	adds	r3, #4
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3304      	adds	r3, #4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4053      	eors	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
    c = p[2] ^ k[2];
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3308      	adds	r3, #8
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3308      	adds	r3, #8
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4053      	eors	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]
    d = p[3] ^ k[3];
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	330c      	adds	r3, #12
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	330c      	adds	r3, #12
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4053      	eors	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]

    aria_sl(&a, &b, &c, &d, aria_sb1, aria_sb2, aria_is1, aria_is2);
 80034f6:	f107 0310 	add.w	r3, r7, #16
 80034fa:	f107 0214 	add.w	r2, r7, #20
 80034fe:	f107 0118 	add.w	r1, r7, #24
 8003502:	f107 001c 	add.w	r0, r7, #28
 8003506:	4c1b      	ldr	r4, [pc, #108]	; (8003574 <aria_fo_xor+0xc8>)
 8003508:	9403      	str	r4, [sp, #12]
 800350a:	4c1b      	ldr	r4, [pc, #108]	; (8003578 <aria_fo_xor+0xcc>)
 800350c:	9402      	str	r4, [sp, #8]
 800350e:	4c1b      	ldr	r4, [pc, #108]	; (800357c <aria_fo_xor+0xd0>)
 8003510:	9401      	str	r4, [sp, #4]
 8003512:	4c1b      	ldr	r4, [pc, #108]	; (8003580 <aria_fo_xor+0xd4>)
 8003514:	9400      	str	r4, [sp, #0]
 8003516:	f7ff ff1c 	bl	8003352 <aria_sl>
    aria_a(&a, &b, &c, &d);
 800351a:	f107 0310 	add.w	r3, r7, #16
 800351e:	f107 0214 	add.w	r2, r7, #20
 8003522:	f107 0118 	add.w	r1, r7, #24
 8003526:	f107 001c 	add.w	r0, r7, #28
 800352a:	f7ff fe8f 	bl	800324c <aria_a>

    r[0] = a ^ x[0];
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	405a      	eors	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	601a      	str	r2, [r3, #0]
    r[1] = b ^ x[1];
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	3304      	adds	r3, #4
 800353e:	6819      	ldr	r1, [r3, #0]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3304      	adds	r3, #4
 8003546:	404a      	eors	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
    r[2] = c ^ x[2];
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	3308      	adds	r3, #8
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3308      	adds	r3, #8
 8003556:	404a      	eors	r2, r1
 8003558:	601a      	str	r2, [r3, #0]
    r[3] = d ^ x[3];
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	330c      	adds	r3, #12
 8003566:	404a      	eors	r2, r1
 8003568:	601a      	str	r2, [r3, #0]
}
 800356a:	bf00      	nop
 800356c:	3724      	adds	r7, #36	; 0x24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd90      	pop	{r4, r7, pc}
 8003572:	bf00      	nop
 8003574:	0800dbd4 	.word	0x0800dbd4
 8003578:	0800dad4 	.word	0x0800dad4
 800357c:	0800d9d4 	.word	0x0800d9d4
 8003580:	0800d8d4 	.word	0x0800d8d4

08003584 <aria_fe_xor>:
/*
 * Helper for key schedule: r = FE( p, k ) ^ x
 */
static void aria_fe_xor(uint32_t r[4], const uint32_t p[4],
                        const uint32_t k[4], const uint32_t x[4])
{
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b08d      	sub	sp, #52	; 0x34
 8003588:	af04      	add	r7, sp, #16
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
    uint32_t a, b, c, d;

    a = p[0] ^ k[0];
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4053      	eors	r3, r2
 800359c:	61fb      	str	r3, [r7, #28]
    b = p[1] ^ k[1];
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	3304      	adds	r3, #4
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4053      	eors	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
    c = p[2] ^ k[2];
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	3308      	adds	r3, #8
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3308      	adds	r3, #8
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4053      	eors	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
    d = p[3] ^ k[3];
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	330c      	adds	r3, #12
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	330c      	adds	r3, #12
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4053      	eors	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]

    aria_sl(&a, &b, &c, &d, aria_is1, aria_is2, aria_sb1, aria_sb2);
 80035ce:	f107 0310 	add.w	r3, r7, #16
 80035d2:	f107 0214 	add.w	r2, r7, #20
 80035d6:	f107 0118 	add.w	r1, r7, #24
 80035da:	f107 001c 	add.w	r0, r7, #28
 80035de:	4c1b      	ldr	r4, [pc, #108]	; (800364c <aria_fe_xor+0xc8>)
 80035e0:	9403      	str	r4, [sp, #12]
 80035e2:	4c1b      	ldr	r4, [pc, #108]	; (8003650 <aria_fe_xor+0xcc>)
 80035e4:	9402      	str	r4, [sp, #8]
 80035e6:	4c1b      	ldr	r4, [pc, #108]	; (8003654 <aria_fe_xor+0xd0>)
 80035e8:	9401      	str	r4, [sp, #4]
 80035ea:	4c1b      	ldr	r4, [pc, #108]	; (8003658 <aria_fe_xor+0xd4>)
 80035ec:	9400      	str	r4, [sp, #0]
 80035ee:	f7ff feb0 	bl	8003352 <aria_sl>
    aria_a(&a, &b, &c, &d);
 80035f2:	f107 0310 	add.w	r3, r7, #16
 80035f6:	f107 0214 	add.w	r2, r7, #20
 80035fa:	f107 0118 	add.w	r1, r7, #24
 80035fe:	f107 001c 	add.w	r0, r7, #28
 8003602:	f7ff fe23 	bl	800324c <aria_a>

    r[0] = a ^ x[0];
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	405a      	eors	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	601a      	str	r2, [r3, #0]
    r[1] = b ^ x[1];
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	3304      	adds	r3, #4
 8003616:	6819      	ldr	r1, [r3, #0]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3304      	adds	r3, #4
 800361e:	404a      	eors	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
    r[2] = c ^ x[2];
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	3308      	adds	r3, #8
 8003626:	6819      	ldr	r1, [r3, #0]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	3308      	adds	r3, #8
 800362e:	404a      	eors	r2, r1
 8003630:	601a      	str	r2, [r3, #0]
    r[3] = d ^ x[3];
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	330c      	adds	r3, #12
 800363e:	404a      	eors	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	3724      	adds	r7, #36	; 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd90      	pop	{r4, r7, pc}
 800364a:	bf00      	nop
 800364c:	0800d9d4 	.word	0x0800d9d4
 8003650:	0800d8d4 	.word	0x0800d8d4
 8003654:	0800dbd4 	.word	0x0800dbd4
 8003658:	0800dad4 	.word	0x0800dad4

0800365c <aria_rot128>:
 * MBEDTLS_GET_UINT32_LE / MBEDTLS_PUT_UINT32_LE ) so we need to reverse
 * bytes here.
 */
static void aria_rot128(uint32_t r[4], const uint32_t a[4],
                        const uint32_t b[4], uint8_t n)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	70fb      	strb	r3, [r7, #3]
    uint8_t i, j;
    uint32_t t, u;

    const uint8_t n1 = n % 32;              // bit offset
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	75fb      	strb	r3, [r7, #23]
    const uint8_t n2 = n1 ? 32 - n1 : 0;    // reverse bit offset
 8003672:	7dfb      	ldrb	r3, [r7, #23]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <aria_rot128+0x26>
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	f1c3 0320 	rsb	r3, r3, #32
 800367e:	b2db      	uxtb	r3, r3
 8003680:	e000      	b.n	8003684 <aria_rot128+0x28>
 8003682:	2300      	movs	r3, #0
 8003684:	75bb      	strb	r3, [r7, #22]

    j = (n / 32) % 4;                       // initial word offset
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	77bb      	strb	r3, [r7, #30]
    t = ARIA_P3(b[j]);                      // big endian
 8003692:	7fbb      	ldrb	r3, [r7, #30]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	ba1b      	rev	r3, r3
 800369e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < 4; i++) {
 80036a0:	2300      	movs	r3, #0
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e030      	b.n	8003708 <aria_rot128+0xac>
        j = (j + 1) % 4;                    // get next word, big endian
 80036a6:	7fbb      	ldrb	r3, [r7, #30]
 80036a8:	3301      	adds	r3, #1
 80036aa:	425a      	negs	r2, r3
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	f002 0203 	and.w	r2, r2, #3
 80036b4:	bf58      	it	pl
 80036b6:	4253      	negpl	r3, r2
 80036b8:	77bb      	strb	r3, [r7, #30]
        u = ARIA_P3(b[j]);
 80036ba:	7fbb      	ldrb	r3, [r7, #30]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	ba1b      	rev	r3, r3
 80036c6:	613b      	str	r3, [r7, #16]
        t <<= n1;                           // rotate
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	61bb      	str	r3, [r7, #24]
        t |= u >> n2;
 80036d2:	7dbb      	ldrb	r3, [r7, #22]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	fa22 f303 	lsr.w	r3, r2, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        t = ARIA_P3(t);                     // back to little endian
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	ba1b      	rev	r3, r3
 80036e4:	61bb      	str	r3, [r7, #24]
        r[i] = a[i] ^ t;                    // store
 80036e6:	7ffb      	ldrb	r3, [r7, #31]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	4413      	add	r3, r2
 80036ee:	6819      	ldr	r1, [r3, #0]
 80036f0:	7ffb      	ldrb	r3, [r7, #31]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	404a      	eors	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]
        t = u;                              // move to next word
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < 4; i++) {
 8003702:	7ffb      	ldrb	r3, [r7, #31]
 8003704:	3301      	adds	r3, #1
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	7ffb      	ldrb	r3, [r7, #31]
 800370a:	2b03      	cmp	r3, #3
 800370c:	d9cb      	bls.n	80036a6 <aria_rot128+0x4a>
    }
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	3724      	adds	r7, #36	; 0x24
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <mbedtls_aria_setkey_enc>:
/*
 * Set encryption key
 */
int mbedtls_aria_setkey_enc(mbedtls_aria_context *ctx,
                            const unsigned char *key, unsigned int keybits)
{
 800371c:	b5b0      	push	{r4, r5, r7, lr}
 800371e:	b0b2      	sub	sp, #200	; 0xc8
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
    /* round constant masks */
    const uint32_t rc[3][4] =
 8003728:	4ba5      	ldr	r3, [pc, #660]	; (80039c0 <mbedtls_aria_setkey_enc+0x2a4>)
 800372a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800372e:	461d      	mov	r5, r3
 8003730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003738:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800373c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };

    int i;
    uint32_t w[4][4], *w2;

    if (keybits != 128 && keybits != 192 && keybits != 256) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b80      	cmp	r3, #128	; 0x80
 8003744:	d009      	beq.n	800375a <mbedtls_aria_setkey_enc+0x3e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2bc0      	cmp	r3, #192	; 0xc0
 800374a:	d006      	beq.n	800375a <mbedtls_aria_setkey_enc+0x3e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003752:	d002      	beq.n	800375a <mbedtls_aria_setkey_enc+0x3e>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 8003754:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 8003758:	e12d      	b.n	80039b6 <mbedtls_aria_setkey_enc+0x29a>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003760:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003764:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003766:	61fb      	str	r3, [r7, #28]
    return r;
 8003768:	69fb      	ldr	r3, [r7, #28]
    }

    /* Copy key to W0 (and potential remainder to W1) */
    w[0][0] = MBEDTLS_GET_UINT32_LE(key,  0);
 800376a:	633b      	str	r3, [r7, #48]	; 0x30
    w[0][1] = MBEDTLS_GET_UINT32_LE(key,  4);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	3304      	adds	r3, #4
 8003770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003774:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003778:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800377a:	61bb      	str	r3, [r7, #24]
    return r;
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
    w[0][2] = MBEDTLS_GET_UINT32_LE(key,  8);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	3308      	adds	r3, #8
 8003784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003788:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800378c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800378e:	617b      	str	r3, [r7, #20]
    return r;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
    w[0][3] = MBEDTLS_GET_UINT32_LE(key, 12);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	330c      	adds	r3, #12
 8003798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800379c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037a0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80037a2:	613b      	str	r3, [r7, #16]
    return r;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c

    memset(w[1], 0, 16);
 80037a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037ac:	3310      	adds	r3, #16
 80037ae:	2210      	movs	r2, #16
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f009 fa4c 	bl	800cc50 <memset>
    if (keybits >= 192) {
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2bbf      	cmp	r3, #191	; 0xbf
 80037bc:	d913      	bls.n	80037e6 <mbedtls_aria_setkey_enc+0xca>
        w[1][0] = MBEDTLS_GET_UINT32_LE(key, 16);    // 192 bit key
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	3310      	adds	r3, #16
 80037c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037ca:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	643b      	str	r3, [r7, #64]	; 0x40
        w[1][1] = MBEDTLS_GET_UINT32_LE(key, 20);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	3314      	adds	r3, #20
 80037d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037de:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80037e0:	623b      	str	r3, [r7, #32]
    return r;
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if (keybits == 256) {
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ec:	d113      	bne.n	8003816 <mbedtls_aria_setkey_enc+0xfa>
        w[1][2] = MBEDTLS_GET_UINT32_LE(key, 24);    // 256 bit key
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	3318      	adds	r3, #24
 80037f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037fa:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	64bb      	str	r3, [r7, #72]	; 0x48
        w[1][3] = MBEDTLS_GET_UINT32_LE(key, 28);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	331c      	adds	r3, #28
 8003806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800380a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800380e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    i = (keybits - 128) >> 6;               // index: 0, 1, 2
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3b80      	subs	r3, #128	; 0x80
 800381a:	099b      	lsrs	r3, r3, #6
 800381c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    ctx->nr = 12 + 2 * i;                   // no. rounds: 12, 14, 16
 8003820:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003824:	3306      	adds	r3, #6
 8003826:	b2db      	uxtb	r3, r3
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	b2da      	uxtb	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	701a      	strb	r2, [r3, #0]

    aria_fo_xor(w[1], w[0], rc[i], w[1]);   // W1 = FO(W0, CK1) ^ KR
 8003830:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	441a      	add	r2, r3
 800383c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003840:	f103 0410 	add.w	r4, r3, #16
 8003844:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800384c:	f103 0010 	add.w	r0, r3, #16
 8003850:	4623      	mov	r3, r4
 8003852:	f7ff fe2b 	bl	80034ac <aria_fo_xor>
    i = i < 2 ? i + 1 : 0;
 8003856:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800385a:	2b01      	cmp	r3, #1
 800385c:	dc03      	bgt.n	8003866 <mbedtls_aria_setkey_enc+0x14a>
 800385e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003862:	3301      	adds	r3, #1
 8003864:	e000      	b.n	8003868 <mbedtls_aria_setkey_enc+0x14c>
 8003866:	2300      	movs	r3, #0
 8003868:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    aria_fe_xor(w[2], w[1], rc[i], w[0]);   // W2 = FE(W1, CK2) ^ W0
 800386c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	441a      	add	r2, r3
 8003878:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800387c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003880:	f103 0110 	add.w	r1, r3, #16
 8003884:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003888:	f103 0020 	add.w	r0, r3, #32
 800388c:	4623      	mov	r3, r4
 800388e:	f7ff fe79 	bl	8003584 <aria_fe_xor>
    i = i < 2 ? i + 1 : 0;
 8003892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003896:	2b01      	cmp	r3, #1
 8003898:	dc03      	bgt.n	80038a2 <mbedtls_aria_setkey_enc+0x186>
 800389a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800389e:	3301      	adds	r3, #1
 80038a0:	e000      	b.n	80038a4 <mbedtls_aria_setkey_enc+0x188>
 80038a2:	2300      	movs	r3, #0
 80038a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    aria_fo_xor(w[3], w[2], rc[i], w[1]);   // W3 = FO(W2, CK3) ^ W1
 80038a8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80038ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	441a      	add	r2, r3
 80038b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038b8:	f103 0410 	add.w	r4, r3, #16
 80038bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038c0:	f103 0120 	add.w	r1, r3, #32
 80038c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038c8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80038cc:	4623      	mov	r3, r4
 80038ce:	f7ff fded 	bl	80034ac <aria_fo_xor>

    for (i = 0; i < 4; i++) {               // create round keys
 80038d2:	2300      	movs	r3, #0
 80038d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038d8:	e056      	b.n	8003988 <mbedtls_aria_setkey_enc+0x26c>
        w2 = w[(i + 1) & 3];
 80038da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038de:	3301      	adds	r3, #1
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	4413      	add	r3, r2
 80038ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        aria_rot128(ctx->rk[i], w[i], w2, 128 - 19);
 80038f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4413      	add	r3, r2
 80038fa:	1d18      	adds	r0, r3, #4
 80038fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003900:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	18d1      	adds	r1, r2, r3
 8003908:	236d      	movs	r3, #109	; 0x6d
 800390a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800390e:	f7ff fea5 	bl	800365c <aria_rot128>
        aria_rot128(ctx->rk[i +  4], w[i], w2, 128 - 31);
 8003912:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003916:	3304      	adds	r3, #4
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4413      	add	r3, r2
 800391e:	1d18      	adds	r0, r3, #4
 8003920:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003924:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	18d1      	adds	r1, r2, r3
 800392c:	2361      	movs	r3, #97	; 0x61
 800392e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003932:	f7ff fe93 	bl	800365c <aria_rot128>
        aria_rot128(ctx->rk[i +  8], w[i], w2,       61);
 8003936:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800393a:	3308      	adds	r3, #8
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4413      	add	r3, r2
 8003942:	1d18      	adds	r0, r3, #4
 8003944:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003948:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	18d1      	adds	r1, r2, r3
 8003950:	233d      	movs	r3, #61	; 0x3d
 8003952:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003956:	f7ff fe81 	bl	800365c <aria_rot128>
        aria_rot128(ctx->rk[i + 12], w[i], w2,       31);
 800395a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800395e:	330c      	adds	r3, #12
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	1d18      	adds	r0, r3, #4
 8003968:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800396c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	18d1      	adds	r1, r2, r3
 8003974:	231f      	movs	r3, #31
 8003976:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800397a:	f7ff fe6f 	bl	800365c <aria_rot128>
    for (i = 0; i < 4; i++) {               // create round keys
 800397e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003982:	3301      	adds	r3, #1
 8003984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003988:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800398c:	2b03      	cmp	r3, #3
 800398e:	dda4      	ble.n	80038da <mbedtls_aria_setkey_enc+0x1be>
    }
    aria_rot128(ctx->rk[16], w[0], w[1], 19);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8003996:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800399a:	f103 0210 	add.w	r2, r3, #16
 800399e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80039a2:	2313      	movs	r3, #19
 80039a4:	f7ff fe5a 	bl	800365c <aria_rot128>

    /* w holds enough info to reconstruct the round keys */
    mbedtls_platform_zeroize(w, sizeof(w));
 80039a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039ac:	2140      	movs	r1, #64	; 0x40
 80039ae:	4618      	mov	r0, r3
 80039b0:	f006 fd50 	bl	800a454 <mbedtls_platform_zeroize>

    return 0;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	37c8      	adds	r7, #200	; 0xc8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bdb0      	pop	{r4, r5, r7, pc}
 80039be:	bf00      	nop
 80039c0:	0800d28c 	.word	0x0800d28c

080039c4 <mbedtls_aria_setkey_dec>:
 * Set decryption key
 */
#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
int mbedtls_aria_setkey_dec(mbedtls_aria_context *ctx,
                            const unsigned char *key, unsigned int keybits)
{
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b08b      	sub	sp, #44	; 0x2c
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
    int i, j, k, ret;

    ret = mbedtls_aria_setkey_enc(ctx, key, keybits);
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7ff fea1 	bl	800371c <mbedtls_aria_setkey_enc>
 80039da:	61b8      	str	r0, [r7, #24]
    if (ret != 0) {
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <mbedtls_aria_setkey_dec+0x22>
        return ret;
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	e061      	b.n	8003aaa <mbedtls_aria_setkey_dec+0xe6>
    }

    /* flip the order of round keys */
    for (i = 0, j = ctx->nr; i < j; i++, j--) {
 80039e6:	2300      	movs	r3, #0
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	623b      	str	r3, [r7, #32]
 80039f0:	e030      	b.n	8003a54 <mbedtls_aria_setkey_dec+0x90>
        for (k = 0; k < 4; k++) {
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e024      	b.n	8003a42 <mbedtls_aria_setkey_dec+0x7e>
            uint32_t t = ctx->rk[i][k];
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	0099      	lsls	r1, r3, #2
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	440b      	add	r3, r1
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	617b      	str	r3, [r7, #20]
            ctx->rk[i][k] = ctx->rk[j][k];
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	0099      	lsls	r1, r3, #2
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	440b      	add	r3, r1
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	68f9      	ldr	r1, [r7, #12]
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	0098      	lsls	r0, r3, #2
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4403      	add	r3, r0
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	605a      	str	r2, [r3, #4]
            ctx->rk[j][k] = t;
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	0099      	lsls	r1, r3, #2
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	440b      	add	r3, r1
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	605a      	str	r2, [r3, #4]
        for (k = 0; k < 4; k++) {
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	ddd7      	ble.n	80039f8 <mbedtls_aria_setkey_dec+0x34>
    for (i = 0, j = ctx->nr; i < j; i++, j--) {
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	dbca      	blt.n	80039f2 <mbedtls_aria_setkey_dec+0x2e>
        }
    }

    /* apply affine transform to middle keys */
    for (i = 1; i < ctx->nr; i++) {
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a60:	e01c      	b.n	8003a9c <mbedtls_aria_setkey_dec+0xd8>
        aria_a(&ctx->rk[i][0], &ctx->rk[i][1],
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	1d18      	adds	r0, r3, #4
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	3304      	adds	r3, #4
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	1d19      	adds	r1, r3, #4
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4413      	add	r3, r2
 8003a82:	1d1c      	adds	r4, r3, #4
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	330c      	adds	r3, #12
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4622      	mov	r2, r4
 8003a92:	f7ff fbdb 	bl	800324c <aria_a>
    for (i = 1; i < ctx->nr; i++) {
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	3301      	adds	r3, #1
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	dbdc      	blt.n	8003a62 <mbedtls_aria_setkey_dec+0x9e>
               &ctx->rk[i][2], &ctx->rk[i][3]);
    }

    return 0;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	372c      	adds	r7, #44	; 0x2c
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd90      	pop	{r4, r7, pc}
	...

08003ab4 <mbedtls_aria_crypt_ecb>:
 * Encrypt a block
 */
int mbedtls_aria_crypt_ecb(mbedtls_aria_context *ctx,
                           const unsigned char input[MBEDTLS_ARIA_BLOCKSIZE],
                           unsigned char output[MBEDTLS_ARIA_BLOCKSIZE])
{
 8003ab4:	b590      	push	{r4, r7, lr}
 8003ab6:	b09f      	sub	sp, #124	; 0x7c
 8003ab8:	af04      	add	r7, sp, #16
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003ac8:	623b      	str	r3, [r7, #32]
    return r;
 8003aca:	6a3b      	ldr	r3, [r7, #32]
    int i;

    uint32_t a, b, c, d;

    a = MBEDTLS_GET_UINT32_LE(input,  0);
 8003acc:	643b      	str	r3, [r7, #64]	; 0x40
    b = MBEDTLS_GET_UINT32_LE(input,  4);
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ad6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003ad8:	61fb      	str	r3, [r7, #28]
    return r;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	63fb      	str	r3, [r7, #60]	; 0x3c
    c = MBEDTLS_GET_UINT32_LE(input,  8);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003ae8:	61bb      	str	r3, [r7, #24]
    return r;
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	63bb      	str	r3, [r7, #56]	; 0x38
    d = MBEDTLS_GET_UINT32_LE(input, 12);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	330c      	adds	r3, #12
 8003af2:	663b      	str	r3, [r7, #96]	; 0x60
 8003af4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003af6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003af8:	617b      	str	r3, [r7, #20]
    return r;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	637b      	str	r3, [r7, #52]	; 0x34

    i = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	667b      	str	r3, [r7, #100]	; 0x64
    while (1) {
        a ^= ctx->rk[i][0];
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	4413      	add	r3, r2
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b10:	4053      	eors	r3, r2
 8003b12:	643b      	str	r3, [r7, #64]	; 0x40
        b ^= ctx->rk[i][1];
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b22:	4053      	eors	r3, r2
 8003b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        c ^= ctx->rk[i][2];
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	4413      	add	r3, r2
 8003b2e:	330c      	adds	r3, #12
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b34:	4053      	eors	r3, r2
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
        d ^= ctx->rk[i][3];
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	4413      	add	r3, r2
 8003b40:	3310      	adds	r3, #16
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b46:	4053      	eors	r3, r2
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
        i++;
 8003b4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	667b      	str	r3, [r7, #100]	; 0x64

        aria_sl(&a, &b, &c, &d, aria_sb1, aria_sb2, aria_is1, aria_is2);
 8003b50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b54:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b58:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003b5c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8003b60:	4c56      	ldr	r4, [pc, #344]	; (8003cbc <mbedtls_aria_crypt_ecb+0x208>)
 8003b62:	9403      	str	r4, [sp, #12]
 8003b64:	4c56      	ldr	r4, [pc, #344]	; (8003cc0 <mbedtls_aria_crypt_ecb+0x20c>)
 8003b66:	9402      	str	r4, [sp, #8]
 8003b68:	4c56      	ldr	r4, [pc, #344]	; (8003cc4 <mbedtls_aria_crypt_ecb+0x210>)
 8003b6a:	9401      	str	r4, [sp, #4]
 8003b6c:	4c56      	ldr	r4, [pc, #344]	; (8003cc8 <mbedtls_aria_crypt_ecb+0x214>)
 8003b6e:	9400      	str	r4, [sp, #0]
 8003b70:	f7ff fbef 	bl	8003352 <aria_sl>
        aria_a(&a, &b, &c, &d);
 8003b74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b7c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003b80:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8003b84:	f7ff fb62 	bl	800324c <aria_a>

        a ^= ctx->rk[i][0];
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	4413      	add	r3, r2
 8003b90:	3304      	adds	r3, #4
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b96:	4053      	eors	r3, r2
 8003b98:	643b      	str	r3, [r7, #64]	; 0x40
        b ^= ctx->rk[i][1];
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba8:	4053      	eors	r3, r2
 8003baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        c ^= ctx->rk[i][2];
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	4413      	add	r3, r2
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bba:	4053      	eors	r3, r2
 8003bbc:	63bb      	str	r3, [r7, #56]	; 0x38
        d ^= ctx->rk[i][3];
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3310      	adds	r3, #16
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bcc:	4053      	eors	r3, r2
 8003bce:	637b      	str	r3, [r7, #52]	; 0x34
        i++;
 8003bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	667b      	str	r3, [r7, #100]	; 0x64

        aria_sl(&a, &b, &c, &d, aria_is1, aria_is2, aria_sb1, aria_sb2);
 8003bd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bda:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003bde:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003be2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8003be6:	4c37      	ldr	r4, [pc, #220]	; (8003cc4 <mbedtls_aria_crypt_ecb+0x210>)
 8003be8:	9403      	str	r4, [sp, #12]
 8003bea:	4c37      	ldr	r4, [pc, #220]	; (8003cc8 <mbedtls_aria_crypt_ecb+0x214>)
 8003bec:	9402      	str	r4, [sp, #8]
 8003bee:	4c33      	ldr	r4, [pc, #204]	; (8003cbc <mbedtls_aria_crypt_ecb+0x208>)
 8003bf0:	9401      	str	r4, [sp, #4]
 8003bf2:	4c33      	ldr	r4, [pc, #204]	; (8003cc0 <mbedtls_aria_crypt_ecb+0x20c>)
 8003bf4:	9400      	str	r4, [sp, #0]
 8003bf6:	f7ff fbac 	bl	8003352 <aria_sl>
        if (i >= ctx->nr) {
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c02:	4293      	cmp	r3, r2
 8003c04:	da0a      	bge.n	8003c1c <mbedtls_aria_crypt_ecb+0x168>
            break;
        }
        aria_a(&a, &b, &c, &d);
 8003c06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c0e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003c12:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8003c16:	f7ff fb19 	bl	800324c <aria_a>
        a ^= ctx->rk[i][0];
 8003c1a:	e772      	b.n	8003b02 <mbedtls_aria_crypt_ecb+0x4e>
            break;
 8003c1c:	bf00      	nop
    }

    /* final key mixing */
    a ^= ctx->rk[i][0];
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	4413      	add	r3, r2
 8003c26:	3304      	adds	r3, #4
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2c:	4053      	eors	r3, r2
 8003c2e:	643b      	str	r3, [r7, #64]	; 0x40
    b ^= ctx->rk[i][1];
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	4413      	add	r3, r2
 8003c38:	3308      	adds	r3, #8
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3e:	4053      	eors	r3, r2
 8003c40:	63fb      	str	r3, [r7, #60]	; 0x3c
    c ^= ctx->rk[i][2];
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	4413      	add	r3, r2
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	4053      	eors	r3, r2
 8003c52:	63bb      	str	r3, [r7, #56]	; 0x38
    d ^= ctx->rk[i][3];
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3310      	adds	r3, #16
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c62:	4053      	eors	r3, r2
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34

    MBEDTLS_PUT_UINT32_LE(a, output,  0);
 8003c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	653a      	str	r2, [r7, #80]	; 0x50
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 8003c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(b, output,  4);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	1d1a      	adds	r2, r3, #4
 8003c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 8003c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c84:	601a      	str	r2, [r3, #0]
}
 8003c86:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(c, output,  8);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f103 0208 	add.w	r2, r3, #8
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c90:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    memcpy(p, &x, sizeof(x));
 8003c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c98:	601a      	str	r2, [r3, #0]
}
 8003c9a:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(d, output, 12);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f103 020c 	add.w	r2, r3, #12
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca4:	647a      	str	r2, [r7, #68]	; 0x44
 8003ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    memcpy(p, &x, sizeof(x));
 8003caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop

    return 0;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	376c      	adds	r7, #108	; 0x6c
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd90      	pop	{r4, r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	0800dbd4 	.word	0x0800dbd4
 8003cc0:	0800dad4 	.word	0x0800dad4
 8003cc4:	0800d9d4 	.word	0x0800d9d4
 8003cc8:	0800d8d4 	.word	0x0800d8d4

08003ccc <mbedtls_aria_init>:

/* Initialize context */
void mbedtls_aria_init(mbedtls_aria_context *ctx)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_aria_context));
 8003cd4:	f44f 728a 	mov.w	r2, #276	; 0x114
 8003cd8:	2100      	movs	r1, #0
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f008 ffb8 	bl	800cc50 <memset>
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <mbedtls_aria_free>:

/* Clear context */
void mbedtls_aria_free(mbedtls_aria_context *ctx)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <mbedtls_aria_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_aria_context));
 8003cf6:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f006 fbaa 	bl	800a454 <mbedtls_platform_zeroize>
 8003d00:	e000      	b.n	8003d04 <mbedtls_aria_free+0x1c>
        return;
 8003d02:	bf00      	nop
}
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <mbedtls_aria_crypt_cbc>:
                           int mode,
                           size_t length,
                           unsigned char iv[MBEDTLS_ARIA_BLOCKSIZE],
                           const unsigned char *input,
                           unsigned char *output)
{
 8003d0a:	b5b0      	push	{r4, r5, r7, lr}
 8003d0c:	b0a0      	sub	sp, #128	; 0x80
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	603b      	str	r3, [r7, #0]
    unsigned char temp[MBEDTLS_ARIA_BLOCKSIZE];

    if ((mode != MBEDTLS_ARIA_ENCRYPT) && (mode != MBEDTLS_ARIA_DECRYPT)) {
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d005      	beq.n	8003d2a <mbedtls_aria_crypt_cbc+0x20>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <mbedtls_aria_crypt_cbc+0x20>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 8003d24:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 8003d28:	e0e4      	b.n	8003ef4 <mbedtls_aria_crypt_cbc+0x1ea>
    }

    if (length % MBEDTLS_ARIA_BLOCKSIZE) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <mbedtls_aria_crypt_cbc+0x30>
        return MBEDTLS_ERR_ARIA_INVALID_INPUT_LENGTH;
 8003d34:	f06f 035d 	mvn.w	r3, #93	; 0x5d
 8003d38:	e0dc      	b.n	8003ef4 <mbedtls_aria_crypt_cbc+0x1ea>
    }

    if (mode == MBEDTLS_ARIA_DECRYPT) {
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f040 80d5 	bne.w	8003eec <mbedtls_aria_crypt_cbc+0x1e2>
        while (length > 0) {
 8003d42:	e06d      	b.n	8003e20 <mbedtls_aria_crypt_cbc+0x116>
            memcpy(temp, input, MBEDTLS_ARIA_BLOCKSIZE);
 8003d44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d48:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aria_crypt_ecb(ctx, input, output);
 8003d56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff fea8 	bl	8003ab4 <mbedtls_aria_crypt_ecb>
 8003d64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	677b      	str	r3, [r7, #116]	; 0x74
 8003d74:	2310      	movs	r3, #16
 8003d76:	673b      	str	r3, [r7, #112]	; 0x70
    size_t i = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (; (i + 4) <= n; i += 4) {
 8003d7c:	e01e      	b.n	8003dbc <mbedtls_aria_crypt_cbc+0xb2>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8003d7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d82:	4413      	add	r3, r2
 8003d84:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d88:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003d8a:	61bb      	str	r3, [r7, #24]
    return r;
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d92:	440b      	add	r3, r1
 8003d94:	667b      	str	r3, [r7, #100]	; 0x64
 8003d96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d98:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003d9a:	617b      	str	r3, [r7, #20]
    return r;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4053      	eors	r3, r2
 8003da0:	663b      	str	r3, [r7, #96]	; 0x60
        mbedtls_put_unaligned_uint32(r + i, x);
 8003da2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da6:	4413      	add	r3, r2
 8003da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 8003db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db2:	601a      	str	r2, [r3, #0]
}
 8003db4:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db8:	3304      	adds	r3, #4
 8003dba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d2db      	bcs.n	8003d7e <mbedtls_aria_crypt_cbc+0x74>
    for (; i < n; i++) {
 8003dc6:	e010      	b.n	8003dea <mbedtls_aria_crypt_cbc+0xe0>
        r[i] = a[i] ^ b[i];
 8003dc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dcc:	4413      	add	r3, r2
 8003dce:	7819      	ldrb	r1, [r3, #0]
 8003dd0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd4:	4413      	add	r3, r2
 8003dd6:	781a      	ldrb	r2, [r3, #0]
 8003dd8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ddc:	4403      	add	r3, r0
 8003dde:	404a      	eors	r2, r1
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8003de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de6:	3301      	adds	r3, #1
 8003de8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d8ea      	bhi.n	8003dc8 <mbedtls_aria_crypt_cbc+0xbe>
}
 8003df2:	bf00      	nop

            mbedtls_xor(output, output, iv, MBEDTLS_ARIA_BLOCKSIZE);

            memcpy(iv, temp, MBEDTLS_ARIA_BLOCKSIZE);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	461d      	mov	r5, r3
 8003df8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dfe:	6028      	str	r0, [r5, #0]
 8003e00:	6069      	str	r1, [r5, #4]
 8003e02:	60aa      	str	r2, [r5, #8]
 8003e04:	60eb      	str	r3, [r5, #12]

            input  += MBEDTLS_ARIA_BLOCKSIZE;
 8003e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e0a:	3310      	adds	r3, #16
 8003e0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            output += MBEDTLS_ARIA_BLOCKSIZE;
 8003e10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e14:	3310      	adds	r3, #16
 8003e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            length -= MBEDTLS_ARIA_BLOCKSIZE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3b10      	subs	r3, #16
 8003e1e:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d18e      	bne.n	8003d44 <mbedtls_aria_crypt_cbc+0x3a>
 8003e26:	e064      	b.n	8003ef2 <mbedtls_aria_crypt_cbc+0x1e8>
 8003e28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e32:	657b      	str	r3, [r7, #84]	; 0x54
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	653b      	str	r3, [r7, #80]	; 0x50
 8003e38:	2310      	movs	r3, #16
 8003e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t i = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	64bb      	str	r3, [r7, #72]	; 0x48
    for (; (i + 4) <= n; i += 4) {
 8003e40:	e01e      	b.n	8003e80 <mbedtls_aria_crypt_cbc+0x176>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8003e42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e46:	4413      	add	r3, r2
 8003e48:	647b      	str	r3, [r7, #68]	; 0x44
 8003e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8003e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e56:	440b      	add	r3, r1
 8003e58:	643b      	str	r3, [r7, #64]	; 0x40
 8003e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003e5e:	623b      	str	r3, [r7, #32]
    return r;
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	4053      	eors	r3, r2
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        mbedtls_put_unaligned_uint32(r + i, x);
 8003e66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6a:	4413      	add	r3, r2
 8003e6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 8003e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e76:	601a      	str	r2, [r3, #0]
}
 8003e78:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8003e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e82:	3304      	adds	r3, #4
 8003e84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d2db      	bcs.n	8003e42 <mbedtls_aria_crypt_cbc+0x138>
    for (; i < n; i++) {
 8003e8a:	e010      	b.n	8003eae <mbedtls_aria_crypt_cbc+0x1a4>
        r[i] = a[i] ^ b[i];
 8003e8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e90:	4413      	add	r3, r2
 8003e92:	7819      	ldrb	r1, [r3, #0]
 8003e94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e98:	4413      	add	r3, r2
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea0:	4403      	add	r3, r0
 8003ea2:	404a      	eors	r2, r1
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8003ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eaa:	3301      	adds	r3, #1
 8003eac:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d8ea      	bhi.n	8003e8c <mbedtls_aria_crypt_cbc+0x182>
}
 8003eb6:	bf00      	nop
        }
    } else {
        while (length > 0) {
            mbedtls_xor(output, input, iv, MBEDTLS_ARIA_BLOCKSIZE);

            mbedtls_aria_crypt_ecb(ctx, output, output);
 8003eb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ebc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff fdf7 	bl	8003ab4 <mbedtls_aria_crypt_ecb>
            memcpy(iv, output, MBEDTLS_ARIA_BLOCKSIZE);
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8003ecc:	6838      	ldr	r0, [r7, #0]
 8003ece:	f008 ff4a 	bl	800cd66 <memcpy>

            input  += MBEDTLS_ARIA_BLOCKSIZE;
 8003ed2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ed6:	3310      	adds	r3, #16
 8003ed8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            output += MBEDTLS_ARIA_BLOCKSIZE;
 8003edc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ee0:	3310      	adds	r3, #16
 8003ee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            length -= MBEDTLS_ARIA_BLOCKSIZE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3b10      	subs	r3, #16
 8003eea:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d19a      	bne.n	8003e28 <mbedtls_aria_crypt_cbc+0x11e>
        }
    }

    return 0;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3780      	adds	r7, #128	; 0x80
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bdb0      	pop	{r4, r5, r7, pc}

08003efc <mbedtls_aria_crypt_cfb128>:
                              size_t length,
                              size_t *iv_off,
                              unsigned char iv[MBEDTLS_ARIA_BLOCKSIZE],
                              const unsigned char *input,
                              unsigned char *output)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
    unsigned char c;
    size_t n;

    if ((mode != MBEDTLS_ARIA_ENCRYPT) && (mode != MBEDTLS_ARIA_DECRYPT)) {
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d005      	beq.n	8003f1c <mbedtls_aria_crypt_cfb128+0x20>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <mbedtls_aria_crypt_cfb128+0x20>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 8003f16:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 8003f1a:	e05d      	b.n	8003fd8 <mbedtls_aria_crypt_cfb128+0xdc>
    }

    n = *iv_off;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	617b      	str	r3, [r7, #20]

    /* An overly large value of n can lead to an unlimited
     * buffer overflow. */
    if (n >= MBEDTLS_ARIA_BLOCKSIZE) {
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b0f      	cmp	r3, #15
 8003f26:	d902      	bls.n	8003f2e <mbedtls_aria_crypt_cfb128+0x32>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 8003f28:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 8003f2c:	e054      	b.n	8003fd8 <mbedtls_aria_crypt_cfb128+0xdc>
    }

    if (mode == MBEDTLS_ARIA_DECRYPT) {
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d148      	bne.n	8003fc6 <mbedtls_aria_crypt_cfb128+0xca>
        while (length--) {
 8003f34:	e021      	b.n	8003f7a <mbedtls_aria_crypt_cfb128+0x7e>
            if (n == 0) {
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d104      	bne.n	8003f46 <mbedtls_aria_crypt_cfb128+0x4a>
                mbedtls_aria_crypt_ecb(ctx, iv, iv);
 8003f3c:	6a3a      	ldr	r2, [r7, #32]
 8003f3e:	6a39      	ldr	r1, [r7, #32]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff fdb7 	bl	8003ab4 <mbedtls_aria_crypt_ecb>
            }

            c = *input++;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	627a      	str	r2, [r7, #36]	; 0x24
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	74fb      	strb	r3, [r7, #19]
            *output++ = c ^ iv[n];
 8003f50:	6a3a      	ldr	r2, [r7, #32]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	4413      	add	r3, r2
 8003f56:	7819      	ldrb	r1, [r3, #0]
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f5e:	7cfa      	ldrb	r2, [r7, #19]
 8003f60:	404a      	eors	r2, r1
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]
            iv[n] = c;
 8003f66:	6a3a      	ldr	r2, [r7, #32]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	7cfa      	ldrb	r2, [r7, #19]
 8003f6e:	701a      	strb	r2, [r3, #0]

            n = (n + 1) & 0x0F;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	3301      	adds	r3, #1
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	617b      	str	r3, [r7, #20]
        while (length--) {
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	1e5a      	subs	r2, r3, #1
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1d8      	bne.n	8003f36 <mbedtls_aria_crypt_cfb128+0x3a>
 8003f84:	e024      	b.n	8003fd0 <mbedtls_aria_crypt_cfb128+0xd4>
        }
    } else {
        while (length--) {
            if (n == 0) {
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d104      	bne.n	8003f96 <mbedtls_aria_crypt_cfb128+0x9a>
                mbedtls_aria_crypt_ecb(ctx, iv, iv);
 8003f8c:	6a3a      	ldr	r2, [r7, #32]
 8003f8e:	6a39      	ldr	r1, [r7, #32]
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff fd8f 	bl	8003ab4 <mbedtls_aria_crypt_ecb>
            }

            iv[n] = *output++ = (unsigned char) (iv[n] ^ *input++);
 8003f96:	6a3a      	ldr	r2, [r7, #32]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	7819      	ldrb	r1, [r3, #0]
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	627a      	str	r2, [r7, #36]	; 0x24
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	1c58      	adds	r0, r3, #1
 8003faa:	62b8      	str	r0, [r7, #40]	; 0x28
 8003fac:	404a      	eors	r2, r1
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	6a39      	ldr	r1, [r7, #32]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	7013      	strb	r3, [r2, #0]

            n = (n + 1) & 0x0F;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	617b      	str	r3, [r7, #20]
        while (length--) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	1e5a      	subs	r2, r3, #1
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1da      	bne.n	8003f86 <mbedtls_aria_crypt_cfb128+0x8a>
        }
    }

    *iv_off = n;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	601a      	str	r2, [r3, #0]

    return 0;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <mbedtls_aria_crypt_ctr>:
                           size_t *nc_off,
                           unsigned char nonce_counter[MBEDTLS_ARIA_BLOCKSIZE],
                           unsigned char stream_block[MBEDTLS_ARIA_BLOCKSIZE],
                           const unsigned char *input,
                           unsigned char *output)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
    int c, i;
    size_t n;

    n = *nc_off;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	61bb      	str	r3, [r7, #24]
    /* An overly large value of n can lead to an unlimited
     * buffer overflow. */
    if (n >= MBEDTLS_ARIA_BLOCKSIZE) {
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b0f      	cmp	r3, #15
 8003ff8:	d938      	bls.n	800406c <mbedtls_aria_crypt_ctr+0x8c>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 8003ffa:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 8003ffe:	e03e      	b.n	800407e <mbedtls_aria_crypt_ctr+0x9e>
    }

    while (length--) {
        if (n == 0) {
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d11a      	bne.n	800403c <mbedtls_aria_crypt_ctr+0x5c>
            mbedtls_aria_crypt_ecb(ctx, nonce_counter,
 8004006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004008:	6839      	ldr	r1, [r7, #0]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff fd52 	bl	8003ab4 <mbedtls_aria_crypt_ecb>
                                   stream_block);

            for (i = MBEDTLS_ARIA_BLOCKSIZE; i > 0; i--) {
 8004010:	2310      	movs	r3, #16
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	e00d      	b.n	8004032 <mbedtls_aria_crypt_ctr+0x52>
                if (++nonce_counter[i - 1] != 0) {
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	3b01      	subs	r3, #1
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	4413      	add	r3, r2
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	3201      	adds	r2, #1
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <mbedtls_aria_crypt_ctr+0x5a>
            for (i = MBEDTLS_ARIA_BLOCKSIZE; i > 0; i--) {
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	3b01      	subs	r3, #1
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2b00      	cmp	r3, #0
 8004036:	dcee      	bgt.n	8004016 <mbedtls_aria_crypt_ctr+0x36>
 8004038:	e000      	b.n	800403c <mbedtls_aria_crypt_ctr+0x5c>
                    break;
 800403a:	bf00      	nop
                }
            }
        }
        c = *input++;
 800403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char) (c ^ stream_block[n]);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	b25a      	sxtb	r2, r3
 800404a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	440b      	add	r3, r1
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b25b      	sxtb	r3, r3
 8004054:	4053      	eors	r3, r2
 8004056:	b259      	sxtb	r1, r3
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	633a      	str	r2, [r7, #48]	; 0x30
 800405e:	b2ca      	uxtb	r2, r1
 8004060:	701a      	strb	r2, [r3, #0]

        n = (n + 1) & 0x0F;
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	3301      	adds	r3, #1
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	61bb      	str	r3, [r7, #24]
    while (length--) {
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	1e5a      	subs	r2, r3, #1
 8004070:	60ba      	str	r2, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1c4      	bne.n	8004000 <mbedtls_aria_crypt_ctr+0x20>
    }

    *nc_off = n;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	601a      	str	r2, [r3, #0]

    return 0;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <camellia_feistel>:
        }                                                   \
    }

static void camellia_feistel(const uint32_t x[2], const uint32_t k[2],
                             uint32_t z[2])
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
    uint32_t I0, I1;
    I0 = x[0] ^ k[0];
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4053      	eors	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
    I1 = x[1] ^ k[1];
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3304      	adds	r3, #4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3304      	adds	r3, #4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4053      	eors	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]

    I0 = ((uint32_t) SBOX1(MBEDTLS_BYTE_3(I0)) << 24) |
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	0e1b      	lsrs	r3, r3, #24
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	4b31      	ldr	r3, [pc, #196]	; (8004180 <camellia_feistel+0xf8>)
 80040ba:	5c9b      	ldrb	r3, [r3, r2]
 80040bc:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX2(MBEDTLS_BYTE_2(I0)) << 16) |
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4619      	mov	r1, r3
 80040c6:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <camellia_feistel+0xfc>)
 80040c8:	5c5b      	ldrb	r3, [r3, r1]
 80040ca:	041b      	lsls	r3, r3, #16
    I0 = ((uint32_t) SBOX1(MBEDTLS_BYTE_3(I0)) << 24) |
 80040cc:	431a      	orrs	r2, r3
         ((uint32_t) SBOX3(MBEDTLS_BYTE_1(I0)) <<  8) |
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	0a1b      	lsrs	r3, r3, #8
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	4619      	mov	r1, r3
 80040d6:	4b2c      	ldr	r3, [pc, #176]	; (8004188 <camellia_feistel+0x100>)
 80040d8:	5c5b      	ldrb	r3, [r3, r1]
 80040da:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX2(MBEDTLS_BYTE_2(I0)) << 16) |
 80040dc:	4313      	orrs	r3, r2
         ((uint32_t) SBOX4(MBEDTLS_BYTE_0(I0)));
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	4611      	mov	r1, r2
 80040e4:	4a29      	ldr	r2, [pc, #164]	; (800418c <camellia_feistel+0x104>)
 80040e6:	5c52      	ldrb	r2, [r2, r1]
    I0 = ((uint32_t) SBOX1(MBEDTLS_BYTE_3(I0)) << 24) |
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
    I1 = ((uint32_t) SBOX2(MBEDTLS_BYTE_3(I1)) << 24) |
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	0e1b      	lsrs	r3, r3, #24
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	4b23      	ldr	r3, [pc, #140]	; (8004184 <camellia_feistel+0xfc>)
 80040f6:	5c9b      	ldrb	r3, [r3, r2]
 80040f8:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX3(MBEDTLS_BYTE_2(I1)) << 16) |
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	4619      	mov	r1, r3
 8004102:	4b21      	ldr	r3, [pc, #132]	; (8004188 <camellia_feistel+0x100>)
 8004104:	5c5b      	ldrb	r3, [r3, r1]
 8004106:	041b      	lsls	r3, r3, #16
    I1 = ((uint32_t) SBOX2(MBEDTLS_BYTE_3(I1)) << 24) |
 8004108:	431a      	orrs	r2, r3
         ((uint32_t) SBOX4(MBEDTLS_BYTE_1(I1)) <<  8) |
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	0a1b      	lsrs	r3, r3, #8
 800410e:	b2db      	uxtb	r3, r3
 8004110:	4619      	mov	r1, r3
 8004112:	4b1e      	ldr	r3, [pc, #120]	; (800418c <camellia_feistel+0x104>)
 8004114:	5c5b      	ldrb	r3, [r3, r1]
 8004116:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX3(MBEDTLS_BYTE_2(I1)) << 16) |
 8004118:	4313      	orrs	r3, r2
         ((uint32_t) SBOX1(MBEDTLS_BYTE_0(I1)));
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	4611      	mov	r1, r2
 8004120:	4a17      	ldr	r2, [pc, #92]	; (8004180 <camellia_feistel+0xf8>)
 8004122:	5c52      	ldrb	r2, [r2, r1]
    I1 = ((uint32_t) SBOX2(MBEDTLS_BYTE_3(I1)) << 24) |
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]

    I0 ^= (I1 << 8) | (I1 >> 24);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	ea4f 6333 	mov.w	r3, r3, ror #24
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4053      	eors	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 << 16) | (I0 >> 16);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	ea4f 4333 	mov.w	r3, r3, ror #16
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4053      	eors	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
    I0 ^= (I1 >> 8) | (I1 << 24);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	ea4f 2333 	mov.w	r3, r3, ror #8
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4053      	eors	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 >> 8) | (I0 << 24);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4053      	eors	r3, r2
 8004156:	613b      	str	r3, [r7, #16]

    z[0] ^= I1;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	405a      	eors	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	601a      	str	r2, [r3, #0]
    z[1] ^= I0;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	6819      	ldr	r1, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3304      	adds	r3, #4
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	404a      	eors	r2, r1
 8004172:	601a      	str	r2, [r3, #0]
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	0800dd04 	.word	0x0800dd04
 8004184:	0800de04 	.word	0x0800de04
 8004188:	0800df04 	.word	0x0800df04
 800418c:	0800e004 	.word	0x0800e004

08004190 <mbedtls_camellia_init>:

void mbedtls_camellia_init(mbedtls_camellia_context *ctx)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_camellia_context));
 8004198:	f44f 728a 	mov.w	r2, #276	; 0x114
 800419c:	2100      	movs	r1, #0
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f008 fd56 	bl	800cc50 <memset>
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <mbedtls_camellia_free>:

void mbedtls_camellia_free(mbedtls_camellia_context *ctx)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <mbedtls_camellia_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_camellia_context));
 80041ba:	f44f 718a 	mov.w	r1, #276	; 0x114
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f006 f948 	bl	800a454 <mbedtls_platform_zeroize>
 80041c4:	e000      	b.n	80041c8 <mbedtls_camellia_free+0x1c>
        return;
 80041c6:	bf00      	nop
}
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <mbedtls_camellia_setkey_enc>:
 * Camellia key schedule (encryption)
 */
int mbedtls_camellia_setkey_enc(mbedtls_camellia_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b0ce      	sub	sp, #312	; 0x138
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80041da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041de:	6018      	str	r0, [r3, #0]
 80041e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80041e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041e8:	6019      	str	r1, [r3, #0]
 80041ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80041ee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80041f2:	601a      	str	r2, [r3, #0]
    unsigned char t[64];
    uint32_t SIGMA[6][2];
    uint32_t KC[16];
    uint32_t TK[20];

    RK = ctx->rk;
 80041f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80041f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3304      	adds	r3, #4
 8004200:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    memset(t, 0, 64);
 8004204:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004208:	2240      	movs	r2, #64	; 0x40
 800420a:	2100      	movs	r1, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f008 fd1f 	bl	800cc50 <memset>
    memset(RK, 0, sizeof(ctx->rk));
 8004212:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004216:	2100      	movs	r1, #0
 8004218:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800421c:	f008 fd18 	bl	800cc50 <memset>

    switch (keybits) {
 8004220:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004224:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422e:	d021      	beq.n	8004274 <mbedtls_camellia_setkey_enc+0xa4>
 8004230:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004234:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423e:	d824      	bhi.n	800428a <mbedtls_camellia_setkey_enc+0xba>
 8004240:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004244:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b80      	cmp	r3, #128	; 0x80
 800424c:	d007      	beq.n	800425e <mbedtls_camellia_setkey_enc+0x8e>
 800424e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004252:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2bc0      	cmp	r3, #192	; 0xc0
 800425a:	d00b      	beq.n	8004274 <mbedtls_camellia_setkey_enc+0xa4>
 800425c:	e015      	b.n	800428a <mbedtls_camellia_setkey_enc+0xba>
        case 128: ctx->nr = 3; idx = 0; break;
 800425e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004262:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2203      	movs	r2, #3
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004272:	e00e      	b.n	8004292 <mbedtls_camellia_setkey_enc+0xc2>
        case 192:
        case 256: ctx->nr = 4; idx = 1; break;
 8004274:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2204      	movs	r2, #4
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	2301      	movs	r3, #1
 8004284:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004288:	e003      	b.n	8004292 <mbedtls_camellia_setkey_enc+0xc2>
        default: return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 800428a:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800428e:	f000 be01 	b.w	8004e94 <mbedtls_camellia_setkey_enc+0xcc4>
    }

    for (i = 0; i < keybits / 8; ++i) {
 8004292:	2300      	movs	r3, #0
 8004294:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004298:	e014      	b.n	80042c4 <mbedtls_camellia_setkey_enc+0xf4>
        t[i] = key[i];
 800429a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800429e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80042a8:	4413      	add	r3, r2
 80042aa:	7819      	ldrb	r1, [r3, #0]
 80042ac:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80042b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80042b4:	4413      	add	r3, r2
 80042b6:	460a      	mov	r2, r1
 80042b8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < keybits / 8; ++i) {
 80042ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80042be:	3301      	adds	r3, #1
 80042c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80042c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80042c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	08db      	lsrs	r3, r3, #3
 80042d0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d3e0      	bcc.n	800429a <mbedtls_camellia_setkey_enc+0xca>
    }

    if (keybits == 192) {
 80042d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80042dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2bc0      	cmp	r3, #192	; 0xc0
 80042e4:	d11e      	bne.n	8004324 <mbedtls_camellia_setkey_enc+0x154>
        for (i = 0; i < 8; i++) {
 80042e6:	2300      	movs	r3, #0
 80042e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80042ec:	e016      	b.n	800431c <mbedtls_camellia_setkey_enc+0x14c>
            t[24 + i] = ~t[16 + i];
 80042ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80042f2:	3310      	adds	r3, #16
 80042f4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80042f8:	443b      	add	r3, r7
 80042fa:	f813 2c58 	ldrb.w	r2, [r3, #-88]
 80042fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004302:	3318      	adds	r3, #24
 8004304:	43d2      	mvns	r2, r2
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800430c:	443b      	add	r3, r7
 800430e:	f803 2c58 	strb.w	r2, [r3, #-88]
        for (i = 0; i < 8; i++) {
 8004312:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004316:	3301      	adds	r3, #1
 8004318:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800431c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004320:	2b07      	cmp	r3, #7
 8004322:	d9e4      	bls.n	80042ee <mbedtls_camellia_setkey_enc+0x11e>
    }

    /*
     * Prepare SIGMA values
     */
    for (i = 0; i < 6; i++) {
 8004324:	2300      	movs	r3, #0
 8004326:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800432a:	e041      	b.n	80043b0 <mbedtls_camellia_setkey_enc+0x1e0>
        SIGMA[i][0] = MBEDTLS_GET_UINT32_BE(SIGMA_CHARS[i], 0);
 800432c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4aac      	ldr	r2, [pc, #688]	; (80045e4 <mbedtls_camellia_setkey_enc+0x414>)
 8004334:	4413      	add	r3, r2
 8004336:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800433a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8004342:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004346:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800434a:	601a      	str	r2, [r3, #0]
    return r;
 800434c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004350:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	ba1a      	rev	r2, r3
 8004358:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004362:	443b      	add	r3, r7
 8004364:	f843 2c88 	str.w	r2, [r3, #-136]
        SIGMA[i][1] = MBEDTLS_GET_UINT32_BE(SIGMA_CHARS[i], 4);
 8004368:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4a9d      	ldr	r2, [pc, #628]	; (80045e4 <mbedtls_camellia_setkey_enc+0x414>)
 8004370:	4413      	add	r3, r2
 8004372:	3304      	adds	r3, #4
 8004374:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8004380:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004384:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004388:	601a      	str	r2, [r3, #0]
    return r;
 800438a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800438e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	ba1a      	rev	r2, r3
 8004396:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80043a0:	443b      	add	r3, r7
 80043a2:	f843 2c84 	str.w	r2, [r3, #-132]
    for (i = 0; i < 6; i++) {
 80043a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80043aa:	3301      	adds	r3, #1
 80043ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80043b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80043b4:	2b05      	cmp	r3, #5
 80043b6:	d9b9      	bls.n	800432c <mbedtls_camellia_setkey_enc+0x15c>

    /*
     * Key storage in KC
     * Order: KL, KR, KA, KB
     */
    memset(KC, 0, sizeof(KC));
 80043b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80043bc:	2240      	movs	r2, #64	; 0x40
 80043be:	2100      	movs	r1, #0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f008 fc45 	bl	800cc50 <memset>

    /* Store KL, KR */
    for (i = 0; i < 8; i++) {
 80043c6:	2300      	movs	r3, #0
 80043c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80043cc:	e023      	b.n	8004416 <mbedtls_camellia_setkey_enc+0x246>
        KC[i] = MBEDTLS_GET_UINT32_BE(t, i * 4);
 80043ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80043d8:	4413      	add	r3, r2
 80043da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80043de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 80043e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80043ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043ee:	601a      	str	r2, [r3, #0]
    return r;
 80043f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80043f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	ba1a      	rev	r2, r3
 80043fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004406:	443b      	add	r3, r7
 8004408:	f843 2cc8 	str.w	r2, [r3, #-200]
    for (i = 0; i < 8; i++) {
 800440c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004410:	3301      	adds	r3, #1
 8004412:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004416:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800441a:	2b07      	cmp	r3, #7
 800441c:	d9d7      	bls.n	80043ce <mbedtls_camellia_setkey_enc+0x1fe>
    }

    /* Generate KA */
    for (i = 0; i < 4; ++i) {
 800441e:	2300      	movs	r3, #0
 8004420:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004424:	e01f      	b.n	8004466 <mbedtls_camellia_setkey_enc+0x296>
        KC[8 + i] = KC[i] ^ KC[4 + i];
 8004426:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004430:	443b      	add	r3, r7
 8004432:	f853 1cc8 	ldr.w	r1, [r3, #-200]
 8004436:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800443a:	3304      	adds	r3, #4
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004442:	443b      	add	r3, r7
 8004444:	f853 2cc8 	ldr.w	r2, [r3, #-200]
 8004448:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800444c:	3308      	adds	r3, #8
 800444e:	404a      	eors	r2, r1
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004456:	443b      	add	r3, r7
 8004458:	f843 2cc8 	str.w	r2, [r3, #-200]
    for (i = 0; i < 4; ++i) {
 800445c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004460:	3301      	adds	r3, #1
 8004462:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004466:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800446a:	2b03      	cmp	r3, #3
 800446c:	d9db      	bls.n	8004426 <mbedtls_camellia_setkey_enc+0x256>
    }

    camellia_feistel(KC + 8, SIGMA[0], KC + 10);
 800446e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004472:	3320      	adds	r3, #32
 8004474:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004478:	3228      	adds	r2, #40	; 0x28
 800447a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fe02 	bl	8004088 <camellia_feistel>
    camellia_feistel(KC + 10, SIGMA[1], KC + 8);
 8004484:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004488:	3328      	adds	r3, #40	; 0x28
 800448a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800448e:	3220      	adds	r2, #32
 8004490:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8004494:	3108      	adds	r1, #8
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fdf6 	bl	8004088 <camellia_feistel>

    for (i = 0; i < 4; ++i) {
 800449c:	2300      	movs	r3, #0
 800449e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80044a2:	e01f      	b.n	80044e4 <mbedtls_camellia_setkey_enc+0x314>
        KC[8 + i] ^= KC[i];
 80044a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80044a8:	3308      	adds	r3, #8
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80044b0:	443b      	add	r3, r7
 80044b2:	f853 1cc8 	ldr.w	r1, [r3, #-200]
 80044b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80044c0:	443b      	add	r3, r7
 80044c2:	f853 2cc8 	ldr.w	r2, [r3, #-200]
 80044c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80044ca:	3308      	adds	r3, #8
 80044cc:	404a      	eors	r2, r1
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80044d4:	443b      	add	r3, r7
 80044d6:	f843 2cc8 	str.w	r2, [r3, #-200]
    for (i = 0; i < 4; ++i) {
 80044da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80044de:	3301      	adds	r3, #1
 80044e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80044e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d9db      	bls.n	80044a4 <mbedtls_camellia_setkey_enc+0x2d4>
    }

    camellia_feistel(KC + 8, SIGMA[2], KC + 10);
 80044ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80044f0:	3320      	adds	r3, #32
 80044f2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80044f6:	3228      	adds	r2, #40	; 0x28
 80044f8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80044fc:	3110      	adds	r1, #16
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fdc2 	bl	8004088 <camellia_feistel>
    camellia_feistel(KC + 10, SIGMA[3], KC + 8);
 8004504:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004508:	3328      	adds	r3, #40	; 0x28
 800450a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800450e:	3220      	adds	r2, #32
 8004510:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8004514:	3118      	adds	r1, #24
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fdb6 	bl	8004088 <camellia_feistel>

    if (keybits > 128) {
 800451c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004520:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b80      	cmp	r3, #128	; 0x80
 8004528:	d940      	bls.n	80045ac <mbedtls_camellia_setkey_enc+0x3dc>
        /* Generate KB */
        for (i = 0; i < 4; ++i) {
 800452a:	2300      	movs	r3, #0
 800452c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004530:	e020      	b.n	8004574 <mbedtls_camellia_setkey_enc+0x3a4>
            KC[12 + i] = KC[4 + i] ^ KC[8 + i];
 8004532:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004536:	3304      	adds	r3, #4
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800453e:	443b      	add	r3, r7
 8004540:	f853 1cc8 	ldr.w	r1, [r3, #-200]
 8004544:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004548:	3308      	adds	r3, #8
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004550:	443b      	add	r3, r7
 8004552:	f853 2cc8 	ldr.w	r2, [r3, #-200]
 8004556:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800455a:	330c      	adds	r3, #12
 800455c:	404a      	eors	r2, r1
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004564:	443b      	add	r3, r7
 8004566:	f843 2cc8 	str.w	r2, [r3, #-200]
        for (i = 0; i < 4; ++i) {
 800456a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800456e:	3301      	adds	r3, #1
 8004570:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004574:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004578:	2b03      	cmp	r3, #3
 800457a:	d9da      	bls.n	8004532 <mbedtls_camellia_setkey_enc+0x362>
        }

        camellia_feistel(KC + 12, SIGMA[4], KC + 14);
 800457c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004580:	3330      	adds	r3, #48	; 0x30
 8004582:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004586:	3238      	adds	r2, #56	; 0x38
 8004588:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800458c:	3120      	adds	r1, #32
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fd7a 	bl	8004088 <camellia_feistel>
        camellia_feistel(KC + 14, SIGMA[5], KC + 12);
 8004594:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004598:	3338      	adds	r3, #56	; 0x38
 800459a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800459e:	3230      	adds	r2, #48	; 0x30
 80045a0:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80045a4:	3128      	adds	r1, #40	; 0x28
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fd6e 	bl	8004088 <camellia_feistel>
    /*
     * Generating subkeys
     */

    /* Manipulating KL */
    SHIFT_AND_PLACE(idx, 0);
 80045ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80045ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80045b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80045be:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045c2:	605a      	str	r2, [r3, #4]
 80045c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80045ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80045d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80045d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045da:	60da      	str	r2, [r3, #12]
 80045dc:	2301      	movs	r3, #1
 80045de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80045e2:	e0aa      	b.n	800473a <mbedtls_camellia_setkey_enc+0x56a>
 80045e4:	0800dcd4 	.word	0x0800dcd4
 80045e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80045ec:	3b01      	subs	r3, #1
 80045ee:	49de      	ldr	r1, [pc, #888]	; (8004968 <mbedtls_camellia_setkey_enc+0x798>)
 80045f0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80045f4:	0112      	lsls	r2, r2, #4
 80045f6:	440a      	add	r2, r1
 80045f8:	4413      	add	r3, r2
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8097 	beq.w	8004730 <mbedtls_camellia_setkey_enc+0x560>
 8004602:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004606:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800460a:	6819      	ldr	r1, [r3, #0]
 800460c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	4099      	lsls	r1, r3
 800461c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004620:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004624:	6858      	ldr	r0, [r3, #4]
 8004626:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800462a:	4613      	mov	r3, r2
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	f1c3 0320 	rsb	r3, r3, #32
 8004638:	fa20 f203 	lsr.w	r2, r0, r3
 800463c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	f107 0020 	add.w	r0, r7, #32
 8004646:	4403      	add	r3, r0
 8004648:	404a      	eors	r2, r1
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004650:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800465a:	4613      	mov	r3, r2
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	4099      	lsls	r1, r3
 8004666:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800466a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800466e:	6898      	ldr	r0, [r3, #8]
 8004670:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	f1c3 0320 	rsb	r3, r3, #32
 8004682:	fa20 f203 	lsr.w	r2, r0, r3
 8004686:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	3304      	adds	r3, #4
 800468e:	f107 0020 	add.w	r0, r7, #32
 8004692:	4403      	add	r3, r0
 8004694:	404a      	eors	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800469c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046a0:	6899      	ldr	r1, [r3, #8]
 80046a2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80046a6:	4613      	mov	r3, r2
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	4099      	lsls	r1, r3
 80046b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80046b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046ba:	68d8      	ldr	r0, [r3, #12]
 80046bc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80046c0:	4613      	mov	r3, r2
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	f1c3 0320 	rsb	r3, r3, #32
 80046ce:	fa20 f203 	lsr.w	r2, r0, r3
 80046d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	3308      	adds	r3, #8
 80046da:	f107 0020 	add.w	r0, r7, #32
 80046de:	4403      	add	r3, r0
 80046e0:	404a      	eors	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80046e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046ec:	68d9      	ldr	r1, [r3, #12]
 80046ee:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80046f2:	4613      	mov	r3, r2
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	1a9b      	subs	r3, r3, r2
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	4099      	lsls	r1, r3
 80046fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004702:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	f1c3 0320 	rsb	r3, r3, #32
 800471a:	fa20 f203 	lsr.w	r2, r0, r3
 800471e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	330c      	adds	r3, #12
 8004726:	f107 0020 	add.w	r0, r7, #32
 800472a:	4403      	add	r3, r0
 800472c:	404a      	eors	r2, r1
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004734:	3301      	adds	r3, #1
 8004736:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800473a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800473e:	2b04      	cmp	r3, #4
 8004740:	f67f af52 	bls.w	80045e8 <mbedtls_camellia_setkey_enc+0x418>
 8004744:	2300      	movs	r3, #0
 8004746:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800474a:	e02e      	b.n	80047aa <mbedtls_camellia_setkey_enc+0x5da>
 800474c:	4987      	ldr	r1, [pc, #540]	; (800496c <mbedtls_camellia_setkey_enc+0x79c>)
 800474e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	18ca      	adds	r2, r1, r3
 800475c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004760:	4413      	add	r3, r2
 8004762:	f993 3000 	ldrsb.w	r3, [r3]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d019      	beq.n	80047a0 <mbedtls_camellia_setkey_enc+0x5d0>
 800476c:	497f      	ldr	r1, [pc, #508]	; (800496c <mbedtls_camellia_setkey_enc+0x79c>)
 800476e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	18ca      	adds	r2, r1, r3
 800477c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004780:	4413      	add	r3, r2
 8004782:	f993 3000 	ldrsb.w	r3, [r3]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800478c:	4413      	add	r3, r2
 800478e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004792:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004796:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800479a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047a4:	3301      	adds	r3, #1
 80047a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80047aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047ae:	2b13      	cmp	r3, #19
 80047b0:	d9cc      	bls.n	800474c <mbedtls_camellia_setkey_enc+0x57c>

    /* Manipulating KR */
    if (keybits > 128) {
 80047b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80047b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b80      	cmp	r3, #128	; 0x80
 80047be:	f240 810c 	bls.w	80049da <mbedtls_camellia_setkey_enc+0x80a>
        SHIFT_AND_PLACE(idx, 1);
 80047c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80047ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80047d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80047d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80047e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80047e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80047f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80047f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047f8:	60da      	str	r2, [r3, #12]
 80047fa:	2301      	movs	r3, #1
 80047fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004800:	e0a9      	b.n	8004956 <mbedtls_camellia_setkey_enc+0x786>
 8004802:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004806:	3b01      	subs	r3, #1
 8004808:	4957      	ldr	r1, [pc, #348]	; (8004968 <mbedtls_camellia_setkey_enc+0x798>)
 800480a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800480e:	0112      	lsls	r2, r2, #4
 8004810:	440a      	add	r2, r1
 8004812:	4413      	add	r3, r2
 8004814:	3304      	adds	r3, #4
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8097 	beq.w	800494c <mbedtls_camellia_setkey_enc+0x77c>
 800481e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004822:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004826:	6819      	ldr	r1, [r3, #0]
 8004828:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800482c:	4613      	mov	r3, r2
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	4099      	lsls	r1, r3
 8004838:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800483c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004840:	6858      	ldr	r0, [r3, #4]
 8004842:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	f003 031f 	and.w	r3, r3, #31
 8004850:	f1c3 0320 	rsb	r3, r3, #32
 8004854:	fa20 f203 	lsr.w	r2, r0, r3
 8004858:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	f107 0020 	add.w	r0, r7, #32
 8004862:	4403      	add	r3, r0
 8004864:	404a      	eors	r2, r1
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800486c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	4099      	lsls	r1, r3
 8004882:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004886:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800488a:	6898      	ldr	r0, [r3, #8]
 800488c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004890:	4613      	mov	r3, r2
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	f1c3 0320 	rsb	r3, r3, #32
 800489e:	fa20 f203 	lsr.w	r2, r0, r3
 80048a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	3304      	adds	r3, #4
 80048aa:	f107 0020 	add.w	r0, r7, #32
 80048ae:	4403      	add	r3, r0
 80048b0:	404a      	eors	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80048b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048bc:	6899      	ldr	r1, [r3, #8]
 80048be:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	4099      	lsls	r1, r3
 80048ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80048d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048d6:	68d8      	ldr	r0, [r3, #12]
 80048d8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80048dc:	4613      	mov	r3, r2
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	f1c3 0320 	rsb	r3, r3, #32
 80048ea:	fa20 f203 	lsr.w	r2, r0, r3
 80048ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	3308      	adds	r3, #8
 80048f6:	f107 0020 	add.w	r0, r7, #32
 80048fa:	4403      	add	r3, r0
 80048fc:	404a      	eors	r2, r1
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004904:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004908:	68d9      	ldr	r1, [r3, #12]
 800490a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	4099      	lsls	r1, r3
 800491a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800491e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004928:	4613      	mov	r3, r2
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	1a9b      	subs	r3, r3, r2
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	f1c3 0320 	rsb	r3, r3, #32
 8004936:	fa20 f203 	lsr.w	r2, r0, r3
 800493a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	330c      	adds	r3, #12
 8004942:	f107 0020 	add.w	r0, r7, #32
 8004946:	4403      	add	r3, r0
 8004948:	404a      	eors	r2, r1
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004950:	3301      	adds	r3, #1
 8004952:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004956:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800495a:	2b04      	cmp	r3, #4
 800495c:	f67f af51 	bls.w	8004802 <mbedtls_camellia_setkey_enc+0x632>
 8004960:	2300      	movs	r3, #0
 8004962:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004966:	e034      	b.n	80049d2 <mbedtls_camellia_setkey_enc+0x802>
 8004968:	0800e104 	.word	0x0800e104
 800496c:	0800e124 	.word	0x0800e124
 8004970:	49b2      	ldr	r1, [pc, #712]	; (8004c3c <mbedtls_camellia_setkey_enc+0xa6c>)
 8004972:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	18ca      	adds	r2, r1, r3
 8004980:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004984:	4413      	add	r3, r2
 8004986:	3314      	adds	r3, #20
 8004988:	f993 3000 	ldrsb.w	r3, [r3]
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d01a      	beq.n	80049c8 <mbedtls_camellia_setkey_enc+0x7f8>
 8004992:	49aa      	ldr	r1, [pc, #680]	; (8004c3c <mbedtls_camellia_setkey_enc+0xa6c>)
 8004994:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	18ca      	adds	r2, r1, r3
 80049a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80049a6:	4413      	add	r3, r2
 80049a8:	3314      	adds	r3, #20
 80049aa:	f993 3000 	ldrsb.w	r3, [r3]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80049b4:	4413      	add	r3, r2
 80049b6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80049ba:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80049be:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80049c2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80049cc:	3301      	adds	r3, #1
 80049ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80049d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80049d6:	2b13      	cmp	r3, #19
 80049d8:	d9ca      	bls.n	8004970 <mbedtls_camellia_setkey_enc+0x7a0>
    }

    /* Manipulating KA */
    SHIFT_AND_PLACE(idx, 2);
 80049da:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80049de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80049e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80049f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80049fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80049fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004a08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a0c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	2301      	movs	r3, #1
 8004a14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004a18:	e0a9      	b.n	8004b6e <mbedtls_camellia_setkey_enc+0x99e>
 8004a1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	4987      	ldr	r1, [pc, #540]	; (8004c40 <mbedtls_camellia_setkey_enc+0xa70>)
 8004a22:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004a26:	0112      	lsls	r2, r2, #4
 8004a28:	440a      	add	r2, r1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8097 	beq.w	8004b64 <mbedtls_camellia_setkey_enc+0x994>
 8004a36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a3a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a3e:	6819      	ldr	r1, [r3, #0]
 8004a40:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004a44:	4613      	mov	r3, r2
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	4099      	lsls	r1, r3
 8004a50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a58:	6858      	ldr	r0, [r3, #4]
 8004a5a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	f1c3 0320 	rsb	r3, r3, #32
 8004a6c:	fa20 f203 	lsr.w	r2, r0, r3
 8004a70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	f107 0020 	add.w	r0, r7, #32
 8004a7a:	4403      	add	r3, r0
 8004a7c:	404a      	eors	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004a8e:	4613      	mov	r3, r2
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	4099      	lsls	r1, r3
 8004a9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a9e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004aa2:	6898      	ldr	r0, [r3, #8]
 8004aa4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	f1c3 0320 	rsb	r3, r3, #32
 8004ab6:	fa20 f203 	lsr.w	r2, r0, r3
 8004aba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	f107 0020 	add.w	r0, r7, #32
 8004ac6:	4403      	add	r3, r0
 8004ac8:	404a      	eors	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004ad0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ad4:	6899      	ldr	r1, [r3, #8]
 8004ad6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004ada:	4613      	mov	r3, r2
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	f003 031f 	and.w	r3, r3, #31
 8004ae4:	4099      	lsls	r1, r3
 8004ae6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004aea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004aee:	68d8      	ldr	r0, [r3, #12]
 8004af0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004af4:	4613      	mov	r3, r2
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	f1c3 0320 	rsb	r3, r3, #32
 8004b02:	fa20 f203 	lsr.w	r2, r0, r3
 8004b06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	f107 0020 	add.w	r0, r7, #32
 8004b12:	4403      	add	r3, r0
 8004b14:	404a      	eors	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004b1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b20:	68d9      	ldr	r1, [r3, #12]
 8004b22:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004b26:	4613      	mov	r3, r2
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	4099      	lsls	r1, r3
 8004b32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004b36:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b3a:	6818      	ldr	r0, [r3, #0]
 8004b3c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004b40:	4613      	mov	r3, r2
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	f1c3 0320 	rsb	r3, r3, #32
 8004b4e:	fa20 f203 	lsr.w	r2, r0, r3
 8004b52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	330c      	adds	r3, #12
 8004b5a:	f107 0020 	add.w	r0, r7, #32
 8004b5e:	4403      	add	r3, r0
 8004b60:	404a      	eors	r2, r1
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b68:	3301      	adds	r3, #1
 8004b6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004b6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	f67f af51 	bls.w	8004a1a <mbedtls_camellia_setkey_enc+0x84a>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004b7e:	e030      	b.n	8004be2 <mbedtls_camellia_setkey_enc+0xa12>
 8004b80:	492e      	ldr	r1, [pc, #184]	; (8004c3c <mbedtls_camellia_setkey_enc+0xa6c>)
 8004b82:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	18ca      	adds	r2, r1, r3
 8004b90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b94:	4413      	add	r3, r2
 8004b96:	3328      	adds	r3, #40	; 0x28
 8004b98:	f993 3000 	ldrsb.w	r3, [r3]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d01a      	beq.n	8004bd8 <mbedtls_camellia_setkey_enc+0xa08>
 8004ba2:	4926      	ldr	r1, [pc, #152]	; (8004c3c <mbedtls_camellia_setkey_enc+0xa6c>)
 8004ba4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	18ca      	adds	r2, r1, r3
 8004bb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3328      	adds	r3, #40	; 0x28
 8004bba:	f993 3000 	ldrsb.w	r3, [r3]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004bca:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004bce:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8004bd2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004be2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004be6:	2b13      	cmp	r3, #19
 8004be8:	d9ca      	bls.n	8004b80 <mbedtls_camellia_setkey_enc+0x9b0>

    /* Manipulating KB */
    if (keybits > 128) {
 8004bea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004bee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b80      	cmp	r3, #128	; 0x80
 8004bf6:	f240 810d 	bls.w	8004e14 <mbedtls_camellia_setkey_enc+0xc44>
        SHIFT_AND_PLACE(idx, 3);
 8004bfa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004bfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004c02:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004c0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004c10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c14:	605a      	str	r2, [r3, #4]
 8004c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004c1e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c22:	609a      	str	r2, [r3, #8]
 8004c24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004c2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	2301      	movs	r3, #1
 8004c34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004c38:	e0ae      	b.n	8004d98 <mbedtls_camellia_setkey_enc+0xbc8>
 8004c3a:	bf00      	nop
 8004c3c:	0800e124 	.word	0x0800e124
 8004c40:	0800e104 	.word	0x0800e104
 8004c44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	4995      	ldr	r1, [pc, #596]	; (8004ea0 <mbedtls_camellia_setkey_enc+0xcd0>)
 8004c4c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004c50:	0112      	lsls	r2, r2, #4
 8004c52:	440a      	add	r2, r1
 8004c54:	4413      	add	r3, r2
 8004c56:	330c      	adds	r3, #12
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8097 	beq.w	8004d8e <mbedtls_camellia_setkey_enc+0xbbe>
 8004c60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004c64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c68:	6819      	ldr	r1, [r3, #0]
 8004c6a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004c6e:	4613      	mov	r3, r2
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	4099      	lsls	r1, r3
 8004c7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004c7e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c82:	6858      	ldr	r0, [r3, #4]
 8004c84:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004c88:	4613      	mov	r3, r2
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	1a9b      	subs	r3, r3, r2
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	f1c3 0320 	rsb	r3, r3, #32
 8004c96:	fa20 f203 	lsr.w	r2, r0, r3
 8004c9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	f107 0020 	add.w	r0, r7, #32
 8004ca4:	4403      	add	r3, r0
 8004ca6:	404a      	eors	r2, r1
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004cae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cb2:	6859      	ldr	r1, [r3, #4]
 8004cb4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	4099      	lsls	r1, r3
 8004cc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004cc8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ccc:	6898      	ldr	r0, [r3, #8]
 8004cce:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	f003 031f 	and.w	r3, r3, #31
 8004cdc:	f1c3 0320 	rsb	r3, r3, #32
 8004ce0:	fa20 f203 	lsr.w	r2, r0, r3
 8004ce4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	3304      	adds	r3, #4
 8004cec:	f107 0020 	add.w	r0, r7, #32
 8004cf0:	4403      	add	r3, r0
 8004cf2:	404a      	eors	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004cfa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cfe:	6899      	ldr	r1, [r3, #8]
 8004d00:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004d04:	4613      	mov	r3, r2
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	4099      	lsls	r1, r3
 8004d10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004d14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d18:	68d8      	ldr	r0, [r3, #12]
 8004d1a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004d1e:	4613      	mov	r3, r2
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	f1c3 0320 	rsb	r3, r3, #32
 8004d2c:	fa20 f203 	lsr.w	r2, r0, r3
 8004d30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	3308      	adds	r3, #8
 8004d38:	f107 0020 	add.w	r0, r7, #32
 8004d3c:	4403      	add	r3, r0
 8004d3e:	404a      	eors	r2, r1
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004d46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d4a:	68d9      	ldr	r1, [r3, #12]
 8004d4c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	4099      	lsls	r1, r3
 8004d5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004d60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	f003 031f 	and.w	r3, r3, #31
 8004d74:	f1c3 0320 	rsb	r3, r3, #32
 8004d78:	fa20 f203 	lsr.w	r2, r0, r3
 8004d7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	330c      	adds	r3, #12
 8004d84:	f107 0020 	add.w	r0, r7, #32
 8004d88:	4403      	add	r3, r0
 8004d8a:	404a      	eors	r2, r1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d92:	3301      	adds	r3, #1
 8004d94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004d98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	f67f af51 	bls.w	8004c44 <mbedtls_camellia_setkey_enc+0xa74>
 8004da2:	2300      	movs	r3, #0
 8004da4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004da8:	e030      	b.n	8004e0c <mbedtls_camellia_setkey_enc+0xc3c>
 8004daa:	493e      	ldr	r1, [pc, #248]	; (8004ea4 <mbedtls_camellia_setkey_enc+0xcd4>)
 8004dac:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	18ca      	adds	r2, r1, r3
 8004dba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004dbe:	4413      	add	r3, r2
 8004dc0:	333c      	adds	r3, #60	; 0x3c
 8004dc2:	f993 3000 	ldrsb.w	r3, [r3]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d01a      	beq.n	8004e02 <mbedtls_camellia_setkey_enc+0xc32>
 8004dcc:	4935      	ldr	r1, [pc, #212]	; (8004ea4 <mbedtls_camellia_setkey_enc+0xcd4>)
 8004dce:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	18ca      	adds	r2, r1, r3
 8004ddc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004de0:	4413      	add	r3, r2
 8004de2:	333c      	adds	r3, #60	; 0x3c
 8004de4:	f993 3000 	ldrsb.w	r3, [r3]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004dee:	4413      	add	r3, r2
 8004df0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004df4:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004df8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8004dfc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e06:	3301      	adds	r3, #1
 8004e08:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004e0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e10:	2b13      	cmp	r3, #19
 8004e12:	d9ca      	bls.n	8004daa <mbedtls_camellia_setkey_enc+0xbda>
    }

    /* Do transpositions */
    for (i = 0; i < 20; i++) {
 8004e14:	2300      	movs	r3, #0
 8004e16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004e1a:	e036      	b.n	8004e8a <mbedtls_camellia_setkey_enc+0xcba>
        if (transposes[idx][i] != -1) {
 8004e1c:	4922      	ldr	r1, [pc, #136]	; (8004ea8 <mbedtls_camellia_setkey_enc+0xcd8>)
 8004e1e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	18ca      	adds	r2, r1, r3
 8004e2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e30:	4413      	add	r3, r2
 8004e32:	f993 3000 	ldrsb.w	r3, [r3]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d021      	beq.n	8004e80 <mbedtls_camellia_setkey_enc+0xcb0>
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 8004e3c:	491a      	ldr	r1, [pc, #104]	; (8004ea8 <mbedtls_camellia_setkey_enc+0xcd8>)
 8004e3e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	18ca      	adds	r2, r1, r3
 8004e4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e50:	4413      	add	r3, r2
 8004e52:	f993 3000 	ldrsb.w	r3, [r3]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004e5c:	18d1      	adds	r1, r2, r3
 8004e5e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004e62:	4613      	mov	r3, r2
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e70:	4413      	add	r3, r2
 8004e72:	3320      	adds	r3, #32
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004e7a:	4413      	add	r3, r2
 8004e7c:	680a      	ldr	r2, [r1, #0]
 8004e7e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 20; i++) {
 8004e80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e84:	3301      	adds	r3, #1
 8004e86:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004e8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e8e:	2b13      	cmp	r3, #19
 8004e90:	d9c4      	bls.n	8004e1c <mbedtls_camellia_setkey_enc+0xc4c>
        }
    }

    return 0;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	0800e104 	.word	0x0800e104
 8004ea4:	0800e124 	.word	0x0800e124
 8004ea8:	0800e1c4 	.word	0x0800e1c4

08004eac <mbedtls_camellia_setkey_dec>:
 */
#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
int mbedtls_camellia_setkey_dec(mbedtls_camellia_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b0ce      	sub	sp, #312	; 0x138
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004eb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eba:	6018      	str	r0, [r3, #0]
 8004ebc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec4:	6019      	str	r1, [r3, #0]
 8004ec6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004eca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004ece:	601a      	str	r2, [r3, #0]
    size_t i;
    mbedtls_camellia_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_camellia_init(&cty);
 8004ed0:	f107 0310 	add.w	r3, r7, #16
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff f95b 	bl	8004190 <mbedtls_camellia_init>

    /* Also checks keybits */
    if ((ret = mbedtls_camellia_setkey_enc(&cty, key, keybits)) != 0) {
 8004eda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004ede:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8004ee2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eea:	f107 0010 	add.w	r0, r7, #16
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	6819      	ldr	r1, [r3, #0]
 8004ef2:	f7ff f96d 	bl	80041d0 <mbedtls_camellia_setkey_enc>
 8004ef6:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8004efa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f040 80c3 	bne.w	800508a <mbedtls_camellia_setkey_dec+0x1de>
        goto exit;
    }

    ctx->nr = cty.nr;
 8004f04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004f08:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	601a      	str	r2, [r3, #0]
    idx = (ctx->nr == 4);
 8004f1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004f1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	bf0c      	ite	eq
 8004f2a:	2301      	moveq	r3, #1
 8004f2c:	2300      	movne	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    RK = ctx->rk;
 8004f34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004f38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    SK = cty.rk + 24 * 2 + 8 * idx * 2;
 8004f44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	3318      	adds	r3, #24
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	f107 0210 	add.w	r2, r7, #16
 8004f52:	3204      	adds	r2, #4
 8004f54:	4413      	add	r3, r2
 8004f56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    *RK++ = *SK++;
 8004f5a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004f5e:	1d13      	adds	r3, r2, #4
 8004f60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004f64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f68:	1d19      	adds	r1, r3, #4
 8004f6a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8004f72:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004f76:	1d13      	adds	r3, r2, #4
 8004f78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004f7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f80:	1d19      	adds	r1, r3, #4
 8004f82:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8004f8a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004f8e:	1d13      	adds	r3, r2, #4
 8004f90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004f94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f98:	1d19      	adds	r1, r3, #4
 8004f9a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8004fa2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004fa6:	1d13      	adds	r3, r2, #4
 8004fa8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004fac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004fb0:	1d19      	adds	r1, r3, #4
 8004fb2:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	601a      	str	r2, [r3, #0]

    for (i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4) {
 8004fba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	3316      	adds	r3, #22
 8004fc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fca:	3b18      	subs	r3, #24
 8004fcc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004fd0:	e021      	b.n	8005016 <mbedtls_camellia_setkey_dec+0x16a>
        *RK++ = *SK++;
 8004fd2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004fd6:	1d13      	adds	r3, r2, #4
 8004fd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004fdc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004fe0:	1d19      	adds	r1, r3, #4
 8004fe2:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8004fe6:	6812      	ldr	r2, [r2, #0]
 8004fe8:	601a      	str	r2, [r3, #0]
        *RK++ = *SK++;
 8004fea:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004fee:	1d13      	adds	r3, r2, #4
 8004ff0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004ff4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ff8:	1d19      	adds	r1, r3, #4
 8004ffa:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	601a      	str	r2, [r3, #0]
    for (i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4) {
 8005002:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005006:	3b01      	subs	r3, #1
 8005008:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800500c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005010:	3b10      	subs	r3, #16
 8005012:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005016:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1d9      	bne.n	8004fd2 <mbedtls_camellia_setkey_dec+0x126>
    }

    SK -= 2;
 800501e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005022:	3b08      	subs	r3, #8
 8005024:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    *RK++ = *SK++;
 8005028:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800502c:	1d13      	adds	r3, r2, #4
 800502e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005032:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005036:	1d19      	adds	r1, r3, #4
 8005038:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005040:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005044:	1d13      	adds	r3, r2, #4
 8005046:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800504a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800504e:	1d19      	adds	r1, r3, #4
 8005050:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005058:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800505c:	1d13      	adds	r3, r2, #4
 800505e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005062:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005066:	1d19      	adds	r1, r3, #4
 8005068:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005070:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005074:	1d13      	adds	r3, r2, #4
 8005076:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800507a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800507e:	1d19      	adds	r1, r3, #4
 8005080:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e000      	b.n	800508c <mbedtls_camellia_setkey_dec+0x1e0>
        goto exit;
 800508a:	bf00      	nop

exit:
    mbedtls_camellia_free(&cty);
 800508c:	f107 0310 	add.w	r3, r7, #16
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff f88b 	bl	80041ac <mbedtls_camellia_free>

    return ret;
 8005096:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
}
 800509a:	4618      	mov	r0, r3
 800509c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <mbedtls_camellia_crypt_ecb>:
 */
int mbedtls_camellia_crypt_ecb(mbedtls_camellia_context *ctx,
                               int mode,
                               const unsigned char input[16],
                               unsigned char output[16])
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b09a      	sub	sp, #104	; 0x68
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
    int NR;
    uint32_t *RK, X[4];
    if (mode != MBEDTLS_CAMELLIA_ENCRYPT && mode != MBEDTLS_CAMELLIA_DECRYPT) {
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d005      	beq.n	80050c4 <mbedtls_camellia_crypt_ecb+0x20>
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <mbedtls_camellia_crypt_ecb+0x20>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 80050be:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80050c2:	e104      	b.n	80052ce <mbedtls_camellia_crypt_ecb+0x22a>
    }

    ((void) mode);

    NR = ctx->nr;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	667b      	str	r3, [r7, #100]	; 0x64
    RK = ctx->rk;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3304      	adds	r3, #4
 80050ce:	663b      	str	r3, [r7, #96]	; 0x60
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	653b      	str	r3, [r7, #80]	; 0x50
 80050d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80050d8:	61fb      	str	r3, [r7, #28]
    return r;
 80050da:	69fb      	ldr	r3, [r7, #28]

    X[0] = MBEDTLS_GET_UINT32_BE(input,  0);
 80050dc:	ba1b      	rev	r3, r3
 80050de:	633b      	str	r3, [r7, #48]	; 0x30
    X[1] = MBEDTLS_GET_UINT32_BE(input,  4);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	657b      	str	r3, [r7, #84]	; 0x54
 80050e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050e8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80050ea:	61bb      	str	r3, [r7, #24]
    return r;
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	ba1b      	rev	r3, r3
 80050f0:	637b      	str	r3, [r7, #52]	; 0x34
    X[2] = MBEDTLS_GET_UINT32_BE(input,  8);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3308      	adds	r3, #8
 80050f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80050f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050fa:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80050fc:	617b      	str	r3, [r7, #20]
    return r;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	ba1b      	rev	r3, r3
 8005102:	63bb      	str	r3, [r7, #56]	; 0x38
    X[3] = MBEDTLS_GET_UINT32_BE(input, 12);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	330c      	adds	r3, #12
 8005108:	65fb      	str	r3, [r7, #92]	; 0x5c
 800510a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800510c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800510e:	613b      	str	r3, [r7, #16]
    return r;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	ba1b      	rev	r3, r3
 8005114:	63fb      	str	r3, [r7, #60]	; 0x3c

    X[0] ^= *RK++;
 8005116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005118:	1d1a      	adds	r2, r3, #4
 800511a:	663a      	str	r2, [r7, #96]	; 0x60
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	4053      	eors	r3, r2
 8005122:	633b      	str	r3, [r7, #48]	; 0x30
    X[1] ^= *RK++;
 8005124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005126:	1d1a      	adds	r2, r3, #4
 8005128:	663a      	str	r2, [r7, #96]	; 0x60
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512e:	4053      	eors	r3, r2
 8005130:	637b      	str	r3, [r7, #52]	; 0x34
    X[2] ^= *RK++;
 8005132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005134:	1d1a      	adds	r2, r3, #4
 8005136:	663a      	str	r2, [r7, #96]	; 0x60
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	4053      	eors	r3, r2
 800513e:	63bb      	str	r3, [r7, #56]	; 0x38
    X[3] ^= *RK++;
 8005140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005142:	1d1a      	adds	r2, r3, #4
 8005144:	663a      	str	r2, [r7, #96]	; 0x60
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514a:	4053      	eors	r3, r2
 800514c:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (NR) {
 800514e:	e075      	b.n	800523c <mbedtls_camellia_crypt_ecb+0x198>
        --NR;
 8005150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005152:	3b01      	subs	r3, #1
 8005154:	667b      	str	r3, [r7, #100]	; 0x64
        camellia_feistel(X, RK, X + 2);
 8005156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800515a:	3308      	adds	r3, #8
 800515c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8005160:	461a      	mov	r2, r3
 8005162:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005164:	f7fe ff90 	bl	8004088 <camellia_feistel>
        RK += 2;
 8005168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800516a:	3308      	adds	r3, #8
 800516c:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X + 2, RK, X);
 800516e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005172:	3308      	adds	r3, #8
 8005174:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005178:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800517a:	4618      	mov	r0, r3
 800517c:	f7fe ff84 	bl	8004088 <camellia_feistel>
        RK += 2;
 8005180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005182:	3308      	adds	r3, #8
 8005184:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X, RK, X + 2);
 8005186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800518a:	3308      	adds	r3, #8
 800518c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8005190:	461a      	mov	r2, r3
 8005192:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005194:	f7fe ff78 	bl	8004088 <camellia_feistel>
        RK += 2;
 8005198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800519a:	3308      	adds	r3, #8
 800519c:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X + 2, RK, X);
 800519e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051a2:	3308      	adds	r3, #8
 80051a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80051a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fe ff6c 	bl	8004088 <camellia_feistel>
        RK += 2;
 80051b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051b2:	3308      	adds	r3, #8
 80051b4:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X, RK, X + 2);
 80051b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051ba:	3308      	adds	r3, #8
 80051bc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80051c0:	461a      	mov	r2, r3
 80051c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80051c4:	f7fe ff60 	bl	8004088 <camellia_feistel>
        RK += 2;
 80051c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051ca:	3308      	adds	r3, #8
 80051cc:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X + 2, RK, X);
 80051ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051d2:	3308      	adds	r3, #8
 80051d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80051d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe ff54 	bl	8004088 <camellia_feistel>
        RK += 2;
 80051e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051e2:	3308      	adds	r3, #8
 80051e4:	663b      	str	r3, [r7, #96]	; 0x60

        if (NR) {
 80051e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d027      	beq.n	800523c <mbedtls_camellia_crypt_ecb+0x198>
            FL(X[0], X[1], RK[0], RK[1]);
 80051ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4013      	ands	r3, r2
 80051f4:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	4053      	eors	r3, r2
 80051fc:	637b      	str	r3, [r7, #52]	; 0x34
 80051fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005202:	3304      	adds	r3, #4
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	431a      	orrs	r2, r3
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	4053      	eors	r3, r2
 800520c:	633b      	str	r3, [r7, #48]	; 0x30
            RK += 2;
 800520e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005210:	3308      	adds	r3, #8
 8005212:	663b      	str	r3, [r7, #96]	; 0x60
            FLInv(X[2], X[3], RK[0], RK[1]);
 8005214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005218:	3304      	adds	r3, #4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	431a      	orrs	r2, r3
 800521e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005220:	4053      	eors	r3, r2
 8005222:	63bb      	str	r3, [r7, #56]	; 0x38
 8005224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4013      	ands	r3, r2
 800522c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8005230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005232:	4053      	eors	r3, r2
 8005234:	63fb      	str	r3, [r7, #60]	; 0x3c
            RK += 2;
 8005236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005238:	3308      	adds	r3, #8
 800523a:	663b      	str	r3, [r7, #96]	; 0x60
    while (NR) {
 800523c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800523e:	2b00      	cmp	r3, #0
 8005240:	d186      	bne.n	8005150 <mbedtls_camellia_crypt_ecb+0xac>
        }
    }

    X[2] ^= *RK++;
 8005242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005244:	1d1a      	adds	r2, r3, #4
 8005246:	663a      	str	r2, [r7, #96]	; 0x60
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	4053      	eors	r3, r2
 800524e:	63bb      	str	r3, [r7, #56]	; 0x38
    X[3] ^= *RK++;
 8005250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005252:	1d1a      	adds	r2, r3, #4
 8005254:	663a      	str	r2, [r7, #96]	; 0x60
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525a:	4053      	eors	r3, r2
 800525c:	63fb      	str	r3, [r7, #60]	; 0x3c
    X[0] ^= *RK++;
 800525e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005260:	1d1a      	adds	r2, r3, #4
 8005262:	663a      	str	r2, [r7, #96]	; 0x60
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	4053      	eors	r3, r2
 800526a:	633b      	str	r3, [r7, #48]	; 0x30
    X[1] ^= *RK++;
 800526c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800526e:	1d1a      	adds	r2, r3, #4
 8005270:	663a      	str	r2, [r7, #96]	; 0x60
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005276:	4053      	eors	r3, r2
 8005278:	637b      	str	r3, [r7, #52]	; 0x34

    MBEDTLS_PUT_UINT32_BE(X[2], output,  0);
 800527a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527c:	ba1b      	rev	r3, r3
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005282:	623b      	str	r3, [r7, #32]
 8005284:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8005286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005288:	601a      	str	r2, [r3, #0]
}
 800528a:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X[3], output,  4);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	1d1a      	adds	r2, r3, #4
 8005290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005292:	ba1b      	rev	r3, r3
 8005294:	64ba      	str	r2, [r7, #72]	; 0x48
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
 8005298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 800529a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529c:	601a      	str	r2, [r3, #0]
}
 800529e:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X[0], output,  8);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	f103 0208 	add.w	r2, r3, #8
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	ba1b      	rev	r3, r3
 80052aa:	647a      	str	r2, [r7, #68]	; 0x44
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 80052b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X[1], output, 12);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	f103 020c 	add.w	r2, r3, #12
 80052bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052be:	ba1b      	rev	r3, r3
 80052c0:	643a      	str	r2, [r7, #64]	; 0x40
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    memcpy(p, &x, sizeof(x));
 80052c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c8:	601a      	str	r2, [r3, #0]
}
 80052ca:	bf00      	nop

    return 0;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3768      	adds	r7, #104	; 0x68
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <mbedtls_camellia_crypt_cbc>:
                               int mode,
                               size_t length,
                               unsigned char iv[16],
                               const unsigned char *input,
                               unsigned char *output)
{
 80052d6:	b5b0      	push	{r4, r5, r7, lr}
 80052d8:	b0a0      	sub	sp, #128	; 0x80
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	603b      	str	r3, [r7, #0]
    unsigned char temp[16];
    if (mode != MBEDTLS_CAMELLIA_ENCRYPT && mode != MBEDTLS_CAMELLIA_DECRYPT) {
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d005      	beq.n	80052f6 <mbedtls_camellia_crypt_cbc+0x20>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <mbedtls_camellia_crypt_cbc+0x20>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 80052f0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80052f4:	e0e6      	b.n	80054c4 <mbedtls_camellia_crypt_cbc+0x1ee>
    }

    if (length % 16) {
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <mbedtls_camellia_crypt_cbc+0x30>
        return MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH;
 8005300:	f06f 0325 	mvn.w	r3, #37	; 0x25
 8005304:	e0de      	b.n	80054c4 <mbedtls_camellia_crypt_cbc+0x1ee>
    }

    if (mode == MBEDTLS_CAMELLIA_DECRYPT) {
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f040 80d7 	bne.w	80054bc <mbedtls_camellia_crypt_cbc+0x1e6>
        while (length > 0) {
 800530e:	e06e      	b.n	80053ee <mbedtls_camellia_crypt_cbc+0x118>
            memcpy(temp, input, 16);
 8005310:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005314:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	6859      	ldr	r1, [r3, #4]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_camellia_crypt_ecb(ctx, mode, input, output);
 8005322:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005326:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f7ff feb9 	bl	80050a4 <mbedtls_camellia_crypt_ecb>
 8005332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005336:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005338:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800533c:	67bb      	str	r3, [r7, #120]	; 0x78
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	677b      	str	r3, [r7, #116]	; 0x74
 8005342:	2310      	movs	r3, #16
 8005344:	673b      	str	r3, [r7, #112]	; 0x70
    size_t i = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (; (i + 4) <= n; i += 4) {
 800534a:	e01e      	b.n	800538a <mbedtls_camellia_crypt_cbc+0xb4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800534c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800534e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005350:	4413      	add	r3, r2
 8005352:	66bb      	str	r3, [r7, #104]	; 0x68
 8005354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005356:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005358:	61bb      	str	r3, [r7, #24]
    return r;
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800535e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005360:	440b      	add	r3, r1
 8005362:	667b      	str	r3, [r7, #100]	; 0x64
 8005364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005366:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005368:	617b      	str	r3, [r7, #20]
    return r;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	4053      	eors	r3, r2
 800536e:	663b      	str	r3, [r7, #96]	; 0x60
        mbedtls_put_unaligned_uint32(r + i, x);
 8005370:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005374:	4413      	add	r3, r2
 8005376:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 800537e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005380:	601a      	str	r2, [r3, #0]
}
 8005382:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8005384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005386:	3304      	adds	r3, #4
 8005388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800538a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538c:	3304      	adds	r3, #4
 800538e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005390:	429a      	cmp	r2, r3
 8005392:	d2db      	bcs.n	800534c <mbedtls_camellia_crypt_cbc+0x76>
    for (; i < n; i++) {
 8005394:	e010      	b.n	80053b8 <mbedtls_camellia_crypt_cbc+0xe2>
        r[i] = a[i] ^ b[i];
 8005396:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539a:	4413      	add	r3, r2
 800539c:	7819      	ldrb	r1, [r3, #0]
 800539e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80053a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a2:	4413      	add	r3, r2
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80053a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053aa:	4403      	add	r3, r0
 80053ac:	404a      	eors	r2, r1
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80053b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b4:	3301      	adds	r3, #1
 80053b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80053ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053bc:	429a      	cmp	r2, r3
 80053be:	d8ea      	bhi.n	8005396 <mbedtls_camellia_crypt_cbc+0xc0>
}
 80053c0:	bf00      	nop

            mbedtls_xor(output, output, iv, 16);

            memcpy(iv, temp, 16);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	461d      	mov	r5, r3
 80053c6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80053ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053cc:	6028      	str	r0, [r5, #0]
 80053ce:	6069      	str	r1, [r5, #4]
 80053d0:	60aa      	str	r2, [r5, #8]
 80053d2:	60eb      	str	r3, [r5, #12]

            input  += 16;
 80053d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053d8:	3310      	adds	r3, #16
 80053da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            output += 16;
 80053de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053e2:	3310      	adds	r3, #16
 80053e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            length -= 16;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3b10      	subs	r3, #16
 80053ec:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d18d      	bne.n	8005310 <mbedtls_camellia_crypt_cbc+0x3a>
 80053f4:	e065      	b.n	80054c2 <mbedtls_camellia_crypt_cbc+0x1ec>
 80053f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80053fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005400:	657b      	str	r3, [r7, #84]	; 0x54
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	653b      	str	r3, [r7, #80]	; 0x50
 8005406:	2310      	movs	r3, #16
 8005408:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t i = 0;
 800540a:	2300      	movs	r3, #0
 800540c:	64bb      	str	r3, [r7, #72]	; 0x48
    for (; (i + 4) <= n; i += 4) {
 800540e:	e01e      	b.n	800544e <mbedtls_camellia_crypt_cbc+0x178>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8005410:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005414:	4413      	add	r3, r2
 8005416:	647b      	str	r3, [r7, #68]	; 0x44
 8005418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 800541e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005420:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005424:	440b      	add	r3, r1
 8005426:	643b      	str	r3, [r7, #64]	; 0x40
 8005428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800542a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800542c:	623b      	str	r3, [r7, #32]
    return r;
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	4053      	eors	r3, r2
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
        mbedtls_put_unaligned_uint32(r + i, x);
 8005434:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005438:	4413      	add	r3, r2
 800543a:	63bb      	str	r3, [r7, #56]	; 0x38
 800543c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543e:	61fb      	str	r3, [r7, #28]
 8005440:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	601a      	str	r2, [r3, #0]
}
 8005446:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8005448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800544a:	3304      	adds	r3, #4
 800544c:	64bb      	str	r3, [r7, #72]	; 0x48
 800544e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005450:	3304      	adds	r3, #4
 8005452:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005454:	429a      	cmp	r2, r3
 8005456:	d2db      	bcs.n	8005410 <mbedtls_camellia_crypt_cbc+0x13a>
    for (; i < n; i++) {
 8005458:	e010      	b.n	800547c <mbedtls_camellia_crypt_cbc+0x1a6>
        r[i] = a[i] ^ b[i];
 800545a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800545c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800545e:	4413      	add	r3, r2
 8005460:	7819      	ldrb	r1, [r3, #0]
 8005462:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005466:	4413      	add	r3, r2
 8005468:	781a      	ldrb	r2, [r3, #0]
 800546a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800546c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800546e:	4403      	add	r3, r0
 8005470:	404a      	eors	r2, r1
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8005476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005478:	3301      	adds	r3, #1
 800547a:	64bb      	str	r3, [r7, #72]	; 0x48
 800547c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800547e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005480:	429a      	cmp	r2, r3
 8005482:	d8ea      	bhi.n	800545a <mbedtls_camellia_crypt_cbc+0x184>
}
 8005484:	bf00      	nop
        }
    } else {
        while (length > 0) {
            mbedtls_xor(output, input, iv, 16);

            mbedtls_camellia_crypt_ecb(ctx, mode, output, output);
 8005486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800548a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f7ff fe07 	bl	80050a4 <mbedtls_camellia_crypt_ecb>
            memcpy(iv, output, 16);
 8005496:	2210      	movs	r2, #16
 8005498:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800549c:	6838      	ldr	r0, [r7, #0]
 800549e:	f007 fc62 	bl	800cd66 <memcpy>

            input  += 16;
 80054a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054a6:	3310      	adds	r3, #16
 80054a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            output += 16;
 80054ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054b0:	3310      	adds	r3, #16
 80054b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            length -= 16;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3b10      	subs	r3, #16
 80054ba:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d199      	bne.n	80053f6 <mbedtls_camellia_crypt_cbc+0x120>
        }
    }

    return 0;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3780      	adds	r7, #128	; 0x80
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bdb0      	pop	{r4, r5, r7, pc}

080054cc <mbedtls_camellia_crypt_cfb128>:
                                  size_t length,
                                  size_t *iv_off,
                                  unsigned char iv[16],
                                  const unsigned char *input,
                                  unsigned char *output)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
    int c;
    size_t n;
    if (mode != MBEDTLS_CAMELLIA_ENCRYPT && mode != MBEDTLS_CAMELLIA_DECRYPT) {
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d005      	beq.n	80054ec <mbedtls_camellia_crypt_cfb128+0x20>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <mbedtls_camellia_crypt_cfb128+0x20>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 80054e6:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80054ea:	e063      	b.n	80055b4 <mbedtls_camellia_crypt_cfb128+0xe8>
    }

    n = *iv_off;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	617b      	str	r3, [r7, #20]
    if (n >= 16) {
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	d902      	bls.n	80054fe <mbedtls_camellia_crypt_cfb128+0x32>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 80054f8:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80054fc:	e05a      	b.n	80055b4 <mbedtls_camellia_crypt_cfb128+0xe8>
    }

    if (mode == MBEDTLS_CAMELLIA_DECRYPT) {
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d14e      	bne.n	80055a2 <mbedtls_camellia_crypt_cfb128+0xd6>
        while (length--) {
 8005504:	e026      	b.n	8005554 <mbedtls_camellia_crypt_cfb128+0x88>
            if (n == 0) {
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d105      	bne.n	8005518 <mbedtls_camellia_crypt_cfb128+0x4c>
                mbedtls_camellia_crypt_ecb(ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv);
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	6a3a      	ldr	r2, [r7, #32]
 8005510:	2101      	movs	r1, #1
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f7ff fdc6 	bl	80050a4 <mbedtls_camellia_crypt_ecb>
            }

            c = *input++;
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	627a      	str	r2, [r7, #36]	; 0x24
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	613b      	str	r3, [r7, #16]
            *output++ = (unsigned char) (c ^ iv[n]);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	b25a      	sxtb	r2, r3
 8005526:	6a39      	ldr	r1, [r7, #32]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	440b      	add	r3, r1
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	b25b      	sxtb	r3, r3
 8005530:	4053      	eors	r3, r2
 8005532:	b259      	sxtb	r1, r3
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	62ba      	str	r2, [r7, #40]	; 0x28
 800553a:	b2ca      	uxtb	r2, r1
 800553c:	701a      	strb	r2, [r3, #0]
            iv[n] = (unsigned char) c;
 800553e:	6a3a      	ldr	r2, [r7, #32]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4413      	add	r3, r2
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]

            n = (n + 1) & 0x0F;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	3301      	adds	r3, #1
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	617b      	str	r3, [r7, #20]
        while (length--) {
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	1e5a      	subs	r2, r3, #1
 8005558:	607a      	str	r2, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1d3      	bne.n	8005506 <mbedtls_camellia_crypt_cfb128+0x3a>
 800555e:	e025      	b.n	80055ac <mbedtls_camellia_crypt_cfb128+0xe0>
        }
    } else {
        while (length--) {
            if (n == 0) {
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d105      	bne.n	8005572 <mbedtls_camellia_crypt_cfb128+0xa6>
                mbedtls_camellia_crypt_ecb(ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv);
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	6a3a      	ldr	r2, [r7, #32]
 800556a:	2101      	movs	r1, #1
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f7ff fd99 	bl	80050a4 <mbedtls_camellia_crypt_ecb>
            }

            iv[n] = *output++ = (unsigned char) (iv[n] ^ *input++);
 8005572:	6a3a      	ldr	r2, [r7, #32]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	4413      	add	r3, r2
 8005578:	7819      	ldrb	r1, [r3, #0]
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	627a      	str	r2, [r7, #36]	; 0x24
 8005580:	781a      	ldrb	r2, [r3, #0]
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	1c58      	adds	r0, r3, #1
 8005586:	62b8      	str	r0, [r7, #40]	; 0x28
 8005588:	404a      	eors	r2, r1
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	6a39      	ldr	r1, [r7, #32]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	440a      	add	r2, r1
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	7013      	strb	r3, [r2, #0]

            n = (n + 1) & 0x0F;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	3301      	adds	r3, #1
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	617b      	str	r3, [r7, #20]
        while (length--) {
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	1e5a      	subs	r2, r3, #1
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1d9      	bne.n	8005560 <mbedtls_camellia_crypt_cfb128+0x94>
        }
    }

    *iv_off = n;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	601a      	str	r2, [r3, #0]

    return 0;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <mbedtls_camellia_crypt_ctr>:
                               size_t *nc_off,
                               unsigned char nonce_counter[16],
                               unsigned char stream_block[16],
                               const unsigned char *input,
                               unsigned char *output)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
    int c, i;
    size_t n;

    n = *nc_off;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	61bb      	str	r3, [r7, #24]
    if (n >= 16) {
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b0f      	cmp	r3, #15
 80055d4:	d939      	bls.n	800564a <mbedtls_camellia_crypt_ctr+0x8e>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 80055d6:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80055da:	e03f      	b.n	800565c <mbedtls_camellia_crypt_ctr+0xa0>
    }

    while (length--) {
        if (n == 0) {
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d11b      	bne.n	800561a <mbedtls_camellia_crypt_ctr+0x5e>
            mbedtls_camellia_crypt_ecb(ctx, MBEDTLS_CAMELLIA_ENCRYPT, nonce_counter,
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	2101      	movs	r1, #1
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff fd5b 	bl	80050a4 <mbedtls_camellia_crypt_ecb>
                                       stream_block);

            for (i = 16; i > 0; i--) {
 80055ee:	2310      	movs	r3, #16
 80055f0:	61fb      	str	r3, [r7, #28]
 80055f2:	e00d      	b.n	8005610 <mbedtls_camellia_crypt_ctr+0x54>
                if (++nonce_counter[i - 1] != 0) {
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	4413      	add	r3, r2
 80055fc:	781a      	ldrb	r2, [r3, #0]
 80055fe:	3201      	adds	r2, #1
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <mbedtls_camellia_crypt_ctr+0x5c>
            for (i = 16; i > 0; i--) {
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	3b01      	subs	r3, #1
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	2b00      	cmp	r3, #0
 8005614:	dcee      	bgt.n	80055f4 <mbedtls_camellia_crypt_ctr+0x38>
 8005616:	e000      	b.n	800561a <mbedtls_camellia_crypt_ctr+0x5e>
                    break;
 8005618:	bf00      	nop
                }
            }
        }
        c = *input++;
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char) (c ^ stream_block[n]);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	b25a      	sxtb	r2, r3
 8005628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	440b      	add	r3, r1
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	b25b      	sxtb	r3, r3
 8005632:	4053      	eors	r3, r2
 8005634:	b259      	sxtb	r1, r3
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	633a      	str	r2, [r7, #48]	; 0x30
 800563c:	b2ca      	uxtb	r2, r1
 800563e:	701a      	strb	r2, [r3, #0]

        n = (n + 1) & 0x0F;
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	3301      	adds	r3, #1
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	61bb      	str	r3, [r7, #24]
    while (length--) {
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	1e5a      	subs	r2, r3, #1
 800564e:	60ba      	str	r2, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1c3      	bne.n	80055dc <mbedtls_camellia_crypt_ctr+0x20>
    }

    *nc_off = n;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	601a      	str	r2, [r3, #0]

    return 0;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3720      	adds	r7, #32
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <mbedtls_cipher_info_get_block_size>:
 * \return       \c 1 if the cipher is a stream cipher.
 * \return       \c 0 if \p info is \c NULL.
 */
static inline size_t mbedtls_cipher_info_get_block_size(
    const mbedtls_cipher_info_t *info)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <mbedtls_cipher_info_get_block_size+0x12>
        return 0;
 8005672:	2300      	movs	r3, #0
 8005674:	e004      	b.n	8005680 <mbedtls_cipher_info_get_block_size+0x1c>
    }

    return (size_t) (info->MBEDTLS_PRIVATE(block_size));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	791b      	ldrb	r3, [r3, #4]
 800567a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800567e:	b2db      	uxtb	r3, r3
}
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <mbedtls_ccm_init>:

/*
 * Initialize context
 */
void mbedtls_ccm_init(mbedtls_ccm_context *ctx)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_ccm_context));
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	2100      	movs	r1, #0
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f007 fad9 	bl	800cc50 <memset>
}
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <mbedtls_ccm_setkey>:

int mbedtls_ccm_setkey(mbedtls_ccm_context *ctx,
                       mbedtls_cipher_id_t cipher,
                       const unsigned char *key,
                       unsigned int keybits)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b086      	sub	sp, #24
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	460b      	mov	r3, r1
 80056b4:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80056b6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80056ba:	617b      	str	r3, [r7, #20]
        return MBEDTLS_ERR_CCM_BAD_INPUT;
    }
#else
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values(cipher, keybits,
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	7afb      	ldrb	r3, [r7, #11]
 80056c0:	2201      	movs	r2, #1
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 ff24 	bl	8006510 <mbedtls_cipher_info_from_values>
 80056c8:	6138      	str	r0, [r7, #16]
                                                  MBEDTLS_MODE_ECB);
    if (cipher_info == NULL) {
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <mbedtls_ccm_setkey+0x30>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 80056d0:	f06f 030c 	mvn.w	r3, #12
 80056d4:	e028      	b.n	8005728 <mbedtls_ccm_setkey+0x82>
    }

    if (mbedtls_cipher_info_get_block_size(cipher_info) != 16) {
 80056d6:	6938      	ldr	r0, [r7, #16]
 80056d8:	f7ff ffc4 	bl	8005664 <mbedtls_cipher_info_get_block_size>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b10      	cmp	r3, #16
 80056e0:	d002      	beq.n	80056e8 <mbedtls_ccm_setkey+0x42>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 80056e2:	f06f 030c 	mvn.w	r3, #12
 80056e6:	e01f      	b.n	8005728 <mbedtls_ccm_setkey+0x82>
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3338      	adds	r3, #56	; 0x38
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 ff56 	bl	800659e <mbedtls_cipher_free>

    if ((ret = mbedtls_cipher_setup(&ctx->cipher_ctx, cipher_info)) != 0) {
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3338      	adds	r3, #56	; 0x38
 80056f6:	6939      	ldr	r1, [r7, #16]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 ff79 	bl	80065f0 <mbedtls_cipher_setup>
 80056fe:	6178      	str	r0, [r7, #20]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <mbedtls_ccm_setkey+0x64>
        return ret;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	e00e      	b.n	8005728 <mbedtls_ccm_setkey+0x82>
    }

    if ((ret = mbedtls_cipher_setkey(&ctx->cipher_ctx, key, keybits,
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	2301      	movs	r3, #1
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	f000 ff9d 	bl	8006654 <mbedtls_cipher_setkey>
 800571a:	6178      	str	r0, [r7, #20]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <mbedtls_ccm_setkey+0x80>
                                     MBEDTLS_ENCRYPT)) != 0) {
        return ret;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	e000      	b.n	8005728 <mbedtls_ccm_setkey+0x82>
    }
#endif

    return ret;
 8005726:	697b      	ldr	r3, [r7, #20]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <mbedtls_ccm_free>:

/*
 * Free context
 */
void mbedtls_ccm_free(mbedtls_ccm_context *ctx)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d009      	beq.n	8005752 <mbedtls_ccm_free+0x22>
        return;
    }
#if defined(MBEDTLS_BLOCK_CIPHER_C)
    mbedtls_block_cipher_free(&ctx->block_cipher_ctx);
#else
    mbedtls_cipher_free(&ctx->cipher_ctx);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3338      	adds	r3, #56	; 0x38
 8005742:	4618      	mov	r0, r3
 8005744:	f000 ff2b 	bl	800659e <mbedtls_cipher_free>
#endif
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_ccm_context));
 8005748:	2180      	movs	r1, #128	; 0x80
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f004 fe82 	bl	800a454 <mbedtls_platform_zeroize>
 8005750:	e000      	b.n	8005754 <mbedtls_ccm_free+0x24>
        return;
 8005752:	bf00      	nop
}
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <mbedtls_ccm_crypt>:
 */
static int mbedtls_ccm_crypt(mbedtls_ccm_context *ctx,
                             size_t offset, size_t use_len,
                             const unsigned char *input,
                             unsigned char *output)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b098      	sub	sp, #96	; 0x60
 800575e:	af02      	add	r7, sp, #8
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8005768:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800576c:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char tmp_buf[16] = { 0 };
 800576e:	2300      	movs	r3, #0
 8005770:	623b      	str	r3, [r7, #32]
 8005772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	605a      	str	r2, [r3, #4]
 800577c:	609a      	str	r2, [r3, #8]

#if defined(MBEDTLS_BLOCK_CIPHER_C)
    ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, ctx->ctr, tmp_buf);
#else
    size_t olen = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	61fb      	str	r3, [r7, #28]
    ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->ctr, 16, tmp_buf, &olen);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f103 0110 	add.w	r1, r3, #16
 800578e:	f107 0220 	add.w	r2, r7, #32
 8005792:	f107 031c 	add.w	r3, r7, #28
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	4613      	mov	r3, r2
 800579a:	2210      	movs	r2, #16
 800579c:	f000 ffd2 	bl	8006744 <mbedtls_cipher_update>
 80057a0:	6578      	str	r0, [r7, #84]	; 0x54
#endif
    if (ret != 0) {
 80057a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00d      	beq.n	80057c4 <mbedtls_ccm_crypt+0x6a>
        ctx->state |= CCM_STATE__ERROR;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ac:	f043 0210 	orr.w	r2, r3, #16
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	67da      	str	r2, [r3, #124]	; 0x7c
        mbedtls_platform_zeroize(tmp_buf, sizeof(tmp_buf));
 80057b4:	f107 0320 	add.w	r3, r7, #32
 80057b8:	2110      	movs	r1, #16
 80057ba:	4618      	mov	r0, r3
 80057bc:	f004 fe4a 	bl	800a454 <mbedtls_platform_zeroize>
        return ret;
 80057c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057c2:	e04f      	b.n	8005864 <mbedtls_ccm_crypt+0x10a>
    }

    mbedtls_xor(output, input, tmp_buf + offset, use_len);
 80057c4:	f107 0220 	add.w	r2, r7, #32
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4413      	add	r3, r2
 80057cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057ce:	653a      	str	r2, [r7, #80]	; 0x50
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80057d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	643b      	str	r3, [r7, #64]	; 0x40
    for (; (i + 4) <= n; i += 4) {
 80057de:	e01e      	b.n	800581e <mbedtls_ccm_crypt+0xc4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80057e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e4:	4413      	add	r3, r2
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ea:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80057ec:	61bb      	str	r3, [r7, #24]
    return r;
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80057f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f4:	440b      	add	r3, r1
 80057f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fa:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80057fc:	617b      	str	r3, [r7, #20]
    return r;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	4053      	eors	r3, r2
 8005802:	637b      	str	r3, [r7, #52]	; 0x34
        mbedtls_put_unaligned_uint32(r + i, x);
 8005804:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005808:	4413      	add	r3, r2
 800580a:	633b      	str	r3, [r7, #48]	; 0x30
 800580c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	601a      	str	r2, [r3, #0]
}
 8005816:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8005818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581a:	3304      	adds	r3, #4
 800581c:	643b      	str	r3, [r7, #64]	; 0x40
 800581e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005820:	3304      	adds	r3, #4
 8005822:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005824:	429a      	cmp	r2, r3
 8005826:	d2db      	bcs.n	80057e0 <mbedtls_ccm_crypt+0x86>
    for (; i < n; i++) {
 8005828:	e010      	b.n	800584c <mbedtls_ccm_crypt+0xf2>
        r[i] = a[i] ^ b[i];
 800582a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800582c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582e:	4413      	add	r3, r2
 8005830:	7819      	ldrb	r1, [r3, #0]
 8005832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005836:	4413      	add	r3, r2
 8005838:	781a      	ldrb	r2, [r3, #0]
 800583a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800583c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583e:	4403      	add	r3, r0
 8005840:	404a      	eors	r2, r1
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8005846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005848:	3301      	adds	r3, #1
 800584a:	643b      	str	r3, [r7, #64]	; 0x40
 800584c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800584e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005850:	429a      	cmp	r2, r3
 8005852:	d8ea      	bhi.n	800582a <mbedtls_ccm_crypt+0xd0>
}
 8005854:	bf00      	nop

    mbedtls_platform_zeroize(tmp_buf, sizeof(tmp_buf));
 8005856:	f107 0320 	add.w	r3, r7, #32
 800585a:	2110      	movs	r1, #16
 800585c:	4618      	mov	r0, r3
 800585e:	f004 fdf9 	bl	800a454 <mbedtls_platform_zeroize>
    return ret;
 8005862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8005864:	4618      	mov	r0, r3
 8005866:	3758      	adds	r7, #88	; 0x58
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <mbedtls_ccm_update>:

int mbedtls_ccm_update(mbedtls_ccm_context *ctx,
                       const unsigned char *input, size_t input_len,
                       unsigned char *output, size_t output_size,
                       size_t *output_len)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b0a8      	sub	sp, #160	; 0xa0
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800587a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800587e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    size_t olen;
#endif

    unsigned char local_output[16];

    if (ctx->state & CCM_STATE__ERROR) {
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <mbedtls_ccm_update+0x28>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 800588e:	f06f 030c 	mvn.w	r3, #12
 8005892:	e1b1      	b.n	8005bf8 <mbedtls_ccm_update+0x38c>
    }

    /* Check against plaintext length only if performing operation with
     * authentication
     */
    if (ctx->tag_len != 0 && ctx->processed + input_len > ctx->plaintext_len) {
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <mbedtls_ccm_update+0x46>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	441a      	add	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d902      	bls.n	80058b2 <mbedtls_ccm_update+0x46>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 80058ac:	f06f 030c 	mvn.w	r3, #12
 80058b0:	e1a2      	b.n	8005bf8 <mbedtls_ccm_update+0x38c>
    }

    if (output_size < input_len) {
 80058b2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d202      	bcs.n	80058c2 <mbedtls_ccm_update+0x56>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 80058bc:	f06f 030c 	mvn.w	r3, #12
 80058c0:	e19a      	b.n	8005bf8 <mbedtls_ccm_update+0x38c>
    }
    *output_len = input_len;
 80058c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	601a      	str	r2, [r3, #0]

    ret = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    while (input_len > 0) {
 80058d0:	e182      	b.n	8005bd8 <mbedtls_ccm_update+0x36c>
        offset = ctx->processed % 16;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        use_len = 16 - offset;
 80058de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058e2:	f1c3 0310 	rsb	r3, r3, #16
 80058e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        if (use_len > input_len) {
 80058ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d902      	bls.n	80058fa <mbedtls_ccm_update+0x8e>
            use_len = input_len;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        ctx->processed += use_len;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005902:	441a      	add	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	62da      	str	r2, [r3, #44]	; 0x2c

        if (ctx->mode == MBEDTLS_CCM_ENCRYPT || \
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590c:	2b01      	cmp	r3, #1
 800590e:	d004      	beq.n	800591a <mbedtls_ccm_update+0xae>
            ctx->mode == MBEDTLS_CCM_STAR_ENCRYPT) {
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (ctx->mode == MBEDTLS_CCM_ENCRYPT || \
 8005914:	2b03      	cmp	r3, #3
 8005916:	f040 808a 	bne.w	8005a2e <mbedtls_ccm_update+0x1c2>
            mbedtls_xor(ctx->y + offset, ctx->y + offset, input, use_len);
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005920:	441a      	add	r2, r3
 8005922:	68f9      	ldr	r1, [r7, #12]
 8005924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005928:	440b      	add	r3, r1
 800592a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800592e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800593a:	67bb      	str	r3, [r7, #120]	; 0x78
    size_t i = 0;
 800593c:	2300      	movs	r3, #0
 800593e:	677b      	str	r3, [r7, #116]	; 0x74
    for (; (i + 4) <= n; i += 4) {
 8005940:	e020      	b.n	8005984 <mbedtls_ccm_update+0x118>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8005942:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005948:	4413      	add	r3, r2
 800594a:	673b      	str	r3, [r7, #112]	; 0x70
 800594c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800594e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005950:	61fb      	str	r3, [r7, #28]
    return r;
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005958:	440b      	add	r3, r1
 800595a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800595c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005960:	61bb      	str	r3, [r7, #24]
    return r;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	4053      	eors	r3, r2
 8005966:	66bb      	str	r3, [r7, #104]	; 0x68
        mbedtls_put_unaligned_uint32(r + i, x);
 8005968:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800596c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800596e:	4413      	add	r3, r2
 8005970:	667b      	str	r3, [r7, #100]	; 0x64
 8005972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8005978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800597a:	601a      	str	r2, [r3, #0]
}
 800597c:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800597e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005980:	3304      	adds	r3, #4
 8005982:	677b      	str	r3, [r7, #116]	; 0x74
 8005984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005986:	3304      	adds	r3, #4
 8005988:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800598a:	429a      	cmp	r2, r3
 800598c:	d2d9      	bcs.n	8005942 <mbedtls_ccm_update+0xd6>
    for (; i < n; i++) {
 800598e:	e012      	b.n	80059b6 <mbedtls_ccm_update+0x14a>
        r[i] = a[i] ^ b[i];
 8005990:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005996:	4413      	add	r3, r2
 8005998:	7819      	ldrb	r1, [r3, #0]
 800599a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800599c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800599e:	4413      	add	r3, r2
 80059a0:	781a      	ldrb	r2, [r3, #0]
 80059a2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80059a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a8:	4403      	add	r3, r0
 80059aa:	404a      	eors	r2, r1
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80059b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b2:	3301      	adds	r3, #1
 80059b4:	677b      	str	r3, [r7, #116]	; 0x74
 80059b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d8e8      	bhi.n	8005990 <mbedtls_ccm_update+0x124>
}
 80059be:	bf00      	nop

            if (use_len + offset == 16 || ctx->processed == ctx->plaintext_len) {
 80059c0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80059c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059c8:	4413      	add	r3, r2
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d005      	beq.n	80059da <mbedtls_ccm_update+0x16e>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d118      	bne.n	8005a0c <mbedtls_ccm_update+0x1a0>
#if defined(MBEDTLS_BLOCK_CIPHER_C)
                ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, ctx->y, ctx->y);
#else
                ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16, ctx->y, &olen);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80059e0:	68f9      	ldr	r1, [r7, #12]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	4613      	mov	r3, r2
 80059ec:	2210      	movs	r2, #16
 80059ee:	f000 fea9 	bl	8006744 <mbedtls_cipher_update>
 80059f2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
#endif
                if (ret != 0) {
 80059f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d006      	beq.n	8005a0c <mbedtls_ccm_update+0x1a0>
                    ctx->state |= CCM_STATE__ERROR;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a02:	f043 0210 	orr.w	r2, r3, #16
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	67da      	str	r2, [r3, #124]	; 0x7c
                    goto exit;
 8005a0a:	e0ed      	b.n	8005be8 <mbedtls_ccm_update+0x37c>
                }
            }

            ret = mbedtls_ccm_crypt(ctx, offset, use_len, input, output);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005a16:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7ff fe9d 	bl	800575a <mbedtls_ccm_crypt>
 8005a20:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret != 0) {
 8005a24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f040 80da 	bne.w	8005be2 <mbedtls_ccm_update+0x376>
                goto exit;
            }
        }

        if (ctx->mode == MBEDTLS_CCM_DECRYPT || \
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d004      	beq.n	8005a40 <mbedtls_ccm_update+0x1d4>
            ctx->mode == MBEDTLS_CCM_STAR_DECRYPT) {
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (ctx->mode == MBEDTLS_CCM_DECRYPT || \
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	f040 808e 	bne.w	8005b5c <mbedtls_ccm_update+0x2f0>
             * it will contain what we wrote to it. Therefore, we should avoid using
             * it as input to any operations.
             * Write decrypted data to local_output to avoid using output variable as
             * input in the XOR operation for Y.
             */
            ret = mbedtls_ccm_crypt(ctx, offset, use_len, input, local_output);
 8005a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005a4c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff fe82 	bl	800575a <mbedtls_ccm_crypt>
 8005a56:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret != 0) {
 8005a5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f040 80c1 	bne.w	8005be6 <mbedtls_ccm_update+0x37a>
                goto exit;
            }

            mbedtls_xor(ctx->y + offset, ctx->y + offset, local_output, use_len);
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a6a:	441a      	add	r2, r3
 8005a6c:	68f9      	ldr	r1, [r7, #12]
 8005a6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a72:	440b      	add	r3, r1
 8005a74:	663a      	str	r2, [r7, #96]	; 0x60
 8005a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a82:	657b      	str	r3, [r7, #84]	; 0x54
    size_t i = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	653b      	str	r3, [r7, #80]	; 0x50
    for (; (i + 4) <= n; i += 4) {
 8005a88:	e01e      	b.n	8005ac8 <mbedtls_ccm_update+0x25c>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8005a8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8e:	4413      	add	r3, r2
 8005a90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a94:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8005a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a9e:	440b      	add	r3, r1
 8005aa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	4053      	eors	r3, r2
 8005aac:	647b      	str	r3, [r7, #68]	; 0x44
        mbedtls_put_unaligned_uint32(r + i, x);
 8005aae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab2:	4413      	add	r3, r2
 8005ab4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab8:	623b      	str	r3, [r7, #32]
 8005aba:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8005abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005abe:	601a      	str	r2, [r3, #0]
}
 8005ac0:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8005ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aca:	3304      	adds	r3, #4
 8005acc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d2db      	bcs.n	8005a8a <mbedtls_ccm_update+0x21e>
    for (; i < n; i++) {
 8005ad2:	e010      	b.n	8005af6 <mbedtls_ccm_update+0x28a>
        r[i] = a[i] ^ b[i];
 8005ad4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad8:	4413      	add	r3, r2
 8005ada:	7819      	ldrb	r1, [r3, #0]
 8005adc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ae0:	4413      	add	r3, r2
 8005ae2:	781a      	ldrb	r2, [r3, #0]
 8005ae4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ae8:	4403      	add	r3, r0
 8005aea:	404a      	eors	r2, r1
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8005af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005af2:	3301      	adds	r3, #1
 8005af4:	653b      	str	r3, [r7, #80]	; 0x50
 8005af6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d8ea      	bhi.n	8005ad4 <mbedtls_ccm_update+0x268>
}
 8005afe:	bf00      	nop

            memcpy(output, local_output, use_len);
 8005b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b04:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6838      	ldr	r0, [r7, #0]
 8005b0c:	f007 f92b 	bl	800cd66 <memcpy>

            if (use_len + offset == 16 || ctx->processed == ctx->plaintext_len) {
 8005b10:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b18:	4413      	add	r3, r2
 8005b1a:	2b10      	cmp	r3, #16
 8005b1c:	d005      	beq.n	8005b2a <mbedtls_ccm_update+0x2be>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d118      	bne.n	8005b5c <mbedtls_ccm_update+0x2f0>
#if defined(MBEDTLS_BLOCK_CIPHER_C)
                ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, ctx->y, ctx->y);
#else
                ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16, ctx->y, &olen);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005b30:	68f9      	ldr	r1, [r7, #12]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	2210      	movs	r2, #16
 8005b3e:	f000 fe01 	bl	8006744 <mbedtls_cipher_update>
 8005b42:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
#endif
                if (ret != 0) {
 8005b46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d006      	beq.n	8005b5c <mbedtls_ccm_update+0x2f0>
                    ctx->state |= CCM_STATE__ERROR;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b52:	f043 0210 	orr.w	r2, r3, #16
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	67da      	str	r2, [r3, #124]	; 0x7c
                    goto exit;
 8005b5a:	e045      	b.n	8005be8 <mbedtls_ccm_update+0x37c>
                }
            }
        }

        if (use_len + offset == 16 || ctx->processed == ctx->plaintext_len) {
 8005b5c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005b60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b64:	4413      	add	r3, r2
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d005      	beq.n	8005b76 <mbedtls_ccm_update+0x30a>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d121      	bne.n	8005bba <mbedtls_ccm_update+0x34e>
            for (i = 0; i < ctx->q; i++) {
 8005b76:	2300      	movs	r3, #0
 8005b78:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8005b7c:	e015      	b.n	8005baa <mbedtls_ccm_update+0x33e>
                if (++(ctx->ctr)[15-i] != 0) {
 8005b7e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8005b82:	f1c3 030f 	rsb	r3, r3, #15
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	441a      	add	r2, r3
 8005b8a:	7c12      	ldrb	r2, [r2, #16]
 8005b8c:	3201      	adds	r2, #1
 8005b8e:	b2d1      	uxtb	r1, r2
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	441a      	add	r2, r3
 8005b94:	7411      	strb	r1, [r2, #16]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	7c1b      	ldrb	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10b      	bne.n	8005bb8 <mbedtls_ccm_update+0x34c>
            for (i = 0; i < ctx->q; i++) {
 8005ba0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8005baa:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d3e3      	bcc.n	8005b7e <mbedtls_ccm_update+0x312>
 8005bb6:	e000      	b.n	8005bba <mbedtls_ccm_update+0x34e>
                    break;
 8005bb8:	bf00      	nop
                }
            }
        }

        input_len -= use_len;
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	607b      	str	r3, [r7, #4]
        input += use_len;
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bca:	4413      	add	r3, r2
 8005bcc:	60bb      	str	r3, [r7, #8]
        output += use_len;
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bd4:	4413      	add	r3, r2
 8005bd6:	603b      	str	r3, [r7, #0]
    while (input_len > 0) {
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f47f ae79 	bne.w	80058d2 <mbedtls_ccm_update+0x66>
    }

exit:
 8005be0:	e002      	b.n	8005be8 <mbedtls_ccm_update+0x37c>
                goto exit;
 8005be2:	bf00      	nop
 8005be4:	e000      	b.n	8005be8 <mbedtls_ccm_update+0x37c>
                goto exit;
 8005be6:	bf00      	nop
    mbedtls_platform_zeroize(local_output, 16);
 8005be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bec:	2110      	movs	r1, #16
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f004 fc30 	bl	800a454 <mbedtls_platform_zeroize>

    return ret;
 8005bf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3798      	adds	r7, #152	; 0x98
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <chacha20_quarter_round>:
static inline void chacha20_quarter_round(uint32_t state[16],
                                          size_t a,
                                          size_t b,
                                          size_t c,
                                          size_t d)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
    /* a += b; d ^= a; d <<<= 16; */
    state[a] += state[b];
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4413      	add	r3, r2
 8005c16:	6819      	ldr	r1, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	4403      	add	r3, r0
 8005c2a:	440a      	add	r2, r1
 8005c2c:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4413      	add	r3, r2
 8005c36:	6819      	ldr	r1, [r3, #0]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	4403      	add	r3, r0
 8005c4a:	404a      	eors	r2, r1
 8005c4c:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32(state[d], 16);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4413      	add	r3, r2
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	68f9      	ldr	r1, [r7, #12]
 8005c5e:	440b      	add	r3, r1
 8005c60:	ea4f 4232 	mov.w	r2, r2, ror #16
 8005c64:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 12 */
    state[c] += state[d];
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	6819      	ldr	r1, [r3, #0]
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	4403      	add	r3, r0
 8005c82:	440a      	add	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	6819      	ldr	r1, [r3, #0]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	4403      	add	r3, r0
 8005ca2:	404a      	eors	r2, r1
 8005ca4:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32(state[b], 12);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	68f9      	ldr	r1, [r7, #12]
 8005cb6:	440b      	add	r3, r1
 8005cb8:	ea4f 5232 	mov.w	r2, r2, ror #20
 8005cbc:	601a      	str	r2, [r3, #0]

    /* a += b; d ^= a; d <<<= 8; */
    state[a] += state[b];
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	6819      	ldr	r1, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	4403      	add	r3, r0
 8005cda:	440a      	add	r2, r1
 8005cdc:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	6819      	ldr	r1, [r3, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	4403      	add	r3, r0
 8005cfa:	404a      	eors	r2, r1
 8005cfc:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32(state[d], 8);
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	68f9      	ldr	r1, [r7, #12]
 8005d0e:	440b      	add	r3, r1
 8005d10:	ea4f 6232 	mov.w	r2, r2, ror #24
 8005d14:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 7; */
    state[c] += state[d];
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	6819      	ldr	r1, [r3, #0]
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	4403      	add	r3, r0
 8005d32:	440a      	add	r2, r1
 8005d34:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	6819      	ldr	r1, [r3, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	4403      	add	r3, r0
 8005d52:	404a      	eors	r2, r1
 8005d54:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32(state[b], 7);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	68f9      	ldr	r1, [r7, #12]
 8005d66:	440b      	add	r3, r1
 8005d68:	ea4f 6272 	mov.w	r2, r2, ror #25
 8005d6c:	601a      	str	r2, [r3, #0]
}
 8005d6e:	bf00      	nop
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <chacha20_inner_block>:
 *                  diagonal round.
 *
 * \param state     The ChaCha20 state to update.
 */
static void chacha20_inner_block(uint32_t state[16])
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af02      	add	r7, sp, #8
 8005d80:	6078      	str	r0, [r7, #4]
    chacha20_quarter_round(state, 0, 4, 8,  12);
 8005d82:	230c      	movs	r3, #12
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	2308      	movs	r3, #8
 8005d88:	2204      	movs	r2, #4
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff ff37 	bl	8005c00 <chacha20_quarter_round>
    chacha20_quarter_round(state, 1, 5, 9,  13);
 8005d92:	230d      	movs	r3, #13
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	2309      	movs	r3, #9
 8005d98:	2205      	movs	r2, #5
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ff2f 	bl	8005c00 <chacha20_quarter_round>
    chacha20_quarter_round(state, 2, 6, 10, 14);
 8005da2:	230e      	movs	r3, #14
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	230a      	movs	r3, #10
 8005da8:	2206      	movs	r2, #6
 8005daa:	2102      	movs	r1, #2
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff ff27 	bl	8005c00 <chacha20_quarter_round>
    chacha20_quarter_round(state, 3, 7, 11, 15);
 8005db2:	230f      	movs	r3, #15
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	230b      	movs	r3, #11
 8005db8:	2207      	movs	r2, #7
 8005dba:	2103      	movs	r1, #3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ff1f 	bl	8005c00 <chacha20_quarter_round>

    chacha20_quarter_round(state, 0, 5, 10, 15);
 8005dc2:	230f      	movs	r3, #15
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	230a      	movs	r3, #10
 8005dc8:	2205      	movs	r2, #5
 8005dca:	2100      	movs	r1, #0
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff ff17 	bl	8005c00 <chacha20_quarter_round>
    chacha20_quarter_round(state, 1, 6, 11, 12);
 8005dd2:	230c      	movs	r3, #12
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	230b      	movs	r3, #11
 8005dd8:	2206      	movs	r2, #6
 8005dda:	2101      	movs	r1, #1
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff ff0f 	bl	8005c00 <chacha20_quarter_round>
    chacha20_quarter_round(state, 2, 7, 8,  13);
 8005de2:	230d      	movs	r3, #13
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	2308      	movs	r3, #8
 8005de8:	2207      	movs	r2, #7
 8005dea:	2102      	movs	r1, #2
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff ff07 	bl	8005c00 <chacha20_quarter_round>
    chacha20_quarter_round(state, 3, 4, 9,  14);
 8005df2:	230e      	movs	r3, #14
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	2309      	movs	r3, #9
 8005df8:	2204      	movs	r2, #4
 8005dfa:	2103      	movs	r1, #3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff feff 	bl	8005c00 <chacha20_quarter_round>
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <chacha20_block>:
 * \param initial_state The initial ChaCha20 state (key, nonce, counter).
 * \param keystream     Generated keystream bytes are written to this buffer.
 */
static void chacha20_block(const uint32_t initial_state[16],
                           unsigned char keystream[64])
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b096      	sub	sp, #88	; 0x58
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
    uint32_t working_state[16];
    size_t i;

    memcpy(working_state,
 8005e14:	f107 030c 	add.w	r3, r7, #12
 8005e18:	2240      	movs	r2, #64	; 0x40
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f006 ffa2 	bl	800cd66 <memcpy>
           initial_state,
           CHACHA20_BLOCK_SIZE_BYTES);

    for (i = 0U; i < 10U; i++) {
 8005e22:	2300      	movs	r3, #0
 8005e24:	657b      	str	r3, [r7, #84]	; 0x54
 8005e26:	e007      	b.n	8005e38 <chacha20_block+0x2e>
        chacha20_inner_block(working_state);
 8005e28:	f107 030c 	add.w	r3, r7, #12
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff ffa4 	bl	8005d7a <chacha20_inner_block>
    for (i = 0U; i < 10U; i++) {
 8005e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e34:	3301      	adds	r3, #1
 8005e36:	657b      	str	r3, [r7, #84]	; 0x54
 8005e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e3a:	2b09      	cmp	r3, #9
 8005e3c:	d9f4      	bls.n	8005e28 <chacha20_block+0x1e>
    }

    working_state[0] += initial_state[0];
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4413      	add	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
    working_state[1] += initial_state[1];
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4413      	add	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
    working_state[2] += initial_state[2];
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
    working_state[3] += initial_state[3];
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	330c      	adds	r3, #12
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4413      	add	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
    working_state[4] += initial_state[4];
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3310      	adds	r3, #16
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4413      	add	r3, r2
 8005e76:	61fb      	str	r3, [r7, #28]
    working_state[5] += initial_state[5];
 8005e78:	6a3a      	ldr	r2, [r7, #32]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3314      	adds	r3, #20
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4413      	add	r3, r2
 8005e82:	623b      	str	r3, [r7, #32]
    working_state[6] += initial_state[6];
 8005e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3318      	adds	r3, #24
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
    working_state[7] += initial_state[7];
 8005e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	331c      	adds	r3, #28
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4413      	add	r3, r2
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    working_state[8] += initial_state[8];
 8005e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3320      	adds	r3, #32
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    working_state[9] += initial_state[9];
 8005ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3324      	adds	r3, #36	; 0x24
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	633b      	str	r3, [r7, #48]	; 0x30
    working_state[10] += initial_state[10];
 8005eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3328      	adds	r3, #40	; 0x28
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	637b      	str	r3, [r7, #52]	; 0x34
    working_state[11] += initial_state[11];
 8005ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	332c      	adds	r3, #44	; 0x2c
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4413      	add	r3, r2
 8005eca:	63bb      	str	r3, [r7, #56]	; 0x38
    working_state[12] += initial_state[12];
 8005ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3330      	adds	r3, #48	; 0x30
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
    working_state[13] += initial_state[13];
 8005ed8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3334      	adds	r3, #52	; 0x34
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	643b      	str	r3, [r7, #64]	; 0x40
    working_state[14] += initial_state[14];
 8005ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3338      	adds	r3, #56	; 0x38
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4413      	add	r3, r2
 8005eee:	647b      	str	r3, [r7, #68]	; 0x44
    working_state[15] += initial_state[15];
 8005ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	333c      	adds	r3, #60	; 0x3c
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4413      	add	r3, r2
 8005efa:	64bb      	str	r3, [r7, #72]	; 0x48

    for (i = 0U; i < 16; i++) {
 8005efc:	2300      	movs	r3, #0
 8005efe:	657b      	str	r3, [r7, #84]	; 0x54
 8005f00:	e014      	b.n	8005f2c <chacha20_block+0x122>
        size_t offset = i * 4U;
 8005f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	653b      	str	r3, [r7, #80]	; 0x50

        MBEDTLS_PUT_UINT32_LE(working_state[i], keystream, offset);
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0c:	441a      	add	r2, r3
 8005f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	3358      	adds	r3, #88	; 0x58
 8005f14:	443b      	add	r3, r7
 8005f16:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005f1a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005f1c:	60bb      	str	r3, [r7, #8]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
    memcpy(p, &x, sizeof(x));
 8005f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f22:	601a      	str	r2, [r3, #0]
}
 8005f24:	bf00      	nop
    for (i = 0U; i < 16; i++) {
 8005f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f28:	3301      	adds	r3, #1
 8005f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f2e:	2b0f      	cmp	r3, #15
 8005f30:	d9e7      	bls.n	8005f02 <chacha20_block+0xf8>
    }

    mbedtls_platform_zeroize(working_state, sizeof(working_state));
 8005f32:	f107 030c 	add.w	r3, r7, #12
 8005f36:	2140      	movs	r1, #64	; 0x40
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f004 fa8b 	bl	800a454 <mbedtls_platform_zeroize>
}
 8005f3e:	bf00      	nop
 8005f40:	3758      	adds	r7, #88	; 0x58
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <mbedtls_chacha20_init>:

void mbedtls_chacha20_init(mbedtls_chacha20_context *ctx)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
    mbedtls_platform_zeroize(ctx->state, sizeof(ctx->state));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2140      	movs	r1, #64	; 0x40
 8005f52:	4618      	mov	r0, r3
 8005f54:	f004 fa7e 	bl	800a454 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(ctx->keystream8, sizeof(ctx->keystream8));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3340      	adds	r3, #64	; 0x40
 8005f5c:	2140      	movs	r1, #64	; 0x40
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f004 fa78 	bl	800a454 <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2240      	movs	r2, #64	; 0x40
 8005f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8005f6c:	bf00      	nop
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <mbedtls_chacha20_free>:

void mbedtls_chacha20_free(mbedtls_chacha20_context *ctx)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
    if (ctx != NULL) {
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <mbedtls_chacha20_free+0x16>
        mbedtls_platform_zeroize(ctx, sizeof(mbedtls_chacha20_context));
 8005f82:	2184      	movs	r1, #132	; 0x84
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f004 fa65 	bl	800a454 <mbedtls_platform_zeroize>
    }
}
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <mbedtls_chacha20_setkey>:

int mbedtls_chacha20_setkey(mbedtls_chacha20_context *ctx,
                            const unsigned char key[32])
{
 8005f94:	b480      	push	{r7}
 8005f96:	b093      	sub	sp, #76	; 0x4c
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
    /* ChaCha20 constants - the string "expand 32-byte k" */
    ctx->state[0] = 0x61707865;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a2c      	ldr	r2, [pc, #176]	; (8006054 <mbedtls_chacha20_setkey+0xc0>)
 8005fa2:	601a      	str	r2, [r3, #0]
    ctx->state[1] = 0x3320646e;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a2c      	ldr	r2, [pc, #176]	; (8006058 <mbedtls_chacha20_setkey+0xc4>)
 8005fa8:	605a      	str	r2, [r3, #4]
    ctx->state[2] = 0x79622d32;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2b      	ldr	r2, [pc, #172]	; (800605c <mbedtls_chacha20_setkey+0xc8>)
 8005fae:	609a      	str	r2, [r3, #8]
    ctx->state[3] = 0x6b206574;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a2b      	ldr	r2, [pc, #172]	; (8006060 <mbedtls_chacha20_setkey+0xcc>)
 8005fb4:	60da      	str	r2, [r3, #12]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8005fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24

    /* Set key */
    ctx->state[4]  = MBEDTLS_GET_UINT32_LE(key, 0);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	611a      	str	r2, [r3, #16]
    ctx->state[5]  = MBEDTLS_GET_UINT32_LE(key, 4);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fce:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005fd0:	623b      	str	r3, [r7, #32]
    return r;
 8005fd2:	6a3a      	ldr	r2, [r7, #32]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	615a      	str	r2, [r3, #20]
    ctx->state[6]  = MBEDTLS_GET_UINT32_LE(key, 8);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005fe2:	61fb      	str	r3, [r7, #28]
    return r;
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	619a      	str	r2, [r3, #24]
    ctx->state[7]  = MBEDTLS_GET_UINT32_LE(key, 12);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005ff4:	61bb      	str	r3, [r7, #24]
    return r;
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	61da      	str	r2, [r3, #28]
    ctx->state[8]  = MBEDTLS_GET_UINT32_LE(key, 16);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	3310      	adds	r3, #16
 8006000:	63bb      	str	r3, [r7, #56]	; 0x38
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006006:	617b      	str	r3, [r7, #20]
    return r;
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	621a      	str	r2, [r3, #32]
    ctx->state[9]  = MBEDTLS_GET_UINT32_LE(key, 20);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	3314      	adds	r3, #20
 8006012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006016:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006018:	613b      	str	r3, [r7, #16]
    return r;
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	625a      	str	r2, [r3, #36]	; 0x24
    ctx->state[10] = MBEDTLS_GET_UINT32_LE(key, 24);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	3318      	adds	r3, #24
 8006024:	643b      	str	r3, [r7, #64]	; 0x40
 8006026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006028:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800602a:	60fb      	str	r3, [r7, #12]
    return r;
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	629a      	str	r2, [r3, #40]	; 0x28
    ctx->state[11] = MBEDTLS_GET_UINT32_LE(key, 28);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	331c      	adds	r3, #28
 8006036:	647b      	str	r3, [r7, #68]	; 0x44
 8006038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800603a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800603c:	60bb      	str	r3, [r7, #8]
    return r;
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	62da      	str	r2, [r3, #44]	; 0x2c

    return 0;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	374c      	adds	r7, #76	; 0x4c
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	61707865 	.word	0x61707865
 8006058:	3320646e 	.word	0x3320646e
 800605c:	79622d32 	.word	0x79622d32
 8006060:	6b206574 	.word	0x6b206574

08006064 <mbedtls_chacha20_update>:

int mbedtls_chacha20_update(mbedtls_chacha20_context *ctx,
                            size_t size,
                            const unsigned char *input,
                            unsigned char *output)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b09e      	sub	sp, #120	; 0x78
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
    size_t offset = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	677b      	str	r3, [r7, #116]	; 0x74

    /* Use leftover keystream bytes, if available */
    while (size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES) {
 8006076:	e01d      	b.n	80060b4 <mbedtls_chacha20_update+0x50>
        output[offset] = input[offset]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800607c:	4413      	add	r3, r2
 800607e:	7819      	ldrb	r1, [r3, #0]
                         ^ ctx->keystream8[ctx->keystream_bytes_used];
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        output[offset] = input[offset]
 800608e:	6838      	ldr	r0, [r7, #0]
 8006090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006092:	4403      	add	r3, r0
 8006094:	404a      	eors	r2, r1
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]

        ctx->keystream_bytes_used++;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        offset++;
 80060a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060aa:	3301      	adds	r3, #1
 80060ac:	677b      	str	r3, [r7, #116]	; 0x74
        size--;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	60bb      	str	r3, [r7, #8]
    while (size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES) {
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d062      	beq.n	8006180 <mbedtls_chacha20_update+0x11c>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060c0:	2b3f      	cmp	r3, #63	; 0x3f
 80060c2:	d9d9      	bls.n	8006078 <mbedtls_chacha20_update+0x14>
    }

    /* Process full blocks */
    while (size >= CHACHA20_BLOCK_SIZE_BYTES) {
 80060c4:	e05c      	b.n	8006180 <mbedtls_chacha20_update+0x11c>
        /* Generate new keystream block and increment counter */
        chacha20_block(ctx->state, ctx->keystream8);
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3340      	adds	r3, #64	; 0x40
 80060cc:	4619      	mov	r1, r3
 80060ce:	4610      	mov	r0, r2
 80060d0:	f7ff fe9b 	bl	8005e0a <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30

        mbedtls_xor(output + offset, input + offset, ctx->keystream8, 64U);
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e2:	18d1      	adds	r1, r2, r3
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e8:	441a      	add	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3340      	adds	r3, #64	; 0x40
 80060ee:	6739      	str	r1, [r7, #112]	; 0x70
 80060f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80060f4:	2340      	movs	r3, #64	; 0x40
 80060f6:	667b      	str	r3, [r7, #100]	; 0x64
    size_t i = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	663b      	str	r3, [r7, #96]	; 0x60
    for (; (i + 4) <= n; i += 4) {
 80060fc:	e01e      	b.n	800613c <mbedtls_chacha20_update+0xd8>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80060fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006102:	4413      	add	r3, r2
 8006104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006108:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800610a:	61fb      	str	r3, [r7, #28]
    return r;
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006112:	440b      	add	r3, r1
 8006114:	65bb      	str	r3, [r7, #88]	; 0x58
 8006116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006118:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800611a:	61bb      	str	r3, [r7, #24]
    return r;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	4053      	eors	r3, r2
 8006120:	657b      	str	r3, [r7, #84]	; 0x54
        mbedtls_put_unaligned_uint32(r + i, x);
 8006122:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006126:	4413      	add	r3, r2
 8006128:	653b      	str	r3, [r7, #80]	; 0x50
 800612a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8006130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006132:	601a      	str	r2, [r3, #0]
}
 8006134:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8006136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006138:	3304      	adds	r3, #4
 800613a:	663b      	str	r3, [r7, #96]	; 0x60
 800613c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800613e:	3304      	adds	r3, #4
 8006140:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006142:	429a      	cmp	r2, r3
 8006144:	d2db      	bcs.n	80060fe <mbedtls_chacha20_update+0x9a>
    for (; i < n; i++) {
 8006146:	e010      	b.n	800616a <mbedtls_chacha20_update+0x106>
        r[i] = a[i] ^ b[i];
 8006148:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800614a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800614c:	4413      	add	r3, r2
 800614e:	7819      	ldrb	r1, [r3, #0]
 8006150:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006154:	4413      	add	r3, r2
 8006156:	781a      	ldrb	r2, [r3, #0]
 8006158:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800615a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800615c:	4403      	add	r3, r0
 800615e:	404a      	eors	r2, r1
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8006164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006166:	3301      	adds	r3, #1
 8006168:	663b      	str	r3, [r7, #96]	; 0x60
 800616a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800616c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800616e:	429a      	cmp	r2, r3
 8006170:	d8ea      	bhi.n	8006148 <mbedtls_chacha20_update+0xe4>
}
 8006172:	bf00      	nop

        offset += CHACHA20_BLOCK_SIZE_BYTES;
 8006174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006176:	3340      	adds	r3, #64	; 0x40
 8006178:	677b      	str	r3, [r7, #116]	; 0x74
        size   -= CHACHA20_BLOCK_SIZE_BYTES;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	3b40      	subs	r3, #64	; 0x40
 800617e:	60bb      	str	r3, [r7, #8]
    while (size >= CHACHA20_BLOCK_SIZE_BYTES) {
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b3f      	cmp	r3, #63	; 0x3f
 8006184:	d89f      	bhi.n	80060c6 <mbedtls_chacha20_update+0x62>
    }

    /* Last (partial) block */
    if (size > 0U) {
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d05a      	beq.n	8006242 <mbedtls_chacha20_update+0x1de>
        /* Generate new keystream block and increment counter */
        chacha20_block(ctx->state, ctx->keystream8);
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3340      	adds	r3, #64	; 0x40
 8006192:	4619      	mov	r1, r3
 8006194:	4610      	mov	r0, r2
 8006196:	f7ff fe38 	bl	8005e0a <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30

        mbedtls_xor(output + offset, input + offset, ctx->keystream8, size);
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061a8:	18d1      	adds	r1, r2, r3
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ae:	441a      	add	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3340      	adds	r3, #64	; 0x40
 80061b4:	64f9      	str	r1, [r7, #76]	; 0x4c
 80061b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80061b8:	647b      	str	r3, [r7, #68]	; 0x44
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	643b      	str	r3, [r7, #64]	; 0x40
    size_t i = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (; (i + 4) <= n; i += 4) {
 80061c2:	e01e      	b.n	8006202 <mbedtls_chacha20_update+0x19e>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80061c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c8:	4413      	add	r3, r2
 80061ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80061cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ce:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80061d0:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 80061d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d8:	440b      	add	r3, r1
 80061da:	637b      	str	r3, [r7, #52]	; 0x34
 80061dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061de:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	4053      	eors	r3, r2
 80061e6:	633b      	str	r3, [r7, #48]	; 0x30
        mbedtls_put_unaligned_uint32(r + i, x);
 80061e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ec:	4413      	add	r3, r2
 80061ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	623b      	str	r3, [r7, #32]
 80061f4:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	601a      	str	r2, [r3, #0]
}
 80061fa:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80061fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fe:	3304      	adds	r3, #4
 8006200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006204:	3304      	adds	r3, #4
 8006206:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006208:	429a      	cmp	r2, r3
 800620a:	d2db      	bcs.n	80061c4 <mbedtls_chacha20_update+0x160>
    for (; i < n; i++) {
 800620c:	e010      	b.n	8006230 <mbedtls_chacha20_update+0x1cc>
        r[i] = a[i] ^ b[i];
 800620e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	4413      	add	r3, r2
 8006214:	7819      	ldrb	r1, [r3, #0]
 8006216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621a:	4413      	add	r3, r2
 800621c:	781a      	ldrb	r2, [r3, #0]
 800621e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006222:	4403      	add	r3, r0
 8006224:	404a      	eors	r2, r1
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800622a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622c:	3301      	adds	r3, #1
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006230:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006234:	429a      	cmp	r2, r3
 8006236:	d8ea      	bhi.n	800620e <mbedtls_chacha20_update+0x1aa>
}
 8006238:	bf00      	nop

        ctx->keystream_bytes_used = size;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    }

    return 0;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3778      	adds	r7, #120	; 0x78
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <chachapoly_pad_aad>:
 * \brief           Adds nul bytes to pad the AAD for Poly1305.
 *
 * \param ctx       The ChaCha20-Poly1305 context.
 */
static int chachapoly_pad_aad(mbedtls_chachapoly_context *ctx)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
    uint32_t partial_block_len = (uint32_t) (ctx->aad_len % 16U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800625a:	4613      	mov	r3, r2
 800625c:	f003 030f 	and.w	r3, r3, #15
 8006260:	61fb      	str	r3, [r7, #28]
    unsigned char zeroes[15];

    if (partial_block_len == 0U) {
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <chachapoly_pad_aad+0x20>
        return 0;
 8006268:	2300      	movs	r3, #0
 800626a:	e012      	b.n	8006292 <chachapoly_pad_aad+0x46>
    }

    memset(zeroes, 0, sizeof(zeroes));
 800626c:	f107 030c 	add.w	r3, r7, #12
 8006270:	220f      	movs	r2, #15
 8006272:	2100      	movs	r1, #0
 8006274:	4618      	mov	r0, r3
 8006276:	f006 fceb 	bl	800cc50 <memset>

    return mbedtls_poly1305_update(&ctx->poly1305_ctx,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f103 0084 	add.w	r0, r3, #132	; 0x84
                                   zeroes,
                                   16U - partial_block_len);
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f1c3 0210 	rsb	r2, r3, #16
    return mbedtls_poly1305_update(&ctx->poly1305_ctx,
 8006286:	f107 030c 	add.w	r3, r7, #12
 800628a:	4619      	mov	r1, r3
 800628c:	f004 fd31 	bl	800acf2 <mbedtls_poly1305_update>
 8006290:	4603      	mov	r3, r0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3720      	adds	r7, #32
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <mbedtls_chachapoly_init>:
                                   zeroes,
                                   16U - partial_block_len);
}

void mbedtls_chachapoly_init(mbedtls_chachapoly_context *ctx)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
    mbedtls_chacha20_init(&ctx->chacha20_ctx);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff fe4e 	bl	8005f46 <mbedtls_chacha20_init>
    mbedtls_poly1305_init(&ctx->poly1305_ctx);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3384      	adds	r3, #132	; 0x84
 80062ae:	4618      	mov	r0, r3
 80062b0:	f004 fd03 	bl	800acba <mbedtls_poly1305_init>
    ctx->aad_len        = 0U;
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
}
 80062e0:	bf00      	nop
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <mbedtls_chachapoly_free>:

void mbedtls_chachapoly_free(mbedtls_chachapoly_context *ctx)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d01f      	beq.n	8006336 <mbedtls_chachapoly_free+0x4e>
        return;
    }

    mbedtls_chacha20_free(&ctx->chacha20_ctx);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff fe3b 	bl	8005f74 <mbedtls_chacha20_free>
    mbedtls_poly1305_free(&ctx->poly1305_ctx);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3384      	adds	r3, #132	; 0x84
 8006302:	4618      	mov	r0, r3
 8006304:	f004 fce5 	bl	800acd2 <mbedtls_poly1305_free>
    ctx->aad_len        = 0U;
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	f04f 0300 	mov.w	r3, #0
 8006312:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8006334:	e000      	b.n	8006338 <mbedtls_chachapoly_free+0x50>
        return;
 8006336:	bf00      	nop
}
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <mbedtls_chachapoly_setkey>:

int mbedtls_chachapoly_setkey(mbedtls_chachapoly_context *ctx,
                              const unsigned char key[32])
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8006348:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800634c:	60fb      	str	r3, [r7, #12]

    ret = mbedtls_chacha20_setkey(&ctx->chacha20_ctx, key);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff fe1e 	bl	8005f94 <mbedtls_chacha20_setkey>
 8006358:	60f8      	str	r0, [r7, #12]

    return ret;
 800635a:	68fb      	ldr	r3, [r7, #12]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <mbedtls_chachapoly_update>:

int mbedtls_chachapoly_update(mbedtls_chachapoly_context *ctx,
                              size_t len,
                              const unsigned char *input,
                              unsigned char *output)
{
 8006364:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006368:	b086      	sub	sp, #24
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
 8006372:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8006374:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8006378:	617b      	str	r3, [r7, #20]

    if ((ctx->state != CHACHAPOLY_STATE_AAD) &&
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006380:	2b01      	cmp	r3, #1
 8006382:	d007      	beq.n	8006394 <mbedtls_chachapoly_update+0x30>
        (ctx->state != CHACHAPOLY_STATE_CIPHERTEXT)) {
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if ((ctx->state != CHACHAPOLY_STATE_AAD) &&
 800638a:	2b02      	cmp	r3, #2
 800638c:	d002      	beq.n	8006394 <mbedtls_chachapoly_update+0x30>
        return MBEDTLS_ERR_CHACHAPOLY_BAD_STATE;
 800638e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006392:	e057      	b.n	8006444 <mbedtls_chachapoly_update+0xe0>
    }

    if (ctx->state == CHACHAPOLY_STATE_AAD) {
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800639a:	2b01      	cmp	r3, #1
 800639c:	d10c      	bne.n	80063b8 <mbedtls_chachapoly_update+0x54>
        ctx->state = CHACHAPOLY_STATE_CIPHERTEXT;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

        ret = chachapoly_pad_aad(ctx);
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7ff ff50 	bl	800624c <chachapoly_pad_aad>
 80063ac:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <mbedtls_chachapoly_update+0x54>
            return ret;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	e045      	b.n	8006444 <mbedtls_chachapoly_update+0xe0>
        }
    }

    ctx->ciphertext_len += len;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	2000      	movs	r0, #0
 80063c2:	460c      	mov	r4, r1
 80063c4:	4605      	mov	r5, r0
 80063c6:	eb12 0804 	adds.w	r8, r2, r4
 80063ca:	eb43 0905 	adc.w	r9, r3, r5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	e9c3 8936 	strd	r8, r9, [r3, #216]	; 0xd8

    if (ctx->mode == MBEDTLS_CHACHAPOLY_ENCRYPT) {
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d118      	bne.n	8006410 <mbedtls_chachapoly_update+0xac>
        ret = mbedtls_chacha20_update(&ctx->chacha20_ctx, len, input, output);
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	f7ff fe3d 	bl	8006064 <mbedtls_chacha20_update>
 80063ea:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <mbedtls_chachapoly_update+0x92>
            return ret;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	e026      	b.n	8006444 <mbedtls_chachapoly_update+0xe0>
        }

        ret = mbedtls_poly1305_update(&ctx->poly1305_ctx, output, len);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3384      	adds	r3, #132	; 0x84
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f004 fc77 	bl	800acf2 <mbedtls_poly1305_update>
 8006404:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01a      	beq.n	8006442 <mbedtls_chachapoly_update+0xde>
            return ret;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	e019      	b.n	8006444 <mbedtls_chachapoly_update+0xe0>
        }
    } else { /* DECRYPT */
        ret = mbedtls_poly1305_update(&ctx->poly1305_ctx, input, len);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3384      	adds	r3, #132	; 0x84
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	6879      	ldr	r1, [r7, #4]
 8006418:	4618      	mov	r0, r3
 800641a:	f004 fc6a 	bl	800acf2 <mbedtls_poly1305_update>
 800641e:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <mbedtls_chachapoly_update+0xc6>
            return ret;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	e00c      	b.n	8006444 <mbedtls_chachapoly_update+0xe0>
        }

        ret = mbedtls_chacha20_update(&ctx->chacha20_ctx, len, input, output);
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	68b9      	ldr	r1, [r7, #8]
 8006432:	f7ff fe17 	bl	8006064 <mbedtls_chacha20_update>
 8006436:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <mbedtls_chachapoly_update+0xde>
            return ret;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	e000      	b.n	8006444 <mbedtls_chachapoly_update+0xe0>
        }
    }

    return 0;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800644e <mbedtls_cipher_info_get_key_bitlen>:
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <mbedtls_cipher_info_get_key_bitlen+0x12>
        return 0;
 800645c:	2300      	movs	r3, #0
 800645e:	e005      	b.n	800646c <mbedtls_cipher_info_get_key_bitlen+0x1e>
        return ((size_t) info->MBEDTLS_PRIVATE(key_bitlen)) << MBEDTLS_KEY_BITLEN_SHIFT;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	795b      	ldrb	r3, [r3, #5]
 8006464:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006468:	b2db      	uxtb	r3, r3
 800646a:	019b      	lsls	r3, r3, #6
}
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <mbedtls_cipher_get_block_size>:
 * \return       \c 1 if the cipher is a stream cipher.
 * \return       \c 0 if \p ctx has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
    if (ctx->MBEDTLS_PRIVATE(cipher_info) == NULL) {
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <mbedtls_cipher_get_block_size+0x14>
        return 0;
 8006488:	2300      	movs	r3, #0
 800648a:	e005      	b.n	8006498 <mbedtls_cipher_get_block_size+0x20>
    }

    return (unsigned int) ctx->MBEDTLS_PRIVATE(cipher_info)->MBEDTLS_PRIVATE(block_size);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	791b      	ldrb	r3, [r3, #4]
 8006492:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006496:	b2db      	uxtb	r3, r3
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <mbedtls_cipher_get_base>:

static int supported_init = 0;

static inline const mbedtls_cipher_base_t *mbedtls_cipher_get_base(
    const mbedtls_cipher_info_t *info)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
    return mbedtls_cipher_base_lookup_table[info->base_idx];
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	79db      	ldrb	r3, [r3, #7]
 80064b0:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	4b04      	ldr	r3, [pc, #16]	; (80064cc <mbedtls_cipher_get_base+0x28>)
 80064ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	20000004 	.word	0x20000004

080064d0 <mbedtls_cipher_info_from_type>:
    return mbedtls_cipher_supported;
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type(
    const mbedtls_cipher_type_t cipher_type)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	4603      	mov	r3, r0
 80064d8:	71fb      	strb	r3, [r7, #7]
    const mbedtls_cipher_definition_t *def;

    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 80064da:	4b0c      	ldr	r3, [pc, #48]	; (800650c <mbedtls_cipher_info_from_type+0x3c>)
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	e00a      	b.n	80064f6 <mbedtls_cipher_info_from_type+0x26>
        if (def->type == cipher_type) {
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	79fa      	ldrb	r2, [r7, #7]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d102      	bne.n	80064f0 <mbedtls_cipher_info_from_type+0x20>
            return def->info;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	e007      	b.n	8006500 <mbedtls_cipher_info_from_type+0x30>
    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3308      	adds	r3, #8
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1f0      	bne.n	80064e0 <mbedtls_cipher_info_from_type+0x10>
        }
    }

    return NULL;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	0800e77c 	.word	0x0800e77c

08006510 <mbedtls_cipher_info_from_values>:

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values(
    const mbedtls_cipher_id_t cipher_id,
    int key_bitlen,
    const mbedtls_cipher_mode_t mode)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	6039      	str	r1, [r7, #0]
 800651a:	71fb      	strb	r3, [r7, #7]
 800651c:	4613      	mov	r3, r2
 800651e:	71bb      	strb	r3, [r7, #6]
    const mbedtls_cipher_definition_t *def;

    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 8006520:	4b17      	ldr	r3, [pc, #92]	; (8006580 <mbedtls_cipher_info_from_values+0x70>)
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	e022      	b.n	800656c <mbedtls_cipher_info_from_values+0x5c>
        if (mbedtls_cipher_get_base(def->info)->cipher == cipher_id &&
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff ffba 	bl	80064a4 <mbedtls_cipher_get_base>
 8006530:	4603      	mov	r3, r0
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	79fa      	ldrb	r2, [r7, #7]
 8006536:	429a      	cmp	r2, r3
 8006538:	d115      	bne.n	8006566 <mbedtls_cipher_info_from_values+0x56>
            mbedtls_cipher_info_get_key_bitlen(def->info) == (unsigned) key_bitlen &&
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	4618      	mov	r0, r3
 8006540:	f7ff ff85 	bl	800644e <mbedtls_cipher_info_get_key_bitlen>
 8006544:	4602      	mov	r2, r0
 8006546:	683b      	ldr	r3, [r7, #0]
        if (mbedtls_cipher_get_base(def->info)->cipher == cipher_id &&
 8006548:	429a      	cmp	r2, r3
 800654a:	d10c      	bne.n	8006566 <mbedtls_cipher_info_from_values+0x56>
            def->info->mode == mode) {
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	795b      	ldrb	r3, [r3, #5]
 8006552:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006556:	b2db      	uxtb	r3, r3
 8006558:	461a      	mov	r2, r3
            mbedtls_cipher_info_get_key_bitlen(def->info) == (unsigned) key_bitlen &&
 800655a:	79bb      	ldrb	r3, [r7, #6]
 800655c:	4293      	cmp	r3, r2
 800655e:	d102      	bne.n	8006566 <mbedtls_cipher_info_from_values+0x56>
            return def->info;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	e007      	b.n	8006576 <mbedtls_cipher_info_from_values+0x66>
    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3308      	adds	r3, #8
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1d8      	bne.n	8006526 <mbedtls_cipher_info_from_values+0x16>
        }
    }

    return NULL;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	0800e77c 	.word	0x0800e77c

08006584 <mbedtls_cipher_init>:
    }
}
#endif /* MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_DEPRECATED_REMOVED */

void mbedtls_cipher_init(mbedtls_cipher_context_t *ctx)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_cipher_context_t));
 800658c:	2244      	movs	r2, #68	; 0x44
 800658e:	2100      	movs	r1, #0
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f006 fb5d 	bl	800cc50 <memset>
}
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <mbedtls_cipher_free>:

void mbedtls_cipher_free(mbedtls_cipher_context_t *ctx)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01d      	beq.n	80065e8 <mbedtls_cipher_free+0x4a>
        return;
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_DEPRECATED_REMOVED */

#if defined(MBEDTLS_CMAC_C)
    if (ctx->cmac_ctx) {
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <mbedtls_cipher_free+0x22>
        mbedtls_zeroize_and_free(ctx->cmac_ctx,
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	2124      	movs	r1, #36	; 0x24
 80065ba:	4618      	mov	r0, r3
 80065bc:	f003 ff6e 	bl	800a49c <mbedtls_zeroize_and_free>
                                 sizeof(mbedtls_cmac_context_t));
    }
#endif

    if (ctx->cipher_ctx) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <mbedtls_cipher_free+0x40>
        mbedtls_cipher_get_base(ctx->cipher_info)->ctx_free_func(ctx->cipher_ctx);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff ff69 	bl	80064a4 <mbedtls_cipher_get_base>
 80065d2:	4603      	mov	r3, r0
 80065d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80065da:	4610      	mov	r0, r2
 80065dc:	4798      	blx	r3
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_cipher_context_t));
 80065de:	2144      	movs	r1, #68	; 0x44
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f003 ff37 	bl	800a454 <mbedtls_platform_zeroize>
 80065e6:	e000      	b.n	80065ea <mbedtls_cipher_free+0x4c>
        return;
 80065e8:	bf00      	nop
}
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup(mbedtls_cipher_context_t *ctx,
                         const mbedtls_cipher_info_t *cipher_info)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
    if (cipher_info == NULL) {
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <mbedtls_cipher_setup+0x14>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8006600:	4b12      	ldr	r3, [pc, #72]	; (800664c <mbedtls_cipher_setup+0x5c>)
 8006602:	e01e      	b.n	8006642 <mbedtls_cipher_setup+0x52>
    }

    memset(ctx, 0, sizeof(mbedtls_cipher_context_t));
 8006604:	2244      	movs	r2, #68	; 0x44
 8006606:	2100      	movs	r1, #0
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f006 fb21 	bl	800cc50 <memset>

    if (mbedtls_cipher_get_base(cipher_info)->ctx_alloc_func != NULL) {
 800660e:	6838      	ldr	r0, [r7, #0]
 8006610:	f7ff ff48 	bl	80064a4 <mbedtls_cipher_get_base>
 8006614:	4603      	mov	r3, r0
 8006616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00e      	beq.n	800663a <mbedtls_cipher_setup+0x4a>
        ctx->cipher_ctx = mbedtls_cipher_get_base(cipher_info)->ctx_alloc_func();
 800661c:	6838      	ldr	r0, [r7, #0]
 800661e:	f7ff ff41 	bl	80064a4 <mbedtls_cipher_get_base>
 8006622:	4603      	mov	r3, r0
 8006624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006626:	4798      	blx	r3
 8006628:	4602      	mov	r2, r0
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	63da      	str	r2, [r3, #60]	; 0x3c
        if (ctx->cipher_ctx == NULL) {
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <mbedtls_cipher_setup+0x4a>
            return MBEDTLS_ERR_CIPHER_ALLOC_FAILED;
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <mbedtls_cipher_setup+0x60>)
 8006638:	e003      	b.n	8006642 <mbedtls_cipher_setup+0x52>
        }
    }

    ctx->cipher_info = cipher_info;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	601a      	str	r2, [r3, #0]

    return 0;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	ffff9f00 	.word	0xffff9f00
 8006650:	ffff9e80 	.word	0xffff9e80

08006654 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey(mbedtls_cipher_context_t *ctx,
                          const unsigned char *key,
                          int key_bitlen,
                          const mbedtls_operation_t operation)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	70fb      	strb	r3, [r7, #3]
    if (operation != MBEDTLS_ENCRYPT && operation != MBEDTLS_DECRYPT) {
 8006662:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d005      	beq.n	8006676 <mbedtls_cipher_setkey+0x22>
 800666a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <mbedtls_cipher_setkey+0x22>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8006672:	4b33      	ldr	r3, [pc, #204]	; (8006740 <mbedtls_cipher_setkey+0xec>)
 8006674:	e060      	b.n	8006738 <mbedtls_cipher_setkey+0xe4>
    }
    if (ctx->cipher_info == NULL) {
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <mbedtls_cipher_setkey+0x2e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800667e:	4b30      	ldr	r3, [pc, #192]	; (8006740 <mbedtls_cipher_setkey+0xec>)
 8006680:	e05a      	b.n	8006738 <mbedtls_cipher_setkey+0xe4>
        ctx->operation = operation;
        return 0;
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_DEPRECATED_REMOVED */

    if ((ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN) == 0 &&
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	79db      	ldrb	r3, [r3, #7]
 8006688:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800668c:	b2db      	uxtb	r3, r3
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10b      	bne.n	80066ae <mbedtls_cipher_setkey+0x5a>
        (int) mbedtls_cipher_info_get_key_bitlen(ctx->cipher_info) != key_bitlen) {
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff fed7 	bl	800644e <mbedtls_cipher_info_get_key_bitlen>
 80066a0:	4603      	mov	r3, r0
 80066a2:	461a      	mov	r2, r3
    if ((ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN) == 0 &&
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d001      	beq.n	80066ae <mbedtls_cipher_setkey+0x5a>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 80066aa:	4b25      	ldr	r3, [pc, #148]	; (8006740 <mbedtls_cipher_setkey+0xec>)
 80066ac:	e044      	b.n	8006738 <mbedtls_cipher_setkey+0xe4>
    }

    ctx->key_bitlen = key_bitlen;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	605a      	str	r2, [r3, #4]
    ctx->operation = operation;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	721a      	strb	r2, [r3, #8]

#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if (MBEDTLS_ENCRYPT == operation ||
 80066ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d017      	beq.n	80066f2 <mbedtls_cipher_setkey+0x9e>
        MBEDTLS_MODE_CFB == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode) ||
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	795b      	ldrb	r3, [r3, #5]
 80066c8:	f023 030f 	bic.w	r3, r3, #15
 80066cc:	b2db      	uxtb	r3, r3
    if (MBEDTLS_ENCRYPT == operation ||
 80066ce:	2b30      	cmp	r3, #48	; 0x30
 80066d0:	d00f      	beq.n	80066f2 <mbedtls_cipher_setkey+0x9e>
        MBEDTLS_MODE_OFB == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode) ||
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	795b      	ldrb	r3, [r3, #5]
 80066d8:	f023 030f 	bic.w	r3, r3, #15
 80066dc:	b2db      	uxtb	r3, r3
        MBEDTLS_MODE_CFB == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode) ||
 80066de:	2b40      	cmp	r3, #64	; 0x40
 80066e0:	d007      	beq.n	80066f2 <mbedtls_cipher_setkey+0x9e>
        MBEDTLS_MODE_CTR == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode)) {
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	795b      	ldrb	r3, [r3, #5]
 80066e8:	f023 030f 	bic.w	r3, r3, #15
 80066ec:	b2db      	uxtb	r3, r3
        MBEDTLS_MODE_OFB == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode) ||
 80066ee:	2b50      	cmp	r3, #80	; 0x50
 80066f0:	d10e      	bne.n	8006710 <mbedtls_cipher_setkey+0xbc>
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_enc_func(ctx->cipher_ctx, key,
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fed4 	bl	80064a4 <mbedtls_cipher_get_base>
 80066fc:	4603      	mov	r3, r0
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                                                                          ctx->key_bitlen);
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	6852      	ldr	r2, [r2, #4]
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_enc_func(ctx->cipher_ctx, key,
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	4798      	blx	r3
 800670c:	4603      	mov	r3, r0
 800670e:	e013      	b.n	8006738 <mbedtls_cipher_setkey+0xe4>
    }

    if (MBEDTLS_DECRYPT == operation) {
 8006710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10e      	bne.n	8006736 <mbedtls_cipher_setkey+0xe2>
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_dec_func(ctx->cipher_ctx, key,
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff fec1 	bl	80064a4 <mbedtls_cipher_get_base>
 8006722:	4603      	mov	r3, r0
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                                                                          ctx->key_bitlen);
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	6852      	ldr	r2, [r2, #4]
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_dec_func(ctx->cipher_ctx, key,
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	4798      	blx	r3
 8006732:	4603      	mov	r3, r0
 8006734:	e000      	b.n	8006738 <mbedtls_cipher_setkey+0xe4>
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_enc_func(ctx->cipher_ctx, key,
                                                                          ctx->key_bitlen);
    }
#endif

    return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8006736:	4b02      	ldr	r3, [pc, #8]	; (8006740 <mbedtls_cipher_setkey+0xec>)
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	ffff9f00 	.word	0xffff9f00

08006744 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update(mbedtls_cipher_context_t *ctx, const unsigned char *input,
                          size_t ilen, unsigned char *output, size_t *olen)
{
 8006744:	b5b0      	push	{r4, r5, r7, lr}
 8006746:	b08c      	sub	sp, #48	; 0x30
 8006748:	af04      	add	r7, sp, #16
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8006752:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8006756:	61bb      	str	r3, [r7, #24]
    size_t block_size;

    if (ctx->cipher_info == NULL) {
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <mbedtls_cipher_update+0x20>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8006760:	4b7f      	ldr	r3, [pc, #508]	; (8006960 <mbedtls_cipher_update+0x21c>)
 8006762:	e241      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
         * accessible through the cipher layer. */
        return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_DEPRECATED_REMOVED */

    *olen = 0;
 8006764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006766:	2200      	movs	r2, #0
 8006768:	601a      	str	r2, [r3, #0]
    block_size = mbedtls_cipher_get_block_size(ctx);
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7ff fe84 	bl	8006478 <mbedtls_cipher_get_block_size>
 8006770:	6178      	str	r0, [r7, #20]
    if (0 == block_size) {
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <mbedtls_cipher_update+0x38>
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 8006778:	4b7a      	ldr	r3, [pc, #488]	; (8006964 <mbedtls_cipher_update+0x220>)
 800677a:	e235      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
    }

    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_ECB) {
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	795b      	ldrb	r3, [r3, #5]
 8006782:	f023 030f 	bic.w	r3, r3, #15
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b10      	cmp	r3, #16
 800678a:	d11f      	bne.n	80067cc <mbedtls_cipher_update+0x88>
        if (ilen != block_size) {
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	429a      	cmp	r2, r3
 8006792:	d001      	beq.n	8006798 <mbedtls_cipher_update+0x54>
            return MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED;
 8006794:	4b74      	ldr	r3, [pc, #464]	; (8006968 <mbedtls_cipher_update+0x224>)
 8006796:	e227      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	601a      	str	r2, [r3, #0]

        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ecb_func(ctx->cipher_ctx,
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff fe7e 	bl	80064a4 <mbedtls_cipher_get_base>
 80067a8:	4603      	mov	r3, r0
 80067aa:	685c      	ldr	r4, [r3, #4]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f993 1008 	ldrsb.w	r1, [r3, #8]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	47a0      	blx	r4
 80067bc:	61b8      	str	r0, [r7, #24]
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <mbedtls_cipher_update+0x84>
                                                                            ctx->operation, input,
                                                                            output))) {
            return ret;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	e20f      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
        }

        return 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	e20d      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
    }

#if defined(MBEDTLS_GCM_C)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_GCM) {
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	795b      	ldrb	r3, [r3, #5]
 80067d2:	f023 030f 	bic.w	r3, r3, #15
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b60      	cmp	r3, #96	; 0x60
 80067da:	d10c      	bne.n	80067f6 <mbedtls_cipher_update+0xb2>
        return mbedtls_gcm_update((mbedtls_gcm_context *) ctx->cipher_ctx,
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	9301      	str	r3, [sp, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	f003 fc61 	bl	800a0b4 <mbedtls_gcm_update>
 80067f2:	4603      	mov	r3, r0
 80067f4:	e1f8      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
                                  output, ilen, olen);
    }
#endif

#if defined(MBEDTLS_CCM_C)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_CCM_STAR_NO_TAG) {
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	795b      	ldrb	r3, [r3, #5]
 80067fc:	f023 030f 	bic.w	r3, r3, #15
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b90      	cmp	r3, #144	; 0x90
 8006804:	d10c      	bne.n	8006820 <mbedtls_cipher_update+0xdc>
        return mbedtls_ccm_update((mbedtls_ccm_context *) ctx->cipher_ctx,
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	9301      	str	r3, [sp, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	f7ff f828 	bl	800586c <mbedtls_ccm_update>
 800681c:	4603      	mov	r3, r0
 800681e:	e1e3      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
                                  output, ilen, olen);
    }
#endif

#if defined(MBEDTLS_CHACHAPOLY_C)
    if (((mbedtls_cipher_type_t) ctx->cipher_info->type) == MBEDTLS_CIPHER_CHACHA20_POLY1305) {
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	799b      	ldrb	r3, [r3, #6]
 8006826:	2b4d      	cmp	r3, #77	; 0x4d
 8006828:	d10b      	bne.n	8006842 <mbedtls_cipher_update+0xfe>
        *olen = ilen;
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	601a      	str	r2, [r3, #0]
        return mbedtls_chachapoly_update((mbedtls_chachapoly_context *) ctx->cipher_ctx,
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	f7ff fd93 	bl	8006364 <mbedtls_chachapoly_update>
 800683e:	4603      	mov	r3, r0
 8006840:	e1d2      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
                                         ilen, input, output);
    }
#endif

    if (input == output &&
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d10f      	bne.n	800686a <mbedtls_cipher_update+0x126>
        (ctx->unprocessed_len != 0 || ilen % block_size)) {
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (input == output &&
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <mbedtls_cipher_update+0x122>
        (ctx->unprocessed_len != 0 || ilen % block_size)) {
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	fbb3 f2f2 	udiv	r2, r3, r2
 800685a:	6979      	ldr	r1, [r7, #20]
 800685c:	fb01 f202 	mul.w	r2, r1, r2
 8006860:	1a9b      	subs	r3, r3, r2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <mbedtls_cipher_update+0x126>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8006866:	4b3e      	ldr	r3, [pc, #248]	; (8006960 <mbedtls_cipher_update+0x21c>)
 8006868:	e1be      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_CBC) {
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	795b      	ldrb	r3, [r3, #5]
 8006870:	f023 030f 	bic.w	r3, r3, #15
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b20      	cmp	r3, #32
 8006878:	f040 80e4 	bne.w	8006a44 <mbedtls_cipher_update+0x300>
        size_t copy_len = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	61fb      	str	r3, [r7, #28]

        /*
         * If there is not enough data for a full block, cache it.
         */
        if ((ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <mbedtls_cipher_update+0x15c>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d006      	beq.n	80068a0 <mbedtls_cipher_update+0x15c>
             ilen <= block_size - ctx->unprocessed_len) ||
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	1ad3      	subs	r3, r2, r3
        if ((ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	429a      	cmp	r2, r3
 800689e:	d91b      	bls.n	80068d8 <mbedtls_cipher_update+0x194>
            (ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f993 3008 	ldrsb.w	r3, [r3, #8]
             ilen <= block_size - ctx->unprocessed_len) ||
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10a      	bne.n	80068c0 <mbedtls_cipher_update+0x17c>
            (ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <mbedtls_cipher_update+0x17c>
             ilen < block_size - ctx->unprocessed_len) ||
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	1ad3      	subs	r3, r2, r3
            (ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d30b      	bcc.n	80068d8 <mbedtls_cipher_update+0x194>
            (ctx->operation == MBEDTLS_ENCRYPT &&
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f993 3008 	ldrsb.w	r3, [r3, #8]
             ilen < block_size - ctx->unprocessed_len) ||
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d119      	bne.n	80068fe <mbedtls_cipher_update+0x1ba>
             ilen < block_size - ctx->unprocessed_len)) {
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	1ad3      	subs	r3, r2, r3
            (ctx->operation == MBEDTLS_ENCRYPT &&
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d212      	bcs.n	80068fe <mbedtls_cipher_update+0x1ba>
            memcpy(&(ctx->unprocessed_data[ctx->unprocessed_len]), input,
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	3310      	adds	r3, #16
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	3304      	adds	r3, #4
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f006 fa3c 	bl	800cd66 <memcpy>
                   ilen);

            ctx->unprocessed_len += ilen;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	441a      	add	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	625a      	str	r2, [r3, #36]	; 0x24
            return 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	e174      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
        }

        /*
         * Process cached data first
         */
        if (0 != ctx->unprocessed_len) {
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	2b00      	cmp	r3, #0
 8006904:	d047      	beq.n	8006996 <mbedtls_cipher_update+0x252>
            copy_len = block_size - ctx->unprocessed_len;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	61fb      	str	r3, [r7, #28]

            memcpy(&(ctx->unprocessed_data[ctx->unprocessed_len]), input,
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	3310      	adds	r3, #16
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	3304      	adds	r3, #4
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	4618      	mov	r0, r3
 8006922:	f006 fa20 	bl	800cd66 <memcpy>
                   copy_len);

            if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cbc_func(ctx->cipher_ctx,
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f7ff fdba 	bl	80064a4 <mbedtls_cipher_get_base>
 8006930:	4603      	mov	r3, r0
 8006932:	689c      	ldr	r4, [r3, #8]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                                                ctx->operation,
                                                                                block_size, ctx->iv,
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f103 0528 	add.w	r5, r3, #40	; 0x28
                                                                                ctx->
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3314      	adds	r3, #20
            if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cbc_func(ctx->cipher_ctx,
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	9201      	str	r2, [sp, #4]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	462b      	mov	r3, r5
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	47a0      	blx	r4
 8006954:	61b8      	str	r0, [r7, #24]
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d007      	beq.n	800696c <mbedtls_cipher_update+0x228>
                                                                                unprocessed_data,
                                                                                output))) {
                return ret;
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	e143      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
 8006960:	ffff9f00 	.word	0xffff9f00
 8006964:	ffff9c80 	.word	0xffff9c80
 8006968:	ffff9d80 	.word	0xffff9d80
            }

            *olen += block_size;
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	441a      	add	r2, r3
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	601a      	str	r2, [r3, #0]
            output += block_size;
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	4413      	add	r3, r2
 800697e:	603b      	str	r3, [r7, #0]
            ctx->unprocessed_len = 0;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	625a      	str	r2, [r3, #36]	; 0x24

            input += copy_len;
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	60bb      	str	r3, [r7, #8]
            ilen -= copy_len;
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	607b      	str	r3, [r7, #4]
        }

        /*
         * Cache final, incomplete block
         */
        if (0 != ilen) {
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d02c      	beq.n	80069f6 <mbedtls_cipher_update+0x2b2>
            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80069a4:	6979      	ldr	r1, [r7, #20]
 80069a6:	fb01 f202 	mul.w	r2, r1, r2
 80069aa:	1a9b      	subs	r3, r3, r2
 80069ac:	61fb      	str	r3, [r7, #28]
            if (copy_len == 0 &&
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <mbedtls_cipher_update+0x286>
                ctx->operation == MBEDTLS_DECRYPT &&
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
            if (copy_len == 0 &&
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d105      	bne.n	80069ca <mbedtls_cipher_update+0x286>
                NULL != ctx->add_padding) {
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	68db      	ldr	r3, [r3, #12]
                ctx->operation == MBEDTLS_DECRYPT &&
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <mbedtls_cipher_update+0x286>
                copy_len = block_size;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	61fb      	str	r3, [r7, #28]
            }

            memcpy(ctx->unprocessed_data, &(input[ilen - copy_len]),
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f103 0014 	add.w	r0, r3, #20
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	4413      	add	r3, r2
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	4619      	mov	r1, r3
 80069de:	f006 f9c2 	bl	800cd66 <memcpy>
                   copy_len);

            ctx->unprocessed_len += copy_len;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	441a      	add	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	625a      	str	r2, [r3, #36]	; 0x24
            ilen -= copy_len;
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	607b      	str	r3, [r7, #4]
        }

        /*
         * Process remaining full blocks
         */
        if (ilen) {
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d021      	beq.n	8006a40 <mbedtls_cipher_update+0x2fc>
            if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cbc_func(ctx->cipher_ctx,
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fd4f 	bl	80064a4 <mbedtls_cipher_get_base>
 8006a06:	4603      	mov	r3, r0
 8006a08:	689c      	ldr	r4, [r3, #8]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                                                ctx->operation,
                                                                                ilen, ctx->iv,
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f103 0228 	add.w	r2, r3, #40	; 0x28
            if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cbc_func(ctx->cipher_ctx,
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	4613      	mov	r3, r2
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	47a0      	blx	r4
 8006a28:	61b8      	str	r0, [r7, #24]
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <mbedtls_cipher_update+0x2f0>
                                                                                input,
                                                                                output))) {
                return ret;
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	e0d9      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
            }

            *olen += ilen;
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	441a      	add	r2, r3
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	601a      	str	r2, [r3, #0]
        }

        return 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	e0d1      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

#if defined(MBEDTLS_CIPHER_MODE_CFB)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_CFB) {
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	795b      	ldrb	r3, [r3, #5]
 8006a4a:	f023 030f 	bic.w	r3, r3, #15
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b30      	cmp	r3, #48	; 0x30
 8006a52:	d123      	bne.n	8006a9c <mbedtls_cipher_update+0x358>
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cfb_func(ctx->cipher_ctx,
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff fd23 	bl	80064a4 <mbedtls_cipher_get_base>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	68dc      	ldr	r4, [r3, #12]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f993 1008 	ldrsb.w	r1, [r3, #8]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f103 0524 	add.w	r5, r3, #36	; 0x24
                                                                            ctx->operation, ilen,
                                                                            &ctx->unprocessed_len,
                                                                            ctx->iv,
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3328      	adds	r3, #40	; 0x28
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cfb_func(ctx->cipher_ctx,
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	9202      	str	r2, [sp, #8]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	9201      	str	r2, [sp, #4]
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	462b      	mov	r3, r5
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	47a0      	blx	r4
 8006a86:	61b8      	str	r0, [r7, #24]
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <mbedtls_cipher_update+0x34e>
                                                                            input, output))) {
            return ret;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	e0aa      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	601a      	str	r2, [r3, #0]

        return 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e0a5      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_OFB) {
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	795b      	ldrb	r3, [r3, #5]
 8006aa2:	f023 030f 	bic.w	r3, r3, #15
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	d120      	bne.n	8006aee <mbedtls_cipher_update+0x3aa>
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ofb_func(ctx->cipher_ctx,
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff fcf7 	bl	80064a4 <mbedtls_cipher_get_base>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	691c      	ldr	r4, [r3, #16]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f103 0224 	add.w	r2, r3, #36	; 0x24
                                                                            ilen,
                                                                            &ctx->unprocessed_len,
                                                                            ctx->iv,
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f103 0128 	add.w	r1, r3, #40	; 0x28
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ofb_func(ctx->cipher_ctx,
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	47a0      	blx	r4
 8006ad8:	61b8      	str	r0, [r7, #24]
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <mbedtls_cipher_update+0x3a0>
                                                                            input, output))) {
            return ret;
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	e081      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	601a      	str	r2, [r3, #0]

        return 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	e07c      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_OFB */

#if defined(MBEDTLS_CIPHER_MODE_CTR)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_CTR) {
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	795b      	ldrb	r3, [r3, #5]
 8006af4:	f023 030f 	bic.w	r3, r3, #15
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b50      	cmp	r3, #80	; 0x50
 8006afc:	d124      	bne.n	8006b48 <mbedtls_cipher_update+0x404>
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ctr_func(ctx->cipher_ctx,
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff fcce 	bl	80064a4 <mbedtls_cipher_get_base>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	695c      	ldr	r4, [r3, #20]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f103 0124 	add.w	r1, r3, #36	; 0x24
                                                                            ilen,
                                                                            &ctx->unprocessed_len,
                                                                            ctx->iv,
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f103 0528 	add.w	r5, r3, #40	; 0x28
                                                                            ctx->unprocessed_data,
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	3314      	adds	r3, #20
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ctr_func(ctx->cipher_ctx,
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	9202      	str	r2, [sp, #8]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	9201      	str	r2, [sp, #4]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	462b      	mov	r3, r5
 8006b2c:	460a      	mov	r2, r1
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	47a0      	blx	r4
 8006b32:	61b8      	str	r0, [r7, #24]
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <mbedtls_cipher_update+0x3fa>
                                                                            input, output))) {
            return ret;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	e054      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	601a      	str	r2, [r3, #0]

        return 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	e04f      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_XTS) {
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	795b      	ldrb	r3, [r3, #5]
 8006b4e:	f023 030f 	bic.w	r3, r3, #15
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2ba0      	cmp	r3, #160	; 0xa0
 8006b56:	d126      	bne.n	8006ba6 <mbedtls_cipher_update+0x462>
        if (ctx->unprocessed_len > 0) {
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <mbedtls_cipher_update+0x420>
            /* We can only process an entire data unit at a time. */
            return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
 8006b60:	4b23      	ldr	r3, [pc, #140]	; (8006bf0 <mbedtls_cipher_update+0x4ac>)
 8006b62:	e041      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
        }

        ret = mbedtls_cipher_get_base(ctx->cipher_info)->xts_func(ctx->cipher_ctx,
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff fc9b 	bl	80064a4 <mbedtls_cipher_get_base>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	699c      	ldr	r4, [r3, #24]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                                  ctx->operation,
                                                                  ilen,
                                                                  ctx->iv,
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f103 0228 	add.w	r2, r3, #40	; 0x28
        ret = mbedtls_cipher_get_base(ctx->cipher_info)->xts_func(ctx->cipher_ctx,
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	9301      	str	r3, [sp, #4]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	47a0      	blx	r4
 8006b90:	61b8      	str	r0, [r7, #24]
                                                                  input,
                                                                  output);
        if (ret != 0) {
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <mbedtls_cipher_update+0x458>
            return ret;
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	e025      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]

        return 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e020      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_CIPHER_MODE_STREAM)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_STREAM) {
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	795b      	ldrb	r3, [r3, #5]
 8006bac:	f023 030f 	bic.w	r3, r3, #15
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b70      	cmp	r3, #112	; 0x70
 8006bb4:	d117      	bne.n	8006be6 <mbedtls_cipher_update+0x4a2>
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->stream_func(ctx->cipher_ctx,
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fc72 	bl	80064a4 <mbedtls_cipher_get_base>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	69dc      	ldr	r4, [r3, #28]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	6879      	ldr	r1, [r7, #4]
 8006bce:	47a0      	blx	r4
 8006bd0:	61b8      	str	r0, [r7, #24]
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <mbedtls_cipher_update+0x498>
                                                                               ilen, input,
                                                                               output))) {
            return ret;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	e005      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	601a      	str	r2, [r3, #0]

        return 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
 8006be6:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <mbedtls_cipher_update+0x4ac>)
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3720      	adds	r7, #32
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bdb0      	pop	{r4, r5, r7, pc}
 8006bf0:	ffff9f80 	.word	0xffff9f80

08006bf4 <gcm_ctx_alloc>:
#if defined(MBEDTLS_GCM_C) && \
    (defined(MBEDTLS_CIPHER_HAVE_GCM_AES_VIA_LEGACY_OR_USE_PSA) || \
    defined(MBEDTLS_ARIA_C) || defined(MBEDTLS_CAMELLIA_C))
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc(1, sizeof(mbedtls_gcm_context));
 8006bfa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006bfe:	2001      	movs	r0, #1
 8006c00:	f005 fcb0 	bl	800c564 <calloc>
 8006c04:	4603      	mov	r3, r0
 8006c06:	607b      	str	r3, [r7, #4]

    if (ctx != NULL) {
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <gcm_ctx_alloc+0x20>
        mbedtls_gcm_init((mbedtls_gcm_context *) ctx);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f002 fc48 	bl	80094a4 <mbedtls_gcm_init>
    }

    return ctx;
 8006c14:	687b      	ldr	r3, [r7, #4]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <gcm_ctx_free>:

static void gcm_ctx_free(void *ctx)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
    mbedtls_gcm_free(ctx);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f003 fb7c 	bl	800a324 <mbedtls_gcm_free>
    mbedtls_free(ctx);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f005 fcb7 	bl	800c5a0 <free>
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <ccm_ctx_alloc>:
#if defined(MBEDTLS_CCM_C) && \
    (defined(MBEDTLS_CIPHER_HAVE_CCM_AES_VIA_LEGACY_OR_USE_PSA) || \
    defined(MBEDTLS_ARIA_C) || defined(MBEDTLS_CAMELLIA_C))
/* shared by all CCM ciphers */
static void *ccm_ctx_alloc(void)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc(1, sizeof(mbedtls_ccm_context));
 8006c40:	2180      	movs	r1, #128	; 0x80
 8006c42:	2001      	movs	r0, #1
 8006c44:	f005 fc8e 	bl	800c564 <calloc>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	607b      	str	r3, [r7, #4]

    if (ctx != NULL) {
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <ccm_ctx_alloc+0x1e>
        mbedtls_ccm_init((mbedtls_ccm_context *) ctx);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7fe fd1a 	bl	800568c <mbedtls_ccm_init>
    }

    return ctx;
 8006c58:	687b      	ldr	r3, [r7, #4]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <ccm_ctx_free>:

static void ccm_ctx_free(void *ctx)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b082      	sub	sp, #8
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
    mbedtls_ccm_free(ctx);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fe fd60 	bl	8005730 <mbedtls_ccm_free>
    mbedtls_free(ctx);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f005 fc95 	bl	800c5a0 <free>
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                              const unsigned char *input, unsigned char *output)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_ecb((mbedtls_aes_context *) ctx, operation, input, output);
 8006c8e:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7fb fbde 	bl	8002458 <mbedtls_aes_crypt_ecb>
 8006c9c:	4603      	mov	r3, r0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <aes_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
                              unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af02      	add	r7, sp, #8
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cbc((mbedtls_aes_context *) ctx, operation, length, iv, input,
 8006cb6:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7fb fbea 	bl	80024a0 <mbedtls_aes_crypt_cbc>
 8006ccc:	4603      	mov	r3, r0
                                 output);
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <aes_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int aes_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
                                 size_t length, size_t *iv_off, unsigned char *iv,
                                 const unsigned char *input, unsigned char *output)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b088      	sub	sp, #32
 8006cda:	af04      	add	r7, sp, #16
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cfb128((mbedtls_aes_context *) ctx, operation, length, iv_off, iv,
 8006ce6:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	9302      	str	r3, [sp, #8]
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7fc f930 	bl	8002f60 <mbedtls_aes_crypt_cfb128>
 8006d00:	4603      	mov	r3, r0
                                    input, output);
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <aes_crypt_ofb_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
static int aes_crypt_ofb_wrap(void *ctx, size_t length, size_t *iv_off,
                              unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b086      	sub	sp, #24
 8006d0e:	af02      	add	r7, sp, #8
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	607a      	str	r2, [r7, #4]
 8006d16:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ofb((mbedtls_aes_context *) ctx, length, iv_off,
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	9301      	str	r3, [sp, #4]
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	68b9      	ldr	r1, [r7, #8]
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f7fc f9a3 	bl	8003072 <mbedtls_aes_crypt_ofb>
 8006d2c:	4603      	mov	r3, r0
                                 iv, input, output);
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <aes_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int aes_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
                              unsigned char *nonce_counter, unsigned char *stream_block,
                              const unsigned char *input, unsigned char *output)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b088      	sub	sp, #32
 8006d3a:	af04      	add	r7, sp, #16
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	607a      	str	r2, [r7, #4]
 8006d42:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ctr((mbedtls_aes_context *) ctx, length, nc_off, nonce_counter,
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	9302      	str	r3, [sp, #8]
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	68b9      	ldr	r1, [r7, #8]
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7fc f9cc 	bl	80030f4 <mbedtls_aes_crypt_ctr>
 8006d5c:	4603      	mov	r3, r0
                                 stream_block, input, output);
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <aes_crypt_xts_wrap>:
static int aes_crypt_xts_wrap(void *ctx, mbedtls_operation_t operation,
                              size_t length,
                              const unsigned char data_unit[16],
                              const unsigned char *input,
                              unsigned char *output)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	460b      	mov	r3, r1
 8006d76:	72fb      	strb	r3, [r7, #11]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	613b      	str	r3, [r7, #16]
    int mode;

    switch (operation) {
 8006d7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <aes_crypt_xts_wrap+0x26>
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d105      	bne.n	8006d94 <aes_crypt_xts_wrap+0x2c>
        case MBEDTLS_ENCRYPT:
            mode = MBEDTLS_AES_ENCRYPT;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	617b      	str	r3, [r7, #20]
            break;
 8006d8c:	e004      	b.n	8006d98 <aes_crypt_xts_wrap+0x30>
        case MBEDTLS_DECRYPT:
            mode = MBEDTLS_AES_DECRYPT;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]
            break;
 8006d92:	e001      	b.n	8006d98 <aes_crypt_xts_wrap+0x30>
        default:
            return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8006d94:	4b08      	ldr	r3, [pc, #32]	; (8006db8 <aes_crypt_xts_wrap+0x50>)
 8006d96:	e00a      	b.n	8006dae <aes_crypt_xts_wrap+0x46>
    }

    return mbedtls_aes_crypt_xts(xts_ctx, mode, length,
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6979      	ldr	r1, [r7, #20]
 8006da6:	6938      	ldr	r0, [r7, #16]
 8006da8:	f7fb fd17 	bl	80027da <mbedtls_aes_crypt_xts>
 8006dac:	4603      	mov	r3, r0
                                 data_unit, input, output);
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	ffff9f00 	.word	0xffff9f00

08006dbc <aes_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
static int aes_setkey_dec_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_dec((mbedtls_aes_context *) ctx, key, key_bitlen);
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7fa fbad 	bl	800152c <mbedtls_aes_setkey_dec>
 8006dd2:	4603      	mov	r3, r0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <aes_setkey_enc_wrap>:
#endif

static int aes_setkey_enc_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_enc((mbedtls_aes_context *) ctx, key, key_bitlen);
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f7fa f9b7 	bl	8001160 <mbedtls_aes_setkey_enc>
 8006df2:	4603      	mov	r3, r0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <aes_ctx_alloc>:

static void *aes_ctx_alloc(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
    mbedtls_aes_context *aes = mbedtls_calloc(1, sizeof(mbedtls_aes_context));
 8006e02:	f44f 718c 	mov.w	r1, #280	; 0x118
 8006e06:	2001      	movs	r0, #1
 8006e08:	f005 fbac 	bl	800c564 <calloc>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	607b      	str	r3, [r7, #4]

    if (aes == NULL) {
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <aes_ctx_alloc+0x1e>
        return NULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e003      	b.n	8006e22 <aes_ctx_alloc+0x26>
    }

    mbedtls_aes_init(aes);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fa f94e 	bl	80010bc <mbedtls_aes_init>

    return aes;
 8006e20:	687b      	ldr	r3, [r7, #4]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <aes_ctx_free>:

static void aes_ctx_free(void *ctx)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b082      	sub	sp, #8
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
    mbedtls_aes_free((mbedtls_aes_context *) ctx);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fa f950 	bl	80010d8 <mbedtls_aes_free>
    mbedtls_free(ctx);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f005 fbb1 	bl	800c5a0 <free>
}
 8006e3e:	bf00      	nop
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <xts_aes_setkey_enc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
static int xts_aes_setkey_enc_wrap(void *ctx, const unsigned char *key,
                                   unsigned int key_bitlen)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b086      	sub	sp, #24
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	617b      	str	r3, [r7, #20]
    return mbedtls_aes_xts_setkey_enc(xts_ctx, key, key_bitlen);
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	68b9      	ldr	r1, [r7, #8]
 8006e5a:	6978      	ldr	r0, [r7, #20]
 8006e5c:	f7fa fce2 	bl	8001824 <mbedtls_aes_xts_setkey_enc>
 8006e60:	4603      	mov	r3, r0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <xts_aes_setkey_dec_wrap>:

static int xts_aes_setkey_dec_wrap(void *ctx, const unsigned char *key,
                                   unsigned int key_bitlen)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	617b      	str	r3, [r7, #20]
    return mbedtls_aes_xts_setkey_dec(xts_ctx, key, key_bitlen);
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	6978      	ldr	r0, [r7, #20]
 8006e80:	f7fa fd07 	bl	8001892 <mbedtls_aes_xts_setkey_dec>
 8006e84:	4603      	mov	r3, r0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <xts_aes_ctx_alloc>:

static void *xts_aes_ctx_alloc(void)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
    mbedtls_aes_xts_context *xts_ctx = mbedtls_calloc(1, sizeof(*xts_ctx));
 8006e94:	f44f 710c 	mov.w	r1, #560	; 0x230
 8006e98:	2001      	movs	r0, #1
 8006e9a:	f005 fb63 	bl	800c564 <calloc>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	607b      	str	r3, [r7, #4]

    if (xts_ctx != NULL) {
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <xts_aes_ctx_alloc+0x20>
        mbedtls_aes_xts_init(xts_ctx);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7fa f926 	bl	80010fa <mbedtls_aes_xts_init>
    }

    return xts_ctx;
 8006eae:	687b      	ldr	r3, [r7, #4]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <xts_aes_ctx_free>:

static void xts_aes_ctx_free(void *ctx)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60fb      	str	r3, [r7, #12]

    if (xts_ctx == NULL) {
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d006      	beq.n	8006ed8 <xts_aes_ctx_free+0x20>
        return;
    }

    mbedtls_aes_xts_free(xts_ctx);
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f7fa f927 	bl	800111e <mbedtls_aes_xts_free>
    mbedtls_free(xts_ctx);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f005 fb65 	bl	800c5a0 <free>
 8006ed6:	e000      	b.n	8006eda <xts_aes_ctx_free+0x22>
        return;
 8006ed8:	bf00      	nop
}
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_AES_C */

#if defined(MBEDTLS_GCM_C) && defined(MBEDTLS_CCM_GCM_CAN_AES)
static int gcm_aes_setkey_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	2102      	movs	r1, #2
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f002 fc6e 	bl	80097d4 <mbedtls_gcm_setkey>
 8006ef8:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <ccm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_HAVE_GCM_AES_VIA_LEGACY_OR_USE_PSA */

#if defined(MBEDTLS_CCM_C) && defined(MBEDTLS_CCM_GCM_CAN_AES)
static int ccm_aes_setkey_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	2102      	movs	r1, #2
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7fe fbc6 	bl	80056a6 <mbedtls_ccm_setkey>
 8006f1a:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <camellia_crypt_ecb_wrap>:

#if defined(MBEDTLS_CAMELLIA_C)

static int camellia_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                                   const unsigned char *input, unsigned char *output)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	607a      	str	r2, [r7, #4]
 8006f2e:	603b      	str	r3, [r7, #0]
 8006f30:	460b      	mov	r3, r1
 8006f32:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_ecb((mbedtls_camellia_context *) ctx, operation, input,
 8006f34:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f7fe f8b1 	bl	80050a4 <mbedtls_camellia_crypt_ecb>
 8006f42:	4603      	mov	r3, r0
                                      output);
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <camellia_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int camellia_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation,
                                   size_t length, unsigned char *iv,
                                   const unsigned char *input, unsigned char *output)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af02      	add	r7, sp, #8
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	607a      	str	r2, [r7, #4]
 8006f56:	603b      	str	r3, [r7, #0]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cbc((mbedtls_camellia_context *) ctx, operation, length, iv,
 8006f5c:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7fe f9b2 	bl	80052d6 <mbedtls_camellia_crypt_cbc>
 8006f72:	4603      	mov	r3, r0
                                      input, output);
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <camellia_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int camellia_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
                                      size_t length, size_t *iv_off, unsigned char *iv,
                                      const unsigned char *input, unsigned char *output)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af04      	add	r7, sp, #16
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	607a      	str	r2, [r7, #4]
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cfb128((mbedtls_camellia_context *) ctx, operation, length,
 8006f8c:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	9302      	str	r3, [sp, #8]
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f7fe fa93 	bl	80054cc <mbedtls_camellia_crypt_cfb128>
 8006fa6:	4603      	mov	r3, r0
                                         iv_off, iv, input, output);
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <camellia_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int camellia_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
                                   unsigned char *nonce_counter, unsigned char *stream_block,
                                   const unsigned char *input, unsigned char *output)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af04      	add	r7, sp, #16
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	603b      	str	r3, [r7, #0]
    return mbedtls_camellia_crypt_ctr((mbedtls_camellia_context *) ctx, length, nc_off,
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	9302      	str	r3, [sp, #8]
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7fe faf3 	bl	80055bc <mbedtls_camellia_crypt_ctr>
 8006fd6:	4603      	mov	r3, r0
                                      nonce_counter, stream_block, input, output);
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <camellia_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
static int camellia_setkey_dec_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_dec((mbedtls_camellia_context *) ctx, key, key_bitlen);
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7fd ff5b 	bl	8004eac <mbedtls_camellia_setkey_dec>
 8006ff6:	4603      	mov	r3, r0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <camellia_setkey_enc_wrap>:
#endif

static int camellia_setkey_enc_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_enc((mbedtls_camellia_context *) ctx, key, key_bitlen);
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	68b9      	ldr	r1, [r7, #8]
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7fd f8dd 	bl	80041d0 <mbedtls_camellia_setkey_enc>
 8007016:	4603      	mov	r3, r0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <camellia_ctx_alloc>:

static void *camellia_ctx_alloc(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
    mbedtls_camellia_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_camellia_context));
 8007026:	f44f 718a 	mov.w	r1, #276	; 0x114
 800702a:	2001      	movs	r0, #1
 800702c:	f005 fa9a 	bl	800c564 <calloc>
 8007030:	4603      	mov	r3, r0
 8007032:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <camellia_ctx_alloc+0x1e>
        return NULL;
 800703a:	2300      	movs	r3, #0
 800703c:	e003      	b.n	8007046 <camellia_ctx_alloc+0x26>
    }

    mbedtls_camellia_init(ctx);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7fd f8a6 	bl	8004190 <mbedtls_camellia_init>

    return ctx;
 8007044:	687b      	ldr	r3, [r7, #4]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <camellia_ctx_free>:

static void camellia_ctx_free(void *ctx)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
    mbedtls_camellia_free((mbedtls_camellia_context *) ctx);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7fd f8a8 	bl	80041ac <mbedtls_camellia_free>
    mbedtls_free(ctx);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f005 fa9f 	bl	800c5a0 <free>
}
 8007062:	bf00      	nop
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <gcm_camellia_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_camellia_setkey_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	60f8      	str	r0, [r7, #12]
 8007072:	60b9      	str	r1, [r7, #8]
 8007074:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	2105      	movs	r1, #5
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f002 fba9 	bl	80097d4 <mbedtls_gcm_setkey>
 8007082:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <ccm_camellia_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_camellia_setkey_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	2105      	movs	r1, #5
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7fe fb01 	bl	80056a6 <mbedtls_ccm_setkey>
 80070a4:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <aria_crypt_ecb_wrap>:

#if defined(MBEDTLS_ARIA_C)

static int aria_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                               const unsigned char *input, unsigned char *output)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
 80070ba:	460b      	mov	r3, r1
 80070bc:	72fb      	strb	r3, [r7, #11]
    (void) operation;
    return mbedtls_aria_crypt_ecb((mbedtls_aria_context *) ctx, input,
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f7fc fcf6 	bl	8003ab4 <mbedtls_aria_crypt_ecb>
 80070c8:	4603      	mov	r3, r0
                                  output);
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <aria_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aria_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation,
                               size_t length, unsigned char *iv,
                               const unsigned char *input, unsigned char *output)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b086      	sub	sp, #24
 80070d6:	af02      	add	r7, sp, #8
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	603b      	str	r3, [r7, #0]
 80070de:	460b      	mov	r3, r1
 80070e0:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aria_crypt_cbc((mbedtls_aria_context *) ctx, operation, length, iv,
 80070e2:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f7fc fe09 	bl	8003d0a <mbedtls_aria_crypt_cbc>
 80070f8:	4603      	mov	r3, r0
                                  input, output);
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <aria_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int aria_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
                                  size_t length, size_t *iv_off, unsigned char *iv,
                                  const unsigned char *input, unsigned char *output)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b088      	sub	sp, #32
 8007106:	af04      	add	r7, sp, #16
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	460b      	mov	r3, r1
 8007110:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aria_crypt_cfb128((mbedtls_aria_context *) ctx, operation, length,
 8007112:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	9302      	str	r3, [sp, #8]
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7fc fee8 	bl	8003efc <mbedtls_aria_crypt_cfb128>
 800712c:	4603      	mov	r3, r0
                                     iv_off, iv, input, output);
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <aria_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int aria_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
                               unsigned char *nonce_counter, unsigned char *stream_block,
                               const unsigned char *input, unsigned char *output)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b088      	sub	sp, #32
 800713a:	af04      	add	r7, sp, #16
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	603b      	str	r3, [r7, #0]
    return mbedtls_aria_crypt_ctr((mbedtls_aria_context *) ctx, length, nc_off,
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	9302      	str	r3, [sp, #8]
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	68b9      	ldr	r1, [r7, #8]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7fc ff42 	bl	8003fe0 <mbedtls_aria_crypt_ctr>
 800715c:	4603      	mov	r3, r0
                                  nonce_counter, stream_block, input, output);
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <aria_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
static int aria_setkey_dec_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	607a      	str	r2, [r7, #4]
    return mbedtls_aria_setkey_dec((mbedtls_aria_context *) ctx, key, key_bitlen);
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	68b9      	ldr	r1, [r7, #8]
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f7fc fc24 	bl	80039c4 <mbedtls_aria_setkey_dec>
 800717c:	4603      	mov	r3, r0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <aria_setkey_enc_wrap>:
#endif

static int aria_setkey_enc_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
    return mbedtls_aria_setkey_enc((mbedtls_aria_context *) ctx, key, key_bitlen);
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f7fc fac0 	bl	800371c <mbedtls_aria_setkey_enc>
 800719c:	4603      	mov	r3, r0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <aria_ctx_alloc>:

static void *aria_ctx_alloc(void)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
    mbedtls_aria_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_aria_context));
 80071ac:	f44f 718a 	mov.w	r1, #276	; 0x114
 80071b0:	2001      	movs	r0, #1
 80071b2:	f005 f9d7 	bl	800c564 <calloc>
 80071b6:	4603      	mov	r3, r0
 80071b8:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <aria_ctx_alloc+0x1e>
        return NULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e003      	b.n	80071cc <aria_ctx_alloc+0x26>
    }

    mbedtls_aria_init(ctx);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7fc fd81 	bl	8003ccc <mbedtls_aria_init>

    return ctx;
 80071ca:	687b      	ldr	r3, [r7, #4]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <aria_ctx_free>:

static void aria_ctx_free(void *ctx)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
    mbedtls_aria_free((mbedtls_aria_context *) ctx);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7fc fd83 	bl	8003ce8 <mbedtls_aria_free>
    mbedtls_free(ctx);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f005 f9dc 	bl	800c5a0 <free>
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <gcm_aria_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_aria_setkey_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	2106      	movs	r1, #6
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f002 fae6 	bl	80097d4 <mbedtls_gcm_setkey>
 8007208:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <ccm_aria_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aria_setkey_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	2106      	movs	r1, #6
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7fe fa3e 	bl	80056a6 <mbedtls_ccm_setkey>
 800722a:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <des_crypt_ecb_wrap>:

#if defined(MBEDTLS_DES_C)

static int des_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                              const unsigned char *input, unsigned char *output)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	603b      	str	r3, [r7, #0]
 8007240:	460b      	mov	r3, r1
 8007242:	72fb      	strb	r3, [r7, #11]
    ((void) operation);
    return mbedtls_des_crypt_ecb((mbedtls_des_context *) ctx, input, output);
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f001 fa77 	bl	800873c <mbedtls_des_crypt_ecb>
 800724e:	4603      	mov	r3, r0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <des3_crypt_ecb_wrap>:

static int des3_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                               const unsigned char *input, unsigned char *output)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	607a      	str	r2, [r7, #4]
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	460b      	mov	r3, r1
 8007266:	72fb      	strb	r3, [r7, #11]
    ((void) operation);
    return mbedtls_des3_crypt_ecb((mbedtls_des3_context *) ctx, input, output);
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f001 fcff 	bl	8008c70 <mbedtls_des3_crypt_ecb>
 8007272:	4603      	mov	r3, r0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <des_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int des_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
                              unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af02      	add	r7, sp, #8
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	607a      	str	r2, [r7, #4]
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	460b      	mov	r3, r1
 800728a:	72fb      	strb	r3, [r7, #11]
    return mbedtls_des_crypt_cbc((mbedtls_des_context *) ctx, operation, length, iv, input,
 800728c:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	9301      	str	r3, [sp, #4]
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f001 fbe9 	bl	8008a74 <mbedtls_des_crypt_cbc>
 80072a2:	4603      	mov	r3, r0
                                 output);
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <des3_crypt_cbc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CBC */

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int des3_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
                               unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	607a      	str	r2, [r7, #4]
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	460b      	mov	r3, r1
 80072ba:	72fb      	strb	r3, [r7, #11]
    return mbedtls_des3_crypt_cbc((mbedtls_des3_context *) ctx, operation, length, iv, input,
 80072bc:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f001 ffd7 	bl	8009280 <mbedtls_des3_crypt_cbc>
 80072d2:	4603      	mov	r3, r0
                                  output);
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <des_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CBC */

static int des_setkey_dec_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des_setkey_dec((mbedtls_des_context *) ctx, key);
 80072e8:	68b9      	ldr	r1, [r7, #8]
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f001 f843 	bl	8008376 <mbedtls_des_setkey_dec>
 80072f0:	4603      	mov	r3, r0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <des_setkey_enc_wrap>:

static int des_setkey_enc_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des_setkey_enc((mbedtls_des_context *) ctx, key);
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f001 f825 	bl	8008358 <mbedtls_des_setkey_enc>
 800730e:	4603      	mov	r3, r0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <des3_set2key_dec_wrap>:

static int des3_set2key_dec_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set2key_dec((mbedtls_des3_context *) ctx, key);
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f001 f919 	bl	800855e <mbedtls_des3_set2key_dec>
 800732c:	4603      	mov	r3, r0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <des3_set2key_enc_wrap>:

static int des3_set2key_enc_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set2key_enc((mbedtls_des3_context *) ctx, key);
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f001 f8e2 	bl	800850e <mbedtls_des3_set2key_enc>
 800734a:	4603      	mov	r3, r0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <des3_set3key_dec_wrap>:

static int des3_set3key_dec_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set3key_dec((mbedtls_des3_context *) ctx, key);
 8007360:	68b9      	ldr	r1, [r7, #8]
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f001 f9c2 	bl	80086ec <mbedtls_des3_set3key_dec>
 8007368:	4603      	mov	r3, r0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <des3_set3key_enc_wrap>:

static int des3_set3key_enc_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set3key_enc((mbedtls_des3_context *) ctx, key);
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f001 f98b 	bl	800869c <mbedtls_des3_set3key_enc>
 8007386:	4603      	mov	r3, r0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <des_ctx_alloc>:

static void *des_ctx_alloc(void)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
    mbedtls_des_context *des = mbedtls_calloc(1, sizeof(mbedtls_des_context));
 8007396:	2180      	movs	r1, #128	; 0x80
 8007398:	2001      	movs	r0, #1
 800739a:	f005 f8e3 	bl	800c564 <calloc>
 800739e:	4603      	mov	r3, r0
 80073a0:	607b      	str	r3, [r7, #4]

    if (des == NULL) {
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <des_ctx_alloc+0x1c>
        return NULL;
 80073a8:	2300      	movs	r3, #0
 80073aa:	e003      	b.n	80073b4 <des_ctx_alloc+0x24>
    }

    mbedtls_des_init(des);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fdaf 	bl	8007f10 <mbedtls_des_init>

    return des;
 80073b2:	687b      	ldr	r3, [r7, #4]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <des_ctx_free>:

static void des_ctx_free(void *ctx)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
    mbedtls_des_free((mbedtls_des_context *) ctx);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fdb0 	bl	8007f2a <mbedtls_des_free>
    mbedtls_free(ctx);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f005 f8e8 	bl	800c5a0 <free>
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <des3_ctx_alloc>:

static void *des3_ctx_alloc(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
    mbedtls_des3_context *des3;
    des3 = mbedtls_calloc(1, sizeof(mbedtls_des3_context));
 80073de:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80073e2:	2001      	movs	r0, #1
 80073e4:	f005 f8be 	bl	800c564 <calloc>
 80073e8:	4603      	mov	r3, r0
 80073ea:	607b      	str	r3, [r7, #4]

    if (des3 == NULL) {
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <des3_ctx_alloc+0x1e>
        return NULL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	e003      	b.n	80073fe <des3_ctx_alloc+0x26>
    }

    mbedtls_des3_init(des3);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fda7 	bl	8007f4a <mbedtls_des3_init>

    return des3;
 80073fc:	687b      	ldr	r3, [r7, #4]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <des3_ctx_free>:

static void des3_ctx_free(void *ctx)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
    mbedtls_des3_free((mbedtls_des3_context *) ctx);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fda9 	bl	8007f66 <mbedtls_des3_free>
    mbedtls_free(ctx);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f005 f8c3 	bl	800c5a0 <free>
}
 800741a:	bf00      	nop
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <chacha20_setkey_wrap>:

#if defined(MBEDTLS_CHACHA20_C)

static int chacha20_setkey_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
    if (key_bitlen != 256U) {
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007436:	d001      	beq.n	800743c <chacha20_setkey_wrap+0x18>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007438:	4b07      	ldr	r3, [pc, #28]	; (8007458 <chacha20_setkey_wrap+0x34>)
 800743a:	e009      	b.n	8007450 <chacha20_setkey_wrap+0x2c>
    }

    if (0 != mbedtls_chacha20_setkey((mbedtls_chacha20_context *) ctx, key)) {
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7fe fda8 	bl	8005f94 <mbedtls_chacha20_setkey>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <chacha20_setkey_wrap+0x2a>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800744a:	4b03      	ldr	r3, [pc, #12]	; (8007458 <chacha20_setkey_wrap+0x34>)
 800744c:	e000      	b.n	8007450 <chacha20_setkey_wrap+0x2c>
    }

    return 0;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	ffff9f00 	.word	0xffff9f00

0800745c <chacha20_stream_wrap>:

static int chacha20_stream_wrap(void *ctx,  size_t length,
                                const unsigned char *input,
                                unsigned char *output)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800746a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800746e:	617b      	str	r3, [r7, #20]

    ret = mbedtls_chacha20_update(ctx, length, input, output);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7fe fdf4 	bl	8006064 <mbedtls_chacha20_update>
 800747c:	6178      	str	r0, [r7, #20]
    if (ret == MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA) {
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8007484:	d101      	bne.n	800748a <chacha20_stream_wrap+0x2e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007486:	4b03      	ldr	r3, [pc, #12]	; (8007494 <chacha20_stream_wrap+0x38>)
 8007488:	e000      	b.n	800748c <chacha20_stream_wrap+0x30>
    }

    return ret;
 800748a:	697b      	ldr	r3, [r7, #20]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	ffff9f00 	.word	0xffff9f00

08007498 <chacha20_ctx_alloc>:

static void *chacha20_ctx_alloc(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
    mbedtls_chacha20_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_chacha20_context));
 800749e:	2184      	movs	r1, #132	; 0x84
 80074a0:	2001      	movs	r0, #1
 80074a2:	f005 f85f 	bl	800c564 <calloc>
 80074a6:	4603      	mov	r3, r0
 80074a8:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <chacha20_ctx_alloc+0x1c>
        return NULL;
 80074b0:	2300      	movs	r3, #0
 80074b2:	e003      	b.n	80074bc <chacha20_ctx_alloc+0x24>
    }

    mbedtls_chacha20_init(ctx);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7fe fd46 	bl	8005f46 <mbedtls_chacha20_init>

    return ctx;
 80074ba:	687b      	ldr	r3, [r7, #4]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <chacha20_ctx_free>:

static void chacha20_ctx_free(void *ctx)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
    mbedtls_chacha20_free((mbedtls_chacha20_context *) ctx);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7fe fd51 	bl	8005f74 <mbedtls_chacha20_free>
    mbedtls_free(ctx);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f005 f864 	bl	800c5a0 <free>
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <chachapoly_setkey_wrap>:
#if defined(MBEDTLS_CHACHAPOLY_C)

static int chachapoly_setkey_wrap(void *ctx,
                                  const unsigned char *key,
                                  unsigned int key_bitlen)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
    if (key_bitlen != 256U) {
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f2:	d001      	beq.n	80074f8 <chachapoly_setkey_wrap+0x18>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 80074f4:	4b07      	ldr	r3, [pc, #28]	; (8007514 <chachapoly_setkey_wrap+0x34>)
 80074f6:	e009      	b.n	800750c <chachapoly_setkey_wrap+0x2c>
    }

    if (0 != mbedtls_chachapoly_setkey((mbedtls_chachapoly_context *) ctx, key)) {
 80074f8:	68b9      	ldr	r1, [r7, #8]
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7fe ff1f 	bl	800633e <mbedtls_chachapoly_setkey>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <chachapoly_setkey_wrap+0x2a>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007506:	4b03      	ldr	r3, [pc, #12]	; (8007514 <chachapoly_setkey_wrap+0x34>)
 8007508:	e000      	b.n	800750c <chachapoly_setkey_wrap+0x2c>
    }

    return 0;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	ffff9f00 	.word	0xffff9f00

08007518 <chachapoly_ctx_alloc>:

static void *chachapoly_ctx_alloc(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
    mbedtls_chachapoly_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_chachapoly_context));
 800751e:	21e8      	movs	r1, #232	; 0xe8
 8007520:	2001      	movs	r0, #1
 8007522:	f005 f81f 	bl	800c564 <calloc>
 8007526:	4603      	mov	r3, r0
 8007528:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <chachapoly_ctx_alloc+0x1c>
        return NULL;
 8007530:	2300      	movs	r3, #0
 8007532:	e003      	b.n	800753c <chachapoly_ctx_alloc+0x24>
    }

    mbedtls_chachapoly_init(ctx);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7fe feb0 	bl	800629a <mbedtls_chachapoly_init>

    return ctx;
 800753a:	687b      	ldr	r3, [r7, #4]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <chachapoly_ctx_free>:

static void chachapoly_ctx_free(void *ctx)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
    mbedtls_chachapoly_free((mbedtls_chachapoly_context *) ctx);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7fe fecb 	bl	80062e8 <mbedtls_chachapoly_free>
    mbedtls_free(ctx);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f005 f824 	bl	800c5a0 <free>
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <kw_ctx_alloc>:
};
#endif /* defined(MBEDTLS_CIPHER_NULL_CIPHER) */

#if defined(MBEDTLS_NIST_KW_C)
static void *kw_ctx_alloc(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc(1, sizeof(mbedtls_nist_kw_context));
 8007566:	2144      	movs	r1, #68	; 0x44
 8007568:	2001      	movs	r0, #1
 800756a:	f004 fffb 	bl	800c564 <calloc>
 800756e:	4603      	mov	r3, r0
 8007570:	607b      	str	r3, [r7, #4]

    if (ctx != NULL) {
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <kw_ctx_alloc+0x1e>
        mbedtls_nist_kw_init((mbedtls_nist_kw_context *) ctx);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f002 fefc 	bl	800a376 <mbedtls_nist_kw_init>
    }

    return ctx;
 800757e:	687b      	ldr	r3, [r7, #4]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <kw_ctx_free>:

static void kw_ctx_free(void *ctx)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
    mbedtls_nist_kw_free(ctx);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f002 ff4b 	bl	800a42c <mbedtls_nist_kw_free>
    mbedtls_free(ctx);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f005 f802 	bl	800c5a0 <free>
}
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <kw_aes_setkey_wrap>:

static int kw_aes_setkey_wrap(void *ctx, const unsigned char *key,
                              unsigned int key_bitlen)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
    return mbedtls_nist_kw_setkey((mbedtls_nist_kw_context *) ctx,
 80075b0:	2301      	movs	r3, #1
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	2102      	movs	r1, #2
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f002 fee8 	bl	800a390 <mbedtls_nist_kw_setkey>
 80075c0:	4603      	mov	r3, r0
                                  MBEDTLS_CIPHER_ID_AES, key, key_bitlen, 1);
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <kw_aes_setkey_unwrap>:

static int kw_aes_setkey_unwrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b086      	sub	sp, #24
 80075ce:	af02      	add	r7, sp, #8
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
    return mbedtls_nist_kw_setkey((mbedtls_nist_kw_context *) ctx,
 80075d6:	2300      	movs	r3, #0
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	2102      	movs	r1, #2
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f002 fed5 	bl	800a390 <mbedtls_nist_kw_setkey>
 80075e6:	4603      	mov	r3, r0
                                  MBEDTLS_CIPHER_ID_AES, key, key_bitlen, 0);
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <mbedtls_cipher_info_get_type>:
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <mbedtls_cipher_info_get_type+0x12>
        return MBEDTLS_CIPHER_NONE;
 80075fe:	2300      	movs	r3, #0
 8007600:	e001      	b.n	8007606 <mbedtls_cipher_info_get_type+0x16>
        return (mbedtls_cipher_type_t) info->MBEDTLS_PRIVATE(type);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	799b      	ldrb	r3, [r3, #6]
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <mbedtls_cipher_info_get_block_size>:
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <mbedtls_cipher_info_get_block_size+0x12>
        return 0;
 8007620:	2300      	movs	r3, #0
 8007622:	e004      	b.n	800762e <mbedtls_cipher_info_get_block_size+0x1c>
    return (size_t) (info->MBEDTLS_PRIVATE(block_size));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	791b      	ldrb	r3, [r3, #4]
 8007628:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800762c:	b2db      	uxtb	r3, r3
}
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <mbedtls_ct_bool>:
#define RESTORE_ASM_SYNTAX
#endif

/* Convert a number into a condition in constant time. */
static inline mbedtls_ct_condition_t mbedtls_ct_bool(mbedtls_ct_uint_t x)
{
 800763a:	b480      	push	{r7}
 800763c:	b085      	sub	sp, #20
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
                  :
                  );
    return (mbedtls_ct_condition_t) x;
#elif defined(MBEDTLS_CT_ARM_ASM) && defined(MBEDTLS_CT_SIZE_32)
    uint32_t s;
    asm volatile (".syntax unified                                \n\t"
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	425a      	negs	r2, r3
 8007646:	4313      	orrs	r3, r2
 8007648:	17db      	asrs	r3, r3, #31
 800764a:	60fa      	str	r2, [r7, #12]
 800764c:	607b      	str	r3, [r7, #4]
                  [x] "+&l" (x)
                  :
                  :
                  "cc" /* clobbers flag bits */
                  );
    return (mbedtls_ct_condition_t) x;
 800764e:	687b      	ldr	r3, [r7, #4]
    return (mbedtls_ct_condition_t) (-y);
#if defined(_MSC_VER)
#pragma warning( pop )
#endif
#endif
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <mbedtls_ct_uint_if_else_0>:
{
    return (size_t) (condition & if1);
}

static inline unsigned mbedtls_ct_uint_if_else_0(mbedtls_ct_condition_t condition, unsigned if1)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
    return (unsigned) (condition & if1);
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	4013      	ands	r3, r2
}
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <cmac_multiply_by_u>:
 * Block size must be 8 bytes or 16 bytes - the block sizes for DES and AES.
 */
static int cmac_multiply_by_u(unsigned char *output,
                              const unsigned char *input,
                              size_t blocksize)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08e      	sub	sp, #56	; 0x38
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
    const unsigned char R_128 = 0x87;
 8007684:	2387      	movs	r3, #135	; 0x87
 8007686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    unsigned char R_n;
    uint32_t overflow = 0x00;
 800768a:	2300      	movs	r3, #0
 800768c:	633b      	str	r3, [r7, #48]	; 0x30
    int i;

    if (blocksize == MBEDTLS_AES_BLOCK_SIZE) {
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b10      	cmp	r3, #16
 8007692:	d104      	bne.n	800769e <cmac_multiply_by_u+0x26>
        R_n = R_128;
 8007694:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800769c:	e00c      	b.n	80076b8 <cmac_multiply_by_u+0x40>
    }
#if defined(MBEDTLS_DES_C)
    else if (blocksize == MBEDTLS_DES3_BLOCK_SIZE) {
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d107      	bne.n	80076b4 <cmac_multiply_by_u+0x3c>
        const unsigned char R_64 = 0x1B;
 80076a4:	231b      	movs	r3, #27
 80076a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        R_n = R_64;
 80076aa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80076ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80076b2:	e001      	b.n	80076b8 <cmac_multiply_by_u+0x40>
    }
#endif
    else {
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 80076b4:	4b27      	ldr	r3, [pc, #156]	; (8007754 <cmac_multiply_by_u+0xdc>)
 80076b6:	e048      	b.n	800774a <cmac_multiply_by_u+0xd2>
    }

    for (i = (int) blocksize - 4; i >= 0; i -= 4) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3b04      	subs	r3, #4
 80076bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076be:	e021      	b.n	8007704 <cmac_multiply_by_u+0x8c>
        uint32_t i32 = MBEDTLS_GET_UINT32_BE(&input[i], 0);
 80076c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	4413      	add	r3, r2
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80076cc:	613b      	str	r3, [r7, #16]
    return r;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	ba1b      	rev	r3, r3
 80076d2:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t new_overflow = i32 >> 31;
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	0fdb      	lsrs	r3, r3, #31
 80076d8:	623b      	str	r3, [r7, #32]
        i32 = (i32 << 1) | overflow;
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e0:	4313      	orrs	r3, r2
 80076e2:	627b      	str	r3, [r7, #36]	; 0x24
        MBEDTLS_PUT_UINT32_BE(i32, &output[i], 0);
 80076e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	441a      	add	r2, r3
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	ba1b      	rev	r3, r3
 80076ee:	61ba      	str	r2, [r7, #24]
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	601a      	str	r2, [r3, #0]
}
 80076f8:	bf00      	nop
        overflow = new_overflow;
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	633b      	str	r3, [r7, #48]	; 0x30
    for (i = (int) blocksize - 4; i >= 0; i -= 4) {
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	3b04      	subs	r3, #4
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007706:	2b00      	cmp	r3, #0
 8007708:	dada      	bge.n	80076c0 <cmac_multiply_by_u+0x48>
    }

    R_n = (unsigned char) mbedtls_ct_uint_if_else_0(mbedtls_ct_bool(input[0] >> 7), R_n);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	09db      	lsrs	r3, r3, #7
 8007710:	b2db      	uxtb	r3, r3
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff ff91 	bl	800763a <mbedtls_ct_bool>
 8007718:	4602      	mov	r2, r0
 800771a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800771e:	4619      	mov	r1, r3
 8007720:	4610      	mov	r0, r2
 8007722:	f7ff ff9b 	bl	800765c <mbedtls_ct_uint_if_else_0>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    output[blocksize - 1] ^= R_n;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	3b01      	subs	r3, #1
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	7819      	ldrb	r1, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3b01      	subs	r3, #1
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007742:	404a      	eors	r2, r1
 8007744:	b2d2      	uxtb	r2, r2
 8007746:	701a      	strb	r2, [r3, #0]

    return 0;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3738      	adds	r7, #56	; 0x38
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	ffff9f00 	.word	0xffff9f00

08007758 <cmac_generate_subkeys>:
 *
 * - as specified by RFC 4493, section 2.3 Subkey Generation Algorithm
 */
static int cmac_generate_subkeys(mbedtls_cipher_context_t *ctx,
                                 unsigned char *K1, unsigned char *K2)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08e      	sub	sp, #56	; 0x38
 800775c:	af02      	add	r7, sp, #8
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8007764:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007768:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned char L[MBEDTLS_CMAC_MAX_BLOCK_SIZE];
    size_t olen, block_size;

    mbedtls_platform_zeroize(L, sizeof(L));
 800776a:	f107 0318 	add.w	r3, r7, #24
 800776e:	2110      	movs	r1, #16
 8007770:	4618      	mov	r0, r3
 8007772:	f002 fe6f 	bl	800a454 <mbedtls_platform_zeroize>

    block_size = mbedtls_cipher_info_get_block_size(ctx->cipher_info);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff ff49 	bl	8007612 <mbedtls_cipher_info_get_block_size>
 8007780:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Calculate Ek(0) */
    if ((ret = mbedtls_cipher_update(ctx, L, block_size, L, &olen)) != 0) {
 8007782:	f107 0218 	add.w	r2, r7, #24
 8007786:	f107 0118 	add.w	r1, r7, #24
 800778a:	f107 0314 	add.w	r3, r7, #20
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	4613      	mov	r3, r2
 8007792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7fe ffd5 	bl	8006744 <mbedtls_cipher_update>
 800779a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d113      	bne.n	80077ca <cmac_generate_subkeys+0x72>
    }

    /*
     * Generate K1 and K2
     */
    if ((ret = cmac_multiply_by_u(K1, L, block_size)) != 0) {
 80077a2:	f107 0318 	add.w	r3, r7, #24
 80077a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077a8:	4619      	mov	r1, r3
 80077aa:	68b8      	ldr	r0, [r7, #8]
 80077ac:	f7ff ff64 	bl	8007678 <cmac_multiply_by_u>
 80077b0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80077b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <cmac_generate_subkeys+0x76>
        goto exit;
    }

    if ((ret = cmac_multiply_by_u(K2, K1, block_size)) != 0) {
 80077b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff ff5b 	bl	8007678 <cmac_multiply_by_u>
 80077c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80077c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c6:	2b00      	cmp	r3, #0
        goto exit;
    }

exit:
 80077c8:	e002      	b.n	80077d0 <cmac_generate_subkeys+0x78>
        goto exit;
 80077ca:	bf00      	nop
 80077cc:	e000      	b.n	80077d0 <cmac_generate_subkeys+0x78>
        goto exit;
 80077ce:	bf00      	nop
    mbedtls_platform_zeroize(L, sizeof(L));
 80077d0:	f107 0318 	add.w	r3, r7, #24
 80077d4:	2110      	movs	r1, #16
 80077d6:	4618      	mov	r0, r3
 80077d8:	f002 fe3c 	bl	800a454 <mbedtls_platform_zeroize>

    return ret;
 80077dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3730      	adds	r7, #48	; 0x30
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <cmac_pad>:
 */
static void cmac_pad(unsigned char padded_block[MBEDTLS_CMAC_MAX_BLOCK_SIZE],
                     size_t padded_block_len,
                     const unsigned char *last_block,
                     size_t last_block_len)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b087      	sub	sp, #28
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	607a      	str	r2, [r7, #4]
 80077f2:	603b      	str	r3, [r7, #0]
    size_t j;

    for (j = 0; j < padded_block_len; j++) {
 80077f4:	2300      	movs	r3, #0
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	e01e      	b.n	8007838 <cmac_pad+0x52>
        if (j < last_block_len) {
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d208      	bcs.n	8007814 <cmac_pad+0x2e>
            padded_block[j] = last_block[j];
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	441a      	add	r2, r3
 8007808:	68f9      	ldr	r1, [r7, #12]
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	440b      	add	r3, r1
 800780e:	7812      	ldrb	r2, [r2, #0]
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	e00e      	b.n	8007832 <cmac_pad+0x4c>
        } else if (j == last_block_len) {
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d105      	bne.n	8007828 <cmac_pad+0x42>
            padded_block[j] = 0x80;
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	4413      	add	r3, r2
 8007822:	2280      	movs	r2, #128	; 0x80
 8007824:	701a      	strb	r2, [r3, #0]
 8007826:	e004      	b.n	8007832 <cmac_pad+0x4c>
        } else {
            padded_block[j] = 0x00;
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	4413      	add	r3, r2
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < padded_block_len; j++) {
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	3301      	adds	r3, #1
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	429a      	cmp	r2, r3
 800783e:	d3dc      	bcc.n	80077fa <cmac_pad+0x14>
        }
    }
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
	...

08007850 <mbedtls_cipher_cmac_starts>:

int mbedtls_cipher_cmac_starts(mbedtls_cipher_context_t *ctx,
                               const unsigned char *key, size_t keybits)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
    mbedtls_cipher_type_t type;
    mbedtls_cmac_context_t *cmac_ctx;
    int retval;

    if (ctx == NULL || ctx->cipher_info == NULL || key == NULL) {
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d006      	beq.n	8007870 <mbedtls_cipher_cmac_starts+0x20>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <mbedtls_cipher_cmac_starts+0x20>
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <mbedtls_cipher_cmac_starts+0x24>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007870:	4b1b      	ldr	r3, [pc, #108]	; (80078e0 <mbedtls_cipher_cmac_starts+0x90>)
 8007872:	e031      	b.n	80078d8 <mbedtls_cipher_cmac_starts+0x88>
    }

    if ((retval = mbedtls_cipher_setkey(ctx, key, (int) keybits,
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	2301      	movs	r3, #1
 8007878:	68b9      	ldr	r1, [r7, #8]
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f7fe feea 	bl	8006654 <mbedtls_cipher_setkey>
 8007880:	61f8      	str	r0, [r7, #28]
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <mbedtls_cipher_cmac_starts+0x3c>
                                        MBEDTLS_ENCRYPT)) != 0) {
        return retval;
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	e025      	b.n	80078d8 <mbedtls_cipher_cmac_starts+0x88>
    }

    type = mbedtls_cipher_info_get_type(ctx->cipher_info);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff fead 	bl	80075f0 <mbedtls_cipher_info_get_type>
 8007896:	4603      	mov	r3, r0
 8007898:	76fb      	strb	r3, [r7, #27]

    switch (type) {
 800789a:	7efb      	ldrb	r3, [r7, #27]
 800789c:	2b04      	cmp	r3, #4
 800789e:	dc02      	bgt.n	80078a6 <mbedtls_cipher_cmac_starts+0x56>
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	da04      	bge.n	80078ae <mbedtls_cipher_cmac_starts+0x5e>
 80078a4:	e001      	b.n	80078aa <mbedtls_cipher_cmac_starts+0x5a>
 80078a6:	2b24      	cmp	r3, #36	; 0x24
 80078a8:	d001      	beq.n	80078ae <mbedtls_cipher_cmac_starts+0x5e>
        case MBEDTLS_CIPHER_AES_192_ECB:
        case MBEDTLS_CIPHER_AES_256_ECB:
        case MBEDTLS_CIPHER_DES_EDE3_ECB:
            break;
        default:
            return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 80078aa:	4b0d      	ldr	r3, [pc, #52]	; (80078e0 <mbedtls_cipher_cmac_starts+0x90>)
 80078ac:	e014      	b.n	80078d8 <mbedtls_cipher_cmac_starts+0x88>
            break;
 80078ae:	bf00      	nop
    }

    /* Allocated and initialise in the cipher context memory for the CMAC
     * context */
    cmac_ctx = mbedtls_calloc(1, sizeof(mbedtls_cmac_context_t));
 80078b0:	2124      	movs	r1, #36	; 0x24
 80078b2:	2001      	movs	r0, #1
 80078b4:	f004 fe56 	bl	800c564 <calloc>
 80078b8:	4603      	mov	r3, r0
 80078ba:	617b      	str	r3, [r7, #20]
    if (cmac_ctx == NULL) {
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <mbedtls_cipher_cmac_starts+0x76>
        return MBEDTLS_ERR_CIPHER_ALLOC_FAILED;
 80078c2:	4b08      	ldr	r3, [pc, #32]	; (80078e4 <mbedtls_cipher_cmac_starts+0x94>)
 80078c4:	e008      	b.n	80078d8 <mbedtls_cipher_cmac_starts+0x88>
    }

    ctx->cmac_ctx = cmac_ctx;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	641a      	str	r2, [r3, #64]	; 0x40

    mbedtls_platform_zeroize(cmac_ctx->state, sizeof(cmac_ctx->state));
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2110      	movs	r1, #16
 80078d0:	4618      	mov	r0, r3
 80078d2:	f002 fdbf 	bl	800a454 <mbedtls_platform_zeroize>

    return 0;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3720      	adds	r7, #32
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	ffff9f00 	.word	0xffff9f00
 80078e4:	ffff9e80 	.word	0xffff9e80

080078e8 <mbedtls_cipher_cmac_update>:

int mbedtls_cipher_cmac_update(mbedtls_cipher_context_t *ctx,
                               const unsigned char *input, size_t ilen)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b0a6      	sub	sp, #152	; 0x98
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
    mbedtls_cmac_context_t *cmac_ctx;
    unsigned char *state;
    int ret = 0;
 80078f4:	2300      	movs	r3, #0
 80078f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    size_t n, j, olen, block_size;

    if (ctx == NULL || ctx->cipher_info == NULL || input == NULL ||
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <mbedtls_cipher_cmac_update+0x2e>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d006      	beq.n	8007916 <mbedtls_cipher_cmac_update+0x2e>
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <mbedtls_cipher_cmac_update+0x2e>
        ctx->cmac_ctx == NULL) {
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if (ctx == NULL || ctx->cipher_info == NULL || input == NULL ||
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <mbedtls_cipher_cmac_update+0x32>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007916:	4ba0      	ldr	r3, [pc, #640]	; (8007b98 <mbedtls_cipher_cmac_update+0x2b0>)
 8007918:	e139      	b.n	8007b8e <mbedtls_cipher_cmac_update+0x2a6>
    }

    cmac_ctx = ctx->cmac_ctx;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    block_size = mbedtls_cipher_info_get_block_size(ctx->cipher_info);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff fe73 	bl	8007612 <mbedtls_cipher_info_get_block_size>
 800792c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    state = ctx->cmac_ctx->state;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Without the MBEDTLS_ASSUME below, gcc -O3 will generate a warning of the form
     * error: writing 16 bytes into a region of size 0 [-Werror=stringop-overflow=] */
    MBEDTLS_ASSUME(block_size <= MBEDTLS_CMAC_MAX_BLOCK_SIZE);
 8007936:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800793a:	2b10      	cmp	r3, #16

    /* Is there data still to process from the last call, that's greater in
     * size than a block? */
    if (cmac_ctx->unprocessed_len > 0 &&
 800793c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 808b 	beq.w	8007a5e <mbedtls_cipher_cmac_update+0x176>
        ilen > block_size - cmac_ctx->unprocessed_len) {
 8007948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007952:	1ad3      	subs	r3, r2, r3
    if (cmac_ctx->unprocessed_len > 0 &&
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	429a      	cmp	r2, r3
 8007958:	f240 8081 	bls.w	8007a5e <mbedtls_cipher_cmac_update+0x176>
        memcpy(&cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 800795c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	3310      	adds	r3, #16
 8007964:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007968:	18d0      	adds	r0, r2, r3
               input,
               block_size - cmac_ctx->unprocessed_len);
 800796a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800796e:	6a1b      	ldr	r3, [r3, #32]
        memcpy(&cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 8007970:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	461a      	mov	r2, r3
 8007978:	68b9      	ldr	r1, [r7, #8]
 800797a:	f005 f9f4 	bl	800cd66 <memcpy>

        mbedtls_xor_no_simd(state, cmac_ctx->unprocessed_block, state, block_size);
 800797e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007982:	3310      	adds	r3, #16
 8007984:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007986:	677a      	str	r2, [r7, #116]	; 0x74
 8007988:	673b      	str	r3, [r7, #112]	; 0x70
 800798a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800798c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800798e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007992:	66bb      	str	r3, [r7, #104]	; 0x68
    size_t i = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	667b      	str	r3, [r7, #100]	; 0x64
    for (; (i + 4) <= n; i += 4) {
 8007998:	e01e      	b.n	80079d8 <mbedtls_cipher_cmac_update+0xf0>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800799a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800799c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800799e:	4413      	add	r3, r2
 80079a0:	663b      	str	r3, [r7, #96]	; 0x60
 80079a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079a4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80079a6:	61fb      	str	r3, [r7, #28]
    return r;
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80079ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ae:	440b      	add	r3, r1
 80079b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079b4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80079b6:	61bb      	str	r3, [r7, #24]
    return r;
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	4053      	eors	r3, r2
 80079bc:	65bb      	str	r3, [r7, #88]	; 0x58
        mbedtls_put_unaligned_uint32(r + i, x);
 80079be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80079c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079c2:	4413      	add	r3, r2
 80079c4:	657b      	str	r3, [r7, #84]	; 0x54
 80079c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 80079cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ce:	601a      	str	r2, [r3, #0]
}
 80079d0:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80079d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079d4:	3304      	adds	r3, #4
 80079d6:	667b      	str	r3, [r7, #100]	; 0x64
 80079d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079da:	3304      	adds	r3, #4
 80079dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079de:	429a      	cmp	r2, r3
 80079e0:	d2db      	bcs.n	800799a <mbedtls_cipher_cmac_update+0xb2>
    for (; i < n; i++) {
 80079e2:	e010      	b.n	8007a06 <mbedtls_cipher_cmac_update+0x11e>
        r[i] = a[i] ^ b[i];
 80079e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80079e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079e8:	4413      	add	r3, r2
 80079ea:	7819      	ldrb	r1, [r3, #0]
 80079ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079f0:	4413      	add	r3, r2
 80079f2:	781a      	ldrb	r2, [r3, #0]
 80079f4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80079f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079f8:	4403      	add	r3, r0
 80079fa:	404a      	eors	r2, r1
 80079fc:	b2d2      	uxtb	r2, r2
 80079fe:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8007a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a02:	3301      	adds	r3, #1
 8007a04:	667b      	str	r3, [r7, #100]	; 0x64
 8007a06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d8ea      	bhi.n	80079e4 <mbedtls_cipher_cmac_update+0xfc>
}
 8007a0e:	bf00      	nop

        if ((ret = mbedtls_cipher_update(ctx, state, block_size, state,
 8007a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7fe fe90 	bl	8006744 <mbedtls_cipher_update>
 8007a24:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8007a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f040 80a7 	bne.w	8007b80 <mbedtls_cipher_cmac_update+0x298>
                                         &olen)) != 0) {
            goto exit;
        }

        input += block_size - cmac_ctx->unprocessed_len;
 8007a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	4413      	add	r3, r2
 8007a42:	60bb      	str	r3, [r7, #8]
        ilen -= block_size - cmac_ctx->unprocessed_len;
 8007a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a48:	6a1a      	ldr	r2, [r3, #32]
 8007a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	4413      	add	r3, r2
 8007a54:	607b      	str	r3, [r7, #4]
        cmac_ctx->unprocessed_len = 0;
 8007a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	621a      	str	r2, [r3, #32]
    }

    /* n is the number of blocks including any final partial block */
    n = (ilen + block_size - 1) / block_size;
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a64:	4413      	add	r3, r2
 8007a66:	1e5a      	subs	r2, r3, #1
 8007a68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a70:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Iterate across the input data in block sized chunks, excluding any
     * final partial or complete block */
    for (j = 1; j < n; j++) {
 8007a72:	2301      	movs	r3, #1
 8007a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a78:	e065      	b.n	8007b46 <mbedtls_cipher_cmac_update+0x25e>
 8007a7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a7c:	653b      	str	r3, [r7, #80]	; 0x50
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a8a:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	643b      	str	r3, [r7, #64]	; 0x40
    for (; (i + 4) <= n; i += 4) {
 8007a90:	e01e      	b.n	8007ad0 <mbedtls_cipher_cmac_update+0x1e8>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8007a92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a96:	4413      	add	r3, r2
 8007a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a9c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8007aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa6:	440b      	add	r3, r1
 8007aa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	4053      	eors	r3, r2
 8007ab4:	637b      	str	r3, [r7, #52]	; 0x34
        mbedtls_put_unaligned_uint32(r + i, x);
 8007ab6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aba:	4413      	add	r3, r2
 8007abc:	633b      	str	r3, [r7, #48]	; 0x30
 8007abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac0:	623b      	str	r3, [r7, #32]
 8007ac2:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	601a      	str	r2, [r3, #0]
}
 8007ac8:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8007aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007acc:	3304      	adds	r3, #4
 8007ace:	643b      	str	r3, [r7, #64]	; 0x40
 8007ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d2db      	bcs.n	8007a92 <mbedtls_cipher_cmac_update+0x1aa>
    for (; i < n; i++) {
 8007ada:	e010      	b.n	8007afe <mbedtls_cipher_cmac_update+0x216>
        r[i] = a[i] ^ b[i];
 8007adc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae0:	4413      	add	r3, r2
 8007ae2:	7819      	ldrb	r1, [r3, #0]
 8007ae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae8:	4413      	add	r3, r2
 8007aea:	781a      	ldrb	r2, [r3, #0]
 8007aec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007af0:	4403      	add	r3, r0
 8007af2:	404a      	eors	r2, r1
 8007af4:	b2d2      	uxtb	r2, r2
 8007af6:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8007af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007afa:	3301      	adds	r3, #1
 8007afc:	643b      	str	r3, [r7, #64]	; 0x40
 8007afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d8ea      	bhi.n	8007adc <mbedtls_cipher_cmac_update+0x1f4>
}
 8007b06:	bf00      	nop
        mbedtls_xor_no_simd(state, input, state, block_size);

        if ((ret = mbedtls_cipher_update(ctx, state, block_size, state,
 8007b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f7fe fe14 	bl	8006744 <mbedtls_cipher_update>
 8007b1c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8007b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d12d      	bne.n	8007b84 <mbedtls_cipher_cmac_update+0x29c>
                                         &olen)) != 0) {
            goto exit;
        }

        ilen -= block_size;
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	607b      	str	r3, [r7, #4]
        input += block_size;
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b38:	4413      	add	r3, r2
 8007b3a:	60bb      	str	r3, [r7, #8]
    for (j = 1; j < n; j++) {
 8007b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b40:	3301      	adds	r3, #1
 8007b42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b46:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007b4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d394      	bcc.n	8007a7a <mbedtls_cipher_cmac_update+0x192>
    }

    /* If there is data left over that wasn't aligned to a block */
    if (ilen > 0) {
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d018      	beq.n	8007b88 <mbedtls_cipher_cmac_update+0x2a0>
        memcpy(&cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 8007b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	3310      	adds	r3, #16
 8007b5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007b62:	4413      	add	r3, r2
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	68b9      	ldr	r1, [r7, #8]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f005 f8fc 	bl	800cd66 <memcpy>
               input,
               ilen);
        cmac_ctx->unprocessed_len += ilen;
 8007b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b72:	6a1a      	ldr	r2, [r3, #32]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	441a      	add	r2, r3
 8007b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b7c:	621a      	str	r2, [r3, #32]
 8007b7e:	e004      	b.n	8007b8a <mbedtls_cipher_cmac_update+0x2a2>
            goto exit;
 8007b80:	bf00      	nop
 8007b82:	e002      	b.n	8007b8a <mbedtls_cipher_cmac_update+0x2a2>
            goto exit;
 8007b84:	bf00      	nop
 8007b86:	e000      	b.n	8007b8a <mbedtls_cipher_cmac_update+0x2a2>
    }

exit:
 8007b88:	bf00      	nop
    return ret;
 8007b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3790      	adds	r7, #144	; 0x90
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	ffff9f00 	.word	0xffff9f00

08007b9c <mbedtls_cipher_cmac_finish>:

int mbedtls_cipher_cmac_finish(mbedtls_cipher_context_t *ctx,
                               unsigned char *output)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b0ba      	sub	sp, #232	; 0xe8
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
    mbedtls_cmac_context_t *cmac_ctx;
    unsigned char *state, *last_block;
    unsigned char K1[MBEDTLS_CMAC_MAX_BLOCK_SIZE];
    unsigned char K2[MBEDTLS_CMAC_MAX_BLOCK_SIZE];
    unsigned char M_last[MBEDTLS_CMAC_MAX_BLOCK_SIZE];
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8007ba6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007baa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    size_t olen, block_size;

    if (ctx == NULL || ctx->cipher_info == NULL || ctx->cmac_ctx == NULL ||
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <mbedtls_cipher_cmac_finish+0x2e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d006      	beq.n	8007bca <mbedtls_cipher_cmac_finish+0x2e>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <mbedtls_cipher_cmac_finish+0x2e>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <mbedtls_cipher_cmac_finish+0x32>
        output == NULL) {
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007bca:	4bbe      	ldr	r3, [pc, #760]	; (8007ec4 <mbedtls_cipher_cmac_finish+0x328>)
 8007bcc:	e19b      	b.n	8007f06 <mbedtls_cipher_cmac_finish+0x36a>
    }

    cmac_ctx = ctx->cmac_ctx;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    block_size = mbedtls_cipher_info_get_block_size(ctx->cipher_info);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff fd19 	bl	8007612 <mbedtls_cipher_info_get_block_size>
 8007be0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    MBEDTLS_ASSUME(block_size <= MBEDTLS_CMAC_MAX_BLOCK_SIZE); // silence GCC warning
 8007be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007be8:	2b10      	cmp	r3, #16
    state = cmac_ctx->state;
 8007bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    mbedtls_platform_zeroize(K1, sizeof(K1));
 8007bf2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007bf6:	2110      	movs	r1, #16
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f002 fc2b 	bl	800a454 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(K2, sizeof(K2));
 8007bfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c02:	2110      	movs	r1, #16
 8007c04:	4618      	mov	r0, r3
 8007c06:	f002 fc25 	bl	800a454 <mbedtls_platform_zeroize>
    cmac_generate_subkeys(ctx, K1, K2);
 8007c0a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007c0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff fd9f 	bl	8007758 <cmac_generate_subkeys>

    last_block = cmac_ctx->unprocessed_block;
 8007c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c1e:	3310      	adds	r3, #16
 8007c20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    /* Calculate last block */
    if (cmac_ctx->unprocessed_len < block_size) {
 8007c24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d975      	bls.n	8007d1e <mbedtls_cipher_cmac_finish+0x182>
        cmac_pad(M_last, block_size, last_block, cmac_ctx->unprocessed_len);
 8007c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8007c3c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007c40:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007c44:	f7ff fdcf 	bl	80077e6 <cmac_pad>
 8007c48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    size_t i = 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    for (; (i + 4) <= n; i += 4) {
 8007c6e:	e02e      	b.n	8007cce <mbedtls_cipher_cmac_finish+0x132>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8007c70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c78:	4413      	add	r3, r2
 8007c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c82:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007c84:	613b      	str	r3, [r7, #16]
    return r;
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8007c8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c90:	440b      	add	r3, r1
 8007c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c9a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007c9c:	60fb      	str	r3, [r7, #12]
    return r;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4053      	eors	r3, r2
 8007ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        mbedtls_put_unaligned_uint32(r + i, x);
 8007ca6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007caa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cae:	4413      	add	r3, r2
 8007cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cb8:	60bb      	str	r3, [r7, #8]
 8007cba:	68ba      	ldr	r2, [r7, #8]
    memcpy(p, &x, sizeof(x));
 8007cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cc0:	601a      	str	r2, [r3, #0]
}
 8007cc2:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8007cc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cc8:	3304      	adds	r3, #4
 8007cca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d2c9      	bcs.n	8007c70 <mbedtls_cipher_cmac_finish+0xd4>
    for (; i < n; i++) {
 8007cdc:	e018      	b.n	8007d10 <mbedtls_cipher_cmac_finish+0x174>
        r[i] = a[i] ^ b[i];
 8007cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ce2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ce6:	4413      	add	r3, r2
 8007ce8:	7819      	ldrb	r1, [r3, #0]
 8007cea:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007cee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cf2:	4413      	add	r3, r2
 8007cf4:	781a      	ldrb	r2, [r3, #0]
 8007cf6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8007cfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cfe:	4403      	add	r3, r0
 8007d00:	404a      	eors	r2, r1
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8007d06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007d14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d8e0      	bhi.n	8007cde <mbedtls_cipher_cmac_finish+0x142>
}
 8007d1c:	e06a      	b.n	8007df4 <mbedtls_cipher_cmac_finish+0x258>
 8007d1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007d26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    size_t i = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (; (i + 4) <= n; i += 4) {
 8007d44:	e02e      	b.n	8007da4 <mbedtls_cipher_cmac_finish+0x208>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8007d46:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007d4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d4e:	4413      	add	r3, r2
 8007d50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d58:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007d5a:	61fb      	str	r3, [r7, #28]
    return r;
 8007d5c:	69fa      	ldr	r2, [r7, #28]
 8007d5e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8007d62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d66:	440b      	add	r3, r1
 8007d68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d70:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007d72:	61bb      	str	r3, [r7, #24]
    return r;
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	4053      	eors	r3, r2
 8007d78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        mbedtls_put_unaligned_uint32(r + i, x);
 8007d7c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007d80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d84:	4413      	add	r3, r2
 8007d86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8007d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d96:	601a      	str	r2, [r3, #0]
}
 8007d98:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8007d9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d9e:	3304      	adds	r3, #4
 8007da0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007da4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007da8:	3304      	adds	r3, #4
 8007daa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d2c9      	bcs.n	8007d46 <mbedtls_cipher_cmac_finish+0x1aa>
    for (; i < n; i++) {
 8007db2:	e018      	b.n	8007de6 <mbedtls_cipher_cmac_finish+0x24a>
        r[i] = a[i] ^ b[i];
 8007db4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007db8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dbc:	4413      	add	r3, r2
 8007dbe:	7819      	ldrb	r1, [r3, #0]
 8007dc0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007dc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dc8:	4413      	add	r3, r2
 8007dca:	781a      	ldrb	r2, [r3, #0]
 8007dcc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007dd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dd4:	4403      	add	r3, r0
 8007dd6:	404a      	eors	r2, r1
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8007ddc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007de0:	3301      	adds	r3, #1
 8007de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007de6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007dea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d8e0      	bhi.n	8007db4 <mbedtls_cipher_cmac_finish+0x218>
}
 8007df2:	bf00      	nop
 8007df4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e06:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e0c:	677b      	str	r3, [r7, #116]	; 0x74
    size_t i = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	673b      	str	r3, [r7, #112]	; 0x70
    for (; (i + 4) <= n; i += 4) {
 8007e12:	e01f      	b.n	8007e54 <mbedtls_cipher_cmac_finish+0x2b8>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8007e14:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e18:	4413      	add	r3, r2
 8007e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e1e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007e20:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8007e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e24:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e28:	440b      	add	r3, r1
 8007e2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e2e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	4053      	eors	r3, r2
 8007e36:	667b      	str	r3, [r7, #100]	; 0x64
        mbedtls_put_unaligned_uint32(r + i, x);
 8007e38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e3e:	4413      	add	r3, r2
 8007e40:	663b      	str	r3, [r7, #96]	; 0x60
 8007e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e44:	623b      	str	r3, [r7, #32]
 8007e46:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8007e48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e4a:	601a      	str	r2, [r3, #0]
}
 8007e4c:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8007e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e50:	3304      	adds	r3, #4
 8007e52:	673b      	str	r3, [r7, #112]	; 0x70
 8007e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e56:	3304      	adds	r3, #4
 8007e58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d2da      	bcs.n	8007e14 <mbedtls_cipher_cmac_finish+0x278>
    for (; i < n; i++) {
 8007e5e:	e011      	b.n	8007e84 <mbedtls_cipher_cmac_finish+0x2e8>
        r[i] = a[i] ^ b[i];
 8007e60:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e64:	4413      	add	r3, r2
 8007e66:	7819      	ldrb	r1, [r3, #0]
 8007e68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e6c:	4413      	add	r3, r2
 8007e6e:	781a      	ldrb	r2, [r3, #0]
 8007e70:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8007e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e76:	4403      	add	r3, r0
 8007e78:	404a      	eors	r2, r1
 8007e7a:	b2d2      	uxtb	r2, r2
 8007e7c:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8007e7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e80:	3301      	adds	r3, #1
 8007e82:	673b      	str	r3, [r7, #112]	; 0x70
 8007e84:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d8e9      	bhi.n	8007e60 <mbedtls_cipher_cmac_finish+0x2c4>
}
 8007e8c:	bf00      	nop
        mbedtls_xor(M_last, last_block, K1, block_size);
    }


    mbedtls_xor(state, M_last, state, block_size);
    if ((ret = mbedtls_cipher_update(ctx, state, block_size, state,
 8007e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e98:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007e9c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7fe fc4f 	bl	8006744 <mbedtls_cipher_update>
 8007ea6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8007eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10a      	bne.n	8007ec8 <mbedtls_cipher_cmac_finish+0x32c>
                                     &olen)) != 0) {
        goto exit;
    }

    memcpy(output, state, block_size);
 8007eb2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007eb6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007eba:	6838      	ldr	r0, [r7, #0]
 8007ebc:	f004 ff53 	bl	800cd66 <memcpy>
 8007ec0:	e003      	b.n	8007eca <mbedtls_cipher_cmac_finish+0x32e>
 8007ec2:	bf00      	nop
 8007ec4:	ffff9f00 	.word	0xffff9f00
        goto exit;
 8007ec8:	bf00      	nop

exit:
    /* Wipe the generated keys on the stack, and any other transients to avoid
     * side channel leakage */
    mbedtls_platform_zeroize(K1, sizeof(K1));
 8007eca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007ece:	2110      	movs	r1, #16
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f002 fabf 	bl	800a454 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(K2, sizeof(K2));
 8007ed6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007eda:	2110      	movs	r1, #16
 8007edc:	4618      	mov	r0, r3
 8007ede:	f002 fab9 	bl	800a454 <mbedtls_platform_zeroize>

    cmac_ctx->unprocessed_len = 0;
 8007ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	621a      	str	r2, [r3, #32]
    mbedtls_platform_zeroize(cmac_ctx->unprocessed_block,
 8007eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eee:	3310      	adds	r3, #16
 8007ef0:	2110      	movs	r1, #16
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f002 faae 	bl	800a454 <mbedtls_platform_zeroize>
                             sizeof(cmac_ctx->unprocessed_block));

    mbedtls_platform_zeroize(state, MBEDTLS_CMAC_MAX_BLOCK_SIZE);
 8007ef8:	2110      	movs	r1, #16
 8007efa:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007efe:	f002 faa9 	bl	800a454 <mbedtls_platform_zeroize>
    return ret;
 8007f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	37e0      	adds	r7, #224	; 0xe0
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop

08007f10 <mbedtls_des_init>:
    {                                                   \
        uint32_t t = (a); (a) = (b); (b) = t; t = 0;    \
    } while (0)

void mbedtls_des_init(mbedtls_des_context *ctx)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_des_context));
 8007f18:	2280      	movs	r2, #128	; 0x80
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f004 fe97 	bl	800cc50 <memset>
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <mbedtls_des_free>:

void mbedtls_des_free(mbedtls_des_context *ctx)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d004      	beq.n	8007f42 <mbedtls_des_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_des_context));
 8007f38:	2180      	movs	r1, #128	; 0x80
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f002 fa8a 	bl	800a454 <mbedtls_platform_zeroize>
 8007f40:	e000      	b.n	8007f44 <mbedtls_des_free+0x1a>
        return;
 8007f42:	bf00      	nop
}
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <mbedtls_des3_init>:

void mbedtls_des3_init(mbedtls_des3_context *ctx)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_des3_context));
 8007f52:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8007f56:	2100      	movs	r1, #0
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f004 fe79 	bl	800cc50 <memset>
}
 8007f5e:	bf00      	nop
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <mbedtls_des3_free>:

void mbedtls_des3_free(mbedtls_des3_context *ctx)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d005      	beq.n	8007f80 <mbedtls_des3_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_des3_context));
 8007f74:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f002 fa6b 	bl	800a454 <mbedtls_platform_zeroize>
 8007f7e:	e000      	b.n	8007f82 <mbedtls_des3_free+0x1c>
        return;
 8007f80:	bf00      	nop
}
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <mbedtls_des_setkey>:
    return 0;
}

#if !defined(MBEDTLS_DES_SETKEY_ALT)
void mbedtls_des_setkey(uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE])
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b08b      	sub	sp, #44	; 0x2c
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	613b      	str	r3, [r7, #16]
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007f9a:	60fb      	str	r3, [r7, #12]
    return r;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
    int i;
    uint32_t X, Y, T;

    X = MBEDTLS_GET_UINT32_BE(key, 0);
 8007f9e:	ba1b      	rev	r3, r3
 8007fa0:	623b      	str	r3, [r7, #32]
    Y = MBEDTLS_GET_UINT32_BE(key, 4);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007fac:	60bb      	str	r3, [r7, #8]
    return r;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	ba1b      	rev	r3, r3
 8007fb2:	61fb      	str	r3, [r7, #28]

    /*
     * Permuted Choice 1
     */
    T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	091a      	lsrs	r2, r3, #4
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	4053      	eors	r3, r2
 8007fbc:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8007fc0:	61bb      	str	r3, [r7, #24]
 8007fc2:	6a3a      	ldr	r2, [r7, #32]
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	4053      	eors	r3, r2
 8007fc8:	623b      	str	r3, [r7, #32]
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	4053      	eors	r3, r2
 8007fd2:	61fb      	str	r3, [r7, #28]
    T =  ((Y) ^ X) & 0x10101010;  X ^= T; Y ^= (T);
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	4053      	eors	r3, r2
 8007fda:	f003 3310 	and.w	r3, r3, #269488144	; 0x10101010
 8007fde:	61bb      	str	r3, [r7, #24]
 8007fe0:	6a3a      	ldr	r2, [r7, #32]
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	4053      	eors	r3, r2
 8007fe6:	623b      	str	r3, [r7, #32]
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	4053      	eors	r3, r2
 8007fee:	61fb      	str	r3, [r7, #28]

    X =   (LHs[(X) & 0xF] << 3) | (LHs[(X >>  8) & 0xF] << 2)
 8007ff0:	6a3b      	ldr	r3, [r7, #32]
 8007ff2:	f003 030f 	and.w	r3, r3, #15
 8007ff6:	4a55      	ldr	r2, [pc, #340]	; (800814c <mbedtls_des_setkey+0x1c4>)
 8007ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ffc:	00da      	lsls	r2, r3, #3
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	0a1b      	lsrs	r3, r3, #8
 8008002:	f003 030f 	and.w	r3, r3, #15
 8008006:	4951      	ldr	r1, [pc, #324]	; (800814c <mbedtls_des_setkey+0x1c4>)
 8008008:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	431a      	orrs	r2, r3
        | (LHs[(X >> 16) & 0xF] << 1) | (LHs[(X >> 24) & 0xF])
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	0c1b      	lsrs	r3, r3, #16
 8008014:	f003 030f 	and.w	r3, r3, #15
 8008018:	494c      	ldr	r1, [pc, #304]	; (800814c <mbedtls_des_setkey+0x1c4>)
 800801a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800801e:	005b      	lsls	r3, r3, #1
 8008020:	431a      	orrs	r2, r3
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	0e1b      	lsrs	r3, r3, #24
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	4948      	ldr	r1, [pc, #288]	; (800814c <mbedtls_des_setkey+0x1c4>)
 800802c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008030:	431a      	orrs	r2, r3
        | (LHs[(X >>  5) & 0xF] << 7) | (LHs[(X >> 13) & 0xF] << 6)
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	095b      	lsrs	r3, r3, #5
 8008036:	f003 030f 	and.w	r3, r3, #15
 800803a:	4944      	ldr	r1, [pc, #272]	; (800814c <mbedtls_des_setkey+0x1c4>)
 800803c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008040:	01db      	lsls	r3, r3, #7
 8008042:	431a      	orrs	r2, r3
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	0b5b      	lsrs	r3, r3, #13
 8008048:	f003 030f 	and.w	r3, r3, #15
 800804c:	493f      	ldr	r1, [pc, #252]	; (800814c <mbedtls_des_setkey+0x1c4>)
 800804e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008052:	019b      	lsls	r3, r3, #6
 8008054:	431a      	orrs	r2, r3
        | (LHs[(X >> 21) & 0xF] << 5) | (LHs[(X >> 29) & 0xF] << 4);
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	0d5b      	lsrs	r3, r3, #21
 800805a:	f003 030f 	and.w	r3, r3, #15
 800805e:	493b      	ldr	r1, [pc, #236]	; (800814c <mbedtls_des_setkey+0x1c4>)
 8008060:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008064:	015b      	lsls	r3, r3, #5
 8008066:	431a      	orrs	r2, r3
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	0f5b      	lsrs	r3, r3, #29
 800806c:	4937      	ldr	r1, [pc, #220]	; (800814c <mbedtls_des_setkey+0x1c4>)
 800806e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008072:	011b      	lsls	r3, r3, #4
    X =   (LHs[(X) & 0xF] << 3) | (LHs[(X >>  8) & 0xF] << 2)
 8008074:	4313      	orrs	r3, r2
 8008076:	623b      	str	r3, [r7, #32]

    Y =   (RHs[(Y >>  1) & 0xF] << 3) | (RHs[(Y >>  9) & 0xF] << 2)
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	085b      	lsrs	r3, r3, #1
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	4a33      	ldr	r2, [pc, #204]	; (8008150 <mbedtls_des_setkey+0x1c8>)
 8008082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008086:	00da      	lsls	r2, r3, #3
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	0a5b      	lsrs	r3, r3, #9
 800808c:	f003 030f 	and.w	r3, r3, #15
 8008090:	492f      	ldr	r1, [pc, #188]	; (8008150 <mbedtls_des_setkey+0x1c8>)
 8008092:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	431a      	orrs	r2, r3
        | (RHs[(Y >> 17) & 0xF] << 1) | (RHs[(Y >> 25) & 0xF])
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	0c5b      	lsrs	r3, r3, #17
 800809e:	f003 030f 	and.w	r3, r3, #15
 80080a2:	492b      	ldr	r1, [pc, #172]	; (8008150 <mbedtls_des_setkey+0x1c8>)
 80080a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	431a      	orrs	r2, r3
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	0e5b      	lsrs	r3, r3, #25
 80080b0:	f003 030f 	and.w	r3, r3, #15
 80080b4:	4926      	ldr	r1, [pc, #152]	; (8008150 <mbedtls_des_setkey+0x1c8>)
 80080b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080ba:	431a      	orrs	r2, r3
        | (RHs[(Y >>  4) & 0xF] << 7) | (RHs[(Y >> 12) & 0xF] << 6)
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	091b      	lsrs	r3, r3, #4
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	4922      	ldr	r1, [pc, #136]	; (8008150 <mbedtls_des_setkey+0x1c8>)
 80080c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080ca:	01db      	lsls	r3, r3, #7
 80080cc:	431a      	orrs	r2, r3
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	0b1b      	lsrs	r3, r3, #12
 80080d2:	f003 030f 	and.w	r3, r3, #15
 80080d6:	491e      	ldr	r1, [pc, #120]	; (8008150 <mbedtls_des_setkey+0x1c8>)
 80080d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080dc:	019b      	lsls	r3, r3, #6
 80080de:	431a      	orrs	r2, r3
        | (RHs[(Y >> 20) & 0xF] << 5) | (RHs[(Y >> 28) & 0xF] << 4);
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	0d1b      	lsrs	r3, r3, #20
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	4919      	ldr	r1, [pc, #100]	; (8008150 <mbedtls_des_setkey+0x1c8>)
 80080ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080ee:	015b      	lsls	r3, r3, #5
 80080f0:	431a      	orrs	r2, r3
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	0f1b      	lsrs	r3, r3, #28
 80080f6:	4916      	ldr	r1, [pc, #88]	; (8008150 <mbedtls_des_setkey+0x1c8>)
 80080f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080fc:	011b      	lsls	r3, r3, #4
    Y =   (RHs[(Y >>  1) & 0xF] << 3) | (RHs[(Y >>  9) & 0xF] << 2)
 80080fe:	4313      	orrs	r3, r2
 8008100:	61fb      	str	r3, [r7, #28]

    X &= 0x0FFFFFFF;
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008108:	623b      	str	r3, [r7, #32]
    Y &= 0x0FFFFFFF;
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008110:	61fb      	str	r3, [r7, #28]

    /*
     * calculate subkeys
     */
    for (i = 0; i < 16; i++) {
 8008112:	2300      	movs	r3, #0
 8008114:	627b      	str	r3, [r7, #36]	; 0x24
 8008116:	e113      	b.n	8008340 <mbedtls_des_setkey+0x3b8>
        if (i < 2 || i == 8 || i == 15) {
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	2b01      	cmp	r3, #1
 800811c:	dd05      	ble.n	800812a <mbedtls_des_setkey+0x1a2>
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	2b08      	cmp	r3, #8
 8008122:	d002      	beq.n	800812a <mbedtls_des_setkey+0x1a2>
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	2b0f      	cmp	r3, #15
 8008128:	d114      	bne.n	8008154 <mbedtls_des_setkey+0x1cc>
            X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	005a      	lsls	r2, r3, #1
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	0edb      	lsrs	r3, r3, #27
 8008132:	4313      	orrs	r3, r2
 8008134:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008138:	623b      	str	r3, [r7, #32]
            Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	005a      	lsls	r2, r3, #1
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	0edb      	lsrs	r3, r3, #27
 8008142:	4313      	orrs	r3, r2
 8008144:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008148:	61fb      	str	r3, [r7, #28]
 800814a:	e013      	b.n	8008174 <mbedtls_des_setkey+0x1ec>
 800814c:	0800f214 	.word	0x0800f214
 8008150:	0800f254 	.word	0x0800f254
        } else {
            X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	009a      	lsls	r2, r3, #2
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	0e9b      	lsrs	r3, r3, #26
 800815c:	4313      	orrs	r3, r2
 800815e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008162:	623b      	str	r3, [r7, #32]
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	009a      	lsls	r2, r3, #2
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	0e9b      	lsrs	r3, r3, #26
 800816c:	4313      	orrs	r3, r2
 800816e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008172:	61fb      	str	r3, [r7, #28]
        }

        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	011b      	lsls	r3, r3, #4
 8008178:	f003 5210 	and.w	r2, r3, #603979776	; 0x24000000
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	071b      	lsls	r3, r3, #28
 8008180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008184:	431a      	orrs	r2, r3
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	039b      	lsls	r3, r3, #14
 800818a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800818e:	431a      	orrs	r2, r3
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	049b      	lsls	r3, r3, #18
 8008194:	f003 7302 	and.w	r3, r3, #34078720	; 0x2080000
 8008198:	431a      	orrs	r2, r3
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	019b      	lsls	r3, r3, #6
 800819e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081a2:	431a      	orrs	r2, r3
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	025b      	lsls	r3, r3, #9
 80081a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081ac:	431a      	orrs	r2, r3
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	085b      	lsrs	r3, r3, #1
 80081b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081b6:	431a      	orrs	r2, r3
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	029b      	lsls	r3, r3, #10
 80081bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081c0:	431a      	orrs	r2, r3
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ca:	431a      	orrs	r2, r3
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	0a9b      	lsrs	r3, r3, #10
 80081d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081d4:	431a      	orrs	r2, r3
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	0b5b      	lsrs	r3, r3, #13
 80081da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081de:	431a      	orrs	r2, r3
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	091b      	lsrs	r3, r3, #4
 80081e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081e8:	431a      	orrs	r2, r3
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	019b      	lsls	r3, r3, #6
 80081ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081f2:	431a      	orrs	r2, r3
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	085b      	lsrs	r3, r3, #1
 80081f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081fc:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000200) | ((Y) & 0x00000100)
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	0b9b      	lsrs	r3, r3, #14
 8008202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008206:	431a      	orrs	r2, r3
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820e:	431a      	orrs	r2, r3
                | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	095b      	lsrs	r3, r3, #5
 8008214:	f003 0320 	and.w	r3, r3, #32
 8008218:	431a      	orrs	r2, r3
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	0a9b      	lsrs	r3, r3, #10
 800821e:	f003 0310 	and.w	r3, r3, #16
 8008222:	431a      	orrs	r2, r3
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	08db      	lsrs	r3, r3, #3
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	431a      	orrs	r2, r3
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	0c9b      	lsrs	r3, r3, #18
 8008232:	f003 0304 	and.w	r3, r3, #4
 8008236:	431a      	orrs	r2, r3
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	0e9b      	lsrs	r3, r3, #26
 800823c:	f003 0302 	and.w	r3, r3, #2
 8008240:	ea42 0103 	orr.w	r1, r2, r3
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	0e1b      	lsrs	r3, r3, #24
 8008248:	f003 0201 	and.w	r2, r3, #1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	1d18      	adds	r0, r3, #4
 8008250:	6078      	str	r0, [r7, #4]
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 8008252:	430a      	orrs	r2, r1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 8008254:	601a      	str	r2, [r3, #0]

        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	03db      	lsls	r3, r3, #15
 800825a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	045b      	lsls	r3, r3, #17
 8008262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008266:	431a      	orrs	r2, r3
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	029b      	lsls	r3, r3, #10
 800826c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008270:	431a      	orrs	r2, r3
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	059b      	lsls	r3, r3, #22
 8008276:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800827a:	431a      	orrs	r2, r3
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	089b      	lsrs	r3, r3, #2
 8008280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008284:	431a      	orrs	r2, r3
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800828e:	431a      	orrs	r2, r3
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	041b      	lsls	r3, r3, #16
 8008294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008298:	431a      	orrs	r2, r3
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	02db      	lsls	r3, r3, #11
 800829e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082a2:	431a      	orrs	r2, r3
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082ac:	431a      	orrs	r2, r3
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	099b      	lsrs	r3, r3, #6
 80082b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082b6:	431a      	orrs	r2, r3
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	03db      	lsls	r3, r3, #15
 80082bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c0:	431a      	orrs	r2, r3
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	091b      	lsrs	r3, r3, #4
 80082c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082ca:	431a      	orrs	r2, r3
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	089b      	lsrs	r3, r3, #2
 80082d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082d4:	431a      	orrs	r2, r3
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	021b      	lsls	r3, r3, #8
 80082da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082de:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	0b99      	lsrs	r1, r3, #14
 80082e4:	f640 0308 	movw	r3, #2056	; 0x808
 80082e8:	400b      	ands	r3, r1
 80082ea:	431a      	orrs	r2, r3
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	0a5b      	lsrs	r3, r3, #9
 80082f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082f4:	431a      	orrs	r2, r3
                | ((Y) & 0x00000200) | ((Y <<  7) & 0x00000100)
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082fc:	431a      	orrs	r2, r3
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	01db      	lsls	r3, r3, #7
 8008302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008306:	431a      	orrs	r2, r3
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	09db      	lsrs	r3, r3, #7
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	431a      	orrs	r2, r3
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	08db      	lsrs	r3, r3, #3
 8008316:	f003 0311 	and.w	r3, r3, #17
 800831a:	431a      	orrs	r2, r3
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	f003 0304 	and.w	r3, r3, #4
 8008324:	ea42 0103 	orr.w	r1, r2, r3
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	0d5b      	lsrs	r3, r3, #21
 800832c:	f003 0202 	and.w	r2, r3, #2
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	1d18      	adds	r0, r3, #4
 8008334:	6078      	str	r0, [r7, #4]
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 8008336:	430a      	orrs	r2, r1
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8008338:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 16; i++) {
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	3301      	adds	r3, #1
 800833e:	627b      	str	r3, [r7, #36]	; 0x24
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	2b0f      	cmp	r3, #15
 8008344:	f77f aee8 	ble.w	8008118 <mbedtls_des_setkey+0x190>
    }
}
 8008348:	bf00      	nop
 800834a:	bf00      	nop
 800834c:	372c      	adds	r7, #44	; 0x2c
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop

08008358 <mbedtls_des_setkey_enc>:

/*
 * DES key schedule (56-bit, encryption)
 */
int mbedtls_des_setkey_enc(mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE])
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
    mbedtls_des_setkey(ctx->sk, key);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	4618      	mov	r0, r3
 8008368:	f7ff fe0e 	bl	8007f88 <mbedtls_des_setkey>

    return 0;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <mbedtls_des_setkey_dec>:

/*
 * DES key schedule (56-bit, decryption)
 */
int mbedtls_des_setkey_dec(mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE])
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b086      	sub	sp, #24
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
    int i;

    mbedtls_des_setkey(ctx->sk, key);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff fdff 	bl	8007f88 <mbedtls_des_setkey>

    for (i = 0; i < 16; i += 2) {
 800838a:	2300      	movs	r3, #0
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	e034      	b.n	80083fa <mbedtls_des_setkey_dec+0x84>
        SWAP(ctx->sk[i], ctx->sk[30 - i]);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008398:	613b      	str	r3, [r7, #16]
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f1c3 021e 	rsb	r2, r3, #30
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f1c3 021e 	rsb	r2, r3, #30
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6939      	ldr	r1, [r7, #16]
 80083b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80083bc:	2300      	movs	r3, #0
 80083be:	613b      	str	r3, [r7, #16]
        SWAP(ctx->sk[i + 1], ctx->sk[31 - i]);
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	f1c3 011f 	rsb	r1, r3, #31
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f1c3 021f 	rsb	r2, r3, #31
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68f9      	ldr	r1, [r7, #12]
 80083ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80083f0:	2300      	movs	r3, #0
 80083f2:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 16; i += 2) {
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	3302      	adds	r3, #2
 80083f8:	617b      	str	r3, [r7, #20]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b0f      	cmp	r3, #15
 80083fe:	ddc7      	ble.n	8008390 <mbedtls_des_setkey_dec+0x1a>
    }

    return 0;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <des3_set2key>:

static void des3_set2key(uint32_t esk[96],
                         uint32_t dsk[96],
                         const unsigned char key[MBEDTLS_DES_KEY_SIZE*2])
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b086      	sub	sp, #24
 800840e:	af00      	add	r7, sp, #0
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	60b9      	str	r1, [r7, #8]
 8008414:	607a      	str	r2, [r7, #4]
    int i;

    mbedtls_des_setkey(esk, key);
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f7ff fdb5 	bl	8007f88 <mbedtls_des_setkey>
    mbedtls_des_setkey(dsk + 32, key + 8);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3308      	adds	r3, #8
 8008428:	4619      	mov	r1, r3
 800842a:	4610      	mov	r0, r2
 800842c:	f7ff fdac 	bl	8007f88 <mbedtls_des_setkey>

    for (i = 0; i < 32; i += 2) {
 8008430:	2300      	movs	r3, #0
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	e063      	b.n	80084fe <des3_set2key+0xf4>
        dsk[i] = esk[30 - i];
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f1c3 031e 	rsb	r3, r3, #30
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	441a      	add	r2, r3
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	68b9      	ldr	r1, [r7, #8]
 8008448:	440b      	add	r3, r1
 800844a:	6812      	ldr	r2, [r2, #0]
 800844c:	601a      	str	r2, [r3, #0]
        dsk[i +  1] = esk[31 - i];
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f1c3 031f 	rsb	r3, r3, #31
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	441a      	add	r2, r3
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	3301      	adds	r3, #1
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	440b      	add	r3, r1
 8008464:	6812      	ldr	r2, [r2, #0]
 8008466:	601a      	str	r2, [r3, #0]

        esk[i + 32] = dsk[62 - i];
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	441a      	add	r2, r3
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	3320      	adds	r3, #32
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	68f9      	ldr	r1, [r7, #12]
 800847c:	440b      	add	r3, r1
 800847e:	6812      	ldr	r2, [r2, #0]
 8008480:	601a      	str	r2, [r3, #0]
        esk[i + 33] = dsk[63 - i];
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	441a      	add	r2, r3
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	3321      	adds	r3, #33	; 0x21
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	68f9      	ldr	r1, [r7, #12]
 8008496:	440b      	add	r3, r1
 8008498:	6812      	ldr	r2, [r2, #0]
 800849a:	601a      	str	r2, [r3, #0]

        esk[i + 64] = esk[i];
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	441a      	add	r2, r3
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	3340      	adds	r3, #64	; 0x40
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	68f9      	ldr	r1, [r7, #12]
 80084ac:	440b      	add	r3, r1
 80084ae:	6812      	ldr	r2, [r2, #0]
 80084b0:	601a      	str	r2, [r3, #0]
        esk[i + 65] = esk[i + 1];
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	3301      	adds	r3, #1
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	441a      	add	r2, r3
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	3341      	adds	r3, #65	; 0x41
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	68f9      	ldr	r1, [r7, #12]
 80084c4:	440b      	add	r3, r1
 80084c6:	6812      	ldr	r2, [r2, #0]
 80084c8:	601a      	str	r2, [r3, #0]

        dsk[i + 64] = dsk[i];
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	441a      	add	r2, r3
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	3340      	adds	r3, #64	; 0x40
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	68b9      	ldr	r1, [r7, #8]
 80084da:	440b      	add	r3, r1
 80084dc:	6812      	ldr	r2, [r2, #0]
 80084de:	601a      	str	r2, [r3, #0]
        dsk[i + 65] = dsk[i + 1];
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	3301      	adds	r3, #1
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	441a      	add	r2, r3
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	3341      	adds	r3, #65	; 0x41
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	68b9      	ldr	r1, [r7, #8]
 80084f2:	440b      	add	r3, r1
 80084f4:	6812      	ldr	r2, [r2, #0]
 80084f6:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 32; i += 2) {
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	3302      	adds	r3, #2
 80084fc:	617b      	str	r3, [r7, #20]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b1f      	cmp	r3, #31
 8008502:	dd98      	ble.n	8008436 <des3_set2key+0x2c>
    }
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <mbedtls_des3_set2key_enc>:
/*
 * Triple-DES key schedule (112-bit, encryption)
 */
int mbedtls_des3_set2key_enc(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2])
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b0e2      	sub	sp, #392	; 0x188
 8008512:	af00      	add	r7, sp, #0
 8008514:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8008518:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800851c:	6018      	str	r0, [r3, #0]
 800851e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8008522:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008526:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set2key(ctx->sk, sk, key);
 8008528:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800852c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8008536:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800853a:	f107 0108 	add.w	r1, r7, #8
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	f7ff ff63 	bl	800840a <des3_set2key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 8008544:	f107 0308 	add.w	r3, r7, #8
 8008548:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800854c:	4618      	mov	r0, r3
 800854e:	f001 ff81 	bl	800a454 <mbedtls_platform_zeroize>

    return 0;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <mbedtls_des3_set2key_dec>:
/*
 * Triple-DES key schedule (112-bit, decryption)
 */
int mbedtls_des3_set2key_dec(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2])
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b0e2      	sub	sp, #392	; 0x188
 8008562:	af00      	add	r7, sp, #0
 8008564:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8008568:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800856c:	6018      	str	r0, [r3, #0]
 800856e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8008572:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008576:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set2key(sk, ctx->sk, key);
 8008578:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800857c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008580:	6819      	ldr	r1, [r3, #0]
 8008582:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8008586:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800858a:	f107 0008 	add.w	r0, r7, #8
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	f7ff ff3b 	bl	800840a <des3_set2key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 8008594:	f107 0308 	add.w	r3, r7, #8
 8008598:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800859c:	4618      	mov	r0, r3
 800859e:	f001 ff59 	bl	800a454 <mbedtls_platform_zeroize>

    return 0;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <des3_set3key>:

static void des3_set3key(uint32_t esk[96],
                         uint32_t dsk[96],
                         const unsigned char key[24])
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b086      	sub	sp, #24
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	607a      	str	r2, [r7, #4]
    int i;

    mbedtls_des_setkey(esk, key);
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7ff fce3 	bl	8007f88 <mbedtls_des_setkey>
    mbedtls_des_setkey(dsk + 32, key +  8);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3308      	adds	r3, #8
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	f7ff fcda 	bl	8007f88 <mbedtls_des_setkey>
    mbedtls_des_setkey(esk + 64, key + 16);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	3310      	adds	r3, #16
 80085de:	4619      	mov	r1, r3
 80085e0:	4610      	mov	r0, r2
 80085e2:	f7ff fcd1 	bl	8007f88 <mbedtls_des_setkey>

    for (i = 0; i < 32; i += 2) {
 80085e6:	2300      	movs	r3, #0
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	e04f      	b.n	800868c <des3_set3key+0xde>
        dsk[i] = esk[94 - i];
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	441a      	add	r2, r3
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	68b9      	ldr	r1, [r7, #8]
 80085fe:	440b      	add	r3, r1
 8008600:	6812      	ldr	r2, [r2, #0]
 8008602:	601a      	str	r2, [r3, #0]
        dsk[i +  1] = esk[95 - i];
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	441a      	add	r2, r3
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	3301      	adds	r3, #1
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	68b9      	ldr	r1, [r7, #8]
 8008618:	440b      	add	r3, r1
 800861a:	6812      	ldr	r2, [r2, #0]
 800861c:	601a      	str	r2, [r3, #0]

        esk[i + 32] = dsk[62 - i];
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	441a      	add	r2, r3
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	3320      	adds	r3, #32
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	68f9      	ldr	r1, [r7, #12]
 8008632:	440b      	add	r3, r1
 8008634:	6812      	ldr	r2, [r2, #0]
 8008636:	601a      	str	r2, [r3, #0]
        esk[i + 33] = dsk[63 - i];
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	441a      	add	r2, r3
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	3321      	adds	r3, #33	; 0x21
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	68f9      	ldr	r1, [r7, #12]
 800864c:	440b      	add	r3, r1
 800864e:	6812      	ldr	r2, [r2, #0]
 8008650:	601a      	str	r2, [r3, #0]

        dsk[i + 64] = esk[30 - i];
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f1c3 031e 	rsb	r3, r3, #30
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	441a      	add	r2, r3
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	3340      	adds	r3, #64	; 0x40
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	68b9      	ldr	r1, [r7, #8]
 8008666:	440b      	add	r3, r1
 8008668:	6812      	ldr	r2, [r2, #0]
 800866a:	601a      	str	r2, [r3, #0]
        dsk[i + 65] = esk[31 - i];
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f1c3 031f 	rsb	r3, r3, #31
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	441a      	add	r2, r3
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	3341      	adds	r3, #65	; 0x41
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	440b      	add	r3, r1
 8008682:	6812      	ldr	r2, [r2, #0]
 8008684:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 32; i += 2) {
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	3302      	adds	r3, #2
 800868a:	617b      	str	r3, [r7, #20]
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2b1f      	cmp	r3, #31
 8008690:	ddac      	ble.n	80085ec <des3_set3key+0x3e>
    }
}
 8008692:	bf00      	nop
 8008694:	bf00      	nop
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <mbedtls_des3_set3key_enc>:
/*
 * Triple-DES key schedule (168-bit, encryption)
 */
int mbedtls_des3_set3key_enc(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3])
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b0e2      	sub	sp, #392	; 0x188
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80086a6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80086aa:	6018      	str	r0, [r3, #0]
 80086ac:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80086b0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80086b4:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key(ctx->sk, sk, key);
 80086b6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80086ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80086be:	6818      	ldr	r0, [r3, #0]
 80086c0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80086c4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80086c8:	f107 0108 	add.w	r1, r7, #8
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	f7ff ff6e 	bl	80085ae <des3_set3key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 80086d2:	f107 0308 	add.w	r3, r7, #8
 80086d6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80086da:	4618      	mov	r0, r3
 80086dc:	f001 feba 	bl	800a454 <mbedtls_platform_zeroize>

    return 0;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <mbedtls_des3_set3key_dec>:
/*
 * Triple-DES key schedule (168-bit, decryption)
 */
int mbedtls_des3_set3key_dec(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3])
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b0e2      	sub	sp, #392	; 0x188
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80086f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80086fa:	6018      	str	r0, [r3, #0]
 80086fc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8008700:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008704:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key(sk, ctx->sk, key);
 8008706:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800870a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800870e:	6819      	ldr	r1, [r3, #0]
 8008710:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8008714:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008718:	f107 0008 	add.w	r0, r7, #8
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	f7ff ff46 	bl	80085ae <des3_set3key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 8008722:	f107 0308 	add.w	r3, r7, #8
 8008726:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800872a:	4618      	mov	r0, r3
 800872c:	f001 fe92 	bl	800a454 <mbedtls_platform_zeroize>

    return 0;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <mbedtls_des_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES_CRYPT_ECB_ALT)
int mbedtls_des_crypt_ecb(mbedtls_des_context *ctx,
                          const unsigned char input[8],
                          unsigned char output[8])
{
 800873c:	b480      	push	{r7}
 800873e:	b093      	sub	sp, #76	; 0x4c
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	63bb      	str	r3, [r7, #56]	; 0x38
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008752:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008754:	61bb      	str	r3, [r7, #24]
    return r;
 8008756:	69bb      	ldr	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE(input, 0);
 8008758:	ba1b      	rev	r3, r3
 800875a:	643b      	str	r3, [r7, #64]	; 0x40
    Y = MBEDTLS_GET_UINT32_BE(input, 4);
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	3304      	adds	r3, #4
 8008760:	633b      	str	r3, [r7, #48]	; 0x30
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008766:	617b      	str	r3, [r7, #20]
    return r;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	ba1b      	rev	r3, r3
 800876c:	63fb      	str	r3, [r7, #60]	; 0x3c

    DES_IP(X, Y);
 800876e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008770:	091a      	lsrs	r2, r3, #4
 8008772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008774:	4053      	eors	r3, r2
 8008776:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800877a:	637b      	str	r3, [r7, #52]	; 0x34
 800877c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800877e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008780:	4053      	eors	r3, r2
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800878a:	4053      	eors	r3, r2
 800878c:	643b      	str	r3, [r7, #64]	; 0x40
 800878e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008790:	0c1a      	lsrs	r2, r3, #16
 8008792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008794:	4053      	eors	r3, r2
 8008796:	b29b      	uxth	r3, r3
 8008798:	637b      	str	r3, [r7, #52]	; 0x34
 800879a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800879c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879e:	4053      	eors	r3, r2
 80087a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a4:	041b      	lsls	r3, r3, #16
 80087a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087a8:	4053      	eors	r3, r2
 80087aa:	643b      	str	r3, [r7, #64]	; 0x40
 80087ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ae:	089a      	lsrs	r2, r3, #2
 80087b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b2:	4053      	eors	r3, r2
 80087b4:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80087b8:	637b      	str	r3, [r7, #52]	; 0x34
 80087ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087be:	4053      	eors	r3, r2
 80087c0:	643b      	str	r3, [r7, #64]	; 0x40
 80087c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087c8:	4053      	eors	r3, r2
 80087ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ce:	0a1a      	lsrs	r2, r3, #8
 80087d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d2:	4053      	eors	r3, r2
 80087d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80087d8:	637b      	str	r3, [r7, #52]	; 0x34
 80087da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087de:	4053      	eors	r3, r2
 80087e0:	643b      	str	r3, [r7, #64]	; 0x40
 80087e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087e8:	4053      	eors	r3, r2
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f8:	4053      	eors	r3, r2
 80087fa:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008804:	4053      	eors	r3, r2
 8008806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800880a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880c:	4053      	eors	r3, r2
 800880e:	643b      	str	r3, [r7, #64]	; 0x40
 8008810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008812:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008816:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < 8; i++) {
 8008818:	2300      	movs	r3, #0
 800881a:	647b      	str	r3, [r7, #68]	; 0x44
 800881c:	e0a6      	b.n	800896c <mbedtls_des_crypt_ecb+0x230>
        DES_ROUND(Y, X);
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	1d1a      	adds	r2, r3, #4
 8008822:	63ba      	str	r2, [r7, #56]	; 0x38
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008828:	4053      	eors	r3, r2
 800882a:	637b      	str	r3, [r7, #52]	; 0x34
 800882c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008832:	4a88      	ldr	r2, [pc, #544]	; (8008a54 <mbedtls_des_crypt_ecb+0x318>)
 8008834:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883a:	0a1b      	lsrs	r3, r3, #8
 800883c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008840:	4985      	ldr	r1, [pc, #532]	; (8008a58 <mbedtls_des_crypt_ecb+0x31c>)
 8008842:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008846:	405a      	eors	r2, r3
 8008848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884a:	0c1b      	lsrs	r3, r3, #16
 800884c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008850:	4982      	ldr	r1, [pc, #520]	; (8008a5c <mbedtls_des_crypt_ecb+0x320>)
 8008852:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008856:	405a      	eors	r2, r3
 8008858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885a:	0e1b      	lsrs	r3, r3, #24
 800885c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008860:	497f      	ldr	r1, [pc, #508]	; (8008a60 <mbedtls_des_crypt_ecb+0x324>)
 8008862:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008866:	4053      	eors	r3, r2
 8008868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800886a:	4053      	eors	r3, r2
 800886c:	643b      	str	r3, [r7, #64]	; 0x40
 800886e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008870:	1d1a      	adds	r2, r3, #4
 8008872:	63ba      	str	r2, [r7, #56]	; 0x38
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008878:	ea4f 1333 	mov.w	r3, r3, ror #4
 800887c:	4053      	eors	r3, r2
 800887e:	637b      	str	r3, [r7, #52]	; 0x34
 8008880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008886:	4a77      	ldr	r2, [pc, #476]	; (8008a64 <mbedtls_des_crypt_ecb+0x328>)
 8008888:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800888c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888e:	0a1b      	lsrs	r3, r3, #8
 8008890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008894:	4974      	ldr	r1, [pc, #464]	; (8008a68 <mbedtls_des_crypt_ecb+0x32c>)
 8008896:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800889a:	405a      	eors	r2, r3
 800889c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889e:	0c1b      	lsrs	r3, r3, #16
 80088a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088a4:	4971      	ldr	r1, [pc, #452]	; (8008a6c <mbedtls_des_crypt_ecb+0x330>)
 80088a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088aa:	405a      	eors	r2, r3
 80088ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ae:	0e1b      	lsrs	r3, r3, #24
 80088b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088b4:	496e      	ldr	r1, [pc, #440]	; (8008a70 <mbedtls_des_crypt_ecb+0x334>)
 80088b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088ba:	4053      	eors	r3, r2
 80088bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088be:	4053      	eors	r3, r2
 80088c0:	643b      	str	r3, [r7, #64]	; 0x40
        DES_ROUND(X, Y);
 80088c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c4:	1d1a      	adds	r2, r3, #4
 80088c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088cc:	4053      	eors	r3, r2
 80088ce:	637b      	str	r3, [r7, #52]	; 0x34
 80088d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088d6:	4a5f      	ldr	r2, [pc, #380]	; (8008a54 <mbedtls_des_crypt_ecb+0x318>)
 80088d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088de:	0a1b      	lsrs	r3, r3, #8
 80088e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088e4:	495c      	ldr	r1, [pc, #368]	; (8008a58 <mbedtls_des_crypt_ecb+0x31c>)
 80088e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088ea:	405a      	eors	r2, r3
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	0c1b      	lsrs	r3, r3, #16
 80088f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088f4:	4959      	ldr	r1, [pc, #356]	; (8008a5c <mbedtls_des_crypt_ecb+0x320>)
 80088f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088fa:	405a      	eors	r2, r3
 80088fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fe:	0e1b      	lsrs	r3, r3, #24
 8008900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008904:	4956      	ldr	r1, [pc, #344]	; (8008a60 <mbedtls_des_crypt_ecb+0x324>)
 8008906:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800890a:	4053      	eors	r3, r2
 800890c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800890e:	4053      	eors	r3, r2
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	1d1a      	adds	r2, r3, #4
 8008916:	63ba      	str	r2, [r7, #56]	; 0x38
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800891c:	ea4f 1333 	mov.w	r3, r3, ror #4
 8008920:	4053      	eors	r3, r2
 8008922:	637b      	str	r3, [r7, #52]	; 0x34
 8008924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800892a:	4a4e      	ldr	r2, [pc, #312]	; (8008a64 <mbedtls_des_crypt_ecb+0x328>)
 800892c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008932:	0a1b      	lsrs	r3, r3, #8
 8008934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008938:	494b      	ldr	r1, [pc, #300]	; (8008a68 <mbedtls_des_crypt_ecb+0x32c>)
 800893a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800893e:	405a      	eors	r2, r3
 8008940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008942:	0c1b      	lsrs	r3, r3, #16
 8008944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008948:	4948      	ldr	r1, [pc, #288]	; (8008a6c <mbedtls_des_crypt_ecb+0x330>)
 800894a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800894e:	405a      	eors	r2, r3
 8008950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008952:	0e1b      	lsrs	r3, r3, #24
 8008954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008958:	4945      	ldr	r1, [pc, #276]	; (8008a70 <mbedtls_des_crypt_ecb+0x334>)
 800895a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800895e:	4053      	eors	r3, r2
 8008960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008962:	4053      	eors	r3, r2
 8008964:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < 8; i++) {
 8008966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008968:	3301      	adds	r3, #1
 800896a:	647b      	str	r3, [r7, #68]	; 0x44
 800896c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800896e:	2b07      	cmp	r3, #7
 8008970:	f77f af55 	ble.w	800881e <mbedtls_des_crypt_ecb+0xe2>
    }

    DES_FP(Y, X);
 8008974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008976:	ea4f 0373 	mov.w	r3, r3, ror #1
 800897a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800897c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800897e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008980:	4053      	eors	r3, r2
 8008982:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8008986:	637b      	str	r3, [r7, #52]	; 0x34
 8008988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800898a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898c:	4053      	eors	r3, r2
 800898e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008990:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008994:	4053      	eors	r3, r2
 8008996:	643b      	str	r3, [r7, #64]	; 0x40
 8008998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800899a:	ea4f 0373 	mov.w	r3, r3, ror #1
 800899e:	643b      	str	r3, [r7, #64]	; 0x40
 80089a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089a2:	0a1a      	lsrs	r2, r3, #8
 80089a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a6:	4053      	eors	r3, r2
 80089a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80089ac:	637b      	str	r3, [r7, #52]	; 0x34
 80089ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b2:	4053      	eors	r3, r2
 80089b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b8:	021b      	lsls	r3, r3, #8
 80089ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089bc:	4053      	eors	r3, r2
 80089be:	643b      	str	r3, [r7, #64]	; 0x40
 80089c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c2:	089a      	lsrs	r2, r3, #2
 80089c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c6:	4053      	eors	r3, r2
 80089c8:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80089cc:	637b      	str	r3, [r7, #52]	; 0x34
 80089ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d2:	4053      	eors	r3, r2
 80089d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089dc:	4053      	eors	r3, r2
 80089de:	643b      	str	r3, [r7, #64]	; 0x40
 80089e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e2:	0c1a      	lsrs	r2, r3, #16
 80089e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e6:	4053      	eors	r3, r2
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	637b      	str	r3, [r7, #52]	; 0x34
 80089ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f0:	4053      	eors	r3, r2
 80089f2:	643b      	str	r3, [r7, #64]	; 0x40
 80089f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f6:	041b      	lsls	r3, r3, #16
 80089f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089fa:	4053      	eors	r3, r2
 80089fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a00:	091a      	lsrs	r2, r3, #4
 8008a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a04:	4053      	eors	r3, r2
 8008a06:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8008a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a10:	4053      	eors	r3, r2
 8008a12:	643b      	str	r3, [r7, #64]	; 0x40
 8008a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a1a:	4053      	eors	r3, r2
 8008a1c:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT32_BE(Y, output, 0);
 8008a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a20:	ba1b      	rev	r3, r3
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	62ba      	str	r2, [r7, #40]	; 0x28
 8008a26:	61fb      	str	r3, [r7, #28]
 8008a28:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 8008a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2c:	601a      	str	r2, [r3, #0]
}
 8008a2e:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X, output, 4);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	1d1a      	adds	r2, r3, #4
 8008a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a36:	ba1b      	rev	r3, r3
 8008a38:	627a      	str	r2, [r7, #36]	; 0x24
 8008a3a:	623b      	str	r3, [r7, #32]
 8008a3c:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	601a      	str	r2, [r3, #0]
}
 8008a42:	bf00      	nop

    return 0;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	374c      	adds	r7, #76	; 0x4c
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	0800f114 	.word	0x0800f114
 8008a58:	0800ef14 	.word	0x0800ef14
 8008a5c:	0800ed14 	.word	0x0800ed14
 8008a60:	0800eb14 	.word	0x0800eb14
 8008a64:	0800f014 	.word	0x0800f014
 8008a68:	0800ee14 	.word	0x0800ee14
 8008a6c:	0800ec14 	.word	0x0800ec14
 8008a70:	0800ea14 	.word	0x0800ea14

08008a74 <mbedtls_des_crypt_cbc>:
                          int mode,
                          size_t length,
                          unsigned char iv[8],
                          const unsigned char *input,
                          unsigned char *output)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b0a0      	sub	sp, #128	; 0x80
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008a82:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8008a86:	67fb      	str	r3, [r7, #124]	; 0x7c
    unsigned char temp[8];

    if (length % 8) {
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f003 0307 	and.w	r3, r3, #7
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <mbedtls_des_crypt_cbc+0x24>
        return MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH;
 8008a92:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8008a96:	e0e7      	b.n	8008c68 <mbedtls_des_crypt_cbc+0x1f4>
    }

    if (mode == MBEDTLS_DES_ENCRYPT) {
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	f040 80da 	bne.w	8008c54 <mbedtls_des_crypt_cbc+0x1e0>
        while (length > 0) {
 8008aa0:	e066      	b.n	8008b70 <mbedtls_des_crypt_cbc+0xfc>
 8008aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008aa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8008aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008aac:	677b      	str	r3, [r7, #116]	; 0x74
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	673b      	str	r3, [r7, #112]	; 0x70
 8008ab2:	2308      	movs	r3, #8
 8008ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
    size_t i = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	66bb      	str	r3, [r7, #104]	; 0x68
    for (; (i + 4) <= n; i += 4) {
 8008aba:	e01e      	b.n	8008afa <mbedtls_des_crypt_cbc+0x86>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8008abc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008abe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ac0:	4413      	add	r3, r2
 8008ac2:	667b      	str	r3, [r7, #100]	; 0x64
 8008ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ac6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008ac8:	61fb      	str	r3, [r7, #28]
    return r;
 8008aca:	69fa      	ldr	r2, [r7, #28]
 8008acc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ad0:	440b      	add	r3, r1
 8008ad2:	663b      	str	r3, [r7, #96]	; 0x60
 8008ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ad6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008ad8:	61bb      	str	r3, [r7, #24]
    return r;
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	4053      	eors	r3, r2
 8008ade:	65fb      	str	r3, [r7, #92]	; 0x5c
        mbedtls_put_unaligned_uint32(r + i, x);
 8008ae0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ae4:	4413      	add	r3, r2
 8008ae6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8008aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008af0:	601a      	str	r2, [r3, #0]
}
 8008af2:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8008af4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008af6:	3304      	adds	r3, #4
 8008af8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008afa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008afc:	3304      	adds	r3, #4
 8008afe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d2db      	bcs.n	8008abc <mbedtls_des_crypt_cbc+0x48>
    for (; i < n; i++) {
 8008b04:	e010      	b.n	8008b28 <mbedtls_des_crypt_cbc+0xb4>
        r[i] = a[i] ^ b[i];
 8008b06:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b0a:	4413      	add	r3, r2
 8008b0c:	7819      	ldrb	r1, [r3, #0]
 8008b0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b12:	4413      	add	r3, r2
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8008b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b1a:	4403      	add	r3, r0
 8008b1c:	404a      	eors	r2, r1
 8008b1e:	b2d2      	uxtb	r2, r2
 8008b20:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8008b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b24:	3301      	adds	r3, #1
 8008b26:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d8ea      	bhi.n	8008b06 <mbedtls_des_crypt_cbc+0x92>
}
 8008b30:	bf00      	nop
            mbedtls_xor(output, input, iv, 8);

            ret = mbedtls_des_crypt_ecb(ctx, output, output);
 8008b32:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008b36:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f7ff fdfe 	bl	800873c <mbedtls_des_crypt_ecb>
 8008b40:	67f8      	str	r0, [r7, #124]	; 0x7c
            if (ret != 0) {
 8008b42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f040 808b 	bne.w	8008c60 <mbedtls_des_crypt_cbc+0x1ec>
                goto exit;
            }
            memcpy(iv, output, 8);
 8008b4a:	2208      	movs	r2, #8
 8008b4c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008b50:	6838      	ldr	r0, [r7, #0]
 8008b52:	f004 f908 	bl	800cd66 <memcpy>

            input  += 8;
 8008b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            output += 8;
 8008b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b64:	3308      	adds	r3, #8
 8008b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            length -= 8;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3b08      	subs	r3, #8
 8008b6e:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d195      	bne.n	8008aa2 <mbedtls_des_crypt_cbc+0x2e>
 8008b76:	e070      	b.n	8008c5a <mbedtls_des_crypt_cbc+0x1e6>
        }
    } else { /* MBEDTLS_DES_DECRYPT */
        while (length > 0) {
            memcpy(temp, input, 8);
 8008b78:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b80:	6810      	ldr	r0, [r2, #0]
 8008b82:	6851      	ldr	r1, [r2, #4]
 8008b84:	c303      	stmia	r3!, {r0, r1}
            ret = mbedtls_des_crypt_ecb(ctx, input, output);
 8008b86:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008b8a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f7ff fdd4 	bl	800873c <mbedtls_des_crypt_ecb>
 8008b94:	67f8      	str	r0, [r7, #124]	; 0x7c
            if (ret != 0) {
 8008b96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d163      	bne.n	8008c64 <mbedtls_des_crypt_cbc+0x1f0>
 8008b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ba0:	657b      	str	r3, [r7, #84]	; 0x54
 8008ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ba6:	653b      	str	r3, [r7, #80]	; 0x50
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bac:	2308      	movs	r3, #8
 8008bae:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t i = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	647b      	str	r3, [r7, #68]	; 0x44
    for (; (i + 4) <= n; i += 4) {
 8008bb4:	e01e      	b.n	8008bf4 <mbedtls_des_crypt_cbc+0x180>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8008bb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bba:	4413      	add	r3, r2
 8008bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8008bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bc0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8008bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bc6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bca:	440b      	add	r3, r1
 8008bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008bd2:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	4053      	eors	r3, r2
 8008bd8:	63bb      	str	r3, [r7, #56]	; 0x38
        mbedtls_put_unaligned_uint32(r + i, x);
 8008bda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bde:	4413      	add	r3, r2
 8008be0:	637b      	str	r3, [r7, #52]	; 0x34
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	623b      	str	r3, [r7, #32]
 8008be6:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8008be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bea:	601a      	str	r2, [r3, #0]
}
 8008bec:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8008bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8008bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d2db      	bcs.n	8008bb6 <mbedtls_des_crypt_cbc+0x142>
    for (; i < n; i++) {
 8008bfe:	e010      	b.n	8008c22 <mbedtls_des_crypt_cbc+0x1ae>
        r[i] = a[i] ^ b[i];
 8008c00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c04:	4413      	add	r3, r2
 8008c06:	7819      	ldrb	r1, [r3, #0]
 8008c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c0c:	4413      	add	r3, r2
 8008c0e:	781a      	ldrb	r2, [r3, #0]
 8008c10:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c14:	4403      	add	r3, r0
 8008c16:	404a      	eors	r2, r1
 8008c18:	b2d2      	uxtb	r2, r2
 8008c1a:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8008c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c1e:	3301      	adds	r3, #1
 8008c20:	647b      	str	r3, [r7, #68]	; 0x44
 8008c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d8ea      	bhi.n	8008c00 <mbedtls_des_crypt_cbc+0x18c>
}
 8008c2a:	bf00      	nop
                goto exit;
            }

            mbedtls_xor(output, output, iv, 8);

            memcpy(iv, temp, 8);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c34:	cb03      	ldmia	r3!, {r0, r1}
 8008c36:	6010      	str	r0, [r2, #0]
 8008c38:	6051      	str	r1, [r2, #4]

            input  += 8;
 8008c3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c3e:	3308      	adds	r3, #8
 8008c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            output += 8;
 8008c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c48:	3308      	adds	r3, #8
 8008c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            length -= 8;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	3b08      	subs	r3, #8
 8008c52:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d18e      	bne.n	8008b78 <mbedtls_des_crypt_cbc+0x104>
        }
    }
    ret = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c5e:	e002      	b.n	8008c66 <mbedtls_des_crypt_cbc+0x1f2>
                goto exit;
 8008c60:	bf00      	nop
 8008c62:	e000      	b.n	8008c66 <mbedtls_des_crypt_cbc+0x1f2>
                goto exit;
 8008c64:	bf00      	nop

exit:
    return ret;
 8008c66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3780      	adds	r7, #128	; 0x80
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <mbedtls_des3_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES3_CRYPT_ECB_ALT)
int mbedtls_des3_crypt_ecb(mbedtls_des3_context *ctx,
                           const unsigned char input[8],
                           unsigned char output[8])
{
 8008c70:	b480      	push	{r7}
 8008c72:	b093      	sub	sp, #76	; 0x4c
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008c88:	61bb      	str	r3, [r7, #24]
    return r;
 8008c8a:	69bb      	ldr	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE(input, 0);
 8008c8c:	ba1b      	rev	r3, r3
 8008c8e:	643b      	str	r3, [r7, #64]	; 0x40
    Y = MBEDTLS_GET_UINT32_BE(input, 4);
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	3304      	adds	r3, #4
 8008c94:	633b      	str	r3, [r7, #48]	; 0x30
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008c9a:	617b      	str	r3, [r7, #20]
    return r;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	ba1b      	rev	r3, r3
 8008ca0:	63fb      	str	r3, [r7, #60]	; 0x3c

    DES_IP(X, Y);
 8008ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ca4:	091a      	lsrs	r2, r3, #4
 8008ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca8:	4053      	eors	r3, r2
 8008caa:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8008cae:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb4:	4053      	eors	r3, r2
 8008cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cbe:	4053      	eors	r3, r2
 8008cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8008cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cc4:	0c1a      	lsrs	r2, r3, #16
 8008cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc8:	4053      	eors	r3, r2
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd2:	4053      	eors	r3, r2
 8008cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd8:	041b      	lsls	r3, r3, #16
 8008cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cdc:	4053      	eors	r3, r2
 8008cde:	643b      	str	r3, [r7, #64]	; 0x40
 8008ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce2:	089a      	lsrs	r2, r3, #2
 8008ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce6:	4053      	eors	r3, r2
 8008ce8:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8008cec:	637b      	str	r3, [r7, #52]	; 0x34
 8008cee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf2:	4053      	eors	r3, r2
 8008cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cfc:	4053      	eors	r3, r2
 8008cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d02:	0a1a      	lsrs	r2, r3, #8
 8008d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d06:	4053      	eors	r3, r2
 8008d08:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d12:	4053      	eors	r3, r2
 8008d14:	643b      	str	r3, [r7, #64]	; 0x40
 8008d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d18:	021b      	lsls	r3, r3, #8
 8008d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d1c:	4053      	eors	r3, r2
 8008d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d22:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2c:	4053      	eors	r3, r2
 8008d2e:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8008d32:	637b      	str	r3, [r7, #52]	; 0x34
 8008d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d38:	4053      	eors	r3, r2
 8008d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d40:	4053      	eors	r3, r2
 8008d42:	643b      	str	r3, [r7, #64]	; 0x40
 8008d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d46:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008d4a:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < 8; i++) {
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8008d50:	e0a6      	b.n	8008ea0 <mbedtls_des3_crypt_ecb+0x230>
        DES_ROUND(Y, X);
 8008d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d54:	1d1a      	adds	r2, r3, #4
 8008d56:	63ba      	str	r2, [r7, #56]	; 0x38
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d5c:	4053      	eors	r3, r2
 8008d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d66:	4aa9      	ldr	r2, [pc, #676]	; (800900c <mbedtls_des3_crypt_ecb+0x39c>)
 8008d68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6e:	0a1b      	lsrs	r3, r3, #8
 8008d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d74:	49a6      	ldr	r1, [pc, #664]	; (8009010 <mbedtls_des3_crypt_ecb+0x3a0>)
 8008d76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008d7a:	405a      	eors	r2, r3
 8008d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7e:	0c1b      	lsrs	r3, r3, #16
 8008d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d84:	49a3      	ldr	r1, [pc, #652]	; (8009014 <mbedtls_des3_crypt_ecb+0x3a4>)
 8008d86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008d8a:	405a      	eors	r2, r3
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8e:	0e1b      	lsrs	r3, r3, #24
 8008d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d94:	49a0      	ldr	r1, [pc, #640]	; (8009018 <mbedtls_des3_crypt_ecb+0x3a8>)
 8008d96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008d9a:	4053      	eors	r3, r2
 8008d9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d9e:	4053      	eors	r3, r2
 8008da0:	643b      	str	r3, [r7, #64]	; 0x40
 8008da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da4:	1d1a      	adds	r2, r3, #4
 8008da6:	63ba      	str	r2, [r7, #56]	; 0x38
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dac:	ea4f 1333 	mov.w	r3, r3, ror #4
 8008db0:	4053      	eors	r3, r2
 8008db2:	637b      	str	r3, [r7, #52]	; 0x34
 8008db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dba:	4a98      	ldr	r2, [pc, #608]	; (800901c <mbedtls_des3_crypt_ecb+0x3ac>)
 8008dbc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc2:	0a1b      	lsrs	r3, r3, #8
 8008dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dc8:	4995      	ldr	r1, [pc, #596]	; (8009020 <mbedtls_des3_crypt_ecb+0x3b0>)
 8008dca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008dce:	405a      	eors	r2, r3
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd2:	0c1b      	lsrs	r3, r3, #16
 8008dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dd8:	4992      	ldr	r1, [pc, #584]	; (8009024 <mbedtls_des3_crypt_ecb+0x3b4>)
 8008dda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008dde:	405a      	eors	r2, r3
 8008de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de2:	0e1b      	lsrs	r3, r3, #24
 8008de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008de8:	498f      	ldr	r1, [pc, #572]	; (8009028 <mbedtls_des3_crypt_ecb+0x3b8>)
 8008dea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008dee:	4053      	eors	r3, r2
 8008df0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008df2:	4053      	eors	r3, r2
 8008df4:	643b      	str	r3, [r7, #64]	; 0x40
        DES_ROUND(X, Y);
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	1d1a      	adds	r2, r3, #4
 8008dfa:	63ba      	str	r2, [r7, #56]	; 0x38
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e00:	4053      	eors	r3, r2
 8008e02:	637b      	str	r3, [r7, #52]	; 0x34
 8008e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e0a:	4a80      	ldr	r2, [pc, #512]	; (800900c <mbedtls_des3_crypt_ecb+0x39c>)
 8008e0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e12:	0a1b      	lsrs	r3, r3, #8
 8008e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e18:	497d      	ldr	r1, [pc, #500]	; (8009010 <mbedtls_des3_crypt_ecb+0x3a0>)
 8008e1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e1e:	405a      	eors	r2, r3
 8008e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e22:	0c1b      	lsrs	r3, r3, #16
 8008e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e28:	497a      	ldr	r1, [pc, #488]	; (8009014 <mbedtls_des3_crypt_ecb+0x3a4>)
 8008e2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e2e:	405a      	eors	r2, r3
 8008e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e32:	0e1b      	lsrs	r3, r3, #24
 8008e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e38:	4977      	ldr	r1, [pc, #476]	; (8009018 <mbedtls_des3_crypt_ecb+0x3a8>)
 8008e3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e3e:	4053      	eors	r3, r2
 8008e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e42:	4053      	eors	r3, r2
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e48:	1d1a      	adds	r2, r3, #4
 8008e4a:	63ba      	str	r2, [r7, #56]	; 0x38
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e50:	ea4f 1333 	mov.w	r3, r3, ror #4
 8008e54:	4053      	eors	r3, r2
 8008e56:	637b      	str	r3, [r7, #52]	; 0x34
 8008e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e5e:	4a6f      	ldr	r2, [pc, #444]	; (800901c <mbedtls_des3_crypt_ecb+0x3ac>)
 8008e60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e66:	0a1b      	lsrs	r3, r3, #8
 8008e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e6c:	496c      	ldr	r1, [pc, #432]	; (8009020 <mbedtls_des3_crypt_ecb+0x3b0>)
 8008e6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e72:	405a      	eors	r2, r3
 8008e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e76:	0c1b      	lsrs	r3, r3, #16
 8008e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e7c:	4969      	ldr	r1, [pc, #420]	; (8009024 <mbedtls_des3_crypt_ecb+0x3b4>)
 8008e7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e82:	405a      	eors	r2, r3
 8008e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e86:	0e1b      	lsrs	r3, r3, #24
 8008e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e8c:	4966      	ldr	r1, [pc, #408]	; (8009028 <mbedtls_des3_crypt_ecb+0x3b8>)
 8008e8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e92:	4053      	eors	r3, r2
 8008e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e96:	4053      	eors	r3, r2
 8008e98:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < 8; i++) {
 8008e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8008ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea2:	2b07      	cmp	r3, #7
 8008ea4:	f77f af55 	ble.w	8008d52 <mbedtls_des3_crypt_ecb+0xe2>
    }

    for (i = 0; i < 8; i++) {
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8008eac:	e0a6      	b.n	8008ffc <mbedtls_des3_crypt_ecb+0x38c>
        DES_ROUND(X, Y);
 8008eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb0:	1d1a      	adds	r2, r3, #4
 8008eb2:	63ba      	str	r2, [r7, #56]	; 0x38
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008eb8:	4053      	eors	r3, r2
 8008eba:	637b      	str	r3, [r7, #52]	; 0x34
 8008ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ebe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ec2:	4a52      	ldr	r2, [pc, #328]	; (800900c <mbedtls_des3_crypt_ecb+0x39c>)
 8008ec4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eca:	0a1b      	lsrs	r3, r3, #8
 8008ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ed0:	494f      	ldr	r1, [pc, #316]	; (8009010 <mbedtls_des3_crypt_ecb+0x3a0>)
 8008ed2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008ed6:	405a      	eors	r2, r3
 8008ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eda:	0c1b      	lsrs	r3, r3, #16
 8008edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ee0:	494c      	ldr	r1, [pc, #304]	; (8009014 <mbedtls_des3_crypt_ecb+0x3a4>)
 8008ee2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008ee6:	405a      	eors	r2, r3
 8008ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eea:	0e1b      	lsrs	r3, r3, #24
 8008eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ef0:	4949      	ldr	r1, [pc, #292]	; (8009018 <mbedtls_des3_crypt_ecb+0x3a8>)
 8008ef2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008ef6:	4053      	eors	r3, r2
 8008ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008efa:	4053      	eors	r3, r2
 8008efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	1d1a      	adds	r2, r3, #4
 8008f02:	63ba      	str	r2, [r7, #56]	; 0x38
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f08:	ea4f 1333 	mov.w	r3, r3, ror #4
 8008f0c:	4053      	eors	r3, r2
 8008f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f16:	4a41      	ldr	r2, [pc, #260]	; (800901c <mbedtls_des3_crypt_ecb+0x3ac>)
 8008f18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f1e:	0a1b      	lsrs	r3, r3, #8
 8008f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f24:	493e      	ldr	r1, [pc, #248]	; (8009020 <mbedtls_des3_crypt_ecb+0x3b0>)
 8008f26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f2a:	405a      	eors	r2, r3
 8008f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2e:	0c1b      	lsrs	r3, r3, #16
 8008f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f34:	493b      	ldr	r1, [pc, #236]	; (8009024 <mbedtls_des3_crypt_ecb+0x3b4>)
 8008f36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f3a:	405a      	eors	r2, r3
 8008f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3e:	0e1b      	lsrs	r3, r3, #24
 8008f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f44:	4938      	ldr	r1, [pc, #224]	; (8009028 <mbedtls_des3_crypt_ecb+0x3b8>)
 8008f46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f4a:	4053      	eors	r3, r2
 8008f4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f4e:	4053      	eors	r3, r2
 8008f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        DES_ROUND(Y, X);
 8008f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f54:	1d1a      	adds	r2, r3, #4
 8008f56:	63ba      	str	r2, [r7, #56]	; 0x38
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f5c:	4053      	eors	r3, r2
 8008f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f66:	4a29      	ldr	r2, [pc, #164]	; (800900c <mbedtls_des3_crypt_ecb+0x39c>)
 8008f68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6e:	0a1b      	lsrs	r3, r3, #8
 8008f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f74:	4926      	ldr	r1, [pc, #152]	; (8009010 <mbedtls_des3_crypt_ecb+0x3a0>)
 8008f76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f7a:	405a      	eors	r2, r3
 8008f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7e:	0c1b      	lsrs	r3, r3, #16
 8008f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f84:	4923      	ldr	r1, [pc, #140]	; (8009014 <mbedtls_des3_crypt_ecb+0x3a4>)
 8008f86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f8a:	405a      	eors	r2, r3
 8008f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8e:	0e1b      	lsrs	r3, r3, #24
 8008f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f94:	4920      	ldr	r1, [pc, #128]	; (8009018 <mbedtls_des3_crypt_ecb+0x3a8>)
 8008f96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f9a:	4053      	eors	r3, r2
 8008f9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f9e:	4053      	eors	r3, r2
 8008fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	1d1a      	adds	r2, r3, #4
 8008fa6:	63ba      	str	r2, [r7, #56]	; 0x38
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fac:	ea4f 1333 	mov.w	r3, r3, ror #4
 8008fb0:	4053      	eors	r3, r2
 8008fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fba:	4a18      	ldr	r2, [pc, #96]	; (800901c <mbedtls_des3_crypt_ecb+0x3ac>)
 8008fbc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc2:	0a1b      	lsrs	r3, r3, #8
 8008fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fc8:	4915      	ldr	r1, [pc, #84]	; (8009020 <mbedtls_des3_crypt_ecb+0x3b0>)
 8008fca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008fce:	405a      	eors	r2, r3
 8008fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd2:	0c1b      	lsrs	r3, r3, #16
 8008fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fd8:	4912      	ldr	r1, [pc, #72]	; (8009024 <mbedtls_des3_crypt_ecb+0x3b4>)
 8008fda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008fde:	405a      	eors	r2, r3
 8008fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe2:	0e1b      	lsrs	r3, r3, #24
 8008fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fe8:	490f      	ldr	r1, [pc, #60]	; (8009028 <mbedtls_des3_crypt_ecb+0x3b8>)
 8008fea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008fee:	4053      	eors	r3, r2
 8008ff0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ff2:	4053      	eors	r3, r2
 8008ff4:	643b      	str	r3, [r7, #64]	; 0x40
    for (i = 0; i < 8; i++) {
 8008ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8008ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ffe:	2b07      	cmp	r3, #7
 8009000:	f77f af55 	ble.w	8008eae <mbedtls_des3_crypt_ecb+0x23e>
    }

    for (i = 0; i < 8; i++) {
 8009004:	2300      	movs	r3, #0
 8009006:	647b      	str	r3, [r7, #68]	; 0x44
 8009008:	e0b7      	b.n	800917a <mbedtls_des3_crypt_ecb+0x50a>
 800900a:	bf00      	nop
 800900c:	0800f114 	.word	0x0800f114
 8009010:	0800ef14 	.word	0x0800ef14
 8009014:	0800ed14 	.word	0x0800ed14
 8009018:	0800eb14 	.word	0x0800eb14
 800901c:	0800f014 	.word	0x0800f014
 8009020:	0800ee14 	.word	0x0800ee14
 8009024:	0800ec14 	.word	0x0800ec14
 8009028:	0800ea14 	.word	0x0800ea14
        DES_ROUND(Y, X);
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	1d1a      	adds	r2, r3, #4
 8009030:	63ba      	str	r2, [r7, #56]	; 0x38
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009036:	4053      	eors	r3, r2
 8009038:	637b      	str	r3, [r7, #52]	; 0x34
 800903a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009040:	4a87      	ldr	r2, [pc, #540]	; (8009260 <mbedtls_des3_crypt_ecb+0x5f0>)
 8009042:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009048:	0a1b      	lsrs	r3, r3, #8
 800904a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800904e:	4985      	ldr	r1, [pc, #532]	; (8009264 <mbedtls_des3_crypt_ecb+0x5f4>)
 8009050:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009054:	405a      	eors	r2, r3
 8009056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009058:	0c1b      	lsrs	r3, r3, #16
 800905a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800905e:	4982      	ldr	r1, [pc, #520]	; (8009268 <mbedtls_des3_crypt_ecb+0x5f8>)
 8009060:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009064:	405a      	eors	r2, r3
 8009066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009068:	0e1b      	lsrs	r3, r3, #24
 800906a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800906e:	497f      	ldr	r1, [pc, #508]	; (800926c <mbedtls_des3_crypt_ecb+0x5fc>)
 8009070:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009074:	4053      	eors	r3, r2
 8009076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009078:	4053      	eors	r3, r2
 800907a:	643b      	str	r3, [r7, #64]	; 0x40
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	1d1a      	adds	r2, r3, #4
 8009080:	63ba      	str	r2, [r7, #56]	; 0x38
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009086:	ea4f 1333 	mov.w	r3, r3, ror #4
 800908a:	4053      	eors	r3, r2
 800908c:	637b      	str	r3, [r7, #52]	; 0x34
 800908e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009094:	4a76      	ldr	r2, [pc, #472]	; (8009270 <mbedtls_des3_crypt_ecb+0x600>)
 8009096:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800909a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909c:	0a1b      	lsrs	r3, r3, #8
 800909e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090a2:	4974      	ldr	r1, [pc, #464]	; (8009274 <mbedtls_des3_crypt_ecb+0x604>)
 80090a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80090a8:	405a      	eors	r2, r3
 80090aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ac:	0c1b      	lsrs	r3, r3, #16
 80090ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090b2:	4971      	ldr	r1, [pc, #452]	; (8009278 <mbedtls_des3_crypt_ecb+0x608>)
 80090b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80090b8:	405a      	eors	r2, r3
 80090ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090bc:	0e1b      	lsrs	r3, r3, #24
 80090be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090c2:	496e      	ldr	r1, [pc, #440]	; (800927c <mbedtls_des3_crypt_ecb+0x60c>)
 80090c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80090c8:	4053      	eors	r3, r2
 80090ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090cc:	4053      	eors	r3, r2
 80090ce:	643b      	str	r3, [r7, #64]	; 0x40
        DES_ROUND(X, Y);
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	1d1a      	adds	r2, r3, #4
 80090d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090da:	4053      	eors	r3, r2
 80090dc:	637b      	str	r3, [r7, #52]	; 0x34
 80090de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090e4:	4a5e      	ldr	r2, [pc, #376]	; (8009260 <mbedtls_des3_crypt_ecb+0x5f0>)
 80090e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80090ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ec:	0a1b      	lsrs	r3, r3, #8
 80090ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090f2:	495c      	ldr	r1, [pc, #368]	; (8009264 <mbedtls_des3_crypt_ecb+0x5f4>)
 80090f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80090f8:	405a      	eors	r2, r3
 80090fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fc:	0c1b      	lsrs	r3, r3, #16
 80090fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009102:	4959      	ldr	r1, [pc, #356]	; (8009268 <mbedtls_des3_crypt_ecb+0x5f8>)
 8009104:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009108:	405a      	eors	r2, r3
 800910a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800910c:	0e1b      	lsrs	r3, r3, #24
 800910e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009112:	4956      	ldr	r1, [pc, #344]	; (800926c <mbedtls_des3_crypt_ecb+0x5fc>)
 8009114:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009118:	4053      	eors	r3, r2
 800911a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800911c:	4053      	eors	r3, r2
 800911e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009122:	1d1a      	adds	r2, r3, #4
 8009124:	63ba      	str	r2, [r7, #56]	; 0x38
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800912a:	ea4f 1333 	mov.w	r3, r3, ror #4
 800912e:	4053      	eors	r3, r2
 8009130:	637b      	str	r3, [r7, #52]	; 0x34
 8009132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009138:	4a4d      	ldr	r2, [pc, #308]	; (8009270 <mbedtls_des3_crypt_ecb+0x600>)
 800913a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800913e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009140:	0a1b      	lsrs	r3, r3, #8
 8009142:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009146:	494b      	ldr	r1, [pc, #300]	; (8009274 <mbedtls_des3_crypt_ecb+0x604>)
 8009148:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800914c:	405a      	eors	r2, r3
 800914e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009150:	0c1b      	lsrs	r3, r3, #16
 8009152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009156:	4948      	ldr	r1, [pc, #288]	; (8009278 <mbedtls_des3_crypt_ecb+0x608>)
 8009158:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800915c:	405a      	eors	r2, r3
 800915e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009160:	0e1b      	lsrs	r3, r3, #24
 8009162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009166:	4945      	ldr	r1, [pc, #276]	; (800927c <mbedtls_des3_crypt_ecb+0x60c>)
 8009168:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800916c:	4053      	eors	r3, r2
 800916e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009170:	4053      	eors	r3, r2
 8009172:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < 8; i++) {
 8009174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009176:	3301      	adds	r3, #1
 8009178:	647b      	str	r3, [r7, #68]	; 0x44
 800917a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800917c:	2b07      	cmp	r3, #7
 800917e:	f77f af55 	ble.w	800902c <mbedtls_des3_crypt_ecb+0x3bc>
    }

    DES_FP(Y, X);
 8009182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009184:	ea4f 0373 	mov.w	r3, r3, ror #1
 8009188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800918a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800918c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800918e:	4053      	eors	r3, r2
 8009190:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8009194:	637b      	str	r3, [r7, #52]	; 0x34
 8009196:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919a:	4053      	eors	r3, r2
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800919e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a2:	4053      	eors	r3, r2
 80091a4:	643b      	str	r3, [r7, #64]	; 0x40
 80091a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a8:	ea4f 0373 	mov.w	r3, r3, ror #1
 80091ac:	643b      	str	r3, [r7, #64]	; 0x40
 80091ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b0:	0a1a      	lsrs	r2, r3, #8
 80091b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b4:	4053      	eors	r3, r2
 80091b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80091ba:	637b      	str	r3, [r7, #52]	; 0x34
 80091bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c0:	4053      	eors	r3, r2
 80091c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c6:	021b      	lsls	r3, r3, #8
 80091c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091ca:	4053      	eors	r3, r2
 80091cc:	643b      	str	r3, [r7, #64]	; 0x40
 80091ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d0:	089a      	lsrs	r2, r3, #2
 80091d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d4:	4053      	eors	r3, r2
 80091d6:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80091da:	637b      	str	r3, [r7, #52]	; 0x34
 80091dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e0:	4053      	eors	r3, r2
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091ea:	4053      	eors	r3, r2
 80091ec:	643b      	str	r3, [r7, #64]	; 0x40
 80091ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f0:	0c1a      	lsrs	r2, r3, #16
 80091f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f4:	4053      	eors	r3, r2
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	637b      	str	r3, [r7, #52]	; 0x34
 80091fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fe:	4053      	eors	r3, r2
 8009200:	643b      	str	r3, [r7, #64]	; 0x40
 8009202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009204:	041b      	lsls	r3, r3, #16
 8009206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009208:	4053      	eors	r3, r2
 800920a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800920c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920e:	091a      	lsrs	r2, r3, #4
 8009210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009212:	4053      	eors	r3, r2
 8009214:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8009218:	637b      	str	r3, [r7, #52]	; 0x34
 800921a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921e:	4053      	eors	r3, r2
 8009220:	643b      	str	r3, [r7, #64]	; 0x40
 8009222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009224:	011b      	lsls	r3, r3, #4
 8009226:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009228:	4053      	eors	r3, r2
 800922a:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT32_BE(Y, output, 0);
 800922c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800922e:	ba1b      	rev	r3, r3
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	62ba      	str	r2, [r7, #40]	; 0x28
 8009234:	61fb      	str	r3, [r7, #28]
 8009236:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	601a      	str	r2, [r3, #0]
}
 800923c:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X, output, 4);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	1d1a      	adds	r2, r3, #4
 8009242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009244:	ba1b      	rev	r3, r3
 8009246:	627a      	str	r2, [r7, #36]	; 0x24
 8009248:	623b      	str	r3, [r7, #32]
 800924a:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 800924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924e:	601a      	str	r2, [r3, #0]
}
 8009250:	bf00      	nop

    return 0;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	374c      	adds	r7, #76	; 0x4c
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	0800f114 	.word	0x0800f114
 8009264:	0800ef14 	.word	0x0800ef14
 8009268:	0800ed14 	.word	0x0800ed14
 800926c:	0800eb14 	.word	0x0800eb14
 8009270:	0800f014 	.word	0x0800f014
 8009274:	0800ee14 	.word	0x0800ee14
 8009278:	0800ec14 	.word	0x0800ec14
 800927c:	0800ea14 	.word	0x0800ea14

08009280 <mbedtls_des3_crypt_cbc>:
                           int mode,
                           size_t length,
                           unsigned char iv[8],
                           const unsigned char *input,
                           unsigned char *output)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b0a0      	sub	sp, #128	; 0x80
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800928e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8009292:	67fb      	str	r3, [r7, #124]	; 0x7c
    unsigned char temp[8];

    if (length % 8) {
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <mbedtls_des3_crypt_cbc+0x24>
        return MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH;
 800929e:	f06f 0331 	mvn.w	r3, #49	; 0x31
 80092a2:	e0e7      	b.n	8009474 <mbedtls_des3_crypt_cbc+0x1f4>
    }

    if (mode == MBEDTLS_DES_ENCRYPT) {
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	f040 80da 	bne.w	8009460 <mbedtls_des3_crypt_cbc+0x1e0>
        while (length > 0) {
 80092ac:	e066      	b.n	800937c <mbedtls_des3_crypt_cbc+0xfc>
 80092ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80092b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092b8:	677b      	str	r3, [r7, #116]	; 0x74
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	673b      	str	r3, [r7, #112]	; 0x70
 80092be:	2308      	movs	r3, #8
 80092c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    size_t i = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	66bb      	str	r3, [r7, #104]	; 0x68
    for (; (i + 4) <= n; i += 4) {
 80092c6:	e01e      	b.n	8009306 <mbedtls_des3_crypt_cbc+0x86>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80092c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80092ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092cc:	4413      	add	r3, r2
 80092ce:	667b      	str	r3, [r7, #100]	; 0x64
 80092d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092d2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80092d4:	61fb      	str	r3, [r7, #28]
    return r;
 80092d6:	69fa      	ldr	r2, [r7, #28]
 80092d8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80092da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092dc:	440b      	add	r3, r1
 80092de:	663b      	str	r3, [r7, #96]	; 0x60
 80092e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092e2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80092e4:	61bb      	str	r3, [r7, #24]
    return r;
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	4053      	eors	r3, r2
 80092ea:	65fb      	str	r3, [r7, #92]	; 0x5c
        mbedtls_put_unaligned_uint32(r + i, x);
 80092ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092f0:	4413      	add	r3, r2
 80092f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80092f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092f6:	617b      	str	r3, [r7, #20]
 80092f8:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 80092fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092fc:	601a      	str	r2, [r3, #0]
}
 80092fe:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8009300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009302:	3304      	adds	r3, #4
 8009304:	66bb      	str	r3, [r7, #104]	; 0x68
 8009306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009308:	3304      	adds	r3, #4
 800930a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800930c:	429a      	cmp	r2, r3
 800930e:	d2db      	bcs.n	80092c8 <mbedtls_des3_crypt_cbc+0x48>
    for (; i < n; i++) {
 8009310:	e010      	b.n	8009334 <mbedtls_des3_crypt_cbc+0xb4>
        r[i] = a[i] ^ b[i];
 8009312:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009316:	4413      	add	r3, r2
 8009318:	7819      	ldrb	r1, [r3, #0]
 800931a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800931c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800931e:	4413      	add	r3, r2
 8009320:	781a      	ldrb	r2, [r3, #0]
 8009322:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009326:	4403      	add	r3, r0
 8009328:	404a      	eors	r2, r1
 800932a:	b2d2      	uxtb	r2, r2
 800932c:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800932e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009330:	3301      	adds	r3, #1
 8009332:	66bb      	str	r3, [r7, #104]	; 0x68
 8009334:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009336:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009338:	429a      	cmp	r2, r3
 800933a:	d8ea      	bhi.n	8009312 <mbedtls_des3_crypt_cbc+0x92>
}
 800933c:	bf00      	nop
            mbedtls_xor(output, input, iv, 8);

            ret = mbedtls_des3_crypt_ecb(ctx, output, output);
 800933e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009342:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f7ff fc92 	bl	8008c70 <mbedtls_des3_crypt_ecb>
 800934c:	67f8      	str	r0, [r7, #124]	; 0x7c
            if (ret != 0) {
 800934e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009350:	2b00      	cmp	r3, #0
 8009352:	f040 808b 	bne.w	800946c <mbedtls_des3_crypt_cbc+0x1ec>
                goto exit;
            }
            memcpy(iv, output, 8);
 8009356:	2208      	movs	r2, #8
 8009358:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800935c:	6838      	ldr	r0, [r7, #0]
 800935e:	f003 fd02 	bl	800cd66 <memcpy>

            input  += 8;
 8009362:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009366:	3308      	adds	r3, #8
 8009368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            output += 8;
 800936c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009370:	3308      	adds	r3, #8
 8009372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            length -= 8;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3b08      	subs	r3, #8
 800937a:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d195      	bne.n	80092ae <mbedtls_des3_crypt_cbc+0x2e>
 8009382:	e070      	b.n	8009466 <mbedtls_des3_crypt_cbc+0x1e6>
        }
    } else { /* MBEDTLS_DES_DECRYPT */
        while (length > 0) {
            memcpy(temp, input, 8);
 8009384:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800938c:	6810      	ldr	r0, [r2, #0]
 800938e:	6851      	ldr	r1, [r2, #4]
 8009390:	c303      	stmia	r3!, {r0, r1}
            ret = mbedtls_des3_crypt_ecb(ctx, input, output);
 8009392:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009396:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f7ff fc68 	bl	8008c70 <mbedtls_des3_crypt_ecb>
 80093a0:	67f8      	str	r0, [r7, #124]	; 0x7c
            if (ret != 0) {
 80093a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d163      	bne.n	8009470 <mbedtls_des3_crypt_cbc+0x1f0>
 80093a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093ac:	657b      	str	r3, [r7, #84]	; 0x54
 80093ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093b2:	653b      	str	r3, [r7, #80]	; 0x50
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093b8:	2308      	movs	r3, #8
 80093ba:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t i = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	647b      	str	r3, [r7, #68]	; 0x44
    for (; (i + 4) <= n; i += 4) {
 80093c0:	e01e      	b.n	8009400 <mbedtls_des3_crypt_cbc+0x180>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80093c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c6:	4413      	add	r3, r2
 80093c8:	643b      	str	r3, [r7, #64]	; 0x40
 80093ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093cc:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80093ce:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 80093d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093d2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80093d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093d6:	440b      	add	r3, r1
 80093d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093dc:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80093de:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	4053      	eors	r3, r2
 80093e4:	63bb      	str	r3, [r7, #56]	; 0x38
        mbedtls_put_unaligned_uint32(r + i, x);
 80093e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ea:	4413      	add	r3, r2
 80093ec:	637b      	str	r3, [r7, #52]	; 0x34
 80093ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f0:	623b      	str	r3, [r7, #32]
 80093f2:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 80093f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f6:	601a      	str	r2, [r3, #0]
}
 80093f8:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80093fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093fc:	3304      	adds	r3, #4
 80093fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009402:	3304      	adds	r3, #4
 8009404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009406:	429a      	cmp	r2, r3
 8009408:	d2db      	bcs.n	80093c2 <mbedtls_des3_crypt_cbc+0x142>
    for (; i < n; i++) {
 800940a:	e010      	b.n	800942e <mbedtls_des3_crypt_cbc+0x1ae>
        r[i] = a[i] ^ b[i];
 800940c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800940e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009410:	4413      	add	r3, r2
 8009412:	7819      	ldrb	r1, [r3, #0]
 8009414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009418:	4413      	add	r3, r2
 800941a:	781a      	ldrb	r2, [r3, #0]
 800941c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800941e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009420:	4403      	add	r3, r0
 8009422:	404a      	eors	r2, r1
 8009424:	b2d2      	uxtb	r2, r2
 8009426:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8009428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800942a:	3301      	adds	r3, #1
 800942c:	647b      	str	r3, [r7, #68]	; 0x44
 800942e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009432:	429a      	cmp	r2, r3
 8009434:	d8ea      	bhi.n	800940c <mbedtls_des3_crypt_cbc+0x18c>
}
 8009436:	bf00      	nop
                goto exit;
            }

            mbedtls_xor(output, output, iv, 8);

            memcpy(iv, temp, 8);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009440:	cb03      	ldmia	r3!, {r0, r1}
 8009442:	6010      	str	r0, [r2, #0]
 8009444:	6051      	str	r1, [r2, #4]

            input  += 8;
 8009446:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800944a:	3308      	adds	r3, #8
 800944c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            output += 8;
 8009450:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009454:	3308      	adds	r3, #8
 8009456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            length -= 8;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	3b08      	subs	r3, #8
 800945e:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d18e      	bne.n	8009384 <mbedtls_des3_crypt_cbc+0x104>
        }
    }
    ret = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	67fb      	str	r3, [r7, #124]	; 0x7c
 800946a:	e002      	b.n	8009472 <mbedtls_des3_crypt_cbc+0x1f2>
                goto exit;
 800946c:	bf00      	nop
 800946e:	e000      	b.n	8009472 <mbedtls_des3_crypt_cbc+0x1f2>
                goto exit;
 8009470:	bf00      	nop

exit:
    return ret;
 8009472:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8009474:	4618      	mov	r0, r3
 8009476:	3780      	adds	r7, #128	; 0x80
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <mbedtls_cipher_info_get_block_size>:
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <mbedtls_cipher_info_get_block_size+0x12>
        return 0;
 800948a:	2300      	movs	r3, #0
 800948c:	e004      	b.n	8009498 <mbedtls_cipher_info_get_block_size+0x1c>
    return (size_t) (info->MBEDTLS_PRIVATE(block_size));
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	791b      	ldrb	r3, [r3, #4]
 8009492:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009496:	b2db      	uxtb	r3, r3
}
 8009498:	4618      	mov	r0, r3
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <mbedtls_gcm_init>:

/*
 * Initialize a context
 */
void mbedtls_gcm_init(mbedtls_gcm_context *ctx)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_gcm_context));
 80094ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80094b0:	2100      	movs	r1, #0
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f003 fbcc 	bl	800cc50 <memset>
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <gcm_set_acceleration>:

static inline void gcm_set_acceleration(mbedtls_gcm_context *ctx)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
#if defined(MBEDTLS_GCM_LARGE_TABLE)
    ctx->acceleration = MBEDTLS_GCM_ACC_LARGETABLE;
#else
    ctx->acceleration = MBEDTLS_GCM_ACC_SMALLTABLE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
#if defined(MBEDTLS_AESCE_HAVE_CODE)
    if (MBEDTLS_AESCE_HAS_SUPPORT()) {
        ctx->acceleration = MBEDTLS_GCM_ACC_AESCE;
    }
#endif
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <gcm_gen_table_rightshift>:

static inline void gcm_gen_table_rightshift(uint64_t dst[2], const uint64_t src[2])
{
 80094dc:	b5b0      	push	{r4, r5, r7, lr}
 80094de:	b090      	sub	sp, #64	; 0x40
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
    uint8_t *u8Dst = (uint8_t *) dst;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t *u8Src = (uint8_t *) src;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT64_BE(MBEDTLS_GET_UINT64_BE(&src[1], 0) >> 1, &dst[1], 0);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f103 0408 	add.w	r4, r3, #8
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	3308      	adds	r3, #8
 80094f8:	633b      	str	r3, [r7, #48]	; 0x30
    memcpy(&r, p, sizeof(r));
 80094fa:	f107 0310 	add.w	r3, r7, #16
 80094fe:	2208      	movs	r2, #8
 8009500:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009502:	4618      	mov	r0, r3
 8009504:	f003 fc2f 	bl	800cd66 <memcpy>
    return r;
 8009508:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800950c:	ba15      	rev	r5, r2
 800950e:	ba1b      	rev	r3, r3
 8009510:	4618      	mov	r0, r3
 8009512:	4629      	mov	r1, r5
 8009514:	f04f 0200 	mov.w	r2, #0
 8009518:	f04f 0300 	mov.w	r3, #0
 800951c:	0842      	lsrs	r2, r0, #1
 800951e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8009522:	084b      	lsrs	r3, r1, #1
 8009524:	ba11      	rev	r1, r2
 8009526:	ba18      	rev	r0, r3
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	637c      	str	r4, [r7, #52]	; 0x34
 800952e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    memcpy(p, &x, sizeof(x));
 8009532:	f107 0308 	add.w	r3, r7, #8
 8009536:	2208      	movs	r2, #8
 8009538:	4619      	mov	r1, r3
 800953a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800953c:	f003 fc13 	bl	800cd66 <memcpy>
}
 8009540:	bf00      	nop
    u8Dst[8] |= (u8Src[7] & 0x01) << 7;
 8009542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009544:	3308      	adds	r3, #8
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	b25a      	sxtb	r2, r3
 800954a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954c:	3307      	adds	r3, #7
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	01db      	lsls	r3, r3, #7
 8009552:	b25b      	sxtb	r3, r3
 8009554:	4313      	orrs	r3, r2
 8009556:	b25a      	sxtb	r2, r3
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	3308      	adds	r3, #8
 800955c:	b2d2      	uxtb	r2, r2
 800955e:	701a      	strb	r2, [r3, #0]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	62bb      	str	r3, [r7, #40]	; 0x28
    memcpy(&r, p, sizeof(r));
 8009564:	f107 0320 	add.w	r3, r7, #32
 8009568:	2208      	movs	r2, #8
 800956a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800956c:	4618      	mov	r0, r3
 800956e:	f003 fbfa 	bl	800cd66 <memcpy>
    return r;
 8009572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    MBEDTLS_PUT_UINT64_BE(MBEDTLS_GET_UINT64_BE(&src[0], 0) >> 1, &dst[0], 0);
 8009576:	ba14      	rev	r4, r2
 8009578:	ba1b      	rev	r3, r3
 800957a:	4618      	mov	r0, r3
 800957c:	4621      	mov	r1, r4
 800957e:	f04f 0200 	mov.w	r2, #0
 8009582:	f04f 0300 	mov.w	r3, #0
 8009586:	0842      	lsrs	r2, r0, #1
 8009588:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800958c:	084b      	lsrs	r3, r1, #1
 800958e:	ba11      	rev	r1, r2
 8009590:	ba18      	rev	r0, r3
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	62f9      	str	r1, [r7, #44]	; 0x2c
 800959a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    memcpy(p, &x, sizeof(x));
 800959e:	f107 0318 	add.w	r3, r7, #24
 80095a2:	2208      	movs	r2, #8
 80095a4:	4619      	mov	r1, r3
 80095a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095a8:	f003 fbdd 	bl	800cd66 <memcpy>
}
 80095ac:	bf00      	nop
    u8Dst[0] ^= (u8Src[15] & 0x01) ? 0xE1 : 0;
 80095ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	b25b      	sxtb	r3, r3
 80095b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095b6:	320f      	adds	r2, #15
 80095b8:	7812      	ldrb	r2, [r2, #0]
 80095ba:	f002 0201 	and.w	r2, r2, #1
 80095be:	2a00      	cmp	r2, #0
 80095c0:	d002      	beq.n	80095c8 <gcm_gen_table_rightshift+0xec>
 80095c2:	f06f 021e 	mvn.w	r2, #30
 80095c6:	e000      	b.n	80095ca <gcm_gen_table_rightshift+0xee>
 80095c8:	2200      	movs	r2, #0
 80095ca:	4053      	eors	r3, r2
 80095cc:	b25b      	sxtb	r3, r3
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d2:	701a      	strb	r2, [r3, #0]
}
 80095d4:	bf00      	nop
 80095d6:	3740      	adds	r7, #64	; 0x40
 80095d8:	46bd      	mov	sp, r7
 80095da:	bdb0      	pop	{r4, r5, r7, pc}

080095dc <gcm_gen_table>:
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */
static int gcm_gen_table(mbedtls_gcm_context *ctx)
{
 80095dc:	b590      	push	{r4, r7, lr}
 80095de:	b0a1      	sub	sp, #132	; 0x84
 80095e0:	af02      	add	r7, sp, #8
 80095e2:	6078      	str	r0, [r7, #4]
    int ret, i, j;
    uint64_t u64h[2] = { 0 };
 80095e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80095e8:	2200      	movs	r2, #0
 80095ea:	601a      	str	r2, [r3, #0]
 80095ec:	605a      	str	r2, [r3, #4]
 80095ee:	609a      	str	r2, [r3, #8]
 80095f0:	60da      	str	r2, [r3, #12]
    uint8_t *h = (uint8_t *) u64h;
 80095f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80095f6:	66fb      	str	r3, [r7, #108]	; 0x6c

#if defined(MBEDTLS_BLOCK_CIPHER_C)
    ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, h, h);
#else
    size_t olen = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	627b      	str	r3, [r7, #36]	; 0x24
    ret = mbedtls_cipher_update(&ctx->cipher_ctx, h, 16, h, &olen);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009606:	2210      	movs	r2, #16
 8009608:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800960a:	f7fd f89b 	bl	8006744 <mbedtls_cipher_update>
 800960e:	66b8      	str	r0, [r7, #104]	; 0x68
#endif
    if (ret != 0) {
 8009610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <gcm_gen_table+0x3e>
        return ret;
 8009616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009618:	e0d8      	b.n	80097cc <gcm_gen_table+0x1f0>
    }

    gcm_set_acceleration(ctx);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff ff50 	bl	80094c0 <gcm_set_acceleration>

    /* MBEDTLS_GCM_HTABLE_SIZE/2 = 1000 corresponds to 1 in GF(2^128) */
    ctx->H[MBEDTLS_GCM_HTABLE_SIZE/2][0] = u64h[0];
 8009620:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    ctx->H[MBEDTLS_GCM_HTABLE_SIZE/2][1] = u64h[1];
 800962a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
            return 0;
#endif

        default:
            /* 0 corresponds to 0 in GF(2^128) */
            ctx->H[0][0] = 0;
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	f04f 0200 	mov.w	r2, #0
 800963a:	f04f 0300 	mov.w	r3, #0
 800963e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
            ctx->H[0][1] = 0;
 8009642:	6879      	ldr	r1, [r7, #4]
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	f04f 0300 	mov.w	r3, #0
 800964c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

            for (i = MBEDTLS_GCM_HTABLE_SIZE/4; i > 0; i >>= 1) {
 8009650:	2304      	movs	r3, #4
 8009652:	677b      	str	r3, [r7, #116]	; 0x74
 8009654:	e010      	b.n	8009678 <gcm_gen_table+0x9c>
                gcm_gen_table_rightshift(ctx->H[i], ctx->H[i*2]);
 8009656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009658:	011b      	lsls	r3, r3, #4
 800965a:	3348      	adds	r3, #72	; 0x48
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	18d0      	adds	r0, r2, r3
 8009660:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	011b      	lsls	r3, r3, #4
 8009666:	3348      	adds	r3, #72	; 0x48
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	4413      	add	r3, r2
 800966c:	4619      	mov	r1, r3
 800966e:	f7ff ff35 	bl	80094dc <gcm_gen_table_rightshift>
            for (i = MBEDTLS_GCM_HTABLE_SIZE/4; i > 0; i >>= 1) {
 8009672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009674:	105b      	asrs	r3, r3, #1
 8009676:	677b      	str	r3, [r7, #116]	; 0x74
 8009678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800967a:	2b00      	cmp	r3, #0
 800967c:	dceb      	bgt.n	8009656 <gcm_gen_table+0x7a>
            }

#if !defined(MBEDTLS_GCM_LARGE_TABLE)
            /* pack elements of H as 64-bits ints, big-endian */
            for (i = MBEDTLS_GCM_HTABLE_SIZE/2; i > 0; i >>= 1) {
 800967e:	2308      	movs	r3, #8
 8009680:	677b      	str	r3, [r7, #116]	; 0x74
 8009682:	e038      	b.n	80096f6 <gcm_gen_table+0x11a>
                MBEDTLS_PUT_UINT64_BE(ctx->H[i][0], &ctx->H[i][0], 0);
 8009684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009686:	011b      	lsls	r3, r3, #4
 8009688:	3348      	adds	r3, #72	; 0x48
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	18d1      	adds	r1, r2, r3
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009692:	011b      	lsls	r3, r3, #4
 8009694:	4413      	add	r3, r2
 8009696:	3348      	adds	r3, #72	; 0x48
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	ba10      	rev	r0, r2
 800969e:	ba1c      	rev	r4, r3
 80096a0:	4622      	mov	r2, r4
 80096a2:	4603      	mov	r3, r0
 80096a4:	6679      	str	r1, [r7, #100]	; 0x64
 80096a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    memcpy(p, &x, sizeof(x));
 80096aa:	f107 0308 	add.w	r3, r7, #8
 80096ae:	2208      	movs	r2, #8
 80096b0:	4619      	mov	r1, r3
 80096b2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80096b4:	f003 fb57 	bl	800cd66 <memcpy>
}
 80096b8:	bf00      	nop
                MBEDTLS_PUT_UINT64_BE(ctx->H[i][1], &ctx->H[i][1], 0);
 80096ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096bc:	3305      	adds	r3, #5
 80096be:	011b      	lsls	r3, r3, #4
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	18d1      	adds	r1, r2, r3
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096c8:	3305      	adds	r3, #5
 80096ca:	011b      	lsls	r3, r3, #4
 80096cc:	4413      	add	r3, r2
 80096ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d2:	ba10      	rev	r0, r2
 80096d4:	ba1c      	rev	r4, r3
 80096d6:	4622      	mov	r2, r4
 80096d8:	4603      	mov	r3, r0
 80096da:	6639      	str	r1, [r7, #96]	; 0x60
 80096dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    memcpy(p, &x, sizeof(x));
 80096e0:	f107 0310 	add.w	r3, r7, #16
 80096e4:	2208      	movs	r2, #8
 80096e6:	4619      	mov	r1, r3
 80096e8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80096ea:	f003 fb3c 	bl	800cd66 <memcpy>
}
 80096ee:	bf00      	nop
            for (i = MBEDTLS_GCM_HTABLE_SIZE/2; i > 0; i >>= 1) {
 80096f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096f2:	105b      	asrs	r3, r3, #1
 80096f4:	677b      	str	r3, [r7, #116]	; 0x74
 80096f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	dcc3      	bgt.n	8009684 <gcm_gen_table+0xa8>
            }
#endif

            for (i = 2; i < MBEDTLS_GCM_HTABLE_SIZE; i <<= 1) {
 80096fc:	2302      	movs	r3, #2
 80096fe:	677b      	str	r3, [r7, #116]	; 0x74
 8009700:	e060      	b.n	80097c4 <gcm_gen_table+0x1e8>
                for (j = 1; j < i; j++) {
 8009702:	2301      	movs	r3, #1
 8009704:	673b      	str	r3, [r7, #112]	; 0x70
 8009706:	e056      	b.n	80097b6 <gcm_gen_table+0x1da>
                    mbedtls_xor_no_simd((unsigned char *) ctx->H[i+j],
 8009708:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800970a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800970c:	4413      	add	r3, r2
 800970e:	011b      	lsls	r3, r3, #4
 8009710:	3348      	adds	r3, #72	; 0x48
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	18d1      	adds	r1, r2, r3
                                        (unsigned char *) ctx->H[i],
 8009716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009718:	011b      	lsls	r3, r3, #4
 800971a:	3348      	adds	r3, #72	; 0x48
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	441a      	add	r2, r3
                                        (unsigned char *) ctx->H[j],
 8009720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009722:	011b      	lsls	r3, r3, #4
 8009724:	3348      	adds	r3, #72	; 0x48
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	4403      	add	r3, r0
 800972a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800972c:	65ba      	str	r2, [r7, #88]	; 0x58
 800972e:	657b      	str	r3, [r7, #84]	; 0x54
 8009730:	2310      	movs	r3, #16
 8009732:	653b      	str	r3, [r7, #80]	; 0x50
    size_t i = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (; (i + 4) <= n; i += 4) {
 8009738:	e01e      	b.n	8009778 <gcm_gen_table+0x19c>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800973a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800973c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800973e:	4413      	add	r3, r2
 8009740:	64bb      	str	r3, [r7, #72]	; 0x48
 8009742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009744:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009746:	623b      	str	r3, [r7, #32]
    return r;
 8009748:	6a3a      	ldr	r2, [r7, #32]
 800974a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800974c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800974e:	440b      	add	r3, r1
 8009750:	647b      	str	r3, [r7, #68]	; 0x44
 8009752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009754:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009756:	61fb      	str	r3, [r7, #28]
    return r;
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4053      	eors	r3, r2
 800975c:	643b      	str	r3, [r7, #64]	; 0x40
        mbedtls_put_unaligned_uint32(r + i, x);
 800975e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009762:	4413      	add	r3, r2
 8009764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009768:	61bb      	str	r3, [r7, #24]
 800976a:	69ba      	ldr	r2, [r7, #24]
    memcpy(p, &x, sizeof(x));
 800976c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976e:	601a      	str	r2, [r3, #0]
}
 8009770:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8009772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009774:	3304      	adds	r3, #4
 8009776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800977a:	3304      	adds	r3, #4
 800977c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800977e:	429a      	cmp	r2, r3
 8009780:	d2db      	bcs.n	800973a <gcm_gen_table+0x15e>
    for (; i < n; i++) {
 8009782:	e010      	b.n	80097a6 <gcm_gen_table+0x1ca>
        r[i] = a[i] ^ b[i];
 8009784:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009788:	4413      	add	r3, r2
 800978a:	7819      	ldrb	r1, [r3, #0]
 800978c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800978e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009790:	4413      	add	r3, r2
 8009792:	781a      	ldrb	r2, [r3, #0]
 8009794:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009798:	4403      	add	r3, r0
 800979a:	404a      	eors	r2, r1
 800979c:	b2d2      	uxtb	r2, r2
 800979e:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80097a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a2:	3301      	adds	r3, #1
 80097a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d8ea      	bhi.n	8009784 <gcm_gen_table+0x1a8>
}
 80097ae:	bf00      	nop
                for (j = 1; j < i; j++) {
 80097b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097b2:	3301      	adds	r3, #1
 80097b4:	673b      	str	r3, [r7, #112]	; 0x70
 80097b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80097b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097ba:	429a      	cmp	r2, r3
 80097bc:	dba4      	blt.n	8009708 <gcm_gen_table+0x12c>
            for (i = 2; i < MBEDTLS_GCM_HTABLE_SIZE; i <<= 1) {
 80097be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097c0:	005b      	lsls	r3, r3, #1
 80097c2:	677b      	str	r3, [r7, #116]	; 0x74
 80097c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097c6:	2b0f      	cmp	r3, #15
 80097c8:	dd9b      	ble.n	8009702 <gcm_gen_table+0x126>
                                        16);
                }
            }
    }

    return 0;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	377c      	adds	r7, #124	; 0x7c
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd90      	pop	{r4, r7, pc}

080097d4 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey(mbedtls_gcm_context *ctx,
                       mbedtls_cipher_id_t cipher,
                       const unsigned char *key,
                       unsigned int keybits)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	607a      	str	r2, [r7, #4]
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	460b      	mov	r3, r1
 80097e2:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80097e4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80097e8:	617b      	str	r3, [r7, #20]

    if (keybits != 128 && keybits != 192 && keybits != 256) {
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2b80      	cmp	r3, #128	; 0x80
 80097ee:	d009      	beq.n	8009804 <mbedtls_gcm_setkey+0x30>
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2bc0      	cmp	r3, #192	; 0xc0
 80097f4:	d006      	beq.n	8009804 <mbedtls_gcm_setkey+0x30>
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097fc:	d002      	beq.n	8009804 <mbedtls_gcm_setkey+0x30>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 80097fe:	f06f 0313 	mvn.w	r3, #19
 8009802:	e03a      	b.n	800987a <mbedtls_gcm_setkey+0xa6>
        return ret;
    }
#else
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values(cipher, keybits,
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	7afb      	ldrb	r3, [r7, #11]
 8009808:	2201      	movs	r2, #1
 800980a:	4618      	mov	r0, r3
 800980c:	f7fc fe80 	bl	8006510 <mbedtls_cipher_info_from_values>
 8009810:	6138      	str	r0, [r7, #16]
                                                  MBEDTLS_MODE_ECB);
    if (cipher_info == NULL) {
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d102      	bne.n	800981e <mbedtls_gcm_setkey+0x4a>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 8009818:	f06f 0313 	mvn.w	r3, #19
 800981c:	e02d      	b.n	800987a <mbedtls_gcm_setkey+0xa6>
    }

    if (mbedtls_cipher_info_get_block_size(cipher_info) != 16) {
 800981e:	6938      	ldr	r0, [r7, #16]
 8009820:	f7ff fe2c 	bl	800947c <mbedtls_cipher_info_get_block_size>
 8009824:	4603      	mov	r3, r0
 8009826:	2b10      	cmp	r3, #16
 8009828:	d002      	beq.n	8009830 <mbedtls_gcm_setkey+0x5c>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800982a:	f06f 0313 	mvn.w	r3, #19
 800982e:	e024      	b.n	800987a <mbedtls_gcm_setkey+0xa6>
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4618      	mov	r0, r3
 8009834:	f7fc feb3 	bl	800659e <mbedtls_cipher_free>

    if ((ret = mbedtls_cipher_setup(&ctx->cipher_ctx, cipher_info)) != 0) {
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6939      	ldr	r1, [r7, #16]
 800983c:	4618      	mov	r0, r3
 800983e:	f7fc fed7 	bl	80065f0 <mbedtls_cipher_setup>
 8009842:	6178      	str	r0, [r7, #20]
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <mbedtls_gcm_setkey+0x7a>
        return ret;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	e015      	b.n	800987a <mbedtls_gcm_setkey+0xa6>
    }

    if ((ret = mbedtls_cipher_setkey(&ctx->cipher_ctx, key, keybits,
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	2301      	movs	r3, #1
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	f7fc fefd 	bl	8006654 <mbedtls_cipher_setkey>
 800985a:	6178      	str	r0, [r7, #20]
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <mbedtls_gcm_setkey+0x92>
                                     MBEDTLS_ENCRYPT)) != 0) {
        return ret;
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	e009      	b.n	800987a <mbedtls_gcm_setkey+0xa6>
    }
#endif

    if ((ret = gcm_gen_table(ctx)) != 0) {
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f7ff feb8 	bl	80095dc <gcm_gen_table>
 800986c:	6178      	str	r0, [r7, #20]
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <mbedtls_gcm_setkey+0xa4>
        return ret;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	e000      	b.n	800987a <mbedtls_gcm_setkey+0xa6>
    }

    return 0;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <gcm_mult_smalltable>:
    0xe100, 0xfd20, 0xd940, 0xc560,
    0x9180, 0x8da0, 0xa9c0, 0xb5e0
};

static void gcm_mult_smalltable(uint8_t *output, const uint8_t *x, uint64_t H[16][2])
{
 8009884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009888:	b0c6      	sub	sp, #280	; 0x118
 800988a:	af00      	add	r7, sp, #0
 800988c:	6478      	str	r0, [r7, #68]	; 0x44
 800988e:	6439      	str	r1, [r7, #64]	; 0x40
 8009890:	63fa      	str	r2, [r7, #60]	; 0x3c
    int i = 0;
 8009892:	2300      	movs	r3, #0
 8009894:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    unsigned char lo, hi, rem;
    uint64_t u64z[2];
    const uint64_t *pu64z = NULL;
 8009898:	2300      	movs	r3, #0
 800989a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    uint8_t *u8z = (uint8_t *) u64z;
 800989e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80098a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    lo = x[15] & 0xf;
 80098a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a8:	330f      	adds	r3, #15
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	f003 030f 	and.w	r3, r3, #15
 80098b0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    hi = (x[15] >> 4) & 0xf;
 80098b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098b6:	330f      	adds	r3, #15
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	091b      	lsrs	r3, r3, #4
 80098bc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

    pu64z = H[lo];
 80098c0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80098c4:	011a      	lsls	r2, r3, #4
 80098c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c8:	4413      	add	r3, r2
 80098ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    rem = (unsigned char) pu64z[1] & 0xf;
 80098ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80098d2:	3308      	adds	r3, #8
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	b2d3      	uxtb	r3, r2
 80098da:	f003 030f 	and.w	r3, r3, #15
 80098de:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    u64z[1] = (pu64z[0] << 60) | (pu64z[1] >> 4);
 80098e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80098e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ea:	f04f 0400 	mov.w	r4, #0
 80098ee:	f04f 0500 	mov.w	r5, #0
 80098f2:	0715      	lsls	r5, r2, #28
 80098f4:	2400      	movs	r4, #0
 80098f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80098fa:	3308      	adds	r3, #8
 80098fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009900:	f04f 0000 	mov.w	r0, #0
 8009904:	f04f 0100 	mov.w	r1, #0
 8009908:	0910      	lsrs	r0, r2, #4
 800990a:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800990e:	0919      	lsrs	r1, r3, #4
 8009910:	ea44 0800 	orr.w	r8, r4, r0
 8009914:	ea45 0901 	orr.w	r9, r5, r1
 8009918:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
    u64z[0] = (pu64z[0] >> 4);
 800991c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	f04f 0000 	mov.w	r0, #0
 8009928:	f04f 0100 	mov.w	r1, #0
 800992c:	0910      	lsrs	r0, r2, #4
 800992e:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8009932:	0919      	lsrs	r1, r3, #4
 8009934:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
    u64z[0] ^= (uint64_t) last4[rem] << 48;
 8009938:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800993c:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 8009940:	4bd7      	ldr	r3, [pc, #860]	; (8009ca0 <gcm_mult_smalltable+0x41c>)
 8009942:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009946:	b29b      	uxth	r3, r3
 8009948:	2200      	movs	r2, #0
 800994a:	633b      	str	r3, [r7, #48]	; 0x30
 800994c:	637a      	str	r2, [r7, #52]	; 0x34
 800994e:	f04f 0200 	mov.w	r2, #0
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8009958:	0423      	lsls	r3, r4, #16
 800995a:	2200      	movs	r2, #0
 800995c:	ea80 0a02 	eor.w	sl, r0, r2
 8009960:	ea81 0b03 	eor.w	fp, r1, r3
 8009964:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
    mbedtls_xor_no_simd(u8z, u8z, (uint8_t *) H[hi], 16);
 8009968:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800996c:	011b      	lsls	r3, r3, #4
 800996e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009970:	441a      	add	r2, r3
 8009972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009976:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800997a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800997e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009982:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8009986:	2310      	movs	r3, #16
 8009988:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    size_t i = 0;
 800998c:	2300      	movs	r3, #0
 800998e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    for (; (i + 4) <= n; i += 4) {
 8009992:	e02e      	b.n	80099f2 <gcm_mult_smalltable+0x16e>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8009994:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8009998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800999c:	4413      	add	r3, r2
 800999e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80099a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80099a6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80099a8:	657b      	str	r3, [r7, #84]	; 0x54
    return r;
 80099aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099ac:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80099b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099b4:	4413      	add	r3, r2
 80099b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80099ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80099be:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80099c0:	653b      	str	r3, [r7, #80]	; 0x50
    return r;
 80099c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099c4:	404b      	eors	r3, r1
 80099c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
        mbedtls_put_unaligned_uint32(r + i, x);
 80099ca:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80099ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d2:	4413      	add	r3, r2
 80099d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    memcpy(p, &x, sizeof(x));
 80099e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e4:	601a      	str	r2, [r3, #0]
}
 80099e6:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80099e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ec:	3304      	adds	r3, #4
 80099ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80099f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f6:	3304      	adds	r3, #4
 80099f8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d2c9      	bcs.n	8009994 <gcm_mult_smalltable+0x110>
    for (; i < n; i++) {
 8009a00:	e019      	b.n	8009a36 <gcm_mult_smalltable+0x1b2>
        r[i] = a[i] ^ b[i];
 8009a02:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8009a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a0a:	4413      	add	r3, r2
 8009a0c:	7818      	ldrb	r0, [r3, #0]
 8009a0e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8009a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a16:	4413      	add	r3, r2
 8009a18:	7819      	ldrb	r1, [r3, #0]
 8009a1a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a22:	441a      	add	r2, r3
 8009a24:	ea80 0301 	eor.w	r3, r0, r1
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	7013      	strb	r3, [r2, #0]
    for (; i < n; i++) {
 8009a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a30:	3301      	adds	r3, #1
 8009a32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a36:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8009a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d8df      	bhi.n	8009a02 <gcm_mult_smalltable+0x17e>
}
 8009a42:	bf00      	nop

    for (i = 14; i >= 0; i--) {
 8009a44:	230e      	movs	r3, #14
 8009a46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009a4a:	e188      	b.n	8009d5e <gcm_mult_smalltable+0x4da>
        lo = x[i] & 0xf;
 8009a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a52:	4413      	add	r3, r2
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	f003 030f 	and.w	r3, r3, #15
 8009a5a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        hi = (x[i] >> 4) & 0xf;
 8009a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a64:	4413      	add	r3, r2
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	091b      	lsrs	r3, r3, #4
 8009a6a:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

        rem = (unsigned char) u64z[1] & 0xf;
 8009a6e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009a72:	b2d3      	uxtb	r3, r2
 8009a74:	f003 030f 	and.w	r3, r3, #15
 8009a78:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
        u64z[1] = (u64z[0] << 60) | (u64z[1] >> 4);
 8009a7c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009a80:	f04f 0400 	mov.w	r4, #0
 8009a84:	f04f 0500 	mov.w	r5, #0
 8009a88:	0715      	lsls	r5, r2, #28
 8009a8a:	2400      	movs	r4, #0
 8009a8c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009a90:	f04f 0000 	mov.w	r0, #0
 8009a94:	f04f 0100 	mov.w	r1, #0
 8009a98:	0910      	lsrs	r0, r2, #4
 8009a9a:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8009a9e:	0919      	lsrs	r1, r3, #4
 8009aa0:	ea44 0300 	orr.w	r3, r4, r0
 8009aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009aa6:	ea45 0301 	orr.w	r3, r5, r1
 8009aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009aac:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8009ab0:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        u64z[0] = (u64z[0] >> 4);
 8009ab4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009ab8:	f04f 0000 	mov.w	r0, #0
 8009abc:	f04f 0100 	mov.w	r1, #0
 8009ac0:	0910      	lsrs	r0, r2, #4
 8009ac2:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8009ac6:	0919      	lsrs	r1, r3, #4
 8009ac8:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
        u64z[0] ^= (uint64_t) last4[rem] << 48;
 8009acc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009ad0:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 8009ad4:	4b72      	ldr	r3, [pc, #456]	; (8009ca0 <gcm_mult_smalltable+0x41c>)
 8009ad6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	2200      	movs	r2, #0
 8009ade:	623b      	str	r3, [r7, #32]
 8009ae0:	627a      	str	r2, [r7, #36]	; 0x24
 8009ae2:	f04f 0200 	mov.w	r2, #0
 8009ae6:	f04f 0300 	mov.w	r3, #0
 8009aea:	6a3c      	ldr	r4, [r7, #32]
 8009aec:	0423      	lsls	r3, r4, #16
 8009aee:	2200      	movs	r2, #0
 8009af0:	ea80 0402 	eor.w	r4, r0, r2
 8009af4:	61bc      	str	r4, [r7, #24]
 8009af6:	404b      	eors	r3, r1
 8009af8:	61fb      	str	r3, [r7, #28]
 8009afa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009afe:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        mbedtls_xor_no_simd(u8z, u8z, (uint8_t *) H[lo], 16);
 8009b02:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009b06:	011b      	lsls	r3, r3, #4
 8009b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b0a:	441a      	add	r2, r3
 8009b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b1c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8009b20:	2310      	movs	r3, #16
 8009b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    size_t i = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (; (i + 4) <= n; i += 4) {
 8009b2c:	e02e      	b.n	8009b8c <gcm_mult_smalltable+0x308>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8009b2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b36:	4413      	add	r3, r2
 8009b38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009b3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b40:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009b42:	66fb      	str	r3, [r7, #108]	; 0x6c
    return r;
 8009b44:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b4e:	4413      	add	r3, r2
 8009b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009b54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b58:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009b5a:	66bb      	str	r3, [r7, #104]	; 0x68
    return r;
 8009b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b5e:	404b      	eors	r3, r1
 8009b60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        mbedtls_put_unaligned_uint32(r + i, x);
 8009b64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b76:	667b      	str	r3, [r7, #100]	; 0x64
 8009b78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    memcpy(p, &x, sizeof(x));
 8009b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b7e:	601a      	str	r2, [r3, #0]
}
 8009b80:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8009b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b86:	3304      	adds	r3, #4
 8009b88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b90:	3304      	adds	r3, #4
 8009b92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d2c9      	bcs.n	8009b2e <gcm_mult_smalltable+0x2aa>
    for (; i < n; i++) {
 8009b9a:	e019      	b.n	8009bd0 <gcm_mult_smalltable+0x34c>
        r[i] = a[i] ^ b[i];
 8009b9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ba4:	4413      	add	r3, r2
 8009ba6:	7818      	ldrb	r0, [r3, #0]
 8009ba8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009bac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bb0:	4413      	add	r3, r2
 8009bb2:	7819      	ldrb	r1, [r3, #0]
 8009bb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bbc:	441a      	add	r2, r3
 8009bbe:	ea80 0301 	eor.w	r3, r0, r1
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	7013      	strb	r3, [r2, #0]
    for (; i < n; i++) {
 8009bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bca:	3301      	adds	r3, #1
 8009bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009bd0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009bd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d8df      	bhi.n	8009b9c <gcm_mult_smalltable+0x318>
}
 8009bdc:	bf00      	nop

        rem = (unsigned char) u64z[1] & 0xf;
 8009bde:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009be2:	b2d3      	uxtb	r3, r2
 8009be4:	f003 030f 	and.w	r3, r3, #15
 8009be8:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
        u64z[1] = (u64z[0] << 60) | (u64z[1] >> 4);
 8009bec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009bf0:	f04f 0400 	mov.w	r4, #0
 8009bf4:	f04f 0500 	mov.w	r5, #0
 8009bf8:	0715      	lsls	r5, r2, #28
 8009bfa:	2400      	movs	r4, #0
 8009bfc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009c00:	f04f 0000 	mov.w	r0, #0
 8009c04:	f04f 0100 	mov.w	r1, #0
 8009c08:	0910      	lsrs	r0, r2, #4
 8009c0a:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8009c0e:	0919      	lsrs	r1, r3, #4
 8009c10:	ea44 0300 	orr.w	r3, r4, r0
 8009c14:	613b      	str	r3, [r7, #16]
 8009c16:	ea45 0301 	orr.w	r3, r5, r1
 8009c1a:	617b      	str	r3, [r7, #20]
 8009c1c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009c20:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        u64z[0] = (u64z[0] >> 4);
 8009c24:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009c28:	f04f 0000 	mov.w	r0, #0
 8009c2c:	f04f 0100 	mov.w	r1, #0
 8009c30:	0910      	lsrs	r0, r2, #4
 8009c32:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8009c36:	0919      	lsrs	r1, r3, #4
 8009c38:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
        u64z[0] ^= (uint64_t) last4[rem] << 48;
 8009c3c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009c40:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 8009c44:	4b16      	ldr	r3, [pc, #88]	; (8009ca0 <gcm_mult_smalltable+0x41c>)
 8009c46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	60bb      	str	r3, [r7, #8]
 8009c50:	60fa      	str	r2, [r7, #12]
 8009c52:	f04f 0200 	mov.w	r2, #0
 8009c56:	f04f 0300 	mov.w	r3, #0
 8009c5a:	68bc      	ldr	r4, [r7, #8]
 8009c5c:	0423      	lsls	r3, r4, #16
 8009c5e:	2200      	movs	r2, #0
 8009c60:	ea80 0402 	eor.w	r4, r0, r2
 8009c64:	603c      	str	r4, [r7, #0]
 8009c66:	404b      	eors	r3, r1
 8009c68:	607b      	str	r3, [r7, #4]
 8009c6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009c6e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        mbedtls_xor_no_simd(u8z, u8z, (uint8_t *) H[hi], 16);
 8009c72:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c7a:	441a      	add	r2, r3
 8009c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c8c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8009c90:	2310      	movs	r3, #16
 8009c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    size_t i = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    for (; (i + 4) <= n; i += 4) {
 8009c9c:	e031      	b.n	8009d02 <gcm_mult_smalltable+0x47e>
 8009c9e:	bf00      	nop
 8009ca0:	0800f294 	.word	0x0800f294
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8009ca4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009ca8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009cac:	4413      	add	r3, r2
 8009cae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009cb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009cb6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009cb8:	663b      	str	r3, [r7, #96]	; 0x60
    return r;
 8009cba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009cbc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009cc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009cc4:	4413      	add	r3, r2
 8009cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009cca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cce:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    return r;
 8009cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cd4:	404b      	eors	r3, r1
 8009cd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        mbedtls_put_unaligned_uint32(r + i, x);
 8009cda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009cde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009cec:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cee:	6dba      	ldr	r2, [r7, #88]	; 0x58
    memcpy(p, &x, sizeof(x));
 8009cf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009cf4:	601a      	str	r2, [r3, #0]
}
 8009cf6:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8009cf8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d06:	3304      	adds	r3, #4
 8009d08:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d2c9      	bcs.n	8009ca4 <gcm_mult_smalltable+0x420>
    for (; i < n; i++) {
 8009d10:	e019      	b.n	8009d46 <gcm_mult_smalltable+0x4c2>
        r[i] = a[i] ^ b[i];
 8009d12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009d16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d1a:	4413      	add	r3, r2
 8009d1c:	7818      	ldrb	r0, [r3, #0]
 8009d1e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009d22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d26:	4413      	add	r3, r2
 8009d28:	7819      	ldrb	r1, [r3, #0]
 8009d2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009d2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d32:	441a      	add	r2, r3
 8009d34:	ea80 0301 	eor.w	r3, r0, r1
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	7013      	strb	r3, [r2, #0]
    for (; i < n; i++) {
 8009d3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d40:	3301      	adds	r3, #1
 8009d42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d46:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009d4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d8df      	bhi.n	8009d12 <gcm_mult_smalltable+0x48e>
}
 8009d52:	bf00      	nop
    for (i = 14; i >= 0; i--) {
 8009d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f6bf ae72 	bge.w	8009a4c <gcm_mult_smalltable+0x1c8>
    }

    MBEDTLS_PUT_UINT64_BE(u64z[0], output, 0);
 8009d68:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009d6c:	ba11      	rev	r1, r2
 8009d6e:	ba18      	rev	r0, r3
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d76:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8009d7a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    memcpy(p, &x, sizeof(x));
 8009d7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009d82:	2208      	movs	r2, #8
 8009d84:	4619      	mov	r1, r3
 8009d86:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8009d8a:	f002 ffec 	bl	800cd66 <memcpy>
}
 8009d8e:	bf00      	nop
    MBEDTLS_PUT_UINT64_BE(u64z[1], output, 8);
 8009d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d92:	f103 0108 	add.w	r1, r3, #8
 8009d96:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009d9a:	ba10      	rev	r0, r2
 8009d9c:	ba1c      	rev	r4, r3
 8009d9e:	4622      	mov	r2, r4
 8009da0:	4603      	mov	r3, r0
 8009da2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8009da6:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    memcpy(p, &x, sizeof(x));
 8009daa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009dae:	2208      	movs	r2, #8
 8009db0:	4619      	mov	r1, r3
 8009db2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8009db6:	f002 ffd6 	bl	800cd66 <memcpy>
}
 8009dba:	bf00      	nop
}
 8009dbc:	bf00      	nop
 8009dbe:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009dc8 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult(mbedtls_gcm_context *ctx, const unsigned char x[16],
                     unsigned char output[16])
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
    switch (ctx->acceleration) {
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d108      	bne.n	8009df0 <gcm_mult+0x28>
        case MBEDTLS_GCM_ACC_LARGETABLE:
            gcm_mult_largetable(output, x, ctx->H);
            break;
#else
        case MBEDTLS_GCM_ACC_SMALLTABLE:
            gcm_mult_smalltable(output, x, ctx->H);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3348      	adds	r3, #72	; 0x48
 8009de2:	461a      	mov	r2, r3
 8009de4:	68b9      	ldr	r1, [r7, #8]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7ff fd4c 	bl	8009884 <gcm_mult_smalltable>
            break;
 8009dec:	bf00      	nop
#endif
    }

    return;
 8009dee:	bf00      	nop
 8009df0:	bf00      	nop
}
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <gcm_incr>:
    return 0;
}

/* Increment the counter. */
static void gcm_incr(unsigned char y[16])
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b089      	sub	sp, #36	; 0x24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
    uint32_t x = MBEDTLS_GET_UINT32_BE(y, 12);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	330c      	adds	r3, #12
 8009e04:	61bb      	str	r3, [r7, #24]
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009e0a:	60fb      	str	r3, [r7, #12]
    return r;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	ba1b      	rev	r3, r3
 8009e10:	61fb      	str	r3, [r7, #28]
    x++;
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	3301      	adds	r3, #1
 8009e16:	61fb      	str	r3, [r7, #28]
    MBEDTLS_PUT_UINT32_BE(x, y, 12);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f103 020c 	add.w	r2, r3, #12
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	ba1b      	rev	r3, r3
 8009e22:	617a      	str	r2, [r7, #20]
 8009e24:	613b      	str	r3, [r7, #16]
 8009e26:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	601a      	str	r2, [r3, #0]
}
 8009e2c:	bf00      	nop
}
 8009e2e:	bf00      	nop
 8009e30:	3724      	adds	r7, #36	; 0x24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <gcm_mask>:
static int gcm_mask(mbedtls_gcm_context *ctx,
                    unsigned char ectr[16],
                    size_t offset, size_t use_len,
                    const unsigned char *input,
                    unsigned char *output)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b0ac      	sub	sp, #176	; 0xb0
 8009e3e:	af02      	add	r7, sp, #8
 8009e40:	60f8      	str	r0, [r7, #12]
 8009e42:	60b9      	str	r1, [r7, #8]
 8009e44:	607a      	str	r2, [r7, #4]
 8009e46:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8009e48:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8009e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

#if defined(MBEDTLS_BLOCK_CIPHER_C)
    ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, ctx->y, ectr);
#else
    size_t olen = 0;
 8009e50:	2300      	movs	r3, #0
 8009e52:	637b      	str	r3, [r7, #52]	; 0x34
    ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16, ectr, &olen);
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8009e5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	2210      	movs	r2, #16
 8009e66:	f7fc fc6d 	bl	8006744 <mbedtls_cipher_update>
 8009e6a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
#endif
    if (ret != 0) {
 8009e6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d006      	beq.n	8009e84 <gcm_mask+0x4a>
        mbedtls_platform_zeroize(ectr, 16);
 8009e76:	2110      	movs	r1, #16
 8009e78:	68b8      	ldr	r0, [r7, #8]
 8009e7a:	f000 faeb 	bl	800a454 <mbedtls_platform_zeroize>
        return ret;
 8009e7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e82:	e113      	b.n	800a0ac <gcm_mask+0x272>
    }

    if (ctx->mode == MBEDTLS_GCM_DECRYPT) {
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d16f      	bne.n	8009f6e <gcm_mask+0x134>
        mbedtls_xor(ctx->buf + offset, ctx->buf + offset, input, use_len);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	441a      	add	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	440b      	add	r3, r1
 8009ea2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8009ea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009eaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009eae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    size_t i = 0;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    for (; (i + 4) <= n; i += 4) {
 8009ebe:	e02e      	b.n	8009f1e <gcm_mask+0xe4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8009ec0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ec8:	4413      	add	r3, r2
 8009eca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ed2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009ed4:	61bb      	str	r3, [r7, #24]
    return r;
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8009edc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ee0:	440b      	add	r3, r1
 8009ee2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ee6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009eea:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009eec:	617b      	str	r3, [r7, #20]
    return r;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	4053      	eors	r3, r2
 8009ef2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        mbedtls_put_unaligned_uint32(r + i, x);
 8009ef6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009efa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009efe:	4413      	add	r3, r2
 8009f00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f08:	613b      	str	r3, [r7, #16]
 8009f0a:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 8009f0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f10:	601a      	str	r2, [r3, #0]
}
 8009f12:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8009f14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f18:	3304      	adds	r3, #4
 8009f1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f22:	3304      	adds	r3, #4
 8009f24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d2c9      	bcs.n	8009ec0 <gcm_mask+0x86>
    for (; i < n; i++) {
 8009f2c:	e018      	b.n	8009f60 <gcm_mask+0x126>
        r[i] = a[i] ^ b[i];
 8009f2e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f36:	4413      	add	r3, r2
 8009f38:	7819      	ldrb	r1, [r3, #0]
 8009f3a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f42:	4413      	add	r3, r2
 8009f44:	781a      	ldrb	r2, [r3, #0]
 8009f46:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f4e:	4403      	add	r3, r0
 8009f50:	404a      	eors	r2, r1
 8009f52:	b2d2      	uxtb	r2, r2
 8009f54:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8009f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f60:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d8e0      	bhi.n	8009f2e <gcm_mask+0xf4>
}
 8009f6c:	bf00      	nop
    }
    mbedtls_xor(output, ectr + offset, input, use_len);
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4413      	add	r3, r2
 8009f74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009f78:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009f7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009f80:	677b      	str	r3, [r7, #116]	; 0x74
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	673b      	str	r3, [r7, #112]	; 0x70
    size_t i = 0;
 8009f86:	2300      	movs	r3, #0
 8009f88:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (; (i + 4) <= n; i += 4) {
 8009f8a:	e01e      	b.n	8009fca <gcm_mask+0x190>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8009f8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f90:	4413      	add	r3, r2
 8009f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f96:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009f98:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8009f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8009f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fa0:	440b      	add	r3, r1
 8009fa2:	667b      	str	r3, [r7, #100]	; 0x64
 8009fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fa6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009fa8:	623b      	str	r3, [r7, #32]
    return r;
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	4053      	eors	r3, r2
 8009fae:	663b      	str	r3, [r7, #96]	; 0x60
        mbedtls_put_unaligned_uint32(r + i, x);
 8009fb0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fb4:	4413      	add	r3, r2
 8009fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fba:	61fb      	str	r3, [r7, #28]
 8009fbc:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 8009fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fc0:	601a      	str	r2, [r3, #0]
}
 8009fc2:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8009fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fcc:	3304      	adds	r3, #4
 8009fce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d2db      	bcs.n	8009f8c <gcm_mask+0x152>
    for (; i < n; i++) {
 8009fd4:	e010      	b.n	8009ff8 <gcm_mask+0x1be>
        r[i] = a[i] ^ b[i];
 8009fd6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fda:	4413      	add	r3, r2
 8009fdc:	7819      	ldrb	r1, [r3, #0]
 8009fde:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fe2:	4413      	add	r3, r2
 8009fe4:	781a      	ldrb	r2, [r3, #0]
 8009fe6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8009fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fea:	4403      	add	r3, r0
 8009fec:	404a      	eors	r2, r1
 8009fee:	b2d2      	uxtb	r2, r2
 8009ff0:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8009ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ff8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d8ea      	bhi.n	8009fd6 <gcm_mask+0x19c>
}
 800a000:	bf00      	nop
    if (ctx->mode == MBEDTLS_GCM_ENCRYPT) {
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d14e      	bne.n	800a0aa <gcm_mask+0x270>
        mbedtls_xor(ctx->buf + offset, ctx->buf + offset, output, use_len);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	441a      	add	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	440b      	add	r3, r1
 800a020:	65ba      	str	r2, [r7, #88]	; 0x58
 800a022:	657b      	str	r3, [r7, #84]	; 0x54
 800a024:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a028:	653b      	str	r3, [r7, #80]	; 0x50
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t i = 0;
 800a02e:	2300      	movs	r3, #0
 800a030:	64bb      	str	r3, [r7, #72]	; 0x48
    for (; (i + 4) <= n; i += 4) {
 800a032:	e01e      	b.n	800a072 <gcm_mask+0x238>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800a034:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a038:	4413      	add	r3, r2
 800a03a:	647b      	str	r3, [r7, #68]	; 0x44
 800a03c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a03e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a040:	633b      	str	r3, [r7, #48]	; 0x30
    return r;
 800a042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a044:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a048:	440b      	add	r3, r1
 800a04a:	643b      	str	r3, [r7, #64]	; 0x40
 800a04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a04e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a050:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 800a052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a054:	4053      	eors	r3, r2
 800a056:	63fb      	str	r3, [r7, #60]	; 0x3c
        mbedtls_put_unaligned_uint32(r + i, x);
 800a058:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a05a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a05c:	4413      	add	r3, r2
 800a05e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a062:	62bb      	str	r3, [r7, #40]	; 0x28
 800a064:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 800a066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a068:	601a      	str	r2, [r3, #0]
}
 800a06a:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800a06c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a06e:	3304      	adds	r3, #4
 800a070:	64bb      	str	r3, [r7, #72]	; 0x48
 800a072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a074:	3304      	adds	r3, #4
 800a076:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a078:	429a      	cmp	r2, r3
 800a07a:	d2db      	bcs.n	800a034 <gcm_mask+0x1fa>
    for (; i < n; i++) {
 800a07c:	e010      	b.n	800a0a0 <gcm_mask+0x266>
        r[i] = a[i] ^ b[i];
 800a07e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a082:	4413      	add	r3, r2
 800a084:	7819      	ldrb	r1, [r3, #0]
 800a086:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a08a:	4413      	add	r3, r2
 800a08c:	781a      	ldrb	r2, [r3, #0]
 800a08e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a092:	4403      	add	r3, r0
 800a094:	404a      	eors	r2, r1
 800a096:	b2d2      	uxtb	r2, r2
 800a098:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800a09a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a09c:	3301      	adds	r3, #1
 800a09e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d8ea      	bhi.n	800a07e <gcm_mask+0x244>
}
 800a0a8:	bf00      	nop
    }

    return 0;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	37a8      	adds	r7, #168	; 0xa8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <mbedtls_gcm_update>:

int mbedtls_gcm_update(mbedtls_gcm_context *ctx,
                       const unsigned char *input, size_t input_length,
                       unsigned char *output, size_t output_size,
                       size_t *output_length)
{
 800a0b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0b8:	b09c      	sub	sp, #112	; 0x70
 800a0ba:	af02      	add	r7, sp, #8
 800a0bc:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a0be:	63b9      	str	r1, [r7, #56]	; 0x38
 800a0c0:	637a      	str	r2, [r7, #52]	; 0x34
 800a0c2:	633b      	str	r3, [r7, #48]	; 0x30
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800a0c4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800a0c8:	65bb      	str	r3, [r7, #88]	; 0x58
    const unsigned char *p = input;
 800a0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0cc:	667b      	str	r3, [r7, #100]	; 0x64
    unsigned char *out_p = output;
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	663b      	str	r3, [r7, #96]	; 0x60
    size_t offset;
    unsigned char ectr[16] = { 0 };
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a0d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a0da:	2300      	movs	r3, #0
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	6053      	str	r3, [r2, #4]
 800a0e0:	6093      	str	r3, [r2, #8]

    if (output_size < input_length) {
 800a0e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d202      	bcs.n	800a0f2 <mbedtls_gcm_update+0x3e>
        return MBEDTLS_ERR_GCM_BUFFER_TOO_SMALL;
 800a0ec:	f06f 0315 	mvn.w	r3, #21
 800a0f0:	e113      	b.n	800a31a <mbedtls_gcm_update+0x266>
    }
    *output_length = input_length;
 800a0f2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f8:	6013      	str	r3, [r2, #0]

    /* Exit early if input_length==0 so that we don't do any pointer arithmetic
     * on a potentially null pointer.
     * Returning early also means that the last partial block of AD remains
     * untouched for mbedtls_gcm_finish */
    if (input_length == 0) {
 800a0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d101      	bne.n	800a104 <mbedtls_gcm_update+0x50>
        return 0;
 800a100:	2300      	movs	r3, #0
 800a102:	e10a      	b.n	800a31a <mbedtls_gcm_update+0x266>
    }

    if (output > input && (size_t) (output - input) < input_length) {
 800a104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a108:	429a      	cmp	r2, r3
 800a10a:	d909      	bls.n	800a120 <mbedtls_gcm_update+0x6c>
 800a10c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	461a      	mov	r2, r3
 800a114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a116:	4293      	cmp	r3, r2
 800a118:	d902      	bls.n	800a120 <mbedtls_gcm_update+0x6c>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800a11a:	f06f 0313 	mvn.w	r3, #19
 800a11e:	e0fc      	b.n	800a31a <mbedtls_gcm_update+0x266>
    }

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if (ctx->len + input_length < ctx->len ||
 800a120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a122:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800a126:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a128:	2000      	movs	r0, #0
 800a12a:	62b9      	str	r1, [r7, #40]	; 0x28
 800a12c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a12e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a130:	1854      	adds	r4, r2, r1
 800a132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a134:	eb43 0101 	adc.w	r1, r3, r1
 800a138:	460d      	mov	r5, r1
 800a13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a13c:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800a140:	4294      	cmp	r4, r2
 800a142:	eb75 0303 	sbcs.w	r3, r5, r3
 800a146:	d313      	bcc.n	800a170 <mbedtls_gcm_update+0xbc>
        (uint64_t) ctx->len + input_length > 0xFFFFFFFE0ull) {
 800a148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a14a:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800a14e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a150:	2000      	movs	r0, #0
 800a152:	6239      	str	r1, [r7, #32]
 800a154:	6278      	str	r0, [r7, #36]	; 0x24
 800a156:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800a15a:	4621      	mov	r1, r4
 800a15c:	eb12 0801 	adds.w	r8, r2, r1
 800a160:	4629      	mov	r1, r5
 800a162:	eb43 0901 	adc.w	r9, r3, r1
    if (ctx->len + input_length < ctx->len ||
 800a166:	f118 0f1f 	cmn.w	r8, #31
 800a16a:	f179 030f 	sbcs.w	r3, r9, #15
 800a16e:	d302      	bcc.n	800a176 <mbedtls_gcm_update+0xc2>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800a170:	f06f 0313 	mvn.w	r3, #19
 800a174:	e0d1      	b.n	800a31a <mbedtls_gcm_update+0x266>
    }

    if (ctx->len == 0 && ctx->add_len % 16 != 0) {
 800a176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a178:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800a17c:	4313      	orrs	r3, r2
 800a17e:	d113      	bne.n	800a1a8 <mbedtls_gcm_update+0xf4>
 800a180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a182:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800a186:	f002 0a0f 	and.w	sl, r2, #15
 800a18a:	f04f 0b00 	mov.w	fp, #0
 800a18e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a192:	d009      	beq.n	800a1a8 <mbedtls_gcm_update+0xf4>
        gcm_mult(ctx, ctx->buf, ctx->buf);
 800a194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a196:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800a19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a1a4:	f7ff fe10 	bl	8009dc8 <gcm_mult>
    }

    offset = ctx->len % 16;
 800a1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1aa:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	f003 030f 	and.w	r3, r3, #15
 800a1b4:	657b      	str	r3, [r7, #84]	; 0x54
    if (offset != 0) {
 800a1b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d04a      	beq.n	800a252 <mbedtls_gcm_update+0x19e>
        size_t use_len = 16 - offset;
 800a1bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1be:	f1c3 0310 	rsb	r3, r3, #16
 800a1c2:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (use_len > input_length) {
 800a1c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d901      	bls.n	800a1d0 <mbedtls_gcm_update+0x11c>
            use_len = input_length;
 800a1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ce:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        if ((ret = gcm_mask(ctx, ectr, offset, use_len, p, out_p)) != 0) {
 800a1d0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800a1d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a1e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a1e2:	f7ff fe2a 	bl	8009e3a <gcm_mask>
 800a1e6:	65b8      	str	r0, [r7, #88]	; 0x58
 800a1e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <mbedtls_gcm_update+0x13e>
            return ret;
 800a1ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1f0:	e093      	b.n	800a31a <mbedtls_gcm_update+0x266>
        }

        if (offset + use_len == 16) {
 800a1f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a1f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1f6:	4413      	add	r3, r2
 800a1f8:	2b10      	cmp	r3, #16
 800a1fa:	d109      	bne.n	800a210 <mbedtls_gcm_update+0x15c>
            gcm_mult(ctx, ctx->buf, ctx->buf);
 800a1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1fe:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800a202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a204:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800a208:	461a      	mov	r2, r3
 800a20a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a20c:	f7ff fddc 	bl	8009dc8 <gcm_mult>
        }

        ctx->len += use_len;
 800a210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a212:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800a216:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800a218:	2000      	movs	r0, #0
 800a21a:	61b9      	str	r1, [r7, #24]
 800a21c:	61f8      	str	r0, [r7, #28]
 800a21e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800a222:	4621      	mov	r1, r4
 800a224:	1851      	adds	r1, r2, r1
 800a226:	6139      	str	r1, [r7, #16]
 800a228:	4629      	mov	r1, r5
 800a22a:	eb43 0101 	adc.w	r1, r3, r1
 800a22e:	6179      	str	r1, [r7, #20]
 800a230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a232:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a236:	e9c3 1252 	strd	r1, r2, [r3, #328]	; 0x148
        input_length -= use_len;
 800a23a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a23c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	637b      	str	r3, [r7, #52]	; 0x34
        p += use_len;
 800a242:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a246:	4413      	add	r3, r2
 800a248:	667b      	str	r3, [r7, #100]	; 0x64
        out_p += use_len;
 800a24a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a24c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a24e:	4413      	add	r3, r2
 800a250:	663b      	str	r3, [r7, #96]	; 0x60
    }

    ctx->len += input_length;
 800a252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a254:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800a258:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a25a:	2000      	movs	r0, #0
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a264:	4621      	mov	r1, r4
 800a266:	1851      	adds	r1, r2, r1
 800a268:	6039      	str	r1, [r7, #0]
 800a26a:	4629      	mov	r1, r5
 800a26c:	eb43 0101 	adc.w	r1, r3, r1
 800a270:	6079      	str	r1, [r7, #4]
 800a272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a274:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a278:	e9c3 1252 	strd	r1, r2, [r3, #328]	; 0x148

    while (input_length >= 16) {
 800a27c:	e029      	b.n	800a2d2 <mbedtls_gcm_update+0x21e>
        gcm_incr(ctx->y);
 800a27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a280:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a284:	4618      	mov	r0, r3
 800a286:	f7ff fdb7 	bl	8009df8 <gcm_incr>
        if ((ret = gcm_mask(ctx, ectr, 0, 16, p, out_p)) != 0) {
 800a28a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800a28e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	2310      	movs	r3, #16
 800a298:	2200      	movs	r2, #0
 800a29a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a29c:	f7ff fdcd 	bl	8009e3a <gcm_mask>
 800a2a0:	65b8      	str	r0, [r7, #88]	; 0x58
 800a2a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <mbedtls_gcm_update+0x1f8>
            return ret;
 800a2a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2aa:	e036      	b.n	800a31a <mbedtls_gcm_update+0x266>
        }

        gcm_mult(ctx, ctx->buf, ctx->buf);
 800a2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ae:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800a2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a2bc:	f7ff fd84 	bl	8009dc8 <gcm_mult>

        input_length -= 16;
 800a2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c2:	3b10      	subs	r3, #16
 800a2c4:	637b      	str	r3, [r7, #52]	; 0x34
        p += 16;
 800a2c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2c8:	3310      	adds	r3, #16
 800a2ca:	667b      	str	r3, [r7, #100]	; 0x64
        out_p += 16;
 800a2cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2ce:	3310      	adds	r3, #16
 800a2d0:	663b      	str	r3, [r7, #96]	; 0x60
    while (input_length >= 16) {
 800a2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d4:	2b0f      	cmp	r3, #15
 800a2d6:	d8d2      	bhi.n	800a27e <mbedtls_gcm_update+0x1ca>
    }

    if (input_length > 0) {
 800a2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d016      	beq.n	800a30c <mbedtls_gcm_update+0x258>
        gcm_incr(ctx->y);
 800a2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff fd87 	bl	8009df8 <gcm_incr>
        if ((ret = gcm_mask(ctx, ectr, 0, input_length, p, out_p)) != 0) {
 800a2ea:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800a2ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a2fc:	f7ff fd9d 	bl	8009e3a <gcm_mask>
 800a300:	65b8      	str	r0, [r7, #88]	; 0x58
 800a302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <mbedtls_gcm_update+0x258>
            return ret;
 800a308:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a30a:	e006      	b.n	800a31a <mbedtls_gcm_update+0x266>
        }
    }

    mbedtls_platform_zeroize(ectr, sizeof(ectr));
 800a30c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a310:	2110      	movs	r1, #16
 800a312:	4618      	mov	r0, r3
 800a314:	f000 f89e 	bl	800a454 <mbedtls_platform_zeroize>
    return 0;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3768      	adds	r7, #104	; 0x68
 800a31e:	46bd      	mov	sp, r7
 800a320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a324 <mbedtls_gcm_free>:

    return 0;
}

void mbedtls_gcm_free(mbedtls_gcm_context *ctx)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d009      	beq.n	800a346 <mbedtls_gcm_free+0x22>
        return;
    }
#if defined(MBEDTLS_BLOCK_CIPHER_C)
    mbedtls_block_cipher_free(&ctx->block_cipher_ctx);
#else
    mbedtls_cipher_free(&ctx->cipher_ctx);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4618      	mov	r0, r3
 800a336:	f7fc f932 	bl	800659e <mbedtls_cipher_free>
#endif
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_gcm_context));
 800a33a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f888 	bl	800a454 <mbedtls_platform_zeroize>
 800a344:	e000      	b.n	800a348 <mbedtls_gcm_free+0x24>
        return;
 800a346:	bf00      	nop
}
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <mbedtls_cipher_info_get_block_size>:
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d101      	bne.n	800a360 <mbedtls_cipher_info_get_block_size+0x12>
        return 0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	e004      	b.n	800a36a <mbedtls_cipher_info_get_block_size+0x1c>
    return (size_t) (info->MBEDTLS_PRIVATE(block_size));
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	791b      	ldrb	r3, [r3, #4]
 800a364:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800a368:	b2db      	uxtb	r3, r3
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <mbedtls_nist_kw_init>:

/*
 * Initialize context
 */
void mbedtls_nist_kw_init(mbedtls_nist_kw_context *ctx)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b082      	sub	sp, #8
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_nist_kw_context));
 800a37e:	2244      	movs	r2, #68	; 0x44
 800a380:	2100      	movs	r1, #0
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f002 fc64 	bl	800cc50 <memset>
}
 800a388:	bf00      	nop
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <mbedtls_nist_kw_setkey>:
int mbedtls_nist_kw_setkey(mbedtls_nist_kw_context *ctx,
                           mbedtls_cipher_id_t cipher,
                           const unsigned char *key,
                           unsigned int keybits,
                           const int is_wrap)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	607a      	str	r2, [r7, #4]
 800a39a:	603b      	str	r3, [r7, #0]
 800a39c:	460b      	mov	r3, r1
 800a39e:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800a3a0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800a3a4:	617b      	str	r3, [r7, #20]
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values(cipher,
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	7afb      	ldrb	r3, [r7, #11]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fc f8af 	bl	8006510 <mbedtls_cipher_info_from_values>
 800a3b2:	6138      	str	r0, [r7, #16]
                                                  keybits,
                                                  MBEDTLS_MODE_ECB);
    if (cipher_info == NULL) {
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <mbedtls_nist_kw_setkey+0x2e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800a3ba:	4b1a      	ldr	r3, [pc, #104]	; (800a424 <mbedtls_nist_kw_setkey+0x94>)
 800a3bc:	e02e      	b.n	800a41c <mbedtls_nist_kw_setkey+0x8c>
    }

    if (mbedtls_cipher_info_get_block_size(cipher_info) != 16) {
 800a3be:	6938      	ldr	r0, [r7, #16]
 800a3c0:	f7ff ffc5 	bl	800a34e <mbedtls_cipher_info_get_block_size>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b10      	cmp	r3, #16
 800a3c8:	d001      	beq.n	800a3ce <mbedtls_nist_kw_setkey+0x3e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800a3ca:	4b16      	ldr	r3, [pc, #88]	; (800a424 <mbedtls_nist_kw_setkey+0x94>)
 800a3cc:	e026      	b.n	800a41c <mbedtls_nist_kw_setkey+0x8c>
     *  lengths of 128, 192, or 256 bits, is the only block cipher that fits
     *  this profile."
     *  Currently we don't support other 128 bit block ciphers for key wrapping,
     *  such as Camellia and Aria.
     */
    if (cipher != MBEDTLS_CIPHER_ID_AES) {
 800a3ce:	7afb      	ldrb	r3, [r7, #11]
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d001      	beq.n	800a3d8 <mbedtls_nist_kw_setkey+0x48>
        return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
 800a3d4:	4b14      	ldr	r3, [pc, #80]	; (800a428 <mbedtls_nist_kw_setkey+0x98>)
 800a3d6:	e021      	b.n	800a41c <mbedtls_nist_kw_setkey+0x8c>
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fc f8df 	bl	800659e <mbedtls_cipher_free>

    if ((ret = mbedtls_cipher_setup(&ctx->cipher_ctx, cipher_info)) != 0) {
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6939      	ldr	r1, [r7, #16]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fc f903 	bl	80065f0 <mbedtls_cipher_setup>
 800a3ea:	6178      	str	r0, [r7, #20]
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <mbedtls_nist_kw_setkey+0x66>
        return ret;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	e012      	b.n	800a41c <mbedtls_nist_kw_setkey+0x8c>
    }

    if ((ret = mbedtls_cipher_setkey(&ctx->cipher_ctx, key, keybits,
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	bf14      	ite	ne
 800a400:	2301      	movne	r3, #1
 800a402:	2300      	moveq	r3, #0
 800a404:	b2db      	uxtb	r3, r3
 800a406:	b25b      	sxtb	r3, r3
 800a408:	6879      	ldr	r1, [r7, #4]
 800a40a:	f7fc f923 	bl	8006654 <mbedtls_cipher_setkey>
 800a40e:	6178      	str	r0, [r7, #20]
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <mbedtls_nist_kw_setkey+0x8a>
                                     is_wrap ? MBEDTLS_ENCRYPT :
                                     MBEDTLS_DECRYPT)
         ) != 0) {
        return ret;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	e000      	b.n	800a41c <mbedtls_nist_kw_setkey+0x8c>
    }

    return 0;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	ffff9f00 	.word	0xffff9f00
 800a428:	ffff9f80 	.word	0xffff9f80

0800a42c <mbedtls_nist_kw_free>:

/*
 * Free context
 */
void mbedtls_nist_kw_free(mbedtls_nist_kw_context *ctx)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d008      	beq.n	800a44c <mbedtls_nist_kw_free+0x20>
        return;
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fc f8ae 	bl	800659e <mbedtls_cipher_free>
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_nist_kw_context));
 800a442:	2144      	movs	r1, #68	; 0x44
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f805 	bl	800a454 <mbedtls_platform_zeroize>
 800a44a:	e000      	b.n	800a44e <mbedtls_nist_kw_free+0x22>
        return;
 800a44c:	bf00      	nop
}
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <mbedtls_platform_zeroize>:
    && !defined(_WIN32)
static void *(*const volatile memset_func)(void *, int, size_t) = memset;
#endif

void mbedtls_platform_zeroize(void *buf, size_t len)
{
 800a454:	b5b0      	push	{r4, r5, r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
    if (len > 0) {
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d015      	beq.n	800a490 <mbedtls_platform_zeroize+0x3c>
#elif defined(__STDC_LIB_EXT1__) && !defined(__IAR_SYSTEMS_ICC__)
        memset_s(buf, len, 0, len);
#elif defined(_WIN32)
        SecureZeroMemory(buf, len);
#else
        memset_func(buf, 0, len);
 800a464:	4b0c      	ldr	r3, [pc, #48]	; (800a498 <mbedtls_platform_zeroize+0x44>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	2100      	movs	r1, #0
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	4798      	blx	r3
#pragma clang diagnostic ignored "-Wvla"
#elif defined(MBEDTLS_COMPILER_IS_GCC)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
#endif
        asm volatile ("" : : "m" (*(char (*)[len]) buf) :);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	461a      	mov	r2, r3
 800a474:	3a01      	subs	r2, #1
 800a476:	60fa      	str	r2, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	461c      	mov	r4, r3
 800a47c:	4615      	mov	r5, r2
 800a47e:	f04f 0200 	mov.w	r2, #0
 800a482:	f04f 0300 	mov.w	r3, #0
 800a486:	00eb      	lsls	r3, r5, #3
 800a488:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a48c:	00e2      	lsls	r2, r4, #3
 800a48e:	687b      	ldr	r3, [r7, #4]
#pragma GCC diagnostic pop
#endif
#endif
#endif
    }
}
 800a490:	bf00      	nop
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bdb0      	pop	{r4, r5, r7, pc}
 800a498:	20000044 	.word	0x20000044

0800a49c <mbedtls_zeroize_and_free>:
#endif /* MBEDTLS_PLATFORM_ZEROIZE_ALT */

void mbedtls_zeroize_and_free(void *buf, size_t len)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
    if (buf != NULL) {
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d003      	beq.n	800a4b4 <mbedtls_zeroize_and_free+0x18>
        mbedtls_platform_zeroize(buf, len);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f7ff ffd0 	bl	800a454 <mbedtls_platform_zeroize>
    }

    mbedtls_free(buf);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f002 f873 	bl	800c5a0 <free>
}
 800a4ba:	bf00      	nop
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <mul64>:

    return lo + (me << 16) + ((uint64_t) hi << 32);
}
#else
static inline uint64_t mul64(uint32_t a, uint32_t b)
{
 800a4c2:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
    return (uint64_t) a * b;
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	4688      	mov	r8, r1
 800a4d4:	4681      	mov	r9, r0
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	2000      	movs	r0, #0
 800a4da:	460c      	mov	r4, r1
 800a4dc:	4605      	mov	r5, r0
 800a4de:	fb04 f009 	mul.w	r0, r4, r9
 800a4e2:	fb08 f105 	mul.w	r1, r8, r5
 800a4e6:	4401      	add	r1, r0
 800a4e8:	fba8 2304 	umull	r2, r3, r8, r4
 800a4ec:	4419      	add	r1, r3
 800a4ee:	460b      	mov	r3, r1
}
 800a4f0:	4610      	mov	r0, r2
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800a4fc:	4770      	bx	lr

0800a4fe <poly1305_process>:
 */
static void poly1305_process(mbedtls_poly1305_context *ctx,
                             size_t nblocks,
                             const unsigned char *input,
                             uint32_t needs_padding)
{
 800a4fe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a502:	b0fc      	sub	sp, #496	; 0x1f0
 800a504:	af00      	add	r7, sp, #0
 800a506:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 800a50a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 800a50e:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800a512:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    uint64_t d0, d1, d2, d3;
    uint32_t acc0, acc1, acc2, acc3, acc4;
    uint32_t r0, r1, r2, r3;
    uint32_t rs1, rs2, rs3;
    size_t offset  = 0U;
 800a516:	2300      	movs	r3, #0
 800a518:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    size_t i;

    r0 = ctx->r[0];
 800a51c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    r1 = ctx->r[1];
 800a526:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    r2 = ctx->r[2];
 800a530:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    r3 = ctx->r[3];
 800a53a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

    rs1 = r1 + (r1 >> 2U);
 800a544:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800a548:	089a      	lsrs	r2, r3, #2
 800a54a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800a54e:	4413      	add	r3, r2
 800a550:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    rs2 = r2 + (r2 >> 2U);
 800a554:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a558:	089a      	lsrs	r2, r3, #2
 800a55a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a55e:	4413      	add	r3, r2
 800a560:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    rs3 = r3 + (r3 >> 2U);
 800a564:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800a568:	089a      	lsrs	r2, r3, #2
 800a56a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800a56e:	4413      	add	r3, r2
 800a570:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    acc0 = ctx->acc[0];
 800a574:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    acc1 = ctx->acc[1];
 800a57e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a584:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    acc2 = ctx->acc[2];
 800a588:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    acc3 = ctx->acc[3];
 800a592:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a598:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    acc4 = ctx->acc[4];
 800a59c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800a5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

    /* Process full blocks */
    for (i = 0U; i < nblocks; i++) {
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800a5ac:	e35f      	b.n	800ac6e <poly1305_process+0x770>
        /* The input block is treated as a 128-bit little-endian integer */
        d0   = MBEDTLS_GET_UINT32_LE(input, offset + 0);
 800a5ae:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800a5b2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800a5bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a5c0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a5c2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    return r;
 800a5c6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a5d0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a5d4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800a5d8:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        d1   = MBEDTLS_GET_UINT32_LE(input, offset + 4);
 800a5dc:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800a5e0:	1d1a      	adds	r2, r3, #4
 800a5e2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a5ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a5f0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a5f2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    return r;
 800a5f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a600:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a604:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800a608:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
        d2   = MBEDTLS_GET_UINT32_LE(input, offset + 8);
 800a60c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800a610:	f103 0208 	add.w	r2, r3, #8
 800a614:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800a618:	4413      	add	r3, r2
 800a61a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800a61e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a622:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a624:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    return r;
 800a628:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800a62c:	2200      	movs	r2, #0
 800a62e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a632:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a636:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800a63a:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
        d3   = MBEDTLS_GET_UINT32_LE(input, offset + 12);
 800a63e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800a642:	f103 020c 	add.w	r2, r3, #12
 800a646:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800a64a:	4413      	add	r3, r2
 800a64c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800a650:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800a654:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a656:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    return r;
 800a65a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800a65e:	2200      	movs	r2, #0
 800a660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a664:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800a668:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800a66c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198

        /* Compute: acc += (padded) block as a 130-bit integer */
        d0  += (uint64_t) acc0;
 800a670:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a674:	2200      	movs	r2, #0
 800a676:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800a67a:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800a67e:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800a682:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800a686:	4621      	mov	r1, r4
 800a688:	1851      	adds	r1, r2, r1
 800a68a:	67b9      	str	r1, [r7, #120]	; 0x78
 800a68c:	4629      	mov	r1, r5
 800a68e:	414b      	adcs	r3, r1
 800a690:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a692:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800a696:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        d1  += (uint64_t) acc1 + (d0 >> 32U);
 800a69a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800a6a4:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800a6a8:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800a6ac:	f04f 0000 	mov.w	r0, #0
 800a6b0:	f04f 0100 	mov.w	r1, #0
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800a6bc:	4623      	mov	r3, r4
 800a6be:	181b      	adds	r3, r3, r0
 800a6c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800a6c4:	462b      	mov	r3, r5
 800a6c6:	414b      	adcs	r3, r1
 800a6c8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800a6cc:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800a6d0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800a6d4:	4621      	mov	r1, r4
 800a6d6:	1851      	adds	r1, r2, r1
 800a6d8:	6739      	str	r1, [r7, #112]	; 0x70
 800a6da:	4629      	mov	r1, r5
 800a6dc:	414b      	adcs	r3, r1
 800a6de:	677b      	str	r3, [r7, #116]	; 0x74
 800a6e0:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800a6e4:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
        d2  += (uint64_t) acc2 + (d1 >> 32U);
 800a6e8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800a6f2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800a6f6:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800a6fa:	f04f 0000 	mov.w	r0, #0
 800a6fe:	f04f 0100 	mov.w	r1, #0
 800a702:	0018      	movs	r0, r3
 800a704:	2100      	movs	r1, #0
 800a706:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 800a70a:	4623      	mov	r3, r4
 800a70c:	181b      	adds	r3, r3, r0
 800a70e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800a712:	462b      	mov	r3, r5
 800a714:	414b      	adcs	r3, r1
 800a716:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800a71a:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800a71e:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 800a722:	4621      	mov	r1, r4
 800a724:	1851      	adds	r1, r2, r1
 800a726:	66b9      	str	r1, [r7, #104]	; 0x68
 800a728:	4629      	mov	r1, r5
 800a72a:	414b      	adcs	r3, r1
 800a72c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a72e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800a732:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
        d3  += (uint64_t) acc3 + (d2 >> 32U);
 800a736:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800a740:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800a744:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800a748:	f04f 0000 	mov.w	r0, #0
 800a74c:	f04f 0100 	mov.w	r1, #0
 800a750:	0018      	movs	r0, r3
 800a752:	2100      	movs	r1, #0
 800a754:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 800a758:	4623      	mov	r3, r4
 800a75a:	181b      	adds	r3, r3, r0
 800a75c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800a760:	462b      	mov	r3, r5
 800a762:	414b      	adcs	r3, r1
 800a764:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800a768:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800a76c:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800a770:	4621      	mov	r1, r4
 800a772:	1851      	adds	r1, r2, r1
 800a774:	6639      	str	r1, [r7, #96]	; 0x60
 800a776:	4629      	mov	r1, r5
 800a778:	414b      	adcs	r3, r1
 800a77a:	667b      	str	r3, [r7, #100]	; 0x64
 800a77c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800a780:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
        acc0 = (uint32_t) d0;
 800a784:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a788:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        acc1 = (uint32_t) d1;
 800a78c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a790:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
        acc2 = (uint32_t) d2;
 800a794:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800a798:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        acc3 = (uint32_t) d3;
 800a79c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800a7a0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        acc4 += (uint32_t) (d3 >> 32U) + needs_padding;
 800a7a4:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800a7a8:	f04f 0000 	mov.w	r0, #0
 800a7ac:	f04f 0100 	mov.w	r1, #0
 800a7b0:	0018      	movs	r0, r3
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800a7ba:	441a      	add	r2, r3
 800a7bc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        /* Compute: acc *= r */
        d0 = mul64(acc0, r0) +
 800a7c6:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800a7ca:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800a7ce:	f7ff fe78 	bl	800a4c2 <mul64>
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	460d      	mov	r5, r1
             mul64(acc1, rs3) +
 800a7d6:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800a7da:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800a7de:	f7ff fe70 	bl	800a4c2 <mul64>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
        d0 = mul64(acc0, r0) +
 800a7e6:	18a1      	adds	r1, r4, r2
 800a7e8:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800a7ec:	eb45 0303 	adc.w	r3, r5, r3
 800a7f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
             mul64(acc2, rs2) +
 800a7f4:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800a7f8:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800a7fc:	f7ff fe61 	bl	800a4c2 <mul64>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
             mul64(acc1, rs3) +
 800a804:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800a808:	4621      	mov	r1, r4
 800a80a:	1889      	adds	r1, r1, r2
 800a80c:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800a810:	4629      	mov	r1, r5
 800a812:	eb41 0303 	adc.w	r3, r1, r3
 800a816:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
             mul64(acc3, rs1);
 800a81a:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800a81e:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800a822:	f7ff fe4e 	bl	800a4c2 <mul64>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
        d0 = mul64(acc0, r0) +
 800a82a:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800a82e:	4621      	mov	r1, r4
 800a830:	1889      	adds	r1, r1, r2
 800a832:	65b9      	str	r1, [r7, #88]	; 0x58
 800a834:	4629      	mov	r1, r5
 800a836:	eb41 0303 	adc.w	r3, r1, r3
 800a83a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a83c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800a840:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        d1 = mul64(acc0, r1) +
 800a844:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800a848:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800a84c:	f7ff fe39 	bl	800a4c2 <mul64>
 800a850:	4604      	mov	r4, r0
 800a852:	460d      	mov	r5, r1
             mul64(acc1, r0) +
 800a854:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800a858:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800a85c:	f7ff fe31 	bl	800a4c2 <mul64>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
        d1 = mul64(acc0, r1) +
 800a864:	18a1      	adds	r1, r4, r2
 800a866:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800a86a:	eb45 0303 	adc.w	r3, r5, r3
 800a86e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
             mul64(acc2, rs3) +
 800a872:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800a876:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800a87a:	f7ff fe22 	bl	800a4c2 <mul64>
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
             mul64(acc1, r0) +
 800a882:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800a886:	4621      	mov	r1, r4
 800a888:	1889      	adds	r1, r1, r2
 800a88a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800a88e:	4629      	mov	r1, r5
 800a890:	eb41 0303 	adc.w	r3, r1, r3
 800a894:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
             mul64(acc3, rs2) +
 800a898:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800a89c:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800a8a0:	f7ff fe0f 	bl	800a4c2 <mul64>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
             mul64(acc2, rs3) +
 800a8a8:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	1889      	adds	r1, r1, r2
 800a8b0:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	eb41 0303 	adc.w	r3, r1, r3
 800a8ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
             mul64(acc4, rs1);
 800a8be:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800a8c2:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 800a8c6:	f7ff fdfc 	bl	800a4c2 <mul64>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
        d1 = mul64(acc0, r1) +
 800a8ce:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800a8d2:	4621      	mov	r1, r4
 800a8d4:	1889      	adds	r1, r1, r2
 800a8d6:	6539      	str	r1, [r7, #80]	; 0x50
 800a8d8:	4629      	mov	r1, r5
 800a8da:	eb41 0303 	adc.w	r3, r1, r3
 800a8de:	657b      	str	r3, [r7, #84]	; 0x54
 800a8e0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800a8e4:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
        d2 = mul64(acc0, r2) +
 800a8e8:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800a8ec:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800a8f0:	f7ff fde7 	bl	800a4c2 <mul64>
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	460d      	mov	r5, r1
             mul64(acc1, r1) +
 800a8f8:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800a8fc:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800a900:	f7ff fddf 	bl	800a4c2 <mul64>
 800a904:	4602      	mov	r2, r0
 800a906:	460b      	mov	r3, r1
        d2 = mul64(acc0, r2) +
 800a908:	18a1      	adds	r1, r4, r2
 800a90a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800a90e:	eb45 0303 	adc.w	r3, r5, r3
 800a912:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
             mul64(acc2, r0) +
 800a916:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800a91a:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800a91e:	f7ff fdd0 	bl	800a4c2 <mul64>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
             mul64(acc1, r1) +
 800a926:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800a92a:	4621      	mov	r1, r4
 800a92c:	1889      	adds	r1, r1, r2
 800a92e:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800a932:	4629      	mov	r1, r5
 800a934:	eb41 0303 	adc.w	r3, r1, r3
 800a938:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
             mul64(acc3, rs3) +
 800a93c:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800a940:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800a944:	f7ff fdbd 	bl	800a4c2 <mul64>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
             mul64(acc2, r0) +
 800a94c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800a950:	4621      	mov	r1, r4
 800a952:	1889      	adds	r1, r1, r2
 800a954:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800a958:	4629      	mov	r1, r5
 800a95a:	eb41 0303 	adc.w	r3, r1, r3
 800a95e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
             mul64(acc4, rs2);
 800a962:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800a966:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 800a96a:	f7ff fdaa 	bl	800a4c2 <mul64>
 800a96e:	4602      	mov	r2, r0
 800a970:	460b      	mov	r3, r1
        d2 = mul64(acc0, r2) +
 800a972:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800a976:	4621      	mov	r1, r4
 800a978:	1889      	adds	r1, r1, r2
 800a97a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a97c:	4629      	mov	r1, r5
 800a97e:	eb41 0303 	adc.w	r3, r1, r3
 800a982:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a984:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800a988:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
        d3 = mul64(acc0, r3) +
 800a98c:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800a990:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800a994:	f7ff fd95 	bl	800a4c2 <mul64>
 800a998:	4604      	mov	r4, r0
 800a99a:	460d      	mov	r5, r1
             mul64(acc1, r2) +
 800a99c:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800a9a0:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800a9a4:	f7ff fd8d 	bl	800a4c2 <mul64>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
        d3 = mul64(acc0, r3) +
 800a9ac:	18a1      	adds	r1, r4, r2
 800a9ae:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800a9b2:	eb45 0303 	adc.w	r3, r5, r3
 800a9b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
             mul64(acc2, r1) +
 800a9ba:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800a9be:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800a9c2:	f7ff fd7e 	bl	800a4c2 <mul64>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	460b      	mov	r3, r1
             mul64(acc1, r2) +
 800a9ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	1889      	adds	r1, r1, r2
 800a9d2:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	eb41 0303 	adc.w	r3, r1, r3
 800a9dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
             mul64(acc3, r0) +
 800a9e0:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800a9e4:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800a9e8:	f7ff fd6b 	bl	800a4c2 <mul64>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
             mul64(acc2, r1) +
 800a9f0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	eb11 0a02 	adds.w	sl, r1, r2
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	eb41 0b03 	adc.w	fp, r1, r3
             mul64(acc4, rs3);
 800aa00:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800aa04:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 800aa08:	f7ff fd5b 	bl	800a4c2 <mul64>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
        d3 = mul64(acc0, r3) +
 800aa10:	eb1a 0102 	adds.w	r1, sl, r2
 800aa14:	6439      	str	r1, [r7, #64]	; 0x40
 800aa16:	eb4b 0303 	adc.w	r3, fp, r3
 800aa1a:	647b      	str	r3, [r7, #68]	; 0x44
 800aa1c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800aa20:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
        acc4 *= r0;
 800aa24:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800aa28:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800aa2c:	fb02 f303 	mul.w	r3, r2, r3
 800aa30:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        /* Compute: acc %= (2^130 - 5) (partial remainder) */
        d1 += (d0 >> 32);
 800aa34:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800aa38:	f04f 0000 	mov.w	r0, #0
 800aa3c:	f04f 0100 	mov.w	r1, #0
 800aa40:	0018      	movs	r0, r3
 800aa42:	2100      	movs	r1, #0
 800aa44:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800aa48:	1814      	adds	r4, r2, r0
 800aa4a:	63bc      	str	r4, [r7, #56]	; 0x38
 800aa4c:	414b      	adcs	r3, r1
 800aa4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa50:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800aa54:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
        d2 += (d1 >> 32);
 800aa58:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800aa5c:	f04f 0000 	mov.w	r0, #0
 800aa60:	f04f 0100 	mov.w	r1, #0
 800aa64:	0018      	movs	r0, r3
 800aa66:	2100      	movs	r1, #0
 800aa68:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800aa6c:	1814      	adds	r4, r2, r0
 800aa6e:	633c      	str	r4, [r7, #48]	; 0x30
 800aa70:	414b      	adcs	r3, r1
 800aa72:	637b      	str	r3, [r7, #52]	; 0x34
 800aa74:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800aa78:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
        d3 += (d2 >> 32);
 800aa7c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800aa80:	f04f 0000 	mov.w	r0, #0
 800aa84:	f04f 0100 	mov.w	r1, #0
 800aa88:	0018      	movs	r0, r3
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800aa90:	1814      	adds	r4, r2, r0
 800aa92:	62bc      	str	r4, [r7, #40]	; 0x28
 800aa94:	414b      	adcs	r3, r1
 800aa96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa98:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800aa9c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
        acc0 = (uint32_t) d0;
 800aaa0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800aaa4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        acc1 = (uint32_t) d1;
 800aaa8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800aaac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
        acc2 = (uint32_t) d2;
 800aab0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800aab4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        acc3 = (uint32_t) d3;
 800aab8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800aabc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        acc4 = (uint32_t) (d3 >> 32) + acc4;
 800aac0:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800aac4:	f04f 0000 	mov.w	r0, #0
 800aac8:	f04f 0100 	mov.w	r1, #0
 800aacc:	0018      	movs	r0, r3
 800aace:	2100      	movs	r1, #0
 800aad0:	4602      	mov	r2, r0
 800aad2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800aad6:	4413      	add	r3, r2
 800aad8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        d0 = (uint64_t) acc0 + (acc4 >> 2) + (acc4 & 0xFFFFFFFCU);
 800aadc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800aae0:	2200      	movs	r2, #0
 800aae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aae6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aaea:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800aaee:	089b      	lsrs	r3, r3, #2
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aaf6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aafa:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800aafe:	4623      	mov	r3, r4
 800ab00:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800ab04:	4602      	mov	r2, r0
 800ab06:	eb13 0802 	adds.w	r8, r3, r2
 800ab0a:	462b      	mov	r3, r5
 800ab0c:	460a      	mov	r2, r1
 800ab0e:	eb43 0902 	adc.w	r9, r3, r2
 800ab12:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab1c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800ab20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab24:	f023 0303 	bic.w	r3, r3, #3
 800ab28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ab36:	460b      	mov	r3, r1
 800ab38:	eb18 0303 	adds.w	r3, r8, r3
 800ab3c:	623b      	str	r3, [r7, #32]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	eb49 0303 	adc.w	r3, r9, r3
 800ab44:	627b      	str	r3, [r7, #36]	; 0x24
 800ab46:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ab4a:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc4 &= 3U;
 800ab4e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800ab52:	f003 0303 	and.w	r3, r3, #3
 800ab56:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
        acc0 = (uint32_t) d0;
 800ab5a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ab5e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        d0 = (uint64_t) acc1 + (d0 >> 32U);
 800ab62:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800ab66:	2200      	movs	r2, #0
 800ab68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ab70:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800ab74:	f04f 0000 	mov.w	r0, #0
 800ab78:	f04f 0100 	mov.w	r1, #0
 800ab7c:	0018      	movs	r0, r3
 800ab7e:	2100      	movs	r1, #0
 800ab80:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800ab84:	4623      	mov	r3, r4
 800ab86:	181b      	adds	r3, r3, r0
 800ab88:	61bb      	str	r3, [r7, #24]
 800ab8a:	462b      	mov	r3, r5
 800ab8c:	414b      	adcs	r3, r1
 800ab8e:	61fb      	str	r3, [r7, #28]
 800ab90:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800ab94:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc1 = (uint32_t) d0;
 800ab98:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ab9c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
        d0 = (uint64_t) acc2 + (d0 >> 32U);
 800aba0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800aba4:	2200      	movs	r2, #0
 800aba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800abaa:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800abae:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800abb2:	f04f 0000 	mov.w	r0, #0
 800abb6:	f04f 0100 	mov.w	r1, #0
 800abba:	0018      	movs	r0, r3
 800abbc:	2100      	movs	r1, #0
 800abbe:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800abc2:	4623      	mov	r3, r4
 800abc4:	181b      	adds	r3, r3, r0
 800abc6:	613b      	str	r3, [r7, #16]
 800abc8:	462b      	mov	r3, r5
 800abca:	414b      	adcs	r3, r1
 800abcc:	617b      	str	r3, [r7, #20]
 800abce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800abd2:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc2 = (uint32_t) d0;
 800abd6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800abda:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        d0 = (uint64_t) acc3 + (d0 >> 32U);
 800abde:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800abe2:	2200      	movs	r2, #0
 800abe4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800abe8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800abec:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800abf0:	f04f 0000 	mov.w	r0, #0
 800abf4:	f04f 0100 	mov.w	r1, #0
 800abf8:	0018      	movs	r0, r3
 800abfa:	2100      	movs	r1, #0
 800abfc:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800ac00:	4623      	mov	r3, r4
 800ac02:	181b      	adds	r3, r3, r0
 800ac04:	60bb      	str	r3, [r7, #8]
 800ac06:	462b      	mov	r3, r5
 800ac08:	414b      	adcs	r3, r1
 800ac0a:	60fb      	str	r3, [r7, #12]
 800ac0c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ac10:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc3 = (uint32_t) d0;
 800ac14:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ac18:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        d0 = (uint64_t) acc4 + (d0 >> 32U);
 800ac1c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800ac20:	2200      	movs	r2, #0
 800ac22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ac26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac2a:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800ac2e:	f04f 0000 	mov.w	r0, #0
 800ac32:	f04f 0100 	mov.w	r1, #0
 800ac36:	0018      	movs	r0, r3
 800ac38:	2100      	movs	r1, #0
 800ac3a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800ac3e:	4623      	mov	r3, r4
 800ac40:	181b      	adds	r3, r3, r0
 800ac42:	603b      	str	r3, [r7, #0]
 800ac44:	462b      	mov	r3, r5
 800ac46:	414b      	adcs	r3, r1
 800ac48:	607b      	str	r3, [r7, #4]
 800ac4a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ac4e:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc4 = (uint32_t) d0;
 800ac52:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ac56:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        offset    += POLY1305_BLOCK_SIZE_BYTES;
 800ac5a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800ac5e:	3310      	adds	r3, #16
 800ac60:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    for (i = 0U; i < nblocks; i++) {
 800ac64:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800ac68:	3301      	adds	r3, #1
 800ac6a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800ac6e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800ac72:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800ac76:	429a      	cmp	r2, r3
 800ac78:	f4ff ac99 	bcc.w	800a5ae <poly1305_process+0xb0>
    }

    ctx->acc[0] = acc0;
 800ac7c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ac80:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800ac84:	621a      	str	r2, [r3, #32]
    ctx->acc[1] = acc1;
 800ac86:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ac8a:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 800ac8e:	625a      	str	r2, [r3, #36]	; 0x24
    ctx->acc[2] = acc2;
 800ac90:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ac94:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 800ac98:	629a      	str	r2, [r3, #40]	; 0x28
    ctx->acc[3] = acc3;
 800ac9a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ac9e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800aca2:	62da      	str	r2, [r3, #44]	; 0x2c
    ctx->acc[4] = acc4;
 800aca4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800aca8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800acac:	631a      	str	r2, [r3, #48]	; 0x30
}
 800acae:	bf00      	nop
 800acb0:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800acb4:	46bd      	mov	sp, r7
 800acb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800acba <mbedtls_poly1305_init>:
    MBEDTLS_PUT_UINT32_LE(acc2, mac,  8);
    MBEDTLS_PUT_UINT32_LE(acc3, mac, 12);
}

void mbedtls_poly1305_init(mbedtls_poly1305_context *ctx)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b082      	sub	sp, #8
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_poly1305_context));
 800acc2:	2148      	movs	r1, #72	; 0x48
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f7ff fbc5 	bl	800a454 <mbedtls_platform_zeroize>
}
 800acca:	bf00      	nop
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <mbedtls_poly1305_free>:

void mbedtls_poly1305_free(mbedtls_poly1305_context *ctx)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b082      	sub	sp, #8
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d004      	beq.n	800acea <mbedtls_poly1305_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_poly1305_context));
 800ace0:	2148      	movs	r1, #72	; 0x48
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7ff fbb6 	bl	800a454 <mbedtls_platform_zeroize>
 800ace8:	e000      	b.n	800acec <mbedtls_poly1305_free+0x1a>
        return;
 800acea:	bf00      	nop
}
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <mbedtls_poly1305_update>:
}

int mbedtls_poly1305_update(mbedtls_poly1305_context *ctx,
                            const unsigned char *input,
                            size_t ilen)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b088      	sub	sp, #32
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	60f8      	str	r0, [r7, #12]
 800acfa:	60b9      	str	r1, [r7, #8]
 800acfc:	607a      	str	r2, [r7, #4]
    size_t offset    = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	61fb      	str	r3, [r7, #28]
    size_t remaining = ilen;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	61bb      	str	r3, [r7, #24]
    size_t queue_free_len;
    size_t nblocks;

    if ((remaining > 0U) && (ctx->queue_len > 0U)) {
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d03e      	beq.n	800ad8a <mbedtls_poly1305_update+0x98>
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d03a      	beq.n	800ad8a <mbedtls_poly1305_update+0x98>
        queue_free_len = (POLY1305_BLOCK_SIZE_BYTES - ctx->queue_len);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad18:	f1c3 0310 	rsb	r3, r3, #16
 800ad1c:	617b      	str	r3, [r7, #20]

        if (ilen < queue_free_len) {
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d213      	bcs.n	800ad4e <mbedtls_poly1305_update+0x5c>
            /* Not enough data to complete the block.
             * Store this data with the other leftovers.
             */
            memcpy(&ctx->queue[ctx->queue_len],
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2a:	3330      	adds	r3, #48	; 0x30
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	4413      	add	r3, r2
 800ad30:	3304      	adds	r3, #4
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	68b9      	ldr	r1, [r7, #8]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f002 f815 	bl	800cd66 <memcpy>
                   input,
                   ilen);

            ctx->queue_len += ilen;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	441a      	add	r2, r3
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	645a      	str	r2, [r3, #68]	; 0x44

            remaining = 0U;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	61bb      	str	r3, [r7, #24]
 800ad4c:	e01d      	b.n	800ad8a <mbedtls_poly1305_update+0x98>
        } else {
            /* Enough data to produce a complete block */
            memcpy(&ctx->queue[ctx->queue_len],
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad52:	3330      	adds	r3, #48	; 0x30
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	4413      	add	r3, r2
 800ad58:	3304      	adds	r3, #4
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	68b9      	ldr	r1, [r7, #8]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f002 f801 	bl	800cd66 <memcpy>
                   input,
                   queue_free_len);

            ctx->queue_len = 0U;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	645a      	str	r2, [r3, #68]	; 0x44

            poly1305_process(ctx, 1U, ctx->queue, 1U);   /* add padding bit */
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ad70:	2301      	movs	r3, #1
 800ad72:	2101      	movs	r1, #1
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f7ff fbc2 	bl	800a4fe <poly1305_process>

            offset    += queue_free_len;
 800ad7a:	69fa      	ldr	r2, [r7, #28]
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	4413      	add	r3, r2
 800ad80:	61fb      	str	r3, [r7, #28]
            remaining -= queue_free_len;
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	1ad3      	subs	r3, r2, r3
 800ad88:	61bb      	str	r3, [r7, #24]
        }
    }

    if (remaining >= POLY1305_BLOCK_SIZE_BYTES) {
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	2b0f      	cmp	r3, #15
 800ad8e:	d913      	bls.n	800adb8 <mbedtls_poly1305_update+0xc6>
        nblocks = remaining / POLY1305_BLOCK_SIZE_BYTES;
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	091b      	lsrs	r3, r3, #4
 800ad94:	613b      	str	r3, [r7, #16]

        poly1305_process(ctx, nblocks, &input[offset], 1U);
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	441a      	add	r2, r3
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	6939      	ldr	r1, [r7, #16]
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f7ff fbac 	bl	800a4fe <poly1305_process>

        offset += nblocks * POLY1305_BLOCK_SIZE_BYTES;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	011b      	lsls	r3, r3, #4
 800adaa:	69fa      	ldr	r2, [r7, #28]
 800adac:	4413      	add	r3, r2
 800adae:	61fb      	str	r3, [r7, #28]
        remaining %= POLY1305_BLOCK_SIZE_BYTES;
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	f003 030f 	and.w	r3, r3, #15
 800adb6:	61bb      	str	r3, [r7, #24]
    }

    if (remaining > 0U) {
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00c      	beq.n	800add8 <mbedtls_poly1305_update+0xe6>
        /* Store partial block */
        ctx->queue_len = remaining;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	69ba      	ldr	r2, [r7, #24]
 800adc2:	645a      	str	r2, [r3, #68]	; 0x44
        memcpy(ctx->queue, &input[offset], remaining);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	4413      	add	r3, r2
 800add0:	69ba      	ldr	r2, [r7, #24]
 800add2:	4619      	mov	r1, r3
 800add4:	f001 ffc7 	bl	800cd66 <memcpy>
    }

    return 0;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3720      	adds	r7, #32
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
	...

0800ade4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800ade4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ae1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800ade8:	f7f5 feee 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800adec:	480c      	ldr	r0, [pc, #48]	; (800ae20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800adee:	490d      	ldr	r1, [pc, #52]	; (800ae24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800adf0:	4a0d      	ldr	r2, [pc, #52]	; (800ae28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800adf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800adf4:	e002      	b.n	800adfc <LoopCopyDataInit>

0800adf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800adf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800adf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800adfa:	3304      	adds	r3, #4

0800adfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800adfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800adfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ae00:	d3f9      	bcc.n	800adf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ae02:	4a0a      	ldr	r2, [pc, #40]	; (800ae2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ae04:	4c0a      	ldr	r4, [pc, #40]	; (800ae30 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ae06:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ae08:	e001      	b.n	800ae0e <LoopFillZerobss>

0800ae0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ae0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ae0c:	3204      	adds	r2, #4

0800ae0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ae0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ae10:	d3fb      	bcc.n	800ae0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ae12:	f001 ff81 	bl	800cd18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ae16:	f7f5 fbe7 	bl	80005e8 <main>
  bx  lr    
 800ae1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800ae1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ae20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ae24:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800ae28:	0800f2c4 	.word	0x0800f2c4
  ldr r2, =_sbss
 800ae2c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800ae30:	200024e4 	.word	0x200024e4

0800ae34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ae34:	e7fe      	b.n	800ae34 <ADC_IRQHandler>
	...

0800ae38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ae3c:	4b0e      	ldr	r3, [pc, #56]	; (800ae78 <HAL_Init+0x40>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a0d      	ldr	r2, [pc, #52]	; (800ae78 <HAL_Init+0x40>)
 800ae42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ae48:	4b0b      	ldr	r3, [pc, #44]	; (800ae78 <HAL_Init+0x40>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a0a      	ldr	r2, [pc, #40]	; (800ae78 <HAL_Init+0x40>)
 800ae4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ae54:	4b08      	ldr	r3, [pc, #32]	; (800ae78 <HAL_Init+0x40>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a07      	ldr	r2, [pc, #28]	; (800ae78 <HAL_Init+0x40>)
 800ae5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ae60:	2003      	movs	r0, #3
 800ae62:	f000 f90d 	bl	800b080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ae66:	2000      	movs	r0, #0
 800ae68:	f000 f808 	bl	800ae7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ae6c:	f7f5 fd42 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	40023c00 	.word	0x40023c00

0800ae7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ae84:	4b12      	ldr	r3, [pc, #72]	; (800aed0 <HAL_InitTick+0x54>)
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	4b12      	ldr	r3, [pc, #72]	; (800aed4 <HAL_InitTick+0x58>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae92:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f000 f917 	bl	800b0ce <HAL_SYSTICK_Config>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d001      	beq.n	800aeaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e00e      	b.n	800aec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2b0f      	cmp	r3, #15
 800aeae:	d80a      	bhi.n	800aec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	6879      	ldr	r1, [r7, #4]
 800aeb4:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb8:	f000 f8ed 	bl	800b096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800aebc:	4a06      	ldr	r2, [pc, #24]	; (800aed8 <HAL_InitTick+0x5c>)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	e000      	b.n	800aec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	20000000 	.word	0x20000000
 800aed4:	2000004c 	.word	0x2000004c
 800aed8:	20000048 	.word	0x20000048

0800aedc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aedc:	b480      	push	{r7}
 800aede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800aee0:	4b06      	ldr	r3, [pc, #24]	; (800aefc <HAL_IncTick+0x20>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	461a      	mov	r2, r3
 800aee6:	4b06      	ldr	r3, [pc, #24]	; (800af00 <HAL_IncTick+0x24>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4413      	add	r3, r2
 800aeec:	4a04      	ldr	r2, [pc, #16]	; (800af00 <HAL_IncTick+0x24>)
 800aeee:	6013      	str	r3, [r2, #0]
}
 800aef0:	bf00      	nop
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	2000004c 	.word	0x2000004c
 800af00:	20002394 	.word	0x20002394

0800af04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800af04:	b480      	push	{r7}
 800af06:	af00      	add	r7, sp, #0
  return uwTick;
 800af08:	4b03      	ldr	r3, [pc, #12]	; (800af18 <HAL_GetTick+0x14>)
 800af0a:	681b      	ldr	r3, [r3, #0]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	20002394 	.word	0x20002394

0800af1c <__NVIC_SetPriorityGrouping>:
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f003 0307 	and.w	r3, r3, #7
 800af2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800af2c:	4b0c      	ldr	r3, [pc, #48]	; (800af60 <__NVIC_SetPriorityGrouping+0x44>)
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800af38:	4013      	ands	r3, r2
 800af3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800af44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800af48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800af4e:	4a04      	ldr	r2, [pc, #16]	; (800af60 <__NVIC_SetPriorityGrouping+0x44>)
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	60d3      	str	r3, [r2, #12]
}
 800af54:	bf00      	nop
 800af56:	3714      	adds	r7, #20
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr
 800af60:	e000ed00 	.word	0xe000ed00

0800af64 <__NVIC_GetPriorityGrouping>:
{
 800af64:	b480      	push	{r7}
 800af66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800af68:	4b04      	ldr	r3, [pc, #16]	; (800af7c <__NVIC_GetPriorityGrouping+0x18>)
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	0a1b      	lsrs	r3, r3, #8
 800af6e:	f003 0307 	and.w	r3, r3, #7
}
 800af72:	4618      	mov	r0, r3
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr
 800af7c:	e000ed00 	.word	0xe000ed00

0800af80 <__NVIC_SetPriority>:
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	4603      	mov	r3, r0
 800af88:	6039      	str	r1, [r7, #0]
 800af8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af90:	2b00      	cmp	r3, #0
 800af92:	db0a      	blt.n	800afaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	b2da      	uxtb	r2, r3
 800af98:	490c      	ldr	r1, [pc, #48]	; (800afcc <__NVIC_SetPriority+0x4c>)
 800af9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af9e:	0112      	lsls	r2, r2, #4
 800afa0:	b2d2      	uxtb	r2, r2
 800afa2:	440b      	add	r3, r1
 800afa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800afa8:	e00a      	b.n	800afc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	b2da      	uxtb	r2, r3
 800afae:	4908      	ldr	r1, [pc, #32]	; (800afd0 <__NVIC_SetPriority+0x50>)
 800afb0:	79fb      	ldrb	r3, [r7, #7]
 800afb2:	f003 030f 	and.w	r3, r3, #15
 800afb6:	3b04      	subs	r3, #4
 800afb8:	0112      	lsls	r2, r2, #4
 800afba:	b2d2      	uxtb	r2, r2
 800afbc:	440b      	add	r3, r1
 800afbe:	761a      	strb	r2, [r3, #24]
}
 800afc0:	bf00      	nop
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr
 800afcc:	e000e100 	.word	0xe000e100
 800afd0:	e000ed00 	.word	0xe000ed00

0800afd4 <NVIC_EncodePriority>:
{
 800afd4:	b480      	push	{r7}
 800afd6:	b089      	sub	sp, #36	; 0x24
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f003 0307 	and.w	r3, r3, #7
 800afe6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	f1c3 0307 	rsb	r3, r3, #7
 800afee:	2b04      	cmp	r3, #4
 800aff0:	bf28      	it	cs
 800aff2:	2304      	movcs	r3, #4
 800aff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	3304      	adds	r3, #4
 800affa:	2b06      	cmp	r3, #6
 800affc:	d902      	bls.n	800b004 <NVIC_EncodePriority+0x30>
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	3b03      	subs	r3, #3
 800b002:	e000      	b.n	800b006 <NVIC_EncodePriority+0x32>
 800b004:	2300      	movs	r3, #0
 800b006:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b008:	f04f 32ff 	mov.w	r2, #4294967295
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	fa02 f303 	lsl.w	r3, r2, r3
 800b012:	43da      	mvns	r2, r3
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	401a      	ands	r2, r3
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b01c:	f04f 31ff 	mov.w	r1, #4294967295
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	fa01 f303 	lsl.w	r3, r1, r3
 800b026:	43d9      	mvns	r1, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b02c:	4313      	orrs	r3, r2
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3724      	adds	r7, #36	; 0x24
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
	...

0800b03c <SysTick_Config>:
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	3b01      	subs	r3, #1
 800b048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b04c:	d301      	bcc.n	800b052 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800b04e:	2301      	movs	r3, #1
 800b050:	e00f      	b.n	800b072 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b052:	4a0a      	ldr	r2, [pc, #40]	; (800b07c <SysTick_Config+0x40>)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3b01      	subs	r3, #1
 800b058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b05a:	210f      	movs	r1, #15
 800b05c:	f04f 30ff 	mov.w	r0, #4294967295
 800b060:	f7ff ff8e 	bl	800af80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b064:	4b05      	ldr	r3, [pc, #20]	; (800b07c <SysTick_Config+0x40>)
 800b066:	2200      	movs	r2, #0
 800b068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b06a:	4b04      	ldr	r3, [pc, #16]	; (800b07c <SysTick_Config+0x40>)
 800b06c:	2207      	movs	r2, #7
 800b06e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	e000e010 	.word	0xe000e010

0800b080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff ff47 	bl	800af1c <__NVIC_SetPriorityGrouping>
}
 800b08e:	bf00      	nop
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b096:	b580      	push	{r7, lr}
 800b098:	b086      	sub	sp, #24
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	4603      	mov	r3, r0
 800b09e:	60b9      	str	r1, [r7, #8]
 800b0a0:	607a      	str	r2, [r7, #4]
 800b0a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b0a8:	f7ff ff5c 	bl	800af64 <__NVIC_GetPriorityGrouping>
 800b0ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	68b9      	ldr	r1, [r7, #8]
 800b0b2:	6978      	ldr	r0, [r7, #20]
 800b0b4:	f7ff ff8e 	bl	800afd4 <NVIC_EncodePriority>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0be:	4611      	mov	r1, r2
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7ff ff5d 	bl	800af80 <__NVIC_SetPriority>
}
 800b0c6:	bf00      	nop
 800b0c8:	3718      	adds	r7, #24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b082      	sub	sp, #8
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7ff ffb0 	bl	800b03c <SysTick_Config>
 800b0dc:	4603      	mov	r3, r0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
	...

0800b0e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b089      	sub	sp, #36	; 0x24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0fe:	2300      	movs	r3, #0
 800b100:	61fb      	str	r3, [r7, #28]
 800b102:	e159      	b.n	800b3b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b104:	2201      	movs	r2, #1
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	fa02 f303 	lsl.w	r3, r2, r3
 800b10c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	4013      	ands	r3, r2
 800b116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b118:	693a      	ldr	r2, [r7, #16]
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	f040 8148 	bne.w	800b3b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f003 0303 	and.w	r3, r3, #3
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d005      	beq.n	800b13a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b136:	2b02      	cmp	r3, #2
 800b138:	d130      	bne.n	800b19c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	005b      	lsls	r3, r3, #1
 800b144:	2203      	movs	r2, #3
 800b146:	fa02 f303 	lsl.w	r3, r2, r3
 800b14a:	43db      	mvns	r3, r3
 800b14c:	69ba      	ldr	r2, [r7, #24]
 800b14e:	4013      	ands	r3, r2
 800b150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	68da      	ldr	r2, [r3, #12]
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	005b      	lsls	r3, r3, #1
 800b15a:	fa02 f303 	lsl.w	r3, r2, r3
 800b15e:	69ba      	ldr	r2, [r7, #24]
 800b160:	4313      	orrs	r3, r2
 800b162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b170:	2201      	movs	r2, #1
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	fa02 f303 	lsl.w	r3, r2, r3
 800b178:	43db      	mvns	r3, r3
 800b17a:	69ba      	ldr	r2, [r7, #24]
 800b17c:	4013      	ands	r3, r2
 800b17e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	091b      	lsrs	r3, r3, #4
 800b186:	f003 0201 	and.w	r2, r3, #1
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	fa02 f303 	lsl.w	r3, r2, r3
 800b190:	69ba      	ldr	r2, [r7, #24]
 800b192:	4313      	orrs	r3, r2
 800b194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	69ba      	ldr	r2, [r7, #24]
 800b19a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	f003 0303 	and.w	r3, r3, #3
 800b1a4:	2b03      	cmp	r3, #3
 800b1a6:	d017      	beq.n	800b1d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	2203      	movs	r2, #3
 800b1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b8:	43db      	mvns	r3, r3
 800b1ba:	69ba      	ldr	r2, [r7, #24]
 800b1bc:	4013      	ands	r3, r2
 800b1be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	689a      	ldr	r2, [r3, #8]
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1cc:	69ba      	ldr	r2, [r7, #24]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f003 0303 	and.w	r3, r3, #3
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d123      	bne.n	800b22c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	08da      	lsrs	r2, r3, #3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	3208      	adds	r2, #8
 800b1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	f003 0307 	and.w	r3, r3, #7
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	220f      	movs	r2, #15
 800b1fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b200:	43db      	mvns	r3, r3
 800b202:	69ba      	ldr	r2, [r7, #24]
 800b204:	4013      	ands	r3, r2
 800b206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	691a      	ldr	r2, [r3, #16]
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	f003 0307 	and.w	r3, r3, #7
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	fa02 f303 	lsl.w	r3, r2, r3
 800b218:	69ba      	ldr	r2, [r7, #24]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	08da      	lsrs	r2, r3, #3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3208      	adds	r2, #8
 800b226:	69b9      	ldr	r1, [r7, #24]
 800b228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	005b      	lsls	r3, r3, #1
 800b236:	2203      	movs	r2, #3
 800b238:	fa02 f303 	lsl.w	r3, r2, r3
 800b23c:	43db      	mvns	r3, r3
 800b23e:	69ba      	ldr	r2, [r7, #24]
 800b240:	4013      	ands	r3, r2
 800b242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	f003 0203 	and.w	r2, r3, #3
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	005b      	lsls	r3, r3, #1
 800b250:	fa02 f303 	lsl.w	r3, r2, r3
 800b254:	69ba      	ldr	r2, [r7, #24]
 800b256:	4313      	orrs	r3, r2
 800b258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	69ba      	ldr	r2, [r7, #24]
 800b25e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f000 80a2 	beq.w	800b3b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b26e:	2300      	movs	r3, #0
 800b270:	60fb      	str	r3, [r7, #12]
 800b272:	4b57      	ldr	r3, [pc, #348]	; (800b3d0 <HAL_GPIO_Init+0x2e8>)
 800b274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b276:	4a56      	ldr	r2, [pc, #344]	; (800b3d0 <HAL_GPIO_Init+0x2e8>)
 800b278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b27c:	6453      	str	r3, [r2, #68]	; 0x44
 800b27e:	4b54      	ldr	r3, [pc, #336]	; (800b3d0 <HAL_GPIO_Init+0x2e8>)
 800b280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b286:	60fb      	str	r3, [r7, #12]
 800b288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b28a:	4a52      	ldr	r2, [pc, #328]	; (800b3d4 <HAL_GPIO_Init+0x2ec>)
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	089b      	lsrs	r3, r3, #2
 800b290:	3302      	adds	r3, #2
 800b292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	f003 0303 	and.w	r3, r3, #3
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	220f      	movs	r2, #15
 800b2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a6:	43db      	mvns	r3, r3
 800b2a8:	69ba      	ldr	r2, [r7, #24]
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a49      	ldr	r2, [pc, #292]	; (800b3d8 <HAL_GPIO_Init+0x2f0>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d019      	beq.n	800b2ea <HAL_GPIO_Init+0x202>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a48      	ldr	r2, [pc, #288]	; (800b3dc <HAL_GPIO_Init+0x2f4>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d013      	beq.n	800b2e6 <HAL_GPIO_Init+0x1fe>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a47      	ldr	r2, [pc, #284]	; (800b3e0 <HAL_GPIO_Init+0x2f8>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d00d      	beq.n	800b2e2 <HAL_GPIO_Init+0x1fa>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a46      	ldr	r2, [pc, #280]	; (800b3e4 <HAL_GPIO_Init+0x2fc>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d007      	beq.n	800b2de <HAL_GPIO_Init+0x1f6>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a45      	ldr	r2, [pc, #276]	; (800b3e8 <HAL_GPIO_Init+0x300>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d101      	bne.n	800b2da <HAL_GPIO_Init+0x1f2>
 800b2d6:	2304      	movs	r3, #4
 800b2d8:	e008      	b.n	800b2ec <HAL_GPIO_Init+0x204>
 800b2da:	2307      	movs	r3, #7
 800b2dc:	e006      	b.n	800b2ec <HAL_GPIO_Init+0x204>
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e004      	b.n	800b2ec <HAL_GPIO_Init+0x204>
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	e002      	b.n	800b2ec <HAL_GPIO_Init+0x204>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e000      	b.n	800b2ec <HAL_GPIO_Init+0x204>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	69fa      	ldr	r2, [r7, #28]
 800b2ee:	f002 0203 	and.w	r2, r2, #3
 800b2f2:	0092      	lsls	r2, r2, #2
 800b2f4:	4093      	lsls	r3, r2
 800b2f6:	69ba      	ldr	r2, [r7, #24]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b2fc:	4935      	ldr	r1, [pc, #212]	; (800b3d4 <HAL_GPIO_Init+0x2ec>)
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	089b      	lsrs	r3, r3, #2
 800b302:	3302      	adds	r3, #2
 800b304:	69ba      	ldr	r2, [r7, #24]
 800b306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b30a:	4b38      	ldr	r3, [pc, #224]	; (800b3ec <HAL_GPIO_Init+0x304>)
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	43db      	mvns	r3, r3
 800b314:	69ba      	ldr	r2, [r7, #24]
 800b316:	4013      	ands	r3, r2
 800b318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b322:	2b00      	cmp	r3, #0
 800b324:	d003      	beq.n	800b32e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800b326:	69ba      	ldr	r2, [r7, #24]
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b32e:	4a2f      	ldr	r2, [pc, #188]	; (800b3ec <HAL_GPIO_Init+0x304>)
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b334:	4b2d      	ldr	r3, [pc, #180]	; (800b3ec <HAL_GPIO_Init+0x304>)
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	43db      	mvns	r3, r3
 800b33e:	69ba      	ldr	r2, [r7, #24]
 800b340:	4013      	ands	r3, r2
 800b342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d003      	beq.n	800b358 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800b350:	69ba      	ldr	r2, [r7, #24]
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	4313      	orrs	r3, r2
 800b356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b358:	4a24      	ldr	r2, [pc, #144]	; (800b3ec <HAL_GPIO_Init+0x304>)
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b35e:	4b23      	ldr	r3, [pc, #140]	; (800b3ec <HAL_GPIO_Init+0x304>)
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	43db      	mvns	r3, r3
 800b368:	69ba      	ldr	r2, [r7, #24]
 800b36a:	4013      	ands	r3, r2
 800b36c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800b37a:	69ba      	ldr	r2, [r7, #24]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	4313      	orrs	r3, r2
 800b380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b382:	4a1a      	ldr	r2, [pc, #104]	; (800b3ec <HAL_GPIO_Init+0x304>)
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b388:	4b18      	ldr	r3, [pc, #96]	; (800b3ec <HAL_GPIO_Init+0x304>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	43db      	mvns	r3, r3
 800b392:	69ba      	ldr	r2, [r7, #24]
 800b394:	4013      	ands	r3, r2
 800b396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d003      	beq.n	800b3ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b3ac:	4a0f      	ldr	r2, [pc, #60]	; (800b3ec <HAL_GPIO_Init+0x304>)
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	61fb      	str	r3, [r7, #28]
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	2b0f      	cmp	r3, #15
 800b3bc:	f67f aea2 	bls.w	800b104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b3c0:	bf00      	nop
 800b3c2:	bf00      	nop
 800b3c4:	3724      	adds	r7, #36	; 0x24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	40023800 	.word	0x40023800
 800b3d4:	40013800 	.word	0x40013800
 800b3d8:	40020000 	.word	0x40020000
 800b3dc:	40020400 	.word	0x40020400
 800b3e0:	40020800 	.word	0x40020800
 800b3e4:	40020c00 	.word	0x40020c00
 800b3e8:	40021000 	.word	0x40021000
 800b3ec:	40013c00 	.word	0x40013c00

0800b3f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	807b      	strh	r3, [r7, #2]
 800b3fc:	4613      	mov	r3, r2
 800b3fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b400:	787b      	ldrb	r3, [r7, #1]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d003      	beq.n	800b40e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b406:	887a      	ldrh	r2, [r7, #2]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b40c:	e003      	b.n	800b416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b40e:	887b      	ldrh	r3, [r7, #2]
 800b410:	041a      	lsls	r2, r3, #16
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	619a      	str	r2, [r3, #24]
}
 800b416:	bf00      	nop
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
	...

0800b424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d101      	bne.n	800b436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b432:	2301      	movs	r3, #1
 800b434:	e12b      	b.n	800b68e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d106      	bne.n	800b450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7f5 fa7a 	bl	8000944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2224      	movs	r2, #36	; 0x24
 800b454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f022 0201 	bic.w	r2, r2, #1
 800b466:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b476:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b486:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b488:	f000 fd80 	bl	800bf8c <HAL_RCC_GetPCLK1Freq>
 800b48c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	4a81      	ldr	r2, [pc, #516]	; (800b698 <HAL_I2C_Init+0x274>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d807      	bhi.n	800b4a8 <HAL_I2C_Init+0x84>
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	4a80      	ldr	r2, [pc, #512]	; (800b69c <HAL_I2C_Init+0x278>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	bf94      	ite	ls
 800b4a0:	2301      	movls	r3, #1
 800b4a2:	2300      	movhi	r3, #0
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	e006      	b.n	800b4b6 <HAL_I2C_Init+0x92>
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	4a7d      	ldr	r2, [pc, #500]	; (800b6a0 <HAL_I2C_Init+0x27c>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	bf94      	ite	ls
 800b4b0:	2301      	movls	r3, #1
 800b4b2:	2300      	movhi	r3, #0
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d001      	beq.n	800b4be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e0e7      	b.n	800b68e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	4a78      	ldr	r2, [pc, #480]	; (800b6a4 <HAL_I2C_Init+0x280>)
 800b4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c6:	0c9b      	lsrs	r3, r3, #18
 800b4c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	430a      	orrs	r2, r1
 800b4dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	6a1b      	ldr	r3, [r3, #32]
 800b4e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	4a6a      	ldr	r2, [pc, #424]	; (800b698 <HAL_I2C_Init+0x274>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d802      	bhi.n	800b4f8 <HAL_I2C_Init+0xd4>
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	e009      	b.n	800b50c <HAL_I2C_Init+0xe8>
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b4fe:	fb02 f303 	mul.w	r3, r2, r3
 800b502:	4a69      	ldr	r2, [pc, #420]	; (800b6a8 <HAL_I2C_Init+0x284>)
 800b504:	fba2 2303 	umull	r2, r3, r2, r3
 800b508:	099b      	lsrs	r3, r3, #6
 800b50a:	3301      	adds	r3, #1
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	6812      	ldr	r2, [r2, #0]
 800b510:	430b      	orrs	r3, r1
 800b512:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b51e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	495c      	ldr	r1, [pc, #368]	; (800b698 <HAL_I2C_Init+0x274>)
 800b528:	428b      	cmp	r3, r1
 800b52a:	d819      	bhi.n	800b560 <HAL_I2C_Init+0x13c>
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	1e59      	subs	r1, r3, #1
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	005b      	lsls	r3, r3, #1
 800b536:	fbb1 f3f3 	udiv	r3, r1, r3
 800b53a:	1c59      	adds	r1, r3, #1
 800b53c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b540:	400b      	ands	r3, r1
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00a      	beq.n	800b55c <HAL_I2C_Init+0x138>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	1e59      	subs	r1, r3, #1
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	005b      	lsls	r3, r3, #1
 800b550:	fbb1 f3f3 	udiv	r3, r1, r3
 800b554:	3301      	adds	r3, #1
 800b556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b55a:	e051      	b.n	800b600 <HAL_I2C_Init+0x1dc>
 800b55c:	2304      	movs	r3, #4
 800b55e:	e04f      	b.n	800b600 <HAL_I2C_Init+0x1dc>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d111      	bne.n	800b58c <HAL_I2C_Init+0x168>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	1e58      	subs	r0, r3, #1
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6859      	ldr	r1, [r3, #4]
 800b570:	460b      	mov	r3, r1
 800b572:	005b      	lsls	r3, r3, #1
 800b574:	440b      	add	r3, r1
 800b576:	fbb0 f3f3 	udiv	r3, r0, r3
 800b57a:	3301      	adds	r3, #1
 800b57c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b580:	2b00      	cmp	r3, #0
 800b582:	bf0c      	ite	eq
 800b584:	2301      	moveq	r3, #1
 800b586:	2300      	movne	r3, #0
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	e012      	b.n	800b5b2 <HAL_I2C_Init+0x18e>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	1e58      	subs	r0, r3, #1
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6859      	ldr	r1, [r3, #4]
 800b594:	460b      	mov	r3, r1
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	440b      	add	r3, r1
 800b59a:	0099      	lsls	r1, r3, #2
 800b59c:	440b      	add	r3, r1
 800b59e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	bf0c      	ite	eq
 800b5ac:	2301      	moveq	r3, #1
 800b5ae:	2300      	movne	r3, #0
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d001      	beq.n	800b5ba <HAL_I2C_Init+0x196>
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e022      	b.n	800b600 <HAL_I2C_Init+0x1dc>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10e      	bne.n	800b5e0 <HAL_I2C_Init+0x1bc>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	1e58      	subs	r0, r3, #1
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6859      	ldr	r1, [r3, #4]
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	005b      	lsls	r3, r3, #1
 800b5ce:	440b      	add	r3, r1
 800b5d0:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5de:	e00f      	b.n	800b600 <HAL_I2C_Init+0x1dc>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	1e58      	subs	r0, r3, #1
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6859      	ldr	r1, [r3, #4]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	440b      	add	r3, r1
 800b5ee:	0099      	lsls	r1, r3, #2
 800b5f0:	440b      	add	r3, r1
 800b5f2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b600:	6879      	ldr	r1, [r7, #4]
 800b602:	6809      	ldr	r1, [r1, #0]
 800b604:	4313      	orrs	r3, r2
 800b606:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	69da      	ldr	r2, [r3, #28]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a1b      	ldr	r3, [r3, #32]
 800b61a:	431a      	orrs	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	430a      	orrs	r2, r1
 800b622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b62e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	6911      	ldr	r1, [r2, #16]
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	68d2      	ldr	r2, [r2, #12]
 800b63a:	4311      	orrs	r1, r2
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	6812      	ldr	r2, [r2, #0]
 800b640:	430b      	orrs	r3, r1
 800b642:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	695a      	ldr	r2, [r3, #20]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	431a      	orrs	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	430a      	orrs	r2, r1
 800b65e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f042 0201 	orr.w	r2, r2, #1
 800b66e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2220      	movs	r2, #32
 800b67a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	000186a0 	.word	0x000186a0
 800b69c:	001e847f 	.word	0x001e847f
 800b6a0:	003d08ff 	.word	0x003d08ff
 800b6a4:	431bde83 	.word	0x431bde83
 800b6a8:	10624dd3 	.word	0x10624dd3

0800b6ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d101      	bne.n	800b6be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e267      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d075      	beq.n	800b7b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b6ca:	4b88      	ldr	r3, [pc, #544]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	f003 030c 	and.w	r3, r3, #12
 800b6d2:	2b04      	cmp	r3, #4
 800b6d4:	d00c      	beq.n	800b6f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b6d6:	4b85      	ldr	r3, [pc, #532]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b6de:	2b08      	cmp	r3, #8
 800b6e0:	d112      	bne.n	800b708 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b6e2:	4b82      	ldr	r3, [pc, #520]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6ee:	d10b      	bne.n	800b708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6f0:	4b7e      	ldr	r3, [pc, #504]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d05b      	beq.n	800b7b4 <HAL_RCC_OscConfig+0x108>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d157      	bne.n	800b7b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	e242      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b710:	d106      	bne.n	800b720 <HAL_RCC_OscConfig+0x74>
 800b712:	4b76      	ldr	r3, [pc, #472]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a75      	ldr	r2, [pc, #468]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b71c:	6013      	str	r3, [r2, #0]
 800b71e:	e01d      	b.n	800b75c <HAL_RCC_OscConfig+0xb0>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b728:	d10c      	bne.n	800b744 <HAL_RCC_OscConfig+0x98>
 800b72a:	4b70      	ldr	r3, [pc, #448]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a6f      	ldr	r2, [pc, #444]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b734:	6013      	str	r3, [r2, #0]
 800b736:	4b6d      	ldr	r3, [pc, #436]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a6c      	ldr	r2, [pc, #432]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b73c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b740:	6013      	str	r3, [r2, #0]
 800b742:	e00b      	b.n	800b75c <HAL_RCC_OscConfig+0xb0>
 800b744:	4b69      	ldr	r3, [pc, #420]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a68      	ldr	r2, [pc, #416]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b74a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b74e:	6013      	str	r3, [r2, #0]
 800b750:	4b66      	ldr	r3, [pc, #408]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a65      	ldr	r2, [pc, #404]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b75a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d013      	beq.n	800b78c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b764:	f7ff fbce 	bl	800af04 <HAL_GetTick>
 800b768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b76a:	e008      	b.n	800b77e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b76c:	f7ff fbca 	bl	800af04 <HAL_GetTick>
 800b770:	4602      	mov	r2, r0
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	2b64      	cmp	r3, #100	; 0x64
 800b778:	d901      	bls.n	800b77e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b77a:	2303      	movs	r3, #3
 800b77c:	e207      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b77e:	4b5b      	ldr	r3, [pc, #364]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b786:	2b00      	cmp	r3, #0
 800b788:	d0f0      	beq.n	800b76c <HAL_RCC_OscConfig+0xc0>
 800b78a:	e014      	b.n	800b7b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b78c:	f7ff fbba 	bl	800af04 <HAL_GetTick>
 800b790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b792:	e008      	b.n	800b7a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b794:	f7ff fbb6 	bl	800af04 <HAL_GetTick>
 800b798:	4602      	mov	r2, r0
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	2b64      	cmp	r3, #100	; 0x64
 800b7a0:	d901      	bls.n	800b7a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b7a2:	2303      	movs	r3, #3
 800b7a4:	e1f3      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b7a6:	4b51      	ldr	r3, [pc, #324]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1f0      	bne.n	800b794 <HAL_RCC_OscConfig+0xe8>
 800b7b2:	e000      	b.n	800b7b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 0302 	and.w	r3, r3, #2
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d063      	beq.n	800b88a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b7c2:	4b4a      	ldr	r3, [pc, #296]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	f003 030c 	and.w	r3, r3, #12
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00b      	beq.n	800b7e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b7ce:	4b47      	ldr	r3, [pc, #284]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b7d6:	2b08      	cmp	r3, #8
 800b7d8:	d11c      	bne.n	800b814 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b7da:	4b44      	ldr	r3, [pc, #272]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d116      	bne.n	800b814 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b7e6:	4b41      	ldr	r3, [pc, #260]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0302 	and.w	r3, r3, #2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d005      	beq.n	800b7fe <HAL_RCC_OscConfig+0x152>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d001      	beq.n	800b7fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e1c7      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7fe:	4b3b      	ldr	r3, [pc, #236]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	691b      	ldr	r3, [r3, #16]
 800b80a:	00db      	lsls	r3, r3, #3
 800b80c:	4937      	ldr	r1, [pc, #220]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b80e:	4313      	orrs	r3, r2
 800b810:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b812:	e03a      	b.n	800b88a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d020      	beq.n	800b85e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b81c:	4b34      	ldr	r3, [pc, #208]	; (800b8f0 <HAL_RCC_OscConfig+0x244>)
 800b81e:	2201      	movs	r2, #1
 800b820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b822:	f7ff fb6f 	bl	800af04 <HAL_GetTick>
 800b826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b828:	e008      	b.n	800b83c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b82a:	f7ff fb6b 	bl	800af04 <HAL_GetTick>
 800b82e:	4602      	mov	r2, r0
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	2b02      	cmp	r3, #2
 800b836:	d901      	bls.n	800b83c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	e1a8      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b83c:	4b2b      	ldr	r3, [pc, #172]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f003 0302 	and.w	r3, r3, #2
 800b844:	2b00      	cmp	r3, #0
 800b846:	d0f0      	beq.n	800b82a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b848:	4b28      	ldr	r3, [pc, #160]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	00db      	lsls	r3, r3, #3
 800b856:	4925      	ldr	r1, [pc, #148]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b858:	4313      	orrs	r3, r2
 800b85a:	600b      	str	r3, [r1, #0]
 800b85c:	e015      	b.n	800b88a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b85e:	4b24      	ldr	r3, [pc, #144]	; (800b8f0 <HAL_RCC_OscConfig+0x244>)
 800b860:	2200      	movs	r2, #0
 800b862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b864:	f7ff fb4e 	bl	800af04 <HAL_GetTick>
 800b868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b86a:	e008      	b.n	800b87e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b86c:	f7ff fb4a 	bl	800af04 <HAL_GetTick>
 800b870:	4602      	mov	r2, r0
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	2b02      	cmp	r3, #2
 800b878:	d901      	bls.n	800b87e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b87a:	2303      	movs	r3, #3
 800b87c:	e187      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b87e:	4b1b      	ldr	r3, [pc, #108]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f003 0302 	and.w	r3, r3, #2
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1f0      	bne.n	800b86c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 0308 	and.w	r3, r3, #8
 800b892:	2b00      	cmp	r3, #0
 800b894:	d036      	beq.n	800b904 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	695b      	ldr	r3, [r3, #20]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d016      	beq.n	800b8cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b89e:	4b15      	ldr	r3, [pc, #84]	; (800b8f4 <HAL_RCC_OscConfig+0x248>)
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8a4:	f7ff fb2e 	bl	800af04 <HAL_GetTick>
 800b8a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b8aa:	e008      	b.n	800b8be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b8ac:	f7ff fb2a 	bl	800af04 <HAL_GetTick>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	1ad3      	subs	r3, r2, r3
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	d901      	bls.n	800b8be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	e167      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b8be:	4b0b      	ldr	r3, [pc, #44]	; (800b8ec <HAL_RCC_OscConfig+0x240>)
 800b8c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8c2:	f003 0302 	and.w	r3, r3, #2
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d0f0      	beq.n	800b8ac <HAL_RCC_OscConfig+0x200>
 800b8ca:	e01b      	b.n	800b904 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b8cc:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <HAL_RCC_OscConfig+0x248>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b8d2:	f7ff fb17 	bl	800af04 <HAL_GetTick>
 800b8d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b8d8:	e00e      	b.n	800b8f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b8da:	f7ff fb13 	bl	800af04 <HAL_GetTick>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	1ad3      	subs	r3, r2, r3
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d907      	bls.n	800b8f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e150      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
 800b8ec:	40023800 	.word	0x40023800
 800b8f0:	42470000 	.word	0x42470000
 800b8f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b8f8:	4b88      	ldr	r3, [pc, #544]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b8fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8fc:	f003 0302 	and.w	r3, r3, #2
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1ea      	bne.n	800b8da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 8097 	beq.w	800ba40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b912:	2300      	movs	r3, #0
 800b914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b916:	4b81      	ldr	r3, [pc, #516]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10f      	bne.n	800b942 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b922:	2300      	movs	r3, #0
 800b924:	60bb      	str	r3, [r7, #8]
 800b926:	4b7d      	ldr	r3, [pc, #500]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92a:	4a7c      	ldr	r2, [pc, #496]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b92c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b930:	6413      	str	r3, [r2, #64]	; 0x40
 800b932:	4b7a      	ldr	r3, [pc, #488]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b93a:	60bb      	str	r3, [r7, #8]
 800b93c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b93e:	2301      	movs	r3, #1
 800b940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b942:	4b77      	ldr	r3, [pc, #476]	; (800bb20 <HAL_RCC_OscConfig+0x474>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d118      	bne.n	800b980 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b94e:	4b74      	ldr	r3, [pc, #464]	; (800bb20 <HAL_RCC_OscConfig+0x474>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a73      	ldr	r2, [pc, #460]	; (800bb20 <HAL_RCC_OscConfig+0x474>)
 800b954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b95a:	f7ff fad3 	bl	800af04 <HAL_GetTick>
 800b95e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b960:	e008      	b.n	800b974 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b962:	f7ff facf 	bl	800af04 <HAL_GetTick>
 800b966:	4602      	mov	r2, r0
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d901      	bls.n	800b974 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b970:	2303      	movs	r3, #3
 800b972:	e10c      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b974:	4b6a      	ldr	r3, [pc, #424]	; (800bb20 <HAL_RCC_OscConfig+0x474>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d0f0      	beq.n	800b962 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d106      	bne.n	800b996 <HAL_RCC_OscConfig+0x2ea>
 800b988:	4b64      	ldr	r3, [pc, #400]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b98c:	4a63      	ldr	r2, [pc, #396]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b98e:	f043 0301 	orr.w	r3, r3, #1
 800b992:	6713      	str	r3, [r2, #112]	; 0x70
 800b994:	e01c      	b.n	800b9d0 <HAL_RCC_OscConfig+0x324>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	2b05      	cmp	r3, #5
 800b99c:	d10c      	bne.n	800b9b8 <HAL_RCC_OscConfig+0x30c>
 800b99e:	4b5f      	ldr	r3, [pc, #380]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9a2:	4a5e      	ldr	r2, [pc, #376]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b9a4:	f043 0304 	orr.w	r3, r3, #4
 800b9a8:	6713      	str	r3, [r2, #112]	; 0x70
 800b9aa:	4b5c      	ldr	r3, [pc, #368]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ae:	4a5b      	ldr	r2, [pc, #364]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b9b0:	f043 0301 	orr.w	r3, r3, #1
 800b9b4:	6713      	str	r3, [r2, #112]	; 0x70
 800b9b6:	e00b      	b.n	800b9d0 <HAL_RCC_OscConfig+0x324>
 800b9b8:	4b58      	ldr	r3, [pc, #352]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b9ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9bc:	4a57      	ldr	r2, [pc, #348]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b9be:	f023 0301 	bic.w	r3, r3, #1
 800b9c2:	6713      	str	r3, [r2, #112]	; 0x70
 800b9c4:	4b55      	ldr	r3, [pc, #340]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b9c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c8:	4a54      	ldr	r2, [pc, #336]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b9ca:	f023 0304 	bic.w	r3, r3, #4
 800b9ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d015      	beq.n	800ba04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9d8:	f7ff fa94 	bl	800af04 <HAL_GetTick>
 800b9dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b9de:	e00a      	b.n	800b9f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9e0:	f7ff fa90 	bl	800af04 <HAL_GetTick>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	1ad3      	subs	r3, r2, r3
 800b9ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d901      	bls.n	800b9f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	e0cb      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b9f6:	4b49      	ldr	r3, [pc, #292]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800b9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d0ee      	beq.n	800b9e0 <HAL_RCC_OscConfig+0x334>
 800ba02:	e014      	b.n	800ba2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba04:	f7ff fa7e 	bl	800af04 <HAL_GetTick>
 800ba08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba0a:	e00a      	b.n	800ba22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba0c:	f7ff fa7a 	bl	800af04 <HAL_GetTick>
 800ba10:	4602      	mov	r2, r0
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d901      	bls.n	800ba22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	e0b5      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba22:	4b3e      	ldr	r3, [pc, #248]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800ba24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba26:	f003 0302 	and.w	r3, r3, #2
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1ee      	bne.n	800ba0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ba2e:	7dfb      	ldrb	r3, [r7, #23]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d105      	bne.n	800ba40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba34:	4b39      	ldr	r3, [pc, #228]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800ba36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba38:	4a38      	ldr	r2, [pc, #224]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800ba3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	f000 80a1 	beq.w	800bb8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ba4a:	4b34      	ldr	r3, [pc, #208]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	f003 030c 	and.w	r3, r3, #12
 800ba52:	2b08      	cmp	r3, #8
 800ba54:	d05c      	beq.n	800bb10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	699b      	ldr	r3, [r3, #24]
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	d141      	bne.n	800bae2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba5e:	4b31      	ldr	r3, [pc, #196]	; (800bb24 <HAL_RCC_OscConfig+0x478>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba64:	f7ff fa4e 	bl	800af04 <HAL_GetTick>
 800ba68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba6a:	e008      	b.n	800ba7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba6c:	f7ff fa4a 	bl	800af04 <HAL_GetTick>
 800ba70:	4602      	mov	r2, r0
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	d901      	bls.n	800ba7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ba7a:	2303      	movs	r3, #3
 800ba7c:	e087      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba7e:	4b27      	ldr	r3, [pc, #156]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1f0      	bne.n	800ba6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	69da      	ldr	r2, [r3, #28]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a1b      	ldr	r3, [r3, #32]
 800ba92:	431a      	orrs	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba98:	019b      	lsls	r3, r3, #6
 800ba9a:	431a      	orrs	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa0:	085b      	lsrs	r3, r3, #1
 800baa2:	3b01      	subs	r3, #1
 800baa4:	041b      	lsls	r3, r3, #16
 800baa6:	431a      	orrs	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baac:	061b      	lsls	r3, r3, #24
 800baae:	491b      	ldr	r1, [pc, #108]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800bab0:	4313      	orrs	r3, r2
 800bab2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bab4:	4b1b      	ldr	r3, [pc, #108]	; (800bb24 <HAL_RCC_OscConfig+0x478>)
 800bab6:	2201      	movs	r2, #1
 800bab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800baba:	f7ff fa23 	bl	800af04 <HAL_GetTick>
 800babe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bac0:	e008      	b.n	800bad4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bac2:	f7ff fa1f 	bl	800af04 <HAL_GetTick>
 800bac6:	4602      	mov	r2, r0
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d901      	bls.n	800bad4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e05c      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bad4:	4b11      	ldr	r3, [pc, #68]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d0f0      	beq.n	800bac2 <HAL_RCC_OscConfig+0x416>
 800bae0:	e054      	b.n	800bb8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bae2:	4b10      	ldr	r3, [pc, #64]	; (800bb24 <HAL_RCC_OscConfig+0x478>)
 800bae4:	2200      	movs	r2, #0
 800bae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bae8:	f7ff fa0c 	bl	800af04 <HAL_GetTick>
 800baec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800baee:	e008      	b.n	800bb02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800baf0:	f7ff fa08 	bl	800af04 <HAL_GetTick>
 800baf4:	4602      	mov	r2, r0
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d901      	bls.n	800bb02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800bafe:	2303      	movs	r3, #3
 800bb00:	e045      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb02:	4b06      	ldr	r3, [pc, #24]	; (800bb1c <HAL_RCC_OscConfig+0x470>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1f0      	bne.n	800baf0 <HAL_RCC_OscConfig+0x444>
 800bb0e:	e03d      	b.n	800bb8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	699b      	ldr	r3, [r3, #24]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d107      	bne.n	800bb28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e038      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
 800bb1c:	40023800 	.word	0x40023800
 800bb20:	40007000 	.word	0x40007000
 800bb24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bb28:	4b1b      	ldr	r3, [pc, #108]	; (800bb98 <HAL_RCC_OscConfig+0x4ec>)
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d028      	beq.n	800bb88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d121      	bne.n	800bb88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d11a      	bne.n	800bb88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bb58:	4013      	ands	r3, r2
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bb5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d111      	bne.n	800bb88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6e:	085b      	lsrs	r3, r3, #1
 800bb70:	3b01      	subs	r3, #1
 800bb72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d107      	bne.n	800bb88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d001      	beq.n	800bb8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e000      	b.n	800bb8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3718      	adds	r7, #24
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	40023800 	.word	0x40023800

0800bb9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d101      	bne.n	800bbb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bbac:	2301      	movs	r3, #1
 800bbae:	e0cc      	b.n	800bd4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bbb0:	4b68      	ldr	r3, [pc, #416]	; (800bd54 <HAL_RCC_ClockConfig+0x1b8>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f003 0307 	and.w	r3, r3, #7
 800bbb8:	683a      	ldr	r2, [r7, #0]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d90c      	bls.n	800bbd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbbe:	4b65      	ldr	r3, [pc, #404]	; (800bd54 <HAL_RCC_ClockConfig+0x1b8>)
 800bbc0:	683a      	ldr	r2, [r7, #0]
 800bbc2:	b2d2      	uxtb	r2, r2
 800bbc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbc6:	4b63      	ldr	r3, [pc, #396]	; (800bd54 <HAL_RCC_ClockConfig+0x1b8>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 0307 	and.w	r3, r3, #7
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d001      	beq.n	800bbd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e0b8      	b.n	800bd4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f003 0302 	and.w	r3, r3, #2
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d020      	beq.n	800bc26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 0304 	and.w	r3, r3, #4
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d005      	beq.n	800bbfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bbf0:	4b59      	ldr	r3, [pc, #356]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	4a58      	ldr	r2, [pc, #352]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bbf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bbfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 0308 	and.w	r3, r3, #8
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d005      	beq.n	800bc14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bc08:	4b53      	ldr	r3, [pc, #332]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	4a52      	ldr	r2, [pc, #328]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bc0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bc12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc14:	4b50      	ldr	r3, [pc, #320]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	494d      	ldr	r1, [pc, #308]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bc22:	4313      	orrs	r3, r2
 800bc24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f003 0301 	and.w	r3, r3, #1
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d044      	beq.n	800bcbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d107      	bne.n	800bc4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc3a:	4b47      	ldr	r3, [pc, #284]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d119      	bne.n	800bc7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bc46:	2301      	movs	r3, #1
 800bc48:	e07f      	b.n	800bd4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	2b02      	cmp	r3, #2
 800bc50:	d003      	beq.n	800bc5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	d107      	bne.n	800bc6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc5a:	4b3f      	ldr	r3, [pc, #252]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d109      	bne.n	800bc7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bc66:	2301      	movs	r3, #1
 800bc68:	e06f      	b.n	800bd4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc6a:	4b3b      	ldr	r3, [pc, #236]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 0302 	and.w	r3, r3, #2
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d101      	bne.n	800bc7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bc76:	2301      	movs	r3, #1
 800bc78:	e067      	b.n	800bd4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bc7a:	4b37      	ldr	r3, [pc, #220]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	f023 0203 	bic.w	r2, r3, #3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	4934      	ldr	r1, [pc, #208]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bc8c:	f7ff f93a 	bl	800af04 <HAL_GetTick>
 800bc90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc92:	e00a      	b.n	800bcaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc94:	f7ff f936 	bl	800af04 <HAL_GetTick>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d901      	bls.n	800bcaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	e04f      	b.n	800bd4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bcaa:	4b2b      	ldr	r3, [pc, #172]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	f003 020c 	and.w	r2, r3, #12
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d1eb      	bne.n	800bc94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bcbc:	4b25      	ldr	r3, [pc, #148]	; (800bd54 <HAL_RCC_ClockConfig+0x1b8>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f003 0307 	and.w	r3, r3, #7
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d20c      	bcs.n	800bce4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcca:	4b22      	ldr	r3, [pc, #136]	; (800bd54 <HAL_RCC_ClockConfig+0x1b8>)
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	b2d2      	uxtb	r2, r2
 800bcd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcd2:	4b20      	ldr	r3, [pc, #128]	; (800bd54 <HAL_RCC_ClockConfig+0x1b8>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f003 0307 	and.w	r3, r3, #7
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d001      	beq.n	800bce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e032      	b.n	800bd4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f003 0304 	and.w	r3, r3, #4
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d008      	beq.n	800bd02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bcf0:	4b19      	ldr	r3, [pc, #100]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	4916      	ldr	r1, [pc, #88]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f003 0308 	and.w	r3, r3, #8
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d009      	beq.n	800bd22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bd0e:	4b12      	ldr	r3, [pc, #72]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	00db      	lsls	r3, r3, #3
 800bd1c:	490e      	ldr	r1, [pc, #56]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bd22:	f000 f821 	bl	800bd68 <HAL_RCC_GetSysClockFreq>
 800bd26:	4602      	mov	r2, r0
 800bd28:	4b0b      	ldr	r3, [pc, #44]	; (800bd58 <HAL_RCC_ClockConfig+0x1bc>)
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	091b      	lsrs	r3, r3, #4
 800bd2e:	f003 030f 	and.w	r3, r3, #15
 800bd32:	490a      	ldr	r1, [pc, #40]	; (800bd5c <HAL_RCC_ClockConfig+0x1c0>)
 800bd34:	5ccb      	ldrb	r3, [r1, r3]
 800bd36:	fa22 f303 	lsr.w	r3, r2, r3
 800bd3a:	4a09      	ldr	r2, [pc, #36]	; (800bd60 <HAL_RCC_ClockConfig+0x1c4>)
 800bd3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800bd3e:	4b09      	ldr	r3, [pc, #36]	; (800bd64 <HAL_RCC_ClockConfig+0x1c8>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7ff f89a 	bl	800ae7c <HAL_InitTick>

  return HAL_OK;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	40023c00 	.word	0x40023c00
 800bd58:	40023800 	.word	0x40023800
 800bd5c:	0800d8bc 	.word	0x0800d8bc
 800bd60:	20000000 	.word	0x20000000
 800bd64:	20000048 	.word	0x20000048

0800bd68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bd68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd6c:	b094      	sub	sp, #80	; 0x50
 800bd6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bd70:	2300      	movs	r3, #0
 800bd72:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 800bd74:	2300      	movs	r3, #0
 800bd76:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bd80:	4b79      	ldr	r3, [pc, #484]	; (800bf68 <HAL_RCC_GetSysClockFreq+0x200>)
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	f003 030c 	and.w	r3, r3, #12
 800bd88:	2b08      	cmp	r3, #8
 800bd8a:	d00d      	beq.n	800bda8 <HAL_RCC_GetSysClockFreq+0x40>
 800bd8c:	2b08      	cmp	r3, #8
 800bd8e:	f200 80e1 	bhi.w	800bf54 <HAL_RCC_GetSysClockFreq+0x1ec>
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d002      	beq.n	800bd9c <HAL_RCC_GetSysClockFreq+0x34>
 800bd96:	2b04      	cmp	r3, #4
 800bd98:	d003      	beq.n	800bda2 <HAL_RCC_GetSysClockFreq+0x3a>
 800bd9a:	e0db      	b.n	800bf54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bd9c:	4b73      	ldr	r3, [pc, #460]	; (800bf6c <HAL_RCC_GetSysClockFreq+0x204>)
 800bd9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800bda0:	e0db      	b.n	800bf5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bda2:	4b73      	ldr	r3, [pc, #460]	; (800bf70 <HAL_RCC_GetSysClockFreq+0x208>)
 800bda4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800bda6:	e0d8      	b.n	800bf5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bda8:	4b6f      	ldr	r3, [pc, #444]	; (800bf68 <HAL_RCC_GetSysClockFreq+0x200>)
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdb0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bdb2:	4b6d      	ldr	r3, [pc, #436]	; (800bf68 <HAL_RCC_GetSysClockFreq+0x200>)
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d063      	beq.n	800be86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bdbe:	4b6a      	ldr	r3, [pc, #424]	; (800bf68 <HAL_RCC_GetSysClockFreq+0x200>)
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	099b      	lsrs	r3, r3, #6
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdd0:	633b      	str	r3, [r7, #48]	; 0x30
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	637b      	str	r3, [r7, #52]	; 0x34
 800bdd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800bdda:	4622      	mov	r2, r4
 800bddc:	462b      	mov	r3, r5
 800bdde:	f04f 0000 	mov.w	r0, #0
 800bde2:	f04f 0100 	mov.w	r1, #0
 800bde6:	0159      	lsls	r1, r3, #5
 800bde8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bdec:	0150      	lsls	r0, r2, #5
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	1a51      	subs	r1, r2, r1
 800bdf6:	6139      	str	r1, [r7, #16]
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	eb63 0301 	sbc.w	r3, r3, r1
 800bdfe:	617b      	str	r3, [r7, #20]
 800be00:	f04f 0200 	mov.w	r2, #0
 800be04:	f04f 0300 	mov.w	r3, #0
 800be08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800be0c:	4659      	mov	r1, fp
 800be0e:	018b      	lsls	r3, r1, #6
 800be10:	4651      	mov	r1, sl
 800be12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800be16:	4651      	mov	r1, sl
 800be18:	018a      	lsls	r2, r1, #6
 800be1a:	4651      	mov	r1, sl
 800be1c:	ebb2 0801 	subs.w	r8, r2, r1
 800be20:	4659      	mov	r1, fp
 800be22:	eb63 0901 	sbc.w	r9, r3, r1
 800be26:	f04f 0200 	mov.w	r2, #0
 800be2a:	f04f 0300 	mov.w	r3, #0
 800be2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800be32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800be36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800be3a:	4690      	mov	r8, r2
 800be3c:	4699      	mov	r9, r3
 800be3e:	4623      	mov	r3, r4
 800be40:	eb18 0303 	adds.w	r3, r8, r3
 800be44:	60bb      	str	r3, [r7, #8]
 800be46:	462b      	mov	r3, r5
 800be48:	eb49 0303 	adc.w	r3, r9, r3
 800be4c:	60fb      	str	r3, [r7, #12]
 800be4e:	f04f 0200 	mov.w	r2, #0
 800be52:	f04f 0300 	mov.w	r3, #0
 800be56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800be5a:	4629      	mov	r1, r5
 800be5c:	024b      	lsls	r3, r1, #9
 800be5e:	4621      	mov	r1, r4
 800be60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800be64:	4621      	mov	r1, r4
 800be66:	024a      	lsls	r2, r1, #9
 800be68:	4610      	mov	r0, r2
 800be6a:	4619      	mov	r1, r3
 800be6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be6e:	2200      	movs	r2, #0
 800be70:	62bb      	str	r3, [r7, #40]	; 0x28
 800be72:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800be78:	f7f4 f9ae 	bl	80001d8 <__aeabi_uldivmod>
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	4613      	mov	r3, r2
 800be82:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be84:	e058      	b.n	800bf38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be86:	4b38      	ldr	r3, [pc, #224]	; (800bf68 <HAL_RCC_GetSysClockFreq+0x200>)
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	099b      	lsrs	r3, r3, #6
 800be8c:	2200      	movs	r2, #0
 800be8e:	4618      	mov	r0, r3
 800be90:	4611      	mov	r1, r2
 800be92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800be96:	623b      	str	r3, [r7, #32]
 800be98:	2300      	movs	r3, #0
 800be9a:	627b      	str	r3, [r7, #36]	; 0x24
 800be9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800bea0:	4642      	mov	r2, r8
 800bea2:	464b      	mov	r3, r9
 800bea4:	f04f 0000 	mov.w	r0, #0
 800bea8:	f04f 0100 	mov.w	r1, #0
 800beac:	0159      	lsls	r1, r3, #5
 800beae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800beb2:	0150      	lsls	r0, r2, #5
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	4641      	mov	r1, r8
 800beba:	ebb2 0a01 	subs.w	sl, r2, r1
 800bebe:	4649      	mov	r1, r9
 800bec0:	eb63 0b01 	sbc.w	fp, r3, r1
 800bec4:	f04f 0200 	mov.w	r2, #0
 800bec8:	f04f 0300 	mov.w	r3, #0
 800becc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800bed0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800bed4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800bed8:	ebb2 040a 	subs.w	r4, r2, sl
 800bedc:	eb63 050b 	sbc.w	r5, r3, fp
 800bee0:	f04f 0200 	mov.w	r2, #0
 800bee4:	f04f 0300 	mov.w	r3, #0
 800bee8:	00eb      	lsls	r3, r5, #3
 800beea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800beee:	00e2      	lsls	r2, r4, #3
 800bef0:	4614      	mov	r4, r2
 800bef2:	461d      	mov	r5, r3
 800bef4:	4643      	mov	r3, r8
 800bef6:	18e3      	adds	r3, r4, r3
 800bef8:	603b      	str	r3, [r7, #0]
 800befa:	464b      	mov	r3, r9
 800befc:	eb45 0303 	adc.w	r3, r5, r3
 800bf00:	607b      	str	r3, [r7, #4]
 800bf02:	f04f 0200 	mov.w	r2, #0
 800bf06:	f04f 0300 	mov.w	r3, #0
 800bf0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bf0e:	4629      	mov	r1, r5
 800bf10:	028b      	lsls	r3, r1, #10
 800bf12:	4621      	mov	r1, r4
 800bf14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bf18:	4621      	mov	r1, r4
 800bf1a:	028a      	lsls	r2, r1, #10
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	4619      	mov	r1, r3
 800bf20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf22:	2200      	movs	r2, #0
 800bf24:	61bb      	str	r3, [r7, #24]
 800bf26:	61fa      	str	r2, [r7, #28]
 800bf28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bf2c:	f7f4 f954 	bl	80001d8 <__aeabi_uldivmod>
 800bf30:	4602      	mov	r2, r0
 800bf32:	460b      	mov	r3, r1
 800bf34:	4613      	mov	r3, r2
 800bf36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800bf38:	4b0b      	ldr	r3, [pc, #44]	; (800bf68 <HAL_RCC_GetSysClockFreq+0x200>)
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	0c1b      	lsrs	r3, r3, #16
 800bf3e:	f003 0303 	and.w	r3, r3, #3
 800bf42:	3301      	adds	r3, #1
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800bf48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800bf52:	e002      	b.n	800bf5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bf54:	4b05      	ldr	r3, [pc, #20]	; (800bf6c <HAL_RCC_GetSysClockFreq+0x204>)
 800bf56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800bf58:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bf5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3750      	adds	r7, #80	; 0x50
 800bf60:	46bd      	mov	sp, r7
 800bf62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf66:	bf00      	nop
 800bf68:	40023800 	.word	0x40023800
 800bf6c:	00f42400 	.word	0x00f42400
 800bf70:	007a1200 	.word	0x007a1200

0800bf74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf74:	b480      	push	{r7}
 800bf76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bf78:	4b03      	ldr	r3, [pc, #12]	; (800bf88 <HAL_RCC_GetHCLKFreq+0x14>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	20000000 	.word	0x20000000

0800bf8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bf90:	f7ff fff0 	bl	800bf74 <HAL_RCC_GetHCLKFreq>
 800bf94:	4602      	mov	r2, r0
 800bf96:	4b05      	ldr	r3, [pc, #20]	; (800bfac <HAL_RCC_GetPCLK1Freq+0x20>)
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	0a9b      	lsrs	r3, r3, #10
 800bf9c:	f003 0307 	and.w	r3, r3, #7
 800bfa0:	4903      	ldr	r1, [pc, #12]	; (800bfb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bfa2:	5ccb      	ldrb	r3, [r1, r3]
 800bfa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	40023800 	.word	0x40023800
 800bfb0:	0800d8cc 	.word	0x0800d8cc

0800bfb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bfb8:	f7ff ffdc 	bl	800bf74 <HAL_RCC_GetHCLKFreq>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	4b05      	ldr	r3, [pc, #20]	; (800bfd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	0b5b      	lsrs	r3, r3, #13
 800bfc4:	f003 0307 	and.w	r3, r3, #7
 800bfc8:	4903      	ldr	r1, [pc, #12]	; (800bfd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bfca:	5ccb      	ldrb	r3, [r1, r3]
 800bfcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	40023800 	.word	0x40023800
 800bfd8:	0800d8cc 	.word	0x0800d8cc

0800bfdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e042      	b.n	800c074 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d106      	bne.n	800c008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7f4 fce6 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2224      	movs	r2, #36	; 0x24
 800c00c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68da      	ldr	r2, [r3, #12]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c01e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 f82b 	bl	800c07c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	691a      	ldr	r2, [r3, #16]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	695a      	ldr	r2, [r3, #20]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68da      	ldr	r2, [r3, #12]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2220      	movs	r2, #32
 800c060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2220      	movs	r2, #32
 800c068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c07c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c080:	b0c0      	sub	sp, #256	; 0x100
 800c082:	af00      	add	r7, sp, #0
 800c084:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c098:	68d9      	ldr	r1, [r3, #12]
 800c09a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	ea40 0301 	orr.w	r3, r0, r1
 800c0a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c0a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0aa:	689a      	ldr	r2, [r3, #8]
 800c0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	431a      	orrs	r2, r3
 800c0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0b8:	695b      	ldr	r3, [r3, #20]
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0c0:	69db      	ldr	r3, [r3, #28]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c0d4:	f021 010c 	bic.w	r1, r1, #12
 800c0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c0e2:	430b      	orrs	r3, r1
 800c0e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c0e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	695b      	ldr	r3, [r3, #20]
 800c0ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c0f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0f6:	6999      	ldr	r1, [r3, #24]
 800c0f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	ea40 0301 	orr.w	r3, r0, r1
 800c102:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	4b8f      	ldr	r3, [pc, #572]	; (800c348 <UART_SetConfig+0x2cc>)
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d005      	beq.n	800c11c <UART_SetConfig+0xa0>
 800c110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	4b8d      	ldr	r3, [pc, #564]	; (800c34c <UART_SetConfig+0x2d0>)
 800c118:	429a      	cmp	r2, r3
 800c11a:	d104      	bne.n	800c126 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c11c:	f7ff ff4a 	bl	800bfb4 <HAL_RCC_GetPCLK2Freq>
 800c120:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c124:	e003      	b.n	800c12e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c126:	f7ff ff31 	bl	800bf8c <HAL_RCC_GetPCLK1Freq>
 800c12a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c132:	69db      	ldr	r3, [r3, #28]
 800c134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c138:	f040 810c 	bne.w	800c354 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c13c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c140:	2200      	movs	r2, #0
 800c142:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c146:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c14a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c14e:	4622      	mov	r2, r4
 800c150:	462b      	mov	r3, r5
 800c152:	1891      	adds	r1, r2, r2
 800c154:	65b9      	str	r1, [r7, #88]	; 0x58
 800c156:	415b      	adcs	r3, r3
 800c158:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c15a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c15e:	4621      	mov	r1, r4
 800c160:	eb12 0801 	adds.w	r8, r2, r1
 800c164:	4629      	mov	r1, r5
 800c166:	eb43 0901 	adc.w	r9, r3, r1
 800c16a:	f04f 0200 	mov.w	r2, #0
 800c16e:	f04f 0300 	mov.w	r3, #0
 800c172:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c176:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c17a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c17e:	4690      	mov	r8, r2
 800c180:	4699      	mov	r9, r3
 800c182:	4623      	mov	r3, r4
 800c184:	eb18 0303 	adds.w	r3, r8, r3
 800c188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c18c:	462b      	mov	r3, r5
 800c18e:	eb49 0303 	adc.w	r3, r9, r3
 800c192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c1a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c1a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	18db      	adds	r3, r3, r3
 800c1ae:	653b      	str	r3, [r7, #80]	; 0x50
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	eb42 0303 	adc.w	r3, r2, r3
 800c1b6:	657b      	str	r3, [r7, #84]	; 0x54
 800c1b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c1bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c1c0:	f7f4 f80a 	bl	80001d8 <__aeabi_uldivmod>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	4b61      	ldr	r3, [pc, #388]	; (800c350 <UART_SetConfig+0x2d4>)
 800c1ca:	fba3 2302 	umull	r2, r3, r3, r2
 800c1ce:	095b      	lsrs	r3, r3, #5
 800c1d0:	011c      	lsls	r4, r3, #4
 800c1d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c1dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c1e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c1e4:	4642      	mov	r2, r8
 800c1e6:	464b      	mov	r3, r9
 800c1e8:	1891      	adds	r1, r2, r2
 800c1ea:	64b9      	str	r1, [r7, #72]	; 0x48
 800c1ec:	415b      	adcs	r3, r3
 800c1ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c1f4:	4641      	mov	r1, r8
 800c1f6:	eb12 0a01 	adds.w	sl, r2, r1
 800c1fa:	4649      	mov	r1, r9
 800c1fc:	eb43 0b01 	adc.w	fp, r3, r1
 800c200:	f04f 0200 	mov.w	r2, #0
 800c204:	f04f 0300 	mov.w	r3, #0
 800c208:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c20c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c214:	4692      	mov	sl, r2
 800c216:	469b      	mov	fp, r3
 800c218:	4643      	mov	r3, r8
 800c21a:	eb1a 0303 	adds.w	r3, sl, r3
 800c21e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c222:	464b      	mov	r3, r9
 800c224:	eb4b 0303 	adc.w	r3, fp, r3
 800c228:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c238:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c23c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c240:	460b      	mov	r3, r1
 800c242:	18db      	adds	r3, r3, r3
 800c244:	643b      	str	r3, [r7, #64]	; 0x40
 800c246:	4613      	mov	r3, r2
 800c248:	eb42 0303 	adc.w	r3, r2, r3
 800c24c:	647b      	str	r3, [r7, #68]	; 0x44
 800c24e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c252:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c256:	f7f3 ffbf 	bl	80001d8 <__aeabi_uldivmod>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	4611      	mov	r1, r2
 800c260:	4b3b      	ldr	r3, [pc, #236]	; (800c350 <UART_SetConfig+0x2d4>)
 800c262:	fba3 2301 	umull	r2, r3, r3, r1
 800c266:	095b      	lsrs	r3, r3, #5
 800c268:	2264      	movs	r2, #100	; 0x64
 800c26a:	fb02 f303 	mul.w	r3, r2, r3
 800c26e:	1acb      	subs	r3, r1, r3
 800c270:	00db      	lsls	r3, r3, #3
 800c272:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c276:	4b36      	ldr	r3, [pc, #216]	; (800c350 <UART_SetConfig+0x2d4>)
 800c278:	fba3 2302 	umull	r2, r3, r3, r2
 800c27c:	095b      	lsrs	r3, r3, #5
 800c27e:	005b      	lsls	r3, r3, #1
 800c280:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c284:	441c      	add	r4, r3
 800c286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c28a:	2200      	movs	r2, #0
 800c28c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c290:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c294:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c298:	4642      	mov	r2, r8
 800c29a:	464b      	mov	r3, r9
 800c29c:	1891      	adds	r1, r2, r2
 800c29e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c2a0:	415b      	adcs	r3, r3
 800c2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c2a8:	4641      	mov	r1, r8
 800c2aa:	1851      	adds	r1, r2, r1
 800c2ac:	6339      	str	r1, [r7, #48]	; 0x30
 800c2ae:	4649      	mov	r1, r9
 800c2b0:	414b      	adcs	r3, r1
 800c2b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c2b4:	f04f 0200 	mov.w	r2, #0
 800c2b8:	f04f 0300 	mov.w	r3, #0
 800c2bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c2c0:	4659      	mov	r1, fp
 800c2c2:	00cb      	lsls	r3, r1, #3
 800c2c4:	4651      	mov	r1, sl
 800c2c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2ca:	4651      	mov	r1, sl
 800c2cc:	00ca      	lsls	r2, r1, #3
 800c2ce:	4610      	mov	r0, r2
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	4642      	mov	r2, r8
 800c2d6:	189b      	adds	r3, r3, r2
 800c2d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2dc:	464b      	mov	r3, r9
 800c2de:	460a      	mov	r2, r1
 800c2e0:	eb42 0303 	adc.w	r3, r2, r3
 800c2e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c2f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c2f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	18db      	adds	r3, r3, r3
 800c300:	62bb      	str	r3, [r7, #40]	; 0x28
 800c302:	4613      	mov	r3, r2
 800c304:	eb42 0303 	adc.w	r3, r2, r3
 800c308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c30a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c30e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c312:	f7f3 ff61 	bl	80001d8 <__aeabi_uldivmod>
 800c316:	4602      	mov	r2, r0
 800c318:	460b      	mov	r3, r1
 800c31a:	4b0d      	ldr	r3, [pc, #52]	; (800c350 <UART_SetConfig+0x2d4>)
 800c31c:	fba3 1302 	umull	r1, r3, r3, r2
 800c320:	095b      	lsrs	r3, r3, #5
 800c322:	2164      	movs	r1, #100	; 0x64
 800c324:	fb01 f303 	mul.w	r3, r1, r3
 800c328:	1ad3      	subs	r3, r2, r3
 800c32a:	00db      	lsls	r3, r3, #3
 800c32c:	3332      	adds	r3, #50	; 0x32
 800c32e:	4a08      	ldr	r2, [pc, #32]	; (800c350 <UART_SetConfig+0x2d4>)
 800c330:	fba2 2303 	umull	r2, r3, r2, r3
 800c334:	095b      	lsrs	r3, r3, #5
 800c336:	f003 0207 	and.w	r2, r3, #7
 800c33a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4422      	add	r2, r4
 800c342:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c344:	e106      	b.n	800c554 <UART_SetConfig+0x4d8>
 800c346:	bf00      	nop
 800c348:	40011000 	.word	0x40011000
 800c34c:	40011400 	.word	0x40011400
 800c350:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c358:	2200      	movs	r2, #0
 800c35a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c35e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c362:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c366:	4642      	mov	r2, r8
 800c368:	464b      	mov	r3, r9
 800c36a:	1891      	adds	r1, r2, r2
 800c36c:	6239      	str	r1, [r7, #32]
 800c36e:	415b      	adcs	r3, r3
 800c370:	627b      	str	r3, [r7, #36]	; 0x24
 800c372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c376:	4641      	mov	r1, r8
 800c378:	1854      	adds	r4, r2, r1
 800c37a:	4649      	mov	r1, r9
 800c37c:	eb43 0501 	adc.w	r5, r3, r1
 800c380:	f04f 0200 	mov.w	r2, #0
 800c384:	f04f 0300 	mov.w	r3, #0
 800c388:	00eb      	lsls	r3, r5, #3
 800c38a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c38e:	00e2      	lsls	r2, r4, #3
 800c390:	4614      	mov	r4, r2
 800c392:	461d      	mov	r5, r3
 800c394:	4643      	mov	r3, r8
 800c396:	18e3      	adds	r3, r4, r3
 800c398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c39c:	464b      	mov	r3, r9
 800c39e:	eb45 0303 	adc.w	r3, r5, r3
 800c3a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c3a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c3b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c3b6:	f04f 0200 	mov.w	r2, #0
 800c3ba:	f04f 0300 	mov.w	r3, #0
 800c3be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c3c2:	4629      	mov	r1, r5
 800c3c4:	008b      	lsls	r3, r1, #2
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	008a      	lsls	r2, r1, #2
 800c3d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c3d4:	f7f3 ff00 	bl	80001d8 <__aeabi_uldivmod>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	460b      	mov	r3, r1
 800c3dc:	4b60      	ldr	r3, [pc, #384]	; (800c560 <UART_SetConfig+0x4e4>)
 800c3de:	fba3 2302 	umull	r2, r3, r3, r2
 800c3e2:	095b      	lsrs	r3, r3, #5
 800c3e4:	011c      	lsls	r4, r3, #4
 800c3e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c3f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c3f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c3f8:	4642      	mov	r2, r8
 800c3fa:	464b      	mov	r3, r9
 800c3fc:	1891      	adds	r1, r2, r2
 800c3fe:	61b9      	str	r1, [r7, #24]
 800c400:	415b      	adcs	r3, r3
 800c402:	61fb      	str	r3, [r7, #28]
 800c404:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c408:	4641      	mov	r1, r8
 800c40a:	1851      	adds	r1, r2, r1
 800c40c:	6139      	str	r1, [r7, #16]
 800c40e:	4649      	mov	r1, r9
 800c410:	414b      	adcs	r3, r1
 800c412:	617b      	str	r3, [r7, #20]
 800c414:	f04f 0200 	mov.w	r2, #0
 800c418:	f04f 0300 	mov.w	r3, #0
 800c41c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c420:	4659      	mov	r1, fp
 800c422:	00cb      	lsls	r3, r1, #3
 800c424:	4651      	mov	r1, sl
 800c426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c42a:	4651      	mov	r1, sl
 800c42c:	00ca      	lsls	r2, r1, #3
 800c42e:	4610      	mov	r0, r2
 800c430:	4619      	mov	r1, r3
 800c432:	4603      	mov	r3, r0
 800c434:	4642      	mov	r2, r8
 800c436:	189b      	adds	r3, r3, r2
 800c438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c43c:	464b      	mov	r3, r9
 800c43e:	460a      	mov	r2, r1
 800c440:	eb42 0303 	adc.w	r3, r2, r3
 800c444:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	67bb      	str	r3, [r7, #120]	; 0x78
 800c452:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c454:	f04f 0200 	mov.w	r2, #0
 800c458:	f04f 0300 	mov.w	r3, #0
 800c45c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c460:	4649      	mov	r1, r9
 800c462:	008b      	lsls	r3, r1, #2
 800c464:	4641      	mov	r1, r8
 800c466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c46a:	4641      	mov	r1, r8
 800c46c:	008a      	lsls	r2, r1, #2
 800c46e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c472:	f7f3 feb1 	bl	80001d8 <__aeabi_uldivmod>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	4611      	mov	r1, r2
 800c47c:	4b38      	ldr	r3, [pc, #224]	; (800c560 <UART_SetConfig+0x4e4>)
 800c47e:	fba3 2301 	umull	r2, r3, r3, r1
 800c482:	095b      	lsrs	r3, r3, #5
 800c484:	2264      	movs	r2, #100	; 0x64
 800c486:	fb02 f303 	mul.w	r3, r2, r3
 800c48a:	1acb      	subs	r3, r1, r3
 800c48c:	011b      	lsls	r3, r3, #4
 800c48e:	3332      	adds	r3, #50	; 0x32
 800c490:	4a33      	ldr	r2, [pc, #204]	; (800c560 <UART_SetConfig+0x4e4>)
 800c492:	fba2 2303 	umull	r2, r3, r2, r3
 800c496:	095b      	lsrs	r3, r3, #5
 800c498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c49c:	441c      	add	r4, r3
 800c49e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	673b      	str	r3, [r7, #112]	; 0x70
 800c4a6:	677a      	str	r2, [r7, #116]	; 0x74
 800c4a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c4ac:	4642      	mov	r2, r8
 800c4ae:	464b      	mov	r3, r9
 800c4b0:	1891      	adds	r1, r2, r2
 800c4b2:	60b9      	str	r1, [r7, #8]
 800c4b4:	415b      	adcs	r3, r3
 800c4b6:	60fb      	str	r3, [r7, #12]
 800c4b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c4bc:	4641      	mov	r1, r8
 800c4be:	1851      	adds	r1, r2, r1
 800c4c0:	6039      	str	r1, [r7, #0]
 800c4c2:	4649      	mov	r1, r9
 800c4c4:	414b      	adcs	r3, r1
 800c4c6:	607b      	str	r3, [r7, #4]
 800c4c8:	f04f 0200 	mov.w	r2, #0
 800c4cc:	f04f 0300 	mov.w	r3, #0
 800c4d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c4d4:	4659      	mov	r1, fp
 800c4d6:	00cb      	lsls	r3, r1, #3
 800c4d8:	4651      	mov	r1, sl
 800c4da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4de:	4651      	mov	r1, sl
 800c4e0:	00ca      	lsls	r2, r1, #3
 800c4e2:	4610      	mov	r0, r2
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	4642      	mov	r2, r8
 800c4ea:	189b      	adds	r3, r3, r2
 800c4ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4ee:	464b      	mov	r3, r9
 800c4f0:	460a      	mov	r2, r1
 800c4f2:	eb42 0303 	adc.w	r3, r2, r3
 800c4f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	663b      	str	r3, [r7, #96]	; 0x60
 800c502:	667a      	str	r2, [r7, #100]	; 0x64
 800c504:	f04f 0200 	mov.w	r2, #0
 800c508:	f04f 0300 	mov.w	r3, #0
 800c50c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c510:	4649      	mov	r1, r9
 800c512:	008b      	lsls	r3, r1, #2
 800c514:	4641      	mov	r1, r8
 800c516:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c51a:	4641      	mov	r1, r8
 800c51c:	008a      	lsls	r2, r1, #2
 800c51e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c522:	f7f3 fe59 	bl	80001d8 <__aeabi_uldivmod>
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	4b0d      	ldr	r3, [pc, #52]	; (800c560 <UART_SetConfig+0x4e4>)
 800c52c:	fba3 1302 	umull	r1, r3, r3, r2
 800c530:	095b      	lsrs	r3, r3, #5
 800c532:	2164      	movs	r1, #100	; 0x64
 800c534:	fb01 f303 	mul.w	r3, r1, r3
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	011b      	lsls	r3, r3, #4
 800c53c:	3332      	adds	r3, #50	; 0x32
 800c53e:	4a08      	ldr	r2, [pc, #32]	; (800c560 <UART_SetConfig+0x4e4>)
 800c540:	fba2 2303 	umull	r2, r3, r2, r3
 800c544:	095b      	lsrs	r3, r3, #5
 800c546:	f003 020f 	and.w	r2, r3, #15
 800c54a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4422      	add	r2, r4
 800c552:	609a      	str	r2, [r3, #8]
}
 800c554:	bf00      	nop
 800c556:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c55a:	46bd      	mov	sp, r7
 800c55c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c560:	51eb851f 	.word	0x51eb851f

0800c564 <calloc>:
 800c564:	4b02      	ldr	r3, [pc, #8]	; (800c570 <calloc+0xc>)
 800c566:	460a      	mov	r2, r1
 800c568:	4601      	mov	r1, r0
 800c56a:	6818      	ldr	r0, [r3, #0]
 800c56c:	f000 b802 	b.w	800c574 <_calloc_r>
 800c570:	200000a8 	.word	0x200000a8

0800c574 <_calloc_r>:
 800c574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c576:	fba1 2402 	umull	r2, r4, r1, r2
 800c57a:	b94c      	cbnz	r4, 800c590 <_calloc_r+0x1c>
 800c57c:	4611      	mov	r1, r2
 800c57e:	9201      	str	r2, [sp, #4]
 800c580:	f000 f836 	bl	800c5f0 <_malloc_r>
 800c584:	9a01      	ldr	r2, [sp, #4]
 800c586:	4605      	mov	r5, r0
 800c588:	b930      	cbnz	r0, 800c598 <_calloc_r+0x24>
 800c58a:	4628      	mov	r0, r5
 800c58c:	b003      	add	sp, #12
 800c58e:	bd30      	pop	{r4, r5, pc}
 800c590:	220c      	movs	r2, #12
 800c592:	6002      	str	r2, [r0, #0]
 800c594:	2500      	movs	r5, #0
 800c596:	e7f8      	b.n	800c58a <_calloc_r+0x16>
 800c598:	4621      	mov	r1, r4
 800c59a:	f000 fb59 	bl	800cc50 <memset>
 800c59e:	e7f4      	b.n	800c58a <_calloc_r+0x16>

0800c5a0 <free>:
 800c5a0:	4b02      	ldr	r3, [pc, #8]	; (800c5ac <free+0xc>)
 800c5a2:	4601      	mov	r1, r0
 800c5a4:	6818      	ldr	r0, [r3, #0]
 800c5a6:	f000 bbed 	b.w	800cd84 <_free_r>
 800c5aa:	bf00      	nop
 800c5ac:	200000a8 	.word	0x200000a8

0800c5b0 <sbrk_aligned>:
 800c5b0:	b570      	push	{r4, r5, r6, lr}
 800c5b2:	4e0e      	ldr	r6, [pc, #56]	; (800c5ec <sbrk_aligned+0x3c>)
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	6831      	ldr	r1, [r6, #0]
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	b911      	cbnz	r1, 800c5c2 <sbrk_aligned+0x12>
 800c5bc:	f000 fb84 	bl	800ccc8 <_sbrk_r>
 800c5c0:	6030      	str	r0, [r6, #0]
 800c5c2:	4621      	mov	r1, r4
 800c5c4:	4628      	mov	r0, r5
 800c5c6:	f000 fb7f 	bl	800ccc8 <_sbrk_r>
 800c5ca:	1c43      	adds	r3, r0, #1
 800c5cc:	d00a      	beq.n	800c5e4 <sbrk_aligned+0x34>
 800c5ce:	1cc4      	adds	r4, r0, #3
 800c5d0:	f024 0403 	bic.w	r4, r4, #3
 800c5d4:	42a0      	cmp	r0, r4
 800c5d6:	d007      	beq.n	800c5e8 <sbrk_aligned+0x38>
 800c5d8:	1a21      	subs	r1, r4, r0
 800c5da:	4628      	mov	r0, r5
 800c5dc:	f000 fb74 	bl	800ccc8 <_sbrk_r>
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	d101      	bne.n	800c5e8 <sbrk_aligned+0x38>
 800c5e4:	f04f 34ff 	mov.w	r4, #4294967295
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	bd70      	pop	{r4, r5, r6, pc}
 800c5ec:	2000239c 	.word	0x2000239c

0800c5f0 <_malloc_r>:
 800c5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5f4:	1ccd      	adds	r5, r1, #3
 800c5f6:	f025 0503 	bic.w	r5, r5, #3
 800c5fa:	3508      	adds	r5, #8
 800c5fc:	2d0c      	cmp	r5, #12
 800c5fe:	bf38      	it	cc
 800c600:	250c      	movcc	r5, #12
 800c602:	2d00      	cmp	r5, #0
 800c604:	4607      	mov	r7, r0
 800c606:	db01      	blt.n	800c60c <_malloc_r+0x1c>
 800c608:	42a9      	cmp	r1, r5
 800c60a:	d905      	bls.n	800c618 <_malloc_r+0x28>
 800c60c:	230c      	movs	r3, #12
 800c60e:	603b      	str	r3, [r7, #0]
 800c610:	2600      	movs	r6, #0
 800c612:	4630      	mov	r0, r6
 800c614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c618:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c6ec <_malloc_r+0xfc>
 800c61c:	f000 f868 	bl	800c6f0 <__malloc_lock>
 800c620:	f8d8 3000 	ldr.w	r3, [r8]
 800c624:	461c      	mov	r4, r3
 800c626:	bb5c      	cbnz	r4, 800c680 <_malloc_r+0x90>
 800c628:	4629      	mov	r1, r5
 800c62a:	4638      	mov	r0, r7
 800c62c:	f7ff ffc0 	bl	800c5b0 <sbrk_aligned>
 800c630:	1c43      	adds	r3, r0, #1
 800c632:	4604      	mov	r4, r0
 800c634:	d155      	bne.n	800c6e2 <_malloc_r+0xf2>
 800c636:	f8d8 4000 	ldr.w	r4, [r8]
 800c63a:	4626      	mov	r6, r4
 800c63c:	2e00      	cmp	r6, #0
 800c63e:	d145      	bne.n	800c6cc <_malloc_r+0xdc>
 800c640:	2c00      	cmp	r4, #0
 800c642:	d048      	beq.n	800c6d6 <_malloc_r+0xe6>
 800c644:	6823      	ldr	r3, [r4, #0]
 800c646:	4631      	mov	r1, r6
 800c648:	4638      	mov	r0, r7
 800c64a:	eb04 0903 	add.w	r9, r4, r3
 800c64e:	f000 fb3b 	bl	800ccc8 <_sbrk_r>
 800c652:	4581      	cmp	r9, r0
 800c654:	d13f      	bne.n	800c6d6 <_malloc_r+0xe6>
 800c656:	6821      	ldr	r1, [r4, #0]
 800c658:	1a6d      	subs	r5, r5, r1
 800c65a:	4629      	mov	r1, r5
 800c65c:	4638      	mov	r0, r7
 800c65e:	f7ff ffa7 	bl	800c5b0 <sbrk_aligned>
 800c662:	3001      	adds	r0, #1
 800c664:	d037      	beq.n	800c6d6 <_malloc_r+0xe6>
 800c666:	6823      	ldr	r3, [r4, #0]
 800c668:	442b      	add	r3, r5
 800c66a:	6023      	str	r3, [r4, #0]
 800c66c:	f8d8 3000 	ldr.w	r3, [r8]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d038      	beq.n	800c6e6 <_malloc_r+0xf6>
 800c674:	685a      	ldr	r2, [r3, #4]
 800c676:	42a2      	cmp	r2, r4
 800c678:	d12b      	bne.n	800c6d2 <_malloc_r+0xe2>
 800c67a:	2200      	movs	r2, #0
 800c67c:	605a      	str	r2, [r3, #4]
 800c67e:	e00f      	b.n	800c6a0 <_malloc_r+0xb0>
 800c680:	6822      	ldr	r2, [r4, #0]
 800c682:	1b52      	subs	r2, r2, r5
 800c684:	d41f      	bmi.n	800c6c6 <_malloc_r+0xd6>
 800c686:	2a0b      	cmp	r2, #11
 800c688:	d917      	bls.n	800c6ba <_malloc_r+0xca>
 800c68a:	1961      	adds	r1, r4, r5
 800c68c:	42a3      	cmp	r3, r4
 800c68e:	6025      	str	r5, [r4, #0]
 800c690:	bf18      	it	ne
 800c692:	6059      	strne	r1, [r3, #4]
 800c694:	6863      	ldr	r3, [r4, #4]
 800c696:	bf08      	it	eq
 800c698:	f8c8 1000 	streq.w	r1, [r8]
 800c69c:	5162      	str	r2, [r4, r5]
 800c69e:	604b      	str	r3, [r1, #4]
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	f104 060b 	add.w	r6, r4, #11
 800c6a6:	f000 f829 	bl	800c6fc <__malloc_unlock>
 800c6aa:	f026 0607 	bic.w	r6, r6, #7
 800c6ae:	1d23      	adds	r3, r4, #4
 800c6b0:	1af2      	subs	r2, r6, r3
 800c6b2:	d0ae      	beq.n	800c612 <_malloc_r+0x22>
 800c6b4:	1b9b      	subs	r3, r3, r6
 800c6b6:	50a3      	str	r3, [r4, r2]
 800c6b8:	e7ab      	b.n	800c612 <_malloc_r+0x22>
 800c6ba:	42a3      	cmp	r3, r4
 800c6bc:	6862      	ldr	r2, [r4, #4]
 800c6be:	d1dd      	bne.n	800c67c <_malloc_r+0x8c>
 800c6c0:	f8c8 2000 	str.w	r2, [r8]
 800c6c4:	e7ec      	b.n	800c6a0 <_malloc_r+0xb0>
 800c6c6:	4623      	mov	r3, r4
 800c6c8:	6864      	ldr	r4, [r4, #4]
 800c6ca:	e7ac      	b.n	800c626 <_malloc_r+0x36>
 800c6cc:	4634      	mov	r4, r6
 800c6ce:	6876      	ldr	r6, [r6, #4]
 800c6d0:	e7b4      	b.n	800c63c <_malloc_r+0x4c>
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	e7cc      	b.n	800c670 <_malloc_r+0x80>
 800c6d6:	230c      	movs	r3, #12
 800c6d8:	603b      	str	r3, [r7, #0]
 800c6da:	4638      	mov	r0, r7
 800c6dc:	f000 f80e 	bl	800c6fc <__malloc_unlock>
 800c6e0:	e797      	b.n	800c612 <_malloc_r+0x22>
 800c6e2:	6025      	str	r5, [r4, #0]
 800c6e4:	e7dc      	b.n	800c6a0 <_malloc_r+0xb0>
 800c6e6:	605b      	str	r3, [r3, #4]
 800c6e8:	deff      	udf	#255	; 0xff
 800c6ea:	bf00      	nop
 800c6ec:	20002398 	.word	0x20002398

0800c6f0 <__malloc_lock>:
 800c6f0:	4801      	ldr	r0, [pc, #4]	; (800c6f8 <__malloc_lock+0x8>)
 800c6f2:	f000 bb36 	b.w	800cd62 <__retarget_lock_acquire_recursive>
 800c6f6:	bf00      	nop
 800c6f8:	200024e0 	.word	0x200024e0

0800c6fc <__malloc_unlock>:
 800c6fc:	4801      	ldr	r0, [pc, #4]	; (800c704 <__malloc_unlock+0x8>)
 800c6fe:	f000 bb31 	b.w	800cd64 <__retarget_lock_release_recursive>
 800c702:	bf00      	nop
 800c704:	200024e0 	.word	0x200024e0

0800c708 <__sflush_r>:
 800c708:	898a      	ldrh	r2, [r1, #12]
 800c70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c70e:	4605      	mov	r5, r0
 800c710:	0710      	lsls	r0, r2, #28
 800c712:	460c      	mov	r4, r1
 800c714:	d458      	bmi.n	800c7c8 <__sflush_r+0xc0>
 800c716:	684b      	ldr	r3, [r1, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	dc05      	bgt.n	800c728 <__sflush_r+0x20>
 800c71c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c71e:	2b00      	cmp	r3, #0
 800c720:	dc02      	bgt.n	800c728 <__sflush_r+0x20>
 800c722:	2000      	movs	r0, #0
 800c724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c72a:	2e00      	cmp	r6, #0
 800c72c:	d0f9      	beq.n	800c722 <__sflush_r+0x1a>
 800c72e:	2300      	movs	r3, #0
 800c730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c734:	682f      	ldr	r7, [r5, #0]
 800c736:	6a21      	ldr	r1, [r4, #32]
 800c738:	602b      	str	r3, [r5, #0]
 800c73a:	d032      	beq.n	800c7a2 <__sflush_r+0x9a>
 800c73c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c73e:	89a3      	ldrh	r3, [r4, #12]
 800c740:	075a      	lsls	r2, r3, #29
 800c742:	d505      	bpl.n	800c750 <__sflush_r+0x48>
 800c744:	6863      	ldr	r3, [r4, #4]
 800c746:	1ac0      	subs	r0, r0, r3
 800c748:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c74a:	b10b      	cbz	r3, 800c750 <__sflush_r+0x48>
 800c74c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c74e:	1ac0      	subs	r0, r0, r3
 800c750:	2300      	movs	r3, #0
 800c752:	4602      	mov	r2, r0
 800c754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c756:	6a21      	ldr	r1, [r4, #32]
 800c758:	4628      	mov	r0, r5
 800c75a:	47b0      	blx	r6
 800c75c:	1c43      	adds	r3, r0, #1
 800c75e:	89a3      	ldrh	r3, [r4, #12]
 800c760:	d106      	bne.n	800c770 <__sflush_r+0x68>
 800c762:	6829      	ldr	r1, [r5, #0]
 800c764:	291d      	cmp	r1, #29
 800c766:	d82b      	bhi.n	800c7c0 <__sflush_r+0xb8>
 800c768:	4a29      	ldr	r2, [pc, #164]	; (800c810 <__sflush_r+0x108>)
 800c76a:	410a      	asrs	r2, r1
 800c76c:	07d6      	lsls	r6, r2, #31
 800c76e:	d427      	bmi.n	800c7c0 <__sflush_r+0xb8>
 800c770:	2200      	movs	r2, #0
 800c772:	6062      	str	r2, [r4, #4]
 800c774:	04d9      	lsls	r1, r3, #19
 800c776:	6922      	ldr	r2, [r4, #16]
 800c778:	6022      	str	r2, [r4, #0]
 800c77a:	d504      	bpl.n	800c786 <__sflush_r+0x7e>
 800c77c:	1c42      	adds	r2, r0, #1
 800c77e:	d101      	bne.n	800c784 <__sflush_r+0x7c>
 800c780:	682b      	ldr	r3, [r5, #0]
 800c782:	b903      	cbnz	r3, 800c786 <__sflush_r+0x7e>
 800c784:	6560      	str	r0, [r4, #84]	; 0x54
 800c786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c788:	602f      	str	r7, [r5, #0]
 800c78a:	2900      	cmp	r1, #0
 800c78c:	d0c9      	beq.n	800c722 <__sflush_r+0x1a>
 800c78e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c792:	4299      	cmp	r1, r3
 800c794:	d002      	beq.n	800c79c <__sflush_r+0x94>
 800c796:	4628      	mov	r0, r5
 800c798:	f000 faf4 	bl	800cd84 <_free_r>
 800c79c:	2000      	movs	r0, #0
 800c79e:	6360      	str	r0, [r4, #52]	; 0x34
 800c7a0:	e7c0      	b.n	800c724 <__sflush_r+0x1c>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	47b0      	blx	r6
 800c7a8:	1c41      	adds	r1, r0, #1
 800c7aa:	d1c8      	bne.n	800c73e <__sflush_r+0x36>
 800c7ac:	682b      	ldr	r3, [r5, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d0c5      	beq.n	800c73e <__sflush_r+0x36>
 800c7b2:	2b1d      	cmp	r3, #29
 800c7b4:	d001      	beq.n	800c7ba <__sflush_r+0xb2>
 800c7b6:	2b16      	cmp	r3, #22
 800c7b8:	d101      	bne.n	800c7be <__sflush_r+0xb6>
 800c7ba:	602f      	str	r7, [r5, #0]
 800c7bc:	e7b1      	b.n	800c722 <__sflush_r+0x1a>
 800c7be:	89a3      	ldrh	r3, [r4, #12]
 800c7c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c4:	81a3      	strh	r3, [r4, #12]
 800c7c6:	e7ad      	b.n	800c724 <__sflush_r+0x1c>
 800c7c8:	690f      	ldr	r7, [r1, #16]
 800c7ca:	2f00      	cmp	r7, #0
 800c7cc:	d0a9      	beq.n	800c722 <__sflush_r+0x1a>
 800c7ce:	0793      	lsls	r3, r2, #30
 800c7d0:	680e      	ldr	r6, [r1, #0]
 800c7d2:	bf08      	it	eq
 800c7d4:	694b      	ldreq	r3, [r1, #20]
 800c7d6:	600f      	str	r7, [r1, #0]
 800c7d8:	bf18      	it	ne
 800c7da:	2300      	movne	r3, #0
 800c7dc:	eba6 0807 	sub.w	r8, r6, r7
 800c7e0:	608b      	str	r3, [r1, #8]
 800c7e2:	f1b8 0f00 	cmp.w	r8, #0
 800c7e6:	dd9c      	ble.n	800c722 <__sflush_r+0x1a>
 800c7e8:	6a21      	ldr	r1, [r4, #32]
 800c7ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7ec:	4643      	mov	r3, r8
 800c7ee:	463a      	mov	r2, r7
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	47b0      	blx	r6
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	dc06      	bgt.n	800c806 <__sflush_r+0xfe>
 800c7f8:	89a3      	ldrh	r3, [r4, #12]
 800c7fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7fe:	81a3      	strh	r3, [r4, #12]
 800c800:	f04f 30ff 	mov.w	r0, #4294967295
 800c804:	e78e      	b.n	800c724 <__sflush_r+0x1c>
 800c806:	4407      	add	r7, r0
 800c808:	eba8 0800 	sub.w	r8, r8, r0
 800c80c:	e7e9      	b.n	800c7e2 <__sflush_r+0xda>
 800c80e:	bf00      	nop
 800c810:	dfbffffe 	.word	0xdfbffffe

0800c814 <_fflush_r>:
 800c814:	b538      	push	{r3, r4, r5, lr}
 800c816:	690b      	ldr	r3, [r1, #16]
 800c818:	4605      	mov	r5, r0
 800c81a:	460c      	mov	r4, r1
 800c81c:	b913      	cbnz	r3, 800c824 <_fflush_r+0x10>
 800c81e:	2500      	movs	r5, #0
 800c820:	4628      	mov	r0, r5
 800c822:	bd38      	pop	{r3, r4, r5, pc}
 800c824:	b118      	cbz	r0, 800c82e <_fflush_r+0x1a>
 800c826:	6a03      	ldr	r3, [r0, #32]
 800c828:	b90b      	cbnz	r3, 800c82e <_fflush_r+0x1a>
 800c82a:	f000 f8a7 	bl	800c97c <__sinit>
 800c82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d0f3      	beq.n	800c81e <_fflush_r+0xa>
 800c836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c838:	07d0      	lsls	r0, r2, #31
 800c83a:	d404      	bmi.n	800c846 <_fflush_r+0x32>
 800c83c:	0599      	lsls	r1, r3, #22
 800c83e:	d402      	bmi.n	800c846 <_fflush_r+0x32>
 800c840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c842:	f000 fa8e 	bl	800cd62 <__retarget_lock_acquire_recursive>
 800c846:	4628      	mov	r0, r5
 800c848:	4621      	mov	r1, r4
 800c84a:	f7ff ff5d 	bl	800c708 <__sflush_r>
 800c84e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c850:	07da      	lsls	r2, r3, #31
 800c852:	4605      	mov	r5, r0
 800c854:	d4e4      	bmi.n	800c820 <_fflush_r+0xc>
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	059b      	lsls	r3, r3, #22
 800c85a:	d4e1      	bmi.n	800c820 <_fflush_r+0xc>
 800c85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c85e:	f000 fa81 	bl	800cd64 <__retarget_lock_release_recursive>
 800c862:	e7dd      	b.n	800c820 <_fflush_r+0xc>

0800c864 <std>:
 800c864:	2300      	movs	r3, #0
 800c866:	b510      	push	{r4, lr}
 800c868:	4604      	mov	r4, r0
 800c86a:	e9c0 3300 	strd	r3, r3, [r0]
 800c86e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c872:	6083      	str	r3, [r0, #8]
 800c874:	8181      	strh	r1, [r0, #12]
 800c876:	6643      	str	r3, [r0, #100]	; 0x64
 800c878:	81c2      	strh	r2, [r0, #14]
 800c87a:	6183      	str	r3, [r0, #24]
 800c87c:	4619      	mov	r1, r3
 800c87e:	2208      	movs	r2, #8
 800c880:	305c      	adds	r0, #92	; 0x5c
 800c882:	f000 f9e5 	bl	800cc50 <memset>
 800c886:	4b0d      	ldr	r3, [pc, #52]	; (800c8bc <std+0x58>)
 800c888:	6263      	str	r3, [r4, #36]	; 0x24
 800c88a:	4b0d      	ldr	r3, [pc, #52]	; (800c8c0 <std+0x5c>)
 800c88c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c88e:	4b0d      	ldr	r3, [pc, #52]	; (800c8c4 <std+0x60>)
 800c890:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c892:	4b0d      	ldr	r3, [pc, #52]	; (800c8c8 <std+0x64>)
 800c894:	6323      	str	r3, [r4, #48]	; 0x30
 800c896:	4b0d      	ldr	r3, [pc, #52]	; (800c8cc <std+0x68>)
 800c898:	6224      	str	r4, [r4, #32]
 800c89a:	429c      	cmp	r4, r3
 800c89c:	d006      	beq.n	800c8ac <std+0x48>
 800c89e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c8a2:	4294      	cmp	r4, r2
 800c8a4:	d002      	beq.n	800c8ac <std+0x48>
 800c8a6:	33d0      	adds	r3, #208	; 0xd0
 800c8a8:	429c      	cmp	r4, r3
 800c8aa:	d105      	bne.n	800c8b8 <std+0x54>
 800c8ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8b4:	f000 ba54 	b.w	800cd60 <__retarget_lock_init_recursive>
 800c8b8:	bd10      	pop	{r4, pc}
 800c8ba:	bf00      	nop
 800c8bc:	0800caa1 	.word	0x0800caa1
 800c8c0:	0800cac3 	.word	0x0800cac3
 800c8c4:	0800cafb 	.word	0x0800cafb
 800c8c8:	0800cb1f 	.word	0x0800cb1f
 800c8cc:	200023a0 	.word	0x200023a0

0800c8d0 <stdio_exit_handler>:
 800c8d0:	4a02      	ldr	r2, [pc, #8]	; (800c8dc <stdio_exit_handler+0xc>)
 800c8d2:	4903      	ldr	r1, [pc, #12]	; (800c8e0 <stdio_exit_handler+0x10>)
 800c8d4:	4803      	ldr	r0, [pc, #12]	; (800c8e4 <stdio_exit_handler+0x14>)
 800c8d6:	f000 b869 	b.w	800c9ac <_fwalk_sglue>
 800c8da:	bf00      	nop
 800c8dc:	20000050 	.word	0x20000050
 800c8e0:	0800c815 	.word	0x0800c815
 800c8e4:	2000005c 	.word	0x2000005c

0800c8e8 <cleanup_stdio>:
 800c8e8:	6841      	ldr	r1, [r0, #4]
 800c8ea:	4b0c      	ldr	r3, [pc, #48]	; (800c91c <cleanup_stdio+0x34>)
 800c8ec:	4299      	cmp	r1, r3
 800c8ee:	b510      	push	{r4, lr}
 800c8f0:	4604      	mov	r4, r0
 800c8f2:	d001      	beq.n	800c8f8 <cleanup_stdio+0x10>
 800c8f4:	f7ff ff8e 	bl	800c814 <_fflush_r>
 800c8f8:	68a1      	ldr	r1, [r4, #8]
 800c8fa:	4b09      	ldr	r3, [pc, #36]	; (800c920 <cleanup_stdio+0x38>)
 800c8fc:	4299      	cmp	r1, r3
 800c8fe:	d002      	beq.n	800c906 <cleanup_stdio+0x1e>
 800c900:	4620      	mov	r0, r4
 800c902:	f7ff ff87 	bl	800c814 <_fflush_r>
 800c906:	68e1      	ldr	r1, [r4, #12]
 800c908:	4b06      	ldr	r3, [pc, #24]	; (800c924 <cleanup_stdio+0x3c>)
 800c90a:	4299      	cmp	r1, r3
 800c90c:	d004      	beq.n	800c918 <cleanup_stdio+0x30>
 800c90e:	4620      	mov	r0, r4
 800c910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c914:	f7ff bf7e 	b.w	800c814 <_fflush_r>
 800c918:	bd10      	pop	{r4, pc}
 800c91a:	bf00      	nop
 800c91c:	200023a0 	.word	0x200023a0
 800c920:	20002408 	.word	0x20002408
 800c924:	20002470 	.word	0x20002470

0800c928 <global_stdio_init.part.0>:
 800c928:	b510      	push	{r4, lr}
 800c92a:	4b0b      	ldr	r3, [pc, #44]	; (800c958 <global_stdio_init.part.0+0x30>)
 800c92c:	4c0b      	ldr	r4, [pc, #44]	; (800c95c <global_stdio_init.part.0+0x34>)
 800c92e:	4a0c      	ldr	r2, [pc, #48]	; (800c960 <global_stdio_init.part.0+0x38>)
 800c930:	601a      	str	r2, [r3, #0]
 800c932:	4620      	mov	r0, r4
 800c934:	2200      	movs	r2, #0
 800c936:	2104      	movs	r1, #4
 800c938:	f7ff ff94 	bl	800c864 <std>
 800c93c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c940:	2201      	movs	r2, #1
 800c942:	2109      	movs	r1, #9
 800c944:	f7ff ff8e 	bl	800c864 <std>
 800c948:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c94c:	2202      	movs	r2, #2
 800c94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c952:	2112      	movs	r1, #18
 800c954:	f7ff bf86 	b.w	800c864 <std>
 800c958:	200024d8 	.word	0x200024d8
 800c95c:	200023a0 	.word	0x200023a0
 800c960:	0800c8d1 	.word	0x0800c8d1

0800c964 <__sfp_lock_acquire>:
 800c964:	4801      	ldr	r0, [pc, #4]	; (800c96c <__sfp_lock_acquire+0x8>)
 800c966:	f000 b9fc 	b.w	800cd62 <__retarget_lock_acquire_recursive>
 800c96a:	bf00      	nop
 800c96c:	200024e1 	.word	0x200024e1

0800c970 <__sfp_lock_release>:
 800c970:	4801      	ldr	r0, [pc, #4]	; (800c978 <__sfp_lock_release+0x8>)
 800c972:	f000 b9f7 	b.w	800cd64 <__retarget_lock_release_recursive>
 800c976:	bf00      	nop
 800c978:	200024e1 	.word	0x200024e1

0800c97c <__sinit>:
 800c97c:	b510      	push	{r4, lr}
 800c97e:	4604      	mov	r4, r0
 800c980:	f7ff fff0 	bl	800c964 <__sfp_lock_acquire>
 800c984:	6a23      	ldr	r3, [r4, #32]
 800c986:	b11b      	cbz	r3, 800c990 <__sinit+0x14>
 800c988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c98c:	f7ff bff0 	b.w	800c970 <__sfp_lock_release>
 800c990:	4b04      	ldr	r3, [pc, #16]	; (800c9a4 <__sinit+0x28>)
 800c992:	6223      	str	r3, [r4, #32]
 800c994:	4b04      	ldr	r3, [pc, #16]	; (800c9a8 <__sinit+0x2c>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1f5      	bne.n	800c988 <__sinit+0xc>
 800c99c:	f7ff ffc4 	bl	800c928 <global_stdio_init.part.0>
 800c9a0:	e7f2      	b.n	800c988 <__sinit+0xc>
 800c9a2:	bf00      	nop
 800c9a4:	0800c8e9 	.word	0x0800c8e9
 800c9a8:	200024d8 	.word	0x200024d8

0800c9ac <_fwalk_sglue>:
 800c9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9b0:	4607      	mov	r7, r0
 800c9b2:	4688      	mov	r8, r1
 800c9b4:	4614      	mov	r4, r2
 800c9b6:	2600      	movs	r6, #0
 800c9b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9bc:	f1b9 0901 	subs.w	r9, r9, #1
 800c9c0:	d505      	bpl.n	800c9ce <_fwalk_sglue+0x22>
 800c9c2:	6824      	ldr	r4, [r4, #0]
 800c9c4:	2c00      	cmp	r4, #0
 800c9c6:	d1f7      	bne.n	800c9b8 <_fwalk_sglue+0xc>
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ce:	89ab      	ldrh	r3, [r5, #12]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d907      	bls.n	800c9e4 <_fwalk_sglue+0x38>
 800c9d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	d003      	beq.n	800c9e4 <_fwalk_sglue+0x38>
 800c9dc:	4629      	mov	r1, r5
 800c9de:	4638      	mov	r0, r7
 800c9e0:	47c0      	blx	r8
 800c9e2:	4306      	orrs	r6, r0
 800c9e4:	3568      	adds	r5, #104	; 0x68
 800c9e6:	e7e9      	b.n	800c9bc <_fwalk_sglue+0x10>

0800c9e8 <_puts_r>:
 800c9e8:	6a03      	ldr	r3, [r0, #32]
 800c9ea:	b570      	push	{r4, r5, r6, lr}
 800c9ec:	6884      	ldr	r4, [r0, #8]
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	460e      	mov	r6, r1
 800c9f2:	b90b      	cbnz	r3, 800c9f8 <_puts_r+0x10>
 800c9f4:	f7ff ffc2 	bl	800c97c <__sinit>
 800c9f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9fa:	07db      	lsls	r3, r3, #31
 800c9fc:	d405      	bmi.n	800ca0a <_puts_r+0x22>
 800c9fe:	89a3      	ldrh	r3, [r4, #12]
 800ca00:	0598      	lsls	r0, r3, #22
 800ca02:	d402      	bmi.n	800ca0a <_puts_r+0x22>
 800ca04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca06:	f000 f9ac 	bl	800cd62 <__retarget_lock_acquire_recursive>
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	0719      	lsls	r1, r3, #28
 800ca0e:	d513      	bpl.n	800ca38 <_puts_r+0x50>
 800ca10:	6923      	ldr	r3, [r4, #16]
 800ca12:	b18b      	cbz	r3, 800ca38 <_puts_r+0x50>
 800ca14:	3e01      	subs	r6, #1
 800ca16:	68a3      	ldr	r3, [r4, #8]
 800ca18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	60a3      	str	r3, [r4, #8]
 800ca20:	b9e9      	cbnz	r1, 800ca5e <_puts_r+0x76>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	da2e      	bge.n	800ca84 <_puts_r+0x9c>
 800ca26:	4622      	mov	r2, r4
 800ca28:	210a      	movs	r1, #10
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	f000 f87b 	bl	800cb26 <__swbuf_r>
 800ca30:	3001      	adds	r0, #1
 800ca32:	d007      	beq.n	800ca44 <_puts_r+0x5c>
 800ca34:	250a      	movs	r5, #10
 800ca36:	e007      	b.n	800ca48 <_puts_r+0x60>
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	f000 f8b0 	bl	800cba0 <__swsetup_r>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d0e7      	beq.n	800ca14 <_puts_r+0x2c>
 800ca44:	f04f 35ff 	mov.w	r5, #4294967295
 800ca48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca4a:	07da      	lsls	r2, r3, #31
 800ca4c:	d405      	bmi.n	800ca5a <_puts_r+0x72>
 800ca4e:	89a3      	ldrh	r3, [r4, #12]
 800ca50:	059b      	lsls	r3, r3, #22
 800ca52:	d402      	bmi.n	800ca5a <_puts_r+0x72>
 800ca54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca56:	f000 f985 	bl	800cd64 <__retarget_lock_release_recursive>
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	bd70      	pop	{r4, r5, r6, pc}
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	da04      	bge.n	800ca6c <_puts_r+0x84>
 800ca62:	69a2      	ldr	r2, [r4, #24]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	dc06      	bgt.n	800ca76 <_puts_r+0x8e>
 800ca68:	290a      	cmp	r1, #10
 800ca6a:	d004      	beq.n	800ca76 <_puts_r+0x8e>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	6022      	str	r2, [r4, #0]
 800ca72:	7019      	strb	r1, [r3, #0]
 800ca74:	e7cf      	b.n	800ca16 <_puts_r+0x2e>
 800ca76:	4622      	mov	r2, r4
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f000 f854 	bl	800cb26 <__swbuf_r>
 800ca7e:	3001      	adds	r0, #1
 800ca80:	d1c9      	bne.n	800ca16 <_puts_r+0x2e>
 800ca82:	e7df      	b.n	800ca44 <_puts_r+0x5c>
 800ca84:	6823      	ldr	r3, [r4, #0]
 800ca86:	250a      	movs	r5, #10
 800ca88:	1c5a      	adds	r2, r3, #1
 800ca8a:	6022      	str	r2, [r4, #0]
 800ca8c:	701d      	strb	r5, [r3, #0]
 800ca8e:	e7db      	b.n	800ca48 <_puts_r+0x60>

0800ca90 <puts>:
 800ca90:	4b02      	ldr	r3, [pc, #8]	; (800ca9c <puts+0xc>)
 800ca92:	4601      	mov	r1, r0
 800ca94:	6818      	ldr	r0, [r3, #0]
 800ca96:	f7ff bfa7 	b.w	800c9e8 <_puts_r>
 800ca9a:	bf00      	nop
 800ca9c:	200000a8 	.word	0x200000a8

0800caa0 <__sread>:
 800caa0:	b510      	push	{r4, lr}
 800caa2:	460c      	mov	r4, r1
 800caa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caa8:	f000 f8fc 	bl	800cca4 <_read_r>
 800caac:	2800      	cmp	r0, #0
 800caae:	bfab      	itete	ge
 800cab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cab2:	89a3      	ldrhlt	r3, [r4, #12]
 800cab4:	181b      	addge	r3, r3, r0
 800cab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800caba:	bfac      	ite	ge
 800cabc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cabe:	81a3      	strhlt	r3, [r4, #12]
 800cac0:	bd10      	pop	{r4, pc}

0800cac2 <__swrite>:
 800cac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac6:	461f      	mov	r7, r3
 800cac8:	898b      	ldrh	r3, [r1, #12]
 800caca:	05db      	lsls	r3, r3, #23
 800cacc:	4605      	mov	r5, r0
 800cace:	460c      	mov	r4, r1
 800cad0:	4616      	mov	r6, r2
 800cad2:	d505      	bpl.n	800cae0 <__swrite+0x1e>
 800cad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cad8:	2302      	movs	r3, #2
 800cada:	2200      	movs	r2, #0
 800cadc:	f000 f8d0 	bl	800cc80 <_lseek_r>
 800cae0:	89a3      	ldrh	r3, [r4, #12]
 800cae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800caea:	81a3      	strh	r3, [r4, #12]
 800caec:	4632      	mov	r2, r6
 800caee:	463b      	mov	r3, r7
 800caf0:	4628      	mov	r0, r5
 800caf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caf6:	f000 b8f7 	b.w	800cce8 <_write_r>

0800cafa <__sseek>:
 800cafa:	b510      	push	{r4, lr}
 800cafc:	460c      	mov	r4, r1
 800cafe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb02:	f000 f8bd 	bl	800cc80 <_lseek_r>
 800cb06:	1c43      	adds	r3, r0, #1
 800cb08:	89a3      	ldrh	r3, [r4, #12]
 800cb0a:	bf15      	itete	ne
 800cb0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb16:	81a3      	strheq	r3, [r4, #12]
 800cb18:	bf18      	it	ne
 800cb1a:	81a3      	strhne	r3, [r4, #12]
 800cb1c:	bd10      	pop	{r4, pc}

0800cb1e <__sclose>:
 800cb1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb22:	f000 b89d 	b.w	800cc60 <_close_r>

0800cb26 <__swbuf_r>:
 800cb26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb28:	460e      	mov	r6, r1
 800cb2a:	4614      	mov	r4, r2
 800cb2c:	4605      	mov	r5, r0
 800cb2e:	b118      	cbz	r0, 800cb38 <__swbuf_r+0x12>
 800cb30:	6a03      	ldr	r3, [r0, #32]
 800cb32:	b90b      	cbnz	r3, 800cb38 <__swbuf_r+0x12>
 800cb34:	f7ff ff22 	bl	800c97c <__sinit>
 800cb38:	69a3      	ldr	r3, [r4, #24]
 800cb3a:	60a3      	str	r3, [r4, #8]
 800cb3c:	89a3      	ldrh	r3, [r4, #12]
 800cb3e:	071a      	lsls	r2, r3, #28
 800cb40:	d525      	bpl.n	800cb8e <__swbuf_r+0x68>
 800cb42:	6923      	ldr	r3, [r4, #16]
 800cb44:	b31b      	cbz	r3, 800cb8e <__swbuf_r+0x68>
 800cb46:	6823      	ldr	r3, [r4, #0]
 800cb48:	6922      	ldr	r2, [r4, #16]
 800cb4a:	1a98      	subs	r0, r3, r2
 800cb4c:	6963      	ldr	r3, [r4, #20]
 800cb4e:	b2f6      	uxtb	r6, r6
 800cb50:	4283      	cmp	r3, r0
 800cb52:	4637      	mov	r7, r6
 800cb54:	dc04      	bgt.n	800cb60 <__swbuf_r+0x3a>
 800cb56:	4621      	mov	r1, r4
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f7ff fe5b 	bl	800c814 <_fflush_r>
 800cb5e:	b9e0      	cbnz	r0, 800cb9a <__swbuf_r+0x74>
 800cb60:	68a3      	ldr	r3, [r4, #8]
 800cb62:	3b01      	subs	r3, #1
 800cb64:	60a3      	str	r3, [r4, #8]
 800cb66:	6823      	ldr	r3, [r4, #0]
 800cb68:	1c5a      	adds	r2, r3, #1
 800cb6a:	6022      	str	r2, [r4, #0]
 800cb6c:	701e      	strb	r6, [r3, #0]
 800cb6e:	6962      	ldr	r2, [r4, #20]
 800cb70:	1c43      	adds	r3, r0, #1
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d004      	beq.n	800cb80 <__swbuf_r+0x5a>
 800cb76:	89a3      	ldrh	r3, [r4, #12]
 800cb78:	07db      	lsls	r3, r3, #31
 800cb7a:	d506      	bpl.n	800cb8a <__swbuf_r+0x64>
 800cb7c:	2e0a      	cmp	r6, #10
 800cb7e:	d104      	bne.n	800cb8a <__swbuf_r+0x64>
 800cb80:	4621      	mov	r1, r4
 800cb82:	4628      	mov	r0, r5
 800cb84:	f7ff fe46 	bl	800c814 <_fflush_r>
 800cb88:	b938      	cbnz	r0, 800cb9a <__swbuf_r+0x74>
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb8e:	4621      	mov	r1, r4
 800cb90:	4628      	mov	r0, r5
 800cb92:	f000 f805 	bl	800cba0 <__swsetup_r>
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d0d5      	beq.n	800cb46 <__swbuf_r+0x20>
 800cb9a:	f04f 37ff 	mov.w	r7, #4294967295
 800cb9e:	e7f4      	b.n	800cb8a <__swbuf_r+0x64>

0800cba0 <__swsetup_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	4b2a      	ldr	r3, [pc, #168]	; (800cc4c <__swsetup_r+0xac>)
 800cba4:	4605      	mov	r5, r0
 800cba6:	6818      	ldr	r0, [r3, #0]
 800cba8:	460c      	mov	r4, r1
 800cbaa:	b118      	cbz	r0, 800cbb4 <__swsetup_r+0x14>
 800cbac:	6a03      	ldr	r3, [r0, #32]
 800cbae:	b90b      	cbnz	r3, 800cbb4 <__swsetup_r+0x14>
 800cbb0:	f7ff fee4 	bl	800c97c <__sinit>
 800cbb4:	89a3      	ldrh	r3, [r4, #12]
 800cbb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbba:	0718      	lsls	r0, r3, #28
 800cbbc:	d422      	bmi.n	800cc04 <__swsetup_r+0x64>
 800cbbe:	06d9      	lsls	r1, r3, #27
 800cbc0:	d407      	bmi.n	800cbd2 <__swsetup_r+0x32>
 800cbc2:	2309      	movs	r3, #9
 800cbc4:	602b      	str	r3, [r5, #0]
 800cbc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbca:	81a3      	strh	r3, [r4, #12]
 800cbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd0:	e034      	b.n	800cc3c <__swsetup_r+0x9c>
 800cbd2:	0758      	lsls	r0, r3, #29
 800cbd4:	d512      	bpl.n	800cbfc <__swsetup_r+0x5c>
 800cbd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbd8:	b141      	cbz	r1, 800cbec <__swsetup_r+0x4c>
 800cbda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbde:	4299      	cmp	r1, r3
 800cbe0:	d002      	beq.n	800cbe8 <__swsetup_r+0x48>
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f000 f8ce 	bl	800cd84 <_free_r>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	6363      	str	r3, [r4, #52]	; 0x34
 800cbec:	89a3      	ldrh	r3, [r4, #12]
 800cbee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbf2:	81a3      	strh	r3, [r4, #12]
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	6063      	str	r3, [r4, #4]
 800cbf8:	6923      	ldr	r3, [r4, #16]
 800cbfa:	6023      	str	r3, [r4, #0]
 800cbfc:	89a3      	ldrh	r3, [r4, #12]
 800cbfe:	f043 0308 	orr.w	r3, r3, #8
 800cc02:	81a3      	strh	r3, [r4, #12]
 800cc04:	6923      	ldr	r3, [r4, #16]
 800cc06:	b94b      	cbnz	r3, 800cc1c <__swsetup_r+0x7c>
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc12:	d003      	beq.n	800cc1c <__swsetup_r+0x7c>
 800cc14:	4621      	mov	r1, r4
 800cc16:	4628      	mov	r0, r5
 800cc18:	f000 f926 	bl	800ce68 <__smakebuf_r>
 800cc1c:	89a0      	ldrh	r0, [r4, #12]
 800cc1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc22:	f010 0301 	ands.w	r3, r0, #1
 800cc26:	d00a      	beq.n	800cc3e <__swsetup_r+0x9e>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	60a3      	str	r3, [r4, #8]
 800cc2c:	6963      	ldr	r3, [r4, #20]
 800cc2e:	425b      	negs	r3, r3
 800cc30:	61a3      	str	r3, [r4, #24]
 800cc32:	6923      	ldr	r3, [r4, #16]
 800cc34:	b943      	cbnz	r3, 800cc48 <__swsetup_r+0xa8>
 800cc36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc3a:	d1c4      	bne.n	800cbc6 <__swsetup_r+0x26>
 800cc3c:	bd38      	pop	{r3, r4, r5, pc}
 800cc3e:	0781      	lsls	r1, r0, #30
 800cc40:	bf58      	it	pl
 800cc42:	6963      	ldrpl	r3, [r4, #20]
 800cc44:	60a3      	str	r3, [r4, #8]
 800cc46:	e7f4      	b.n	800cc32 <__swsetup_r+0x92>
 800cc48:	2000      	movs	r0, #0
 800cc4a:	e7f7      	b.n	800cc3c <__swsetup_r+0x9c>
 800cc4c:	200000a8 	.word	0x200000a8

0800cc50 <memset>:
 800cc50:	4402      	add	r2, r0
 800cc52:	4603      	mov	r3, r0
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d100      	bne.n	800cc5a <memset+0xa>
 800cc58:	4770      	bx	lr
 800cc5a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc5e:	e7f9      	b.n	800cc54 <memset+0x4>

0800cc60 <_close_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	4d06      	ldr	r5, [pc, #24]	; (800cc7c <_close_r+0x1c>)
 800cc64:	2300      	movs	r3, #0
 800cc66:	4604      	mov	r4, r0
 800cc68:	4608      	mov	r0, r1
 800cc6a:	602b      	str	r3, [r5, #0]
 800cc6c:	f7f3 ff41 	bl	8000af2 <_close>
 800cc70:	1c43      	adds	r3, r0, #1
 800cc72:	d102      	bne.n	800cc7a <_close_r+0x1a>
 800cc74:	682b      	ldr	r3, [r5, #0]
 800cc76:	b103      	cbz	r3, 800cc7a <_close_r+0x1a>
 800cc78:	6023      	str	r3, [r4, #0]
 800cc7a:	bd38      	pop	{r3, r4, r5, pc}
 800cc7c:	200024dc 	.word	0x200024dc

0800cc80 <_lseek_r>:
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	4d07      	ldr	r5, [pc, #28]	; (800cca0 <_lseek_r+0x20>)
 800cc84:	4604      	mov	r4, r0
 800cc86:	4608      	mov	r0, r1
 800cc88:	4611      	mov	r1, r2
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	602a      	str	r2, [r5, #0]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	f7f3 ff56 	bl	8000b40 <_lseek>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d102      	bne.n	800cc9e <_lseek_r+0x1e>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	b103      	cbz	r3, 800cc9e <_lseek_r+0x1e>
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	200024dc 	.word	0x200024dc

0800cca4 <_read_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4d07      	ldr	r5, [pc, #28]	; (800ccc4 <_read_r+0x20>)
 800cca8:	4604      	mov	r4, r0
 800ccaa:	4608      	mov	r0, r1
 800ccac:	4611      	mov	r1, r2
 800ccae:	2200      	movs	r2, #0
 800ccb0:	602a      	str	r2, [r5, #0]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	f7f3 ff00 	bl	8000ab8 <_read>
 800ccb8:	1c43      	adds	r3, r0, #1
 800ccba:	d102      	bne.n	800ccc2 <_read_r+0x1e>
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	b103      	cbz	r3, 800ccc2 <_read_r+0x1e>
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	bd38      	pop	{r3, r4, r5, pc}
 800ccc4:	200024dc 	.word	0x200024dc

0800ccc8 <_sbrk_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4d06      	ldr	r5, [pc, #24]	; (800cce4 <_sbrk_r+0x1c>)
 800cccc:	2300      	movs	r3, #0
 800ccce:	4604      	mov	r4, r0
 800ccd0:	4608      	mov	r0, r1
 800ccd2:	602b      	str	r3, [r5, #0]
 800ccd4:	f7f3 ff42 	bl	8000b5c <_sbrk>
 800ccd8:	1c43      	adds	r3, r0, #1
 800ccda:	d102      	bne.n	800cce2 <_sbrk_r+0x1a>
 800ccdc:	682b      	ldr	r3, [r5, #0]
 800ccde:	b103      	cbz	r3, 800cce2 <_sbrk_r+0x1a>
 800cce0:	6023      	str	r3, [r4, #0]
 800cce2:	bd38      	pop	{r3, r4, r5, pc}
 800cce4:	200024dc 	.word	0x200024dc

0800cce8 <_write_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4d07      	ldr	r5, [pc, #28]	; (800cd08 <_write_r+0x20>)
 800ccec:	4604      	mov	r4, r0
 800ccee:	4608      	mov	r0, r1
 800ccf0:	4611      	mov	r1, r2
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	602a      	str	r2, [r5, #0]
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	f7f3 fdda 	bl	80008b0 <_write>
 800ccfc:	1c43      	adds	r3, r0, #1
 800ccfe:	d102      	bne.n	800cd06 <_write_r+0x1e>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	b103      	cbz	r3, 800cd06 <_write_r+0x1e>
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	bd38      	pop	{r3, r4, r5, pc}
 800cd08:	200024dc 	.word	0x200024dc

0800cd0c <__errno>:
 800cd0c:	4b01      	ldr	r3, [pc, #4]	; (800cd14 <__errno+0x8>)
 800cd0e:	6818      	ldr	r0, [r3, #0]
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	200000a8 	.word	0x200000a8

0800cd18 <__libc_init_array>:
 800cd18:	b570      	push	{r4, r5, r6, lr}
 800cd1a:	4d0d      	ldr	r5, [pc, #52]	; (800cd50 <__libc_init_array+0x38>)
 800cd1c:	4c0d      	ldr	r4, [pc, #52]	; (800cd54 <__libc_init_array+0x3c>)
 800cd1e:	1b64      	subs	r4, r4, r5
 800cd20:	10a4      	asrs	r4, r4, #2
 800cd22:	2600      	movs	r6, #0
 800cd24:	42a6      	cmp	r6, r4
 800cd26:	d109      	bne.n	800cd3c <__libc_init_array+0x24>
 800cd28:	4d0b      	ldr	r5, [pc, #44]	; (800cd58 <__libc_init_array+0x40>)
 800cd2a:	4c0c      	ldr	r4, [pc, #48]	; (800cd5c <__libc_init_array+0x44>)
 800cd2c:	f000 f8fa 	bl	800cf24 <_init>
 800cd30:	1b64      	subs	r4, r4, r5
 800cd32:	10a4      	asrs	r4, r4, #2
 800cd34:	2600      	movs	r6, #0
 800cd36:	42a6      	cmp	r6, r4
 800cd38:	d105      	bne.n	800cd46 <__libc_init_array+0x2e>
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}
 800cd3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd40:	4798      	blx	r3
 800cd42:	3601      	adds	r6, #1
 800cd44:	e7ee      	b.n	800cd24 <__libc_init_array+0xc>
 800cd46:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd4a:	4798      	blx	r3
 800cd4c:	3601      	adds	r6, #1
 800cd4e:	e7f2      	b.n	800cd36 <__libc_init_array+0x1e>
 800cd50:	0800f2bc 	.word	0x0800f2bc
 800cd54:	0800f2bc 	.word	0x0800f2bc
 800cd58:	0800f2bc 	.word	0x0800f2bc
 800cd5c:	0800f2c0 	.word	0x0800f2c0

0800cd60 <__retarget_lock_init_recursive>:
 800cd60:	4770      	bx	lr

0800cd62 <__retarget_lock_acquire_recursive>:
 800cd62:	4770      	bx	lr

0800cd64 <__retarget_lock_release_recursive>:
 800cd64:	4770      	bx	lr

0800cd66 <memcpy>:
 800cd66:	440a      	add	r2, r1
 800cd68:	4291      	cmp	r1, r2
 800cd6a:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd6e:	d100      	bne.n	800cd72 <memcpy+0xc>
 800cd70:	4770      	bx	lr
 800cd72:	b510      	push	{r4, lr}
 800cd74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd7c:	4291      	cmp	r1, r2
 800cd7e:	d1f9      	bne.n	800cd74 <memcpy+0xe>
 800cd80:	bd10      	pop	{r4, pc}
	...

0800cd84 <_free_r>:
 800cd84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd86:	2900      	cmp	r1, #0
 800cd88:	d044      	beq.n	800ce14 <_free_r+0x90>
 800cd8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd8e:	9001      	str	r0, [sp, #4]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f1a1 0404 	sub.w	r4, r1, #4
 800cd96:	bfb8      	it	lt
 800cd98:	18e4      	addlt	r4, r4, r3
 800cd9a:	f7ff fca9 	bl	800c6f0 <__malloc_lock>
 800cd9e:	4a1e      	ldr	r2, [pc, #120]	; (800ce18 <_free_r+0x94>)
 800cda0:	9801      	ldr	r0, [sp, #4]
 800cda2:	6813      	ldr	r3, [r2, #0]
 800cda4:	b933      	cbnz	r3, 800cdb4 <_free_r+0x30>
 800cda6:	6063      	str	r3, [r4, #4]
 800cda8:	6014      	str	r4, [r2, #0]
 800cdaa:	b003      	add	sp, #12
 800cdac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdb0:	f7ff bca4 	b.w	800c6fc <__malloc_unlock>
 800cdb4:	42a3      	cmp	r3, r4
 800cdb6:	d908      	bls.n	800cdca <_free_r+0x46>
 800cdb8:	6825      	ldr	r5, [r4, #0]
 800cdba:	1961      	adds	r1, r4, r5
 800cdbc:	428b      	cmp	r3, r1
 800cdbe:	bf01      	itttt	eq
 800cdc0:	6819      	ldreq	r1, [r3, #0]
 800cdc2:	685b      	ldreq	r3, [r3, #4]
 800cdc4:	1949      	addeq	r1, r1, r5
 800cdc6:	6021      	streq	r1, [r4, #0]
 800cdc8:	e7ed      	b.n	800cda6 <_free_r+0x22>
 800cdca:	461a      	mov	r2, r3
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	b10b      	cbz	r3, 800cdd4 <_free_r+0x50>
 800cdd0:	42a3      	cmp	r3, r4
 800cdd2:	d9fa      	bls.n	800cdca <_free_r+0x46>
 800cdd4:	6811      	ldr	r1, [r2, #0]
 800cdd6:	1855      	adds	r5, r2, r1
 800cdd8:	42a5      	cmp	r5, r4
 800cdda:	d10b      	bne.n	800cdf4 <_free_r+0x70>
 800cddc:	6824      	ldr	r4, [r4, #0]
 800cdde:	4421      	add	r1, r4
 800cde0:	1854      	adds	r4, r2, r1
 800cde2:	42a3      	cmp	r3, r4
 800cde4:	6011      	str	r1, [r2, #0]
 800cde6:	d1e0      	bne.n	800cdaa <_free_r+0x26>
 800cde8:	681c      	ldr	r4, [r3, #0]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	6053      	str	r3, [r2, #4]
 800cdee:	440c      	add	r4, r1
 800cdf0:	6014      	str	r4, [r2, #0]
 800cdf2:	e7da      	b.n	800cdaa <_free_r+0x26>
 800cdf4:	d902      	bls.n	800cdfc <_free_r+0x78>
 800cdf6:	230c      	movs	r3, #12
 800cdf8:	6003      	str	r3, [r0, #0]
 800cdfa:	e7d6      	b.n	800cdaa <_free_r+0x26>
 800cdfc:	6825      	ldr	r5, [r4, #0]
 800cdfe:	1961      	adds	r1, r4, r5
 800ce00:	428b      	cmp	r3, r1
 800ce02:	bf04      	itt	eq
 800ce04:	6819      	ldreq	r1, [r3, #0]
 800ce06:	685b      	ldreq	r3, [r3, #4]
 800ce08:	6063      	str	r3, [r4, #4]
 800ce0a:	bf04      	itt	eq
 800ce0c:	1949      	addeq	r1, r1, r5
 800ce0e:	6021      	streq	r1, [r4, #0]
 800ce10:	6054      	str	r4, [r2, #4]
 800ce12:	e7ca      	b.n	800cdaa <_free_r+0x26>
 800ce14:	b003      	add	sp, #12
 800ce16:	bd30      	pop	{r4, r5, pc}
 800ce18:	20002398 	.word	0x20002398

0800ce1c <__swhatbuf_r>:
 800ce1c:	b570      	push	{r4, r5, r6, lr}
 800ce1e:	460c      	mov	r4, r1
 800ce20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce24:	2900      	cmp	r1, #0
 800ce26:	b096      	sub	sp, #88	; 0x58
 800ce28:	4615      	mov	r5, r2
 800ce2a:	461e      	mov	r6, r3
 800ce2c:	da0d      	bge.n	800ce4a <__swhatbuf_r+0x2e>
 800ce2e:	89a3      	ldrh	r3, [r4, #12]
 800ce30:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ce34:	f04f 0100 	mov.w	r1, #0
 800ce38:	bf0c      	ite	eq
 800ce3a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ce3e:	2340      	movne	r3, #64	; 0x40
 800ce40:	2000      	movs	r0, #0
 800ce42:	6031      	str	r1, [r6, #0]
 800ce44:	602b      	str	r3, [r5, #0]
 800ce46:	b016      	add	sp, #88	; 0x58
 800ce48:	bd70      	pop	{r4, r5, r6, pc}
 800ce4a:	466a      	mov	r2, sp
 800ce4c:	f000 f848 	bl	800cee0 <_fstat_r>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	dbec      	blt.n	800ce2e <__swhatbuf_r+0x12>
 800ce54:	9901      	ldr	r1, [sp, #4]
 800ce56:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ce5a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ce5e:	4259      	negs	r1, r3
 800ce60:	4159      	adcs	r1, r3
 800ce62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce66:	e7eb      	b.n	800ce40 <__swhatbuf_r+0x24>

0800ce68 <__smakebuf_r>:
 800ce68:	898b      	ldrh	r3, [r1, #12]
 800ce6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce6c:	079d      	lsls	r5, r3, #30
 800ce6e:	4606      	mov	r6, r0
 800ce70:	460c      	mov	r4, r1
 800ce72:	d507      	bpl.n	800ce84 <__smakebuf_r+0x1c>
 800ce74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	6123      	str	r3, [r4, #16]
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	6163      	str	r3, [r4, #20]
 800ce80:	b002      	add	sp, #8
 800ce82:	bd70      	pop	{r4, r5, r6, pc}
 800ce84:	ab01      	add	r3, sp, #4
 800ce86:	466a      	mov	r2, sp
 800ce88:	f7ff ffc8 	bl	800ce1c <__swhatbuf_r>
 800ce8c:	9900      	ldr	r1, [sp, #0]
 800ce8e:	4605      	mov	r5, r0
 800ce90:	4630      	mov	r0, r6
 800ce92:	f7ff fbad 	bl	800c5f0 <_malloc_r>
 800ce96:	b948      	cbnz	r0, 800ceac <__smakebuf_r+0x44>
 800ce98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce9c:	059a      	lsls	r2, r3, #22
 800ce9e:	d4ef      	bmi.n	800ce80 <__smakebuf_r+0x18>
 800cea0:	f023 0303 	bic.w	r3, r3, #3
 800cea4:	f043 0302 	orr.w	r3, r3, #2
 800cea8:	81a3      	strh	r3, [r4, #12]
 800ceaa:	e7e3      	b.n	800ce74 <__smakebuf_r+0xc>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	6020      	str	r0, [r4, #0]
 800ceb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceb4:	81a3      	strh	r3, [r4, #12]
 800ceb6:	9b00      	ldr	r3, [sp, #0]
 800ceb8:	6163      	str	r3, [r4, #20]
 800ceba:	9b01      	ldr	r3, [sp, #4]
 800cebc:	6120      	str	r0, [r4, #16]
 800cebe:	b15b      	cbz	r3, 800ced8 <__smakebuf_r+0x70>
 800cec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cec4:	4630      	mov	r0, r6
 800cec6:	f000 f81d 	bl	800cf04 <_isatty_r>
 800ceca:	b128      	cbz	r0, 800ced8 <__smakebuf_r+0x70>
 800cecc:	89a3      	ldrh	r3, [r4, #12]
 800cece:	f023 0303 	bic.w	r3, r3, #3
 800ced2:	f043 0301 	orr.w	r3, r3, #1
 800ced6:	81a3      	strh	r3, [r4, #12]
 800ced8:	89a3      	ldrh	r3, [r4, #12]
 800ceda:	431d      	orrs	r5, r3
 800cedc:	81a5      	strh	r5, [r4, #12]
 800cede:	e7cf      	b.n	800ce80 <__smakebuf_r+0x18>

0800cee0 <_fstat_r>:
 800cee0:	b538      	push	{r3, r4, r5, lr}
 800cee2:	4d07      	ldr	r5, [pc, #28]	; (800cf00 <_fstat_r+0x20>)
 800cee4:	2300      	movs	r3, #0
 800cee6:	4604      	mov	r4, r0
 800cee8:	4608      	mov	r0, r1
 800ceea:	4611      	mov	r1, r2
 800ceec:	602b      	str	r3, [r5, #0]
 800ceee:	f7f3 fe0c 	bl	8000b0a <_fstat>
 800cef2:	1c43      	adds	r3, r0, #1
 800cef4:	d102      	bne.n	800cefc <_fstat_r+0x1c>
 800cef6:	682b      	ldr	r3, [r5, #0]
 800cef8:	b103      	cbz	r3, 800cefc <_fstat_r+0x1c>
 800cefa:	6023      	str	r3, [r4, #0]
 800cefc:	bd38      	pop	{r3, r4, r5, pc}
 800cefe:	bf00      	nop
 800cf00:	200024dc 	.word	0x200024dc

0800cf04 <_isatty_r>:
 800cf04:	b538      	push	{r3, r4, r5, lr}
 800cf06:	4d06      	ldr	r5, [pc, #24]	; (800cf20 <_isatty_r+0x1c>)
 800cf08:	2300      	movs	r3, #0
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	4608      	mov	r0, r1
 800cf0e:	602b      	str	r3, [r5, #0]
 800cf10:	f7f3 fe0b 	bl	8000b2a <_isatty>
 800cf14:	1c43      	adds	r3, r0, #1
 800cf16:	d102      	bne.n	800cf1e <_isatty_r+0x1a>
 800cf18:	682b      	ldr	r3, [r5, #0]
 800cf1a:	b103      	cbz	r3, 800cf1e <_isatty_r+0x1a>
 800cf1c:	6023      	str	r3, [r4, #0]
 800cf1e:	bd38      	pop	{r3, r4, r5, pc}
 800cf20:	200024dc 	.word	0x200024dc

0800cf24 <_init>:
 800cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf26:	bf00      	nop
 800cf28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2a:	bc08      	pop	{r3}
 800cf2c:	469e      	mov	lr, r3
 800cf2e:	4770      	bx	lr

0800cf30 <_fini>:
 800cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf32:	bf00      	nop
 800cf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf36:	bc08      	pop	{r3}
 800cf38:	469e      	mov	lr, r3
 800cf3a:	4770      	bx	lr
