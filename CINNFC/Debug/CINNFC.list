
CINNFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d9a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000283c  0801db48  0801db48  0002db48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020384  08020384  000400ac  2**0
                  CONTENTS
  4 .ARM          00000008  08020384  08020384  00030384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802038c  0802038c  000400ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802038c  0802038c  0003038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020390  08020390  00030390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08020394  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024a0  200000ac  08020440  000400ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000254c  08020440  0004254c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000400dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000265a4  00000000  00000000  0004011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065f5  00000000  00000000  000666c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  0006ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001569  00000000  00000000  0006e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c81  00000000  00000000  0006fc49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002adcb  00000000  00000000  000908ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3c42  00000000  00000000  000bb695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007804  00000000  00000000  0015f2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00166adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801db30 	.word	0x0801db30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	0801db30 	.word	0x0801db30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b0c8      	sub	sp, #288	; 0x120
 8000590:	af00      	add	r7, sp, #0
 8000592:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000596:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800059a:	6018      	str	r0, [r3, #0]
 800059c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80005a4:	6019      	str	r1, [r3, #0]
 80005a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005aa:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80005ae:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 80005b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005b4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	2bff      	cmp	r3, #255	; 0xff
 80005bc:	d806      	bhi.n	80005cc <PN532_WriteFrame+0x40>
 80005be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005c2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	e0aa      	b.n	8000728 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 80005d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 80005e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005ec:	2200      	movs	r2, #0
 80005ee:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 80005f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005f8:	22ff      	movs	r2, #255	; 0xff
 80005fa:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 80005fc:	2300      	movs	r3, #0
 80005fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8000602:	e010      	b.n	8000626 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8000604:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000608:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800060c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000610:	5cd2      	ldrb	r2, [r2, r3]
 8000612:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000616:	4413      	add	r3, r2
 8000618:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 800061c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000620:	3301      	adds	r3, #1
 8000622:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8000626:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800062a:	2b02      	cmp	r3, #2
 800062c:	d9ea      	bls.n	8000604 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 800062e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000632:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	b2da      	uxtb	r2, r3
 800063a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800063e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000642:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8000644:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000648:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	425b      	negs	r3, r3
 8000652:	b2da      	uxtb	r2, r3
 8000654:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000658:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800065c:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 800065e:	2300      	movs	r3, #0
 8000660:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000664:	e023      	b.n	80006ae <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8000666:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800066a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800066e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000672:	6812      	ldr	r2, [r2, #0]
 8000674:	441a      	add	r2, r3
 8000676:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800067a:	3305      	adds	r3, #5
 800067c:	7811      	ldrb	r1, [r2, #0]
 800067e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000682:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000686:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000688:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800068c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000690:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	4413      	add	r3, r2
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800069e:	4413      	add	r3, r2
 80006a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 80006a4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80006a8:	3301      	adds	r3, #1
 80006aa:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80006ae:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80006b8:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 80006bc:	8812      	ldrh	r2, [r2, #0]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d8d1      	bhi.n	8000666 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 80006c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006c6:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	3305      	adds	r3, #5
 80006ce:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80006d2:	43d2      	mvns	r2, r2
 80006d4:	b2d1      	uxtb	r1, r2
 80006d6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80006da:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80006de:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 80006e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006e4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	3306      	adds	r3, #6
 80006ec:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80006f0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80006f4:	2100      	movs	r1, #0
 80006f6:	54d1      	strb	r1, [r2, r3]
     if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 80006f8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000708:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 800070c:	8812      	ldrh	r2, [r2, #0]
 800070e:	3207      	adds	r2, #7
 8000710:	b291      	uxth	r1, r2
 8000712:	f107 0214 	add.w	r2, r7, #20
 8000716:	4610      	mov	r0, r2
 8000718:	4798      	blx	r3
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	e000      	b.n	8000728 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b0c8      	sub	sp, #288	; 0x120
 8000738:	af00      	add	r7, sp, #0
 800073a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800073e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000742:	6018      	str	r0, [r3, #0]
 8000744:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000748:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800074c:	6019      	str	r1, [r3, #0]
 800074e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000752:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000756:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 800075e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000762:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800076e:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 8000772:	8812      	ldrh	r2, [r2, #0]
 8000774:	3207      	adds	r2, #7
 8000776:	b291      	uxth	r1, r2
 8000778:	f107 0214 	add.w	r2, r7, #20
 800077c:	4610      	mov	r0, r2
 800077e:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 8000786:	e019      	b.n	80007bc <PN532_ReadFrame+0x88>
        offset += 1;
 8000788:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800078c:	3301      	adds	r3, #1
 800078e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 8000792:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000796:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	1dda      	adds	r2, r3, #7
 800079e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007a2:	429a      	cmp	r2, r3
 80007a4:	da0a      	bge.n	80007bc <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 80007a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	485b      	ldr	r0, [pc, #364]	; (8000920 <PN532_ReadFrame+0x1ec>)
 80007b4:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	e0ab      	b.n	8000914 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 80007bc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007c0:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80007c4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80007c8:	5cd3      	ldrb	r3, [r2, r3]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0dc      	beq.n	8000788 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 80007ce:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007d2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80007d6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80007da:	5cd3      	ldrb	r3, [r2, r3]
 80007dc:	2bff      	cmp	r3, #255	; 0xff
 80007de:	d00a      	beq.n	80007f6 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 80007e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	484c      	ldr	r0, [pc, #304]	; (8000920 <PN532_ReadFrame+0x1ec>)
 80007ee:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80007f0:	f04f 33ff 	mov.w	r3, #4294967295
 80007f4:	e08e      	b.n	8000914 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 80007f6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007fa:	3301      	adds	r3, #1
 80007fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 8000800:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000804:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	1dda      	adds	r2, r3, #7
 800080c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000810:	429a      	cmp	r2, r3
 8000812:	da0a      	bge.n	800082a <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8000814:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000818:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	4840      	ldr	r0, [pc, #256]	; (8000924 <PN532_ReadFrame+0x1f0>)
 8000822:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
 8000828:	e074      	b.n	8000914 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 800082a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800082e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000832:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000836:	5cd3      	ldrb	r3, [r2, r3]
 8000838:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 800083c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000840:	3301      	adds	r3, #1
 8000842:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000846:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800084a:	5cd2      	ldrb	r2, [r2, r3]
 800084c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000850:	4413      	add	r3, r2
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d00a      	beq.n	800086e <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8000858:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800085c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	4830      	ldr	r0, [pc, #192]	; (8000928 <PN532_ReadFrame+0x1f4>)
 8000866:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000868:	f04f 33ff 	mov.w	r3, #4294967295
 800086c:	e052      	b.n	8000914 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 800086e:	2300      	movs	r3, #0
 8000870:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000874:	e014      	b.n	80008a0 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000876:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800087a:	1c9a      	adds	r2, r3, #2
 800087c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000880:	4413      	add	r3, r2
 8000882:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000886:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800088a:	5cd2      	ldrb	r2, [r2, r3]
 800088c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000890:	4413      	add	r3, r2
 8000892:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000896:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800089a:	3301      	adds	r3, #1
 800089c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80008a0:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 80008a4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d2e4      	bcs.n	8000876 <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 80008ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00a      	beq.n	80008ca <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 80008b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	481a      	ldr	r0, [pc, #104]	; (800092c <PN532_ReadFrame+0x1f8>)
 80008c2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80008c4:	f04f 33ff 	mov.w	r3, #4294967295
 80008c8:	e024      	b.n	8000914 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 80008ca:	2300      	movs	r3, #0
 80008cc:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80008d0:	e018      	b.n	8000904 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 80008d2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80008d6:	1c9a      	adds	r2, r3, #2
 80008d8:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80008dc:	441a      	add	r2, r3
 80008de:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80008e2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80008e6:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 80008ea:	6809      	ldr	r1, [r1, #0]
 80008ec:	440b      	add	r3, r1
 80008ee:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80008f2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80008f6:	5c8a      	ldrb	r2, [r1, r2]
 80008f8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 80008fa:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80008fe:	3301      	adds	r3, #1
 8000900:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8000904:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 8000908:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800090c:	429a      	cmp	r2, r3
 800090e:	d3e0      	bcc.n	80008d2 <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8000910:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 8000914:	4618      	mov	r0, r3
 8000916:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	0801db48 	.word	0x0801db48
 8000924:	0801db7c 	.word	0x0801db7c
 8000928:	0801db98 	.word	0x0801db98
 800092c:	0801dbc8 	.word	0x0801dbc8

08000930 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b0c7      	sub	sp, #284	; 0x11c
 8000934:	af00      	add	r7, sp, #0
 8000936:	f507 748c 	add.w	r4, r7, #280	; 0x118
 800093a:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 800093e:	6020      	str	r0, [r4, #0]
 8000940:	4608      	mov	r0, r1
 8000942:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000946:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800094a:	600a      	str	r2, [r1, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000952:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000956:	4602      	mov	r2, r0
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800095e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000962:	460a      	mov	r2, r1
 8000964:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000966:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800096a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800096e:	22d4      	movs	r2, #212	; 0xd4
 8000970:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000972:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800097a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800097e:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8000982:	7812      	ldrb	r2, [r2, #0]
 8000984:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000986:	2300      	movs	r3, #0
 8000988:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800098c:	e012      	b.n	80009b4 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 800098e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000992:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000996:	441a      	add	r2, r3
 8000998:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800099c:	3302      	adds	r3, #2
 800099e:	7811      	ldrb	r1, [r2, #0]
 80009a0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80009a4:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80009a8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 80009aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80009ae:	3301      	adds	r3, #1
 80009b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80009b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 80009be:	429a      	cmp	r2, r3
 80009c0:	d8e5      	bhi.n	800098e <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 80009c2:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 80009c6:	3302      	adds	r3, #2
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	f107 0110 	add.w	r1, r7, #16
 80009ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	f7ff fdd8 	bl	800058c <PN532_WriteFrame>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d011      	beq.n	8000a06 <PN532_CallFunction+0xd6>
        pn532->wakeup();
 80009e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 80009f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	485b      	ldr	r0, [pc, #364]	; (8000b6c <PN532_CallFunction+0x23c>)
 80009fe:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000a00:	f04f 33ff 	mov.w	r3, #4294967295
 8000a04:	e0ac      	b.n	8000b60 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 8000a06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000a16:	4798      	blx	r3
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f083 0301 	eor.w	r3, r3, #1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d002      	beq.n	8000a2a <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	e09a      	b.n	8000b60 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8000a2a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f107 0210 	add.w	r2, r7, #16
 8000a3a:	2106      	movs	r1, #6
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000a40:	2300      	movs	r3, #0
 8000a42:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000a46:	e01c      	b.n	8000a82 <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8000a48:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a4c:	4a48      	ldr	r2, [pc, #288]	; (8000b70 <PN532_CallFunction+0x240>)
 8000a4e:	5cd2      	ldrb	r2, [r2, r3]
 8000a50:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a54:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000a58:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8000a5c:	5ccb      	ldrb	r3, [r1, r3]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d00a      	beq.n	8000a78 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8000a62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4841      	ldr	r0, [pc, #260]	; (8000b74 <PN532_CallFunction+0x244>)
 8000a70:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e073      	b.n	8000b60 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000a78:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000a82:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a86:	2b05      	cmp	r3, #5
 8000a88:	d9de      	bls.n	8000a48 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000a8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000a9a:	4798      	blx	r3
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f083 0301 	eor.w	r3, r3, #1
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	e058      	b.n	8000b60 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000aae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ab2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	3302      	adds	r3, #2
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	f107 0110 	add.w	r1, r7, #16
 8000ac0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ac4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	f7ff fe33 	bl	8000734 <PN532_ReadFrame>
 8000ace:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000ad2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2bd5      	cmp	r3, #213	; 0xd5
 8000ade:	d10d      	bne.n	8000afc <PN532_CallFunction+0x1cc>
 8000ae0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	461a      	mov	r2, r3
 8000aec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000af0:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d00a      	beq.n	8000b12 <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8000afc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	481b      	ldr	r0, [pc, #108]	; (8000b78 <PN532_CallFunction+0x248>)
 8000b0a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b10:	e026      	b.n	8000b60 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000b18:	e015      	b.n	8000b46 <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8000b1a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000b1e:	1c9a      	adds	r2, r3, #2
 8000b20:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000b24:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000b28:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8000b2c:	6809      	ldr	r1, [r1, #0]
 8000b2e:	440b      	add	r3, r1
 8000b30:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000b34:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8000b38:	5c8a      	ldrb	r2, [r1, r2]
 8000b3a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000b3c:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000b40:	3301      	adds	r3, #1
 8000b42:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000b46:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000b50:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000b54:	8812      	ldrh	r2, [r2, #0]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d8df      	bhi.n	8000b1a <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000b5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b5e:	3b02      	subs	r3, #2
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd90      	pop	{r4, r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	0801dbfc 	.word	0x0801dbfc
 8000b70:	0801e534 	.word	0x0801e534
 8000b74:	0801dc10 	.word	0x0801dc10
 8000b78:	0801dc3c 	.word	0x0801dc3c

08000b7c <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af04      	add	r7, sp, #16
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000b86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b8a:	9302      	str	r3, [sp, #8]
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	2300      	movs	r3, #0
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2304      	movs	r3, #4
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	2102      	movs	r1, #2
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fec8 	bl	8000930 <PN532_CallFunction>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba6:	d106      	bne.n	8000bb6 <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <PN532_GetFirmwareVersion+0x44>)
 8000bae:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb4:	e000      	b.n	8000bb8 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	0801dc64 	.word	0x0801dc64

08000bc4 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af04      	add	r7, sp, #16
 8000bca:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <PN532_SamConfiguration+0x40>)
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	6812      	ldr	r2, [r2, #0]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	8019      	strh	r1, [r3, #0]
 8000bd8:	3302      	adds	r3, #2
 8000bda:	0c12      	lsrs	r2, r2, #16
 8000bdc:	701a      	strb	r2, [r3, #0]
    //uint8_t params[] = {0x4A, 0x01, 0x00};
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	9302      	str	r3, [sp, #8]
 8000be4:	2303      	movs	r3, #3
 8000be6:	9301      	str	r3, [sp, #4]
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2114      	movs	r1, #20
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fe9b 	bl	8000930 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	0801dc80 	.word	0x0801dc80

08000c08 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b090      	sub	sp, #64	; 0x40
 8000c0c:	af04      	add	r7, sp, #16
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	4613      	mov	r3, r2
 8000c16:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000c18:	2301      	movs	r3, #1
 8000c1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000c24:	f107 0210 	add.w	r2, r7, #16
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	9302      	str	r3, [sp, #8]
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	9301      	str	r3, [sp, #4]
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	2313      	movs	r3, #19
 8000c38:	214a      	movs	r1, #74	; 0x4a
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f7ff fe78 	bl	8000930 <PN532_CallFunction>
 8000c40:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	da02      	bge.n	8000c4e <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	e02e      	b.n	8000cac <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000c4e:	7c3b      	ldrb	r3, [r7, #16]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d006      	beq.n	8000c62 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <PN532_ReadPassiveTarget+0xac>)
 8000c5a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	e024      	b.n	8000cac <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8000c62:	7d7b      	ldrb	r3, [r7, #21]
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	d906      	bls.n	8000c76 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <PN532_ReadPassiveTarget+0xb0>)
 8000c6e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	e01a      	b.n	8000cac <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c7c:	e010      	b.n	8000ca0 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8000c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c82:	1d9a      	adds	r2, r3, #6
 8000c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	440b      	add	r3, r1
 8000c8c:	3230      	adds	r2, #48	; 0x30
 8000c8e:	443a      	add	r2, r7
 8000c90:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000c94:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ca0:	7d7b      	ldrb	r3, [r7, #21]
 8000ca2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d3e9      	bcc.n	8000c7e <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000caa:	7d7b      	ldrb	r3, [r7, #21]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3730      	adds	r7, #48	; 0x30
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	0801dc84 	.word	0x0801dc84
 8000cb8:	0801dca4 	.word	0x0801dca4

08000cbc <calculate_sha1>:

static uint8_t mrz_key[KEY_SIZE];
static BACKeys session_keys;

// Fonctions utilitaires pour le protocole BAC
static void calculate_sha1(const uint8_t* data, size_t length, uint8_t* hash) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b09c      	sub	sp, #112	; 0x70
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
    // Implémentation de SHA-1
    mbedtls_sha1_context ctx;
    mbedtls_sha1_init(&ctx);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f010 fcb2 	bl	8011636 <mbedtls_sha1_init>
    mbedtls_sha1_starts(&ctx);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f010 fcca 	bl	8011670 <mbedtls_sha1_starts>
    mbedtls_sha1_update(&ctx, data, length);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	68ba      	ldr	r2, [r7, #8]
 8000ce2:	68f9      	ldr	r1, [r7, #12]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f012 fac3 	bl	8013270 <mbedtls_sha1_update>
    mbedtls_sha1_finish(&ctx, hash);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f012 fb35 	bl	8013360 <mbedtls_sha1_finish>
    mbedtls_sha1_free(&ctx);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f010 fca8 	bl	8011650 <mbedtls_sha1_free>
}
 8000d00:	bf00      	nop
 8000d02:	3770      	adds	r7, #112	; 0x70
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <calculate_3des>:

static void calculate_3des(const unsigned char *key, const unsigned char *input, size_t input_len, unsigned char *output) {
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b0eb      	sub	sp, #428	; 0x1ac
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	f507 74d0 	add.w	r4, r7, #416	; 0x1a0
 8000d12:	f5a4 74ca 	sub.w	r4, r4, #404	; 0x194
 8000d16:	6020      	str	r0, [r4, #0]
 8000d18:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 8000d1c:	f5a0 70cc 	sub.w	r0, r0, #408	; 0x198
 8000d20:	6001      	str	r1, [r0, #0]
 8000d22:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8000d26:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 8000d2a:	600a      	str	r2, [r1, #0]
 8000d2c:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8000d30:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8000d34:	6013      	str	r3, [r2, #0]

    mbedtls_des3_context ctx;
	unsigned char iv[8] = {0}; // Initialization vector of zeros
 8000d36:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d3a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]

	// Initialize the 3DES context
	mbedtls_des3_init(&ctx);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f009 fa87 	bl	800a25e <mbedtls_des3_init>

	// Set the encryption key
	mbedtls_des3_set2key_enc(&ctx, key);
 8000d50:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d54:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000d58:	f107 021c 	add.w	r2, r7, #28
 8000d5c:	6819      	ldr	r1, [r3, #0]
 8000d5e:	4610      	mov	r0, r2
 8000d60:	f009 fd5f 	bl	800a822 <mbedtls_des3_set2key_enc>

	// Perform 3DES encryption in CBC mode
	int ret = mbedtls_des3_crypt_cbc(&ctx, MBEDTLS_DES_ENCRYPT, input_len, iv, input, output);
 8000d64:	f107 0114 	add.w	r1, r7, #20
 8000d68:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d6c:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8000d70:	f107 001c 	add.w	r0, r7, #28
 8000d74:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d78:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000d84:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	f00a fbff 	bl	800b594 <mbedtls_des3_crypt_cbc>
 8000d96:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c

	// Free the context
	mbedtls_des3_free(&ctx);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f009 fa6b 	bl	800a27a <mbedtls_des3_free>
}
 8000da4:	bf00      	nop
 8000da6:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}
	...

08000db0 <calculate_mrz_key>:

// Fonction pour calculer la clé MRZ
static void calculate_mrz_key(const char* CIN_num, const char* birth_date, const char* expiry_date) {
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b091      	sub	sp, #68	; 0x44
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
    uint8_t mrz_info[MRZ_SIZE];
    uint8_t hash[20];

    memcpy(mrz_info, CIN_num, 10);
 8000dbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc0:	220a      	movs	r2, #10
 8000dc2:	68f9      	ldr	r1, [r7, #12]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f01c fa97 	bl	801d2f8 <memcpy>
	memcpy(mrz_info + 10, birth_date, 7);
 8000dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dce:	330a      	adds	r3, #10
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f01c fa8f 	bl	801d2f8 <memcpy>
	memcpy(mrz_info + 17, expiry_date, 7);
 8000dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dde:	3311      	adds	r3, #17
 8000de0:	2207      	movs	r2, #7
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f01c fa87 	bl	801d2f8 <memcpy>

    // Calculer le SHA-1
    calculate_sha1(mrz_info, MRZ_SIZE, hash);
 8000dea:	f107 0214 	add.w	r2, r7, #20
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	2118      	movs	r1, #24
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff61 	bl	8000cbc <calculate_sha1>

    // Prendre les 16 premiers octets pour la clé
    memcpy(mrz_key, hash, KEY_SIZE);
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <calculate_mrz_key+0x64>)
 8000dfc:	461c      	mov	r4, r3
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    calculate_Kenc_Kmac();
 8000e08:	f000 f8a4 	bl	8000f54 <calculate_Kenc_Kmac>
}
 8000e0c:	bf00      	nop
 8000e0e:	3744      	adds	r7, #68	; 0x44
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	200000c8 	.word	0x200000c8

08000e18 <calculate_KIC>:

static int calculate_KIC(uint8_t* KIC){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8000e1e:	af02      	add	r7, sp, #8
 8000e20:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8000e24:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000e28:	6018      	str	r0, [r3, #0]
	mbedtls_entropy_context entropy;
	mbedtls_ctr_drbg_context ctr_drbg;
	const char *pers = "random_kic_generation";
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <calculate_KIC+0xa0>)
 8000e2c:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec

	// Initialisation des contextes
	mbedtls_entropy_init(&entropy);
 8000e30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000e34:	4618      	mov	r0, r3
 8000e36:	f00a fcab 	bl	800b790 <mbedtls_entropy_init>
	mbedtls_ctr_drbg_init(&ctr_drbg);
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f008 fce4 	bl	800980c <mbedtls_ctr_drbg_init>

	// Initialiser le générateur de nombres aléatoires avec une source d'entropie
	if (mbedtls_ctr_drbg_seed(&ctr_drbg, mbedtls_entropy_func, &entropy, (const unsigned char *) pers, strlen(pers)) != 0) {
 8000e44:	f8d7 02ec 	ldr.w	r0, [r7, #748]	; 0x2ec
 8000e48:	f7ff fa1a 	bl	8000280 <strlen>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8000e52:	f107 0008 	add.w	r0, r7, #8
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8000e5c:	4917      	ldr	r1, [pc, #92]	; (8000ebc <calculate_KIC+0xa4>)
 8000e5e:	f009 f8dc 	bl	800a01a <mbedtls_ctr_drbg_seed>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d004      	beq.n	8000e72 <calculate_KIC+0x5a>
		printf("Erreur d'initialisation du generateur de nombres aleatoires\n");
 8000e68:	4815      	ldr	r0, [pc, #84]	; (8000ec0 <calculate_KIC+0xa8>)
 8000e6a:	f01b feeb 	bl	801cc44 <puts>
		return 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e01c      	b.n	8000eac <calculate_KIC+0x94>
	}

	// Générer les 16 octets aléatoires pour KIC
	if (mbedtls_ctr_drbg_random(&ctr_drbg, KIC, sizeof(KIC)) != 0) {
 8000e72:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8000e76:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000e7a:	f107 0008 	add.w	r0, r7, #8
 8000e7e:	2204      	movs	r2, #4
 8000e80:	6819      	ldr	r1, [r3, #0]
 8000e82:	f009 f9b6 	bl	800a1f2 <mbedtls_ctr_drbg_random>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d004      	beq.n	8000e96 <calculate_KIC+0x7e>
		printf("Erreur de generation de KIC\n");
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <calculate_KIC+0xac>)
 8000e8e:	f01b fed9 	bl	801cc44 <puts>
		return 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e00a      	b.n	8000eac <calculate_KIC+0x94>
	}

	// Libération des contextes
	mbedtls_ctr_drbg_free(&ctr_drbg);
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f008 fcd1 	bl	8009842 <mbedtls_ctr_drbg_free>
	mbedtls_entropy_free(&entropy);
 8000ea0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f00a fc97 	bl	800b7d8 <mbedtls_entropy_free>
	return 1;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	f507 773c 	add.w	r7, r7, #752	; 0x2f0
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	0801dccc 	.word	0x0801dccc
 8000ebc:	0800bab3 	.word	0x0800bab3
 8000ec0:	0801dce4 	.word	0x0801dce4
 8000ec4:	0801dd20 	.word	0x0801dd20

08000ec8 <adjustParity>:
void adjustParity(uint8_t* key, size_t length) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
    for(size_t i = 0; i < length; i++) {
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e032      	b.n	8000f3e <adjustParity+0x76>
        uint8_t byte = key[i] & 0xFE;  // Clear the parity bit (LSB)
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	72fb      	strb	r3, [r7, #11]
        uint8_t count = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	74fb      	strb	r3, [r7, #19]

        // Count number of 1s in bits 1-7
        for(int j = 1; j < 8; j++) {
 8000eea:	2301      	movs	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	e00d      	b.n	8000f0c <adjustParity+0x44>
            if(byte & (1 << j)) {
 8000ef0:	7afa      	ldrb	r2, [r7, #11]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	fa42 f303 	asr.w	r3, r2, r3
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <adjustParity+0x3e>
                count++;
 8000f00:	7cfb      	ldrb	r3, [r7, #19]
 8000f02:	3301      	adds	r3, #1
 8000f04:	74fb      	strb	r3, [r7, #19]
        for(int j = 1; j < 8; j++) {
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b07      	cmp	r3, #7
 8000f10:	ddee      	ble.n	8000ef0 <adjustParity+0x28>
            }
        }

        // Set parity bit (LSB) to make total number of 1s odd
        key[i] = byte | (count % 2 == 0 ? 1 : 0);
 8000f12:	7cfb      	ldrb	r3, [r7, #19]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	bf0c      	ite	eq
 8000f1e:	2301      	moveq	r3, #1
 8000f20:	2300      	movne	r3, #0
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	b25a      	sxtb	r2, r3
 8000f26:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b259      	sxtb	r1, r3
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	4413      	add	r3, r2
 8000f34:	b2ca      	uxtb	r2, r1
 8000f36:	701a      	strb	r2, [r3, #0]
    for(size_t i = 0; i < length; i++) {
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d3c8      	bcc.n	8000ed8 <adjustParity+0x10>
    }
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <calculate_Kenc_Kmac>:

void calculate_Kenc_Kmac(void){
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b095      	sub	sp, #84	; 0x54
 8000f58:	af00      	add	r7, sp, #0
	uint8_t hash1[20];
	uint8_t Enc_D[20] = {0};
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
	uint8_t Mac_D[20] = {0};
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
	uint8_t Ka[8];
	uint8_t Kb[8];
	//kenc
	memcpy(Enc_D, mrz_key, 16);
 8000f7e:	4b44      	ldr	r3, [pc, #272]	; (8001090 <calculate_Kenc_Kmac+0x13c>)
 8000f80:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000f84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Enc_D[16] = 0x00;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	Enc_D[17] = 0x00;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	Enc_D[18] = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	Enc_D[19] = 0x01;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	calculate_sha1(Enc_D, 20, hash1);
 8000fa2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000faa:	2114      	movs	r1, #20
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fe85 	bl	8000cbc <calculate_sha1>
	memcpy(Ka, hash1, 8);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fbe:	e883 0003 	stmia.w	r3, {r0, r1}
	adjustParity(Ka, 8);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff7d 	bl	8000ec8 <adjustParity>
	memcpy(session_keys.Kenc, Ka, 8);
 8000fce:	4b31      	ldr	r3, [pc, #196]	; (8001094 <calculate_Kenc_Kmac+0x140>)
 8000fd0:	3320      	adds	r3, #32
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fda:	e883 0003 	stmia.w	r3, {r0, r1}
	memcpy(Kb, hash1 + 8, 8);
 8000fde:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	6810      	ldr	r0, [r2, #0]
 8000fe8:	6851      	ldr	r1, [r2, #4]
 8000fea:	c303      	stmia	r3!, {r0, r1}
	adjustParity(Kb, 8);
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2108      	movs	r1, #8
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff69 	bl	8000ec8 <adjustParity>
	memcpy(session_keys.Kenc + 8, Kb, 8);
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <calculate_Kenc_Kmac+0x144>)
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	cb03      	ldmia	r3!, {r0, r1}
 8000ffe:	6010      	str	r0, [r2, #0]
 8001000:	6051      	str	r1, [r2, #4]

	//kmac
	memcpy(Mac_D, mrz_key, 16);
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <calculate_Kenc_Kmac+0x13c>)
 8001004:	f107 0414 	add.w	r4, r7, #20
 8001008:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800100a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Mac_D[16] = 0x00;
 800100e:	2300      	movs	r3, #0
 8001010:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	Mac_D[17] = 0x00;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Mac_D[18] = 0x00;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	Mac_D[19] = 0x02;
 8001020:	2302      	movs	r3, #2
 8001022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	calculate_sha1(Mac_D, 20, hash1);
 8001026:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	2114      	movs	r1, #20
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fe43 	bl	8000cbc <calculate_sha1>
	memcpy(Ka, hash1, 8);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800103e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001042:	e883 0003 	stmia.w	r3, {r0, r1}
	adjustParity(Ka, 8);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2108      	movs	r1, #8
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff3b 	bl	8000ec8 <adjustParity>
	memcpy(session_keys.Kmac, Ka, 8);
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <calculate_Kenc_Kmac+0x140>)
 8001054:	3330      	adds	r3, #48	; 0x30
 8001056:	f107 020c 	add.w	r2, r7, #12
 800105a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800105e:	e883 0003 	stmia.w	r3, {r0, r1}
	memcpy(Kb, hash1 + 8, 8);
 8001062:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001066:	3208      	adds	r2, #8
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	6810      	ldr	r0, [r2, #0]
 800106c:	6851      	ldr	r1, [r2, #4]
 800106e:	c303      	stmia	r3!, {r0, r1}
	adjustParity(Kb, 8);
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2108      	movs	r1, #8
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff27 	bl	8000ec8 <adjustParity>
	memcpy(session_keys.Kmac + 8, Kb, 8);
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <calculate_Kenc_Kmac+0x148>)
 800107c:	461a      	mov	r2, r3
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	cb03      	ldmia	r3!, {r0, r1}
 8001082:	6010      	str	r0, [r2, #0]
 8001084:	6051      	str	r1, [r2, #4]

}
 8001086:	bf00      	nop
 8001088:	3754      	adds	r7, #84	; 0x54
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	bf00      	nop
 8001090:	200000c8 	.word	0x200000c8
 8001094:	200000d8 	.word	0x200000d8
 8001098:	20000100 	.word	0x20000100
 800109c:	20000110 	.word	0x20000110

080010a0 <derive_session_keys>:

// Fonction pour dériver les clés de session
static void derive_session_keys(uint8_t* k_seed) {
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b093      	sub	sp, #76	; 0x4c
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    uint8_t hash[20];
    uint8_t enc_data[20] = {0};
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
    uint8_t mac_data[20] = {0};
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]

    // Dérivation pour Ksenc
	memcpy(enc_data, k_seed, 16);
 80010cc:	f107 0320 	add.w	r3, r7, #32
 80010d0:	2210      	movs	r2, #16
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f01c f90f 	bl	801d2f8 <memcpy>
	enc_data[16] = 0x00;
 80010da:	2300      	movs	r3, #0
 80010dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	enc_data[17] = 0x00;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	enc_data[18] = 0x00;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	enc_data[19] = 0x01;
 80010ec:	2301      	movs	r3, #1
 80010ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	calculate_sha1(enc_data, 20, hash);
 80010f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80010f6:	f107 0320 	add.w	r3, r7, #32
 80010fa:	2114      	movs	r1, #20
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fddd 	bl	8000cbc <calculate_sha1>
	memcpy(session_keys.Ksenc, hash, 16);
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <derive_session_keys+0xb8>)
 8001104:	461c      	mov	r4, r3
 8001106:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800110a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Dérivation pour Ksmac
	memcpy(mac_data, k_seed, 16);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2210      	movs	r2, #16
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	f01c f8ed 	bl	801d2f8 <memcpy>
	mac_data[16] = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	773b      	strb	r3, [r7, #28]
	mac_data[17] = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	777b      	strb	r3, [r7, #29]
	mac_data[18] = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	77bb      	strb	r3, [r7, #30]
	mac_data[19] = 0x02;
 800112a:	2302      	movs	r3, #2
 800112c:	77fb      	strb	r3, [r7, #31]
	calculate_sha1(mac_data, 20, hash);
 800112e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2114      	movs	r1, #20
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fdbf 	bl	8000cbc <calculate_sha1>
	memcpy(session_keys.Ksmac, hash, 16);
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <derive_session_keys+0xb8>)
 8001140:	f103 0410 	add.w	r4, r3, #16
 8001144:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001148:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800114a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 800114e:	bf00      	nop
 8001150:	374c      	adds	r7, #76	; 0x4c
 8001152:	46bd      	mov	sp, r7
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	bf00      	nop
 8001158:	200000d8 	.word	0x200000d8

0800115c <calculate_SSC>:

void calculate_SSC(uint8_t rnd_icc[8], uint8_t SSC[8]){
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	// Copier RND.IC dans SSC
	for (int i = 0; i < 8; i++) {
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	e00a      	b.n	8001182 <calculate_SSC+0x26>
		SSC[i] = rnd_icc[i];
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	441a      	add	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6839      	ldr	r1, [r7, #0]
 8001176:	440b      	add	r3, r1
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3301      	adds	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b07      	cmp	r3, #7
 8001186:	ddf1      	ble.n	800116c <calculate_SSC+0x10>
	}

	// Incrémenter SSC de 1
	for (int i = 7; i >= 0; i--) {
 8001188:	2307      	movs	r3, #7
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	e00c      	b.n	80011a8 <calculate_SSC+0x4c>
		if (++SSC[i] != 0) break;  // arrêt si pas de dépassement
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	3201      	adds	r2, #1
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d106      	bne.n	80011b0 <calculate_SSC+0x54>
	for (int i = 7; i >= 0; i--) {
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	daef      	bge.n	800118e <calculate_SSC+0x32>
	}
}
 80011ae:	e000      	b.n	80011b2 <calculate_SSC+0x56>
		if (++SSC[i] != 0) break;  // arrêt si pas de dépassement
 80011b0:	bf00      	nop
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <perform_bac>:


int perform_bac(PN532* pn532) {
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	b0ff      	sub	sp, #508	; 0x1fc
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80011ca:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80011ce:	6018      	str	r0, [r3, #0]
    if (PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, response, sizeof(response), get_challenge, sizeof(get_challenge), PN532_DEFAULT_TIMEOUT) <= 0) {
        return 0;
    }
    memcpy(rnd_icc, response, 8);*/

    uint8_t rnd_ifd[8] = {0x78, 0x17, 0x23, 0x86, 0x0C, 0x06, 0xC2, 0x26};
 80011d0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80011d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80011d8:	4ab9      	ldr	r2, [pc, #740]	; (80014c0 <perform_bac+0x300>)
 80011da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011de:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t rnd_icc[8] = {0x46, 0x08, 0xF9, 0x19, 0x88, 0x70, 0x22, 0x12};
 80011e2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80011e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80011ea:	4ab6      	ldr	r2, [pc, #728]	; (80014c4 <perform_bac+0x304>)
 80011ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f0:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t k_ifd[16] = {0x0B, 0x79, 0x52, 0x40, 0xCB, 0x70, 0x49, 0xB0, 0x1C, 0x19, 0xB3, 0x3E, 0x32, 0x80, 0x4F, 0x0B};
 80011f4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80011f8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80011fc:	4ab2      	ldr	r2, [pc, #712]	; (80014c8 <perform_bac+0x308>)
 80011fe:	461c      	mov	r4, r3
 8001200:	4613      	mov	r3, r2
 8001202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memcpy(S, rnd_ifd, 8);
 8001208:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800120c:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8001210:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001214:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8001218:	460b      	mov	r3, r1
 800121a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800121e:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(S + 8, rnd_icc, 8);
 8001222:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001226:	3308      	adds	r3, #8
 8001228:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 800122c:	f5a2 719e 	sub.w	r1, r2, #316	; 0x13c
 8001230:	461a      	mov	r2, r3
 8001232:	460b      	mov	r3, r1
 8001234:	cb03      	ldmia	r3!, {r0, r1}
 8001236:	6010      	str	r0, [r2, #0]
 8001238:	6051      	str	r1, [r2, #4]
    memcpy(S + 16, k_ifd, 16);
 800123a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800123e:	3310      	adds	r3, #16
 8001240:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8001244:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8001248:	461c      	mov	r4, r3
 800124a:	4615      	mov	r5, r2
 800124c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124e:	6020      	str	r0, [r4, #0]
 8001250:	6061      	str	r1, [r4, #4]
 8001252:	60a2      	str	r2, [r4, #8]
 8001254:	60e3      	str	r3, [r4, #12]

    calculate_3des(session_keys.Kenc, S, 32, EIFD);
 8001256:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800125a:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800125e:	2220      	movs	r2, #32
 8001260:	489a      	ldr	r0, [pc, #616]	; (80014cc <perform_bac+0x30c>)
 8001262:	f7ff fd51 	bl	8000d08 <calculate_3des>
    compute_retail_mac(session_keys.Kmac, EIFD, 32, MIFD);
 8001266:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800126a:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 800126e:	2220      	movs	r2, #32
 8001270:	4897      	ldr	r0, [pc, #604]	; (80014d0 <perform_bac+0x310>)
 8001272:	f000 fb4f 	bl	8001914 <compute_retail_mac>

    memcpy(cmd_data, EIFD, 32);
 8001276:	f507 74ce 	add.w	r4, r7, #412	; 0x19c
 800127a:	f507 75e2 	add.w	r5, r7, #452	; 0x1c4
 800127e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001282:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001286:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memcpy(cmd_data + 32, MIFD, 8);
 800128a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800128e:	3320      	adds	r3, #32
 8001290:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8001294:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 8001298:	461a      	mov	r2, r3
 800129a:	460b      	mov	r3, r1
 800129c:	cb03      	ldmia	r3!, {r0, r1}
 800129e:	6010      	str	r0, [r2, #0]
 80012a0:	6051      	str	r1, [r2, #4]

    // Envoi de la commande d'authentification
    uint8_t auth_cmd[46] = {0x00, 0x82, 0x00, 0x00, 0x28};
 80012a2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80012a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80012aa:	498a      	ldr	r1, [pc, #552]	; (80014d4 <perform_bac+0x314>)
 80012ac:	461a      	mov	r2, r3
 80012ae:	6808      	ldr	r0, [r1, #0]
 80012b0:	6010      	str	r0, [r2, #0]
 80012b2:	8889      	ldrh	r1, [r1, #4]
 80012b4:	8091      	strh	r1, [r2, #4]
 80012b6:	3306      	adds	r3, #6
 80012b8:	2228      	movs	r2, #40	; 0x28
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f01b ff7d 	bl	801d1bc <memset>
    memcpy(auth_cmd + 5, cmd_data, 40);
 80012c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012c6:	3305      	adds	r3, #5
 80012c8:	f507 74ce 	add.w	r4, r7, #412	; 0x19c
 80012cc:	469c      	mov	ip, r3
 80012ce:	f104 0e20 	add.w	lr, r4, #32
 80012d2:	4665      	mov	r5, ip
 80012d4:	4626      	mov	r6, r4
 80012d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012d8:	6028      	str	r0, [r5, #0]
 80012da:	6069      	str	r1, [r5, #4]
 80012dc:	60aa      	str	r2, [r5, #8]
 80012de:	60eb      	str	r3, [r5, #12]
 80012e0:	3410      	adds	r4, #16
 80012e2:	f10c 0c10 	add.w	ip, ip, #16
 80012e6:	4574      	cmp	r4, lr
 80012e8:	d1f3      	bne.n	80012d2 <perform_bac+0x112>
 80012ea:	4662      	mov	r2, ip
 80012ec:	4623      	mov	r3, r4
 80012ee:	cb03      	ldmia	r3!, {r0, r1}
 80012f0:	6010      	str	r0, [r2, #0]
 80012f2:	6051      	str	r1, [r2, #4]
    auth_cmd[45] = 0x28;
 80012f4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80012f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80012fc:	2228      	movs	r2, #40	; 0x28
 80012fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    if (PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, response, sizeof(response), auth_cmd, sizeof(auth_cmd), PN532_DEFAULT_TIMEOUT) <= 0) {
 8001302:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001306:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800130a:	f5a3 70f2 	sub.w	r0, r3, #484	; 0x1e4
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	232e      	movs	r3, #46	; 0x2e
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	2140      	movs	r1, #64	; 0x40
 8001322:	6800      	ldr	r0, [r0, #0]
 8001324:	f7ff fb04 	bl	8000930 <PN532_CallFunction>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	dc01      	bgt.n	8001332 <perform_bac+0x172>
        return 0;
 800132e:	2300      	movs	r3, #0
 8001330:	e0c0      	b.n	80014b4 <perform_bac+0x2f4>
    }

    if(calculate_KIC(KIC) == 1){
 8001332:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fd6e 	bl	8000e18 <calculate_KIC>
 800133c:	4603      	mov	r3, r0
 800133e:	2b01      	cmp	r3, #1
 8001340:	d102      	bne.n	8001348 <perform_bac+0x188>
    	printf(" KIC is genereted \n");
 8001342:	4865      	ldr	r0, [pc, #404]	; (80014d8 <perform_bac+0x318>)
 8001344:	f01b fc7e 	bl	801cc44 <puts>
    }

    uint8_t k_seed[16];
    for (int i = 0; i < 16; i++) {
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800134e:	e01f      	b.n	8001390 <perform_bac+0x1d0>
    	k_seed[i] = k_ifd[i] ^ KIC[i];
 8001350:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001354:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001358:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800135c:	4413      	add	r3, r2
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001364:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8001368:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800136c:	440b      	add	r3, r1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4053      	eors	r3, r2
 8001372:	b2d9      	uxtb	r1, r3
 8001374:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001378:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800137c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001380:	4413      	add	r3, r2
 8001382:	460a      	mov	r2, r1
 8001384:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 16; i++) {
 8001386:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800138a:	3301      	adds	r3, #1
 800138c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001390:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001394:	2b0f      	cmp	r3, #15
 8001396:	dddb      	ble.n	8001350 <perform_bac+0x190>
    }

    derive_session_keys(k_seed);
 8001398:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fe7f 	bl	80010a0 <derive_session_keys>

    uint8_t SSC[8];
    calculate_SSC(rnd_icc, SSC);
 80013a2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80013a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fed5 	bl	800115c <calculate_SSC>

    uint8_t R[32];
    memcpy(R, rnd_icc, 8);
 80013b2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80013b6:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 80013ba:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80013be:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 80013c2:	460b      	mov	r3, r1
 80013c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c8:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(R + 8, rnd_ifd, 8);
 80013cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013d0:	3308      	adds	r3, #8
 80013d2:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80013d6:	f5a2 719a 	sub.w	r1, r2, #308	; 0x134
 80013da:	461a      	mov	r2, r3
 80013dc:	460b      	mov	r3, r1
 80013de:	cb03      	ldmia	r3!, {r0, r1}
 80013e0:	6010      	str	r0, [r2, #0]
 80013e2:	6051      	str	r1, [r2, #4]
    memcpy(R + 16, KIC, 16);
 80013e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013e8:	3310      	adds	r3, #16
 80013ea:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80013ee:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80013f2:	461c      	mov	r4, r3
 80013f4:	4615      	mov	r5, r2
 80013f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f8:	6020      	str	r0, [r4, #0]
 80013fa:	6061      	str	r1, [r4, #4]
 80013fc:	60a2      	str	r2, [r4, #8]
 80013fe:	60e3      	str	r3, [r4, #12]

    uint8_t EIC[32];
    calculate_3des(R, EIC, session_keys.Kenc, MBEDTLS_DES_ENCRYPT);
 8001400:	4a32      	ldr	r2, [pc, #200]	; (80014cc <perform_bac+0x30c>)
 8001402:	f107 0114 	add.w	r1, r7, #20
 8001406:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800140a:	2301      	movs	r3, #1
 800140c:	f7ff fc7c 	bl	8000d08 <calculate_3des>

    uint8_t MIC[8];
    //calculate_cbc_mac(EIC, sizeof(EIC), session_keys.Kmac, MIC);

    memcpy(resp_data, EIC, 32);
 8001410:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001414:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001418:	f507 74ba 	add.w	r4, r7, #372	; 0x174
 800141c:	461d      	mov	r5, r3
 800141e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001422:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001426:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memcpy(resp_data + 32, MIC, 8);
 800142a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800142e:	3320      	adds	r3, #32
 8001430:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8001434:	f5a2 71ee 	sub.w	r1, r2, #476	; 0x1dc
 8001438:	461a      	mov	r2, r3
 800143a:	460b      	mov	r3, r1
 800143c:	cb03      	ldmia	r3!, {r0, r1}
 800143e:	6010      	str	r0, [r2, #0]
 8001440:	6051      	str	r1, [r2, #4]
    memcpy(auth_cmd + 5, resp_data, 40);
 8001442:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001446:	3305      	adds	r3, #5
 8001448:	f507 74ba 	add.w	r4, r7, #372	; 0x174
 800144c:	469c      	mov	ip, r3
 800144e:	f104 0e20 	add.w	lr, r4, #32
 8001452:	4665      	mov	r5, ip
 8001454:	4626      	mov	r6, r4
 8001456:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001458:	6028      	str	r0, [r5, #0]
 800145a:	6069      	str	r1, [r5, #4]
 800145c:	60aa      	str	r2, [r5, #8]
 800145e:	60eb      	str	r3, [r5, #12]
 8001460:	3410      	adds	r4, #16
 8001462:	f10c 0c10 	add.w	ip, ip, #16
 8001466:	4574      	cmp	r4, lr
 8001468:	d1f3      	bne.n	8001452 <perform_bac+0x292>
 800146a:	4662      	mov	r2, ip
 800146c:	4623      	mov	r3, r4
 800146e:	cb03      	ldmia	r3!, {r0, r1}
 8001470:	6010      	str	r0, [r2, #0]
 8001472:	6051      	str	r1, [r2, #4]
	auth_cmd[45] = 0x28;
 8001474:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001478:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800147c:	2228      	movs	r2, #40	; 0x28
 800147e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	if (PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, response, sizeof(response), auth_cmd, sizeof(auth_cmd), PN532_DEFAULT_TIMEOUT) <= 0) {
 8001482:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001486:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800148a:	f5a3 70f2 	sub.w	r0, r3, #484	; 0x1e4
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	232e      	movs	r3, #46	; 0x2e
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	2140      	movs	r1, #64	; 0x40
 80014a2:	6800      	ldr	r0, [r0, #0]
 80014a4:	f7ff fa44 	bl	8000930 <PN532_CallFunction>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	dc01      	bgt.n	80014b2 <perform_bac+0x2f2>
		return 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <perform_bac+0x2f4>
	}

    return 1;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	f507 77f6 	add.w	r7, r7, #492	; 0x1ec
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014be:	bf00      	nop
 80014c0:	0801dd50 	.word	0x0801dd50
 80014c4:	0801dd58 	.word	0x0801dd58
 80014c8:	0801dd60 	.word	0x0801dd60
 80014cc:	200000f8 	.word	0x200000f8
 80014d0:	20000108 	.word	0x20000108
 80014d4:	0801dd70 	.word	0x0801dd70
 80014d8:	0801dd3c 	.word	0x0801dd3c

080014dc <CIN_data>:


int CIN_data(PN532* pn532, uint8_t* data_buffer, size_t* data_length) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b0ec      	sub	sp, #432	; 0x1b0
 80014e0:	af04      	add	r7, sp, #16
 80014e2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80014e6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80014ea:	6018      	str	r0, [r3, #0]
 80014ec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80014f0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80014f4:	6019      	str	r1, [r3, #0]
 80014f6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80014fa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80014fe:	601a      	str	r2, [r3, #0]
    uint8_t cmd[5] = {0x00, 0xB0, 0x00, 0x00, 0x00};  // READ BINARY
 8001500:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <CIN_data+0xc4>)
 8001502:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001506:	e892 0003 	ldmia.w	r2, {r0, r1}
 800150a:	6018      	str	r0, [r3, #0]
 800150c:	3304      	adds	r3, #4
 800150e:	7019      	strb	r1, [r3, #0]
    int resp_len;

    uint8_t protected_cmd[MAX_FRAME_SIZE];
    size_t protected_len;

    if (!apply_secure_messaging(cmd, sizeof(cmd), protected_cmd, &protected_len)) {
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	f107 0214 	add.w	r2, r7, #20
 8001518:	f507 70ca 	add.w	r0, r7, #404	; 0x194
 800151c:	2105      	movs	r1, #5
 800151e:	f000 f8e9 	bl	80016f4 <apply_secure_messaging>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <CIN_data+0x50>
        return 0;
 8001528:	2300      	movs	r3, #0
 800152a:	e034      	b.n	8001596 <CIN_data+0xba>
    }

    resp_len = PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, response, sizeof(response), protected_cmd, protected_len, PN532_DEFAULT_TIMEOUT);
 800152c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001530:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	b29b      	uxth	r3, r3
 8001538:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800153c:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8001540:	f5a1 70ca 	sub.w	r0, r1, #404	; 0x194
 8001544:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001548:	9102      	str	r1, [sp, #8]
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	2140      	movs	r1, #64	; 0x40
 8001556:	6800      	ldr	r0, [r0, #0]
 8001558:	f7ff f9ea 	bl	8000930 <PN532_CallFunction>
 800155c:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
    if (resp_len <= 0) {
 8001560:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001564:	2b00      	cmp	r3, #0
 8001566:	dc01      	bgt.n	800156c <CIN_data+0x90>
        return 0;
 8001568:	2300      	movs	r3, #0
 800156a:	e014      	b.n	8001596 <CIN_data+0xba>
    }
    // resp_len / 128
    if (!decrypt_secure_messaging(response, 128, data_buffer, data_length)) {
 800156c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001570:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001574:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001578:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 800157c:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	f000 f95d 	bl	8001844 <decrypt_secure_messaging>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <CIN_data+0xb8>
        return 0;
 8001590:	2300      	movs	r3, #0
 8001592:	e000      	b.n	8001596 <CIN_data+0xba>
    }

    return 1;
 8001594:	2301      	movs	r3, #1
}
 8001596:	4618      	mov	r0, r3
 8001598:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	0801dd78 	.word	0x0801dd78

080015a4 <read_identity_card>:


int read_identity_card(PN532* pn532, const char* CIN_num, const char* birth_date, const char* expiry_date) {
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b0c9      	sub	sp, #292	; 0x124
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80015ae:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 80015b2:	6020      	str	r0, [r4, #0]
 80015b4:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80015b8:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 80015bc:	6001      	str	r1, [r0, #0]
 80015be:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80015c2:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80015c6:	600a      	str	r2, [r1, #0]
 80015c8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80015cc:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80015d0:	6013      	str	r3, [r2, #0]
    uint8_t data_buffer[MAX_FRAME_SIZE];
    size_t data_length;

    calculate_mrz_key(CIN_num, birth_date, expiry_date);
 80015d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015d6:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 80015da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015de:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 80015e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	6809      	ldr	r1, [r1, #0]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	f7ff fbde 	bl	8000db0 <calculate_mrz_key>

    if (!perform_bac(pn532)) {
 80015f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	f7ff fddf 	bl	80011c0 <perform_bac>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d104      	bne.n	8001612 <read_identity_card+0x6e>
        printf("Echec de l'authentification BAC\n");
 8001608:	4834      	ldr	r0, [pc, #208]	; (80016dc <read_identity_card+0x138>)
 800160a:	f01b fb1b 	bl	801cc44 <puts>
        return 0;
 800160e:	2300      	movs	r3, #0
 8001610:	e05e      	b.n	80016d0 <read_identity_card+0x12c>
    }

    if (!CIN_data(pn532, data_buffer, &data_length)) {
 8001612:	f107 0214 	add.w	r2, r7, #20
 8001616:	f107 0118 	add.w	r1, r7, #24
 800161a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800161e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	f7ff ff5a 	bl	80014dc <CIN_data>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d104      	bne.n	8001638 <read_identity_card+0x94>
        printf("Echec de la lecture des donnees\n");
 800162e:	482c      	ldr	r0, [pc, #176]	; (80016e0 <read_identity_card+0x13c>)
 8001630:	f01b fb08 	bl	801cc44 <puts>
        return 0;
 8001634:	2300      	movs	r3, #0
 8001636:	e04b      	b.n	80016d0 <read_identity_card+0x12c>
    }

    printf("Donnees lues avec succes (%d octets)\n", data_length);
 8001638:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800163c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	4827      	ldr	r0, [pc, #156]	; (80016e4 <read_identity_card+0x140>)
 8001646:	f01b fa8f 	bl	801cb68 <iprintf>
    for (size_t i = 0; i < data_length; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001650:	e010      	b.n	8001674 <read_identity_card+0xd0>
        printf("%02X ", data_buffer[i]);
 8001652:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001656:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800165a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4619      	mov	r1, r3
 8001664:	4820      	ldr	r0, [pc, #128]	; (80016e8 <read_identity_card+0x144>)
 8001666:	f01b fa7f 	bl	801cb68 <iprintf>
    for (size_t i = 0; i < data_length; i++) {
 800166a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800166e:	3301      	adds	r3, #1
 8001670:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001674:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001678:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001682:	429a      	cmp	r2, r3
 8001684:	d3e5      	bcc.n	8001652 <read_identity_card+0xae>
    }
    printf("\n");
 8001686:	200a      	movs	r0, #10
 8001688:	f01b fa80 	bl	801cb8c <putchar>
    printf("Donnes character \n");
 800168c:	4817      	ldr	r0, [pc, #92]	; (80016ec <read_identity_card+0x148>)
 800168e:	f01b fad9 	bl	801cc44 <puts>
	for (size_t i = 0; i < data_length; i++) {
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001698:	e010      	b.n	80016bc <read_identity_card+0x118>
		printf("%c ", data_buffer[i]);
 800169a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800169e:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80016a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4619      	mov	r1, r3
 80016ac:	4810      	ldr	r0, [pc, #64]	; (80016f0 <read_identity_card+0x14c>)
 80016ae:	f01b fa5b 	bl	801cb68 <iprintf>
	for (size_t i = 0; i < data_length; i++) {
 80016b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80016b6:	3301      	adds	r3, #1
 80016b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80016bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d3e5      	bcc.n	800169a <read_identity_card+0xf6>
	}

    return 1;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	bf00      	nop
 80016dc:	0801dd80 	.word	0x0801dd80
 80016e0:	0801dda0 	.word	0x0801dda0
 80016e4:	0801ddc0 	.word	0x0801ddc0
 80016e8:	0801dde8 	.word	0x0801dde8
 80016ec:	0801ddf0 	.word	0x0801ddf0
 80016f0:	0801de04 	.word	0x0801de04

080016f4 <apply_secure_messaging>:

// Fonction pour appliquer la messagerie sécurisée
int apply_secure_messaging(uint8_t* cmd, size_t cmd_len, uint8_t* protected_cmd, size_t* protected_len) {
 80016f4:	b5b0      	push	{r4, r5, r7, lr}
 80016f6:	b0da      	sub	sp, #360	; 0x168
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 80016fe:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
 8001702:	6020      	str	r0, [r4, #0]
 8001704:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 8001708:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 800170c:	6001      	str	r1, [r0, #0]
 800170e:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8001712:	f5a1 71b2 	sub.w	r1, r1, #356	; 0x164
 8001716:	600a      	str	r2, [r1, #0]
 8001718:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800171c:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8001720:	6013      	str	r3, [r2, #0]
    uint8_t mac[16];
    uint8_t padded_cmd[MAX_FRAME_SIZE];
    size_t padded_len = ((cmd_len + 7) / 8) * 8; // Padding to multiple of 8 bytes
 8001722:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001726:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3307      	adds	r3, #7
 800172e:	f023 0307 	bic.w	r3, r3, #7
 8001732:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    memcpy(padded_cmd, cmd, cmd_len);
 8001736:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800173a:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 800173e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001742:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001746:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	6819      	ldr	r1, [r3, #0]
 800174e:	f01b fdd3 	bl	801d2f8 <memcpy>
    memset(padded_cmd + cmd_len, 0x00, padded_len - cmd_len);
 8001752:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001756:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800175a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	18d0      	adds	r0, r2, r3
 8001762:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001766:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800176a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	461a      	mov	r2, r3
 8001774:	2100      	movs	r1, #0
 8001776:	f01b fd21 	bl	801d1bc <memset>

    mbedtls_cipher_context_t ctx;
    mbedtls_cipher_init(&ctx);
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	4618      	mov	r0, r3
 8001780:	f006 fb4c 	bl	8007e1c <mbedtls_cipher_init>
    mbedtls_cipher_setup(&ctx, mbedtls_cipher_info_from_type(MBEDTLS_CIPHER_AES_128_CBC)); //  MBEDTLS_CIPHER_AES_128_CMAC
 8001784:	2005      	movs	r0, #5
 8001786:	f006 faef 	bl	8007d68 <mbedtls_cipher_info_from_type>
 800178a:	4602      	mov	r2, r0
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f006 fb78 	bl	8007e88 <mbedtls_cipher_setup>
    mbedtls_cipher_cmac_starts(&ctx, session_keys.Ksmac, 128);
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	4928      	ldr	r1, [pc, #160]	; (8001840 <apply_secure_messaging+0x14c>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f007 fca1 	bl	80090e8 <mbedtls_cipher_cmac_starts>
    mbedtls_cipher_cmac_update(&ctx, padded_cmd, padded_len);
 80017a6:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80017b2:	4618      	mov	r0, r3
 80017b4:	f007 fce4 	bl	8009180 <mbedtls_cipher_cmac_update>
    mbedtls_cipher_cmac_finish(&ctx, mac);
 80017b8:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f007 fe36 	bl	8009434 <mbedtls_cipher_cmac_finish>
    mbedtls_cipher_free(&ctx);
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4618      	mov	r0, r3
 80017ce:	f006 fb32 	bl	8007e36 <mbedtls_cipher_free>

    memcpy(protected_cmd, cmd, cmd_len);
 80017d2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80017d6:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 80017da:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80017de:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 80017e2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80017e6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	6809      	ldr	r1, [r1, #0]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	f01b fd82 	bl	801d2f8 <memcpy>
    memcpy(protected_cmd + cmd_len, mac, 16);
 80017f4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80017f8:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80017fc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001800:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4413      	add	r3, r2
 800180a:	461d      	mov	r5, r3
 800180c:	f507 74aa 	add.w	r4, r7, #340	; 0x154
 8001810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001812:	6028      	str	r0, [r5, #0]
 8001814:	6069      	str	r1, [r5, #4]
 8001816:	60aa      	str	r2, [r5, #8]
 8001818:	60eb      	str	r3, [r5, #12]
    *protected_len = cmd_len + 16;
 800181a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800181e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f103 0210 	add.w	r2, r3, #16
 8001828:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800182c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	601a      	str	r2, [r3, #0]
    return 1;
 8001834:	2301      	movs	r3, #1
}
 8001836:	4618      	mov	r0, r3
 8001838:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 800183c:	46bd      	mov	sp, r7
 800183e:	bdb0      	pop	{r4, r5, r7, pc}
 8001840:	200000e8 	.word	0x200000e8

08001844 <decrypt_secure_messaging>:


int decrypt_secure_messaging(uint8_t* encrypted_data, size_t encrypted_len, uint8_t* decrypted_data, size_t* decrypted_len) {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b0d1      	sub	sp, #324	; 0x144
 8001848:	af02      	add	r7, sp, #8
 800184a:	f507 749c 	add.w	r4, r7, #312	; 0x138
 800184e:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 8001852:	6020      	str	r0, [r4, #0]
 8001854:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001858:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 800185c:	6001      	str	r1, [r0, #0]
 800185e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001862:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8001866:	600a      	str	r2, [r1, #0]
 8001868:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800186c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8001870:	6013      	str	r3, [r2, #0]
    uint8_t iv[16] = {0}; // Initialisation du vecteur
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001878:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
    mbedtls_aes_context aes_ctx;

    mbedtls_aes_init(&aes_ctx);
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	4618      	mov	r0, r3
 800188a:	f001 f863 	bl	8002954 <mbedtls_aes_init>
    mbedtls_aes_setkey_dec(&aes_ctx, session_keys.Ksenc, 128);
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	491e      	ldr	r1, [pc, #120]	; (8001910 <decrypt_secure_messaging+0xcc>)
 8001896:	4618      	mov	r0, r3
 8001898:	f001 fa94 	bl	8002dc4 <mbedtls_aes_setkey_dec>

    if (mbedtls_aes_crypt_cbc(&aes_ctx, MBEDTLS_AES_DECRYPT, encrypted_len, iv, encrypted_data, decrypted_data) != 0) {
 800189c:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80018a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018a4:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80018a8:	f107 0010 	add.w	r0, r7, #16
 80018ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	460b      	mov	r3, r1
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	2100      	movs	r1, #0
 80018ca:	f002 fa35 	bl	8003d38 <mbedtls_aes_crypt_cbc>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <decrypt_secure_messaging+0x9e>
    	mbedtls_aes_free(&aes_ctx);
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 f849 	bl	8002970 <mbedtls_aes_free>
        return 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	e010      	b.n	8001904 <decrypt_secure_messaging+0xc0>
    }

    mbedtls_aes_free(&aes_ctx);
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 f842 	bl	8002970 <mbedtls_aes_free>
    *decrypted_len = encrypted_len;
 80018ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018f0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80018fa:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	601a      	str	r2, [r3, #0]

    return 1;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800190a:	46bd      	mov	sp, r7
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	bf00      	nop
 8001910:	200000d8 	.word	0x200000d8

08001914 <compute_retail_mac>:

void compute_retail_mac(const unsigned char *key, const unsigned char *input, size_t input_len, unsigned char *mac) {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800191a:	af00      	add	r7, sp, #0
 800191c:	f507 740e 	add.w	r4, r7, #568	; 0x238
 8001920:	f5a4 740b 	sub.w	r4, r4, #556	; 0x22c
 8001924:	6020      	str	r0, [r4, #0]
 8001926:	f507 700e 	add.w	r0, r7, #568	; 0x238
 800192a:	f5a0 700c 	sub.w	r0, r0, #560	; 0x230
 800192e:	6001      	str	r1, [r0, #0]
 8001930:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8001934:	f5a1 710d 	sub.w	r1, r1, #564	; 0x234
 8001938:	600a      	str	r2, [r1, #0]
 800193a:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800193e:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8001942:	6013      	str	r3, [r2, #0]
    mbedtls_des_context des_ctx;
    mbedtls_des3_context des3_ctx;
    unsigned char iv[8] = {0};    // Initial IV of zeros
 8001944:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001948:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
    unsigned char tmp[8] = {0};   // Temporary buffer for calculations
 8001954:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001958:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	605a      	str	r2, [r3, #4]

    // Initialize contexts
    mbedtls_des_init(&des_ctx);
 8001964:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001968:	4618      	mov	r0, r3
 800196a:	f008 fc5b 	bl	800a224 <mbedtls_des_init>
    mbedtls_des3_init(&des3_ctx);
 800196e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001972:	4618      	mov	r0, r3
 8001974:	f008 fc73 	bl	800a25e <mbedtls_des3_init>

    // Split the 16-byte key into K1 (first 8 bytes) and K2 (last 8 bytes)
    const unsigned char *K1 = key;
 8001978:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800197c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    const unsigned char *K2 = key + 8;
 8001986:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800198a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3308      	adds	r3, #8
 8001992:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

    // Process all blocks except the last with single DES using K1
    mbedtls_des_setkey_enc(&des_ctx, K1);
 8001996:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800199a:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 800199e:	4618      	mov	r0, r3
 80019a0:	f008 fe64 	bl	800a66c <mbedtls_des_setkey_enc>

    for(size_t i = 0; i < input_len/8 - 1; i++) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 80019aa:	e03a      	b.n	8001a22 <compute_retail_mac+0x10e>
        // XOR with previous result (or IV for first block)
        for(int j = 0; j < 8; j++) {
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 80019b2:	e024      	b.n	80019fe <compute_retail_mac+0xea>
            tmp[j] = iv[j] ^ input[i * 8 + j];
 80019b4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80019b8:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 80019bc:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80019c0:	4413      	add	r3, r2
 80019c2:	781a      	ldrb	r2, [r3, #0]
 80019c4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80019c8:	00d9      	lsls	r1, r3, #3
 80019ca:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80019ce:	440b      	add	r3, r1
 80019d0:	f507 710e 	add.w	r1, r7, #568	; 0x238
 80019d4:	f5a1 710c 	sub.w	r1, r1, #560	; 0x230
 80019d8:	6809      	ldr	r1, [r1, #0]
 80019da:	440b      	add	r3, r1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	4053      	eors	r3, r2
 80019e0:	b2d9      	uxtb	r1, r3
 80019e2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80019e6:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80019ea:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80019ee:	4413      	add	r3, r2
 80019f0:	460a      	mov	r2, r1
 80019f2:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 8; j++) {
 80019f4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80019f8:	3301      	adds	r3, #1
 80019fa:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 80019fe:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001a02:	2b07      	cmp	r3, #7
 8001a04:	ddd6      	ble.n	80019b4 <compute_retail_mac+0xa0>
        }

        // DES encrypt with K1
        mbedtls_des_crypt_ecb(&des_ctx, tmp, iv);
 8001a06:	f107 021c 	add.w	r2, r7, #28
 8001a0a:	f107 0114 	add.w	r1, r7, #20
 8001a0e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001a12:	4618      	mov	r0, r3
 8001a14:	f009 f81c 	bl	800aa50 <mbedtls_des_crypt_ecb>
    for(size_t i = 0; i < input_len/8 - 1; i++) {
 8001a18:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001a22:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001a26:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	08db      	lsrs	r3, r3, #3
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3b9      	bcc.n	80019ac <compute_retail_mac+0x98>
    }

    // Process last block specially (Retail-MAC specific)
    // XOR last input block with previous result
    for(int j = 0; j < 8; j++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001a3e:	e029      	b.n	8001a94 <compute_retail_mac+0x180>
        tmp[j] = iv[j] ^ input[(input_len/8 - 1) * 8 + j];
 8001a40:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001a44:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8001a48:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001a54:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	08db      	lsrs	r3, r3, #3
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	00d9      	lsls	r1, r3, #3
 8001a60:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a64:	440b      	add	r3, r1
 8001a66:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8001a6a:	f5a1 710c 	sub.w	r1, r1, #560	; 0x230
 8001a6e:	6809      	ldr	r1, [r1, #0]
 8001a70:	440b      	add	r3, r1
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4053      	eors	r3, r2
 8001a76:	b2d9      	uxtb	r1, r3
 8001a78:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001a7c:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001a80:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a84:	4413      	add	r3, r2
 8001a86:	460a      	mov	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 8; j++) {
 8001a8a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001a94:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a98:	2b07      	cmp	r3, #7
 8001a9a:	ddd1      	ble.n	8001a40 <compute_retail_mac+0x12c>
    }

    // For last block: DES decrypt with K2, then DES encrypt with K1
    mbedtls_des_setkey_dec(&des_ctx, K2);
 8001a9c:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001aa0:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f008 fdf0 	bl	800a68a <mbedtls_des_setkey_dec>
    mbedtls_des_crypt_ecb(&des_ctx, tmp, tmp);
 8001aaa:	f107 0214 	add.w	r2, r7, #20
 8001aae:	f107 0114 	add.w	r1, r7, #20
 8001ab2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f008 ffca 	bl	800aa50 <mbedtls_des_crypt_ecb>

    mbedtls_des_setkey_enc(&des_ctx, K1);
 8001abc:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001ac0:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f008 fdd1 	bl	800a66c <mbedtls_des_setkey_enc>
    mbedtls_des_crypt_ecb(&des_ctx, tmp, mac);
 8001aca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001ace:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8001ad2:	f107 0114 	add.w	r1, r7, #20
 8001ad6:	f507 70d2 	add.w	r0, r7, #420	; 0x1a4
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	f008 ffb8 	bl	800aa50 <mbedtls_des_crypt_ecb>

    // Clean up
    mbedtls_des_free(&des_ctx);
 8001ae0:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f008 fbaa 	bl	800a23e <mbedtls_des_free>
    mbedtls_des3_free(&des3_ctx);
 8001aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aee:	4618      	mov	r0, r3
 8001af0:	f008 fbc3 	bl	800a27a <mbedtls_des3_free>

}
 8001af4:	bf00      	nop
 8001af6:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}

08001afe <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b06:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b0a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d013      	beq.n	8001b3e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001b16:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b1a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001b1e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001b26:	e000      	b.n	8001b2a <ITM_SendChar+0x2c>
    {
      __NOP();
 8001b28:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001b2a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f9      	beq.n	8001b28 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001b34:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001b3e:	687b      	ldr	r3, [r7, #4]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0c8      	sub	sp, #288	; 0x120
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t buff[255];
  uint8_t uid[MIFARE_UID_MAX_LENGTH];
  int32_t uid_len = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  /* USER CODE END 1 */
  uint8_t indx = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5e:	f018 f9cd 	bl	8019efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b62:	f000 f8af 	bl	8001cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b66:	f000 f96f 	bl	8001e48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b6a:	f000 f943 	bl	8001df4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001b6e:	f000 f913 	bl	8001d98 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	const char* CIN_num = "L898902C<3";
 8001b72:	4b46      	ldr	r3, [pc, #280]	; (8001c8c <main+0x140>)
 8001b74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	const char* birth_date = "6908061";     // Format YYMMDD
 8001b78:	4b45      	ldr	r3, [pc, #276]	; (8001c90 <main+0x144>)
 8001b7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	const char* expiry_date = "9406236";    // Format YYMMDD
 8001b7e:	4b45      	ldr	r3, [pc, #276]	; (8001c94 <main+0x148>)
 8001b80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Start \n");
 8001b84:	4844      	ldr	r0, [pc, #272]	; (8001c98 <main+0x14c>)
 8001b86:	f01b f85d 	bl	801cc44 <puts>

  PN532_I2C_Init(&pn532);
 8001b8a:	4844      	ldr	r0, [pc, #272]	; (8001c9c <main+0x150>)
 8001b8c:	f000 fac6 	bl	800211c <PN532_I2C_Init>
  PN532_GetFirmwareVersion(&pn532, buff);
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4619      	mov	r1, r3
 8001b96:	4841      	ldr	r0, [pc, #260]	; (8001c9c <main+0x150>)
 8001b98:	f7fe fff0 	bl	8000b7c <PN532_GetFirmwareVersion>
  if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK) {
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	483e      	ldr	r0, [pc, #248]	; (8001c9c <main+0x150>)
 8001ba4:	f7fe ffea 	bl	8000b7c <PN532_GetFirmwareVersion>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d115      	bne.n	8001bda <main+0x8e>
     printf("Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
 8001bae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001bb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bb6:	785b      	ldrb	r3, [r3, #1]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001bbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bc2:	789b      	ldrb	r3, [r3, #2]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4836      	ldr	r0, [pc, #216]	; (8001ca0 <main+0x154>)
 8001bc8:	f01a ffce 	bl	801cb68 <iprintf>
  }
  else {
     while(1);
  }
  PN532_SamConfiguration(&pn532);
 8001bcc:	4833      	ldr	r0, [pc, #204]	; (8001c9c <main+0x150>)
 8001bce:	f7fe fff9 	bl	8000bc4 <PN532_SamConfiguration>
  printf("Waiting for RFID/NFC card...\r\n");
 8001bd2:	4834      	ldr	r0, [pc, #208]	; (8001ca4 <main+0x158>)
 8001bd4:	f01b f836 	bl	801cc44 <puts>
 8001bd8:	e000      	b.n	8001bdc <main+0x90>
     while(1);
 8001bda:	e7fe      	b.n	8001bda <main+0x8e>
  while (1)
  {
    /* USER CODE END WHILE */
	uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8001bdc:	4639      	mov	r1, r7
 8001bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be2:	2200      	movs	r2, #0
 8001be4:	482d      	ldr	r0, [pc, #180]	; (8001c9c <main+0x150>)
 8001be6:	f7ff f80f 	bl	8000c08 <PN532_ReadPassiveTarget>
 8001bea:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	if (uid_len == PN532_STATUS_ERROR) {
 8001bee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf6:	d103      	bne.n	8001c00 <main+0xb4>
	  	printf("Don't found card \n");
 8001bf8:	482b      	ldr	r0, [pc, #172]	; (8001ca8 <main+0x15c>)
 8001bfa:	f01b f823 	bl	801cc44 <puts>
 8001bfe:	e022      	b.n	8001c46 <main+0xfa>
	} else {
		indx = 1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	    printf("Found card with UID: ");
 8001c06:	4829      	ldr	r0, [pc, #164]	; (8001cac <main+0x160>)
 8001c08:	f01a ffae 	bl	801cb68 <iprintf>
	    for (uint8_t i = 0; i < uid_len; i++) {
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8001c12:	e00f      	b.n	8001c34 <main+0xe8>
	  	    printf("%02x ", uid[i]);
 8001c14:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001c18:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001c1c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	4619      	mov	r1, r3
 8001c24:	4822      	ldr	r0, [pc, #136]	; (8001cb0 <main+0x164>)
 8001c26:	f01a ff9f 	bl	801cb68 <iprintf>
	    for (uint8_t i = 0; i < uid_len; i++) {
 8001c2a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8001c34:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001c38:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	dce9      	bgt.n	8001c14 <main+0xc8>
	    }
	  	printf("\r\n");
 8001c40:	481c      	ldr	r0, [pc, #112]	; (8001cb4 <main+0x168>)
 8001c42:	f01a ffff 	bl	801cc44 <puts>
	  	   //break;
	}
	if(indx == 1){
 8001c46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d1c6      	bne.n	8001bdc <main+0x90>
		printf("read data ... \n");
 8001c4e:	481a      	ldr	r0, [pc, #104]	; (8001cb8 <main+0x16c>)
 8001c50:	f01a fff8 	bl	801cc44 <puts>
		// Tentative de lecture de la carte
		if (read_identity_card(&pn532, CIN_num, birth_date, expiry_date) == 1) {
 8001c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c58:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001c5c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001c60:	480e      	ldr	r0, [pc, #56]	; (8001c9c <main+0x150>)
 8001c62:	f7ff fc9f 	bl	80015a4 <read_identity_card>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d103      	bne.n	8001c74 <main+0x128>
			printf("lecture reussie !\n");
 8001c6c:	4813      	ldr	r0, [pc, #76]	; (8001cbc <main+0x170>)
 8001c6e:	f01a ffe9 	bl	801cc44 <puts>
 8001c72:	e002      	b.n	8001c7a <main+0x12e>
		} else {
			printf("echec de lecture\n");
 8001c74:	4812      	ldr	r0, [pc, #72]	; (8001cc0 <main+0x174>)
 8001c76:	f01a ffe5 	bl	801cc44 <puts>
		}

		HAL_Delay(1000);
 8001c7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c7e:	f018 f9af 	bl	8019fe0 <HAL_Delay>
		indx = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8001c88:	e7a8      	b.n	8001bdc <main+0x90>
 8001c8a:	bf00      	nop
 8001c8c:	0801de08 	.word	0x0801de08
 8001c90:	0801de14 	.word	0x0801de14
 8001c94:	0801de1c 	.word	0x0801de1c
 8001c98:	0801de24 	.word	0x0801de24
 8001c9c:	20000118 	.word	0x20000118
 8001ca0:	0801de2c 	.word	0x0801de2c
 8001ca4:	0801de58 	.word	0x0801de58
 8001ca8:	0801de78 	.word	0x0801de78
 8001cac:	0801de8c 	.word	0x0801de8c
 8001cb0:	0801dea4 	.word	0x0801dea4
 8001cb4:	0801deac 	.word	0x0801deac
 8001cb8:	0801deb0 	.word	0x0801deb0
 8001cbc:	0801dec0 	.word	0x0801dec0
 8001cc0:	0801ded4 	.word	0x0801ded4

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b094      	sub	sp, #80	; 0x50
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	f107 0320 	add.w	r3, r7, #32
 8001cce:	2230      	movs	r2, #48	; 0x30
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f01b fa72 	bl	801d1bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d20:	2302      	movs	r3, #2
 8001d22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d24:	2301      	movs	r3, #1
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d28:	2310      	movs	r3, #16
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d30:	2300      	movs	r3, #0
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d34:	2310      	movs	r3, #16
 8001d36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d42:	2304      	movs	r3, #4
 8001d44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d46:	f107 0320 	add.w	r3, r7, #32
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f019 fbea 	bl	801b524 <HAL_RCC_OscConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d56:	f000 f901 	bl	8001f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5a:	230f      	movs	r3, #15
 8001d5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	2102      	movs	r1, #2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f019 fe4c 	bl	801ba14 <HAL_RCC_ClockConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d82:	f000 f8eb 	bl	8001f5c <Error_Handler>
  }
}
 8001d86:	bf00      	nop
 8001d88:	3750      	adds	r7, #80	; 0x50
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40007000 	.word	0x40007000

08001d98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001d9e:	4a13      	ldr	r2, [pc, #76]	; (8001dec <MX_I2C1_Init+0x54>)
 8001da0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <MX_I2C1_Init+0x58>)
 8001da6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001db6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dd4:	4804      	ldr	r0, [pc, #16]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001dd6:	f018 fbab 	bl	801a530 <HAL_I2C_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001de0:	f000 f8bc 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000130 	.word	0x20000130
 8001dec:	40005400 	.word	0x40005400
 8001df0:	000186a0 	.word	0x000186a0

08001df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <MX_USART2_UART_Init+0x50>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e2c:	f01a f812 	bl	801be54 <HAL_UART_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e36:	f000 f891 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000184 	.word	0x20000184
 8001e44:	40004400 	.word	0x40004400

08001e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <MX_GPIO_Init+0xd0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a2c      	ldr	r2, [pc, #176]	; (8001f18 <MX_GPIO_Init+0xd0>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <MX_GPIO_Init+0xd0>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <MX_GPIO_Init+0xd0>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a25      	ldr	r2, [pc, #148]	; (8001f18 <MX_GPIO_Init+0xd0>)
 8001e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <MX_GPIO_Init+0xd0>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <MX_GPIO_Init+0xd0>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	; (8001f18 <MX_GPIO_Init+0xd0>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <MX_GPIO_Init+0xd0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <MX_GPIO_Init+0xd0>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <MX_GPIO_Init+0xd0>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <MX_GPIO_Init+0xd0>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_Led_GPIO_Port, G_Led_Pin, GPIO_PIN_SET);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2120      	movs	r1, #32
 8001ed2:	4812      	ldr	r0, [pc, #72]	; (8001f1c <MX_GPIO_Init+0xd4>)
 8001ed4:	f018 fb12 	bl	801a4fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ede:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	480c      	ldr	r0, [pc, #48]	; (8001f20 <MX_GPIO_Init+0xd8>)
 8001ef0:	f018 f980 	bl	801a1f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : G_Led_Pin */
  GPIO_InitStruct.Pin = G_Led_Pin;
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_Led_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4804      	ldr	r0, [pc, #16]	; (8001f1c <MX_GPIO_Init+0xd4>)
 8001f0c:	f018 f972 	bl	801a1f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020800 	.word	0x40020800

08001f24 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	e009      	b.n	8001f4a <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar((*ptr++));
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	60ba      	str	r2, [r7, #8]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fddd 	bl	8001afe <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3301      	adds	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	dbf1      	blt.n	8001f36 <_write+0x12>
  }
  return len;
 8001f52:	687b      	ldr	r3, [r7, #4]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f60:	b672      	cpsid	i
}
 8001f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <Error_Handler+0x8>

08001f66 <PN532_Reset>:

extern I2C_HandleTypeDef hi2c1;


/*************Reset and Log implements*****************/
int PN532_Reset(void) {
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
    HAL_Delay(100);
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_RESET);
    HAL_Delay(500);
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
    HAL_Delay(100);*/
    return PN532_STATUS_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <PN532_Log>:

void PN532_Log(const char* log) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4803      	ldr	r0, [pc, #12]	; (8001f90 <PN532_Log+0x18>)
 8001f84:	f01a fdf0 	bl	801cb68 <iprintf>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	0801dee8 	.word	0x0801dee8

08001f94 <i2c_read>:
    PN532_SPI_Init(pn532);
}


/********************I2C************************/
void i2c_read(uint8_t* data, uint16_t count) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Receive(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	220a      	movs	r2, #10
 8001fa4:	9200      	str	r2, [sp, #0]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	2148      	movs	r1, #72	; 0x48
 8001faa:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <i2c_read+0x24>)
 8001fac:	f018 fd02 	bl	801a9b4 <HAL_I2C_Master_Receive>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000130 	.word	0x20000130

08001fbc <i2c_write>:

void i2c_write(uint8_t* data, uint16_t count) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8001fc8:	887b      	ldrh	r3, [r7, #2]
 8001fca:	220a      	movs	r2, #10
 8001fcc:	9200      	str	r2, [sp, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	2148      	movs	r1, #72	; 0x48
 8001fd2:	4803      	ldr	r0, [pc, #12]	; (8001fe0 <i2c_write+0x24>)
 8001fd4:	f018 fbf0 	bl	801a7b8 <HAL_I2C_Master_Transmit>
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000130 	.word	0x20000130

08001fe4 <PN532_I2C_ReadData>:

int PN532_I2C_ReadData(uint8_t* data, uint16_t count) {
 8001fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fe8:	b087      	sub	sp, #28
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	807b      	strh	r3, [r7, #2]
 8001ff2:	466b      	mov	r3, sp
 8001ff4:	461e      	mov	r6, r3
    uint8_t status[] = {0x00};
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	723b      	strb	r3, [r7, #8]
    uint8_t frame[count + 1];
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	1c59      	adds	r1, r3, #1
 8001ffe:	1e4b      	subs	r3, r1, #1
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	460a      	mov	r2, r1
 8002004:	2300      	movs	r3, #0
 8002006:	4690      	mov	r8, r2
 8002008:	4699      	mov	r9, r3
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800201a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800201e:	460a      	mov	r2, r1
 8002020:	2300      	movs	r3, #0
 8002022:	4614      	mov	r4, r2
 8002024:	461d      	mov	r5, r3
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	00eb      	lsls	r3, r5, #3
 8002030:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002034:	00e2      	lsls	r2, r4, #3
 8002036:	460b      	mov	r3, r1
 8002038:	3307      	adds	r3, #7
 800203a:	08db      	lsrs	r3, r3, #3
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	ebad 0d03 	sub.w	sp, sp, r3
 8002042:	466b      	mov	r3, sp
 8002044:	3300      	adds	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
    i2c_read(status, sizeof(status));
 8002048:	f107 0308 	add.w	r3, r7, #8
 800204c:	2101      	movs	r1, #1
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ffa0 	bl	8001f94 <i2c_read>
    if (status[0] != PN532_I2C_READY) {
 8002054:	7a3b      	ldrb	r3, [r7, #8]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d002      	beq.n	8002060 <PN532_I2C_ReadData+0x7c>
        return PN532_STATUS_ERROR;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
 800205e:	e01a      	b.n	8002096 <PN532_I2C_ReadData+0xb2>
    }
    i2c_read(frame, count + 1);
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	3301      	adds	r3, #1
 8002064:	b29b      	uxth	r3, r3
 8002066:	4619      	mov	r1, r3
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7ff ff93 	bl	8001f94 <i2c_read>
    for (uint8_t i = 0; i < count; i++) {
 800206e:	2300      	movs	r3, #0
 8002070:	75fb      	strb	r3, [r7, #23]
 8002072:	e00a      	b.n	800208a <PN532_I2C_ReadData+0xa6>
        data[i] = frame[i + 1];
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	440b      	add	r3, r1
 800207e:	68f9      	ldr	r1, [r7, #12]
 8002080:	5c8a      	ldrb	r2, [r1, r2]
 8002082:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	3301      	adds	r3, #1
 8002088:	75fb      	strb	r3, [r7, #23]
 800208a:	7dfb      	ldrb	r3, [r7, #23]
 800208c:	b29b      	uxth	r3, r3
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8ef      	bhi.n	8002074 <PN532_I2C_ReadData+0x90>
    }
    return PN532_STATUS_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	46b5      	mov	sp, r6
}
 8002098:	4618      	mov	r0, r3
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080020a2 <PN532_I2C_WriteData>:

int PN532_I2C_WriteData(uint8_t *data, uint16_t count) {
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	807b      	strh	r3, [r7, #2]
    i2c_write(data, count);
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	4619      	mov	r1, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ff82 	bl	8001fbc <i2c_write>
    return PN532_STATUS_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <PN532_I2C_WaitReady>:

bool PN532_I2C_WaitReady(uint32_t timeout) {
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {0x00};
 80020ca:	2300      	movs	r3, #0
 80020cc:	723b      	strb	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 80020ce:	f017 ff7b 	bl	8019fc8 <HAL_GetTick>
 80020d2:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 80020d4:	e00d      	b.n	80020f2 <PN532_I2C_WaitReady+0x30>
        i2c_read(status, sizeof(status));
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	2101      	movs	r1, #1
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff59 	bl	8001f94 <i2c_read>
        if (status[0] == PN532_I2C_READY) {
 80020e2:	7a3b      	ldrb	r3, [r7, #8]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <PN532_I2C_WaitReady+0x2a>
            return true;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e00b      	b.n	8002104 <PN532_I2C_WaitReady+0x42>
        } else {
            HAL_Delay(5);
 80020ec:	2005      	movs	r0, #5
 80020ee:	f017 ff77 	bl	8019fe0 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 80020f2:	f017 ff69 	bl	8019fc8 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d8e9      	bhi.n	80020d6 <PN532_I2C_WaitReady+0x14>
        }
    }
    return false;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <PN532_I2C_Wakeup>:

int PN532_I2C_Wakeup(void) {
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
    HAL_Delay(100);
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_RESET);
    HAL_Delay(100);
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_SET);
    HAL_Delay(500);*/
    return PN532_STATUS_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <PN532_I2C_Init>:

void PN532_I2C_Init(PN532* pn532) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <PN532_I2C_Init+0x3c>)
 8002128:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_I2C_ReadData;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a0b      	ldr	r2, [pc, #44]	; (800215c <PN532_I2C_Init+0x40>)
 800212e:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_I2C_WriteData;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <PN532_I2C_Init+0x44>)
 8002134:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_I2C_WaitReady;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <PN532_I2C_Init+0x48>)
 800213a:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_I2C_Wakeup;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <PN532_I2C_Init+0x4c>)
 8002140:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a09      	ldr	r2, [pc, #36]	; (800216c <PN532_I2C_Init+0x50>)
 8002146:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	4798      	blx	r3
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	08001f67 	.word	0x08001f67
 800215c:	08001fe5 	.word	0x08001fe5
 8002160:	080020a3 	.word	0x080020a3
 8002164:	080020c3 	.word	0x080020c3
 8002168:	0800210d 	.word	0x0800210d
 800216c:	08001f79 	.word	0x08001f79

08002170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_MspInit+0x4c>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <HAL_MspInit+0x4c>)
 8002180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_MspInit+0x4c>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_MspInit+0x4c>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <HAL_MspInit+0x4c>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_MspInit+0x4c>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021ae:	2007      	movs	r0, #7
 80021b0:	f017 ffec 	bl	801a18c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800

080021c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a19      	ldr	r2, [pc, #100]	; (8002244 <HAL_I2C_MspInit+0x84>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d12c      	bne.n	800223c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_I2C_MspInit+0x88>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a17      	ldr	r2, [pc, #92]	; (8002248 <HAL_I2C_MspInit+0x88>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_I2C_MspInit+0x88>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002204:	2312      	movs	r3, #18
 8002206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220c:	2303      	movs	r3, #3
 800220e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002210:	2304      	movs	r3, #4
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4619      	mov	r1, r3
 800221a:	480c      	ldr	r0, [pc, #48]	; (800224c <HAL_I2C_MspInit+0x8c>)
 800221c:	f017 ffea 	bl	801a1f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_I2C_MspInit+0x88>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	4a07      	ldr	r2, [pc, #28]	; (8002248 <HAL_I2C_MspInit+0x88>)
 800222a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800222e:	6413      	str	r3, [r2, #64]	; 0x40
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_I2C_MspInit+0x88>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40005400 	.word	0x40005400
 8002248:	40023800 	.word	0x40023800
 800224c:	40020400 	.word	0x40020400

08002250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <HAL_UART_MspInit+0x84>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d12b      	bne.n	80022ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_UART_MspInit+0x88>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_UART_MspInit+0x88>)
 800227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_UART_MspInit+0x88>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_UART_MspInit+0x88>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_UART_MspInit+0x88>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_UART_MspInit+0x88>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022aa:	230c      	movs	r3, #12
 80022ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ba:	2307      	movs	r3, #7
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <HAL_UART_MspInit+0x8c>)
 80022c6:	f017 ff95 	bl	801a1f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022ca:	bf00      	nop
 80022cc:	3728      	adds	r7, #40	; 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40004400 	.word	0x40004400
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e4:	e7fe      	b.n	80022e4 <NMI_Handler+0x4>

080022e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <HardFault_Handler+0x4>

080022ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <MemManage_Handler+0x4>

080022f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <BusFault_Handler+0x4>

080022f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <UsageFault_Handler+0x4>

080022fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800232c:	f017 fe38 	bl	8019fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}

08002334 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e00a      	b.n	800235c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002346:	f3af 8000 	nop.w
 800234a:	4601      	mov	r1, r0
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	b2ca      	uxtb	r2, r1
 8002354:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3301      	adds	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	dbf0      	blt.n	8002346 <_read+0x12>
  }

  return len;
 8002364:	687b      	ldr	r3, [r7, #4]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_close>:
  }
  return len;
}

int _close(int file)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002396:	605a      	str	r2, [r3, #4]
  return 0;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <_isatty>:

int _isatty(int file)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023ae:	2301      	movs	r3, #1
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_open>:

int _open(char *path, int flags, ...)
{
 80023d6:	b40e      	push	{r1, r2, r3}
 80023d8:	b480      	push	{r7}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	b003      	add	sp, #12
 80023f0:	4770      	bx	lr
	...

080023f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023fc:	4a14      	ldr	r2, [pc, #80]	; (8002450 <_sbrk+0x5c>)
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <_sbrk+0x60>)
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002408:	4b13      	ldr	r3, [pc, #76]	; (8002458 <_sbrk+0x64>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <_sbrk+0x64>)
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <_sbrk+0x68>)
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <_sbrk+0x64>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	429a      	cmp	r2, r3
 8002422:	d207      	bcs.n	8002434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002424:	f01a ff3a 	bl	801d29c <__errno>
 8002428:	4603      	mov	r3, r0
 800242a:	220c      	movs	r2, #12
 800242c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	e009      	b.n	8002448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <_sbrk+0x64>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	4a05      	ldr	r2, [pc, #20]	; (8002458 <_sbrk+0x64>)
 8002444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002446:	68fb      	ldr	r3, [r7, #12]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20020000 	.word	0x20020000
 8002454:	00000400 	.word	0x00000400
 8002458:	200001cc 	.word	0x200001cc
 800245c:	20002550 	.word	0x20002550

08002460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <SystemInit+0x20>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <SystemInit+0x20>)
 800246c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <mbedtls_ctr_increment_counter>:
 *                      This is quite performance-sensitive for AES-CTR and CTR-DRBG.
 *
 * \param n             A 16-byte value to be incremented.
 */
static inline void mbedtls_ctr_increment_counter(uint8_t n[16])
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
    // The 32-bit version seems to perform about the same as a 64-bit version
    // on 64-bit architectures, so no need to define a 64-bit version.
    for (int i = 3;; i--) {
 800248c:	2303      	movs	r3, #3
 800248e:	61fb      	str	r3, [r7, #28]
        uint32_t x = MBEDTLS_GET_UINT32_BE(n, i << 2);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	461a      	mov	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	681b      	ldr	r3, [r3, #0]
    r = *p32;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint32_unaligned_t *p32 = (mbedtls_uint32_unaligned_t *) p;
    r = p32->x;
#else
    memcpy(&r, p, sizeof(r));
 80024a0:	60bb      	str	r3, [r7, #8]
#endif
    return r;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	ba1b      	rev	r3, r3
 80024a6:	61bb      	str	r3, [r7, #24]
        x += 1;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	3301      	adds	r3, #1
 80024ac:	61bb      	str	r3, [r7, #24]
        MBEDTLS_PUT_UINT32_BE(x, n, i << 2);
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	461a      	mov	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	441a      	add	r2, r3
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	ba1b      	rev	r3, r3
 80024bc:	613a      	str	r2, [r7, #16]
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fa      	ldr	r2, [r7, #12]
    *p32 = x;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint32_unaligned_t *p32 = (mbedtls_uint32_unaligned_t *) p;
    p32->x = x;
#else
    memcpy(p, &x, sizeof(x));
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	601a      	str	r2, [r3, #0]
#endif
}
 80024c6:	bf00      	nop
        if (x != 0 || i == 0) {
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <mbedtls_ctr_increment_counter+0x58>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <mbedtls_ctr_increment_counter+0x58>
    for (int i = 3;; i--) {
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e7d9      	b.n	8002490 <mbedtls_ctr_increment_counter+0xc>
            break;
        }
    }
}
 80024dc:	bf00      	nop
 80024de:	3724      	adds	r7, #36	; 0x24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <aes_gen_tables>:
#define MUL(x, y) (((x) && (y)) ? pow[(log[(x)]+log[(y)]) % 255] : 0)

MBEDTLS_MAYBE_UNUSED static int aes_init_done = 0;

MBEDTLS_MAYBE_UNUSED static void aes_gen_tables(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 80024ee:	af00      	add	r7, sp, #0
    uint8_t log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for (i = 0, x = 1; i < 256; i++) {
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80024f6:	2301      	movs	r3, #1
 80024f8:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 80024fc:	e02b      	b.n	8002556 <aes_gen_tables+0x6e>
        pow[i] = x;
 80024fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002502:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8002506:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800250a:	4413      	add	r3, r2
 800250c:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8002510:	701a      	strb	r2, [r3, #0]
        log[x] = (uint8_t) i;
 8002512:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002516:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800251a:	b2d1      	uxtb	r1, r2
 800251c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002520:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8002524:	54d1      	strb	r1, [r2, r3]
        x ^= XTIME(x);
 8002526:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	b25b      	sxtb	r3, r3
 800252e:	f997 2203 	ldrsb.w	r2, [r7, #515]	; 0x203
 8002532:	2a00      	cmp	r2, #0
 8002534:	da01      	bge.n	800253a <aes_gen_tables+0x52>
 8002536:	221b      	movs	r2, #27
 8002538:	e000      	b.n	800253c <aes_gen_tables+0x54>
 800253a:	2200      	movs	r2, #0
 800253c:	4053      	eors	r3, r2
 800253e:	b25a      	sxtb	r2, r3
 8002540:	f997 3203 	ldrsb.w	r3, [r7, #515]	; 0x203
 8002544:	4053      	eors	r3, r2
 8002546:	b25b      	sxtb	r3, r3
 8002548:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
    for (i = 0, x = 1; i < 256; i++) {
 800254c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002550:	3301      	adds	r3, #1
 8002552:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002556:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800255a:	2bff      	cmp	r3, #255	; 0xff
 800255c:	ddcf      	ble.n	80024fe <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for (i = 0, x = 1; i < 10; i++) {
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002564:	2301      	movs	r3, #1
 8002566:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 800256a:	e01a      	b.n	80025a2 <aes_gen_tables+0xba>
        round_constants[i] = x;
 800256c:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8002570:	49cd      	ldr	r1, [pc, #820]	; (80028a8 <aes_gen_tables+0x3c0>)
 8002572:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = XTIME(x);
 800257a:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	b25b      	sxtb	r3, r3
 8002582:	f997 2203 	ldrsb.w	r2, [r7, #515]	; 0x203
 8002586:	2a00      	cmp	r2, #0
 8002588:	da01      	bge.n	800258e <aes_gen_tables+0xa6>
 800258a:	221b      	movs	r2, #27
 800258c:	e000      	b.n	8002590 <aes_gen_tables+0xa8>
 800258e:	2200      	movs	r2, #0
 8002590:	4053      	eors	r3, r2
 8002592:	b25b      	sxtb	r3, r3
 8002594:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
    for (i = 0, x = 1; i < 10; i++) {
 8002598:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800259c:	3301      	adds	r3, #1
 800259e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80025a2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80025a6:	2b09      	cmp	r3, #9
 80025a8:	dde0      	ble.n	800256c <aes_gen_tables+0x84>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 80025aa:	4bc0      	ldr	r3, [pc, #768]	; (80028ac <aes_gen_tables+0x3c4>)
 80025ac:	2263      	movs	r2, #99	; 0x63
 80025ae:	701a      	strb	r2, [r3, #0]
#if defined(MBEDTLS_AES_NEED_REVERSE_TABLES)
    RSb[0x63] = 0x00;
 80025b0:	4bbf      	ldr	r3, [pc, #764]	; (80028b0 <aes_gen_tables+0x3c8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
#endif

    for (i = 1; i < 256; i++) {
 80025b8:	2301      	movs	r3, #1
 80025ba:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80025be:	e07a      	b.n	80026b6 <aes_gen_tables+0x1ce>
        x = pow[255 - log[i]];
 80025c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c4:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 80025c8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80025cc:	4413      	add	r3, r2
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80025d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025d8:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80025dc:	5cd3      	ldrb	r3, [r2, r3]
 80025de:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203

        y  = x; y = (y << 1) | (y >> 7);
 80025e2:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80025e6:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
 80025ea:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	b25a      	sxtb	r2, r3
 80025f2:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 80025f6:	09db      	lsrs	r3, r3, #7
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	4313      	orrs	r3, r2
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        x ^= y; y = (y << 1) | (y >> 7);
 8002604:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8002608:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 800260c:	4053      	eors	r3, r2
 800260e:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8002612:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	b25a      	sxtb	r2, r3
 800261a:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 800261e:	09db      	lsrs	r3, r3, #7
 8002620:	b2db      	uxtb	r3, r3
 8002622:	b25b      	sxtb	r3, r3
 8002624:	4313      	orrs	r3, r2
 8002626:	b25b      	sxtb	r3, r3
 8002628:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        x ^= y; y = (y << 1) | (y >> 7);
 800262c:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8002630:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8002634:	4053      	eors	r3, r2
 8002636:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 800263a:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	b25a      	sxtb	r2, r3
 8002642:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8002646:	09db      	lsrs	r3, r3, #7
 8002648:	b2db      	uxtb	r3, r3
 800264a:	b25b      	sxtb	r3, r3
 800264c:	4313      	orrs	r3, r2
 800264e:	b25b      	sxtb	r3, r3
 8002650:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        x ^= y; y = (y << 1) | (y >> 7);
 8002654:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8002658:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 800265c:	4053      	eors	r3, r2
 800265e:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8002662:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	b25a      	sxtb	r2, r3
 800266a:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 800266e:	09db      	lsrs	r3, r3, #7
 8002670:	b2db      	uxtb	r3, r3
 8002672:	b25b      	sxtb	r3, r3
 8002674:	4313      	orrs	r3, r2
 8002676:	b25b      	sxtb	r3, r3
 8002678:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        x ^= y ^ 0x63;
 800267c:	f897 2202 	ldrb.w	r2, [r7, #514]	; 0x202
 8002680:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002684:	4053      	eors	r3, r2
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f083 0363 	eor.w	r3, r3, #99	; 0x63
 800268c:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203

        FSb[i] = x;
 8002690:	4a86      	ldr	r2, [pc, #536]	; (80028ac <aes_gen_tables+0x3c4>)
 8002692:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002696:	4413      	add	r3, r2
 8002698:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 800269c:	701a      	strb	r2, [r3, #0]
#if defined(MBEDTLS_AES_NEED_REVERSE_TABLES)
        RSb[x] = (unsigned char) i;
 800269e:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80026a2:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80026a6:	b2d1      	uxtb	r1, r2
 80026a8:	4a81      	ldr	r2, [pc, #516]	; (80028b0 <aes_gen_tables+0x3c8>)
 80026aa:	54d1      	strb	r1, [r2, r3]
    for (i = 1; i < 256; i++) {
 80026ac:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80026b0:	3301      	adds	r3, #1
 80026b2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80026b6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80026ba:	2bff      	cmp	r3, #255	; 0xff
 80026bc:	dd80      	ble.n	80025c0 <aes_gen_tables+0xd8>
    }

    /*
     * generate the forward and reverse tables
     */
    for (i = 0; i < 256; i++) {
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80026c4:	e131      	b.n	800292a <aes_gen_tables+0x442>
        x = FSb[i];
 80026c6:	4a79      	ldr	r2, [pc, #484]	; (80028ac <aes_gen_tables+0x3c4>)
 80026c8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
        y = XTIME(x);
 80026d4:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	b25b      	sxtb	r3, r3
 80026dc:	f997 2203 	ldrsb.w	r2, [r7, #515]	; 0x203
 80026e0:	2a00      	cmp	r2, #0
 80026e2:	da01      	bge.n	80026e8 <aes_gen_tables+0x200>
 80026e4:	221b      	movs	r2, #27
 80026e6:	e000      	b.n	80026ea <aes_gen_tables+0x202>
 80026e8:	2200      	movs	r2, #0
 80026ea:	4053      	eors	r3, r2
 80026ec:	b25b      	sxtb	r3, r3
 80026ee:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        z = y ^ x;
 80026f2:	f897 2202 	ldrb.w	r2, [r7, #514]	; 0x202
 80026f6:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80026fa:	4053      	eors	r3, r2
 80026fc:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201

        FT0[i] = ((uint32_t) y) ^
 8002700:	f897 2202 	ldrb.w	r2, [r7, #514]	; 0x202
                 ((uint32_t) x <<  8) ^
 8002704:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002708:	021b      	lsls	r3, r3, #8
        FT0[i] = ((uint32_t) y) ^
 800270a:	405a      	eors	r2, r3
                 ((uint32_t) x << 16) ^
 800270c:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002710:	041b      	lsls	r3, r3, #16
                 ((uint32_t) x <<  8) ^
 8002712:	405a      	eors	r2, r3
                 ((uint32_t) z << 24);
 8002714:	f897 3201 	ldrb.w	r3, [r7, #513]	; 0x201
 8002718:	061b      	lsls	r3, r3, #24
                 ((uint32_t) x << 16) ^
 800271a:	405a      	eors	r2, r3
        FT0[i] = ((uint32_t) y) ^
 800271c:	4965      	ldr	r1, [pc, #404]	; (80028b4 <aes_gen_tables+0x3cc>)
 800271e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8(FT0[i]);
 8002726:	4a63      	ldr	r2, [pc, #396]	; (80028b4 <aes_gen_tables+0x3cc>)
 8002728:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800272c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002730:	ea4f 6233 	mov.w	r2, r3, ror #24
 8002734:	4960      	ldr	r1, [pc, #384]	; (80028b8 <aes_gen_tables+0x3d0>)
 8002736:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8(FT1[i]);
 800273e:	4a5e      	ldr	r2, [pc, #376]	; (80028b8 <aes_gen_tables+0x3d0>)
 8002740:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002748:	ea4f 6233 	mov.w	r2, r3, ror #24
 800274c:	495b      	ldr	r1, [pc, #364]	; (80028bc <aes_gen_tables+0x3d4>)
 800274e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8(FT2[i]);
 8002756:	4a59      	ldr	r2, [pc, #356]	; (80028bc <aes_gen_tables+0x3d4>)
 8002758:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002760:	ea4f 6233 	mov.w	r2, r3, ror #24
 8002764:	4956      	ldr	r1, [pc, #344]	; (80028c0 <aes_gen_tables+0x3d8>)
 8002766:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

#if defined(MBEDTLS_AES_NEED_REVERSE_TABLES)
        x = RSb[i];
 800276e:	4a50      	ldr	r2, [pc, #320]	; (80028b0 <aes_gen_tables+0x3c8>)
 8002770:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002774:	4413      	add	r3, r2
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203

        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^
 800277c:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01f      	beq.n	80027c4 <aes_gen_tables+0x2dc>
 8002784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002788:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800278c:	7b9b      	ldrb	r3, [r3, #14]
 800278e:	4619      	mov	r1, r3
 8002790:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002794:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002798:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800279c:	5cd3      	ldrb	r3, [r2, r3]
 800279e:	18ca      	adds	r2, r1, r3
 80027a0:	4b48      	ldr	r3, [pc, #288]	; (80028c4 <aes_gen_tables+0x3dc>)
 80027a2:	fb83 1302 	smull	r1, r3, r3, r2
 80027a6:	4413      	add	r3, r2
 80027a8:	11d9      	asrs	r1, r3, #7
 80027aa:	17d3      	asrs	r3, r2, #31
 80027ac:	1ac9      	subs	r1, r1, r3
 80027ae:	460b      	mov	r3, r1
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	1a5b      	subs	r3, r3, r1
 80027b4:	1ad1      	subs	r1, r2, r3
 80027b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027be:	5c5b      	ldrb	r3, [r3, r1]
 80027c0:	4618      	mov	r0, r3
 80027c2:	e000      	b.n	80027c6 <aes_gen_tables+0x2de>
 80027c4:	2000      	movs	r0, #0
                 ((uint32_t) MUL(0x09, x) <<  8) ^
 80027c6:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d01f      	beq.n	800280e <aes_gen_tables+0x326>
 80027ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80027d6:	7a5b      	ldrb	r3, [r3, #9]
 80027d8:	4619      	mov	r1, r3
 80027da:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80027de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027e2:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80027e6:	5cd3      	ldrb	r3, [r2, r3]
 80027e8:	18ca      	adds	r2, r1, r3
 80027ea:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <aes_gen_tables+0x3dc>)
 80027ec:	fb83 1302 	smull	r1, r3, r3, r2
 80027f0:	4413      	add	r3, r2
 80027f2:	11d9      	asrs	r1, r3, #7
 80027f4:	17d3      	asrs	r3, r2, #31
 80027f6:	1ac9      	subs	r1, r1, r3
 80027f8:	460b      	mov	r3, r1
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	1a5b      	subs	r3, r3, r1
 80027fe:	1ad1      	subs	r1, r2, r3
 8002800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002808:	5c5b      	ldrb	r3, [r3, r1]
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	e000      	b.n	8002810 <aes_gen_tables+0x328>
 800280e:	2300      	movs	r3, #0
        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^
 8002810:	4058      	eors	r0, r3
                 ((uint32_t) MUL(0x0D, x) << 16) ^
 8002812:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01f      	beq.n	800285a <aes_gen_tables+0x372>
 800281a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800281e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002822:	7b5b      	ldrb	r3, [r3, #13]
 8002824:	4619      	mov	r1, r3
 8002826:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 800282a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800282e:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8002832:	5cd3      	ldrb	r3, [r2, r3]
 8002834:	18ca      	adds	r2, r1, r3
 8002836:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <aes_gen_tables+0x3dc>)
 8002838:	fb83 1302 	smull	r1, r3, r3, r2
 800283c:	4413      	add	r3, r2
 800283e:	11d9      	asrs	r1, r3, #7
 8002840:	17d3      	asrs	r3, r2, #31
 8002842:	1ac9      	subs	r1, r1, r3
 8002844:	460b      	mov	r3, r1
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	1a5b      	subs	r3, r3, r1
 800284a:	1ad1      	subs	r1, r2, r3
 800284c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002854:	5c5b      	ldrb	r3, [r3, r1]
 8002856:	041b      	lsls	r3, r3, #16
 8002858:	e000      	b.n	800285c <aes_gen_tables+0x374>
 800285a:	2300      	movs	r3, #0
                 ((uint32_t) MUL(0x09, x) <<  8) ^
 800285c:	4058      	eors	r0, r3
                 ((uint32_t) MUL(0x0B, x) << 24);
 800285e:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002862:	2b00      	cmp	r3, #0
 8002864:	d030      	beq.n	80028c8 <aes_gen_tables+0x3e0>
 8002866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800286a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800286e:	7adb      	ldrb	r3, [r3, #11]
 8002870:	4619      	mov	r1, r3
 8002872:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002876:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800287a:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800287e:	5cd3      	ldrb	r3, [r2, r3]
 8002880:	18ca      	adds	r2, r1, r3
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <aes_gen_tables+0x3dc>)
 8002884:	fb83 1302 	smull	r1, r3, r3, r2
 8002888:	4413      	add	r3, r2
 800288a:	11d9      	asrs	r1, r3, #7
 800288c:	17d3      	asrs	r3, r2, #31
 800288e:	1ac9      	subs	r1, r1, r3
 8002890:	460b      	mov	r3, r1
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	1a5b      	subs	r3, r3, r1
 8002896:	1ad1      	subs	r1, r2, r3
 8002898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800289c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028a0:	5c5b      	ldrb	r3, [r3, r1]
 80028a2:	061b      	lsls	r3, r3, #24
 80028a4:	e011      	b.n	80028ca <aes_gen_tables+0x3e2>
 80028a6:	bf00      	nop
 80028a8:	200023d0 	.word	0x200023d0
 80028ac:	200001d0 	.word	0x200001d0
 80028b0:	200012d0 	.word	0x200012d0
 80028b4:	200002d0 	.word	0x200002d0
 80028b8:	200006d0 	.word	0x200006d0
 80028bc:	20000ad0 	.word	0x20000ad0
 80028c0:	20000ed0 	.word	0x20000ed0
 80028c4:	80808081 	.word	0x80808081
 80028c8:	2300      	movs	r3, #0
                 ((uint32_t) MUL(0x0D, x) << 16) ^
 80028ca:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^
 80028ce:	491d      	ldr	r1, [pc, #116]	; (8002944 <aes_gen_tables+0x45c>)
 80028d0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80028d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8(RT0[i]);
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <aes_gen_tables+0x45c>)
 80028da:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	ea4f 6233 	mov.w	r2, r3, ror #24
 80028e6:	4918      	ldr	r1, [pc, #96]	; (8002948 <aes_gen_tables+0x460>)
 80028e8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80028ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8(RT1[i]);
 80028f0:	4a15      	ldr	r2, [pc, #84]	; (8002948 <aes_gen_tables+0x460>)
 80028f2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80028f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fa:	ea4f 6233 	mov.w	r2, r3, ror #24
 80028fe:	4913      	ldr	r1, [pc, #76]	; (800294c <aes_gen_tables+0x464>)
 8002900:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8(RT2[i]);
 8002908:	4a10      	ldr	r2, [pc, #64]	; (800294c <aes_gen_tables+0x464>)
 800290a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800290e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002912:	ea4f 6233 	mov.w	r2, r3, ror #24
 8002916:	490e      	ldr	r1, [pc, #56]	; (8002950 <aes_gen_tables+0x468>)
 8002918:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800291c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (i = 0; i < 256; i++) {
 8002920:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002924:	3301      	adds	r3, #1
 8002926:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800292a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800292e:	2bff      	cmp	r3, #255	; 0xff
 8002930:	f77f aec9 	ble.w	80026c6 <aes_gen_tables+0x1de>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
#endif /* MBEDTLS_AES_NEED_REVERSE_TABLES */
    }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	200013d0 	.word	0x200013d0
 8002948:	200017d0 	.word	0x200017d0
 800294c:	20001bd0 	.word	0x20001bd0
 8002950:	20001fd0 	.word	0x20001fd0

08002954 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init(mbedtls_aes_context *ctx)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_aes_context));
 800295c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8002960:	2100      	movs	r1, #0
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f01a fc2a 	bl	801d1bc <memset>
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <mbedtls_aes_free>:

void mbedtls_aes_free(mbedtls_aes_context *ctx)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <mbedtls_aes_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_aes_context));
 800297e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f00b ffd2 	bl	800e92c <mbedtls_platform_zeroize>
 8002988:	e000      	b.n	800298c <mbedtls_aes_free+0x1c>
        return;
 800298a:	bf00      	nop
}
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <mbedtls_aes_xts_init>:

#if defined(MBEDTLS_CIPHER_MODE_XTS)
void mbedtls_aes_xts_init(mbedtls_aes_xts_context *ctx)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
    mbedtls_aes_init(&ctx->crypt);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ffd9 	bl	8002954 <mbedtls_aes_init>
    mbedtls_aes_init(&ctx->tweak);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ffd3 	bl	8002954 <mbedtls_aes_init>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <mbedtls_aes_xts_free>:

void mbedtls_aes_xts_free(mbedtls_aes_xts_context *ctx)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <mbedtls_aes_xts_free+0x24>
        return;
    }

    mbedtls_aes_free(&ctx->crypt);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ffd2 	bl	8002970 <mbedtls_aes_free>
    mbedtls_aes_free(&ctx->tweak);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ffcc 	bl	8002970 <mbedtls_aes_free>
 80029d8:	e000      	b.n	80029dc <mbedtls_aes_xts_free+0x26>
        return;
 80029da:	bf00      	nop
}
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <mbedtls_aes_rk_offset>:
    (defined(MBEDTLS_AESNI_C) && MBEDTLS_AESNI_HAVE_CODE == 2)
#define MAY_NEED_TO_ALIGN
#endif

MBEDTLS_MAYBE_UNUSED static unsigned mbedtls_aes_rk_offset(uint32_t *buf)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
    }
#else /* MAY_NEED_TO_ALIGN */
    (void) buf;
#endif /* MAY_NEED_TO_ALIGN */

    return 0;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc(mbedtls_aes_context *ctx, const unsigned char *key,
                           unsigned int keybits)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08c      	sub	sp, #48	; 0x30
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    switch (keybits) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0a:	d012      	beq.n	8002a32 <mbedtls_aes_setkey_enc+0x3a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a12:	d812      	bhi.n	8002a3a <mbedtls_aes_setkey_enc+0x42>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b80      	cmp	r3, #128	; 0x80
 8002a18:	d003      	beq.n	8002a22 <mbedtls_aes_setkey_enc+0x2a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2bc0      	cmp	r3, #192	; 0xc0
 8002a1e:	d004      	beq.n	8002a2a <mbedtls_aes_setkey_enc+0x32>
 8002a20:	e00b      	b.n	8002a3a <mbedtls_aes_setkey_enc+0x42>
        case 128: ctx->nr = 10; break;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	220a      	movs	r2, #10
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e00a      	b.n	8002a40 <mbedtls_aes_setkey_enc+0x48>
#if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
        case 192: ctx->nr = 12; break;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	220c      	movs	r2, #12
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e006      	b.n	8002a40 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	220e      	movs	r2, #14
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e002      	b.n	8002a40 <mbedtls_aes_setkey_enc+0x48>
#endif /* !MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH */
        default: return MBEDTLS_ERR_AES_INVALID_KEY_LENGTH;
 8002a3a:	f06f 031f 	mvn.w	r3, #31
 8002a3e:	e1b9      	b.n	8002db4 <mbedtls_aes_setkey_enc+0x3bc>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if (aes_init_done == 0) {
 8002a40:	4b86      	ldr	r3, [pc, #536]	; (8002c5c <mbedtls_aes_setkey_enc+0x264>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d104      	bne.n	8002a52 <mbedtls_aes_setkey_enc+0x5a>
        aes_gen_tables();
 8002a48:	f7ff fd4e 	bl	80024e8 <aes_gen_tables>
        aes_init_done = 1;
 8002a4c:	4b83      	ldr	r3, [pc, #524]	; (8002c5c <mbedtls_aes_setkey_enc+0x264>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
    }
#endif

    ctx->rk_offset = mbedtls_aes_rk_offset(ctx->buf);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3308      	adds	r3, #8
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ffc3 	bl	80029e2 <mbedtls_aes_rk_offset>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	605a      	str	r2, [r3, #4]
    RK = ctx->buf + ctx->rk_offset;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f103 0208 	add.w	r2, r3, #8
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        return mbedtls_aesce_setkey_enc((unsigned char *) RK, key, keybits);
    }
#endif

#if !defined(MBEDTLS_AES_USE_HARDWARE_ONLY)
    for (unsigned int i = 0; i < (keybits >> 5); i++) {
 8002a72:	2300      	movs	r3, #0
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a76:	e010      	b.n	8002a9a <mbedtls_aes_setkey_enc+0xa2>
        RK[i] = MBEDTLS_GET_UINT32_LE(key, i << 2);
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	441a      	add	r2, r3
 8002a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a86:	440b      	add	r3, r1
 8002a88:	61ba      	str	r2, [r7, #24]
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	6812      	ldr	r2, [r2, #0]
    memcpy(&r, p, sizeof(r));
 8002a8e:	617a      	str	r2, [r7, #20]
    return r;
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]
    for (unsigned int i = 0; i < (keybits >> 5); i++) {
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	3301      	adds	r3, #1
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d3e9      	bcc.n	8002a78 <mbedtls_aes_setkey_enc+0x80>
    }

    switch (ctx->nr) {
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b0e      	cmp	r3, #14
 8002aaa:	f000 80d4 	beq.w	8002c56 <mbedtls_aes_setkey_enc+0x25e>
 8002aae:	2b0e      	cmp	r3, #14
 8002ab0:	f300 817f 	bgt.w	8002db2 <mbedtls_aes_setkey_enc+0x3ba>
 8002ab4:	2b0a      	cmp	r3, #10
 8002ab6:	d002      	beq.n	8002abe <mbedtls_aes_setkey_enc+0xc6>
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	d05c      	beq.n	8002b76 <mbedtls_aes_setkey_enc+0x17e>
 8002abc:	e179      	b.n	8002db2 <mbedtls_aes_setkey_enc+0x3ba>
        case 10:

            for (unsigned int i = 0; i < 10; i++, RK += 4) {
 8002abe:	2300      	movs	r3, #0
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac2:	e054      	b.n	8002b6e <mbedtls_aes_setkey_enc+0x176>
                RK[4]  = RK[0] ^ round_constants[i] ^
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4965      	ldr	r1, [pc, #404]	; (8002c60 <mbedtls_aes_setkey_enc+0x268>)
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ad0:	4053      	eors	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[3])]) ^
 8002ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad4:	320c      	adds	r2, #12
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	0a12      	lsrs	r2, r2, #8
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	4611      	mov	r1, r2
 8002ade:	4a61      	ldr	r2, [pc, #388]	; (8002c64 <mbedtls_aes_setkey_enc+0x26c>)
 8002ae0:	5c52      	ldrb	r2, [r2, r1]
                RK[4]  = RK[0] ^ round_constants[i] ^
 8002ae2:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[3])] <<  8) ^
 8002ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae6:	330c      	adds	r3, #12
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	0c1b      	lsrs	r3, r3, #16
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	4619      	mov	r1, r3
 8002af0:	4b5c      	ldr	r3, [pc, #368]	; (8002c64 <mbedtls_aes_setkey_enc+0x26c>)
 8002af2:	5c5b      	ldrb	r3, [r3, r1]
 8002af4:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[3])]) ^
 8002af6:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	330c      	adds	r3, #12
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	0e1b      	lsrs	r3, r3, #24
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4619      	mov	r1, r3
 8002b04:	4b57      	ldr	r3, [pc, #348]	; (8002c64 <mbedtls_aes_setkey_enc+0x26c>)
 8002b06:	5c5b      	ldrb	r3, [r3, r1]
 8002b08:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[3])] <<  8) ^
 8002b0a:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[3])] << 24);
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b10:	330c      	adds	r3, #12
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b52      	ldr	r3, [pc, #328]	; (8002c64 <mbedtls_aes_setkey_enc+0x26c>)
 8002b1a:	5c9b      	ldrb	r3, [r3, r2]
 8002b1c:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ round_constants[i] ^
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	3310      	adds	r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 8002b22:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ round_constants[i] ^
 8002b24:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	3304      	adds	r3, #4
 8002b2a:	6819      	ldr	r1, [r3, #0]
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	3310      	adds	r3, #16
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	3314      	adds	r3, #20
 8002b36:	404a      	eors	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	3308      	adds	r3, #8
 8002b3e:	6819      	ldr	r1, [r3, #0]
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	3314      	adds	r3, #20
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	3318      	adds	r3, #24
 8002b4a:	404a      	eors	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	330c      	adds	r3, #12
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	3318      	adds	r3, #24
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5c:	331c      	adds	r3, #28
 8002b5e:	404a      	eors	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]
            for (unsigned int i = 0; i < 10; i++, RK += 4) {
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	3301      	adds	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	3310      	adds	r3, #16
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	d9a7      	bls.n	8002ac4 <mbedtls_aes_setkey_enc+0xcc>
            }
            break;
 8002b74:	e11d      	b.n	8002db2 <mbedtls_aes_setkey_enc+0x3ba>

#if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
        case 12:

            for (unsigned int i = 0; i < 8; i++, RK += 6) {
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
 8002b7a:	e068      	b.n	8002c4e <mbedtls_aes_setkey_enc+0x256>
                RK[6]  = RK[0] ^ round_constants[i] ^
 8002b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4937      	ldr	r1, [pc, #220]	; (8002c60 <mbedtls_aes_setkey_enc+0x268>)
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b88:	4053      	eors	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[5])]) ^
 8002b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b8c:	3214      	adds	r2, #20
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	0a12      	lsrs	r2, r2, #8
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	4611      	mov	r1, r2
 8002b96:	4a33      	ldr	r2, [pc, #204]	; (8002c64 <mbedtls_aes_setkey_enc+0x26c>)
 8002b98:	5c52      	ldrb	r2, [r2, r1]
                RK[6]  = RK[0] ^ round_constants[i] ^
 8002b9a:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[5])] <<  8) ^
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	3314      	adds	r3, #20
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	0c1b      	lsrs	r3, r3, #16
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <mbedtls_aes_setkey_enc+0x26c>)
 8002baa:	5c5b      	ldrb	r3, [r3, r1]
 8002bac:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[5])]) ^
 8002bae:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	3314      	adds	r3, #20
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	0e1b      	lsrs	r3, r3, #24
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4b29      	ldr	r3, [pc, #164]	; (8002c64 <mbedtls_aes_setkey_enc+0x26c>)
 8002bbe:	5c5b      	ldrb	r3, [r3, r1]
 8002bc0:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[5])] <<  8) ^
 8002bc2:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[5])] << 24);
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	3314      	adds	r3, #20
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <mbedtls_aes_setkey_enc+0x26c>)
 8002bd2:	5c9b      	ldrb	r3, [r3, r2]
 8002bd4:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ round_constants[i] ^
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	3318      	adds	r3, #24
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 8002bda:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ round_constants[i] ^
 8002bdc:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	3304      	adds	r3, #4
 8002be2:	6819      	ldr	r1, [r3, #0]
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	3318      	adds	r3, #24
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	331c      	adds	r3, #28
 8002bee:	404a      	eors	r2, r1
 8002bf0:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	3308      	adds	r3, #8
 8002bf6:	6819      	ldr	r1, [r3, #0]
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	331c      	adds	r3, #28
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	3320      	adds	r3, #32
 8002c02:	404a      	eors	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	330c      	adds	r3, #12
 8002c0a:	6819      	ldr	r1, [r3, #0]
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	3320      	adds	r3, #32
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	3324      	adds	r3, #36	; 0x24
 8002c16:	404a      	eors	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	3310      	adds	r3, #16
 8002c1e:	6819      	ldr	r1, [r3, #0]
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	3324      	adds	r3, #36	; 0x24
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	3328      	adds	r3, #40	; 0x28
 8002c2a:	404a      	eors	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	3314      	adds	r3, #20
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	3328      	adds	r3, #40	; 0x28
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	332c      	adds	r3, #44	; 0x2c
 8002c3e:	404a      	eors	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]
            for (unsigned int i = 0; i < 8; i++, RK += 6) {
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	3301      	adds	r3, #1
 8002c46:	623b      	str	r3, [r7, #32]
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	3318      	adds	r3, #24
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	2b07      	cmp	r3, #7
 8002c52:	d993      	bls.n	8002b7c <mbedtls_aes_setkey_enc+0x184>
            }
            break;
 8002c54:	e0ad      	b.n	8002db2 <mbedtls_aes_setkey_enc+0x3ba>

        case 14:

            for (unsigned int i = 0; i < 7; i++, RK += 8) {
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e0a5      	b.n	8002da8 <mbedtls_aes_setkey_enc+0x3b0>
 8002c5c:	200023f8 	.word	0x200023f8
 8002c60:	200023d0 	.word	0x200023d0
 8002c64:	200001d0 	.word	0x200001d0
                RK[8]  = RK[0] ^ round_constants[i] ^
 8002c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4953      	ldr	r1, [pc, #332]	; (8002dbc <mbedtls_aes_setkey_enc+0x3c4>)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c74:	4053      	eors	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[7])]) ^
 8002c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c78:	321c      	adds	r2, #28
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	0a12      	lsrs	r2, r2, #8
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	4611      	mov	r1, r2
 8002c82:	4a4f      	ldr	r2, [pc, #316]	; (8002dc0 <mbedtls_aes_setkey_enc+0x3c8>)
 8002c84:	5c52      	ldrb	r2, [r2, r1]
                RK[8]  = RK[0] ^ round_constants[i] ^
 8002c86:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[7])] <<  8) ^
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	331c      	adds	r3, #28
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	0c1b      	lsrs	r3, r3, #16
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	4619      	mov	r1, r3
 8002c94:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <mbedtls_aes_setkey_enc+0x3c8>)
 8002c96:	5c5b      	ldrb	r3, [r3, r1]
 8002c98:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[7])]) ^
 8002c9a:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	331c      	adds	r3, #28
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0e1b      	lsrs	r3, r3, #24
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <mbedtls_aes_setkey_enc+0x3c8>)
 8002caa:	5c5b      	ldrb	r3, [r3, r1]
 8002cac:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[7])] <<  8) ^
 8002cae:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[7])] << 24);
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	331c      	adds	r3, #28
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b40      	ldr	r3, [pc, #256]	; (8002dc0 <mbedtls_aes_setkey_enc+0x3c8>)
 8002cbe:	5c9b      	ldrb	r3, [r3, r2]
 8002cc0:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ round_constants[i] ^
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	3320      	adds	r3, #32
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 8002cc6:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ round_constants[i] ^
 8002cc8:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	3304      	adds	r3, #4
 8002cce:	6819      	ldr	r1, [r3, #0]
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	3320      	adds	r3, #32
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	3324      	adds	r3, #36	; 0x24
 8002cda:	404a      	eors	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	3308      	adds	r3, #8
 8002ce2:	6819      	ldr	r1, [r3, #0]
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	3324      	adds	r3, #36	; 0x24
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	3328      	adds	r3, #40	; 0x28
 8002cee:	404a      	eors	r2, r1
 8002cf0:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	3328      	adds	r3, #40	; 0x28
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d00:	332c      	adds	r3, #44	; 0x2c
 8002d02:	404a      	eors	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8002d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d08:	3310      	adds	r3, #16
 8002d0a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[11])]) ^
 8002d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d0e:	322c      	adds	r2, #44	; 0x2c
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	4611      	mov	r1, r2
 8002d16:	4a2a      	ldr	r2, [pc, #168]	; (8002dc0 <mbedtls_aes_setkey_enc+0x3c8>)
 8002d18:	5c52      	ldrb	r2, [r2, r1]
                RK[12] = RK[4] ^
 8002d1a:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[11])] <<  8) ^
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	332c      	adds	r3, #44	; 0x2c
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	4619      	mov	r1, r3
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <mbedtls_aes_setkey_enc+0x3c8>)
 8002d2a:	5c5b      	ldrb	r3, [r3, r1]
 8002d2c:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[11])]) ^
 8002d2e:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	332c      	adds	r3, #44	; 0x2c
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <mbedtls_aes_setkey_enc+0x3c8>)
 8002d3e:	5c5b      	ldrb	r3, [r3, r1]
 8002d40:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[11])] <<  8) ^
 8002d42:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[11])] << 24);
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	332c      	adds	r3, #44	; 0x2c
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	0e1b      	lsrs	r3, r3, #24
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <mbedtls_aes_setkey_enc+0x3c8>)
 8002d54:	5c9b      	ldrb	r3, [r3, r2]
 8002d56:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5a:	3330      	adds	r3, #48	; 0x30
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^
 8002d5c:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8002d5e:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	3314      	adds	r3, #20
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	3330      	adds	r3, #48	; 0x30
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6e:	3334      	adds	r3, #52	; 0x34
 8002d70:	404a      	eors	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	3318      	adds	r3, #24
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	3334      	adds	r3, #52	; 0x34
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	3338      	adds	r3, #56	; 0x38
 8002d84:	404a      	eors	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8a:	331c      	adds	r3, #28
 8002d8c:	6819      	ldr	r1, [r3, #0]
 8002d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d90:	3338      	adds	r3, #56	; 0x38
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	333c      	adds	r3, #60	; 0x3c
 8002d98:	404a      	eors	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
            for (unsigned int i = 0; i < 7; i++, RK += 8) {
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	3320      	adds	r3, #32
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	f67f af5c 	bls.w	8002c68 <mbedtls_aes_setkey_enc+0x270>
            }
            break;
 8002db0:	bf00      	nop
#endif /* !MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH */
    }

    return 0;
 8002db2:	2300      	movs	r3, #0
#endif /* !MBEDTLS_AES_USE_HARDWARE_ONLY */
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3730      	adds	r7, #48	; 0x30
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	200023d0 	.word	0x200023d0
 8002dc0:	200001d0 	.word	0x200001d0

08002dc4 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT) && !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
int mbedtls_aes_setkey_dec(mbedtls_aes_context *ctx, const unsigned char *key,
                           unsigned int keybits)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b0d0      	sub	sp, #320	; 0x140
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002dce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002dd2:	6018      	str	r0, [r3, #0]
 8002dd4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002dd8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002ddc:	6019      	str	r1, [r3, #0]
 8002dde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002de2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002de6:	601a      	str	r2, [r3, #0]
    int ret;
    mbedtls_aes_context cty;
    uint32_t *RK;


    mbedtls_aes_init(&cty);
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fdb1 	bl	8002954 <mbedtls_aes_init>

    ctx->rk_offset = mbedtls_aes_rk_offset(ctx->buf);
 8002df2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002df6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fdef 	bl	80029e2 <mbedtls_aes_rk_offset>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002e0a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
    RK = ctx->buf + ctx->rk_offset;
 8002e12:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002e16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f103 0208 	add.w	r2, r3, #8
 8002e20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002e24:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Also checks keybits */
    if ((ret = mbedtls_aes_setkey_enc(&cty, key, keybits)) != 0) {
 8002e34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002e38:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8002e3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002e40:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e44:	f107 0014 	add.w	r0, r7, #20
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	6819      	ldr	r1, [r3, #0]
 8002e4c:	f7ff fdd4 	bl	80029f8 <mbedtls_aes_setkey_enc>
 8002e50:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 8002e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 80e7 	bne.w	800302c <mbedtls_aes_setkey_dec+0x268>
        goto exit;
    }

    ctx->nr = cty.nr;
 8002e5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002e62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002e6c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	601a      	str	r2, [r3, #0]
        goto exit;
    }
#endif

#if !defined(MBEDTLS_AES_USE_HARDWARE_ONLY)
    SK = cty.buf + cty.rk_offset + cty.nr * 4;
 8002e74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002e78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	f107 0214 	add.w	r2, r7, #20
 8002e92:	3208      	adds	r2, #8
 8002e94:	4413      	add	r3, r2
 8002e96:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    *RK++ = *SK++;
 8002e9a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002e9e:	1d13      	adds	r3, r2, #4
 8002ea0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002ea4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ea8:	1d19      	adds	r1, r3, #4
 8002eaa:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8002eb2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002eb6:	1d13      	adds	r3, r2, #4
 8002eb8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002ebc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ec0:	1d19      	adds	r1, r3, #4
 8002ec2:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8002eca:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002ece:	1d13      	adds	r3, r2, #4
 8002ed0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002ed4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ed8:	1d19      	adds	r1, r3, #4
 8002eda:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8002ee2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002ee6:	1d13      	adds	r3, r2, #4
 8002ee8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002eec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ef0:	1d19      	adds	r1, r3, #4
 8002ef2:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	601a      	str	r2, [r3, #0]
    SK -= 8;
 8002efa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002efe:	3b20      	subs	r3, #32
 8002f00:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    for (int i = ctx->nr - 1; i > 0; i--, SK -= 8) {
 8002f04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002f08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002f16:	e054      	b.n	8002fc2 <mbedtls_aes_setkey_dec+0x1fe>
        for (int j = 0; j < 4; j++, SK++) {
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002f1e:	e042      	b.n	8002fa6 <mbedtls_aes_setkey_dec+0x1e2>
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 8002f20:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b47      	ldr	r3, [pc, #284]	; (8003048 <mbedtls_aes_setkey_dec+0x284>)
 8002f2c:	5c9b      	ldrb	r3, [r3, r2]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4b46      	ldr	r3, [pc, #280]	; (800304c <mbedtls_aes_setkey_dec+0x288>)
 8002f32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1(FSb[MBEDTLS_BYTE_1(*SK)]) ^
 8002f36:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	4619      	mov	r1, r3
 8002f42:	4b41      	ldr	r3, [pc, #260]	; (8003048 <mbedtls_aes_setkey_dec+0x284>)
 8002f44:	5c5b      	ldrb	r3, [r3, r1]
 8002f46:	4619      	mov	r1, r3
 8002f48:	4b41      	ldr	r3, [pc, #260]	; (8003050 <mbedtls_aes_setkey_dec+0x28c>)
 8002f4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 8002f4e:	405a      	eors	r2, r3
                    AES_RT2(FSb[MBEDTLS_BYTE_2(*SK)]) ^
 8002f50:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <mbedtls_aes_setkey_dec+0x284>)
 8002f5e:	5c5b      	ldrb	r3, [r3, r1]
 8002f60:	4619      	mov	r1, r3
 8002f62:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <mbedtls_aes_setkey_dec+0x290>)
 8002f64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1(FSb[MBEDTLS_BYTE_1(*SK)]) ^
 8002f68:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3(FSb[MBEDTLS_BYTE_3(*SK)]);
 8002f6c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0e1b      	lsrs	r3, r3, #24
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	4b33      	ldr	r3, [pc, #204]	; (8003048 <mbedtls_aes_setkey_dec+0x284>)
 8002f7a:	5c9b      	ldrb	r3, [r3, r2]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b36      	ldr	r3, [pc, #216]	; (8003058 <mbedtls_aes_setkey_dec+0x294>)
 8002f80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 8002f84:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f88:	1d18      	adds	r0, r3, #4
 8002f8a:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
                    AES_RT2(FSb[MBEDTLS_BYTE_2(*SK)]) ^
 8002f8e:	404a      	eors	r2, r1
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 8002f90:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 4; j++, SK++) {
 8002f92:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f96:	3301      	adds	r3, #1
 8002f98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002f9c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002fa6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	ddb8      	ble.n	8002f20 <mbedtls_aes_setkey_dec+0x15c>
    for (int i = ctx->nr - 1; i > 0; i--, SK -= 8) {
 8002fae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002fb8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002fbc:	3b20      	subs	r3, #32
 8002fbe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002fc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	dca6      	bgt.n	8002f18 <mbedtls_aes_setkey_dec+0x154>
        }
    }

    *RK++ = *SK++;
 8002fca:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002fce:	1d13      	adds	r3, r2, #4
 8002fd0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002fd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002fd8:	1d19      	adds	r1, r3, #4
 8002fda:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8002fe2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002fe6:	1d13      	adds	r3, r2, #4
 8002fe8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002fec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ff0:	1d19      	adds	r1, r3, #4
 8002ff2:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8002ffa:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002ffe:	1d13      	adds	r3, r2, #4
 8003000:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003004:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003008:	1d19      	adds	r1, r3, #4
 800300a:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003012:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8003016:	1d13      	adds	r3, r2, #4
 8003018:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800301c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003020:	1d19      	adds	r1, r3, #4
 8003022:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e000      	b.n	800302e <mbedtls_aes_setkey_dec+0x26a>
        goto exit;
 800302c:	bf00      	nop
#endif /* !MBEDTLS_AES_USE_HARDWARE_ONLY */
exit:
    mbedtls_aes_free(&cty);
 800302e:	f107 0314 	add.w	r3, r7, #20
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fc9c 	bl	8002970 <mbedtls_aes_free>

    return ret;
 8003038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
}
 800303c:	4618      	mov	r0, r3
 800303e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200001d0 	.word	0x200001d0
 800304c:	200013d0 	.word	0x200013d0
 8003050:	200017d0 	.word	0x200017d0
 8003054:	20001bd0 	.word	0x20001bd0
 8003058:	20001fd0 	.word	0x20001fd0

0800305c <mbedtls_aes_xts_decode_keys>:
                                       unsigned int keybits,
                                       const unsigned char **key1,
                                       unsigned int *key1bits,
                                       const unsigned char **key2,
                                       unsigned int *key2bits)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
    const unsigned int half_keybits = keybits / 2;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	617b      	str	r3, [r7, #20]
    const unsigned int half_keybytes = half_keybits / 8;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	08db      	lsrs	r3, r3, #3
 8003074:	613b      	str	r3, [r7, #16]

    switch (keybits) {
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307c:	d006      	beq.n	800308c <mbedtls_aes_xts_decode_keys+0x30>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d004      	beq.n	8003090 <mbedtls_aes_xts_decode_keys+0x34>
        case 256: break;
        case 512: break;
        default: return MBEDTLS_ERR_AES_INVALID_KEY_LENGTH;
 8003086:	f06f 031f 	mvn.w	r3, #31
 800308a:	e011      	b.n	80030b0 <mbedtls_aes_xts_decode_keys+0x54>
        case 256: break;
 800308c:	bf00      	nop
 800308e:	e000      	b.n	8003092 <mbedtls_aes_xts_decode_keys+0x36>
        case 512: break;
 8003090:	bf00      	nop
    }

    *key1bits = half_keybits;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	601a      	str	r2, [r3, #0]
    *key2bits = half_keybits;
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	601a      	str	r2, [r3, #0]
    *key1 = &key[0];
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	601a      	str	r2, [r3, #0]
    *key2 = &key[half_keybytes];
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	441a      	add	r2, r3
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	601a      	str	r2, [r3, #0]

    return 0;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <mbedtls_aes_xts_setkey_enc>:

int mbedtls_aes_xts_setkey_enc(mbedtls_aes_xts_context *ctx,
                               const unsigned char *key,
                               unsigned int keybits)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08c      	sub	sp, #48	; 0x30
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80030c8:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *key1, *key2;
    unsigned int key1bits, key2bits;

    ret = mbedtls_aes_xts_decode_keys(key, keybits, &key1, &key1bits,
 80030ce:	f107 0118 	add.w	r1, r7, #24
 80030d2:	f107 0220 	add.w	r2, r7, #32
 80030d6:	f107 0314 	add.w	r3, r7, #20
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	f107 031c 	add.w	r3, r7, #28
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	460b      	mov	r3, r1
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	68b8      	ldr	r0, [r7, #8]
 80030e8:	f7ff ffb8 	bl	800305c <mbedtls_aes_xts_decode_keys>
 80030ec:	6278      	str	r0, [r7, #36]	; 0x24
                                      &key2, &key2bits);
    if (ret != 0) {
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <mbedtls_aes_xts_setkey_enc+0x3c>
        return ret;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	e014      	b.n	8003122 <mbedtls_aes_xts_setkey_enc+0x66>
    }

    /* Set the tweak key. Always set tweak key for the encryption mode. */
    ret = mbedtls_aes_setkey_enc(&ctx->tweak, key2, key2bits);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80030fe:	69f9      	ldr	r1, [r7, #28]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fc78 	bl	80029f8 <mbedtls_aes_setkey_enc>
 8003108:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret != 0) {
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <mbedtls_aes_xts_setkey_enc+0x58>
        return ret;
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	e006      	b.n	8003122 <mbedtls_aes_xts_setkey_enc+0x66>
    }

    /* Set crypt key for encryption. */
    return mbedtls_aes_setkey_enc(&ctx->crypt, key1, key1bits);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a39      	ldr	r1, [r7, #32]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fc6c 	bl	80029f8 <mbedtls_aes_setkey_enc>
 8003120:	4603      	mov	r3, r0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3728      	adds	r7, #40	; 0x28
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <mbedtls_aes_xts_setkey_dec>:

int mbedtls_aes_xts_setkey_dec(mbedtls_aes_xts_context *ctx,
                               const unsigned char *key,
                               unsigned int keybits)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b08c      	sub	sp, #48	; 0x30
 800312e:	af02      	add	r7, sp, #8
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8003136:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *key1, *key2;
    unsigned int key1bits, key2bits;

    ret = mbedtls_aes_xts_decode_keys(key, keybits, &key1, &key1bits,
 800313c:	f107 0118 	add.w	r1, r7, #24
 8003140:	f107 0220 	add.w	r2, r7, #32
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	f107 031c 	add.w	r3, r7, #28
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	460b      	mov	r3, r1
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	68b8      	ldr	r0, [r7, #8]
 8003156:	f7ff ff81 	bl	800305c <mbedtls_aes_xts_decode_keys>
 800315a:	6278      	str	r0, [r7, #36]	; 0x24
                                      &key2, &key2bits);
    if (ret != 0) {
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <mbedtls_aes_xts_setkey_dec+0x3c>
        return ret;
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	e014      	b.n	8003190 <mbedtls_aes_xts_setkey_dec+0x66>
    }

    /* Set the tweak key. Always set tweak key for encryption. */
    ret = mbedtls_aes_setkey_enc(&ctx->tweak, key2, key2bits);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800316c:	69f9      	ldr	r1, [r7, #28]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fc41 	bl	80029f8 <mbedtls_aes_setkey_enc>
 8003176:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret != 0) {
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <mbedtls_aes_xts_setkey_dec+0x58>
        return ret;
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	e006      	b.n	8003190 <mbedtls_aes_xts_setkey_dec+0x66>
    }

    /* Set crypt key for decryption. */
    return mbedtls_aes_setkey_dec(&ctx->crypt, key1, key1bits);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a39      	ldr	r1, [r7, #32]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fe1b 	bl	8002dc4 <mbedtls_aes_setkey_dec>
 800318e:	4603      	mov	r3, r0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3728      	adds	r7, #40	; 0x28
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt(mbedtls_aes_context *ctx,
                                 const unsigned char input[16],
                                 unsigned char output[16])
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b09e      	sub	sp, #120	; 0x78
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->buf + ctx->rk_offset;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f103 0208 	add.w	r2, r3, #8
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	677b      	str	r3, [r7, #116]	; 0x74
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	663b      	str	r3, [r7, #96]	; 0x60
 80031b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ba:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80031bc:	61fb      	str	r3, [r7, #28]
    return r;
 80031be:	69fb      	ldr	r3, [r7, #28]
    struct {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE(input,  0); t.X[0] ^= *RK++;
 80031c0:	633b      	str	r3, [r7, #48]	; 0x30
 80031c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c4:	1d1a      	adds	r2, r3, #4
 80031c6:	677a      	str	r2, [r7, #116]	; 0x74
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	4053      	eors	r3, r2
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30
    t.X[1] = MBEDTLS_GET_UINT32_LE(input,  4); t.X[1] ^= *RK++;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	3304      	adds	r3, #4
 80031d4:	667b      	str	r3, [r7, #100]	; 0x64
 80031d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031d8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80031da:	61bb      	str	r3, [r7, #24]
    return r;
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
 80031e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e2:	1d1a      	adds	r2, r3, #4
 80031e4:	677a      	str	r2, [r7, #116]	; 0x74
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ea:	4053      	eors	r3, r2
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
    t.X[2] = MBEDTLS_GET_UINT32_LE(input,  8); t.X[2] ^= *RK++;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3308      	adds	r3, #8
 80031f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80031f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031f6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80031f8:	617b      	str	r3, [r7, #20]
    return r;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80031fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003200:	1d1a      	adds	r2, r3, #4
 8003202:	677a      	str	r2, [r7, #116]	; 0x74
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	4053      	eors	r3, r2
 800320a:	63bb      	str	r3, [r7, #56]	; 0x38
    t.X[3] = MBEDTLS_GET_UINT32_LE(input, 12); t.X[3] ^= *RK++;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	330c      	adds	r3, #12
 8003210:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003214:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003216:	613b      	str	r3, [r7, #16]
    return r;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800321c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800321e:	1d1a      	adds	r2, r3, #4
 8003220:	677a      	str	r2, [r7, #116]	; 0x74
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003226:	4053      	eors	r3, r2
 8003228:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	105b      	asrs	r3, r3, #1
 8003230:	3b01      	subs	r3, #1
 8003232:	673b      	str	r3, [r7, #112]	; 0x70
 8003234:	e122      	b.n	800347c <mbedtls_internal_aes_encrypt+0x2e4>
        AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8003236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003238:	1d1a      	adds	r2, r3, #4
 800323a:	677a      	str	r2, [r7, #116]	; 0x74
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	b2db      	uxtb	r3, r3
 8003242:	4619      	mov	r1, r3
 8003244:	4bb0      	ldr	r3, [pc, #704]	; (8003508 <mbedtls_internal_aes_encrypt+0x370>)
 8003246:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800324a:	405a      	eors	r2, r3
 800324c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	b2db      	uxtb	r3, r3
 8003252:	4619      	mov	r1, r3
 8003254:	4bad      	ldr	r3, [pc, #692]	; (800350c <mbedtls_internal_aes_encrypt+0x374>)
 8003256:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800325a:	405a      	eors	r2, r3
 800325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	b2db      	uxtb	r3, r3
 8003262:	4619      	mov	r1, r3
 8003264:	4baa      	ldr	r3, [pc, #680]	; (8003510 <mbedtls_internal_aes_encrypt+0x378>)
 8003266:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800326a:	405a      	eors	r2, r3
 800326c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326e:	0e1b      	lsrs	r3, r3, #24
 8003270:	b2db      	uxtb	r3, r3
 8003272:	4619      	mov	r1, r3
 8003274:	4ba7      	ldr	r3, [pc, #668]	; (8003514 <mbedtls_internal_aes_encrypt+0x37c>)
 8003276:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800327a:	4053      	eors	r3, r2
 800327c:	643b      	str	r3, [r7, #64]	; 0x40
 800327e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003280:	1d1a      	adds	r2, r3, #4
 8003282:	677a      	str	r2, [r7, #116]	; 0x74
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003288:	b2db      	uxtb	r3, r3
 800328a:	4619      	mov	r1, r3
 800328c:	4b9e      	ldr	r3, [pc, #632]	; (8003508 <mbedtls_internal_aes_encrypt+0x370>)
 800328e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003292:	405a      	eors	r2, r3
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	b2db      	uxtb	r3, r3
 800329a:	4619      	mov	r1, r3
 800329c:	4b9b      	ldr	r3, [pc, #620]	; (800350c <mbedtls_internal_aes_encrypt+0x374>)
 800329e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032a2:	405a      	eors	r2, r3
 80032a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a6:	0c1b      	lsrs	r3, r3, #16
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4619      	mov	r1, r3
 80032ac:	4b98      	ldr	r3, [pc, #608]	; (8003510 <mbedtls_internal_aes_encrypt+0x378>)
 80032ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032b2:	405a      	eors	r2, r3
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	0e1b      	lsrs	r3, r3, #24
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	4619      	mov	r1, r3
 80032bc:	4b95      	ldr	r3, [pc, #596]	; (8003514 <mbedtls_internal_aes_encrypt+0x37c>)
 80032be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032c2:	4053      	eors	r3, r2
 80032c4:	647b      	str	r3, [r7, #68]	; 0x44
 80032c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c8:	1d1a      	adds	r2, r3, #4
 80032ca:	677a      	str	r2, [r7, #116]	; 0x74
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	4619      	mov	r1, r3
 80032d4:	4b8c      	ldr	r3, [pc, #560]	; (8003508 <mbedtls_internal_aes_encrypt+0x370>)
 80032d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032da:	405a      	eors	r2, r3
 80032dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	4619      	mov	r1, r3
 80032e4:	4b89      	ldr	r3, [pc, #548]	; (800350c <mbedtls_internal_aes_encrypt+0x374>)
 80032e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032ea:	405a      	eors	r2, r3
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	0c1b      	lsrs	r3, r3, #16
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	4619      	mov	r1, r3
 80032f4:	4b86      	ldr	r3, [pc, #536]	; (8003510 <mbedtls_internal_aes_encrypt+0x378>)
 80032f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032fa:	405a      	eors	r2, r3
 80032fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fe:	0e1b      	lsrs	r3, r3, #24
 8003300:	b2db      	uxtb	r3, r3
 8003302:	4619      	mov	r1, r3
 8003304:	4b83      	ldr	r3, [pc, #524]	; (8003514 <mbedtls_internal_aes_encrypt+0x37c>)
 8003306:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800330a:	4053      	eors	r3, r2
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
 800330e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003310:	1d1a      	adds	r2, r3, #4
 8003312:	677a      	str	r2, [r7, #116]	; 0x74
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003318:	b2db      	uxtb	r3, r3
 800331a:	4619      	mov	r1, r3
 800331c:	4b7a      	ldr	r3, [pc, #488]	; (8003508 <mbedtls_internal_aes_encrypt+0x370>)
 800331e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003322:	405a      	eors	r2, r3
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	b2db      	uxtb	r3, r3
 800332a:	4619      	mov	r1, r3
 800332c:	4b77      	ldr	r3, [pc, #476]	; (800350c <mbedtls_internal_aes_encrypt+0x374>)
 800332e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003332:	405a      	eors	r2, r3
 8003334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003336:	0c1b      	lsrs	r3, r3, #16
 8003338:	b2db      	uxtb	r3, r3
 800333a:	4619      	mov	r1, r3
 800333c:	4b74      	ldr	r3, [pc, #464]	; (8003510 <mbedtls_internal_aes_encrypt+0x378>)
 800333e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003342:	405a      	eors	r2, r3
 8003344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003346:	0e1b      	lsrs	r3, r3, #24
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4619      	mov	r1, r3
 800334c:	4b71      	ldr	r3, [pc, #452]	; (8003514 <mbedtls_internal_aes_encrypt+0x37c>)
 800334e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003352:	4053      	eors	r3, r2
 8003354:	64fb      	str	r3, [r7, #76]	; 0x4c
        AES_FROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 8003356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003358:	1d1a      	adds	r2, r3, #4
 800335a:	677a      	str	r2, [r7, #116]	; 0x74
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003360:	b2db      	uxtb	r3, r3
 8003362:	4619      	mov	r1, r3
 8003364:	4b68      	ldr	r3, [pc, #416]	; (8003508 <mbedtls_internal_aes_encrypt+0x370>)
 8003366:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800336a:	405a      	eors	r2, r3
 800336c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336e:	0a1b      	lsrs	r3, r3, #8
 8003370:	b2db      	uxtb	r3, r3
 8003372:	4619      	mov	r1, r3
 8003374:	4b65      	ldr	r3, [pc, #404]	; (800350c <mbedtls_internal_aes_encrypt+0x374>)
 8003376:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800337a:	405a      	eors	r2, r3
 800337c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337e:	0c1b      	lsrs	r3, r3, #16
 8003380:	b2db      	uxtb	r3, r3
 8003382:	4619      	mov	r1, r3
 8003384:	4b62      	ldr	r3, [pc, #392]	; (8003510 <mbedtls_internal_aes_encrypt+0x378>)
 8003386:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800338a:	405a      	eors	r2, r3
 800338c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800338e:	0e1b      	lsrs	r3, r3, #24
 8003390:	b2db      	uxtb	r3, r3
 8003392:	4619      	mov	r1, r3
 8003394:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <mbedtls_internal_aes_encrypt+0x37c>)
 8003396:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800339a:	4053      	eors	r3, r2
 800339c:	633b      	str	r3, [r7, #48]	; 0x30
 800339e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a0:	1d1a      	adds	r2, r3, #4
 80033a2:	677a      	str	r2, [r7, #116]	; 0x74
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	4619      	mov	r1, r3
 80033ac:	4b56      	ldr	r3, [pc, #344]	; (8003508 <mbedtls_internal_aes_encrypt+0x370>)
 80033ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033b2:	405a      	eors	r2, r3
 80033b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b6:	0a1b      	lsrs	r3, r3, #8
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	4619      	mov	r1, r3
 80033bc:	4b53      	ldr	r3, [pc, #332]	; (800350c <mbedtls_internal_aes_encrypt+0x374>)
 80033be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033c2:	405a      	eors	r2, r3
 80033c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c6:	0c1b      	lsrs	r3, r3, #16
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	4619      	mov	r1, r3
 80033cc:	4b50      	ldr	r3, [pc, #320]	; (8003510 <mbedtls_internal_aes_encrypt+0x378>)
 80033ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033d2:	405a      	eors	r2, r3
 80033d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d6:	0e1b      	lsrs	r3, r3, #24
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	4619      	mov	r1, r3
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <mbedtls_internal_aes_encrypt+0x37c>)
 80033de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033e2:	4053      	eors	r3, r2
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
 80033e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e8:	1d1a      	adds	r2, r3, #4
 80033ea:	677a      	str	r2, [r7, #116]	; 0x74
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	4619      	mov	r1, r3
 80033f4:	4b44      	ldr	r3, [pc, #272]	; (8003508 <mbedtls_internal_aes_encrypt+0x370>)
 80033f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033fa:	405a      	eors	r2, r3
 80033fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	b2db      	uxtb	r3, r3
 8003402:	4619      	mov	r1, r3
 8003404:	4b41      	ldr	r3, [pc, #260]	; (800350c <mbedtls_internal_aes_encrypt+0x374>)
 8003406:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800340a:	405a      	eors	r2, r3
 800340c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340e:	0c1b      	lsrs	r3, r3, #16
 8003410:	b2db      	uxtb	r3, r3
 8003412:	4619      	mov	r1, r3
 8003414:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <mbedtls_internal_aes_encrypt+0x378>)
 8003416:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800341a:	405a      	eors	r2, r3
 800341c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341e:	0e1b      	lsrs	r3, r3, #24
 8003420:	b2db      	uxtb	r3, r3
 8003422:	4619      	mov	r1, r3
 8003424:	4b3b      	ldr	r3, [pc, #236]	; (8003514 <mbedtls_internal_aes_encrypt+0x37c>)
 8003426:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800342a:	4053      	eors	r3, r2
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
 800342e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003430:	1d1a      	adds	r2, r3, #4
 8003432:	677a      	str	r2, [r7, #116]	; 0x74
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003438:	b2db      	uxtb	r3, r3
 800343a:	4619      	mov	r1, r3
 800343c:	4b32      	ldr	r3, [pc, #200]	; (8003508 <mbedtls_internal_aes_encrypt+0x370>)
 800343e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003442:	405a      	eors	r2, r3
 8003444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4619      	mov	r1, r3
 800344c:	4b2f      	ldr	r3, [pc, #188]	; (800350c <mbedtls_internal_aes_encrypt+0x374>)
 800344e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003452:	405a      	eors	r2, r3
 8003454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003456:	0c1b      	lsrs	r3, r3, #16
 8003458:	b2db      	uxtb	r3, r3
 800345a:	4619      	mov	r1, r3
 800345c:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <mbedtls_internal_aes_encrypt+0x378>)
 800345e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003462:	405a      	eors	r2, r3
 8003464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003466:	0e1b      	lsrs	r3, r3, #24
 8003468:	b2db      	uxtb	r3, r3
 800346a:	4619      	mov	r1, r3
 800346c:	4b29      	ldr	r3, [pc, #164]	; (8003514 <mbedtls_internal_aes_encrypt+0x37c>)
 800346e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003472:	4053      	eors	r3, r2
 8003474:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 8003476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003478:	3b01      	subs	r3, #1
 800347a:	673b      	str	r3, [r7, #112]	; 0x70
 800347c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800347e:	2b00      	cmp	r3, #0
 8003480:	f73f aed9 	bgt.w	8003236 <mbedtls_internal_aes_encrypt+0x9e>
    }

    AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8003484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003486:	1d1a      	adds	r2, r3, #4
 8003488:	677a      	str	r2, [r7, #116]	; 0x74
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	b2db      	uxtb	r3, r3
 8003490:	4619      	mov	r1, r3
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <mbedtls_internal_aes_encrypt+0x370>)
 8003494:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003498:	405a      	eors	r2, r3
 800349a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349c:	0a1b      	lsrs	r3, r3, #8
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	4619      	mov	r1, r3
 80034a2:	4b1a      	ldr	r3, [pc, #104]	; (800350c <mbedtls_internal_aes_encrypt+0x374>)
 80034a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034a8:	405a      	eors	r2, r3
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	4619      	mov	r1, r3
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <mbedtls_internal_aes_encrypt+0x378>)
 80034b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034b8:	405a      	eors	r2, r3
 80034ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034bc:	0e1b      	lsrs	r3, r3, #24
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	4619      	mov	r1, r3
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <mbedtls_internal_aes_encrypt+0x37c>)
 80034c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034c8:	4053      	eors	r3, r2
 80034ca:	643b      	str	r3, [r7, #64]	; 0x40
 80034cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ce:	1d1a      	adds	r2, r3, #4
 80034d0:	677a      	str	r2, [r7, #116]	; 0x74
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	4619      	mov	r1, r3
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <mbedtls_internal_aes_encrypt+0x370>)
 80034dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034e0:	405a      	eors	r2, r3
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	4619      	mov	r1, r3
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <mbedtls_internal_aes_encrypt+0x374>)
 80034ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034f0:	405a      	eors	r2, r3
 80034f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	4619      	mov	r1, r3
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <mbedtls_internal_aes_encrypt+0x378>)
 80034fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003500:	405a      	eors	r2, r3
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	e008      	b.n	8003518 <mbedtls_internal_aes_encrypt+0x380>
 8003506:	bf00      	nop
 8003508:	200002d0 	.word	0x200002d0
 800350c:	200006d0 	.word	0x200006d0
 8003510:	20000ad0 	.word	0x20000ad0
 8003514:	20000ed0 	.word	0x20000ed0
 8003518:	0e1b      	lsrs	r3, r3, #24
 800351a:	b2db      	uxtb	r3, r3
 800351c:	4619      	mov	r1, r3
 800351e:	4b84      	ldr	r3, [pc, #528]	; (8003730 <mbedtls_internal_aes_encrypt+0x598>)
 8003520:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003524:	4053      	eors	r3, r2
 8003526:	647b      	str	r3, [r7, #68]	; 0x44
 8003528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800352a:	1d1a      	adds	r2, r3, #4
 800352c:	677a      	str	r2, [r7, #116]	; 0x74
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003532:	b2db      	uxtb	r3, r3
 8003534:	4619      	mov	r1, r3
 8003536:	4b7f      	ldr	r3, [pc, #508]	; (8003734 <mbedtls_internal_aes_encrypt+0x59c>)
 8003538:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800353c:	405a      	eors	r2, r3
 800353e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	b2db      	uxtb	r3, r3
 8003544:	4619      	mov	r1, r3
 8003546:	4b7c      	ldr	r3, [pc, #496]	; (8003738 <mbedtls_internal_aes_encrypt+0x5a0>)
 8003548:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800354c:	405a      	eors	r2, r3
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	b2db      	uxtb	r3, r3
 8003554:	4619      	mov	r1, r3
 8003556:	4b79      	ldr	r3, [pc, #484]	; (800373c <mbedtls_internal_aes_encrypt+0x5a4>)
 8003558:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800355c:	405a      	eors	r2, r3
 800355e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003560:	0e1b      	lsrs	r3, r3, #24
 8003562:	b2db      	uxtb	r3, r3
 8003564:	4619      	mov	r1, r3
 8003566:	4b72      	ldr	r3, [pc, #456]	; (8003730 <mbedtls_internal_aes_encrypt+0x598>)
 8003568:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800356c:	4053      	eors	r3, r2
 800356e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003572:	1d1a      	adds	r2, r3, #4
 8003574:	677a      	str	r2, [r7, #116]	; 0x74
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357a:	b2db      	uxtb	r3, r3
 800357c:	4619      	mov	r1, r3
 800357e:	4b6d      	ldr	r3, [pc, #436]	; (8003734 <mbedtls_internal_aes_encrypt+0x59c>)
 8003580:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003584:	405a      	eors	r2, r3
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	b2db      	uxtb	r3, r3
 800358c:	4619      	mov	r1, r3
 800358e:	4b6a      	ldr	r3, [pc, #424]	; (8003738 <mbedtls_internal_aes_encrypt+0x5a0>)
 8003590:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003594:	405a      	eors	r2, r3
 8003596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	b2db      	uxtb	r3, r3
 800359c:	4619      	mov	r1, r3
 800359e:	4b67      	ldr	r3, [pc, #412]	; (800373c <mbedtls_internal_aes_encrypt+0x5a4>)
 80035a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80035a4:	405a      	eors	r2, r3
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	0e1b      	lsrs	r3, r3, #24
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	4619      	mov	r1, r3
 80035ae:	4b60      	ldr	r3, [pc, #384]	; (8003730 <mbedtls_internal_aes_encrypt+0x598>)
 80035b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80035b4:	4053      	eors	r3, r2
 80035b6:	64fb      	str	r3, [r7, #76]	; 0x4c

    t.X[0] = *RK++ ^ \
 80035b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ba:	1d1a      	adds	r2, r3, #4
 80035bc:	677a      	str	r2, [r7, #116]	; 0x74
 80035be:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 80035c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	4611      	mov	r1, r2
 80035c6:	4a5e      	ldr	r2, [pc, #376]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 80035c8:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 80035ca:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 80035cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	4619      	mov	r1, r3
 80035d4:	4b5a      	ldr	r3, [pc, #360]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 80035d6:	5c5b      	ldrb	r3, [r3, r1]
 80035d8:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 80035da:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 80035dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	4619      	mov	r1, r3
 80035e4:	4b56      	ldr	r3, [pc, #344]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 80035e6:	5c5b      	ldrb	r3, [r3, r1]
 80035e8:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 80035ea:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[3])] << 24);
 80035ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ee:	0e1b      	lsrs	r3, r3, #24
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	4619      	mov	r1, r3
 80035f4:	4b52      	ldr	r3, [pc, #328]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 80035f6:	5c5b      	ldrb	r3, [r3, r1]
 80035f8:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 80035fa:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30

    t.X[1] = *RK++ ^ \
 80035fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003600:	1d1a      	adds	r2, r3, #4
 8003602:	677a      	str	r2, [r7, #116]	; 0x74
 8003604:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 8003606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	4611      	mov	r1, r2
 800360c:	4a4c      	ldr	r2, [pc, #304]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 800360e:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8003610:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8003612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	b2db      	uxtb	r3, r3
 8003618:	4619      	mov	r1, r3
 800361a:	4b49      	ldr	r3, [pc, #292]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 800361c:	5c5b      	ldrb	r3, [r3, r1]
 800361e:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 8003620:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 8003622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003624:	0c1b      	lsrs	r3, r3, #16
 8003626:	b2db      	uxtb	r3, r3
 8003628:	4619      	mov	r1, r3
 800362a:	4b45      	ldr	r3, [pc, #276]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 800362c:	5c5b      	ldrb	r3, [r3, r1]
 800362e:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8003630:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[0])] << 24);
 8003632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003634:	0e1b      	lsrs	r3, r3, #24
 8003636:	b2db      	uxtb	r3, r3
 8003638:	4619      	mov	r1, r3
 800363a:	4b41      	ldr	r3, [pc, #260]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 800363c:	5c5b      	ldrb	r3, [r3, r1]
 800363e:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 8003640:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8003642:	637b      	str	r3, [r7, #52]	; 0x34

    t.X[2] = *RK++ ^ \
 8003644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003646:	1d1a      	adds	r2, r3, #4
 8003648:	677a      	str	r2, [r7, #116]	; 0x74
 800364a:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 800364c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	4611      	mov	r1, r2
 8003652:	4a3b      	ldr	r2, [pc, #236]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 8003654:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8003656:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8003658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	b2db      	uxtb	r3, r3
 800365e:	4619      	mov	r1, r3
 8003660:	4b37      	ldr	r3, [pc, #220]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 8003662:	5c5b      	ldrb	r3, [r3, r1]
 8003664:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 8003666:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8003668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366a:	0c1b      	lsrs	r3, r3, #16
 800366c:	b2db      	uxtb	r3, r3
 800366e:	4619      	mov	r1, r3
 8003670:	4b33      	ldr	r3, [pc, #204]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 8003672:	5c5b      	ldrb	r3, [r3, r1]
 8003674:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8003676:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[1])] << 24);
 8003678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367a:	0e1b      	lsrs	r3, r3, #24
 800367c:	b2db      	uxtb	r3, r3
 800367e:	4619      	mov	r1, r3
 8003680:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 8003682:	5c5b      	ldrb	r3, [r3, r1]
 8003684:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8003686:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8003688:	63bb      	str	r3, [r7, #56]	; 0x38

    t.X[3] = *RK++ ^ \
 800368a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368c:	1d1a      	adds	r2, r3, #4
 800368e:	677a      	str	r2, [r7, #116]	; 0x74
 8003690:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 8003692:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	4611      	mov	r1, r2
 8003698:	4a29      	ldr	r2, [pc, #164]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 800369a:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 800369c:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 800369e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4619      	mov	r1, r3
 80036a6:	4b26      	ldr	r3, [pc, #152]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 80036a8:	5c5b      	ldrb	r3, [r3, r1]
 80036aa:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 80036ac:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 80036ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	4619      	mov	r1, r3
 80036b6:	4b22      	ldr	r3, [pc, #136]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 80036b8:	5c5b      	ldrb	r3, [r3, r1]
 80036ba:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 80036bc:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[2])] << 24);
 80036be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c0:	0e1b      	lsrs	r3, r3, #24
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	4619      	mov	r1, r3
 80036c6:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <mbedtls_internal_aes_encrypt+0x5a8>)
 80036c8:	5c5b      	ldrb	r3, [r3, r1]
 80036ca:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 80036cc:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT32_LE(t.X[0], output,  0);
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80036d6:	623b      	str	r3, [r7, #32]
 80036d8:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 80036da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036dc:	601a      	str	r2, [r3, #0]
}
 80036de:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[1], output,  4);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	1d1a      	adds	r2, r3, #4
 80036e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 80036ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ee:	601a      	str	r2, [r3, #0]
}
 80036f0:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[2], output,  8);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f103 0208 	add.w	r2, r3, #8
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	657a      	str	r2, [r7, #84]	; 0x54
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 8003700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003702:	601a      	str	r2, [r3, #0]
}
 8003704:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[3], output, 12);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f103 020c 	add.w	r2, r3, #12
 800370c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370e:	653a      	str	r2, [r7, #80]	; 0x50
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    memcpy(p, &x, sizeof(x));
 8003714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003716:	601a      	str	r2, [r3, #0]
}
 8003718:	bf00      	nop

    mbedtls_platform_zeroize(&t, sizeof(t));
 800371a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800371e:	2120      	movs	r1, #32
 8003720:	4618      	mov	r0, r3
 8003722:	f00b f903 	bl	800e92c <mbedtls_platform_zeroize>

    return 0;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3778      	adds	r7, #120	; 0x78
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000ed0 	.word	0x20000ed0
 8003734:	200002d0 	.word	0x200002d0
 8003738:	200006d0 	.word	0x200006d0
 800373c:	20000ad0 	.word	0x20000ad0
 8003740:	200001d0 	.word	0x200001d0

08003744 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT) && !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
int mbedtls_internal_aes_decrypt(mbedtls_aes_context *ctx,
                                 const unsigned char input[16],
                                 unsigned char output[16])
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b09e      	sub	sp, #120	; 0x78
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->buf + ctx->rk_offset;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f103 0208 	add.w	r2, r3, #8
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	677b      	str	r3, [r7, #116]	; 0x74
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	663b      	str	r3, [r7, #96]	; 0x60
 8003764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003766:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003768:	61fb      	str	r3, [r7, #28]
    return r;
 800376a:	69fb      	ldr	r3, [r7, #28]
    struct {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE(input,  0); t.X[0] ^= *RK++;
 800376c:	633b      	str	r3, [r7, #48]	; 0x30
 800376e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003770:	1d1a      	adds	r2, r3, #4
 8003772:	677a      	str	r2, [r7, #116]	; 0x74
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	4053      	eors	r3, r2
 800377a:	633b      	str	r3, [r7, #48]	; 0x30
    t.X[1] = MBEDTLS_GET_UINT32_LE(input,  4); t.X[1] ^= *RK++;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	3304      	adds	r3, #4
 8003780:	667b      	str	r3, [r7, #100]	; 0x64
 8003782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003784:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003786:	61bb      	str	r3, [r7, #24]
    return r;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	637b      	str	r3, [r7, #52]	; 0x34
 800378c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378e:	1d1a      	adds	r2, r3, #4
 8003790:	677a      	str	r2, [r7, #116]	; 0x74
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003796:	4053      	eors	r3, r2
 8003798:	637b      	str	r3, [r7, #52]	; 0x34
    t.X[2] = MBEDTLS_GET_UINT32_LE(input,  8); t.X[2] ^= *RK++;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3308      	adds	r3, #8
 800379e:	66bb      	str	r3, [r7, #104]	; 0x68
 80037a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037a2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80037a4:	617b      	str	r3, [r7, #20]
    return r;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80037aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ac:	1d1a      	adds	r2, r3, #4
 80037ae:	677a      	str	r2, [r7, #116]	; 0x74
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	4053      	eors	r3, r2
 80037b6:	63bb      	str	r3, [r7, #56]	; 0x38
    t.X[3] = MBEDTLS_GET_UINT32_LE(input, 12); t.X[3] ^= *RK++;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	330c      	adds	r3, #12
 80037bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80037c2:	613b      	str	r3, [r7, #16]
    return r;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ca:	1d1a      	adds	r2, r3, #4
 80037cc:	677a      	str	r2, [r7, #116]	; 0x74
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d2:	4053      	eors	r3, r2
 80037d4:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	105b      	asrs	r3, r3, #1
 80037dc:	3b01      	subs	r3, #1
 80037de:	673b      	str	r3, [r7, #112]	; 0x70
 80037e0:	e122      	b.n	8003a28 <mbedtls_internal_aes_decrypt+0x2e4>
        AES_RROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 80037e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e4:	1d1a      	adds	r2, r3, #4
 80037e6:	677a      	str	r2, [r7, #116]	; 0x74
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	4619      	mov	r1, r3
 80037f0:	4bb0      	ldr	r3, [pc, #704]	; (8003ab4 <mbedtls_internal_aes_decrypt+0x370>)
 80037f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80037f6:	405a      	eors	r2, r3
 80037f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	4619      	mov	r1, r3
 8003800:	4bad      	ldr	r3, [pc, #692]	; (8003ab8 <mbedtls_internal_aes_decrypt+0x374>)
 8003802:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003806:	405a      	eors	r2, r3
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	0c1b      	lsrs	r3, r3, #16
 800380c:	b2db      	uxtb	r3, r3
 800380e:	4619      	mov	r1, r3
 8003810:	4baa      	ldr	r3, [pc, #680]	; (8003abc <mbedtls_internal_aes_decrypt+0x378>)
 8003812:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003816:	405a      	eors	r2, r3
 8003818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381a:	0e1b      	lsrs	r3, r3, #24
 800381c:	b2db      	uxtb	r3, r3
 800381e:	4619      	mov	r1, r3
 8003820:	4ba7      	ldr	r3, [pc, #668]	; (8003ac0 <mbedtls_internal_aes_decrypt+0x37c>)
 8003822:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003826:	4053      	eors	r3, r2
 8003828:	643b      	str	r3, [r7, #64]	; 0x40
 800382a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800382c:	1d1a      	adds	r2, r3, #4
 800382e:	677a      	str	r2, [r7, #116]	; 0x74
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003834:	b2db      	uxtb	r3, r3
 8003836:	4619      	mov	r1, r3
 8003838:	4b9e      	ldr	r3, [pc, #632]	; (8003ab4 <mbedtls_internal_aes_decrypt+0x370>)
 800383a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800383e:	405a      	eors	r2, r3
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	b2db      	uxtb	r3, r3
 8003846:	4619      	mov	r1, r3
 8003848:	4b9b      	ldr	r3, [pc, #620]	; (8003ab8 <mbedtls_internal_aes_decrypt+0x374>)
 800384a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800384e:	405a      	eors	r2, r3
 8003850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003852:	0c1b      	lsrs	r3, r3, #16
 8003854:	b2db      	uxtb	r3, r3
 8003856:	4619      	mov	r1, r3
 8003858:	4b98      	ldr	r3, [pc, #608]	; (8003abc <mbedtls_internal_aes_decrypt+0x378>)
 800385a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800385e:	405a      	eors	r2, r3
 8003860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003862:	0e1b      	lsrs	r3, r3, #24
 8003864:	b2db      	uxtb	r3, r3
 8003866:	4619      	mov	r1, r3
 8003868:	4b95      	ldr	r3, [pc, #596]	; (8003ac0 <mbedtls_internal_aes_decrypt+0x37c>)
 800386a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800386e:	4053      	eors	r3, r2
 8003870:	647b      	str	r3, [r7, #68]	; 0x44
 8003872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003874:	1d1a      	adds	r2, r3, #4
 8003876:	677a      	str	r2, [r7, #116]	; 0x74
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	b2db      	uxtb	r3, r3
 800387e:	4619      	mov	r1, r3
 8003880:	4b8c      	ldr	r3, [pc, #560]	; (8003ab4 <mbedtls_internal_aes_decrypt+0x370>)
 8003882:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003886:	405a      	eors	r2, r3
 8003888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	b2db      	uxtb	r3, r3
 800388e:	4619      	mov	r1, r3
 8003890:	4b89      	ldr	r3, [pc, #548]	; (8003ab8 <mbedtls_internal_aes_decrypt+0x374>)
 8003892:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003896:	405a      	eors	r2, r3
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	0c1b      	lsrs	r3, r3, #16
 800389c:	b2db      	uxtb	r3, r3
 800389e:	4619      	mov	r1, r3
 80038a0:	4b86      	ldr	r3, [pc, #536]	; (8003abc <mbedtls_internal_aes_decrypt+0x378>)
 80038a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80038a6:	405a      	eors	r2, r3
 80038a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038aa:	0e1b      	lsrs	r3, r3, #24
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	4619      	mov	r1, r3
 80038b0:	4b83      	ldr	r3, [pc, #524]	; (8003ac0 <mbedtls_internal_aes_decrypt+0x37c>)
 80038b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80038b6:	4053      	eors	r3, r2
 80038b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80038ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038bc:	1d1a      	adds	r2, r3, #4
 80038be:	677a      	str	r2, [r7, #116]	; 0x74
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	4619      	mov	r1, r3
 80038c8:	4b7a      	ldr	r3, [pc, #488]	; (8003ab4 <mbedtls_internal_aes_decrypt+0x370>)
 80038ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80038ce:	405a      	eors	r2, r3
 80038d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d2:	0a1b      	lsrs	r3, r3, #8
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	4619      	mov	r1, r3
 80038d8:	4b77      	ldr	r3, [pc, #476]	; (8003ab8 <mbedtls_internal_aes_decrypt+0x374>)
 80038da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80038de:	405a      	eors	r2, r3
 80038e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e2:	0c1b      	lsrs	r3, r3, #16
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	4619      	mov	r1, r3
 80038e8:	4b74      	ldr	r3, [pc, #464]	; (8003abc <mbedtls_internal_aes_decrypt+0x378>)
 80038ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80038ee:	405a      	eors	r2, r3
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	0e1b      	lsrs	r3, r3, #24
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	4619      	mov	r1, r3
 80038f8:	4b71      	ldr	r3, [pc, #452]	; (8003ac0 <mbedtls_internal_aes_decrypt+0x37c>)
 80038fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80038fe:	4053      	eors	r3, r2
 8003900:	64fb      	str	r3, [r7, #76]	; 0x4c
        AES_RROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 8003902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003904:	1d1a      	adds	r2, r3, #4
 8003906:	677a      	str	r2, [r7, #116]	; 0x74
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390c:	b2db      	uxtb	r3, r3
 800390e:	4619      	mov	r1, r3
 8003910:	4b68      	ldr	r3, [pc, #416]	; (8003ab4 <mbedtls_internal_aes_decrypt+0x370>)
 8003912:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003916:	405a      	eors	r2, r3
 8003918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	b2db      	uxtb	r3, r3
 800391e:	4619      	mov	r1, r3
 8003920:	4b65      	ldr	r3, [pc, #404]	; (8003ab8 <mbedtls_internal_aes_decrypt+0x374>)
 8003922:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003926:	405a      	eors	r2, r3
 8003928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392a:	0c1b      	lsrs	r3, r3, #16
 800392c:	b2db      	uxtb	r3, r3
 800392e:	4619      	mov	r1, r3
 8003930:	4b62      	ldr	r3, [pc, #392]	; (8003abc <mbedtls_internal_aes_decrypt+0x378>)
 8003932:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003936:	405a      	eors	r2, r3
 8003938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800393a:	0e1b      	lsrs	r3, r3, #24
 800393c:	b2db      	uxtb	r3, r3
 800393e:	4619      	mov	r1, r3
 8003940:	4b5f      	ldr	r3, [pc, #380]	; (8003ac0 <mbedtls_internal_aes_decrypt+0x37c>)
 8003942:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003946:	4053      	eors	r3, r2
 8003948:	633b      	str	r3, [r7, #48]	; 0x30
 800394a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800394c:	1d1a      	adds	r2, r3, #4
 800394e:	677a      	str	r2, [r7, #116]	; 0x74
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003954:	b2db      	uxtb	r3, r3
 8003956:	4619      	mov	r1, r3
 8003958:	4b56      	ldr	r3, [pc, #344]	; (8003ab4 <mbedtls_internal_aes_decrypt+0x370>)
 800395a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800395e:	405a      	eors	r2, r3
 8003960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003962:	0a1b      	lsrs	r3, r3, #8
 8003964:	b2db      	uxtb	r3, r3
 8003966:	4619      	mov	r1, r3
 8003968:	4b53      	ldr	r3, [pc, #332]	; (8003ab8 <mbedtls_internal_aes_decrypt+0x374>)
 800396a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800396e:	405a      	eors	r2, r3
 8003970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4619      	mov	r1, r3
 8003978:	4b50      	ldr	r3, [pc, #320]	; (8003abc <mbedtls_internal_aes_decrypt+0x378>)
 800397a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800397e:	405a      	eors	r2, r3
 8003980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003982:	0e1b      	lsrs	r3, r3, #24
 8003984:	b2db      	uxtb	r3, r3
 8003986:	4619      	mov	r1, r3
 8003988:	4b4d      	ldr	r3, [pc, #308]	; (8003ac0 <mbedtls_internal_aes_decrypt+0x37c>)
 800398a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800398e:	4053      	eors	r3, r2
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
 8003992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003994:	1d1a      	adds	r2, r3, #4
 8003996:	677a      	str	r2, [r7, #116]	; 0x74
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800399c:	b2db      	uxtb	r3, r3
 800399e:	4619      	mov	r1, r3
 80039a0:	4b44      	ldr	r3, [pc, #272]	; (8003ab4 <mbedtls_internal_aes_decrypt+0x370>)
 80039a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039a6:	405a      	eors	r2, r3
 80039a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	4619      	mov	r1, r3
 80039b0:	4b41      	ldr	r3, [pc, #260]	; (8003ab8 <mbedtls_internal_aes_decrypt+0x374>)
 80039b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039b6:	405a      	eors	r2, r3
 80039b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ba:	0c1b      	lsrs	r3, r3, #16
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	4619      	mov	r1, r3
 80039c0:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <mbedtls_internal_aes_decrypt+0x378>)
 80039c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039c6:	405a      	eors	r2, r3
 80039c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ca:	0e1b      	lsrs	r3, r3, #24
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	4619      	mov	r1, r3
 80039d0:	4b3b      	ldr	r3, [pc, #236]	; (8003ac0 <mbedtls_internal_aes_decrypt+0x37c>)
 80039d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039d6:	4053      	eors	r3, r2
 80039d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80039da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039dc:	1d1a      	adds	r2, r3, #4
 80039de:	677a      	str	r2, [r7, #116]	; 0x74
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	4619      	mov	r1, r3
 80039e8:	4b32      	ldr	r3, [pc, #200]	; (8003ab4 <mbedtls_internal_aes_decrypt+0x370>)
 80039ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039ee:	405a      	eors	r2, r3
 80039f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	4619      	mov	r1, r3
 80039f8:	4b2f      	ldr	r3, [pc, #188]	; (8003ab8 <mbedtls_internal_aes_decrypt+0x374>)
 80039fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039fe:	405a      	eors	r2, r3
 8003a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a02:	0c1b      	lsrs	r3, r3, #16
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	4619      	mov	r1, r3
 8003a08:	4b2c      	ldr	r3, [pc, #176]	; (8003abc <mbedtls_internal_aes_decrypt+0x378>)
 8003a0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a0e:	405a      	eors	r2, r3
 8003a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a12:	0e1b      	lsrs	r3, r3, #24
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	4619      	mov	r1, r3
 8003a18:	4b29      	ldr	r3, [pc, #164]	; (8003ac0 <mbedtls_internal_aes_decrypt+0x37c>)
 8003a1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a1e:	4053      	eors	r3, r2
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 8003a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a24:	3b01      	subs	r3, #1
 8003a26:	673b      	str	r3, [r7, #112]	; 0x70
 8003a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f73f aed9 	bgt.w	80037e2 <mbedtls_internal_aes_decrypt+0x9e>
    }

    AES_RROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8003a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a32:	1d1a      	adds	r2, r3, #4
 8003a34:	677a      	str	r2, [r7, #116]	; 0x74
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <mbedtls_internal_aes_decrypt+0x370>)
 8003a40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a44:	405a      	eors	r2, r3
 8003a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a48:	0a1b      	lsrs	r3, r3, #8
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <mbedtls_internal_aes_decrypt+0x374>)
 8003a50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a54:	405a      	eors	r2, r3
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4b17      	ldr	r3, [pc, #92]	; (8003abc <mbedtls_internal_aes_decrypt+0x378>)
 8003a60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a64:	405a      	eors	r2, r3
 8003a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a68:	0e1b      	lsrs	r3, r3, #24
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <mbedtls_internal_aes_decrypt+0x37c>)
 8003a70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a74:	4053      	eors	r3, r2
 8003a76:	643b      	str	r3, [r7, #64]	; 0x40
 8003a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a7a:	1d1a      	adds	r2, r3, #4
 8003a7c:	677a      	str	r2, [r7, #116]	; 0x74
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	4619      	mov	r1, r3
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <mbedtls_internal_aes_decrypt+0x370>)
 8003a88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a8c:	405a      	eors	r2, r3
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	4619      	mov	r1, r3
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <mbedtls_internal_aes_decrypt+0x374>)
 8003a98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a9c:	405a      	eors	r2, r3
 8003a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <mbedtls_internal_aes_decrypt+0x378>)
 8003aa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003aac:	405a      	eors	r2, r3
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	e008      	b.n	8003ac4 <mbedtls_internal_aes_decrypt+0x380>
 8003ab2:	bf00      	nop
 8003ab4:	200013d0 	.word	0x200013d0
 8003ab8:	200017d0 	.word	0x200017d0
 8003abc:	20001bd0 	.word	0x20001bd0
 8003ac0:	20001fd0 	.word	0x20001fd0
 8003ac4:	0e1b      	lsrs	r3, r3, #24
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4b84      	ldr	r3, [pc, #528]	; (8003cdc <mbedtls_internal_aes_decrypt+0x598>)
 8003acc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ad0:	4053      	eors	r3, r2
 8003ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad6:	1d1a      	adds	r2, r3, #4
 8003ad8:	677a      	str	r2, [r7, #116]	; 0x74
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4b7f      	ldr	r3, [pc, #508]	; (8003ce0 <mbedtls_internal_aes_decrypt+0x59c>)
 8003ae4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ae8:	405a      	eors	r2, r3
 8003aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	4619      	mov	r1, r3
 8003af2:	4b7c      	ldr	r3, [pc, #496]	; (8003ce4 <mbedtls_internal_aes_decrypt+0x5a0>)
 8003af4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003af8:	405a      	eors	r2, r3
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	4619      	mov	r1, r3
 8003b02:	4b79      	ldr	r3, [pc, #484]	; (8003ce8 <mbedtls_internal_aes_decrypt+0x5a4>)
 8003b04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b08:	405a      	eors	r2, r3
 8003b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0c:	0e1b      	lsrs	r3, r3, #24
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	4619      	mov	r1, r3
 8003b12:	4b72      	ldr	r3, [pc, #456]	; (8003cdc <mbedtls_internal_aes_decrypt+0x598>)
 8003b14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b18:	4053      	eors	r3, r2
 8003b1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b1e:	1d1a      	adds	r2, r3, #4
 8003b20:	677a      	str	r2, [r7, #116]	; 0x74
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4b6d      	ldr	r3, [pc, #436]	; (8003ce0 <mbedtls_internal_aes_decrypt+0x59c>)
 8003b2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b30:	405a      	eors	r2, r3
 8003b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b34:	0a1b      	lsrs	r3, r3, #8
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <mbedtls_internal_aes_decrypt+0x5a0>)
 8003b3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b40:	405a      	eors	r2, r3
 8003b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4b67      	ldr	r3, [pc, #412]	; (8003ce8 <mbedtls_internal_aes_decrypt+0x5a4>)
 8003b4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b50:	405a      	eors	r2, r3
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	0e1b      	lsrs	r3, r3, #24
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4b60      	ldr	r3, [pc, #384]	; (8003cdc <mbedtls_internal_aes_decrypt+0x598>)
 8003b5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b60:	4053      	eors	r3, r2
 8003b62:	64fb      	str	r3, [r7, #76]	; 0x4c

    t.X[0] = *RK++ ^ \
 8003b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b66:	1d1a      	adds	r2, r3, #4
 8003b68:	677a      	str	r2, [r7, #116]	; 0x74
 8003b6a:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 8003b6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	4611      	mov	r1, r2
 8003b72:	4a5e      	ldr	r2, [pc, #376]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003b74:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 8003b76:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8003b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4b5a      	ldr	r3, [pc, #360]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003b82:	5c5b      	ldrb	r3, [r3, r1]
 8003b84:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 8003b86:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8003b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8a:	0c1b      	lsrs	r3, r3, #16
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4b56      	ldr	r3, [pc, #344]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003b92:	5c5b      	ldrb	r3, [r3, r1]
 8003b94:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8003b96:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[1])] << 24);
 8003b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b9a:	0e1b      	lsrs	r3, r3, #24
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4b52      	ldr	r3, [pc, #328]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003ba2:	5c5b      	ldrb	r3, [r3, r1]
 8003ba4:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8003ba6:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8003ba8:	633b      	str	r3, [r7, #48]	; 0x30

    t.X[1] = *RK++ ^ \
 8003baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bac:	1d1a      	adds	r2, r3, #4
 8003bae:	677a      	str	r2, [r7, #116]	; 0x74
 8003bb0:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 8003bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4a4c      	ldr	r2, [pc, #304]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003bba:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8003bbc:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 8003bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4b49      	ldr	r3, [pc, #292]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003bc8:	5c5b      	ldrb	r3, [r3, r1]
 8003bca:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 8003bcc:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 8003bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4b45      	ldr	r3, [pc, #276]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003bd8:	5c5b      	ldrb	r3, [r3, r1]
 8003bda:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 8003bdc:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[2])] << 24);
 8003bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be0:	0e1b      	lsrs	r3, r3, #24
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	4619      	mov	r1, r3
 8003be6:	4b41      	ldr	r3, [pc, #260]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003be8:	5c5b      	ldrb	r3, [r3, r1]
 8003bea:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 8003bec:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34

    t.X[2] = *RK++ ^ \
 8003bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	677a      	str	r2, [r7, #116]	; 0x74
 8003bf6:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 8003bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4a3b      	ldr	r2, [pc, #236]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003c00:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8003c02:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 8003c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4b37      	ldr	r3, [pc, #220]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003c0e:	5c5b      	ldrb	r3, [r3, r1]
 8003c10:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 8003c12:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8003c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c16:	0c1b      	lsrs	r3, r3, #16
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4b33      	ldr	r3, [pc, #204]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003c1e:	5c5b      	ldrb	r3, [r3, r1]
 8003c20:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 8003c22:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[3])] << 24);
 8003c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c26:	0e1b      	lsrs	r3, r3, #24
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4b2f      	ldr	r3, [pc, #188]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003c2e:	5c5b      	ldrb	r3, [r3, r1]
 8003c30:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8003c32:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8003c34:	63bb      	str	r3, [r7, #56]	; 0x38

    t.X[3] = *RK++ ^ \
 8003c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c38:	1d1a      	adds	r2, r3, #4
 8003c3a:	677a      	str	r2, [r7, #116]	; 0x74
 8003c3c:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 8003c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	4611      	mov	r1, r2
 8003c44:	4a29      	ldr	r2, [pc, #164]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003c46:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 8003c48:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8003c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	4619      	mov	r1, r3
 8003c52:	4b26      	ldr	r3, [pc, #152]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003c54:	5c5b      	ldrb	r3, [r3, r1]
 8003c56:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 8003c58:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 8003c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	4619      	mov	r1, r3
 8003c62:	4b22      	ldr	r3, [pc, #136]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003c64:	5c5b      	ldrb	r3, [r3, r1]
 8003c66:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8003c68:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[0])] << 24);
 8003c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6c:	0e1b      	lsrs	r3, r3, #24
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	4619      	mov	r1, r3
 8003c72:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <mbedtls_internal_aes_decrypt+0x5a8>)
 8003c74:	5c5b      	ldrb	r3, [r3, r1]
 8003c76:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 8003c78:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT32_LE(t.X[0], output,  0);
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c82:	623b      	str	r3, [r7, #32]
 8003c84:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8003c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c88:	601a      	str	r2, [r3, #0]
}
 8003c8a:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[1], output,  4);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	1d1a      	adds	r2, r3, #4
 8003c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c92:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
 8003c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 8003c98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c9a:	601a      	str	r2, [r3, #0]
}
 8003c9c:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[2], output,  8);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f103 0208 	add.w	r2, r3, #8
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	657a      	str	r2, [r7, #84]	; 0x54
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 8003cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cae:	601a      	str	r2, [r3, #0]
}
 8003cb0:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[3], output, 12);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f103 020c 	add.w	r2, r3, #12
 8003cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cba:	653a      	str	r2, [r7, #80]	; 0x50
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    memcpy(p, &x, sizeof(x));
 8003cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc2:	601a      	str	r2, [r3, #0]
}
 8003cc4:	bf00      	nop

    mbedtls_platform_zeroize(&t, sizeof(t));
 8003cc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cca:	2120      	movs	r1, #32
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f00a fe2d 	bl	800e92c <mbedtls_platform_zeroize>

    return 0;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3778      	adds	r7, #120	; 0x78
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20001fd0 	.word	0x20001fd0
 8003ce0:	200013d0 	.word	0x200013d0
 8003ce4:	200017d0 	.word	0x200017d0
 8003ce8:	20001bd0 	.word	0x20001bd0
 8003cec:	200012d0 	.word	0x200012d0

08003cf0 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb(mbedtls_aes_context *ctx,
                          int mode,
                          const unsigned char input[16],
                          unsigned char output[16])
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d005      	beq.n	8003d10 <mbedtls_aes_crypt_ecb+0x20>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <mbedtls_aes_crypt_ecb+0x20>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8003d0a:	f06f 0320 	mvn.w	r3, #32
 8003d0e:	e00f      	b.n	8003d30 <mbedtls_aes_crypt_ecb+0x40>
    }
#endif

#if !defined(MBEDTLS_AES_USE_HARDWARE_ONLY)
#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
    if (mode == MBEDTLS_AES_DECRYPT) {
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <mbedtls_aes_crypt_ecb+0x34>
        return mbedtls_internal_aes_decrypt(ctx, input, output);
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f7ff fd12 	bl	8003744 <mbedtls_internal_aes_decrypt>
 8003d20:	4603      	mov	r3, r0
 8003d22:	e005      	b.n	8003d30 <mbedtls_aes_crypt_ecb+0x40>
    } else
#endif
    {
        return mbedtls_internal_aes_encrypt(ctx, input, output);
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f7ff fa35 	bl	8003198 <mbedtls_internal_aes_encrypt>
 8003d2e:	4603      	mov	r3, r0
    }
#endif /* !MBEDTLS_AES_USE_HARDWARE_ONLY */
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <mbedtls_aes_crypt_cbc>:
                          int mode,
                          size_t length,
                          unsigned char iv[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 8003d38:	b5b0      	push	{r4, r5, r7, lr}
 8003d3a:	b0a2      	sub	sp, #136	; 0x88
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8003d46:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8003d4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    unsigned char temp[16];

    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d005      	beq.n	8003d60 <mbedtls_aes_crypt_cbc+0x28>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <mbedtls_aes_crypt_cbc+0x28>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8003d5a:	f06f 0320 	mvn.w	r3, #32
 8003d5e:	e108      	b.n	8003f72 <mbedtls_aes_crypt_cbc+0x23a>
    }

    /* Nothing to do if length is zero. */
    if (length == 0) {
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <mbedtls_aes_crypt_cbc+0x32>
        return 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e103      	b.n	8003f72 <mbedtls_aes_crypt_cbc+0x23a>
    }

    if (length % 16) {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <mbedtls_aes_crypt_cbc+0x42>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8003d74:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8003d78:	e0fb      	b.n	8003f72 <mbedtls_aes_crypt_cbc+0x23a>
        // unaccelerated mode
        //
    }
#endif

    const unsigned char *ivp = iv;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    if (mode == MBEDTLS_AES_DECRYPT) {
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f040 80e3 	bne.w	8003f4e <mbedtls_aes_crypt_cbc+0x216>
        while (length > 0) {
 8003d88:	e075      	b.n	8003e76 <mbedtls_aes_crypt_cbc+0x13e>
            memcpy(temp, input, 16);
 8003d8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d8e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            ret = mbedtls_aes_crypt_ecb(ctx, mode, input, output);
 8003d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003da0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7ff ffa2 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 8003dac:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            if (ret != 0) {
 8003db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f040 80d7 	bne.w	8003f68 <mbedtls_aes_crypt_cbc+0x230>
 8003dba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	677b      	str	r3, [r7, #116]	; 0x74
 8003dca:	2310      	movs	r3, #16
 8003dcc:	673b      	str	r3, [r7, #112]	; 0x70
static inline void mbedtls_xor_no_simd(unsigned char *r,
                                       const unsigned char *a,
                                       const unsigned char *b,
                                       size_t n)
{
    size_t i = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (n % 8 == 0) {
        return;
    }
#endif
#else
    for (; (i + 4) <= n; i += 4) {
 8003dd2:	e01e      	b.n	8003e12 <mbedtls_aes_crypt_cbc+0xda>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8003dd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd8:	4413      	add	r3, r2
 8003dda:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ddc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dde:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003de0:	61bb      	str	r3, [r7, #24]
    return r;
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de8:	440b      	add	r3, r1
 8003dea:	667b      	str	r3, [r7, #100]	; 0x64
 8003dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dee:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003df0:	617b      	str	r3, [r7, #20]
    return r;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	4053      	eors	r3, r2
 8003df6:	663b      	str	r3, [r7, #96]	; 0x60
        mbedtls_put_unaligned_uint32(r + i, x);
 8003df8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	4413      	add	r3, r2
 8003dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 8003e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e08:	601a      	str	r2, [r3, #0]
}
 8003e0a:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8003e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0e:	3304      	adds	r3, #4
 8003e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e14:	3304      	adds	r3, #4
 8003e16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d2db      	bcs.n	8003dd4 <mbedtls_aes_crypt_cbc+0x9c>
        return;
    }
#endif
#endif
#endif
    for (; i < n; i++) {
 8003e1c:	e010      	b.n	8003e40 <mbedtls_aes_crypt_cbc+0x108>
        r[i] = a[i] ^ b[i];
 8003e1e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e22:	4413      	add	r3, r2
 8003e24:	7819      	ldrb	r1, [r3, #0]
 8003e26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2a:	4413      	add	r3, r2
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e32:	4403      	add	r3, r0
 8003e34:	404a      	eors	r2, r1
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8003e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d8ea      	bhi.n	8003e1e <mbedtls_aes_crypt_cbc+0xe6>
    }
}
 8003e48:	bf00      	nop
            /* Avoid using the NEON implementation of mbedtls_xor. Because of the dependency on
             * the result for the next block in CBC, and the cost of transferring that data from
             * NEON registers, NEON is slower on aarch64. */
            mbedtls_xor_no_simd(output, output, iv, 16);

            memcpy(iv, temp, 16);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	461d      	mov	r5, r3
 8003e4e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e54:	6028      	str	r0, [r5, #0]
 8003e56:	6069      	str	r1, [r5, #4]
 8003e58:	60aa      	str	r2, [r5, #8]
 8003e5a:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8003e5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e60:	3310      	adds	r3, #16
 8003e62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            output += 16;
 8003e66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e6a:	3310      	adds	r3, #16
 8003e6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            length -= 16;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3b10      	subs	r3, #16
 8003e74:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d186      	bne.n	8003d8a <mbedtls_aes_crypt_cbc+0x52>
 8003e7c:	e070      	b.n	8003f60 <mbedtls_aes_crypt_cbc+0x228>
 8003e7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e82:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e88:	657b      	str	r3, [r7, #84]	; 0x54
 8003e8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e90:	2310      	movs	r3, #16
 8003e92:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t i = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	64bb      	str	r3, [r7, #72]	; 0x48
    for (; (i + 4) <= n; i += 4) {
 8003e98:	e01e      	b.n	8003ed8 <mbedtls_aes_crypt_cbc+0x1a0>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8003e9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e9e:	4413      	add	r3, r2
 8003ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8003ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eae:	440b      	add	r3, r1
 8003eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8003eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eb4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003eb6:	623b      	str	r3, [r7, #32]
    return r;
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	4053      	eors	r3, r2
 8003ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        mbedtls_put_unaligned_uint32(r + i, x);
 8003ebe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec2:	4413      	add	r3, r2
 8003ec4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ece:	601a      	str	r2, [r3, #0]
}
 8003ed0:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8003ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eda:	3304      	adds	r3, #4
 8003edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d2db      	bcs.n	8003e9a <mbedtls_aes_crypt_cbc+0x162>
    for (; i < n; i++) {
 8003ee2:	e010      	b.n	8003f06 <mbedtls_aes_crypt_cbc+0x1ce>
        r[i] = a[i] ^ b[i];
 8003ee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee8:	4413      	add	r3, r2
 8003eea:	7819      	ldrb	r1, [r3, #0]
 8003eec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef0:	4413      	add	r3, r2
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef8:	4403      	add	r3, r0
 8003efa:	404a      	eors	r2, r1
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8003f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f02:	3301      	adds	r3, #1
 8003f04:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d8ea      	bhi.n	8003ee4 <mbedtls_aes_crypt_cbc+0x1ac>
}
 8003f0e:	bf00      	nop
        }
    } else {
        while (length > 0) {
            mbedtls_xor_no_simd(output, input, ivp, 16);

            ret = mbedtls_aes_crypt_ecb(ctx, mode, output, output);
 8003f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f14:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff fee8 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 8003f20:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            if (ret != 0) {
 8003f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d11f      	bne.n	8003f6c <mbedtls_aes_crypt_cbc+0x234>
                goto exit;
            }
            ivp = output;
 8003f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            input  += 16;
 8003f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f38:	3310      	adds	r3, #16
 8003f3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            output += 16;
 8003f3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f42:	3310      	adds	r3, #16
 8003f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            length -= 16;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3b10      	subs	r3, #16
 8003f4c:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d194      	bne.n	8003e7e <mbedtls_aes_crypt_cbc+0x146>
        }
        memcpy(iv, ivp, 16);
 8003f54:	2210      	movs	r2, #16
 8003f56:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003f5a:	6838      	ldr	r0, [r7, #0]
 8003f5c:	f019 f9cc 	bl	801d2f8 <memcpy>
    }
    ret = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f66:	e002      	b.n	8003f6e <mbedtls_aes_crypt_cbc+0x236>
                goto exit;
 8003f68:	bf00      	nop
 8003f6a:	e000      	b.n	8003f6e <mbedtls_aes_crypt_cbc+0x236>
                goto exit;
 8003f6c:	bf00      	nop

exit:
    return ret;
 8003f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3788      	adds	r7, #136	; 0x88
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bdb0      	pop	{r4, r5, r7, pc}

08003f7a <mbedtls_gf128mul_x_ble>:
#if defined(MBEDTLS_AESCE_C) || defined(MBEDTLS_AESNI_C)
MBEDTLS_OPTIMIZE_FOR_PERFORMANCE
#endif
static inline void mbedtls_gf128mul_x_ble(unsigned char r[16],
                                          const unsigned char x[16])
{
 8003f7a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f7e:	b09a      	sub	sp, #104	; 0x68
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6178      	str	r0, [r7, #20]
 8003f84:	6139      	str	r1, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	643b      	str	r3, [r7, #64]	; 0x40
    r = *p64;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint64_unaligned_t *p64 = (mbedtls_uint64_unaligned_t *) p;
    r = p64->x;
#else
    memcpy(&r, p, sizeof(r));
 8003f8a:	f107 0320 	add.w	r3, r7, #32
 8003f8e:	2208      	movs	r2, #8
 8003f90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f92:	4618      	mov	r0, r3
 8003f94:	f019 f9b0 	bl	801d2f8 <memcpy>
#endif
    return r;
 8003f98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    uint64_t a, b, ra, rb;

    a = MBEDTLS_GET_UINT64_LE(x, 0);
 8003f9c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    b = MBEDTLS_GET_UINT64_LE(x, 8);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	647b      	str	r3, [r7, #68]	; 0x44
    memcpy(&r, p, sizeof(r));
 8003fa6:	f107 0318 	add.w	r3, r7, #24
 8003faa:	2208      	movs	r2, #8
 8003fac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f019 f9a2 	bl	801d2f8 <memcpy>
    return r;
 8003fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fb8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    ra = (a << 1)  ^ 0x0087 >> (8 - ((b >> 63) << 3));
 8003fbc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003fc0:	1894      	adds	r4, r2, r2
 8003fc2:	eb43 0503 	adc.w	r5, r3, r3
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	4629      	mov	r1, r5
 8003fca:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	0fea      	lsrs	r2, r5, #31
 8003fd8:	2300      	movs	r3, #0
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	f1c3 0308 	rsb	r3, r3, #8
 8003fe2:	2287      	movs	r2, #135	; 0x87
 8003fe4:	fa42 f303 	asr.w	r3, r2, r3
 8003fe8:	17da      	asrs	r2, r3, #31
 8003fea:	4698      	mov	r8, r3
 8003fec:	4691      	mov	r9, r2
 8003fee:	ea80 0308 	eor.w	r3, r0, r8
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	ea81 0309 	eor.w	r3, r1, r9
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003ffe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    rb = (a >> 63) | (b << 1);
 8004002:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004006:	f04f 0000 	mov.w	r0, #0
 800400a:	f04f 0100 	mov.w	r1, #0
 800400e:	0fd8      	lsrs	r0, r3, #31
 8004010:	2100      	movs	r1, #0
 8004012:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004016:	1894      	adds	r4, r2, r2
 8004018:	603c      	str	r4, [r7, #0]
 800401a:	415b      	adcs	r3, r3
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004022:	ea40 0a02 	orr.w	sl, r0, r2
 8004026:	ea41 0b03 	orr.w	fp, r1, r3
 800402a:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004032:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004036:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    *p64 = x;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint64_unaligned_t *p64 = (mbedtls_uint64_unaligned_t *) p;
    p64->x = x;
#else
    memcpy(p, &x, sizeof(x));
 800403a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800403e:	2208      	movs	r2, #8
 8004040:	4619      	mov	r1, r3
 8004042:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004044:	f019 f958 	bl	801d2f8 <memcpy>
#endif
}
 8004048:	bf00      	nop

    MBEDTLS_PUT_UINT64_LE(ra, r, 0);
    MBEDTLS_PUT_UINT64_LE(rb, r, 8);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	3308      	adds	r3, #8
 800404e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004050:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004054:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    memcpy(p, &x, sizeof(x));
 8004058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800405c:	2208      	movs	r2, #8
 800405e:	4619      	mov	r1, r3
 8004060:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004062:	f019 f949 	bl	801d2f8 <memcpy>
}
 8004066:	bf00      	nop
}
 8004068:	bf00      	nop
 800406a:	3768      	adds	r7, #104	; 0x68
 800406c:	46bd      	mov	sp, r7
 800406e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004072 <mbedtls_aes_crypt_xts>:
                          int mode,
                          size_t length,
                          const unsigned char data_unit[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 8004072:	b590      	push	{r4, r7, lr}
 8004074:	b0d3      	sub	sp, #332	; 0x14c
 8004076:	af00      	add	r7, sp, #0
 8004078:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 800407c:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 8004080:	6020      	str	r0, [r4, #0]
 8004082:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004086:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 800408a:	6001      	str	r1, [r0, #0]
 800408c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8004090:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 8004094:	600a      	str	r2, [r1, #0]
 8004096:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800409a:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800409e:	6013      	str	r3, [r2, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80040a0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80040a4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    size_t blocks = length / 16;
 80040a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80040ac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	091b      	lsrs	r3, r3, #4
 80040b4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    size_t leftover = length % 16;
 80040b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80040bc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    unsigned char tweak[16];
    unsigned char prev_tweak[16];
    unsigned char tmp[16];

    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 80040ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80040ce:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d009      	beq.n	80040ec <mbedtls_aes_crypt_xts+0x7a>
 80040d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80040dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <mbedtls_aes_crypt_xts+0x7a>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 80040e6:	f06f 0320 	mvn.w	r3, #32
 80040ea:	e380      	b.n	80047ee <mbedtls_aes_crypt_xts+0x77c>
    }

    /* Data units must be at least 16 bytes long. */
    if (length < 16) {
 80040ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80040f0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b0f      	cmp	r3, #15
 80040f8:	d802      	bhi.n	8004100 <mbedtls_aes_crypt_xts+0x8e>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 80040fa:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80040fe:	e376      	b.n	80047ee <mbedtls_aes_crypt_xts+0x77c>
    }

    /* NIST SP 800-38E disallows data units larger than 2**20 blocks. */
    if (length > (1 << 20) * 16) {
 8004100:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004104:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800410e:	d902      	bls.n	8004116 <mbedtls_aes_crypt_xts+0xa4>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8004110:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8004114:	e36b      	b.n	80047ee <mbedtls_aes_crypt_xts+0x77c>
    }

    /* Compute the tweak. */
    ret = mbedtls_aes_crypt_ecb(&ctx->tweak, MBEDTLS_AES_ENCRYPT,
 8004116:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800411a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f503 708c 	add.w	r0, r3, #280	; 0x118
 8004124:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004128:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800412c:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	2101      	movs	r1, #1
 8004134:	f7ff fddc 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 8004138:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
                                data_unit, tweak);
    if (ret != 0) {
 800413c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8168 	beq.w	8004416 <mbedtls_aes_crypt_xts+0x3a4>
        return ret;
 8004146:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800414a:	e350      	b.n	80047ee <mbedtls_aes_crypt_xts+0x77c>
    }

    while (blocks--) {
        if (MBEDTLS_UNLIKELY(leftover && (mode == MBEDTLS_AES_DECRYPT) && blocks == 0)) {
 800414c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf14      	ite	ne
 8004154:	2301      	movne	r3, #1
 8004156:	2300      	moveq	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00d      	beq.n	800417a <mbedtls_aes_crypt_xts+0x108>
 800415e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004162:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <mbedtls_aes_crypt_xts+0x108>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <mbedtls_aes_crypt_xts+0x10a>
 800417a:	2300      	movs	r3, #0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d017      	beq.n	80041b0 <mbedtls_aes_crypt_xts+0x13e>
 8004180:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00e      	beq.n	80041b0 <mbedtls_aes_crypt_xts+0x13e>
            /* We are on the last block in a decrypt operation that has
             * leftover bytes, so we need to use the next tweak for this block,
             * and this tweak for the leftover bytes. Save the current tweak for
             * the leftovers and then update the current tweak for use on this,
             * the last full block. */
            memcpy(prev_tweak, tweak, sizeof(tweak));
 8004192:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8004196:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800419a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800419c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            mbedtls_gf128mul_x_ble(tweak, tweak);
 80041a0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80041a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80041a8:	4611      	mov	r1, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fee5 	bl	8003f7a <mbedtls_gf128mul_x_ble>
 80041b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80041b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80041b8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80041bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80041c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80041c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041c8:	2310      	movs	r3, #16
 80041ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    size_t i = 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for (; (i + 4) <= n; i += 4) {
 80041d4:	e048      	b.n	8004268 <mbedtls_aes_crypt_xts+0x1f6>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80041d6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80041da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041de:	4413      	add	r3, r2
 80041e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80041e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 80041ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80041f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80041f4:	601a      	str	r2, [r3, #0]
    return r;
 80041f6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80041fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8004204:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004208:	440b      	add	r3, r1
 800420a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 8004216:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800421a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800421e:	6019      	str	r1, [r3, #0]
    return r;
 8004220:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004224:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4053      	eors	r3, r2
 800422c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        mbedtls_put_unaligned_uint32(r + i, x);
 8004230:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004234:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004238:	4413      	add	r3, r2
 800423a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800423e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004242:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004246:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004250:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004254:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8004256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800425a:	601a      	str	r2, [r3, #0]
}
 800425c:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800425e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004262:	3304      	adds	r3, #4
 8004264:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004268:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800426c:	3304      	adds	r3, #4
 800426e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8004272:	429a      	cmp	r2, r3
 8004274:	d2af      	bcs.n	80041d6 <mbedtls_aes_crypt_xts+0x164>
    for (; i < n; i++) {
 8004276:	e018      	b.n	80042aa <mbedtls_aes_crypt_xts+0x238>
        r[i] = a[i] ^ b[i];
 8004278:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800427c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004280:	4413      	add	r3, r2
 8004282:	7819      	ldrb	r1, [r3, #0]
 8004284:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004288:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800428c:	4413      	add	r3, r2
 800428e:	781a      	ldrb	r2, [r3, #0]
 8004290:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8004294:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004298:	4403      	add	r3, r0
 800429a:	404a      	eors	r2, r1
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80042a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042a4:	3301      	adds	r3, #1
 80042a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80042aa:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80042ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d8e0      	bhi.n	8004278 <mbedtls_aes_crypt_xts+0x206>
}
 80042b6:	bf00      	nop
        }

        mbedtls_xor(tmp, input, tweak, 16);

        ret = mbedtls_aes_crypt_ecb(&ctx->crypt, mode, tmp, tmp);
 80042b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80042bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042c6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80042ca:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80042ce:	f5a1 71a0 	sub.w	r1, r1, #320	; 0x140
 80042d2:	6809      	ldr	r1, [r1, #0]
 80042d4:	f7ff fd0c 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 80042d8:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
        if (ret != 0) {
 80042dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <mbedtls_aes_crypt_xts+0x278>
            return ret;
 80042e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80042e8:	e281      	b.n	80047ee <mbedtls_aes_crypt_xts+0x77c>
 80042ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80042ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80042f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80042fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80042fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004302:	2310      	movs	r3, #16
 8004304:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    size_t i = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (; (i + 4) <= n; i += 4) {
 800430e:	e048      	b.n	80043a2 <mbedtls_aes_crypt_xts+0x330>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8004310:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004314:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004318:	4413      	add	r3, r2
 800431a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8004326:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800432a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800432e:	601a      	str	r2, [r3, #0]
    return r;
 8004330:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004334:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800433e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004342:	440b      	add	r3, r1
 8004344:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004348:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 8004350:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004358:	6019      	str	r1, [r3, #0]
    return r;
 800435a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800435e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4053      	eors	r3, r2
 8004366:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        mbedtls_put_unaligned_uint32(r + i, x);
 800436a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800436e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004372:	4413      	add	r3, r2
 8004374:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004378:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800437c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004380:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800438a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800438e:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8004390:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004394:	601a      	str	r2, [r3, #0]
}
 8004396:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8004398:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800439c:	3304      	adds	r3, #4
 800439e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80043a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043a6:	3304      	adds	r3, #4
 80043a8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d2af      	bcs.n	8004310 <mbedtls_aes_crypt_xts+0x29e>
    for (; i < n; i++) {
 80043b0:	e018      	b.n	80043e4 <mbedtls_aes_crypt_xts+0x372>
        r[i] = a[i] ^ b[i];
 80043b2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80043b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043ba:	4413      	add	r3, r2
 80043bc:	7819      	ldrb	r1, [r3, #0]
 80043be:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80043c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043c6:	4413      	add	r3, r2
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80043ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043d2:	4403      	add	r3, r0
 80043d4:	404a      	eors	r2, r1
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80043da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043de:	3301      	adds	r3, #1
 80043e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80043e4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80043e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d8e0      	bhi.n	80043b2 <mbedtls_aes_crypt_xts+0x340>
}
 80043f0:	bf00      	nop
        }

        mbedtls_xor(output, tmp, tweak, 16);

        /* Update the tweak for the next block. */
        mbedtls_gf128mul_x_ble(tweak, tweak);
 80043f2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80043f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fdbc 	bl	8003f7a <mbedtls_gf128mul_x_ble>

        output += 16;
 8004402:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004406:	3310      	adds	r3, #16
 8004408:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        input += 16;
 800440c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004410:	3310      	adds	r3, #16
 8004412:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    while (blocks--) {
 8004416:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800441a:	1e5a      	subs	r2, r3, #1
 800441c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8004420:	2b00      	cmp	r3, #0
 8004422:	f47f ae93 	bne.w	800414c <mbedtls_aes_crypt_xts+0xda>
    }

    if (leftover) {
 8004426:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 81de 	beq.w	80047ec <mbedtls_aes_crypt_xts+0x77a>
        /* If we are on the leftover bytes in a decrypt operation, we need to
         * use the previous tweak for these bytes (as saved in prev_tweak). */
        unsigned char *t = mode == MBEDTLS_AES_DECRYPT ? prev_tweak : tweak;
 8004430:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004434:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d102      	bne.n	8004444 <mbedtls_aes_crypt_xts+0x3d2>
 800443e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004442:	e001      	b.n	8004448 <mbedtls_aes_crypt_xts+0x3d6>
 8004444:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004448:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        /* We are now on the final part of the data unit, which doesn't divide
         * evenly by 16. It's time for ciphertext stealing. */
        size_t i;
        unsigned char *prev_output = output - 16;
 800444c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004450:	3b10      	subs	r3, #16
 8004452:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

        /* Copy ciphertext bytes from the previous block to our output for each
         * byte of ciphertext we won't steal. */
        for (i = 0; i < leftover; i++) {
 8004456:	2300      	movs	r3, #0
 8004458:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800445c:	e010      	b.n	8004480 <mbedtls_aes_crypt_xts+0x40e>
            output[i] = prev_output[i];
 800445e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004462:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004466:	441a      	add	r2, r3
 8004468:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800446c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004470:	440b      	add	r3, r1
 8004472:	7812      	ldrb	r2, [r2, #0]
 8004474:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < leftover; i++) {
 8004476:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800447a:	3301      	adds	r3, #1
 800447c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004480:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8004484:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004488:	429a      	cmp	r2, r3
 800448a:	d3e8      	bcc.n	800445e <mbedtls_aes_crypt_xts+0x3ec>
 800448c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004494:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004498:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800449c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80044a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    size_t i = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    for (; (i + 4) <= n; i += 4) {
 80044b2:	e048      	b.n	8004546 <mbedtls_aes_crypt_xts+0x4d4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80044b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044bc:	4413      	add	r3, r2
 80044be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 80044ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80044ce:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80044d2:	601a      	str	r2, [r3, #0]
    return r;
 80044d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80044d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80044e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044e6:	440b      	add	r3, r1
 80044e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 80044f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80044f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80044fc:	6019      	str	r1, [r3, #0]
    return r;
 80044fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004502:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4053      	eors	r3, r2
 800450a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        mbedtls_put_unaligned_uint32(r + i, x);
 800450e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004512:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004516:	4413      	add	r3, r2
 8004518:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800451c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004520:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004524:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800452e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004532:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8004534:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004538:	601a      	str	r2, [r3, #0]
}
 800453a:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800453c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004540:	3304      	adds	r3, #4
 8004542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800454a:	3304      	adds	r3, #4
 800454c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004550:	429a      	cmp	r2, r3
 8004552:	d2af      	bcs.n	80044b4 <mbedtls_aes_crypt_xts+0x442>
    for (; i < n; i++) {
 8004554:	e018      	b.n	8004588 <mbedtls_aes_crypt_xts+0x516>
        r[i] = a[i] ^ b[i];
 8004556:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800455a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800455e:	4413      	add	r3, r2
 8004560:	7819      	ldrb	r1, [r3, #0]
 8004562:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004566:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800456a:	4413      	add	r3, r2
 800456c:	781a      	ldrb	r2, [r3, #0]
 800456e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004572:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004576:	4403      	add	r3, r0
 8004578:	404a      	eors	r2, r1
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800457e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004582:	3301      	adds	r3, #1
 8004584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004588:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800458c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004590:	429a      	cmp	r2, r3
 8004592:	d8e0      	bhi.n	8004556 <mbedtls_aes_crypt_xts+0x4e4>
}
 8004594:	bf00      	nop
        /* Copy the remainder of the input for this final round. */
        mbedtls_xor(tmp, input, t, leftover);

        /* Copy ciphertext bytes from the previous block for input in this
         * round. */
        mbedtls_xor(tmp + i, prev_output + i, t + i, 16 - i);
 8004596:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800459a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800459e:	18d0      	adds	r0, r2, r3
 80045a0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80045a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80045a8:	18d1      	adds	r1, r2, r3
 80045aa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80045ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80045b2:	441a      	add	r2, r3
 80045b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80045b8:	f1c3 0310 	rsb	r3, r3, #16
 80045bc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 80045c0:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80045c4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    size_t i = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    for (; (i + 4) <= n; i += 4) {
 80045d2:	e048      	b.n	8004666 <mbedtls_aes_crypt_xts+0x5f4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80045d4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045dc:	4413      	add	r3, r2
 80045de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 80045ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80045ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045f2:	601a      	str	r2, [r3, #0]
    return r;
 80045f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80045f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004606:	440b      	add	r3, r1
 8004608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800460c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 8004614:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004618:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800461c:	6019      	str	r1, [r3, #0]
    return r;
 800461e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004622:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4053      	eors	r3, r2
 800462a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        mbedtls_put_unaligned_uint32(r + i, x);
 800462e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004636:	4413      	add	r3, r2
 8004638:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800463c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004640:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004644:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800464e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004652:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8004654:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004658:	601a      	str	r2, [r3, #0]
}
 800465a:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800465c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004660:	3304      	adds	r3, #4
 8004662:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800466a:	3304      	adds	r3, #4
 800466c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8004670:	429a      	cmp	r2, r3
 8004672:	d2af      	bcs.n	80045d4 <mbedtls_aes_crypt_xts+0x562>
    for (; i < n; i++) {
 8004674:	e018      	b.n	80046a8 <mbedtls_aes_crypt_xts+0x636>
        r[i] = a[i] ^ b[i];
 8004676:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800467a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800467e:	4413      	add	r3, r2
 8004680:	7819      	ldrb	r1, [r3, #0]
 8004682:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800468a:	4413      	add	r3, r2
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004696:	4403      	add	r3, r0
 8004698:	404a      	eors	r2, r1
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800469e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046a2:	3301      	adds	r3, #1
 80046a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80046a8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80046ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d8e0      	bhi.n	8004676 <mbedtls_aes_crypt_xts+0x604>
}
 80046b4:	bf00      	nop

        ret = mbedtls_aes_crypt_ecb(&ctx->crypt, mode, tmp, tmp);
 80046b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80046ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046c4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80046c8:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80046cc:	f5a1 71a0 	sub.w	r1, r1, #320	; 0x140
 80046d0:	6809      	ldr	r1, [r1, #0]
 80046d2:	f7ff fb0d 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 80046d6:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
        if (ret != 0) {
 80046da:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <mbedtls_aes_crypt_xts+0x676>
            return ret;
 80046e2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80046e6:	e082      	b.n	80047ee <mbedtls_aes_crypt_xts+0x77c>
 80046e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80046ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80046fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004700:	2310      	movs	r3, #16
 8004702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    size_t i = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    for (; (i + 4) <= n; i += 4) {
 800470c:	e046      	b.n	800479c <mbedtls_aes_crypt_xts+0x72a>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800470e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004716:	4413      	add	r3, r2
 8004718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800471c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8004724:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004728:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800472c:	601a      	str	r2, [r3, #0]
    return r;
 800472e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004732:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800473c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004740:	440b      	add	r3, r1
 8004742:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004746:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 800474e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004752:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004756:	6019      	str	r1, [r3, #0]
    return r;
 8004758:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800475c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4053      	eors	r3, r2
 8004764:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        mbedtls_put_unaligned_uint32(r + i, x);
 8004768:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800476c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004770:	4413      	add	r3, r2
 8004772:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004774:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004778:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800477c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004786:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800478a:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 800478c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800478e:	601a      	str	r2, [r3, #0]
}
 8004790:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8004792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004796:	3304      	adds	r3, #4
 8004798:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800479c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047a0:	3304      	adds	r3, #4
 80047a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d2b1      	bcs.n	800470e <mbedtls_aes_crypt_xts+0x69c>
    for (; i < n; i++) {
 80047aa:	e018      	b.n	80047de <mbedtls_aes_crypt_xts+0x76c>
        r[i] = a[i] ^ b[i];
 80047ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80047b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047b4:	4413      	add	r3, r2
 80047b6:	7819      	ldrb	r1, [r3, #0]
 80047b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047c0:	4413      	add	r3, r2
 80047c2:	781a      	ldrb	r2, [r3, #0]
 80047c4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80047c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047cc:	4403      	add	r3, r0
 80047ce:	404a      	eors	r2, r1
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80047d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047d8:	3301      	adds	r3, #1
 80047da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047de:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80047e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d8e0      	bhi.n	80047ac <mbedtls_aes_crypt_xts+0x73a>
}
 80047ea:	bf00      	nop
        /* Write the result back to the previous block, overriding the previous
         * output we copied. */
        mbedtls_xor(prev_output, tmp, t, 16);
    }

    return 0;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd90      	pop	{r4, r7, pc}

080047f8 <mbedtls_aes_crypt_cfb128>:
                             size_t length,
                             size_t *iv_off,
                             unsigned char iv[16],
                             const unsigned char *input,
                             unsigned char *output)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
    int c;
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8004806:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800480a:	61fb      	str	r3, [r7, #28]
    size_t n;

    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d005      	beq.n	800481e <mbedtls_aes_crypt_cfb128+0x26>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <mbedtls_aes_crypt_cfb128+0x26>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8004818:	f06f 0320 	mvn.w	r3, #32
 800481c:	e071      	b.n	8004902 <mbedtls_aes_crypt_cfb128+0x10a>
    }

    n = *iv_off;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	61bb      	str	r3, [r7, #24]

    if (n > 15) {
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b0f      	cmp	r3, #15
 8004828:	d902      	bls.n	8004830 <mbedtls_aes_crypt_cfb128+0x38>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 800482a:	f06f 0320 	mvn.w	r3, #32
 800482e:	e068      	b.n	8004902 <mbedtls_aes_crypt_cfb128+0x10a>
    }

    if (mode == MBEDTLS_AES_DECRYPT) {
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d156      	bne.n	80048e4 <mbedtls_aes_crypt_cfb128+0xec>
        while (length--) {
 8004836:	e02a      	b.n	800488e <mbedtls_aes_crypt_cfb128+0x96>
            if (n == 0) {
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <mbedtls_aes_crypt_cfb128+0x5a>
                ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004842:	2101      	movs	r1, #1
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f7ff fa53 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 800484a:	61f8      	str	r0, [r7, #28]
                if (ret != 0) {
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d153      	bne.n	80048fa <mbedtls_aes_crypt_cfb128+0x102>
                    goto exit;
                }
            }

            c = *input++;
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	617b      	str	r3, [r7, #20]
            *output++ = (unsigned char) (c ^ iv[n]);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	b25a      	sxtb	r2, r3
 8004860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	440b      	add	r3, r1
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	b25b      	sxtb	r3, r3
 800486a:	4053      	eors	r3, r2
 800486c:	b259      	sxtb	r1, r3
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	633a      	str	r2, [r7, #48]	; 0x30
 8004874:	b2ca      	uxtb	r2, r1
 8004876:	701a      	strb	r2, [r3, #0]
            iv[n] = (unsigned char) c;
 8004878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	4413      	add	r3, r2
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	701a      	strb	r2, [r3, #0]

            n = (n + 1) & 0x0F;
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	3301      	adds	r3, #1
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	61bb      	str	r3, [r7, #24]
        while (length--) {
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	1e5a      	subs	r2, r3, #1
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1cf      	bne.n	8004838 <mbedtls_aes_crypt_cfb128+0x40>
 8004898:	e029      	b.n	80048ee <mbedtls_aes_crypt_cfb128+0xf6>
        }
    } else {
        while (length--) {
            if (n == 0) {
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d109      	bne.n	80048b4 <mbedtls_aes_crypt_cfb128+0xbc>
                ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a4:	2101      	movs	r1, #1
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff fa22 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 80048ac:	61f8      	str	r0, [r7, #28]
                if (ret != 0) {
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d124      	bne.n	80048fe <mbedtls_aes_crypt_cfb128+0x106>
                    goto exit;
                }
            }

            iv[n] = *output++ = (unsigned char) (iv[n] ^ *input++);
 80048b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	4413      	add	r3, r2
 80048ba:	7819      	ldrb	r1, [r3, #0]
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048c2:	781a      	ldrb	r2, [r3, #0]
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	1c58      	adds	r0, r3, #1
 80048c8:	6338      	str	r0, [r7, #48]	; 0x30
 80048ca:	404a      	eors	r2, r1
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	440a      	add	r2, r1
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	7013      	strb	r3, [r2, #0]

            n = (n + 1) & 0x0F;
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	3301      	adds	r3, #1
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	61bb      	str	r3, [r7, #24]
        while (length--) {
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	1e5a      	subs	r2, r3, #1
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1d5      	bne.n	800489a <mbedtls_aes_crypt_cfb128+0xa2>
        }
    }

    *iv_off = n;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	601a      	str	r2, [r3, #0]
    ret = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	e002      	b.n	8004900 <mbedtls_aes_crypt_cfb128+0x108>
                    goto exit;
 80048fa:	bf00      	nop
 80048fc:	e000      	b.n	8004900 <mbedtls_aes_crypt_cfb128+0x108>
                    goto exit;
 80048fe:	bf00      	nop

exit:
    return ret;
 8004900:	69fb      	ldr	r3, [r7, #28]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <mbedtls_aes_crypt_ofb>:
                          size_t length,
                          size_t *iv_off,
                          unsigned char iv[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b086      	sub	sp, #24
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
    size_t n;

    n = *iv_off;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	613b      	str	r3, [r7, #16]

    if (n > 15) {
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b0f      	cmp	r3, #15
 8004926:	d922      	bls.n	800496e <mbedtls_aes_crypt_ofb+0x64>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8004928:	f06f 0320 	mvn.w	r3, #32
 800492c:	e02a      	b.n	8004984 <mbedtls_aes_crypt_ofb+0x7a>
    }

    while (length--) {
        if (n == 0) {
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d109      	bne.n	8004948 <mbedtls_aes_crypt_ofb+0x3e>
            ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	2101      	movs	r1, #1
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff f9d8 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 8004940:	6178      	str	r0, [r7, #20]
            if (ret != 0) {
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11b      	bne.n	8004980 <mbedtls_aes_crypt_ofb+0x76>
                goto exit;
            }
        }
        *output++ =  *input++ ^ iv[n];
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	623a      	str	r2, [r7, #32]
 800494e:	7819      	ldrb	r1, [r3, #0]
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4413      	add	r3, r2
 8004956:	781a      	ldrb	r2, [r3, #0]
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	1c58      	adds	r0, r3, #1
 800495c:	6278      	str	r0, [r7, #36]	; 0x24
 800495e:	404a      	eors	r2, r1
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]

        n = (n + 1) & 0x0F;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	3301      	adds	r3, #1
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	613b      	str	r3, [r7, #16]
    while (length--) {
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	1e5a      	subs	r2, r3, #1
 8004972:	60ba      	str	r2, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1da      	bne.n	800492e <mbedtls_aes_crypt_ofb+0x24>
    }

    *iv_off = n;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e000      	b.n	8004982 <mbedtls_aes_crypt_ofb+0x78>
                goto exit;
 8004980:	bf00      	nop

exit:
    return ret;
 8004982:	697b      	ldr	r3, [r7, #20]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <mbedtls_aes_crypt_ctr>:
                          size_t *nc_off,
                          unsigned char nonce_counter[16],
                          unsigned char stream_block[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b094      	sub	sp, #80	; 0x50
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800499a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800499e:	64fb      	str	r3, [r7, #76]	; 0x4c

    size_t offset = *nc_off;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	64bb      	str	r3, [r7, #72]	; 0x48

    if (offset > 0x0F) {
 80049a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a8:	2b0f      	cmp	r3, #15
 80049aa:	d902      	bls.n	80049b2 <mbedtls_aes_crypt_ctr+0x26>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 80049ac:	f06f 0320 	mvn.w	r3, #32
 80049b0:	e086      	b.n	8004ac0 <mbedtls_aes_crypt_ctr+0x134>
    }

    for (size_t i = 0; i < length;) {
 80049b2:	2300      	movs	r3, #0
 80049b4:	647b      	str	r3, [r7, #68]	; 0x44
 80049b6:	e072      	b.n	8004a9e <mbedtls_aes_crypt_ctr+0x112>
        size_t n = 16;
 80049b8:	2310      	movs	r3, #16
 80049ba:	643b      	str	r3, [r7, #64]	; 0x40
        if (offset == 0) {
 80049bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10d      	bne.n	80049de <mbedtls_aes_crypt_ctr+0x52>
            ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block);
 80049c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	2101      	movs	r1, #1
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f7ff f991 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 80049ce:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != 0) {
 80049d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d172      	bne.n	8004abc <mbedtls_aes_crypt_ctr+0x130>
                goto exit;
            }
            mbedtls_ctr_increment_counter(nonce_counter);
 80049d6:	6838      	ldr	r0, [r7, #0]
 80049d8:	f7fd fd54 	bl	8002484 <mbedtls_ctr_increment_counter>
 80049dc:	e003      	b.n	80049e6 <mbedtls_aes_crypt_ctr+0x5a>
        } else {
            n -= offset;
 80049de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	643b      	str	r3, [r7, #64]	; 0x40
        }

        if (n > (length - i)) {
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d903      	bls.n	80049fa <mbedtls_aes_crypt_ctr+0x6e>
            n = (length - i);
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	643b      	str	r3, [r7, #64]	; 0x40
        }
        mbedtls_xor(&output[i], &input[i], &stream_block[offset], n);
 80049fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fe:	18d1      	adds	r1, r2, r3
 8004a00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a04:	441a      	add	r2, r3
 8004a06:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0a:	4403      	add	r3, r0
 8004a0c:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004a0e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a10:	637b      	str	r3, [r7, #52]	; 0x34
 8004a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a14:	633b      	str	r3, [r7, #48]	; 0x30
    size_t i = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (; (i + 4) <= n; i += 4) {
 8004a1a:	e01e      	b.n	8004a5a <mbedtls_aes_crypt_ctr+0xce>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8004a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a20:	4413      	add	r3, r2
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004a28:	61bb      	str	r3, [r7, #24]
    return r;
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a30:	440b      	add	r3, r1
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004a38:	617b      	str	r3, [r7, #20]
    return r;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	4053      	eors	r3, r2
 8004a3e:	623b      	str	r3, [r7, #32]
        mbedtls_put_unaligned_uint32(r + i, x);
 8004a40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	4413      	add	r3, r2
 8004a46:	61fb      	str	r3, [r7, #28]
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	601a      	str	r2, [r3, #0]
}
 8004a52:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	3304      	adds	r3, #4
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d2db      	bcs.n	8004a1c <mbedtls_aes_crypt_ctr+0x90>
    for (; i < n; i++) {
 8004a64:	e010      	b.n	8004a88 <mbedtls_aes_crypt_ctr+0xfc>
        r[i] = a[i] ^ b[i];
 8004a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6a:	4413      	add	r3, r2
 8004a6c:	7819      	ldrb	r1, [r3, #0]
 8004a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	4413      	add	r3, r2
 8004a74:	781a      	ldrb	r2, [r3, #0]
 8004a76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	4403      	add	r3, r0
 8004a7c:	404a      	eors	r2, r1
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	3301      	adds	r3, #1
 8004a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d8ea      	bhi.n	8004a66 <mbedtls_aes_crypt_ctr+0xda>
}
 8004a90:	bf00      	nop
        // offset might be non-zero for the last block, but in that case, we don't use it again
        offset = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	64bb      	str	r3, [r7, #72]	; 0x48
        i += n;
 8004a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9a:	4413      	add	r3, r2
 8004a9c:	647b      	str	r3, [r7, #68]	; 0x44
    for (size_t i = 0; i < length;) {
 8004a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d388      	bcc.n	80049b8 <mbedtls_aes_crypt_ctr+0x2c>
    }

    // capture offset for future resumption
    *nc_off = (*nc_off + length) % 16;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4413      	add	r3, r2
 8004aae:	f003 020f 	and.w	r2, r3, #15
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	601a      	str	r2, [r3, #0]

    ret = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aba:	e000      	b.n	8004abe <mbedtls_aes_crypt_ctr+0x132>
                goto exit;
 8004abc:	bf00      	nop

exit:
    return ret;
 8004abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3750      	adds	r7, #80	; 0x50
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <aria_p1>:
/* armcc5 --gnu defines __GNUC__ but doesn't support GNU's extended asm */
#if defined(__GNUC__) && \
    (!defined(__ARMCC_VERSION) || __ARMCC_VERSION >= 6000000) && \
    __ARM_ARCH >= 6
static inline uint32_t aria_p1(uint32_t x)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
    uint32_t r;
    __asm("rev16 %0, %1" : "=l" (r) : "l" (x));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	ba5b      	rev16	r3, r3
 8004ad4:	60fb      	str	r3, [r7, #12]
    return r;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <aria_a>:
 * half of App. B.1 in [1] in terms of 4-byte operators P1, P2, P3 and P4.
 * The implementation below uses only P1 and P2 as they are sufficient.
 */
static inline void aria_a(uint32_t *a, uint32_t *b,
                          uint32_t *c, uint32_t *d)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
    uint32_t ta, tb, tc;
    ta  =  *b;                      // 4567
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	61fb      	str	r3, [r7, #28]
    *b  =  *a;                      // 0123
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	601a      	str	r2, [r3, #0]
    *a  =  ARIA_P2(ta);             // 6745
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	ea4f 4233 	mov.w	r2, r3, ror #16
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	601a      	str	r2, [r3, #0]
    tb  =  ARIA_P2(*d);             // efcd
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004b12:	61bb      	str	r3, [r7, #24]
    *d  =  ARIA_P1(*c);             // 98ba
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff ffd5 	bl	8004ac8 <aria_p1>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	601a      	str	r2, [r3, #0]
    *c  =  ARIA_P1(tb);             // fedc
 8004b24:	69b8      	ldr	r0, [r7, #24]
 8004b26:	f7ff ffcf 	bl	8004ac8 <aria_p1>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	601a      	str	r2, [r3, #0]
    ta  ^= *d;                      // 4567+98ba
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	4053      	eors	r3, r2
 8004b38:	61fb      	str	r3, [r7, #28]
    tc  =  ARIA_P2(*b);             // 2301
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004b42:	617b      	str	r3, [r7, #20]
    ta  =  ARIA_P1(ta) ^ tc ^ *c;   // 2301+5476+89ab+fedc
 8004b44:	69f8      	ldr	r0, [r7, #28]
 8004b46:	f7ff ffbf 	bl	8004ac8 <aria_p1>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	405a      	eors	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4053      	eors	r3, r2
 8004b56:	61fb      	str	r3, [r7, #28]
    tb  ^= ARIA_P2(*d);             // ba98+efcd
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4053      	eors	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
    tc  ^= ARIA_P1(*a);             // 2301+7654
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ffac 	bl	8004ac8 <aria_p1>
 8004b70:	4602      	mov	r2, r0
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	4053      	eors	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
    *b  ^= ta ^ tb;                 // 0123+2301+5476+89ab+ba98+efcd+fedc OUT
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	69f9      	ldr	r1, [r7, #28]
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	404b      	eors	r3, r1
 8004b82:	405a      	eors	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	601a      	str	r2, [r3, #0]
    tb  =  ARIA_P2(tb) ^ ta;        // 2301+5476+89ab+98ba+cdef+fedc
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	4053      	eors	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
    *a  ^= ARIA_P1(tb);             // 3210+4567+6745+89ab+98ba+dcfe+efcd OUT
 8004b94:	69b8      	ldr	r0, [r7, #24]
 8004b96:	f7ff ff97 	bl	8004ac8 <aria_p1>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	405a      	eors	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	601a      	str	r2, [r3, #0]
    ta  =  ARIA_P2(ta);             // 0123+7654+ab89+dcfe
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004bac:	61fb      	str	r3, [r7, #28]
    *d  ^= ARIA_P1(ta) ^ tc;        // 1032+2301+6745+7654+98ba+ba98+cdef OUT
 8004bae:	69f8      	ldr	r0, [r7, #28]
 8004bb0:	f7ff ff8a 	bl	8004ac8 <aria_p1>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	405a      	eors	r2, r3
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	405a      	eors	r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	601a      	str	r2, [r3, #0]
    tc  =  ARIA_P2(tc);             // 0123+5476
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004bca:	617b      	str	r3, [r7, #20]
    *c  ^= ARIA_P1(tc) ^ ta;        // 0123+1032+4567+7654+ab89+dcfe+fedc OUT
 8004bcc:	6978      	ldr	r0, [r7, #20]
 8004bce:	f7ff ff7b 	bl	8004ac8 <aria_p1>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	405a      	eors	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	405a      	eors	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	601a      	str	r2, [r3, #0]
}
 8004be2:	bf00      	nop
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <aria_sl>:
 */
static inline void aria_sl(uint32_t *a, uint32_t *b,
                           uint32_t *c, uint32_t *d,
                           const uint8_t sa[256], const uint8_t sb[256],
                           const uint8_t sc[256], const uint8_t sd[256])
{
 8004bea:	b480      	push	{r7}
 8004bec:	b085      	sub	sp, #20
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	603b      	str	r3, [r7, #0]
    *a = ((uint32_t) sa[MBEDTLS_BYTE_0(*a)]) ^
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	4413      	add	r3, r2
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*a)]) <<  8) ^
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	0a1b      	lsrs	r3, r3, #8
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	4619      	mov	r1, r3
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	440b      	add	r3, r1
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	021b      	lsls	r3, r3, #8
    *a = ((uint32_t) sa[MBEDTLS_BYTE_0(*a)]) ^
 8004c1a:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*a)]) << 16) ^
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	4619      	mov	r1, r3
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	440b      	add	r3, r1
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*a)]) <<  8) ^
 8004c2e:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*a)]) << 24);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	0e1b      	lsrs	r3, r3, #24
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	440b      	add	r3, r1
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*a)]) << 16) ^
 8004c42:	405a      	eors	r2, r3
    *a = ((uint32_t) sa[MBEDTLS_BYTE_0(*a)]) ^
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	601a      	str	r2, [r3, #0]
    *b = ((uint32_t) sa[MBEDTLS_BYTE_0(*b)]) ^
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	4413      	add	r3, r2
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*b)]) <<  8) ^
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	0a1b      	lsrs	r3, r3, #8
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	4619      	mov	r1, r3
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	440b      	add	r3, r1
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	021b      	lsls	r3, r3, #8
    *b = ((uint32_t) sa[MBEDTLS_BYTE_0(*b)]) ^
 8004c6a:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*b)]) << 16) ^
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	0c1b      	lsrs	r3, r3, #16
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	4619      	mov	r1, r3
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	440b      	add	r3, r1
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*b)]) <<  8) ^
 8004c7e:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*b)]) << 24);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	0e1b      	lsrs	r3, r3, #24
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	440b      	add	r3, r1
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*b)]) << 16) ^
 8004c92:	405a      	eors	r2, r3
    *b = ((uint32_t) sa[MBEDTLS_BYTE_0(*b)]) ^
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	601a      	str	r2, [r3, #0]
    *c = ((uint32_t) sa[MBEDTLS_BYTE_0(*c)]) ^
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*c)]) <<  8) ^
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	0a1b      	lsrs	r3, r3, #8
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	440b      	add	r3, r1
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	021b      	lsls	r3, r3, #8
    *c = ((uint32_t) sa[MBEDTLS_BYTE_0(*c)]) ^
 8004cba:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*c)]) << 16) ^
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	0c1b      	lsrs	r3, r3, #16
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	440b      	add	r3, r1
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*c)]) <<  8) ^
 8004cce:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*c)]) << 24);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	0e1b      	lsrs	r3, r3, #24
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	440b      	add	r3, r1
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*c)]) << 16) ^
 8004ce2:	405a      	eors	r2, r3
    *c = ((uint32_t) sa[MBEDTLS_BYTE_0(*c)]) ^
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	601a      	str	r2, [r3, #0]
    *d = ((uint32_t) sa[MBEDTLS_BYTE_0(*d)]) ^
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*d)]) <<  8) ^
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	0a1b      	lsrs	r3, r3, #8
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	4619      	mov	r1, r3
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	440b      	add	r3, r1
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	021b      	lsls	r3, r3, #8
    *d = ((uint32_t) sa[MBEDTLS_BYTE_0(*d)]) ^
 8004d0a:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*d)]) << 16) ^
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	0c1b      	lsrs	r3, r3, #16
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	4619      	mov	r1, r3
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	440b      	add	r3, r1
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*d)]) <<  8) ^
 8004d1e:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*d)]) << 24);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	0e1b      	lsrs	r3, r3, #24
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	440b      	add	r3, r1
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*d)]) << 16) ^
 8004d32:	405a      	eors	r2, r3
    *d = ((uint32_t) sa[MBEDTLS_BYTE_0(*d)]) ^
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	601a      	str	r2, [r3, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <aria_fo_xor>:
/*
 * Helper for key schedule: r = FO( p, k ) ^ x
 */
static void aria_fo_xor(uint32_t r[4], const uint32_t p[4],
                        const uint32_t k[4], const uint32_t x[4])
{
 8004d44:	b590      	push	{r4, r7, lr}
 8004d46:	b08d      	sub	sp, #52	; 0x34
 8004d48:	af04      	add	r7, sp, #16
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
    uint32_t a, b, c, d;

    a = p[0] ^ k[0];
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4053      	eors	r3, r2
 8004d5c:	61fb      	str	r3, [r7, #28]
    b = p[1] ^ k[1];
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	3304      	adds	r3, #4
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4053      	eors	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
    c = p[2] ^ k[2];
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	3308      	adds	r3, #8
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3308      	adds	r3, #8
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4053      	eors	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]
    d = p[3] ^ k[3];
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	330c      	adds	r3, #12
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	330c      	adds	r3, #12
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4053      	eors	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]

    aria_sl(&a, &b, &c, &d, aria_sb1, aria_sb2, aria_is1, aria_is2);
 8004d8e:	f107 0310 	add.w	r3, r7, #16
 8004d92:	f107 0214 	add.w	r2, r7, #20
 8004d96:	f107 0118 	add.w	r1, r7, #24
 8004d9a:	f107 001c 	add.w	r0, r7, #28
 8004d9e:	4c1b      	ldr	r4, [pc, #108]	; (8004e0c <aria_fo_xor+0xc8>)
 8004da0:	9403      	str	r4, [sp, #12]
 8004da2:	4c1b      	ldr	r4, [pc, #108]	; (8004e10 <aria_fo_xor+0xcc>)
 8004da4:	9402      	str	r4, [sp, #8]
 8004da6:	4c1b      	ldr	r4, [pc, #108]	; (8004e14 <aria_fo_xor+0xd0>)
 8004da8:	9401      	str	r4, [sp, #4]
 8004daa:	4c1b      	ldr	r4, [pc, #108]	; (8004e18 <aria_fo_xor+0xd4>)
 8004dac:	9400      	str	r4, [sp, #0]
 8004dae:	f7ff ff1c 	bl	8004bea <aria_sl>
    aria_a(&a, &b, &c, &d);
 8004db2:	f107 0310 	add.w	r3, r7, #16
 8004db6:	f107 0214 	add.w	r2, r7, #20
 8004dba:	f107 0118 	add.w	r1, r7, #24
 8004dbe:	f107 001c 	add.w	r0, r7, #28
 8004dc2:	f7ff fe8f 	bl	8004ae4 <aria_a>

    r[0] = a ^ x[0];
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	405a      	eors	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	601a      	str	r2, [r3, #0]
    r[1] = b ^ x[1];
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	6819      	ldr	r1, [r3, #0]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	404a      	eors	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
    r[2] = c ^ x[2];
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	3308      	adds	r3, #8
 8004de6:	6819      	ldr	r1, [r3, #0]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3308      	adds	r3, #8
 8004dee:	404a      	eors	r2, r1
 8004df0:	601a      	str	r2, [r3, #0]
    r[3] = d ^ x[3];
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	330c      	adds	r3, #12
 8004df6:	6819      	ldr	r1, [r3, #0]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	404a      	eors	r2, r1
 8004e00:	601a      	str	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	3724      	adds	r7, #36	; 0x24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd90      	pop	{r4, r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	0801e854 	.word	0x0801e854
 8004e10:	0801e754 	.word	0x0801e754
 8004e14:	0801e654 	.word	0x0801e654
 8004e18:	0801e554 	.word	0x0801e554

08004e1c <aria_fe_xor>:
/*
 * Helper for key schedule: r = FE( p, k ) ^ x
 */
static void aria_fe_xor(uint32_t r[4], const uint32_t p[4],
                        const uint32_t k[4], const uint32_t x[4])
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b08d      	sub	sp, #52	; 0x34
 8004e20:	af04      	add	r7, sp, #16
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
    uint32_t a, b, c, d;

    a = p[0] ^ k[0];
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4053      	eors	r3, r2
 8004e34:	61fb      	str	r3, [r7, #28]
    b = p[1] ^ k[1];
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4053      	eors	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
    c = p[2] ^ k[2];
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	3308      	adds	r3, #8
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4053      	eors	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]
    d = p[3] ^ k[3];
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	330c      	adds	r3, #12
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4053      	eors	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]

    aria_sl(&a, &b, &c, &d, aria_is1, aria_is2, aria_sb1, aria_sb2);
 8004e66:	f107 0310 	add.w	r3, r7, #16
 8004e6a:	f107 0214 	add.w	r2, r7, #20
 8004e6e:	f107 0118 	add.w	r1, r7, #24
 8004e72:	f107 001c 	add.w	r0, r7, #28
 8004e76:	4c1b      	ldr	r4, [pc, #108]	; (8004ee4 <aria_fe_xor+0xc8>)
 8004e78:	9403      	str	r4, [sp, #12]
 8004e7a:	4c1b      	ldr	r4, [pc, #108]	; (8004ee8 <aria_fe_xor+0xcc>)
 8004e7c:	9402      	str	r4, [sp, #8]
 8004e7e:	4c1b      	ldr	r4, [pc, #108]	; (8004eec <aria_fe_xor+0xd0>)
 8004e80:	9401      	str	r4, [sp, #4]
 8004e82:	4c1b      	ldr	r4, [pc, #108]	; (8004ef0 <aria_fe_xor+0xd4>)
 8004e84:	9400      	str	r4, [sp, #0]
 8004e86:	f7ff feb0 	bl	8004bea <aria_sl>
    aria_a(&a, &b, &c, &d);
 8004e8a:	f107 0310 	add.w	r3, r7, #16
 8004e8e:	f107 0214 	add.w	r2, r7, #20
 8004e92:	f107 0118 	add.w	r1, r7, #24
 8004e96:	f107 001c 	add.w	r0, r7, #28
 8004e9a:	f7ff fe23 	bl	8004ae4 <aria_a>

    r[0] = a ^ x[0];
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	405a      	eors	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	601a      	str	r2, [r3, #0]
    r[1] = b ^ x[1];
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	3304      	adds	r3, #4
 8004eae:	6819      	ldr	r1, [r3, #0]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	404a      	eors	r2, r1
 8004eb8:	601a      	str	r2, [r3, #0]
    r[2] = c ^ x[2];
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	404a      	eors	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]
    r[3] = d ^ x[3];
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	6819      	ldr	r1, [r3, #0]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	404a      	eors	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]
}
 8004eda:	bf00      	nop
 8004edc:	3724      	adds	r7, #36	; 0x24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd90      	pop	{r4, r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	0801e654 	.word	0x0801e654
 8004ee8:	0801e554 	.word	0x0801e554
 8004eec:	0801e854 	.word	0x0801e854
 8004ef0:	0801e754 	.word	0x0801e754

08004ef4 <aria_rot128>:
 * MBEDTLS_GET_UINT32_LE / MBEDTLS_PUT_UINT32_LE ) so we need to reverse
 * bytes here.
 */
static void aria_rot128(uint32_t r[4], const uint32_t a[4],
                        const uint32_t b[4], uint8_t n)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b089      	sub	sp, #36	; 0x24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	70fb      	strb	r3, [r7, #3]
    uint8_t i, j;
    uint32_t t, u;

    const uint8_t n1 = n % 32;              // bit offset
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	75fb      	strb	r3, [r7, #23]
    const uint8_t n2 = n1 ? 32 - n1 : 0;    // reverse bit offset
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <aria_rot128+0x26>
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	f1c3 0320 	rsb	r3, r3, #32
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	e000      	b.n	8004f1c <aria_rot128+0x28>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	75bb      	strb	r3, [r7, #22]

    j = (n / 32) % 4;                       // initial word offset
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	095b      	lsrs	r3, r3, #5
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	77bb      	strb	r3, [r7, #30]
    t = ARIA_P3(b[j]);                      // big endian
 8004f2a:	7fbb      	ldrb	r3, [r7, #30]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	ba1b      	rev	r3, r3
 8004f36:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < 4; i++) {
 8004f38:	2300      	movs	r3, #0
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e030      	b.n	8004fa0 <aria_rot128+0xac>
        j = (j + 1) % 4;                    // get next word, big endian
 8004f3e:	7fbb      	ldrb	r3, [r7, #30]
 8004f40:	3301      	adds	r3, #1
 8004f42:	425a      	negs	r2, r3
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	f002 0203 	and.w	r2, r2, #3
 8004f4c:	bf58      	it	pl
 8004f4e:	4253      	negpl	r3, r2
 8004f50:	77bb      	strb	r3, [r7, #30]
        u = ARIA_P3(b[j]);
 8004f52:	7fbb      	ldrb	r3, [r7, #30]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	4413      	add	r3, r2
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	ba1b      	rev	r3, r3
 8004f5e:	613b      	str	r3, [r7, #16]
        t <<= n1;                           // rotate
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	61bb      	str	r3, [r7, #24]
        t |= u >> n2;
 8004f6a:	7dbb      	ldrb	r3, [r7, #22]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        t = ARIA_P3(t);                     // back to little endian
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	ba1b      	rev	r3, r3
 8004f7c:	61bb      	str	r3, [r7, #24]
        r[i] = a[i] ^ t;                    // store
 8004f7e:	7ffb      	ldrb	r3, [r7, #31]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	4413      	add	r3, r2
 8004f86:	6819      	ldr	r1, [r3, #0]
 8004f88:	7ffb      	ldrb	r3, [r7, #31]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	404a      	eors	r2, r1
 8004f94:	601a      	str	r2, [r3, #0]
        t = u;                              // move to next word
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < 4; i++) {
 8004f9a:	7ffb      	ldrb	r3, [r7, #31]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	7ffb      	ldrb	r3, [r7, #31]
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d9cb      	bls.n	8004f3e <aria_rot128+0x4a>
    }
}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	3724      	adds	r7, #36	; 0x24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <mbedtls_aria_setkey_enc>:
/*
 * Set encryption key
 */
int mbedtls_aria_setkey_enc(mbedtls_aria_context *ctx,
                            const unsigned char *key, unsigned int keybits)
{
 8004fb4:	b5b0      	push	{r4, r5, r7, lr}
 8004fb6:	b0b2      	sub	sp, #200	; 0xc8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
    /* round constant masks */
    const uint32_t rc[3][4] =
 8004fc0:	4ba5      	ldr	r3, [pc, #660]	; (8005258 <mbedtls_aria_setkey_enc+0x2a4>)
 8004fc2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8004fc6:	461d      	mov	r5, r3
 8004fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004fd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };

    int i;
    uint32_t w[4][4], *w2;

    if (keybits != 128 && keybits != 192 && keybits != 256) {
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b80      	cmp	r3, #128	; 0x80
 8004fdc:	d009      	beq.n	8004ff2 <mbedtls_aria_setkey_enc+0x3e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2bc0      	cmp	r3, #192	; 0xc0
 8004fe2:	d006      	beq.n	8004ff2 <mbedtls_aria_setkey_enc+0x3e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fea:	d002      	beq.n	8004ff2 <mbedtls_aria_setkey_enc+0x3e>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 8004fec:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 8004ff0:	e12d      	b.n	800524e <mbedtls_aria_setkey_enc+0x29a>
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ff8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ffc:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004ffe:	61fb      	str	r3, [r7, #28]
    return r;
 8005000:	69fb      	ldr	r3, [r7, #28]
    }

    /* Copy key to W0 (and potential remainder to W1) */
    w[0][0] = MBEDTLS_GET_UINT32_LE(key,  0);
 8005002:	633b      	str	r3, [r7, #48]	; 0x30
    w[0][1] = MBEDTLS_GET_UINT32_LE(key,  4);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	3304      	adds	r3, #4
 8005008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800500c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005010:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005012:	61bb      	str	r3, [r7, #24]
    return r;
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	637b      	str	r3, [r7, #52]	; 0x34
    w[0][2] = MBEDTLS_GET_UINT32_LE(key,  8);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	3308      	adds	r3, #8
 800501c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005020:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005024:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005026:	617b      	str	r3, [r7, #20]
    return r;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	63bb      	str	r3, [r7, #56]	; 0x38
    w[0][3] = MBEDTLS_GET_UINT32_LE(key, 12);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	330c      	adds	r3, #12
 8005030:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005034:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005038:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800503a:	613b      	str	r3, [r7, #16]
    return r;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c

    memset(w[1], 0, 16);
 8005040:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005044:	3310      	adds	r3, #16
 8005046:	2210      	movs	r2, #16
 8005048:	2100      	movs	r1, #0
 800504a:	4618      	mov	r0, r3
 800504c:	f018 f8b6 	bl	801d1bc <memset>
    if (keybits >= 192) {
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2bbf      	cmp	r3, #191	; 0xbf
 8005054:	d913      	bls.n	800507e <mbedtls_aria_setkey_enc+0xca>
        w[1][0] = MBEDTLS_GET_UINT32_LE(key, 16);    // 192 bit key
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	3310      	adds	r3, #16
 800505a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800505e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005062:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	643b      	str	r3, [r7, #64]	; 0x40
        w[1][1] = MBEDTLS_GET_UINT32_LE(key, 20);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	3314      	adds	r3, #20
 800506e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005076:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005078:	623b      	str	r3, [r7, #32]
    return r;
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if (keybits == 256) {
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005084:	d113      	bne.n	80050ae <mbedtls_aria_setkey_enc+0xfa>
        w[1][2] = MBEDTLS_GET_UINT32_LE(key, 24);    // 256 bit key
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	3318      	adds	r3, #24
 800508a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800508e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005092:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005098:	64bb      	str	r3, [r7, #72]	; 0x48
        w[1][3] = MBEDTLS_GET_UINT32_LE(key, 28);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	331c      	adds	r3, #28
 800509e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050a6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    i = (keybits - 128) >> 6;               // index: 0, 1, 2
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3b80      	subs	r3, #128	; 0x80
 80050b2:	099b      	lsrs	r3, r3, #6
 80050b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    ctx->nr = 12 + 2 * i;                   // no. rounds: 12, 14, 16
 80050b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050bc:	3306      	adds	r3, #6
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	701a      	strb	r2, [r3, #0]

    aria_fo_xor(w[1], w[0], rc[i], w[1]);   // W1 = FO(W0, CK1) ^ KR
 80050c8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80050cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	441a      	add	r2, r3
 80050d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050d8:	f103 0410 	add.w	r4, r3, #16
 80050dc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80050e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050e4:	f103 0010 	add.w	r0, r3, #16
 80050e8:	4623      	mov	r3, r4
 80050ea:	f7ff fe2b 	bl	8004d44 <aria_fo_xor>
    i = i < 2 ? i + 1 : 0;
 80050ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	dc03      	bgt.n	80050fe <mbedtls_aria_setkey_enc+0x14a>
 80050f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050fa:	3301      	adds	r3, #1
 80050fc:	e000      	b.n	8005100 <mbedtls_aria_setkey_enc+0x14c>
 80050fe:	2300      	movs	r3, #0
 8005100:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    aria_fe_xor(w[2], w[1], rc[i], w[0]);   // W2 = FE(W1, CK2) ^ W0
 8005104:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005108:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	441a      	add	r2, r3
 8005110:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8005114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005118:	f103 0110 	add.w	r1, r3, #16
 800511c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005120:	f103 0020 	add.w	r0, r3, #32
 8005124:	4623      	mov	r3, r4
 8005126:	f7ff fe79 	bl	8004e1c <aria_fe_xor>
    i = i < 2 ? i + 1 : 0;
 800512a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800512e:	2b01      	cmp	r3, #1
 8005130:	dc03      	bgt.n	800513a <mbedtls_aria_setkey_enc+0x186>
 8005132:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005136:	3301      	adds	r3, #1
 8005138:	e000      	b.n	800513c <mbedtls_aria_setkey_enc+0x188>
 800513a:	2300      	movs	r3, #0
 800513c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    aria_fo_xor(w[3], w[2], rc[i], w[1]);   // W3 = FO(W2, CK3) ^ W1
 8005140:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	441a      	add	r2, r3
 800514c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005150:	f103 0410 	add.w	r4, r3, #16
 8005154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005158:	f103 0120 	add.w	r1, r3, #32
 800515c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005160:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005164:	4623      	mov	r3, r4
 8005166:	f7ff fded 	bl	8004d44 <aria_fo_xor>

    for (i = 0; i < 4; i++) {               // create round keys
 800516a:	2300      	movs	r3, #0
 800516c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005170:	e056      	b.n	8005220 <mbedtls_aria_setkey_enc+0x26c>
        w2 = w[(i + 1) & 3];
 8005172:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005176:	3301      	adds	r3, #1
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	4413      	add	r3, r2
 8005184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        aria_rot128(ctx->rk[i], w[i], w2, 128 - 19);
 8005188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	1d18      	adds	r0, r3, #4
 8005194:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005198:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	18d1      	adds	r1, r2, r3
 80051a0:	236d      	movs	r3, #109	; 0x6d
 80051a2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051a6:	f7ff fea5 	bl	8004ef4 <aria_rot128>
        aria_rot128(ctx->rk[i +  4], w[i], w2, 128 - 31);
 80051aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051ae:	3304      	adds	r3, #4
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4413      	add	r3, r2
 80051b6:	1d18      	adds	r0, r3, #4
 80051b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80051bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	18d1      	adds	r1, r2, r3
 80051c4:	2361      	movs	r3, #97	; 0x61
 80051c6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051ca:	f7ff fe93 	bl	8004ef4 <aria_rot128>
        aria_rot128(ctx->rk[i +  8], w[i], w2,       61);
 80051ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051d2:	3308      	adds	r3, #8
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	1d18      	adds	r0, r3, #4
 80051dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80051e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	18d1      	adds	r1, r2, r3
 80051e8:	233d      	movs	r3, #61	; 0x3d
 80051ea:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051ee:	f7ff fe81 	bl	8004ef4 <aria_rot128>
        aria_rot128(ctx->rk[i + 12], w[i], w2,       31);
 80051f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051f6:	330c      	adds	r3, #12
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	1d18      	adds	r0, r3, #4
 8005200:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	18d1      	adds	r1, r2, r3
 800520c:	231f      	movs	r3, #31
 800520e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005212:	f7ff fe6f 	bl	8004ef4 <aria_rot128>
    for (i = 0; i < 4; i++) {               // create round keys
 8005216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800521a:	3301      	adds	r3, #1
 800521c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005224:	2b03      	cmp	r3, #3
 8005226:	dda4      	ble.n	8005172 <mbedtls_aria_setkey_enc+0x1be>
    }
    aria_rot128(ctx->rk[16], w[0], w[1], 19);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f503 7082 	add.w	r0, r3, #260	; 0x104
 800522e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005232:	f103 0210 	add.w	r2, r3, #16
 8005236:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800523a:	2313      	movs	r3, #19
 800523c:	f7ff fe5a 	bl	8004ef4 <aria_rot128>

    /* w holds enough info to reconstruct the round keys */
    mbedtls_platform_zeroize(w, sizeof(w));
 8005240:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005244:	2140      	movs	r1, #64	; 0x40
 8005246:	4618      	mov	r0, r3
 8005248:	f009 fb70 	bl	800e92c <mbedtls_platform_zeroize>

    return 0;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	37c8      	adds	r7, #200	; 0xc8
 8005252:	46bd      	mov	sp, r7
 8005254:	bdb0      	pop	{r4, r5, r7, pc}
 8005256:	bf00      	nop
 8005258:	0801def0 	.word	0x0801def0

0800525c <mbedtls_aria_setkey_dec>:
 * Set decryption key
 */
#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
int mbedtls_aria_setkey_dec(mbedtls_aria_context *ctx,
                            const unsigned char *key, unsigned int keybits)
{
 800525c:	b590      	push	{r4, r7, lr}
 800525e:	b08b      	sub	sp, #44	; 0x2c
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
    int i, j, k, ret;

    ret = mbedtls_aria_setkey_enc(ctx, key, keybits);
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f7ff fea1 	bl	8004fb4 <mbedtls_aria_setkey_enc>
 8005272:	61b8      	str	r0, [r7, #24]
    if (ret != 0) {
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <mbedtls_aria_setkey_dec+0x22>
        return ret;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	e061      	b.n	8005342 <mbedtls_aria_setkey_dec+0xe6>
    }

    /* flip the order of round keys */
    for (i = 0, j = ctx->nr; i < j; i++, j--) {
 800527e:	2300      	movs	r3, #0
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	623b      	str	r3, [r7, #32]
 8005288:	e030      	b.n	80052ec <mbedtls_aria_setkey_dec+0x90>
        for (k = 0; k < 4; k++) {
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	e024      	b.n	80052da <mbedtls_aria_setkey_dec+0x7e>
            uint32_t t = ctx->rk[i][k];
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	0099      	lsls	r1, r3, #2
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	440b      	add	r3, r1
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	617b      	str	r3, [r7, #20]
            ctx->rk[i][k] = ctx->rk[j][k];
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	0099      	lsls	r1, r3, #2
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	440b      	add	r3, r1
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	68f9      	ldr	r1, [r7, #12]
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	0098      	lsls	r0, r3, #2
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4403      	add	r3, r0
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	605a      	str	r2, [r3, #4]
            ctx->rk[j][k] = t;
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	0099      	lsls	r1, r3, #2
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	440b      	add	r3, r1
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	605a      	str	r2, [r3, #4]
        for (k = 0; k < 4; k++) {
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	3301      	adds	r3, #1
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	ddd7      	ble.n	8005290 <mbedtls_aria_setkey_dec+0x34>
    for (i = 0, j = ctx->nr; i < j; i++, j--) {
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	3301      	adds	r3, #1
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	623b      	str	r3, [r7, #32]
 80052ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	dbca      	blt.n	800528a <mbedtls_aria_setkey_dec+0x2e>
        }
    }

    /* apply affine transform to middle keys */
    for (i = 1; i < ctx->nr; i++) {
 80052f4:	2301      	movs	r3, #1
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
 80052f8:	e01c      	b.n	8005334 <mbedtls_aria_setkey_dec+0xd8>
        aria_a(&ctx->rk[i][0], &ctx->rk[i][1],
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	1d18      	adds	r0, r3, #4
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	3304      	adds	r3, #4
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	1d19      	adds	r1, r3, #4
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	3308      	adds	r3, #8
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	1d1c      	adds	r4, r3, #4
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	330c      	adds	r3, #12
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	3304      	adds	r3, #4
 8005328:	4622      	mov	r2, r4
 800532a:	f7ff fbdb 	bl	8004ae4 <aria_a>
    for (i = 1; i < ctx->nr; i++) {
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	3301      	adds	r3, #1
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	4293      	cmp	r3, r2
 800533e:	dbdc      	blt.n	80052fa <mbedtls_aria_setkey_dec+0x9e>
               &ctx->rk[i][2], &ctx->rk[i][3]);
    }

    return 0;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	372c      	adds	r7, #44	; 0x2c
 8005346:	46bd      	mov	sp, r7
 8005348:	bd90      	pop	{r4, r7, pc}
	...

0800534c <mbedtls_aria_crypt_ecb>:
 * Encrypt a block
 */
int mbedtls_aria_crypt_ecb(mbedtls_aria_context *ctx,
                           const unsigned char input[MBEDTLS_ARIA_BLOCKSIZE],
                           unsigned char output[MBEDTLS_ARIA_BLOCKSIZE])
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b09f      	sub	sp, #124	; 0x7c
 8005350:	af04      	add	r7, sp, #16
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	657b      	str	r3, [r7, #84]	; 0x54
 800535c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800535e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005360:	623b      	str	r3, [r7, #32]
    return r;
 8005362:	6a3b      	ldr	r3, [r7, #32]
    int i;

    uint32_t a, b, c, d;

    a = MBEDTLS_GET_UINT32_LE(input,  0);
 8005364:	643b      	str	r3, [r7, #64]	; 0x40
    b = MBEDTLS_GET_UINT32_LE(input,  4);
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	3304      	adds	r3, #4
 800536a:	65bb      	str	r3, [r7, #88]	; 0x58
 800536c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800536e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005370:	61fb      	str	r3, [r7, #28]
    return r;
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
    c = MBEDTLS_GET_UINT32_LE(input,  8);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	3308      	adds	r3, #8
 800537a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800537c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800537e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005380:	61bb      	str	r3, [r7, #24]
    return r;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
    d = MBEDTLS_GET_UINT32_LE(input, 12);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	330c      	adds	r3, #12
 800538a:	663b      	str	r3, [r7, #96]	; 0x60
 800538c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800538e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005390:	617b      	str	r3, [r7, #20]
    return r;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	637b      	str	r3, [r7, #52]	; 0x34

    i = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	667b      	str	r3, [r7, #100]	; 0x64
    while (1) {
        a ^= ctx->rk[i][0];
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	4413      	add	r3, r2
 80053a2:	3304      	adds	r3, #4
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a8:	4053      	eors	r3, r2
 80053aa:	643b      	str	r3, [r7, #64]	; 0x40
        b ^= ctx->rk[i][1];
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	4413      	add	r3, r2
 80053b4:	3308      	adds	r3, #8
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ba:	4053      	eors	r3, r2
 80053bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        c ^= ctx->rk[i][2];
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	4413      	add	r3, r2
 80053c6:	330c      	adds	r3, #12
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	4053      	eors	r3, r2
 80053ce:	63bb      	str	r3, [r7, #56]	; 0x38
        d ^= ctx->rk[i][3];
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	4413      	add	r3, r2
 80053d8:	3310      	adds	r3, #16
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053de:	4053      	eors	r3, r2
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
        i++;
 80053e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053e4:	3301      	adds	r3, #1
 80053e6:	667b      	str	r3, [r7, #100]	; 0x64

        aria_sl(&a, &b, &c, &d, aria_sb1, aria_sb2, aria_is1, aria_is2);
 80053e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80053ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80053f0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80053f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80053f8:	4c56      	ldr	r4, [pc, #344]	; (8005554 <mbedtls_aria_crypt_ecb+0x208>)
 80053fa:	9403      	str	r4, [sp, #12]
 80053fc:	4c56      	ldr	r4, [pc, #344]	; (8005558 <mbedtls_aria_crypt_ecb+0x20c>)
 80053fe:	9402      	str	r4, [sp, #8]
 8005400:	4c56      	ldr	r4, [pc, #344]	; (800555c <mbedtls_aria_crypt_ecb+0x210>)
 8005402:	9401      	str	r4, [sp, #4]
 8005404:	4c56      	ldr	r4, [pc, #344]	; (8005560 <mbedtls_aria_crypt_ecb+0x214>)
 8005406:	9400      	str	r4, [sp, #0]
 8005408:	f7ff fbef 	bl	8004bea <aria_sl>
        aria_a(&a, &b, &c, &d);
 800540c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005410:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005414:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005418:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800541c:	f7ff fb62 	bl	8004ae4 <aria_a>

        a ^= ctx->rk[i][0];
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	4413      	add	r3, r2
 8005428:	3304      	adds	r3, #4
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800542e:	4053      	eors	r3, r2
 8005430:	643b      	str	r3, [r7, #64]	; 0x40
        b ^= ctx->rk[i][1];
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	4413      	add	r3, r2
 800543a:	3308      	adds	r3, #8
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005440:	4053      	eors	r3, r2
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
        c ^= ctx->rk[i][2];
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	4413      	add	r3, r2
 800544c:	330c      	adds	r3, #12
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	4053      	eors	r3, r2
 8005454:	63bb      	str	r3, [r7, #56]	; 0x38
        d ^= ctx->rk[i][3];
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	4413      	add	r3, r2
 800545e:	3310      	adds	r3, #16
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005464:	4053      	eors	r3, r2
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
        i++;
 8005468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800546a:	3301      	adds	r3, #1
 800546c:	667b      	str	r3, [r7, #100]	; 0x64

        aria_sl(&a, &b, &c, &d, aria_is1, aria_is2, aria_sb1, aria_sb2);
 800546e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005472:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005476:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800547a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800547e:	4c37      	ldr	r4, [pc, #220]	; (800555c <mbedtls_aria_crypt_ecb+0x210>)
 8005480:	9403      	str	r4, [sp, #12]
 8005482:	4c37      	ldr	r4, [pc, #220]	; (8005560 <mbedtls_aria_crypt_ecb+0x214>)
 8005484:	9402      	str	r4, [sp, #8]
 8005486:	4c33      	ldr	r4, [pc, #204]	; (8005554 <mbedtls_aria_crypt_ecb+0x208>)
 8005488:	9401      	str	r4, [sp, #4]
 800548a:	4c33      	ldr	r4, [pc, #204]	; (8005558 <mbedtls_aria_crypt_ecb+0x20c>)
 800548c:	9400      	str	r4, [sp, #0]
 800548e:	f7ff fbac 	bl	8004bea <aria_sl>
        if (i >= ctx->nr) {
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800549a:	4293      	cmp	r3, r2
 800549c:	da0a      	bge.n	80054b4 <mbedtls_aria_crypt_ecb+0x168>
            break;
        }
        aria_a(&a, &b, &c, &d);
 800549e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80054a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80054a6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80054aa:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80054ae:	f7ff fb19 	bl	8004ae4 <aria_a>
        a ^= ctx->rk[i][0];
 80054b2:	e772      	b.n	800539a <mbedtls_aria_crypt_ecb+0x4e>
            break;
 80054b4:	bf00      	nop
    }

    /* final key mixing */
    a ^= ctx->rk[i][0];
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	4413      	add	r3, r2
 80054be:	3304      	adds	r3, #4
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c4:	4053      	eors	r3, r2
 80054c6:	643b      	str	r3, [r7, #64]	; 0x40
    b ^= ctx->rk[i][1];
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	4413      	add	r3, r2
 80054d0:	3308      	adds	r3, #8
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d6:	4053      	eors	r3, r2
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    c ^= ctx->rk[i][2];
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	4413      	add	r3, r2
 80054e2:	330c      	adds	r3, #12
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	4053      	eors	r3, r2
 80054ea:	63bb      	str	r3, [r7, #56]	; 0x38
    d ^= ctx->rk[i][3];
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	4413      	add	r3, r2
 80054f4:	3310      	adds	r3, #16
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fa:	4053      	eors	r3, r2
 80054fc:	637b      	str	r3, [r7, #52]	; 0x34

    MBEDTLS_PUT_UINT32_LE(a, output,  0);
 80054fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	653a      	str	r2, [r7, #80]	; 0x50
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
 8005506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 8005508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550a:	601a      	str	r2, [r3, #0]
}
 800550c:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(b, output,  4);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	1d1a      	adds	r2, r3, #4
 8005512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005514:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28
 8005518:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 800551a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551c:	601a      	str	r2, [r3, #0]
}
 800551e:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(c, output,  8);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f103 0208 	add.w	r2, r3, #8
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	64ba      	str	r2, [r7, #72]	; 0x48
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800552c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    memcpy(p, &x, sizeof(x));
 800552e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005530:	601a      	str	r2, [r3, #0]
}
 8005532:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(d, output, 12);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f103 020c 	add.w	r2, r3, #12
 800553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553c:	647a      	str	r2, [r7, #68]	; 0x44
 800553e:	633b      	str	r3, [r7, #48]	; 0x30
 8005540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    memcpy(p, &x, sizeof(x));
 8005542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005544:	601a      	str	r2, [r3, #0]
}
 8005546:	bf00      	nop

    return 0;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	376c      	adds	r7, #108	; 0x6c
 800554e:	46bd      	mov	sp, r7
 8005550:	bd90      	pop	{r4, r7, pc}
 8005552:	bf00      	nop
 8005554:	0801e854 	.word	0x0801e854
 8005558:	0801e754 	.word	0x0801e754
 800555c:	0801e654 	.word	0x0801e654
 8005560:	0801e554 	.word	0x0801e554

08005564 <mbedtls_aria_init>:

/* Initialize context */
void mbedtls_aria_init(mbedtls_aria_context *ctx)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_aria_context));
 800556c:	f44f 728a 	mov.w	r2, #276	; 0x114
 8005570:	2100      	movs	r1, #0
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f017 fe22 	bl	801d1bc <memset>
}
 8005578:	bf00      	nop
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <mbedtls_aria_free>:

/* Clear context */
void mbedtls_aria_free(mbedtls_aria_context *ctx)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <mbedtls_aria_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_aria_context));
 800558e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f009 f9ca 	bl	800e92c <mbedtls_platform_zeroize>
 8005598:	e000      	b.n	800559c <mbedtls_aria_free+0x1c>
        return;
 800559a:	bf00      	nop
}
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <mbedtls_aria_crypt_cbc>:
                           int mode,
                           size_t length,
                           unsigned char iv[MBEDTLS_ARIA_BLOCKSIZE],
                           const unsigned char *input,
                           unsigned char *output)
{
 80055a2:	b5b0      	push	{r4, r5, r7, lr}
 80055a4:	b0a0      	sub	sp, #128	; 0x80
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	603b      	str	r3, [r7, #0]
    unsigned char temp[MBEDTLS_ARIA_BLOCKSIZE];

    if ((mode != MBEDTLS_ARIA_ENCRYPT) && (mode != MBEDTLS_ARIA_DECRYPT)) {
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d005      	beq.n	80055c2 <mbedtls_aria_crypt_cbc+0x20>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <mbedtls_aria_crypt_cbc+0x20>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 80055bc:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 80055c0:	e0e4      	b.n	800578c <mbedtls_aria_crypt_cbc+0x1ea>
    }

    if (length % MBEDTLS_ARIA_BLOCKSIZE) {
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <mbedtls_aria_crypt_cbc+0x30>
        return MBEDTLS_ERR_ARIA_INVALID_INPUT_LENGTH;
 80055cc:	f06f 035d 	mvn.w	r3, #93	; 0x5d
 80055d0:	e0dc      	b.n	800578c <mbedtls_aria_crypt_cbc+0x1ea>
    }

    if (mode == MBEDTLS_ARIA_DECRYPT) {
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f040 80d5 	bne.w	8005784 <mbedtls_aria_crypt_cbc+0x1e2>
        while (length > 0) {
 80055da:	e06d      	b.n	80056b8 <mbedtls_aria_crypt_cbc+0x116>
            memcpy(temp, input, MBEDTLS_ARIA_BLOCKSIZE);
 80055dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055e0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	6859      	ldr	r1, [r3, #4]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aria_crypt_ecb(ctx, input, output);
 80055ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff fea8 	bl	800534c <mbedtls_aria_crypt_ecb>
 80055fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005600:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005602:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005606:	67bb      	str	r3, [r7, #120]	; 0x78
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	677b      	str	r3, [r7, #116]	; 0x74
 800560c:	2310      	movs	r3, #16
 800560e:	673b      	str	r3, [r7, #112]	; 0x70
    size_t i = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (; (i + 4) <= n; i += 4) {
 8005614:	e01e      	b.n	8005654 <mbedtls_aria_crypt_cbc+0xb2>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8005616:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561a:	4413      	add	r3, r2
 800561c:	66bb      	str	r3, [r7, #104]	; 0x68
 800561e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005620:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005622:	61bb      	str	r3, [r7, #24]
    return r;
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562a:	440b      	add	r3, r1
 800562c:	667b      	str	r3, [r7, #100]	; 0x64
 800562e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005630:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8005632:	617b      	str	r3, [r7, #20]
    return r;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	4053      	eors	r3, r2
 8005638:	663b      	str	r3, [r7, #96]	; 0x60
        mbedtls_put_unaligned_uint32(r + i, x);
 800563a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800563c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563e:	4413      	add	r3, r2
 8005640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 8005648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800564a:	601a      	str	r2, [r3, #0]
}
 800564c:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800564e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005650:	3304      	adds	r3, #4
 8005652:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005656:	3304      	adds	r3, #4
 8005658:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800565a:	429a      	cmp	r2, r3
 800565c:	d2db      	bcs.n	8005616 <mbedtls_aria_crypt_cbc+0x74>
    for (; i < n; i++) {
 800565e:	e010      	b.n	8005682 <mbedtls_aria_crypt_cbc+0xe0>
        r[i] = a[i] ^ b[i];
 8005660:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005664:	4413      	add	r3, r2
 8005666:	7819      	ldrb	r1, [r3, #0]
 8005668:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800566a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566c:	4413      	add	r3, r2
 800566e:	781a      	ldrb	r2, [r3, #0]
 8005670:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8005672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005674:	4403      	add	r3, r0
 8005676:	404a      	eors	r2, r1
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800567c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567e:	3301      	adds	r3, #1
 8005680:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005682:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005686:	429a      	cmp	r2, r3
 8005688:	d8ea      	bhi.n	8005660 <mbedtls_aria_crypt_cbc+0xbe>
}
 800568a:	bf00      	nop

            mbedtls_xor(output, output, iv, MBEDTLS_ARIA_BLOCKSIZE);

            memcpy(iv, temp, MBEDTLS_ARIA_BLOCKSIZE);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	461d      	mov	r5, r3
 8005690:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005696:	6028      	str	r0, [r5, #0]
 8005698:	6069      	str	r1, [r5, #4]
 800569a:	60aa      	str	r2, [r5, #8]
 800569c:	60eb      	str	r3, [r5, #12]

            input  += MBEDTLS_ARIA_BLOCKSIZE;
 800569e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056a2:	3310      	adds	r3, #16
 80056a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            output += MBEDTLS_ARIA_BLOCKSIZE;
 80056a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056ac:	3310      	adds	r3, #16
 80056ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            length -= MBEDTLS_ARIA_BLOCKSIZE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3b10      	subs	r3, #16
 80056b6:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d18e      	bne.n	80055dc <mbedtls_aria_crypt_cbc+0x3a>
 80056be:	e064      	b.n	800578a <mbedtls_aria_crypt_cbc+0x1e8>
 80056c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80056c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056ca:	657b      	str	r3, [r7, #84]	; 0x54
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	653b      	str	r3, [r7, #80]	; 0x50
 80056d0:	2310      	movs	r3, #16
 80056d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t i = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	64bb      	str	r3, [r7, #72]	; 0x48
    for (; (i + 4) <= n; i += 4) {
 80056d8:	e01e      	b.n	8005718 <mbedtls_aria_crypt_cbc+0x176>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80056da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056de:	4413      	add	r3, r2
 80056e0:	647b      	str	r3, [r7, #68]	; 0x44
 80056e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 80056e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ee:	440b      	add	r3, r1
 80056f0:	643b      	str	r3, [r7, #64]	; 0x40
 80056f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056f4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80056f6:	623b      	str	r3, [r7, #32]
    return r;
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	4053      	eors	r3, r2
 80056fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        mbedtls_put_unaligned_uint32(r + i, x);
 80056fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005702:	4413      	add	r3, r2
 8005704:	63bb      	str	r3, [r7, #56]	; 0x38
 8005706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005708:	61fb      	str	r3, [r7, #28]
 800570a:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 800570c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570e:	601a      	str	r2, [r3, #0]
}
 8005710:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8005712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005714:	3304      	adds	r3, #4
 8005716:	64bb      	str	r3, [r7, #72]	; 0x48
 8005718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571a:	3304      	adds	r3, #4
 800571c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800571e:	429a      	cmp	r2, r3
 8005720:	d2db      	bcs.n	80056da <mbedtls_aria_crypt_cbc+0x138>
    for (; i < n; i++) {
 8005722:	e010      	b.n	8005746 <mbedtls_aria_crypt_cbc+0x1a4>
        r[i] = a[i] ^ b[i];
 8005724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005728:	4413      	add	r3, r2
 800572a:	7819      	ldrb	r1, [r3, #0]
 800572c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800572e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005730:	4413      	add	r3, r2
 8005732:	781a      	ldrb	r2, [r3, #0]
 8005734:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005738:	4403      	add	r3, r0
 800573a:	404a      	eors	r2, r1
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8005740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005742:	3301      	adds	r3, #1
 8005744:	64bb      	str	r3, [r7, #72]	; 0x48
 8005746:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800574a:	429a      	cmp	r2, r3
 800574c:	d8ea      	bhi.n	8005724 <mbedtls_aria_crypt_cbc+0x182>
}
 800574e:	bf00      	nop
        }
    } else {
        while (length > 0) {
            mbedtls_xor(output, input, iv, MBEDTLS_ARIA_BLOCKSIZE);

            mbedtls_aria_crypt_ecb(ctx, output, output);
 8005750:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005754:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7ff fdf7 	bl	800534c <mbedtls_aria_crypt_ecb>
            memcpy(iv, output, MBEDTLS_ARIA_BLOCKSIZE);
 800575e:	2210      	movs	r2, #16
 8005760:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8005764:	6838      	ldr	r0, [r7, #0]
 8005766:	f017 fdc7 	bl	801d2f8 <memcpy>

            input  += MBEDTLS_ARIA_BLOCKSIZE;
 800576a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800576e:	3310      	adds	r3, #16
 8005770:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            output += MBEDTLS_ARIA_BLOCKSIZE;
 8005774:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005778:	3310      	adds	r3, #16
 800577a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            length -= MBEDTLS_ARIA_BLOCKSIZE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3b10      	subs	r3, #16
 8005782:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d19a      	bne.n	80056c0 <mbedtls_aria_crypt_cbc+0x11e>
        }
    }

    return 0;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3780      	adds	r7, #128	; 0x80
 8005790:	46bd      	mov	sp, r7
 8005792:	bdb0      	pop	{r4, r5, r7, pc}

08005794 <mbedtls_aria_crypt_cfb128>:
                              size_t length,
                              size_t *iv_off,
                              unsigned char iv[MBEDTLS_ARIA_BLOCKSIZE],
                              const unsigned char *input,
                              unsigned char *output)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
    unsigned char c;
    size_t n;

    if ((mode != MBEDTLS_ARIA_ENCRYPT) && (mode != MBEDTLS_ARIA_DECRYPT)) {
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d005      	beq.n	80057b4 <mbedtls_aria_crypt_cfb128+0x20>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <mbedtls_aria_crypt_cfb128+0x20>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 80057ae:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 80057b2:	e05d      	b.n	8005870 <mbedtls_aria_crypt_cfb128+0xdc>
    }

    n = *iv_off;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	617b      	str	r3, [r7, #20]

    /* An overly large value of n can lead to an unlimited
     * buffer overflow. */
    if (n >= MBEDTLS_ARIA_BLOCKSIZE) {
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b0f      	cmp	r3, #15
 80057be:	d902      	bls.n	80057c6 <mbedtls_aria_crypt_cfb128+0x32>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 80057c0:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 80057c4:	e054      	b.n	8005870 <mbedtls_aria_crypt_cfb128+0xdc>
    }

    if (mode == MBEDTLS_ARIA_DECRYPT) {
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d148      	bne.n	800585e <mbedtls_aria_crypt_cfb128+0xca>
        while (length--) {
 80057cc:	e021      	b.n	8005812 <mbedtls_aria_crypt_cfb128+0x7e>
            if (n == 0) {
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <mbedtls_aria_crypt_cfb128+0x4a>
                mbedtls_aria_crypt_ecb(ctx, iv, iv);
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	6a39      	ldr	r1, [r7, #32]
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff fdb7 	bl	800534c <mbedtls_aria_crypt_ecb>
            }

            c = *input++;
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	627a      	str	r2, [r7, #36]	; 0x24
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	74fb      	strb	r3, [r7, #19]
            *output++ = c ^ iv[n];
 80057e8:	6a3a      	ldr	r2, [r7, #32]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	4413      	add	r3, r2
 80057ee:	7819      	ldrb	r1, [r3, #0]
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	62ba      	str	r2, [r7, #40]	; 0x28
 80057f6:	7cfa      	ldrb	r2, [r7, #19]
 80057f8:	404a      	eors	r2, r1
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]
            iv[n] = c;
 80057fe:	6a3a      	ldr	r2, [r7, #32]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	4413      	add	r3, r2
 8005804:	7cfa      	ldrb	r2, [r7, #19]
 8005806:	701a      	strb	r2, [r3, #0]

            n = (n + 1) & 0x0F;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	3301      	adds	r3, #1
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	617b      	str	r3, [r7, #20]
        while (length--) {
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1d8      	bne.n	80057ce <mbedtls_aria_crypt_cfb128+0x3a>
 800581c:	e024      	b.n	8005868 <mbedtls_aria_crypt_cfb128+0xd4>
        }
    } else {
        while (length--) {
            if (n == 0) {
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d104      	bne.n	800582e <mbedtls_aria_crypt_cfb128+0x9a>
                mbedtls_aria_crypt_ecb(ctx, iv, iv);
 8005824:	6a3a      	ldr	r2, [r7, #32]
 8005826:	6a39      	ldr	r1, [r7, #32]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff fd8f 	bl	800534c <mbedtls_aria_crypt_ecb>
            }

            iv[n] = *output++ = (unsigned char) (iv[n] ^ *input++);
 800582e:	6a3a      	ldr	r2, [r7, #32]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	4413      	add	r3, r2
 8005834:	7819      	ldrb	r1, [r3, #0]
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	627a      	str	r2, [r7, #36]	; 0x24
 800583c:	781a      	ldrb	r2, [r3, #0]
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	1c58      	adds	r0, r3, #1
 8005842:	62b8      	str	r0, [r7, #40]	; 0x28
 8005844:	404a      	eors	r2, r1
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	6a39      	ldr	r1, [r7, #32]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	440a      	add	r2, r1
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	7013      	strb	r3, [r2, #0]

            n = (n + 1) & 0x0F;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	3301      	adds	r3, #1
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	617b      	str	r3, [r7, #20]
        while (length--) {
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	1e5a      	subs	r2, r3, #1
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1da      	bne.n	800581e <mbedtls_aria_crypt_cfb128+0x8a>
        }
    }

    *iv_off = n;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	601a      	str	r2, [r3, #0]

    return 0;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <mbedtls_aria_crypt_ctr>:
                           size_t *nc_off,
                           unsigned char nonce_counter[MBEDTLS_ARIA_BLOCKSIZE],
                           unsigned char stream_block[MBEDTLS_ARIA_BLOCKSIZE],
                           const unsigned char *input,
                           unsigned char *output)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
    int c, i;
    size_t n;

    n = *nc_off;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	61bb      	str	r3, [r7, #24]
    /* An overly large value of n can lead to an unlimited
     * buffer overflow. */
    if (n >= MBEDTLS_ARIA_BLOCKSIZE) {
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b0f      	cmp	r3, #15
 8005890:	d938      	bls.n	8005904 <mbedtls_aria_crypt_ctr+0x8c>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 8005892:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 8005896:	e03e      	b.n	8005916 <mbedtls_aria_crypt_ctr+0x9e>
    }

    while (length--) {
        if (n == 0) {
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d11a      	bne.n	80058d4 <mbedtls_aria_crypt_ctr+0x5c>
            mbedtls_aria_crypt_ecb(ctx, nonce_counter,
 800589e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f7ff fd52 	bl	800534c <mbedtls_aria_crypt_ecb>
                                   stream_block);

            for (i = MBEDTLS_ARIA_BLOCKSIZE; i > 0; i--) {
 80058a8:	2310      	movs	r3, #16
 80058aa:	61fb      	str	r3, [r7, #28]
 80058ac:	e00d      	b.n	80058ca <mbedtls_aria_crypt_ctr+0x52>
                if (++nonce_counter[i - 1] != 0) {
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	4413      	add	r3, r2
 80058b6:	781a      	ldrb	r2, [r3, #0]
 80058b8:	3201      	adds	r2, #1
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d106      	bne.n	80058d2 <mbedtls_aria_crypt_ctr+0x5a>
            for (i = MBEDTLS_ARIA_BLOCKSIZE; i > 0; i--) {
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dcee      	bgt.n	80058ae <mbedtls_aria_crypt_ctr+0x36>
 80058d0:	e000      	b.n	80058d4 <mbedtls_aria_crypt_ctr+0x5c>
                    break;
 80058d2:	bf00      	nop
                }
            }
        }
        c = *input++;
 80058d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char) (c ^ stream_block[n]);
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	b25a      	sxtb	r2, r3
 80058e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	440b      	add	r3, r1
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	b25b      	sxtb	r3, r3
 80058ec:	4053      	eors	r3, r2
 80058ee:	b259      	sxtb	r1, r3
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	633a      	str	r2, [r7, #48]	; 0x30
 80058f6:	b2ca      	uxtb	r2, r1
 80058f8:	701a      	strb	r2, [r3, #0]

        n = (n + 1) & 0x0F;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	3301      	adds	r3, #1
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	61bb      	str	r3, [r7, #24]
    while (length--) {
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	1e5a      	subs	r2, r3, #1
 8005908:	60ba      	str	r2, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1c4      	bne.n	8005898 <mbedtls_aria_crypt_ctr+0x20>
    }

    *nc_off = n;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	601a      	str	r2, [r3, #0]

    return 0;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3720      	adds	r7, #32
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <camellia_feistel>:
        }                                                   \
    }

static void camellia_feistel(const uint32_t x[2], const uint32_t k[2],
                             uint32_t z[2])
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
    uint32_t I0, I1;
    I0 = x[0] ^ k[0];
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4053      	eors	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
    I1 = x[1] ^ k[1];
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3304      	adds	r3, #4
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	3304      	adds	r3, #4
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4053      	eors	r3, r2
 8005946:	613b      	str	r3, [r7, #16]

    I0 = ((uint32_t) SBOX1(MBEDTLS_BYTE_3(I0)) << 24) |
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	0e1b      	lsrs	r3, r3, #24
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	4b31      	ldr	r3, [pc, #196]	; (8005a18 <camellia_feistel+0xf8>)
 8005952:	5c9b      	ldrb	r3, [r3, r2]
 8005954:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX2(MBEDTLS_BYTE_2(I0)) << 16) |
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	0c1b      	lsrs	r3, r3, #16
 800595a:	b2db      	uxtb	r3, r3
 800595c:	4619      	mov	r1, r3
 800595e:	4b2f      	ldr	r3, [pc, #188]	; (8005a1c <camellia_feistel+0xfc>)
 8005960:	5c5b      	ldrb	r3, [r3, r1]
 8005962:	041b      	lsls	r3, r3, #16
    I0 = ((uint32_t) SBOX1(MBEDTLS_BYTE_3(I0)) << 24) |
 8005964:	431a      	orrs	r2, r3
         ((uint32_t) SBOX3(MBEDTLS_BYTE_1(I0)) <<  8) |
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	0a1b      	lsrs	r3, r3, #8
 800596a:	b2db      	uxtb	r3, r3
 800596c:	4619      	mov	r1, r3
 800596e:	4b2c      	ldr	r3, [pc, #176]	; (8005a20 <camellia_feistel+0x100>)
 8005970:	5c5b      	ldrb	r3, [r3, r1]
 8005972:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX2(MBEDTLS_BYTE_2(I0)) << 16) |
 8005974:	4313      	orrs	r3, r2
         ((uint32_t) SBOX4(MBEDTLS_BYTE_0(I0)));
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	4611      	mov	r1, r2
 800597c:	4a29      	ldr	r2, [pc, #164]	; (8005a24 <camellia_feistel+0x104>)
 800597e:	5c52      	ldrb	r2, [r2, r1]
    I0 = ((uint32_t) SBOX1(MBEDTLS_BYTE_3(I0)) << 24) |
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]
    I1 = ((uint32_t) SBOX2(MBEDTLS_BYTE_3(I1)) << 24) |
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	0e1b      	lsrs	r3, r3, #24
 8005988:	b2db      	uxtb	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	4b23      	ldr	r3, [pc, #140]	; (8005a1c <camellia_feistel+0xfc>)
 800598e:	5c9b      	ldrb	r3, [r3, r2]
 8005990:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX3(MBEDTLS_BYTE_2(I1)) << 16) |
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	0c1b      	lsrs	r3, r3, #16
 8005996:	b2db      	uxtb	r3, r3
 8005998:	4619      	mov	r1, r3
 800599a:	4b21      	ldr	r3, [pc, #132]	; (8005a20 <camellia_feistel+0x100>)
 800599c:	5c5b      	ldrb	r3, [r3, r1]
 800599e:	041b      	lsls	r3, r3, #16
    I1 = ((uint32_t) SBOX2(MBEDTLS_BYTE_3(I1)) << 24) |
 80059a0:	431a      	orrs	r2, r3
         ((uint32_t) SBOX4(MBEDTLS_BYTE_1(I1)) <<  8) |
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	0a1b      	lsrs	r3, r3, #8
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	4619      	mov	r1, r3
 80059aa:	4b1e      	ldr	r3, [pc, #120]	; (8005a24 <camellia_feistel+0x104>)
 80059ac:	5c5b      	ldrb	r3, [r3, r1]
 80059ae:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX3(MBEDTLS_BYTE_2(I1)) << 16) |
 80059b0:	4313      	orrs	r3, r2
         ((uint32_t) SBOX1(MBEDTLS_BYTE_0(I1)));
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	4611      	mov	r1, r2
 80059b8:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <camellia_feistel+0xf8>)
 80059ba:	5c52      	ldrb	r2, [r2, r1]
    I1 = ((uint32_t) SBOX2(MBEDTLS_BYTE_3(I1)) << 24) |
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

    I0 ^= (I1 << 8) | (I1 >> 24);
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	ea4f 6333 	mov.w	r3, r3, ror #24
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4053      	eors	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 << 16) | (I0 >> 16);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	ea4f 4333 	mov.w	r3, r3, ror #16
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4053      	eors	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
    I0 ^= (I1 >> 8) | (I1 << 24);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	ea4f 2333 	mov.w	r3, r3, ror #8
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4053      	eors	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 >> 8) | (I0 << 24);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4053      	eors	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

    z[0] ^= I1;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	405a      	eors	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	601a      	str	r2, [r3, #0]
    z[1] ^= I0;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3304      	adds	r3, #4
 8005a00:	6819      	ldr	r1, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3304      	adds	r3, #4
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	404a      	eors	r2, r1
 8005a0a:	601a      	str	r2, [r3, #0]
}
 8005a0c:	bf00      	nop
 8005a0e:	371c      	adds	r7, #28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	0801e984 	.word	0x0801e984
 8005a1c:	0801ea84 	.word	0x0801ea84
 8005a20:	0801eb84 	.word	0x0801eb84
 8005a24:	0801ec84 	.word	0x0801ec84

08005a28 <mbedtls_camellia_init>:

void mbedtls_camellia_init(mbedtls_camellia_context *ctx)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_camellia_context));
 8005a30:	f44f 728a 	mov.w	r2, #276	; 0x114
 8005a34:	2100      	movs	r1, #0
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f017 fbc0 	bl	801d1bc <memset>
}
 8005a3c:	bf00      	nop
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <mbedtls_camellia_free>:

void mbedtls_camellia_free(mbedtls_camellia_context *ctx)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <mbedtls_camellia_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_camellia_context));
 8005a52:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f008 ff68 	bl	800e92c <mbedtls_platform_zeroize>
 8005a5c:	e000      	b.n	8005a60 <mbedtls_camellia_free+0x1c>
        return;
 8005a5e:	bf00      	nop
}
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <mbedtls_camellia_setkey_enc>:
 * Camellia key schedule (encryption)
 */
int mbedtls_camellia_setkey_enc(mbedtls_camellia_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b0ce      	sub	sp, #312	; 0x138
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a76:	6018      	str	r0, [r3, #0]
 8005a78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a80:	6019      	str	r1, [r3, #0]
 8005a82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a86:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005a8a:	601a      	str	r2, [r3, #0]
    unsigned char t[64];
    uint32_t SIGMA[6][2];
    uint32_t KC[16];
    uint32_t TK[20];

    RK = ctx->rk;
 8005a8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3304      	adds	r3, #4
 8005a98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    memset(t, 0, 64);
 8005a9c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005aa0:	2240      	movs	r2, #64	; 0x40
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f017 fb89 	bl	801d1bc <memset>
    memset(RK, 0, sizeof(ctx->rk));
 8005aaa:	f44f 7288 	mov.w	r2, #272	; 0x110
 8005aae:	2100      	movs	r1, #0
 8005ab0:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005ab4:	f017 fb82 	bl	801d1bc <memset>

    switch (keybits) {
 8005ab8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005abc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac6:	d021      	beq.n	8005b0c <mbedtls_camellia_setkey_enc+0xa4>
 8005ac8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005acc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad6:	d824      	bhi.n	8005b22 <mbedtls_camellia_setkey_enc+0xba>
 8005ad8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005adc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b80      	cmp	r3, #128	; 0x80
 8005ae4:	d007      	beq.n	8005af6 <mbedtls_camellia_setkey_enc+0x8e>
 8005ae6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005aea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2bc0      	cmp	r3, #192	; 0xc0
 8005af2:	d00b      	beq.n	8005b0c <mbedtls_camellia_setkey_enc+0xa4>
 8005af4:	e015      	b.n	8005b22 <mbedtls_camellia_setkey_enc+0xba>
        case 128: ctx->nr = 3; idx = 0; break;
 8005af6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2203      	movs	r2, #3
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	2300      	movs	r3, #0
 8005b06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005b0a:	e00e      	b.n	8005b2a <mbedtls_camellia_setkey_enc+0xc2>
        case 192:
        case 256: ctx->nr = 4; idx = 1; break;
 8005b0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2204      	movs	r2, #4
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005b20:	e003      	b.n	8005b2a <mbedtls_camellia_setkey_enc+0xc2>
        default: return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8005b22:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8005b26:	f000 be01 	b.w	800672c <mbedtls_camellia_setkey_enc+0xcc4>
    }

    for (i = 0; i < keybits / 8; ++i) {
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005b30:	e014      	b.n	8005b5c <mbedtls_camellia_setkey_enc+0xf4>
        t[i] = key[i];
 8005b32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b40:	4413      	add	r3, r2
 8005b42:	7819      	ldrb	r1, [r3, #0]
 8005b44:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8005b48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b4c:	4413      	add	r3, r2
 8005b4e:	460a      	mov	r2, r1
 8005b50:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < keybits / 8; ++i) {
 8005b52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b56:	3301      	adds	r3, #1
 8005b58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005b5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	08db      	lsrs	r3, r3, #3
 8005b68:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d3e0      	bcc.n	8005b32 <mbedtls_camellia_setkey_enc+0xca>
    }

    if (keybits == 192) {
 8005b70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b74:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b7c:	d11e      	bne.n	8005bbc <mbedtls_camellia_setkey_enc+0x154>
        for (i = 0; i < 8; i++) {
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005b84:	e016      	b.n	8005bb4 <mbedtls_camellia_setkey_enc+0x14c>
            t[24 + i] = ~t[16 + i];
 8005b86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b8a:	3310      	adds	r3, #16
 8005b8c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005b90:	443b      	add	r3, r7
 8005b92:	f813 2c58 	ldrb.w	r2, [r3, #-88]
 8005b96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b9a:	3318      	adds	r3, #24
 8005b9c:	43d2      	mvns	r2, r2
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005ba4:	443b      	add	r3, r7
 8005ba6:	f803 2c58 	strb.w	r2, [r3, #-88]
        for (i = 0; i < 8; i++) {
 8005baa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005bae:	3301      	adds	r3, #1
 8005bb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005bb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005bb8:	2b07      	cmp	r3, #7
 8005bba:	d9e4      	bls.n	8005b86 <mbedtls_camellia_setkey_enc+0x11e>
    }

    /*
     * Prepare SIGMA values
     */
    for (i = 0; i < 6; i++) {
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005bc2:	e041      	b.n	8005c48 <mbedtls_camellia_setkey_enc+0x1e0>
        SIGMA[i][0] = MBEDTLS_GET_UINT32_BE(SIGMA_CHARS[i], 0);
 8005bc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4aac      	ldr	r2, [pc, #688]	; (8005e7c <mbedtls_camellia_setkey_enc+0x414>)
 8005bcc:	4413      	add	r3, r2
 8005bce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005bd2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8005bda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005bde:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005be2:	601a      	str	r2, [r3, #0]
    return r;
 8005be4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005be8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	ba1a      	rev	r2, r3
 8005bf0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005bfa:	443b      	add	r3, r7
 8005bfc:	f843 2c88 	str.w	r2, [r3, #-136]
        SIGMA[i][1] = MBEDTLS_GET_UINT32_BE(SIGMA_CHARS[i], 4);
 8005c00:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	4a9d      	ldr	r2, [pc, #628]	; (8005e7c <mbedtls_camellia_setkey_enc+0x414>)
 8005c08:	4413      	add	r3, r2
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8005c18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c1c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005c20:	601a      	str	r2, [r3, #0]
    return r;
 8005c22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c26:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	ba1a      	rev	r2, r3
 8005c2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005c38:	443b      	add	r3, r7
 8005c3a:	f843 2c84 	str.w	r2, [r3, #-132]
    for (i = 0; i < 6; i++) {
 8005c3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c42:	3301      	adds	r3, #1
 8005c44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005c48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c4c:	2b05      	cmp	r3, #5
 8005c4e:	d9b9      	bls.n	8005bc4 <mbedtls_camellia_setkey_enc+0x15c>

    /*
     * Key storage in KC
     * Order: KL, KR, KA, KB
     */
    memset(KC, 0, sizeof(KC));
 8005c50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005c54:	2240      	movs	r2, #64	; 0x40
 8005c56:	2100      	movs	r1, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f017 faaf 	bl	801d1bc <memset>

    /* Store KL, KR */
    for (i = 0; i < 8; i++) {
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005c64:	e023      	b.n	8005cae <mbedtls_camellia_setkey_enc+0x246>
        KC[i] = MBEDTLS_GET_UINT32_BE(t, i * 4);
 8005c66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8005c70:	4413      	add	r3, r2
 8005c72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c76:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8005c7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c86:	601a      	str	r2, [r3, #0]
    return r;
 8005c88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c8c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	ba1a      	rev	r2, r3
 8005c94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005c9e:	443b      	add	r3, r7
 8005ca0:	f843 2cc8 	str.w	r2, [r3, #-200]
    for (i = 0; i < 8; i++) {
 8005ca4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ca8:	3301      	adds	r3, #1
 8005caa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005cae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005cb2:	2b07      	cmp	r3, #7
 8005cb4:	d9d7      	bls.n	8005c66 <mbedtls_camellia_setkey_enc+0x1fe>
    }

    /* Generate KA */
    for (i = 0; i < 4; ++i) {
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005cbc:	e01f      	b.n	8005cfe <mbedtls_camellia_setkey_enc+0x296>
        KC[8 + i] = KC[i] ^ KC[4 + i];
 8005cbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005cc8:	443b      	add	r3, r7
 8005cca:	f853 1cc8 	ldr.w	r1, [r3, #-200]
 8005cce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005cda:	443b      	add	r3, r7
 8005cdc:	f853 2cc8 	ldr.w	r2, [r3, #-200]
 8005ce0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	404a      	eors	r2, r1
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005cee:	443b      	add	r3, r7
 8005cf0:	f843 2cc8 	str.w	r2, [r3, #-200]
    for (i = 0; i < 4; ++i) {
 8005cf4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005cfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d9db      	bls.n	8005cbe <mbedtls_camellia_setkey_enc+0x256>
    }

    camellia_feistel(KC + 8, SIGMA[0], KC + 10);
 8005d06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005d0a:	3320      	adds	r3, #32
 8005d0c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005d10:	3228      	adds	r2, #40	; 0x28
 8005d12:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff fe02 	bl	8005920 <camellia_feistel>
    camellia_feistel(KC + 10, SIGMA[1], KC + 8);
 8005d1c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005d20:	3328      	adds	r3, #40	; 0x28
 8005d22:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005d26:	3220      	adds	r2, #32
 8005d28:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8005d2c:	3108      	adds	r1, #8
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff fdf6 	bl	8005920 <camellia_feistel>

    for (i = 0; i < 4; ++i) {
 8005d34:	2300      	movs	r3, #0
 8005d36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005d3a:	e01f      	b.n	8005d7c <mbedtls_camellia_setkey_enc+0x314>
        KC[8 + i] ^= KC[i];
 8005d3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d40:	3308      	adds	r3, #8
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005d48:	443b      	add	r3, r7
 8005d4a:	f853 1cc8 	ldr.w	r1, [r3, #-200]
 8005d4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005d58:	443b      	add	r3, r7
 8005d5a:	f853 2cc8 	ldr.w	r2, [r3, #-200]
 8005d5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d62:	3308      	adds	r3, #8
 8005d64:	404a      	eors	r2, r1
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005d6c:	443b      	add	r3, r7
 8005d6e:	f843 2cc8 	str.w	r2, [r3, #-200]
    for (i = 0; i < 4; ++i) {
 8005d72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d76:	3301      	adds	r3, #1
 8005d78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005d7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d9db      	bls.n	8005d3c <mbedtls_camellia_setkey_enc+0x2d4>
    }

    camellia_feistel(KC + 8, SIGMA[2], KC + 10);
 8005d84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005d88:	3320      	adds	r3, #32
 8005d8a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005d8e:	3228      	adds	r2, #40	; 0x28
 8005d90:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8005d94:	3110      	adds	r1, #16
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fdc2 	bl	8005920 <camellia_feistel>
    camellia_feistel(KC + 10, SIGMA[3], KC + 8);
 8005d9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005da0:	3328      	adds	r3, #40	; 0x28
 8005da2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005da6:	3220      	adds	r2, #32
 8005da8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8005dac:	3118      	adds	r1, #24
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff fdb6 	bl	8005920 <camellia_feistel>

    if (keybits > 128) {
 8005db4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005db8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b80      	cmp	r3, #128	; 0x80
 8005dc0:	d940      	bls.n	8005e44 <mbedtls_camellia_setkey_enc+0x3dc>
        /* Generate KB */
        for (i = 0; i < 4; ++i) {
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005dc8:	e020      	b.n	8005e0c <mbedtls_camellia_setkey_enc+0x3a4>
            KC[12 + i] = KC[4 + i] ^ KC[8 + i];
 8005dca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005dce:	3304      	adds	r3, #4
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005dd6:	443b      	add	r3, r7
 8005dd8:	f853 1cc8 	ldr.w	r1, [r3, #-200]
 8005ddc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005de0:	3308      	adds	r3, #8
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005de8:	443b      	add	r3, r7
 8005dea:	f853 2cc8 	ldr.w	r2, [r3, #-200]
 8005dee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005df2:	330c      	adds	r3, #12
 8005df4:	404a      	eors	r2, r1
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005dfc:	443b      	add	r3, r7
 8005dfe:	f843 2cc8 	str.w	r2, [r3, #-200]
        for (i = 0; i < 4; ++i) {
 8005e02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005e06:	3301      	adds	r3, #1
 8005e08:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005e0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d9da      	bls.n	8005dca <mbedtls_camellia_setkey_enc+0x362>
        }

        camellia_feistel(KC + 12, SIGMA[4], KC + 14);
 8005e14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005e18:	3330      	adds	r3, #48	; 0x30
 8005e1a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005e1e:	3238      	adds	r2, #56	; 0x38
 8005e20:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8005e24:	3120      	adds	r1, #32
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fd7a 	bl	8005920 <camellia_feistel>
        camellia_feistel(KC + 14, SIGMA[5], KC + 12);
 8005e2c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005e30:	3338      	adds	r3, #56	; 0x38
 8005e32:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005e36:	3230      	adds	r2, #48	; 0x30
 8005e38:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8005e3c:	3128      	adds	r1, #40	; 0x28
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff fd6e 	bl	8005920 <camellia_feistel>
    /*
     * Generating subkeys
     */

    /* Manipulating KL */
    SHIFT_AND_PLACE(idx, 0);
 8005e44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005e46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e4a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005e52:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e56:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e5a:	605a      	str	r2, [r3, #4]
 8005e5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e66:	609a      	str	r2, [r3, #8]
 8005e68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005e6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e6e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e72:	60da      	str	r2, [r3, #12]
 8005e74:	2301      	movs	r3, #1
 8005e76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005e7a:	e0aa      	b.n	8005fd2 <mbedtls_camellia_setkey_enc+0x56a>
 8005e7c:	0801e954 	.word	0x0801e954
 8005e80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005e84:	3b01      	subs	r3, #1
 8005e86:	49de      	ldr	r1, [pc, #888]	; (8006200 <mbedtls_camellia_setkey_enc+0x798>)
 8005e88:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005e8c:	0112      	lsls	r2, r2, #4
 8005e8e:	440a      	add	r2, r1
 8005e90:	4413      	add	r3, r2
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 8097 	beq.w	8005fc8 <mbedtls_camellia_setkey_enc+0x560>
 8005e9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e9e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ea2:	6819      	ldr	r1, [r3, #0]
 8005ea4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	1a9b      	subs	r3, r3, r2
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	4099      	lsls	r1, r3
 8005eb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005eb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ebc:	6858      	ldr	r0, [r3, #4]
 8005ebe:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	1a9b      	subs	r3, r3, r2
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	f1c3 0320 	rsb	r3, r3, #32
 8005ed0:	fa20 f203 	lsr.w	r2, r0, r3
 8005ed4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	f107 0020 	add.w	r0, r7, #32
 8005ede:	4403      	add	r3, r0
 8005ee0:	404a      	eors	r2, r1
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ee8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005eec:	6859      	ldr	r1, [r3, #4]
 8005eee:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	f003 031f 	and.w	r3, r3, #31
 8005efc:	4099      	lsls	r1, r3
 8005efe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f02:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005f06:	6898      	ldr	r0, [r3, #8]
 8005f08:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	1a9b      	subs	r3, r3, r2
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	f1c3 0320 	rsb	r3, r3, #32
 8005f1a:	fa20 f203 	lsr.w	r2, r0, r3
 8005f1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	3304      	adds	r3, #4
 8005f26:	f107 0020 	add.w	r0, r7, #32
 8005f2a:	4403      	add	r3, r0
 8005f2c:	404a      	eors	r2, r1
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005f38:	6899      	ldr	r1, [r3, #8]
 8005f3a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005f3e:	4613      	mov	r3, r2
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	1a9b      	subs	r3, r3, r2
 8005f44:	f003 031f 	and.w	r3, r3, #31
 8005f48:	4099      	lsls	r1, r3
 8005f4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005f52:	68d8      	ldr	r0, [r3, #12]
 8005f54:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005f58:	4613      	mov	r3, r2
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	f1c3 0320 	rsb	r3, r3, #32
 8005f66:	fa20 f203 	lsr.w	r2, r0, r3
 8005f6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	3308      	adds	r3, #8
 8005f72:	f107 0020 	add.w	r0, r7, #32
 8005f76:	4403      	add	r3, r0
 8005f78:	404a      	eors	r2, r1
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005f84:	68d9      	ldr	r1, [r3, #12]
 8005f86:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	f003 031f 	and.w	r3, r3, #31
 8005f94:	4099      	lsls	r1, r3
 8005f96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f9a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	1a9b      	subs	r3, r3, r2
 8005faa:	f003 031f 	and.w	r3, r3, #31
 8005fae:	f1c3 0320 	rsb	r3, r3, #32
 8005fb2:	fa20 f203 	lsr.w	r2, r0, r3
 8005fb6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	f107 0020 	add.w	r0, r7, #32
 8005fc2:	4403      	add	r3, r0
 8005fc4:	404a      	eors	r2, r1
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fcc:	3301      	adds	r3, #1
 8005fce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005fd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	f67f af52 	bls.w	8005e80 <mbedtls_camellia_setkey_enc+0x418>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005fe2:	e02e      	b.n	8006042 <mbedtls_camellia_setkey_enc+0x5da>
 8005fe4:	4987      	ldr	r1, [pc, #540]	; (8006204 <mbedtls_camellia_setkey_enc+0x79c>)
 8005fe6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	18ca      	adds	r2, r1, r3
 8005ff4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8005ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006002:	d019      	beq.n	8006038 <mbedtls_camellia_setkey_enc+0x5d0>
 8006004:	497f      	ldr	r1, [pc, #508]	; (8006204 <mbedtls_camellia_setkey_enc+0x79c>)
 8006006:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	18ca      	adds	r2, r1, r3
 8006014:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006018:	4413      	add	r3, r2
 800601a:	f993 3000 	ldrsb.w	r3, [r3]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006024:	4413      	add	r3, r2
 8006026:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800602a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800602e:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8006032:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800603c:	3301      	adds	r3, #1
 800603e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006042:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006046:	2b13      	cmp	r3, #19
 8006048:	d9cc      	bls.n	8005fe4 <mbedtls_camellia_setkey_enc+0x57c>

    /* Manipulating KR */
    if (keybits > 128) {
 800604a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800604e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b80      	cmp	r3, #128	; 0x80
 8006056:	f240 810c 	bls.w	8006272 <mbedtls_camellia_setkey_enc+0x80a>
        SHIFT_AND_PLACE(idx, 1);
 800605a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800605e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006062:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800606c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006070:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006074:	605a      	str	r2, [r3, #4]
 8006076:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800607a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800607e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006082:	609a      	str	r2, [r3, #8]
 8006084:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006088:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800608c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006090:	60da      	str	r2, [r3, #12]
 8006092:	2301      	movs	r3, #1
 8006094:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006098:	e0a9      	b.n	80061ee <mbedtls_camellia_setkey_enc+0x786>
 800609a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800609e:	3b01      	subs	r3, #1
 80060a0:	4957      	ldr	r1, [pc, #348]	; (8006200 <mbedtls_camellia_setkey_enc+0x798>)
 80060a2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80060a6:	0112      	lsls	r2, r2, #4
 80060a8:	440a      	add	r2, r1
 80060aa:	4413      	add	r3, r2
 80060ac:	3304      	adds	r3, #4
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8097 	beq.w	80061e4 <mbedtls_camellia_setkey_enc+0x77c>
 80060b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060ba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80060be:	6819      	ldr	r1, [r3, #0]
 80060c0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80060c4:	4613      	mov	r3, r2
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	4099      	lsls	r1, r3
 80060d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80060d8:	6858      	ldr	r0, [r3, #4]
 80060da:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80060de:	4613      	mov	r3, r2
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	f003 031f 	and.w	r3, r3, #31
 80060e8:	f1c3 0320 	rsb	r3, r3, #32
 80060ec:	fa20 f203 	lsr.w	r2, r0, r3
 80060f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	f107 0020 	add.w	r0, r7, #32
 80060fa:	4403      	add	r3, r0
 80060fc:	404a      	eors	r2, r1
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006104:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006108:	6859      	ldr	r1, [r3, #4]
 800610a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800610e:	4613      	mov	r3, r2
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	1a9b      	subs	r3, r3, r2
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	4099      	lsls	r1, r3
 800611a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800611e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006122:	6898      	ldr	r0, [r3, #8]
 8006124:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006128:	4613      	mov	r3, r2
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	f003 031f 	and.w	r3, r3, #31
 8006132:	f1c3 0320 	rsb	r3, r3, #32
 8006136:	fa20 f203 	lsr.w	r2, r0, r3
 800613a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	3304      	adds	r3, #4
 8006142:	f107 0020 	add.w	r0, r7, #32
 8006146:	4403      	add	r3, r0
 8006148:	404a      	eors	r2, r1
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006150:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006154:	6899      	ldr	r1, [r3, #8]
 8006156:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800615a:	4613      	mov	r3, r2
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	1a9b      	subs	r3, r3, r2
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	4099      	lsls	r1, r3
 8006166:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800616a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800616e:	68d8      	ldr	r0, [r3, #12]
 8006170:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006174:	4613      	mov	r3, r2
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	1a9b      	subs	r3, r3, r2
 800617a:	f003 031f 	and.w	r3, r3, #31
 800617e:	f1c3 0320 	rsb	r3, r3, #32
 8006182:	fa20 f203 	lsr.w	r2, r0, r3
 8006186:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	3308      	adds	r3, #8
 800618e:	f107 0020 	add.w	r0, r7, #32
 8006192:	4403      	add	r3, r0
 8006194:	404a      	eors	r2, r1
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800619c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80061a0:	68d9      	ldr	r1, [r3, #12]
 80061a2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80061a6:	4613      	mov	r3, r2
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	1a9b      	subs	r3, r3, r2
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	4099      	lsls	r1, r3
 80061b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80061c0:	4613      	mov	r3, r2
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	f003 031f 	and.w	r3, r3, #31
 80061ca:	f1c3 0320 	rsb	r3, r3, #32
 80061ce:	fa20 f203 	lsr.w	r2, r0, r3
 80061d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	330c      	adds	r3, #12
 80061da:	f107 0020 	add.w	r0, r7, #32
 80061de:	4403      	add	r3, r0
 80061e0:	404a      	eors	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80061e8:	3301      	adds	r3, #1
 80061ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80061ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	f67f af51 	bls.w	800609a <mbedtls_camellia_setkey_enc+0x632>
 80061f8:	2300      	movs	r3, #0
 80061fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80061fe:	e034      	b.n	800626a <mbedtls_camellia_setkey_enc+0x802>
 8006200:	0801ed84 	.word	0x0801ed84
 8006204:	0801eda4 	.word	0x0801eda4
 8006208:	49b2      	ldr	r1, [pc, #712]	; (80064d4 <mbedtls_camellia_setkey_enc+0xa6c>)
 800620a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	18ca      	adds	r2, r1, r3
 8006218:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800621c:	4413      	add	r3, r2
 800621e:	3314      	adds	r3, #20
 8006220:	f993 3000 	ldrsb.w	r3, [r3]
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d01a      	beq.n	8006260 <mbedtls_camellia_setkey_enc+0x7f8>
 800622a:	49aa      	ldr	r1, [pc, #680]	; (80064d4 <mbedtls_camellia_setkey_enc+0xa6c>)
 800622c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	18ca      	adds	r2, r1, r3
 800623a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800623e:	4413      	add	r3, r2
 8006240:	3314      	adds	r3, #20
 8006242:	f993 3000 	ldrsb.w	r3, [r3]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800624c:	4413      	add	r3, r2
 800624e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006252:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006256:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800625a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006264:	3301      	adds	r3, #1
 8006266:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800626a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800626e:	2b13      	cmp	r3, #19
 8006270:	d9ca      	bls.n	8006208 <mbedtls_camellia_setkey_enc+0x7a0>
    }

    /* Manipulating KA */
    SHIFT_AND_PLACE(idx, 2);
 8006272:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006276:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800627a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006284:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006288:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800628c:	605a      	str	r2, [r3, #4]
 800628e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006292:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006296:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800629a:	609a      	str	r2, [r3, #8]
 800629c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80062a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80062a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80062a8:	60da      	str	r2, [r3, #12]
 80062aa:	2301      	movs	r3, #1
 80062ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80062b0:	e0a9      	b.n	8006406 <mbedtls_camellia_setkey_enc+0x99e>
 80062b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062b6:	3b01      	subs	r3, #1
 80062b8:	4987      	ldr	r1, [pc, #540]	; (80064d8 <mbedtls_camellia_setkey_enc+0xa70>)
 80062ba:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80062be:	0112      	lsls	r2, r2, #4
 80062c0:	440a      	add	r2, r1
 80062c2:	4413      	add	r3, r2
 80062c4:	3308      	adds	r3, #8
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8097 	beq.w	80063fc <mbedtls_camellia_setkey_enc+0x994>
 80062ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80062d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80062d6:	6819      	ldr	r1, [r3, #0]
 80062d8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80062dc:	4613      	mov	r3, r2
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	f003 031f 	and.w	r3, r3, #31
 80062e6:	4099      	lsls	r1, r3
 80062e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80062ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80062f0:	6858      	ldr	r0, [r3, #4]
 80062f2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80062f6:	4613      	mov	r3, r2
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	1a9b      	subs	r3, r3, r2
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	f1c3 0320 	rsb	r3, r3, #32
 8006304:	fa20 f203 	lsr.w	r2, r0, r3
 8006308:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	f107 0020 	add.w	r0, r7, #32
 8006312:	4403      	add	r3, r0
 8006314:	404a      	eors	r2, r1
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800631c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006320:	6859      	ldr	r1, [r3, #4]
 8006322:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006326:	4613      	mov	r3, r2
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	f003 031f 	and.w	r3, r3, #31
 8006330:	4099      	lsls	r1, r3
 8006332:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006336:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800633a:	6898      	ldr	r0, [r3, #8]
 800633c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006340:	4613      	mov	r3, r2
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	f003 031f 	and.w	r3, r3, #31
 800634a:	f1c3 0320 	rsb	r3, r3, #32
 800634e:	fa20 f203 	lsr.w	r2, r0, r3
 8006352:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	3304      	adds	r3, #4
 800635a:	f107 0020 	add.w	r0, r7, #32
 800635e:	4403      	add	r3, r0
 8006360:	404a      	eors	r2, r1
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006368:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800636c:	6899      	ldr	r1, [r3, #8]
 800636e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006372:	4613      	mov	r3, r2
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	4099      	lsls	r1, r3
 800637e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006382:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006386:	68d8      	ldr	r0, [r3, #12]
 8006388:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800638c:	4613      	mov	r3, r2
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	f003 031f 	and.w	r3, r3, #31
 8006396:	f1c3 0320 	rsb	r3, r3, #32
 800639a:	fa20 f203 	lsr.w	r2, r0, r3
 800639e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	3308      	adds	r3, #8
 80063a6:	f107 0020 	add.w	r0, r7, #32
 80063aa:	4403      	add	r3, r0
 80063ac:	404a      	eors	r2, r1
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80063b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063b8:	68d9      	ldr	r1, [r3, #12]
 80063ba:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80063be:	4613      	mov	r3, r2
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	4099      	lsls	r1, r3
 80063ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80063ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80063d8:	4613      	mov	r3, r2
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	1a9b      	subs	r3, r3, r2
 80063de:	f003 031f 	and.w	r3, r3, #31
 80063e2:	f1c3 0320 	rsb	r3, r3, #32
 80063e6:	fa20 f203 	lsr.w	r2, r0, r3
 80063ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	330c      	adds	r3, #12
 80063f2:	f107 0020 	add.w	r0, r7, #32
 80063f6:	4403      	add	r3, r0
 80063f8:	404a      	eors	r2, r1
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006400:	3301      	adds	r3, #1
 8006402:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006406:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800640a:	2b04      	cmp	r3, #4
 800640c:	f67f af51 	bls.w	80062b2 <mbedtls_camellia_setkey_enc+0x84a>
 8006410:	2300      	movs	r3, #0
 8006412:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006416:	e030      	b.n	800647a <mbedtls_camellia_setkey_enc+0xa12>
 8006418:	492e      	ldr	r1, [pc, #184]	; (80064d4 <mbedtls_camellia_setkey_enc+0xa6c>)
 800641a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	18ca      	adds	r2, r1, r3
 8006428:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800642c:	4413      	add	r3, r2
 800642e:	3328      	adds	r3, #40	; 0x28
 8006430:	f993 3000 	ldrsb.w	r3, [r3]
 8006434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006438:	d01a      	beq.n	8006470 <mbedtls_camellia_setkey_enc+0xa08>
 800643a:	4926      	ldr	r1, [pc, #152]	; (80064d4 <mbedtls_camellia_setkey_enc+0xa6c>)
 800643c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	18ca      	adds	r2, r1, r3
 800644a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800644e:	4413      	add	r3, r2
 8006450:	3328      	adds	r3, #40	; 0x28
 8006452:	f993 3000 	ldrsb.w	r3, [r3]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800645c:	4413      	add	r3, r2
 800645e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006462:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006466:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800646a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006474:	3301      	adds	r3, #1
 8006476:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800647a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800647e:	2b13      	cmp	r3, #19
 8006480:	d9ca      	bls.n	8006418 <mbedtls_camellia_setkey_enc+0x9b0>

    /* Manipulating KB */
    if (keybits > 128) {
 8006482:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006486:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b80      	cmp	r3, #128	; 0x80
 800648e:	f240 810d 	bls.w	80066ac <mbedtls_camellia_setkey_enc+0xc44>
        SHIFT_AND_PLACE(idx, 3);
 8006492:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006496:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800649a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80064a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80064ba:	609a      	str	r2, [r3, #8]
 80064bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80064c8:	60da      	str	r2, [r3, #12]
 80064ca:	2301      	movs	r3, #1
 80064cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80064d0:	e0ae      	b.n	8006630 <mbedtls_camellia_setkey_enc+0xbc8>
 80064d2:	bf00      	nop
 80064d4:	0801eda4 	.word	0x0801eda4
 80064d8:	0801ed84 	.word	0x0801ed84
 80064dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064e0:	3b01      	subs	r3, #1
 80064e2:	4995      	ldr	r1, [pc, #596]	; (8006738 <mbedtls_camellia_setkey_enc+0xcd0>)
 80064e4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80064e8:	0112      	lsls	r2, r2, #4
 80064ea:	440a      	add	r2, r1
 80064ec:	4413      	add	r3, r2
 80064ee:	330c      	adds	r3, #12
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 8097 	beq.w	8006626 <mbedtls_camellia_setkey_enc+0xbbe>
 80064f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006500:	6819      	ldr	r1, [r3, #0]
 8006502:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006506:	4613      	mov	r3, r2
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	1a9b      	subs	r3, r3, r2
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	4099      	lsls	r1, r3
 8006512:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006516:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800651a:	6858      	ldr	r0, [r3, #4]
 800651c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006520:	4613      	mov	r3, r2
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	f1c3 0320 	rsb	r3, r3, #32
 800652e:	fa20 f203 	lsr.w	r2, r0, r3
 8006532:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	f107 0020 	add.w	r0, r7, #32
 800653c:	4403      	add	r3, r0
 800653e:	404a      	eors	r2, r1
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006546:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800654a:	6859      	ldr	r1, [r3, #4]
 800654c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006550:	4613      	mov	r3, r2
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	f003 031f 	and.w	r3, r3, #31
 800655a:	4099      	lsls	r1, r3
 800655c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006560:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006564:	6898      	ldr	r0, [r3, #8]
 8006566:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800656a:	4613      	mov	r3, r2
 800656c:	011b      	lsls	r3, r3, #4
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	f003 031f 	and.w	r3, r3, #31
 8006574:	f1c3 0320 	rsb	r3, r3, #32
 8006578:	fa20 f203 	lsr.w	r2, r0, r3
 800657c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	3304      	adds	r3, #4
 8006584:	f107 0020 	add.w	r0, r7, #32
 8006588:	4403      	add	r3, r0
 800658a:	404a      	eors	r2, r1
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006592:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006596:	6899      	ldr	r1, [r3, #8]
 8006598:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800659c:	4613      	mov	r3, r2
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	1a9b      	subs	r3, r3, r2
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	4099      	lsls	r1, r3
 80065a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80065b0:	68d8      	ldr	r0, [r3, #12]
 80065b2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80065b6:	4613      	mov	r3, r2
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	1a9b      	subs	r3, r3, r2
 80065bc:	f003 031f 	and.w	r3, r3, #31
 80065c0:	f1c3 0320 	rsb	r3, r3, #32
 80065c4:	fa20 f203 	lsr.w	r2, r0, r3
 80065c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	3308      	adds	r3, #8
 80065d0:	f107 0020 	add.w	r0, r7, #32
 80065d4:	4403      	add	r3, r0
 80065d6:	404a      	eors	r2, r1
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80065e2:	68d9      	ldr	r1, [r3, #12]
 80065e4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80065e8:	4613      	mov	r3, r2
 80065ea:	011b      	lsls	r3, r3, #4
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	f003 031f 	and.w	r3, r3, #31
 80065f2:	4099      	lsls	r1, r3
 80065f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006602:	4613      	mov	r3, r2
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	f003 031f 	and.w	r3, r3, #31
 800660c:	f1c3 0320 	rsb	r3, r3, #32
 8006610:	fa20 f203 	lsr.w	r2, r0, r3
 8006614:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	330c      	adds	r3, #12
 800661c:	f107 0020 	add.w	r0, r7, #32
 8006620:	4403      	add	r3, r0
 8006622:	404a      	eors	r2, r1
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800662a:	3301      	adds	r3, #1
 800662c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006630:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006634:	2b04      	cmp	r3, #4
 8006636:	f67f af51 	bls.w	80064dc <mbedtls_camellia_setkey_enc+0xa74>
 800663a:	2300      	movs	r3, #0
 800663c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006640:	e030      	b.n	80066a4 <mbedtls_camellia_setkey_enc+0xc3c>
 8006642:	493e      	ldr	r1, [pc, #248]	; (800673c <mbedtls_camellia_setkey_enc+0xcd4>)
 8006644:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	18ca      	adds	r2, r1, r3
 8006652:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006656:	4413      	add	r3, r2
 8006658:	333c      	adds	r3, #60	; 0x3c
 800665a:	f993 3000 	ldrsb.w	r3, [r3]
 800665e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006662:	d01a      	beq.n	800669a <mbedtls_camellia_setkey_enc+0xc32>
 8006664:	4935      	ldr	r1, [pc, #212]	; (800673c <mbedtls_camellia_setkey_enc+0xcd4>)
 8006666:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	011b      	lsls	r3, r3, #4
 8006672:	18ca      	adds	r2, r1, r3
 8006674:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006678:	4413      	add	r3, r2
 800667a:	333c      	adds	r3, #60	; 0x3c
 800667c:	f993 3000 	ldrsb.w	r3, [r3]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006686:	4413      	add	r3, r2
 8006688:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800668c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006690:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8006694:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800669e:	3301      	adds	r3, #1
 80066a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80066a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066a8:	2b13      	cmp	r3, #19
 80066aa:	d9ca      	bls.n	8006642 <mbedtls_camellia_setkey_enc+0xbda>
    }

    /* Do transpositions */
    for (i = 0; i < 20; i++) {
 80066ac:	2300      	movs	r3, #0
 80066ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80066b2:	e036      	b.n	8006722 <mbedtls_camellia_setkey_enc+0xcba>
        if (transposes[idx][i] != -1) {
 80066b4:	4922      	ldr	r1, [pc, #136]	; (8006740 <mbedtls_camellia_setkey_enc+0xcd8>)
 80066b6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	18ca      	adds	r2, r1, r3
 80066c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066c8:	4413      	add	r3, r2
 80066ca:	f993 3000 	ldrsb.w	r3, [r3]
 80066ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d2:	d021      	beq.n	8006718 <mbedtls_camellia_setkey_enc+0xcb0>
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 80066d4:	491a      	ldr	r1, [pc, #104]	; (8006740 <mbedtls_camellia_setkey_enc+0xcd8>)
 80066d6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	18ca      	adds	r2, r1, r3
 80066e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066e8:	4413      	add	r3, r2
 80066ea:	f993 3000 	ldrsb.w	r3, [r3]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80066f4:	18d1      	adds	r1, r2, r3
 80066f6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80066fa:	4613      	mov	r3, r2
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	461a      	mov	r2, r3
 8006704:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006708:	4413      	add	r3, r2
 800670a:	3320      	adds	r3, #32
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006712:	4413      	add	r3, r2
 8006714:	680a      	ldr	r2, [r1, #0]
 8006716:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 20; i++) {
 8006718:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800671c:	3301      	adds	r3, #1
 800671e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006722:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006726:	2b13      	cmp	r3, #19
 8006728:	d9c4      	bls.n	80066b4 <mbedtls_camellia_setkey_enc+0xc4c>
        }
    }

    return 0;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	0801ed84 	.word	0x0801ed84
 800673c:	0801eda4 	.word	0x0801eda4
 8006740:	0801ee44 	.word	0x0801ee44

08006744 <mbedtls_camellia_setkey_dec>:
 */
#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
int mbedtls_camellia_setkey_dec(mbedtls_camellia_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b0ce      	sub	sp, #312	; 0x138
 8006748:	af00      	add	r7, sp, #0
 800674a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800674e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006752:	6018      	str	r0, [r3, #0]
 8006754:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800675c:	6019      	str	r1, [r3, #0]
 800675e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006762:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006766:	601a      	str	r2, [r3, #0]
    size_t i;
    mbedtls_camellia_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_camellia_init(&cty);
 8006768:	f107 0310 	add.w	r3, r7, #16
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff f95b 	bl	8005a28 <mbedtls_camellia_init>

    /* Also checks keybits */
    if ((ret = mbedtls_camellia_setkey_enc(&cty, key, keybits)) != 0) {
 8006772:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006776:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 800677a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800677e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006782:	f107 0010 	add.w	r0, r7, #16
 8006786:	6812      	ldr	r2, [r2, #0]
 8006788:	6819      	ldr	r1, [r3, #0]
 800678a:	f7ff f96d 	bl	8005a68 <mbedtls_camellia_setkey_enc>
 800678e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8006792:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006796:	2b00      	cmp	r3, #0
 8006798:	f040 80c3 	bne.w	8006922 <mbedtls_camellia_setkey_dec+0x1de>
        goto exit;
    }

    ctx->nr = cty.nr;
 800679c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067a0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	601a      	str	r2, [r3, #0]
    idx = (ctx->nr == 4);
 80067b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b04      	cmp	r3, #4
 80067c0:	bf0c      	ite	eq
 80067c2:	2301      	moveq	r3, #1
 80067c4:	2300      	movne	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    RK = ctx->rk;
 80067cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3304      	adds	r3, #4
 80067d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    SK = cty.rk + 24 * 2 + 8 * idx * 2;
 80067dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	3318      	adds	r3, #24
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	f107 0210 	add.w	r2, r7, #16
 80067ea:	3204      	adds	r2, #4
 80067ec:	4413      	add	r3, r2
 80067ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    *RK++ = *SK++;
 80067f2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80067f6:	1d13      	adds	r3, r2, #4
 80067f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80067fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006800:	1d19      	adds	r1, r3, #4
 8006802:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800680a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800680e:	1d13      	adds	r3, r2, #4
 8006810:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006814:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006818:	1d19      	adds	r1, r3, #4
 800681a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8006822:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006826:	1d13      	adds	r3, r2, #4
 8006828:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800682c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006830:	1d19      	adds	r1, r3, #4
 8006832:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8006836:	6812      	ldr	r2, [r2, #0]
 8006838:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800683a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800683e:	1d13      	adds	r3, r2, #4
 8006840:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006844:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006848:	1d19      	adds	r1, r3, #4
 800684a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800684e:	6812      	ldr	r2, [r2, #0]
 8006850:	601a      	str	r2, [r3, #0]

    for (i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4) {
 8006852:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	3316      	adds	r3, #22
 800685a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800685e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006862:	3b18      	subs	r3, #24
 8006864:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006868:	e021      	b.n	80068ae <mbedtls_camellia_setkey_dec+0x16a>
        *RK++ = *SK++;
 800686a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800686e:	1d13      	adds	r3, r2, #4
 8006870:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006874:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006878:	1d19      	adds	r1, r3, #4
 800687a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	601a      	str	r2, [r3, #0]
        *RK++ = *SK++;
 8006882:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006886:	1d13      	adds	r3, r2, #4
 8006888:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800688c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006890:	1d19      	adds	r1, r3, #4
 8006892:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8006896:	6812      	ldr	r2, [r2, #0]
 8006898:	601a      	str	r2, [r3, #0]
    for (i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4) {
 800689a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800689e:	3b01      	subs	r3, #1
 80068a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80068a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a8:	3b10      	subs	r3, #16
 80068aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80068ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1d9      	bne.n	800686a <mbedtls_camellia_setkey_dec+0x126>
    }

    SK -= 2;
 80068b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ba:	3b08      	subs	r3, #8
 80068bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    *RK++ = *SK++;
 80068c0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80068c4:	1d13      	adds	r3, r2, #4
 80068c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80068ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80068ce:	1d19      	adds	r1, r3, #4
 80068d0:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80068d8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80068dc:	1d13      	adds	r3, r2, #4
 80068de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80068e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80068e6:	1d19      	adds	r1, r3, #4
 80068e8:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80068ec:	6812      	ldr	r2, [r2, #0]
 80068ee:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80068f0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80068f4:	1d13      	adds	r3, r2, #4
 80068f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80068fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80068fe:	1d19      	adds	r1, r3, #4
 8006900:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8006904:	6812      	ldr	r2, [r2, #0]
 8006906:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8006908:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800690c:	1d13      	adds	r3, r2, #4
 800690e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006912:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006916:	1d19      	adds	r1, r3, #4
 8006918:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800691c:	6812      	ldr	r2, [r2, #0]
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	e000      	b.n	8006924 <mbedtls_camellia_setkey_dec+0x1e0>
        goto exit;
 8006922:	bf00      	nop

exit:
    mbedtls_camellia_free(&cty);
 8006924:	f107 0310 	add.w	r3, r7, #16
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff f88b 	bl	8005a44 <mbedtls_camellia_free>

    return ret;
 800692e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
}
 8006932:	4618      	mov	r0, r3
 8006934:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <mbedtls_camellia_crypt_ecb>:
 */
int mbedtls_camellia_crypt_ecb(mbedtls_camellia_context *ctx,
                               int mode,
                               const unsigned char input[16],
                               unsigned char output[16])
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b09a      	sub	sp, #104	; 0x68
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
    int NR;
    uint32_t *RK, X[4];
    if (mode != MBEDTLS_CAMELLIA_ENCRYPT && mode != MBEDTLS_CAMELLIA_DECRYPT) {
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d005      	beq.n	800695c <mbedtls_camellia_crypt_ecb+0x20>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <mbedtls_camellia_crypt_ecb+0x20>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8006956:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800695a:	e104      	b.n	8006b66 <mbedtls_camellia_crypt_ecb+0x22a>
    }

    ((void) mode);

    NR = ctx->nr;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	667b      	str	r3, [r7, #100]	; 0x64
    RK = ctx->rk;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3304      	adds	r3, #4
 8006966:	663b      	str	r3, [r7, #96]	; 0x60
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	653b      	str	r3, [r7, #80]	; 0x50
 800696c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800696e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006970:	61fb      	str	r3, [r7, #28]
    return r;
 8006972:	69fb      	ldr	r3, [r7, #28]

    X[0] = MBEDTLS_GET_UINT32_BE(input,  0);
 8006974:	ba1b      	rev	r3, r3
 8006976:	633b      	str	r3, [r7, #48]	; 0x30
    X[1] = MBEDTLS_GET_UINT32_BE(input,  4);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	657b      	str	r3, [r7, #84]	; 0x54
 800697e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006980:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006982:	61bb      	str	r3, [r7, #24]
    return r;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	ba1b      	rev	r3, r3
 8006988:	637b      	str	r3, [r7, #52]	; 0x34
    X[2] = MBEDTLS_GET_UINT32_BE(input,  8);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3308      	adds	r3, #8
 800698e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006992:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006994:	617b      	str	r3, [r7, #20]
    return r;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	ba1b      	rev	r3, r3
 800699a:	63bb      	str	r3, [r7, #56]	; 0x38
    X[3] = MBEDTLS_GET_UINT32_BE(input, 12);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	330c      	adds	r3, #12
 80069a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069a4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80069a6:	613b      	str	r3, [r7, #16]
    return r;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	ba1b      	rev	r3, r3
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c

    X[0] ^= *RK++;
 80069ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069b0:	1d1a      	adds	r2, r3, #4
 80069b2:	663a      	str	r2, [r7, #96]	; 0x60
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	4053      	eors	r3, r2
 80069ba:	633b      	str	r3, [r7, #48]	; 0x30
    X[1] ^= *RK++;
 80069bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069be:	1d1a      	adds	r2, r3, #4
 80069c0:	663a      	str	r2, [r7, #96]	; 0x60
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c6:	4053      	eors	r3, r2
 80069c8:	637b      	str	r3, [r7, #52]	; 0x34
    X[2] ^= *RK++;
 80069ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069cc:	1d1a      	adds	r2, r3, #4
 80069ce:	663a      	str	r2, [r7, #96]	; 0x60
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	4053      	eors	r3, r2
 80069d6:	63bb      	str	r3, [r7, #56]	; 0x38
    X[3] ^= *RK++;
 80069d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069da:	1d1a      	adds	r2, r3, #4
 80069dc:	663a      	str	r2, [r7, #96]	; 0x60
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e2:	4053      	eors	r3, r2
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (NR) {
 80069e6:	e075      	b.n	8006ad4 <mbedtls_camellia_crypt_ecb+0x198>
        --NR;
 80069e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ea:	3b01      	subs	r3, #1
 80069ec:	667b      	str	r3, [r7, #100]	; 0x64
        camellia_feistel(X, RK, X + 2);
 80069ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069f2:	3308      	adds	r3, #8
 80069f4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80069f8:	461a      	mov	r2, r3
 80069fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80069fc:	f7fe ff90 	bl	8005920 <camellia_feistel>
        RK += 2;
 8006a00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a02:	3308      	adds	r3, #8
 8006a04:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X + 2, RK, X);
 8006a06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006a10:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe ff84 	bl	8005920 <camellia_feistel>
        RK += 2;
 8006a18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X, RK, X + 2);
 8006a1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a22:	3308      	adds	r3, #8
 8006a24:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006a2c:	f7fe ff78 	bl	8005920 <camellia_feistel>
        RK += 2;
 8006a30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a32:	3308      	adds	r3, #8
 8006a34:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X + 2, RK, X);
 8006a36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006a40:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe ff6c 	bl	8005920 <camellia_feistel>
        RK += 2;
 8006a48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X, RK, X + 2);
 8006a4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a52:	3308      	adds	r3, #8
 8006a54:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006a5c:	f7fe ff60 	bl	8005920 <camellia_feistel>
        RK += 2;
 8006a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a62:	3308      	adds	r3, #8
 8006a64:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X + 2, RK, X);
 8006a66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006a70:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe ff54 	bl	8005920 <camellia_feistel>
        RK += 2;
 8006a78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	663b      	str	r3, [r7, #96]	; 0x60

        if (NR) {
 8006a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d027      	beq.n	8006ad4 <mbedtls_camellia_crypt_ecb+0x198>
            FL(X[0], X[1], RK[0], RK[1]);
 8006a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	4053      	eors	r3, r2
 8006a94:	637b      	str	r3, [r7, #52]	; 0x34
 8006a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	4053      	eors	r3, r2
 8006aa4:	633b      	str	r3, [r7, #48]	; 0x30
            RK += 2;
 8006aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	663b      	str	r3, [r7, #96]	; 0x60
            FLInv(X[2], X[3], RK[0], RK[1]);
 8006aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	4053      	eors	r3, r2
 8006aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8006abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8006ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aca:	4053      	eors	r3, r2
 8006acc:	63fb      	str	r3, [r7, #60]	; 0x3c
            RK += 2;
 8006ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	663b      	str	r3, [r7, #96]	; 0x60
    while (NR) {
 8006ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d186      	bne.n	80069e8 <mbedtls_camellia_crypt_ecb+0xac>
        }
    }

    X[2] ^= *RK++;
 8006ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006adc:	1d1a      	adds	r2, r3, #4
 8006ade:	663a      	str	r2, [r7, #96]	; 0x60
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae4:	4053      	eors	r3, r2
 8006ae6:	63bb      	str	r3, [r7, #56]	; 0x38
    X[3] ^= *RK++;
 8006ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aea:	1d1a      	adds	r2, r3, #4
 8006aec:	663a      	str	r2, [r7, #96]	; 0x60
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af2:	4053      	eors	r3, r2
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
    X[0] ^= *RK++;
 8006af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006af8:	1d1a      	adds	r2, r3, #4
 8006afa:	663a      	str	r2, [r7, #96]	; 0x60
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	4053      	eors	r3, r2
 8006b02:	633b      	str	r3, [r7, #48]	; 0x30
    X[1] ^= *RK++;
 8006b04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b06:	1d1a      	adds	r2, r3, #4
 8006b08:	663a      	str	r2, [r7, #96]	; 0x60
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0e:	4053      	eors	r3, r2
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34

    MBEDTLS_PUT_UINT32_BE(X[2], output,  0);
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	ba1b      	rev	r3, r3
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006b1a:	623b      	str	r3, [r7, #32]
 8006b1c:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8006b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b20:	601a      	str	r2, [r3, #0]
}
 8006b22:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X[3], output,  4);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	1d1a      	adds	r2, r3, #4
 8006b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2a:	ba1b      	rev	r3, r3
 8006b2c:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 8006b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b34:	601a      	str	r2, [r3, #0]
}
 8006b36:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X[0], output,  8);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f103 0208 	add.w	r2, r3, #8
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	ba1b      	rev	r3, r3
 8006b42:	647a      	str	r2, [r7, #68]	; 0x44
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 8006b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b4a:	601a      	str	r2, [r3, #0]
}
 8006b4c:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X[1], output, 12);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	f103 020c 	add.w	r2, r3, #12
 8006b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b56:	ba1b      	rev	r3, r3
 8006b58:	643a      	str	r2, [r7, #64]	; 0x40
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    memcpy(p, &x, sizeof(x));
 8006b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b60:	601a      	str	r2, [r3, #0]
}
 8006b62:	bf00      	nop

    return 0;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3768      	adds	r7, #104	; 0x68
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <mbedtls_camellia_crypt_cbc>:
                               int mode,
                               size_t length,
                               unsigned char iv[16],
                               const unsigned char *input,
                               unsigned char *output)
{
 8006b6e:	b5b0      	push	{r4, r5, r7, lr}
 8006b70:	b0a0      	sub	sp, #128	; 0x80
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
 8006b7a:	603b      	str	r3, [r7, #0]
    unsigned char temp[16];
    if (mode != MBEDTLS_CAMELLIA_ENCRYPT && mode != MBEDTLS_CAMELLIA_DECRYPT) {
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d005      	beq.n	8006b8e <mbedtls_camellia_crypt_cbc+0x20>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <mbedtls_camellia_crypt_cbc+0x20>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8006b88:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006b8c:	e0e6      	b.n	8006d5c <mbedtls_camellia_crypt_cbc+0x1ee>
    }

    if (length % 16) {
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <mbedtls_camellia_crypt_cbc+0x30>
        return MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH;
 8006b98:	f06f 0325 	mvn.w	r3, #37	; 0x25
 8006b9c:	e0de      	b.n	8006d5c <mbedtls_camellia_crypt_cbc+0x1ee>
    }

    if (mode == MBEDTLS_CAMELLIA_DECRYPT) {
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f040 80d7 	bne.w	8006d54 <mbedtls_camellia_crypt_cbc+0x1e6>
        while (length > 0) {
 8006ba6:	e06e      	b.n	8006c86 <mbedtls_camellia_crypt_cbc+0x118>
            memcpy(temp, input, 16);
 8006ba8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006bb0:	6818      	ldr	r0, [r3, #0]
 8006bb2:	6859      	ldr	r1, [r3, #4]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_camellia_crypt_ecb(ctx, mode, input, output);
 8006bba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bbe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7ff feb9 	bl	800693c <mbedtls_camellia_crypt_ecb>
 8006bca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	677b      	str	r3, [r7, #116]	; 0x74
 8006bda:	2310      	movs	r3, #16
 8006bdc:	673b      	str	r3, [r7, #112]	; 0x70
    size_t i = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (; (i + 4) <= n; i += 4) {
 8006be2:	e01e      	b.n	8006c22 <mbedtls_camellia_crypt_cbc+0xb4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8006be4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be8:	4413      	add	r3, r2
 8006bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bee:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006bf0:	61bb      	str	r3, [r7, #24]
    return r;
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf8:	440b      	add	r3, r1
 8006bfa:	667b      	str	r3, [r7, #100]	; 0x64
 8006bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bfe:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006c00:	617b      	str	r3, [r7, #20]
    return r;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	4053      	eors	r3, r2
 8006c06:	663b      	str	r3, [r7, #96]	; 0x60
        mbedtls_put_unaligned_uint32(r + i, x);
 8006c08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0c:	4413      	add	r3, r2
 8006c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 8006c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c18:	601a      	str	r2, [r3, #0]
}
 8006c1a:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8006c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c1e:	3304      	adds	r3, #4
 8006c20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c24:	3304      	adds	r3, #4
 8006c26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d2db      	bcs.n	8006be4 <mbedtls_camellia_crypt_cbc+0x76>
    for (; i < n; i++) {
 8006c2c:	e010      	b.n	8006c50 <mbedtls_camellia_crypt_cbc+0xe2>
        r[i] = a[i] ^ b[i];
 8006c2e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c32:	4413      	add	r3, r2
 8006c34:	7819      	ldrb	r1, [r3, #0]
 8006c36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3a:	4413      	add	r3, r2
 8006c3c:	781a      	ldrb	r2, [r3, #0]
 8006c3e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8006c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c42:	4403      	add	r3, r0
 8006c44:	404a      	eors	r2, r1
 8006c46:	b2d2      	uxtb	r2, r2
 8006c48:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8006c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d8ea      	bhi.n	8006c2e <mbedtls_camellia_crypt_cbc+0xc0>
}
 8006c58:	bf00      	nop

            mbedtls_xor(output, output, iv, 16);

            memcpy(iv, temp, 16);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	461d      	mov	r5, r3
 8006c5e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c64:	6028      	str	r0, [r5, #0]
 8006c66:	6069      	str	r1, [r5, #4]
 8006c68:	60aa      	str	r2, [r5, #8]
 8006c6a:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8006c6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c70:	3310      	adds	r3, #16
 8006c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            output += 16;
 8006c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c7a:	3310      	adds	r3, #16
 8006c7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            length -= 16;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3b10      	subs	r3, #16
 8006c84:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d18d      	bne.n	8006ba8 <mbedtls_camellia_crypt_cbc+0x3a>
 8006c8c:	e065      	b.n	8006d5a <mbedtls_camellia_crypt_cbc+0x1ec>
 8006c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c92:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c98:	657b      	str	r3, [r7, #84]	; 0x54
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c9e:	2310      	movs	r3, #16
 8006ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t i = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	64bb      	str	r3, [r7, #72]	; 0x48
    for (; (i + 4) <= n; i += 4) {
 8006ca6:	e01e      	b.n	8006ce6 <mbedtls_camellia_crypt_cbc+0x178>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8006ca8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cac:	4413      	add	r3, r2
 8006cae:	647b      	str	r3, [r7, #68]	; 0x44
 8006cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cb2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8006cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cbc:	440b      	add	r3, r1
 8006cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8006cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006cc4:	623b      	str	r3, [r7, #32]
    return r;
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	4053      	eors	r3, r2
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        mbedtls_put_unaligned_uint32(r + i, x);
 8006ccc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cd0:	4413      	add	r3, r2
 8006cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	601a      	str	r2, [r3, #0]
}
 8006cde:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8006ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ce8:	3304      	adds	r3, #4
 8006cea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d2db      	bcs.n	8006ca8 <mbedtls_camellia_crypt_cbc+0x13a>
    for (; i < n; i++) {
 8006cf0:	e010      	b.n	8006d14 <mbedtls_camellia_crypt_cbc+0x1a6>
        r[i] = a[i] ^ b[i];
 8006cf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cf6:	4413      	add	r3, r2
 8006cf8:	7819      	ldrb	r1, [r3, #0]
 8006cfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cfe:	4413      	add	r3, r2
 8006d00:	781a      	ldrb	r2, [r3, #0]
 8006d02:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d06:	4403      	add	r3, r0
 8006d08:	404a      	eors	r2, r1
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8006d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d10:	3301      	adds	r3, #1
 8006d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d8ea      	bhi.n	8006cf2 <mbedtls_camellia_crypt_cbc+0x184>
}
 8006d1c:	bf00      	nop
        }
    } else {
        while (length > 0) {
            mbedtls_xor(output, input, iv, 16);

            mbedtls_camellia_crypt_ecb(ctx, mode, output, output);
 8006d1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f7ff fe07 	bl	800693c <mbedtls_camellia_crypt_ecb>
            memcpy(iv, output, 16);
 8006d2e:	2210      	movs	r2, #16
 8006d30:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006d34:	6838      	ldr	r0, [r7, #0]
 8006d36:	f016 fadf 	bl	801d2f8 <memcpy>

            input  += 16;
 8006d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d3e:	3310      	adds	r3, #16
 8006d40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            output += 16;
 8006d44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d48:	3310      	adds	r3, #16
 8006d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            length -= 16;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3b10      	subs	r3, #16
 8006d52:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d199      	bne.n	8006c8e <mbedtls_camellia_crypt_cbc+0x120>
        }
    }

    return 0;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3780      	adds	r7, #128	; 0x80
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bdb0      	pop	{r4, r5, r7, pc}

08006d64 <mbedtls_camellia_crypt_cfb128>:
                                  size_t length,
                                  size_t *iv_off,
                                  unsigned char iv[16],
                                  const unsigned char *input,
                                  unsigned char *output)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
    int c;
    size_t n;
    if (mode != MBEDTLS_CAMELLIA_ENCRYPT && mode != MBEDTLS_CAMELLIA_DECRYPT) {
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d005      	beq.n	8006d84 <mbedtls_camellia_crypt_cfb128+0x20>
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <mbedtls_camellia_crypt_cfb128+0x20>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8006d7e:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006d82:	e063      	b.n	8006e4c <mbedtls_camellia_crypt_cfb128+0xe8>
    }

    n = *iv_off;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	617b      	str	r3, [r7, #20]
    if (n >= 16) {
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b0f      	cmp	r3, #15
 8006d8e:	d902      	bls.n	8006d96 <mbedtls_camellia_crypt_cfb128+0x32>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8006d90:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006d94:	e05a      	b.n	8006e4c <mbedtls_camellia_crypt_cfb128+0xe8>
    }

    if (mode == MBEDTLS_CAMELLIA_DECRYPT) {
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d14e      	bne.n	8006e3a <mbedtls_camellia_crypt_cfb128+0xd6>
        while (length--) {
 8006d9c:	e026      	b.n	8006dec <mbedtls_camellia_crypt_cfb128+0x88>
            if (n == 0) {
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d105      	bne.n	8006db0 <mbedtls_camellia_crypt_cfb128+0x4c>
                mbedtls_camellia_crypt_ecb(ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv);
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	6a3a      	ldr	r2, [r7, #32]
 8006da8:	2101      	movs	r1, #1
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f7ff fdc6 	bl	800693c <mbedtls_camellia_crypt_ecb>
            }

            c = *input++;
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	627a      	str	r2, [r7, #36]	; 0x24
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	613b      	str	r3, [r7, #16]
            *output++ = (unsigned char) (c ^ iv[n]);
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	b25a      	sxtb	r2, r3
 8006dbe:	6a39      	ldr	r1, [r7, #32]
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	440b      	add	r3, r1
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	b25b      	sxtb	r3, r3
 8006dc8:	4053      	eors	r3, r2
 8006dca:	b259      	sxtb	r1, r3
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	62ba      	str	r2, [r7, #40]	; 0x28
 8006dd2:	b2ca      	uxtb	r2, r1
 8006dd4:	701a      	strb	r2, [r3, #0]
            iv[n] = (unsigned char) c;
 8006dd6:	6a3a      	ldr	r2, [r7, #32]
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	4413      	add	r3, r2
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]

            n = (n + 1) & 0x0F;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	3301      	adds	r3, #1
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	617b      	str	r3, [r7, #20]
        while (length--) {
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	1e5a      	subs	r2, r3, #1
 8006df0:	607a      	str	r2, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1d3      	bne.n	8006d9e <mbedtls_camellia_crypt_cfb128+0x3a>
 8006df6:	e025      	b.n	8006e44 <mbedtls_camellia_crypt_cfb128+0xe0>
        }
    } else {
        while (length--) {
            if (n == 0) {
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d105      	bne.n	8006e0a <mbedtls_camellia_crypt_cfb128+0xa6>
                mbedtls_camellia_crypt_ecb(ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv);
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	6a3a      	ldr	r2, [r7, #32]
 8006e02:	2101      	movs	r1, #1
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7ff fd99 	bl	800693c <mbedtls_camellia_crypt_ecb>
            }

            iv[n] = *output++ = (unsigned char) (iv[n] ^ *input++);
 8006e0a:	6a3a      	ldr	r2, [r7, #32]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	4413      	add	r3, r2
 8006e10:	7819      	ldrb	r1, [r3, #0]
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	627a      	str	r2, [r7, #36]	; 0x24
 8006e18:	781a      	ldrb	r2, [r3, #0]
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	1c58      	adds	r0, r3, #1
 8006e1e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006e20:	404a      	eors	r2, r1
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	6a39      	ldr	r1, [r7, #32]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	7013      	strb	r3, [r2, #0]

            n = (n + 1) & 0x0F;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	3301      	adds	r3, #1
 8006e34:	f003 030f 	and.w	r3, r3, #15
 8006e38:	617b      	str	r3, [r7, #20]
        while (length--) {
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	1e5a      	subs	r2, r3, #1
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1d9      	bne.n	8006df8 <mbedtls_camellia_crypt_cfb128+0x94>
        }
    }

    *iv_off = n;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	601a      	str	r2, [r3, #0]

    return 0;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <mbedtls_camellia_crypt_ctr>:
                               size_t *nc_off,
                               unsigned char nonce_counter[16],
                               unsigned char stream_block[16],
                               const unsigned char *input,
                               unsigned char *output)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	603b      	str	r3, [r7, #0]
    int c, i;
    size_t n;

    n = *nc_off;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	61bb      	str	r3, [r7, #24]
    if (n >= 16) {
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	2b0f      	cmp	r3, #15
 8006e6c:	d939      	bls.n	8006ee2 <mbedtls_camellia_crypt_ctr+0x8e>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8006e6e:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006e72:	e03f      	b.n	8006ef4 <mbedtls_camellia_crypt_ctr+0xa0>
    }

    while (length--) {
        if (n == 0) {
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d11b      	bne.n	8006eb2 <mbedtls_camellia_crypt_ctr+0x5e>
            mbedtls_camellia_crypt_ecb(ctx, MBEDTLS_CAMELLIA_ENCRYPT, nonce_counter,
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	2101      	movs	r1, #1
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f7ff fd5b 	bl	800693c <mbedtls_camellia_crypt_ecb>
                                       stream_block);

            for (i = 16; i > 0; i--) {
 8006e86:	2310      	movs	r3, #16
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	e00d      	b.n	8006ea8 <mbedtls_camellia_crypt_ctr+0x54>
                if (++nonce_counter[i - 1] != 0) {
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	4413      	add	r3, r2
 8006e94:	781a      	ldrb	r2, [r3, #0]
 8006e96:	3201      	adds	r2, #1
 8006e98:	b2d2      	uxtb	r2, r2
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d106      	bne.n	8006eb0 <mbedtls_camellia_crypt_ctr+0x5c>
            for (i = 16; i > 0; i--) {
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	61fb      	str	r3, [r7, #28]
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	dcee      	bgt.n	8006e8c <mbedtls_camellia_crypt_ctr+0x38>
 8006eae:	e000      	b.n	8006eb2 <mbedtls_camellia_crypt_ctr+0x5e>
                    break;
 8006eb0:	bf00      	nop
                }
            }
        }
        c = *input++;
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char) (c ^ stream_block[n]);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	b25a      	sxtb	r2, r3
 8006ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	440b      	add	r3, r1
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	b25b      	sxtb	r3, r3
 8006eca:	4053      	eors	r3, r2
 8006ecc:	b259      	sxtb	r1, r3
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ed4:	b2ca      	uxtb	r2, r1
 8006ed6:	701a      	strb	r2, [r3, #0]

        n = (n + 1) & 0x0F;
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	3301      	adds	r3, #1
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	61bb      	str	r3, [r7, #24]
    while (length--) {
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	1e5a      	subs	r2, r3, #1
 8006ee6:	60ba      	str	r2, [r7, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1c3      	bne.n	8006e74 <mbedtls_camellia_crypt_ctr+0x20>
    }

    *nc_off = n;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	601a      	str	r2, [r3, #0]

    return 0;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3720      	adds	r7, #32
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <mbedtls_cipher_info_get_block_size>:
 * \return       \c 1 if the cipher is a stream cipher.
 * \return       \c 0 if \p info is \c NULL.
 */
static inline size_t mbedtls_cipher_info_get_block_size(
    const mbedtls_cipher_info_t *info)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <mbedtls_cipher_info_get_block_size+0x12>
        return 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e004      	b.n	8006f18 <mbedtls_cipher_info_get_block_size+0x1c>
    }

    return (size_t) (info->MBEDTLS_PRIVATE(block_size));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	791b      	ldrb	r3, [r3, #4]
 8006f12:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006f16:	b2db      	uxtb	r3, r3
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <mbedtls_ccm_init>:

/*
 * Initialize context
 */
void mbedtls_ccm_init(mbedtls_ccm_context *ctx)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_ccm_context));
 8006f2c:	2280      	movs	r2, #128	; 0x80
 8006f2e:	2100      	movs	r1, #0
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f016 f943 	bl	801d1bc <memset>
}
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <mbedtls_ccm_setkey>:

int mbedtls_ccm_setkey(mbedtls_ccm_context *ctx,
                       mbedtls_cipher_id_t cipher,
                       const unsigned char *key,
                       unsigned int keybits)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b086      	sub	sp, #24
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8006f4e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8006f52:	617b      	str	r3, [r7, #20]
        return MBEDTLS_ERR_CCM_BAD_INPUT;
    }
#else
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values(cipher, keybits,
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	7afb      	ldrb	r3, [r7, #11]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 ff24 	bl	8007da8 <mbedtls_cipher_info_from_values>
 8006f60:	6138      	str	r0, [r7, #16]
                                                  MBEDTLS_MODE_ECB);
    if (cipher_info == NULL) {
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d102      	bne.n	8006f6e <mbedtls_ccm_setkey+0x30>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 8006f68:	f06f 030c 	mvn.w	r3, #12
 8006f6c:	e028      	b.n	8006fc0 <mbedtls_ccm_setkey+0x82>
    }

    if (mbedtls_cipher_info_get_block_size(cipher_info) != 16) {
 8006f6e:	6938      	ldr	r0, [r7, #16]
 8006f70:	f7ff ffc4 	bl	8006efc <mbedtls_cipher_info_get_block_size>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	d002      	beq.n	8006f80 <mbedtls_ccm_setkey+0x42>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 8006f7a:	f06f 030c 	mvn.w	r3, #12
 8006f7e:	e01f      	b.n	8006fc0 <mbedtls_ccm_setkey+0x82>
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3338      	adds	r3, #56	; 0x38
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 ff56 	bl	8007e36 <mbedtls_cipher_free>

    if ((ret = mbedtls_cipher_setup(&ctx->cipher_ctx, cipher_info)) != 0) {
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3338      	adds	r3, #56	; 0x38
 8006f8e:	6939      	ldr	r1, [r7, #16]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 ff79 	bl	8007e88 <mbedtls_cipher_setup>
 8006f96:	6178      	str	r0, [r7, #20]
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <mbedtls_ccm_setkey+0x64>
        return ret;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	e00e      	b.n	8006fc0 <mbedtls_ccm_setkey+0x82>
    }

    if ((ret = mbedtls_cipher_setkey(&ctx->cipher_ctx, key, keybits,
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	2301      	movs	r3, #1
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	f000 ff9d 	bl	8007eec <mbedtls_cipher_setkey>
 8006fb2:	6178      	str	r0, [r7, #20]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <mbedtls_ccm_setkey+0x80>
                                     MBEDTLS_ENCRYPT)) != 0) {
        return ret;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	e000      	b.n	8006fc0 <mbedtls_ccm_setkey+0x82>
    }
#endif

    return ret;
 8006fbe:	697b      	ldr	r3, [r7, #20]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <mbedtls_ccm_free>:

/*
 * Free context
 */
void mbedtls_ccm_free(mbedtls_ccm_context *ctx)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <mbedtls_ccm_free+0x22>
        return;
    }
#if defined(MBEDTLS_BLOCK_CIPHER_C)
    mbedtls_block_cipher_free(&ctx->block_cipher_ctx);
#else
    mbedtls_cipher_free(&ctx->cipher_ctx);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3338      	adds	r3, #56	; 0x38
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 ff2b 	bl	8007e36 <mbedtls_cipher_free>
#endif
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_ccm_context));
 8006fe0:	2180      	movs	r1, #128	; 0x80
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f007 fca2 	bl	800e92c <mbedtls_platform_zeroize>
 8006fe8:	e000      	b.n	8006fec <mbedtls_ccm_free+0x24>
        return;
 8006fea:	bf00      	nop
}
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <mbedtls_ccm_crypt>:
 */
static int mbedtls_ccm_crypt(mbedtls_ccm_context *ctx,
                             size_t offset, size_t use_len,
                             const unsigned char *input,
                             unsigned char *output)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b098      	sub	sp, #96	; 0x60
 8006ff6:	af02      	add	r7, sp, #8
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	607a      	str	r2, [r7, #4]
 8006ffe:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8007000:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007004:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char tmp_buf[16] = { 0 };
 8007006:	2300      	movs	r3, #0
 8007008:	623b      	str	r3, [r7, #32]
 800700a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	605a      	str	r2, [r3, #4]
 8007014:	609a      	str	r2, [r3, #8]

#if defined(MBEDTLS_BLOCK_CIPHER_C)
    ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, ctx->ctr, tmp_buf);
#else
    size_t olen = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	61fb      	str	r3, [r7, #28]
    ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->ctr, 16, tmp_buf, &olen);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f103 0110 	add.w	r1, r3, #16
 8007026:	f107 0220 	add.w	r2, r7, #32
 800702a:	f107 031c 	add.w	r3, r7, #28
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	4613      	mov	r3, r2
 8007032:	2210      	movs	r2, #16
 8007034:	f000 ffd2 	bl	8007fdc <mbedtls_cipher_update>
 8007038:	6578      	str	r0, [r7, #84]	; 0x54
#endif
    if (ret != 0) {
 800703a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00d      	beq.n	800705c <mbedtls_ccm_crypt+0x6a>
        ctx->state |= CCM_STATE__ERROR;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007044:	f043 0210 	orr.w	r2, r3, #16
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	67da      	str	r2, [r3, #124]	; 0x7c
        mbedtls_platform_zeroize(tmp_buf, sizeof(tmp_buf));
 800704c:	f107 0320 	add.w	r3, r7, #32
 8007050:	2110      	movs	r1, #16
 8007052:	4618      	mov	r0, r3
 8007054:	f007 fc6a 	bl	800e92c <mbedtls_platform_zeroize>
        return ret;
 8007058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800705a:	e04f      	b.n	80070fc <mbedtls_ccm_crypt+0x10a>
    }

    mbedtls_xor(output, input, tmp_buf + offset, use_len);
 800705c:	f107 0220 	add.w	r2, r7, #32
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	4413      	add	r3, r2
 8007064:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007066:	653a      	str	r2, [r7, #80]	; 0x50
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800706c:	64bb      	str	r3, [r7, #72]	; 0x48
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8007072:	2300      	movs	r3, #0
 8007074:	643b      	str	r3, [r7, #64]	; 0x40
    for (; (i + 4) <= n; i += 4) {
 8007076:	e01e      	b.n	80070b6 <mbedtls_ccm_crypt+0xc4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8007078:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800707a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800707c:	4413      	add	r3, r2
 800707e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007082:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007084:	61bb      	str	r3, [r7, #24]
    return r;
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800708a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800708c:	440b      	add	r3, r1
 800708e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007094:	617b      	str	r3, [r7, #20]
    return r;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	4053      	eors	r3, r2
 800709a:	637b      	str	r3, [r7, #52]	; 0x34
        mbedtls_put_unaligned_uint32(r + i, x);
 800709c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800709e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a0:	4413      	add	r3, r2
 80070a2:	633b      	str	r3, [r7, #48]	; 0x30
 80070a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	601a      	str	r2, [r3, #0]
}
 80070ae:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80070b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b2:	3304      	adds	r3, #4
 80070b4:	643b      	str	r3, [r7, #64]	; 0x40
 80070b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b8:	3304      	adds	r3, #4
 80070ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070bc:	429a      	cmp	r2, r3
 80070be:	d2db      	bcs.n	8007078 <mbedtls_ccm_crypt+0x86>
    for (; i < n; i++) {
 80070c0:	e010      	b.n	80070e4 <mbedtls_ccm_crypt+0xf2>
        r[i] = a[i] ^ b[i];
 80070c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c6:	4413      	add	r3, r2
 80070c8:	7819      	ldrb	r1, [r3, #0]
 80070ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ce:	4413      	add	r3, r2
 80070d0:	781a      	ldrb	r2, [r3, #0]
 80070d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80070d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d6:	4403      	add	r3, r0
 80070d8:	404a      	eors	r2, r1
 80070da:	b2d2      	uxtb	r2, r2
 80070dc:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80070de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e0:	3301      	adds	r3, #1
 80070e2:	643b      	str	r3, [r7, #64]	; 0x40
 80070e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d8ea      	bhi.n	80070c2 <mbedtls_ccm_crypt+0xd0>
}
 80070ec:	bf00      	nop

    mbedtls_platform_zeroize(tmp_buf, sizeof(tmp_buf));
 80070ee:	f107 0320 	add.w	r3, r7, #32
 80070f2:	2110      	movs	r1, #16
 80070f4:	4618      	mov	r0, r3
 80070f6:	f007 fc19 	bl	800e92c <mbedtls_platform_zeroize>
    return ret;
 80070fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3758      	adds	r7, #88	; 0x58
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <mbedtls_ccm_update>:

int mbedtls_ccm_update(mbedtls_ccm_context *ctx,
                       const unsigned char *input, size_t input_len,
                       unsigned char *output, size_t output_size,
                       size_t *output_len)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b0a8      	sub	sp, #160	; 0xa0
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8007112:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    size_t olen;
#endif

    unsigned char local_output[16];

    if (ctx->state & CCM_STATE__ERROR) {
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <mbedtls_ccm_update+0x28>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 8007126:	f06f 030c 	mvn.w	r3, #12
 800712a:	e1b1      	b.n	8007490 <mbedtls_ccm_update+0x38c>
    }

    /* Check against plaintext length only if performing operation with
     * authentication
     */
    if (ctx->tag_len != 0 && ctx->processed + input_len > ctx->plaintext_len) {
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <mbedtls_ccm_update+0x46>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	441a      	add	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	429a      	cmp	r2, r3
 8007142:	d902      	bls.n	800714a <mbedtls_ccm_update+0x46>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 8007144:	f06f 030c 	mvn.w	r3, #12
 8007148:	e1a2      	b.n	8007490 <mbedtls_ccm_update+0x38c>
    }

    if (output_size < input_len) {
 800714a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d202      	bcs.n	800715a <mbedtls_ccm_update+0x56>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 8007154:	f06f 030c 	mvn.w	r3, #12
 8007158:	e19a      	b.n	8007490 <mbedtls_ccm_update+0x38c>
    }
    *output_len = input_len;
 800715a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	601a      	str	r2, [r3, #0]

    ret = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    while (input_len > 0) {
 8007168:	e182      	b.n	8007470 <mbedtls_ccm_update+0x36c>
        offset = ctx->processed % 16;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        use_len = 16 - offset;
 8007176:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800717a:	f1c3 0310 	rsb	r3, r3, #16
 800717e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        if (use_len > input_len) {
 8007182:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	429a      	cmp	r2, r3
 800718a:	d902      	bls.n	8007192 <mbedtls_ccm_update+0x8e>
            use_len = input_len;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        ctx->processed += use_len;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800719a:	441a      	add	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	62da      	str	r2, [r3, #44]	; 0x2c

        if (ctx->mode == MBEDTLS_CCM_ENCRYPT || \
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d004      	beq.n	80071b2 <mbedtls_ccm_update+0xae>
            ctx->mode == MBEDTLS_CCM_STAR_ENCRYPT) {
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (ctx->mode == MBEDTLS_CCM_ENCRYPT || \
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	f040 808a 	bne.w	80072c6 <mbedtls_ccm_update+0x1c2>
            mbedtls_xor(ctx->y + offset, ctx->y + offset, input, use_len);
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071b8:	441a      	add	r2, r3
 80071ba:	68f9      	ldr	r1, [r7, #12]
 80071bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071c0:	440b      	add	r3, r1
 80071c2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80071c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071d2:	67bb      	str	r3, [r7, #120]	; 0x78
    size_t i = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	677b      	str	r3, [r7, #116]	; 0x74
    for (; (i + 4) <= n; i += 4) {
 80071d8:	e020      	b.n	800721c <mbedtls_ccm_update+0x118>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80071da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071e0:	4413      	add	r3, r2
 80071e2:	673b      	str	r3, [r7, #112]	; 0x70
 80071e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071e6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80071e8:	61fb      	str	r3, [r7, #28]
    return r;
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071f0:	440b      	add	r3, r1
 80071f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80071f8:	61bb      	str	r3, [r7, #24]
    return r;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	4053      	eors	r3, r2
 80071fe:	66bb      	str	r3, [r7, #104]	; 0x68
        mbedtls_put_unaligned_uint32(r + i, x);
 8007200:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007206:	4413      	add	r3, r2
 8007208:	667b      	str	r3, [r7, #100]	; 0x64
 800720a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800720c:	617b      	str	r3, [r7, #20]
 800720e:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8007210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007212:	601a      	str	r2, [r3, #0]
}
 8007214:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8007216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007218:	3304      	adds	r3, #4
 800721a:	677b      	str	r3, [r7, #116]	; 0x74
 800721c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800721e:	3304      	adds	r3, #4
 8007220:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007222:	429a      	cmp	r2, r3
 8007224:	d2d9      	bcs.n	80071da <mbedtls_ccm_update+0xd6>
    for (; i < n; i++) {
 8007226:	e012      	b.n	800724e <mbedtls_ccm_update+0x14a>
        r[i] = a[i] ^ b[i];
 8007228:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800722c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800722e:	4413      	add	r3, r2
 8007230:	7819      	ldrb	r1, [r3, #0]
 8007232:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007236:	4413      	add	r3, r2
 8007238:	781a      	ldrb	r2, [r3, #0]
 800723a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800723e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007240:	4403      	add	r3, r0
 8007242:	404a      	eors	r2, r1
 8007244:	b2d2      	uxtb	r2, r2
 8007246:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8007248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800724a:	3301      	adds	r3, #1
 800724c:	677b      	str	r3, [r7, #116]	; 0x74
 800724e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007252:	429a      	cmp	r2, r3
 8007254:	d8e8      	bhi.n	8007228 <mbedtls_ccm_update+0x124>
}
 8007256:	bf00      	nop

            if (use_len + offset == 16 || ctx->processed == ctx->plaintext_len) {
 8007258:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800725c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007260:	4413      	add	r3, r2
 8007262:	2b10      	cmp	r3, #16
 8007264:	d005      	beq.n	8007272 <mbedtls_ccm_update+0x16e>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	429a      	cmp	r2, r3
 8007270:	d118      	bne.n	80072a4 <mbedtls_ccm_update+0x1a0>
#if defined(MBEDTLS_BLOCK_CIPHER_C)
                ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, ctx->y, ctx->y);
#else
                ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16, ctx->y, &olen);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007278:	68f9      	ldr	r1, [r7, #12]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	4613      	mov	r3, r2
 8007284:	2210      	movs	r2, #16
 8007286:	f000 fea9 	bl	8007fdc <mbedtls_cipher_update>
 800728a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
#endif
                if (ret != 0) {
 800728e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007292:	2b00      	cmp	r3, #0
 8007294:	d006      	beq.n	80072a4 <mbedtls_ccm_update+0x1a0>
                    ctx->state |= CCM_STATE__ERROR;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800729a:	f043 0210 	orr.w	r2, r3, #16
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	67da      	str	r2, [r3, #124]	; 0x7c
                    goto exit;
 80072a2:	e0ed      	b.n	8007480 <mbedtls_ccm_update+0x37c>
                }
            }

            ret = mbedtls_ccm_crypt(ctx, offset, use_len, input, output);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80072ae:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f7ff fe9d 	bl	8006ff2 <mbedtls_ccm_crypt>
 80072b8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret != 0) {
 80072bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f040 80da 	bne.w	800747a <mbedtls_ccm_update+0x376>
                goto exit;
            }
        }

        if (ctx->mode == MBEDTLS_CCM_DECRYPT || \
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d004      	beq.n	80072d8 <mbedtls_ccm_update+0x1d4>
            ctx->mode == MBEDTLS_CCM_STAR_DECRYPT) {
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (ctx->mode == MBEDTLS_CCM_DECRYPT || \
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	f040 808e 	bne.w	80073f4 <mbedtls_ccm_update+0x2f0>
             * it will contain what we wrote to it. Therefore, we should avoid using
             * it as input to any operations.
             * Write decrypted data to local_output to avoid using output variable as
             * input in the XOR operation for Y.
             */
            ret = mbedtls_ccm_crypt(ctx, offset, use_len, input, local_output);
 80072d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80072e4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f7ff fe82 	bl	8006ff2 <mbedtls_ccm_crypt>
 80072ee:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret != 0) {
 80072f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f040 80c1 	bne.w	800747e <mbedtls_ccm_update+0x37a>
                goto exit;
            }

            mbedtls_xor(ctx->y + offset, ctx->y + offset, local_output, use_len);
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007302:	441a      	add	r2, r3
 8007304:	68f9      	ldr	r1, [r7, #12]
 8007306:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800730a:	440b      	add	r3, r1
 800730c:	663a      	str	r2, [r7, #96]	; 0x60
 800730e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007314:	65bb      	str	r3, [r7, #88]	; 0x58
 8007316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800731a:	657b      	str	r3, [r7, #84]	; 0x54
    size_t i = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	653b      	str	r3, [r7, #80]	; 0x50
    for (; (i + 4) <= n; i += 4) {
 8007320:	e01e      	b.n	8007360 <mbedtls_ccm_update+0x25c>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8007322:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007326:	4413      	add	r3, r2
 8007328:	64fb      	str	r3, [r7, #76]	; 0x4c
 800732a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8007330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007336:	440b      	add	r3, r1
 8007338:	64bb      	str	r3, [r7, #72]	; 0x48
 800733a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800733c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	4053      	eors	r3, r2
 8007344:	647b      	str	r3, [r7, #68]	; 0x44
        mbedtls_put_unaligned_uint32(r + i, x);
 8007346:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800734a:	4413      	add	r3, r2
 800734c:	643b      	str	r3, [r7, #64]	; 0x40
 800734e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007350:	623b      	str	r3, [r7, #32]
 8007352:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8007354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007356:	601a      	str	r2, [r3, #0]
}
 8007358:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800735a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800735c:	3304      	adds	r3, #4
 800735e:	653b      	str	r3, [r7, #80]	; 0x50
 8007360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007362:	3304      	adds	r3, #4
 8007364:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007366:	429a      	cmp	r2, r3
 8007368:	d2db      	bcs.n	8007322 <mbedtls_ccm_update+0x21e>
    for (; i < n; i++) {
 800736a:	e010      	b.n	800738e <mbedtls_ccm_update+0x28a>
        r[i] = a[i] ^ b[i];
 800736c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800736e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007370:	4413      	add	r3, r2
 8007372:	7819      	ldrb	r1, [r3, #0]
 8007374:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007378:	4413      	add	r3, r2
 800737a:	781a      	ldrb	r2, [r3, #0]
 800737c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800737e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007380:	4403      	add	r3, r0
 8007382:	404a      	eors	r2, r1
 8007384:	b2d2      	uxtb	r2, r2
 8007386:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8007388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800738a:	3301      	adds	r3, #1
 800738c:	653b      	str	r3, [r7, #80]	; 0x50
 800738e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007392:	429a      	cmp	r2, r3
 8007394:	d8ea      	bhi.n	800736c <mbedtls_ccm_update+0x268>
}
 8007396:	bf00      	nop

            memcpy(output, local_output, use_len);
 8007398:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800739c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80073a0:	4619      	mov	r1, r3
 80073a2:	6838      	ldr	r0, [r7, #0]
 80073a4:	f015 ffa8 	bl	801d2f8 <memcpy>

            if (use_len + offset == 16 || ctx->processed == ctx->plaintext_len) {
 80073a8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80073ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073b0:	4413      	add	r3, r2
 80073b2:	2b10      	cmp	r3, #16
 80073b4:	d005      	beq.n	80073c2 <mbedtls_ccm_update+0x2be>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d118      	bne.n	80073f4 <mbedtls_ccm_update+0x2f0>
#if defined(MBEDTLS_BLOCK_CIPHER_C)
                ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, ctx->y, ctx->y);
#else
                ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16, ctx->y, &olen);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80073c8:	68f9      	ldr	r1, [r7, #12]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	4613      	mov	r3, r2
 80073d4:	2210      	movs	r2, #16
 80073d6:	f000 fe01 	bl	8007fdc <mbedtls_cipher_update>
 80073da:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
#endif
                if (ret != 0) {
 80073de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d006      	beq.n	80073f4 <mbedtls_ccm_update+0x2f0>
                    ctx->state |= CCM_STATE__ERROR;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ea:	f043 0210 	orr.w	r2, r3, #16
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	67da      	str	r2, [r3, #124]	; 0x7c
                    goto exit;
 80073f2:	e045      	b.n	8007480 <mbedtls_ccm_update+0x37c>
                }
            }
        }

        if (use_len + offset == 16 || ctx->processed == ctx->plaintext_len) {
 80073f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80073f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073fc:	4413      	add	r3, r2
 80073fe:	2b10      	cmp	r3, #16
 8007400:	d005      	beq.n	800740e <mbedtls_ccm_update+0x30a>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	429a      	cmp	r2, r3
 800740c:	d121      	bne.n	8007452 <mbedtls_ccm_update+0x34e>
            for (i = 0; i < ctx->q; i++) {
 800740e:	2300      	movs	r3, #0
 8007410:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8007414:	e015      	b.n	8007442 <mbedtls_ccm_update+0x33e>
                if (++(ctx->ctr)[15-i] != 0) {
 8007416:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800741a:	f1c3 030f 	rsb	r3, r3, #15
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	441a      	add	r2, r3
 8007422:	7c12      	ldrb	r2, [r2, #16]
 8007424:	3201      	adds	r2, #1
 8007426:	b2d1      	uxtb	r1, r2
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	441a      	add	r2, r3
 800742c:	7411      	strb	r1, [r2, #16]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4413      	add	r3, r2
 8007432:	7c1b      	ldrb	r3, [r3, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10b      	bne.n	8007450 <mbedtls_ccm_update+0x34c>
            for (i = 0; i < ctx->q; i++) {
 8007438:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800743c:	3301      	adds	r3, #1
 800743e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8007442:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	429a      	cmp	r2, r3
 800744c:	d3e3      	bcc.n	8007416 <mbedtls_ccm_update+0x312>
 800744e:	e000      	b.n	8007452 <mbedtls_ccm_update+0x34e>
                    break;
 8007450:	bf00      	nop
                }
            }
        }

        input_len -= use_len;
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	607b      	str	r3, [r7, #4]
        input += use_len;
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007462:	4413      	add	r3, r2
 8007464:	60bb      	str	r3, [r7, #8]
        output += use_len;
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800746c:	4413      	add	r3, r2
 800746e:	603b      	str	r3, [r7, #0]
    while (input_len > 0) {
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f47f ae79 	bne.w	800716a <mbedtls_ccm_update+0x66>
    }

exit:
 8007478:	e002      	b.n	8007480 <mbedtls_ccm_update+0x37c>
                goto exit;
 800747a:	bf00      	nop
 800747c:	e000      	b.n	8007480 <mbedtls_ccm_update+0x37c>
                goto exit;
 800747e:	bf00      	nop
    mbedtls_platform_zeroize(local_output, 16);
 8007480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007484:	2110      	movs	r1, #16
 8007486:	4618      	mov	r0, r3
 8007488:	f007 fa50 	bl	800e92c <mbedtls_platform_zeroize>

    return ret;
 800748c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 8007490:	4618      	mov	r0, r3
 8007492:	3798      	adds	r7, #152	; 0x98
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <chacha20_quarter_round>:
static inline void chacha20_quarter_round(uint32_t state[16],
                                          size_t a,
                                          size_t b,
                                          size_t c,
                                          size_t d)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
    /* a += b; d ^= a; d <<<= 16; */
    state[a] += state[b];
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	4413      	add	r3, r2
 80074ae:	6819      	ldr	r1, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	4403      	add	r3, r0
 80074c2:	440a      	add	r2, r1
 80074c4:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4413      	add	r3, r2
 80074ce:	6819      	ldr	r1, [r3, #0]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	4403      	add	r3, r0
 80074e2:	404a      	eors	r2, r1
 80074e4:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32(state[d], 16);
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	4413      	add	r3, r2
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	68f9      	ldr	r1, [r7, #12]
 80074f6:	440b      	add	r3, r1
 80074f8:	ea4f 4232 	mov.w	r2, r2, ror #16
 80074fc:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 12 */
    state[c] += state[d];
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	4413      	add	r3, r2
 8007506:	6819      	ldr	r1, [r3, #0]
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	4403      	add	r3, r0
 800751a:	440a      	add	r2, r1
 800751c:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	6819      	ldr	r1, [r3, #0]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	4403      	add	r3, r0
 800753a:	404a      	eors	r2, r1
 800753c:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32(state[b], 12);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4413      	add	r3, r2
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	68f9      	ldr	r1, [r7, #12]
 800754e:	440b      	add	r3, r1
 8007550:	ea4f 5232 	mov.w	r2, r2, ror #20
 8007554:	601a      	str	r2, [r3, #0]

    /* a += b; d ^= a; d <<<= 8; */
    state[a] += state[b];
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	6819      	ldr	r1, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4413      	add	r3, r2
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	4403      	add	r3, r0
 8007572:	440a      	add	r2, r1
 8007574:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	6819      	ldr	r1, [r3, #0]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	4403      	add	r3, r0
 8007592:	404a      	eors	r2, r1
 8007594:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32(state[d], 8);
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	68f9      	ldr	r1, [r7, #12]
 80075a6:	440b      	add	r3, r1
 80075a8:	ea4f 6232 	mov.w	r2, r2, ror #24
 80075ac:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 7; */
    state[c] += state[d];
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	4413      	add	r3, r2
 80075b6:	6819      	ldr	r1, [r3, #0]
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	4403      	add	r3, r0
 80075ca:	440a      	add	r2, r1
 80075cc:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4413      	add	r3, r2
 80075d6:	6819      	ldr	r1, [r3, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	4403      	add	r3, r0
 80075ea:	404a      	eors	r2, r1
 80075ec:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32(state[b], 7);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4413      	add	r3, r2
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	68f9      	ldr	r1, [r7, #12]
 80075fe:	440b      	add	r3, r1
 8007600:	ea4f 6272 	mov.w	r2, r2, ror #25
 8007604:	601a      	str	r2, [r3, #0]
}
 8007606:	bf00      	nop
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <chacha20_inner_block>:
 *                  diagonal round.
 *
 * \param state     The ChaCha20 state to update.
 */
static void chacha20_inner_block(uint32_t state[16])
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af02      	add	r7, sp, #8
 8007618:	6078      	str	r0, [r7, #4]
    chacha20_quarter_round(state, 0, 4, 8,  12);
 800761a:	230c      	movs	r3, #12
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	2308      	movs	r3, #8
 8007620:	2204      	movs	r2, #4
 8007622:	2100      	movs	r1, #0
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff ff37 	bl	8007498 <chacha20_quarter_round>
    chacha20_quarter_round(state, 1, 5, 9,  13);
 800762a:	230d      	movs	r3, #13
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	2309      	movs	r3, #9
 8007630:	2205      	movs	r2, #5
 8007632:	2101      	movs	r1, #1
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff ff2f 	bl	8007498 <chacha20_quarter_round>
    chacha20_quarter_round(state, 2, 6, 10, 14);
 800763a:	230e      	movs	r3, #14
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	230a      	movs	r3, #10
 8007640:	2206      	movs	r2, #6
 8007642:	2102      	movs	r1, #2
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff ff27 	bl	8007498 <chacha20_quarter_round>
    chacha20_quarter_round(state, 3, 7, 11, 15);
 800764a:	230f      	movs	r3, #15
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	230b      	movs	r3, #11
 8007650:	2207      	movs	r2, #7
 8007652:	2103      	movs	r1, #3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7ff ff1f 	bl	8007498 <chacha20_quarter_round>

    chacha20_quarter_round(state, 0, 5, 10, 15);
 800765a:	230f      	movs	r3, #15
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	230a      	movs	r3, #10
 8007660:	2205      	movs	r2, #5
 8007662:	2100      	movs	r1, #0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff ff17 	bl	8007498 <chacha20_quarter_round>
    chacha20_quarter_round(state, 1, 6, 11, 12);
 800766a:	230c      	movs	r3, #12
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	230b      	movs	r3, #11
 8007670:	2206      	movs	r2, #6
 8007672:	2101      	movs	r1, #1
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff ff0f 	bl	8007498 <chacha20_quarter_round>
    chacha20_quarter_round(state, 2, 7, 8,  13);
 800767a:	230d      	movs	r3, #13
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	2308      	movs	r3, #8
 8007680:	2207      	movs	r2, #7
 8007682:	2102      	movs	r1, #2
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff ff07 	bl	8007498 <chacha20_quarter_round>
    chacha20_quarter_round(state, 3, 4, 9,  14);
 800768a:	230e      	movs	r3, #14
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	2309      	movs	r3, #9
 8007690:	2204      	movs	r2, #4
 8007692:	2103      	movs	r1, #3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff feff 	bl	8007498 <chacha20_quarter_round>
}
 800769a:	bf00      	nop
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <chacha20_block>:
 * \param initial_state The initial ChaCha20 state (key, nonce, counter).
 * \param keystream     Generated keystream bytes are written to this buffer.
 */
static void chacha20_block(const uint32_t initial_state[16],
                           unsigned char keystream[64])
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b096      	sub	sp, #88	; 0x58
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]
    uint32_t working_state[16];
    size_t i;

    memcpy(working_state,
 80076ac:	f107 030c 	add.w	r3, r7, #12
 80076b0:	2240      	movs	r2, #64	; 0x40
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f015 fe1f 	bl	801d2f8 <memcpy>
           initial_state,
           CHACHA20_BLOCK_SIZE_BYTES);

    for (i = 0U; i < 10U; i++) {
 80076ba:	2300      	movs	r3, #0
 80076bc:	657b      	str	r3, [r7, #84]	; 0x54
 80076be:	e007      	b.n	80076d0 <chacha20_block+0x2e>
        chacha20_inner_block(working_state);
 80076c0:	f107 030c 	add.w	r3, r7, #12
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7ff ffa4 	bl	8007612 <chacha20_inner_block>
    for (i = 0U; i < 10U; i++) {
 80076ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076cc:	3301      	adds	r3, #1
 80076ce:	657b      	str	r3, [r7, #84]	; 0x54
 80076d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076d2:	2b09      	cmp	r3, #9
 80076d4:	d9f4      	bls.n	80076c0 <chacha20_block+0x1e>
    }

    working_state[0] += initial_state[0];
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4413      	add	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]
    working_state[1] += initial_state[1];
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3304      	adds	r3, #4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4413      	add	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
    working_state[2] += initial_state[2];
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	3308      	adds	r3, #8
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4413      	add	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]
    working_state[3] += initial_state[3];
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	330c      	adds	r3, #12
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4413      	add	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
    working_state[4] += initial_state[4];
 8007704:	69fa      	ldr	r2, [r7, #28]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3310      	adds	r3, #16
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4413      	add	r3, r2
 800770e:	61fb      	str	r3, [r7, #28]
    working_state[5] += initial_state[5];
 8007710:	6a3a      	ldr	r2, [r7, #32]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3314      	adds	r3, #20
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4413      	add	r3, r2
 800771a:	623b      	str	r3, [r7, #32]
    working_state[6] += initial_state[6];
 800771c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3318      	adds	r3, #24
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4413      	add	r3, r2
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
    working_state[7] += initial_state[7];
 8007728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	331c      	adds	r3, #28
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4413      	add	r3, r2
 8007732:	62bb      	str	r3, [r7, #40]	; 0x28
    working_state[8] += initial_state[8];
 8007734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3320      	adds	r3, #32
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4413      	add	r3, r2
 800773e:	62fb      	str	r3, [r7, #44]	; 0x2c
    working_state[9] += initial_state[9];
 8007740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3324      	adds	r3, #36	; 0x24
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4413      	add	r3, r2
 800774a:	633b      	str	r3, [r7, #48]	; 0x30
    working_state[10] += initial_state[10];
 800774c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	3328      	adds	r3, #40	; 0x28
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4413      	add	r3, r2
 8007756:	637b      	str	r3, [r7, #52]	; 0x34
    working_state[11] += initial_state[11];
 8007758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	332c      	adds	r3, #44	; 0x2c
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4413      	add	r3, r2
 8007762:	63bb      	str	r3, [r7, #56]	; 0x38
    working_state[12] += initial_state[12];
 8007764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	3330      	adds	r3, #48	; 0x30
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4413      	add	r3, r2
 800776e:	63fb      	str	r3, [r7, #60]	; 0x3c
    working_state[13] += initial_state[13];
 8007770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3334      	adds	r3, #52	; 0x34
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4413      	add	r3, r2
 800777a:	643b      	str	r3, [r7, #64]	; 0x40
    working_state[14] += initial_state[14];
 800777c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3338      	adds	r3, #56	; 0x38
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4413      	add	r3, r2
 8007786:	647b      	str	r3, [r7, #68]	; 0x44
    working_state[15] += initial_state[15];
 8007788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	333c      	adds	r3, #60	; 0x3c
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4413      	add	r3, r2
 8007792:	64bb      	str	r3, [r7, #72]	; 0x48

    for (i = 0U; i < 16; i++) {
 8007794:	2300      	movs	r3, #0
 8007796:	657b      	str	r3, [r7, #84]	; 0x54
 8007798:	e014      	b.n	80077c4 <chacha20_block+0x122>
        size_t offset = i * 4U;
 800779a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	653b      	str	r3, [r7, #80]	; 0x50

        MBEDTLS_PUT_UINT32_LE(working_state[i], keystream, offset);
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a4:	441a      	add	r2, r3
 80077a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	3358      	adds	r3, #88	; 0x58
 80077ac:	443b      	add	r3, r7
 80077ae:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80077b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	68ba      	ldr	r2, [r7, #8]
    memcpy(p, &x, sizeof(x));
 80077b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ba:	601a      	str	r2, [r3, #0]
}
 80077bc:	bf00      	nop
    for (i = 0U; i < 16; i++) {
 80077be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077c0:	3301      	adds	r3, #1
 80077c2:	657b      	str	r3, [r7, #84]	; 0x54
 80077c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077c6:	2b0f      	cmp	r3, #15
 80077c8:	d9e7      	bls.n	800779a <chacha20_block+0xf8>
    }

    mbedtls_platform_zeroize(working_state, sizeof(working_state));
 80077ca:	f107 030c 	add.w	r3, r7, #12
 80077ce:	2140      	movs	r1, #64	; 0x40
 80077d0:	4618      	mov	r0, r3
 80077d2:	f007 f8ab 	bl	800e92c <mbedtls_platform_zeroize>
}
 80077d6:	bf00      	nop
 80077d8:	3758      	adds	r7, #88	; 0x58
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <mbedtls_chacha20_init>:

void mbedtls_chacha20_init(mbedtls_chacha20_context *ctx)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
    mbedtls_platform_zeroize(ctx->state, sizeof(ctx->state));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2140      	movs	r1, #64	; 0x40
 80077ea:	4618      	mov	r0, r3
 80077ec:	f007 f89e 	bl	800e92c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(ctx->keystream8, sizeof(ctx->keystream8));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3340      	adds	r3, #64	; 0x40
 80077f4:	2140      	movs	r1, #64	; 0x40
 80077f6:	4618      	mov	r0, r3
 80077f8:	f007 f898 	bl	800e92c <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2240      	movs	r2, #64	; 0x40
 8007800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8007804:	bf00      	nop
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <mbedtls_chacha20_free>:

void mbedtls_chacha20_free(mbedtls_chacha20_context *ctx)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
    if (ctx != NULL) {
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <mbedtls_chacha20_free+0x16>
        mbedtls_platform_zeroize(ctx, sizeof(mbedtls_chacha20_context));
 800781a:	2184      	movs	r1, #132	; 0x84
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f007 f885 	bl	800e92c <mbedtls_platform_zeroize>
    }
}
 8007822:	bf00      	nop
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <mbedtls_chacha20_setkey>:

int mbedtls_chacha20_setkey(mbedtls_chacha20_context *ctx,
                            const unsigned char key[32])
{
 800782c:	b480      	push	{r7}
 800782e:	b093      	sub	sp, #76	; 0x4c
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
    /* ChaCha20 constants - the string "expand 32-byte k" */
    ctx->state[0] = 0x61707865;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a2c      	ldr	r2, [pc, #176]	; (80078ec <mbedtls_chacha20_setkey+0xc0>)
 800783a:	601a      	str	r2, [r3, #0]
    ctx->state[1] = 0x3320646e;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a2c      	ldr	r2, [pc, #176]	; (80078f0 <mbedtls_chacha20_setkey+0xc4>)
 8007840:	605a      	str	r2, [r3, #4]
    ctx->state[2] = 0x79622d32;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a2b      	ldr	r2, [pc, #172]	; (80078f4 <mbedtls_chacha20_setkey+0xc8>)
 8007846:	609a      	str	r2, [r3, #8]
    ctx->state[3] = 0x6b206574;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a2b      	ldr	r2, [pc, #172]	; (80078f8 <mbedtls_chacha20_setkey+0xcc>)
 800784c:	60da      	str	r2, [r3, #12]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	62bb      	str	r3, [r7, #40]	; 0x28
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8007858:	6a7a      	ldr	r2, [r7, #36]	; 0x24

    /* Set key */
    ctx->state[4]  = MBEDTLS_GET_UINT32_LE(key, 0);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	611a      	str	r2, [r3, #16]
    ctx->state[5]  = MBEDTLS_GET_UINT32_LE(key, 4);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	3304      	adds	r3, #4
 8007862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007868:	623b      	str	r3, [r7, #32]
    return r;
 800786a:	6a3a      	ldr	r2, [r7, #32]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	615a      	str	r2, [r3, #20]
    ctx->state[6]  = MBEDTLS_GET_UINT32_LE(key, 8);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	633b      	str	r3, [r7, #48]	; 0x30
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800787a:	61fb      	str	r3, [r7, #28]
    return r;
 800787c:	69fa      	ldr	r2, [r7, #28]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	619a      	str	r2, [r3, #24]
    ctx->state[7]  = MBEDTLS_GET_UINT32_LE(key, 12);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	330c      	adds	r3, #12
 8007886:	637b      	str	r3, [r7, #52]	; 0x34
 8007888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800788c:	61bb      	str	r3, [r7, #24]
    return r;
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	61da      	str	r2, [r3, #28]
    ctx->state[8]  = MBEDTLS_GET_UINT32_LE(key, 16);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	3310      	adds	r3, #16
 8007898:	63bb      	str	r3, [r7, #56]	; 0x38
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800789e:	617b      	str	r3, [r7, #20]
    return r;
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	621a      	str	r2, [r3, #32]
    ctx->state[9]  = MBEDTLS_GET_UINT32_LE(key, 20);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	3314      	adds	r3, #20
 80078aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ae:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80078b0:	613b      	str	r3, [r7, #16]
    return r;
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	625a      	str	r2, [r3, #36]	; 0x24
    ctx->state[10] = MBEDTLS_GET_UINT32_LE(key, 24);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	3318      	adds	r3, #24
 80078bc:	643b      	str	r3, [r7, #64]	; 0x40
 80078be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80078c2:	60fb      	str	r3, [r7, #12]
    return r;
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	629a      	str	r2, [r3, #40]	; 0x28
    ctx->state[11] = MBEDTLS_GET_UINT32_LE(key, 28);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	331c      	adds	r3, #28
 80078ce:	647b      	str	r3, [r7, #68]	; 0x44
 80078d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078d2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80078d4:	60bb      	str	r3, [r7, #8]
    return r;
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	62da      	str	r2, [r3, #44]	; 0x2c

    return 0;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	374c      	adds	r7, #76	; 0x4c
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	61707865 	.word	0x61707865
 80078f0:	3320646e 	.word	0x3320646e
 80078f4:	79622d32 	.word	0x79622d32
 80078f8:	6b206574 	.word	0x6b206574

080078fc <mbedtls_chacha20_update>:

int mbedtls_chacha20_update(mbedtls_chacha20_context *ctx,
                            size_t size,
                            const unsigned char *input,
                            unsigned char *output)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b09e      	sub	sp, #120	; 0x78
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
    size_t offset = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Use leftover keystream bytes, if available */
    while (size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES) {
 800790e:	e01d      	b.n	800794c <mbedtls_chacha20_update+0x50>
        output[offset] = input[offset]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007914:	4413      	add	r3, r2
 8007916:	7819      	ldrb	r1, [r3, #0]
                         ^ ctx->keystream8[ctx->keystream_bytes_used];
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	4413      	add	r3, r2
 8007922:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        output[offset] = input[offset]
 8007926:	6838      	ldr	r0, [r7, #0]
 8007928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800792a:	4403      	add	r3, r0
 800792c:	404a      	eors	r2, r1
 800792e:	b2d2      	uxtb	r2, r2
 8007930:	701a      	strb	r2, [r3, #0]

        ctx->keystream_bytes_used++;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        offset++;
 8007940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007942:	3301      	adds	r3, #1
 8007944:	677b      	str	r3, [r7, #116]	; 0x74
        size--;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	3b01      	subs	r3, #1
 800794a:	60bb      	str	r3, [r7, #8]
    while (size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES) {
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d062      	beq.n	8007a18 <mbedtls_chacha20_update+0x11c>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007958:	2b3f      	cmp	r3, #63	; 0x3f
 800795a:	d9d9      	bls.n	8007910 <mbedtls_chacha20_update+0x14>
    }

    /* Process full blocks */
    while (size >= CHACHA20_BLOCK_SIZE_BYTES) {
 800795c:	e05c      	b.n	8007a18 <mbedtls_chacha20_update+0x11c>
        /* Generate new keystream block and increment counter */
        chacha20_block(ctx->state, ctx->keystream8);
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3340      	adds	r3, #64	; 0x40
 8007964:	4619      	mov	r1, r3
 8007966:	4610      	mov	r0, r2
 8007968:	f7ff fe9b 	bl	80076a2 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007970:	1c5a      	adds	r2, r3, #1
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	631a      	str	r2, [r3, #48]	; 0x30

        mbedtls_xor(output + offset, input + offset, ctx->keystream8, 64U);
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800797a:	18d1      	adds	r1, r2, r3
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007980:	441a      	add	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3340      	adds	r3, #64	; 0x40
 8007986:	6739      	str	r1, [r7, #112]	; 0x70
 8007988:	66fa      	str	r2, [r7, #108]	; 0x6c
 800798a:	66bb      	str	r3, [r7, #104]	; 0x68
 800798c:	2340      	movs	r3, #64	; 0x40
 800798e:	667b      	str	r3, [r7, #100]	; 0x64
    size_t i = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	663b      	str	r3, [r7, #96]	; 0x60
    for (; (i + 4) <= n; i += 4) {
 8007994:	e01e      	b.n	80079d4 <mbedtls_chacha20_update+0xd8>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8007996:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800799a:	4413      	add	r3, r2
 800799c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800799e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079a0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80079a2:	61fb      	str	r3, [r7, #28]
    return r;
 80079a4:	69fa      	ldr	r2, [r7, #28]
 80079a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079aa:	440b      	add	r3, r1
 80079ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80079ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079b0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80079b2:	61bb      	str	r3, [r7, #24]
    return r;
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	4053      	eors	r3, r2
 80079b8:	657b      	str	r3, [r7, #84]	; 0x54
        mbedtls_put_unaligned_uint32(r + i, x);
 80079ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80079bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079be:	4413      	add	r3, r2
 80079c0:	653b      	str	r3, [r7, #80]	; 0x50
 80079c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 80079c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ca:	601a      	str	r2, [r3, #0]
}
 80079cc:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80079ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079d0:	3304      	adds	r3, #4
 80079d2:	663b      	str	r3, [r7, #96]	; 0x60
 80079d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079d6:	3304      	adds	r3, #4
 80079d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079da:	429a      	cmp	r2, r3
 80079dc:	d2db      	bcs.n	8007996 <mbedtls_chacha20_update+0x9a>
    for (; i < n; i++) {
 80079de:	e010      	b.n	8007a02 <mbedtls_chacha20_update+0x106>
        r[i] = a[i] ^ b[i];
 80079e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079e4:	4413      	add	r3, r2
 80079e6:	7819      	ldrb	r1, [r3, #0]
 80079e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079ec:	4413      	add	r3, r2
 80079ee:	781a      	ldrb	r2, [r3, #0]
 80079f0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80079f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079f4:	4403      	add	r3, r0
 80079f6:	404a      	eors	r2, r1
 80079f8:	b2d2      	uxtb	r2, r2
 80079fa:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80079fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079fe:	3301      	adds	r3, #1
 8007a00:	663b      	str	r3, [r7, #96]	; 0x60
 8007a02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d8ea      	bhi.n	80079e0 <mbedtls_chacha20_update+0xe4>
}
 8007a0a:	bf00      	nop

        offset += CHACHA20_BLOCK_SIZE_BYTES;
 8007a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a0e:	3340      	adds	r3, #64	; 0x40
 8007a10:	677b      	str	r3, [r7, #116]	; 0x74
        size   -= CHACHA20_BLOCK_SIZE_BYTES;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	3b40      	subs	r3, #64	; 0x40
 8007a16:	60bb      	str	r3, [r7, #8]
    while (size >= CHACHA20_BLOCK_SIZE_BYTES) {
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b3f      	cmp	r3, #63	; 0x3f
 8007a1c:	d89f      	bhi.n	800795e <mbedtls_chacha20_update+0x62>
    }

    /* Last (partial) block */
    if (size > 0U) {
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d05a      	beq.n	8007ada <mbedtls_chacha20_update+0x1de>
        /* Generate new keystream block and increment counter */
        chacha20_block(ctx->state, ctx->keystream8);
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3340      	adds	r3, #64	; 0x40
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f7ff fe38 	bl	80076a2 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	631a      	str	r2, [r3, #48]	; 0x30

        mbedtls_xor(output + offset, input + offset, ctx->keystream8, size);
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a40:	18d1      	adds	r1, r2, r3
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a46:	441a      	add	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3340      	adds	r3, #64	; 0x40
 8007a4c:	64f9      	str	r1, [r7, #76]	; 0x4c
 8007a4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a50:	647b      	str	r3, [r7, #68]	; 0x44
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	643b      	str	r3, [r7, #64]	; 0x40
    size_t i = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (; (i + 4) <= n; i += 4) {
 8007a5a:	e01e      	b.n	8007a9a <mbedtls_chacha20_update+0x19e>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8007a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a60:	4413      	add	r3, r2
 8007a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007a68:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8007a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a70:	440b      	add	r3, r1
 8007a72:	637b      	str	r3, [r7, #52]	; 0x34
 8007a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a76:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	4053      	eors	r3, r2
 8007a7e:	633b      	str	r3, [r7, #48]	; 0x30
        mbedtls_put_unaligned_uint32(r + i, x);
 8007a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a84:	4413      	add	r3, r2
 8007a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	623b      	str	r3, [r7, #32]
 8007a8c:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8007a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a90:	601a      	str	r2, [r3, #0]
}
 8007a92:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8007a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a96:	3304      	adds	r3, #4
 8007a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d2db      	bcs.n	8007a5c <mbedtls_chacha20_update+0x160>
    for (; i < n; i++) {
 8007aa4:	e010      	b.n	8007ac8 <mbedtls_chacha20_update+0x1cc>
        r[i] = a[i] ^ b[i];
 8007aa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aaa:	4413      	add	r3, r2
 8007aac:	7819      	ldrb	r1, [r3, #0]
 8007aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab2:	4413      	add	r3, r2
 8007ab4:	781a      	ldrb	r2, [r3, #0]
 8007ab6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aba:	4403      	add	r3, r0
 8007abc:	404a      	eors	r2, r1
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8007ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ac8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d8ea      	bhi.n	8007aa6 <mbedtls_chacha20_update+0x1aa>
}
 8007ad0:	bf00      	nop

        ctx->keystream_bytes_used = size;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    }

    return 0;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3778      	adds	r7, #120	; 0x78
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <chachapoly_pad_aad>:
 * \brief           Adds nul bytes to pad the AAD for Poly1305.
 *
 * \param ctx       The ChaCha20-Poly1305 context.
 */
static int chachapoly_pad_aad(mbedtls_chachapoly_context *ctx)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
    uint32_t partial_block_len = (uint32_t) (ctx->aad_len % 16U);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8007af2:	4613      	mov	r3, r2
 8007af4:	f003 030f 	and.w	r3, r3, #15
 8007af8:	61fb      	str	r3, [r7, #28]
    unsigned char zeroes[15];

    if (partial_block_len == 0U) {
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <chachapoly_pad_aad+0x20>
        return 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	e012      	b.n	8007b2a <chachapoly_pad_aad+0x46>
    }

    memset(zeroes, 0, sizeof(zeroes));
 8007b04:	f107 030c 	add.w	r3, r7, #12
 8007b08:	220f      	movs	r2, #15
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f015 fb55 	bl	801d1bc <memset>

    return mbedtls_poly1305_update(&ctx->poly1305_ctx,
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f103 0084 	add.w	r0, r3, #132	; 0x84
                                   zeroes,
                                   16U - partial_block_len);
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f1c3 0210 	rsb	r2, r3, #16
    return mbedtls_poly1305_update(&ctx->poly1305_ctx,
 8007b1e:	f107 030c 	add.w	r3, r7, #12
 8007b22:	4619      	mov	r1, r3
 8007b24:	f007 fb51 	bl	800f1ca <mbedtls_poly1305_update>
 8007b28:	4603      	mov	r3, r0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3720      	adds	r7, #32
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <mbedtls_chachapoly_init>:
                                   zeroes,
                                   16U - partial_block_len);
}

void mbedtls_chachapoly_init(mbedtls_chachapoly_context *ctx)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b082      	sub	sp, #8
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
    mbedtls_chacha20_init(&ctx->chacha20_ctx);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff fe4e 	bl	80077de <mbedtls_chacha20_init>
    mbedtls_poly1305_init(&ctx->poly1305_ctx);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	3384      	adds	r3, #132	; 0x84
 8007b46:	4618      	mov	r0, r3
 8007b48:	f007 fb23 	bl	800f192 <mbedtls_poly1305_init>
    ctx->aad_len        = 0U;
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	f04f 0200 	mov.w	r2, #0
 8007b52:	f04f 0300 	mov.w	r3, #0
 8007b56:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	f04f 0200 	mov.w	r2, #0
 8007b60:	f04f 0300 	mov.w	r3, #0
 8007b64:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <mbedtls_chachapoly_free>:

void mbedtls_chachapoly_free(mbedtls_chachapoly_context *ctx)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d01f      	beq.n	8007bce <mbedtls_chachapoly_free+0x4e>
        return;
    }

    mbedtls_chacha20_free(&ctx->chacha20_ctx);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff fe3b 	bl	800780c <mbedtls_chacha20_free>
    mbedtls_poly1305_free(&ctx->poly1305_ctx);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	3384      	adds	r3, #132	; 0x84
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f007 fb05 	bl	800f1aa <mbedtls_poly1305_free>
    ctx->aad_len        = 0U;
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	f04f 0200 	mov.w	r2, #0
 8007ba6:	f04f 0300 	mov.w	r3, #0
 8007baa:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8007bcc:	e000      	b.n	8007bd0 <mbedtls_chachapoly_free+0x50>
        return;
 8007bce:	bf00      	nop
}
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <mbedtls_chachapoly_setkey>:

int mbedtls_chachapoly_setkey(mbedtls_chachapoly_context *ctx,
                              const unsigned char key[32])
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8007be0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007be4:	60fb      	str	r3, [r7, #12]

    ret = mbedtls_chacha20_setkey(&ctx->chacha20_ctx, key);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7ff fe1e 	bl	800782c <mbedtls_chacha20_setkey>
 8007bf0:	60f8      	str	r0, [r7, #12]

    return ret;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <mbedtls_chachapoly_update>:

int mbedtls_chachapoly_update(mbedtls_chachapoly_context *ctx,
                              size_t len,
                              const unsigned char *input,
                              unsigned char *output)
{
 8007bfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007c00:	b086      	sub	sp, #24
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	607a      	str	r2, [r7, #4]
 8007c0a:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8007c0c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007c10:	617b      	str	r3, [r7, #20]

    if ((ctx->state != CHACHAPOLY_STATE_AAD) &&
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d007      	beq.n	8007c2c <mbedtls_chachapoly_update+0x30>
        (ctx->state != CHACHAPOLY_STATE_CIPHERTEXT)) {
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if ((ctx->state != CHACHAPOLY_STATE_AAD) &&
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d002      	beq.n	8007c2c <mbedtls_chachapoly_update+0x30>
        return MBEDTLS_ERR_CHACHAPOLY_BAD_STATE;
 8007c26:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007c2a:	e057      	b.n	8007cdc <mbedtls_chachapoly_update+0xe0>
    }

    if (ctx->state == CHACHAPOLY_STATE_AAD) {
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d10c      	bne.n	8007c50 <mbedtls_chachapoly_update+0x54>
        ctx->state = CHACHAPOLY_STATE_CIPHERTEXT;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

        ret = chachapoly_pad_aad(ctx);
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7ff ff50 	bl	8007ae4 <chachapoly_pad_aad>
 8007c44:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <mbedtls_chachapoly_update+0x54>
            return ret;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	e045      	b.n	8007cdc <mbedtls_chachapoly_update+0xe0>
        }
    }

    ctx->ciphertext_len += len;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8007c56:	68b9      	ldr	r1, [r7, #8]
 8007c58:	2000      	movs	r0, #0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	eb12 0804 	adds.w	r8, r2, r4
 8007c62:	eb43 0905 	adc.w	r9, r3, r5
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	e9c3 8936 	strd	r8, r9, [r3, #216]	; 0xd8

    if (ctx->mode == MBEDTLS_CHACHAPOLY_ENCRYPT) {
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d118      	bne.n	8007ca8 <mbedtls_chachapoly_update+0xac>
        ret = mbedtls_chacha20_update(&ctx->chacha20_ctx, len, input, output);
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	f7ff fe3d 	bl	80078fc <mbedtls_chacha20_update>
 8007c82:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <mbedtls_chachapoly_update+0x92>
            return ret;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	e026      	b.n	8007cdc <mbedtls_chachapoly_update+0xe0>
        }

        ret = mbedtls_poly1305_update(&ctx->poly1305_ctx, output, len);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3384      	adds	r3, #132	; 0x84
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f007 fa97 	bl	800f1ca <mbedtls_poly1305_update>
 8007c9c:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01a      	beq.n	8007cda <mbedtls_chachapoly_update+0xde>
            return ret;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	e019      	b.n	8007cdc <mbedtls_chachapoly_update+0xe0>
        }
    } else { /* DECRYPT */
        ret = mbedtls_poly1305_update(&ctx->poly1305_ctx, input, len);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3384      	adds	r3, #132	; 0x84
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f007 fa8a 	bl	800f1ca <mbedtls_poly1305_update>
 8007cb6:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <mbedtls_chachapoly_update+0xc6>
            return ret;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	e00c      	b.n	8007cdc <mbedtls_chachapoly_update+0xe0>
        }

        ret = mbedtls_chacha20_update(&ctx->chacha20_ctx, len, input, output);
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	f7ff fe17 	bl	80078fc <mbedtls_chacha20_update>
 8007cce:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <mbedtls_chachapoly_update+0xde>
            return ret;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	e000      	b.n	8007cdc <mbedtls_chachapoly_update+0xe0>
        }
    }

    return 0;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007ce6 <mbedtls_cipher_info_get_key_bitlen>:
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <mbedtls_cipher_info_get_key_bitlen+0x12>
        return 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	e005      	b.n	8007d04 <mbedtls_cipher_info_get_key_bitlen+0x1e>
        return ((size_t) info->MBEDTLS_PRIVATE(key_bitlen)) << MBEDTLS_KEY_BITLEN_SHIFT;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	795b      	ldrb	r3, [r3, #5]
 8007cfc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	019b      	lsls	r3, r3, #6
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <mbedtls_cipher_get_block_size>:
 * \return       \c 1 if the cipher is a stream cipher.
 * \return       \c 0 if \p ctx has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
    if (ctx->MBEDTLS_PRIVATE(cipher_info) == NULL) {
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <mbedtls_cipher_get_block_size+0x14>
        return 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	e005      	b.n	8007d30 <mbedtls_cipher_get_block_size+0x20>
    }

    return (unsigned int) ctx->MBEDTLS_PRIVATE(cipher_info)->MBEDTLS_PRIVATE(block_size);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	791b      	ldrb	r3, [r3, #4]
 8007d2a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007d2e:	b2db      	uxtb	r3, r3
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <mbedtls_cipher_get_base>:

static int supported_init = 0;

static inline const mbedtls_cipher_base_t *mbedtls_cipher_get_base(
    const mbedtls_cipher_info_t *info)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
    return mbedtls_cipher_base_lookup_table[info->base_idx];
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	79db      	ldrb	r3, [r3, #7]
 8007d48:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	461a      	mov	r2, r3
 8007d50:	4b04      	ldr	r3, [pc, #16]	; (8007d64 <mbedtls_cipher_get_base+0x28>)
 8007d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	20000004 	.word	0x20000004

08007d68 <mbedtls_cipher_info_from_type>:
    return mbedtls_cipher_supported;
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type(
    const mbedtls_cipher_type_t cipher_type)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	71fb      	strb	r3, [r7, #7]
    const mbedtls_cipher_definition_t *def;

    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 8007d72:	4b0c      	ldr	r3, [pc, #48]	; (8007da4 <mbedtls_cipher_info_from_type+0x3c>)
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	e00a      	b.n	8007d8e <mbedtls_cipher_info_from_type+0x26>
        if (def->type == cipher_type) {
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	79fa      	ldrb	r2, [r7, #7]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d102      	bne.n	8007d88 <mbedtls_cipher_info_from_type+0x20>
            return def->info;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	e007      	b.n	8007d98 <mbedtls_cipher_info_from_type+0x30>
    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f0      	bne.n	8007d78 <mbedtls_cipher_info_from_type+0x10>
        }
    }

    return NULL;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	0801f3fc 	.word	0x0801f3fc

08007da8 <mbedtls_cipher_info_from_values>:

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values(
    const mbedtls_cipher_id_t cipher_id,
    int key_bitlen,
    const mbedtls_cipher_mode_t mode)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	6039      	str	r1, [r7, #0]
 8007db2:	71fb      	strb	r3, [r7, #7]
 8007db4:	4613      	mov	r3, r2
 8007db6:	71bb      	strb	r3, [r7, #6]
    const mbedtls_cipher_definition_t *def;

    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 8007db8:	4b17      	ldr	r3, [pc, #92]	; (8007e18 <mbedtls_cipher_info_from_values+0x70>)
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	e022      	b.n	8007e04 <mbedtls_cipher_info_from_values+0x5c>
        if (mbedtls_cipher_get_base(def->info)->cipher == cipher_id &&
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7ff ffba 	bl	8007d3c <mbedtls_cipher_get_base>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	79fa      	ldrb	r2, [r7, #7]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d115      	bne.n	8007dfe <mbedtls_cipher_info_from_values+0x56>
            mbedtls_cipher_info_get_key_bitlen(def->info) == (unsigned) key_bitlen &&
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff ff85 	bl	8007ce6 <mbedtls_cipher_info_get_key_bitlen>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	683b      	ldr	r3, [r7, #0]
        if (mbedtls_cipher_get_base(def->info)->cipher == cipher_id &&
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d10c      	bne.n	8007dfe <mbedtls_cipher_info_from_values+0x56>
            def->info->mode == mode) {
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	795b      	ldrb	r3, [r3, #5]
 8007dea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	461a      	mov	r2, r3
            mbedtls_cipher_info_get_key_bitlen(def->info) == (unsigned) key_bitlen &&
 8007df2:	79bb      	ldrb	r3, [r7, #6]
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d102      	bne.n	8007dfe <mbedtls_cipher_info_from_values+0x56>
            return def->info;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	e007      	b.n	8007e0e <mbedtls_cipher_info_from_values+0x66>
    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3308      	adds	r3, #8
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1d8      	bne.n	8007dbe <mbedtls_cipher_info_from_values+0x16>
        }
    }

    return NULL;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	0801f3fc 	.word	0x0801f3fc

08007e1c <mbedtls_cipher_init>:
    }
}
#endif /* MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_DEPRECATED_REMOVED */

void mbedtls_cipher_init(mbedtls_cipher_context_t *ctx)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_cipher_context_t));
 8007e24:	2244      	movs	r2, #68	; 0x44
 8007e26:	2100      	movs	r1, #0
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f015 f9c7 	bl	801d1bc <memset>
}
 8007e2e:	bf00      	nop
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <mbedtls_cipher_free>:

void mbedtls_cipher_free(mbedtls_cipher_context_t *ctx)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01d      	beq.n	8007e80 <mbedtls_cipher_free+0x4a>
        return;
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_DEPRECATED_REMOVED */

#if defined(MBEDTLS_CMAC_C)
    if (ctx->cmac_ctx) {
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <mbedtls_cipher_free+0x22>
        mbedtls_zeroize_and_free(ctx->cmac_ctx,
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e50:	2124      	movs	r1, #36	; 0x24
 8007e52:	4618      	mov	r0, r3
 8007e54:	f006 fd8e 	bl	800e974 <mbedtls_zeroize_and_free>
                                 sizeof(mbedtls_cmac_context_t));
    }
#endif

    if (ctx->cipher_ctx) {
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <mbedtls_cipher_free+0x40>
        mbedtls_cipher_get_base(ctx->cipher_info)->ctx_free_func(ctx->cipher_ctx);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff ff69 	bl	8007d3c <mbedtls_cipher_get_base>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007e72:	4610      	mov	r0, r2
 8007e74:	4798      	blx	r3
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_cipher_context_t));
 8007e76:	2144      	movs	r1, #68	; 0x44
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f006 fd57 	bl	800e92c <mbedtls_platform_zeroize>
 8007e7e:	e000      	b.n	8007e82 <mbedtls_cipher_free+0x4c>
        return;
 8007e80:	bf00      	nop
}
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup(mbedtls_cipher_context_t *ctx,
                         const mbedtls_cipher_info_t *cipher_info)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
    if (cipher_info == NULL) {
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <mbedtls_cipher_setup+0x14>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007e98:	4b12      	ldr	r3, [pc, #72]	; (8007ee4 <mbedtls_cipher_setup+0x5c>)
 8007e9a:	e01e      	b.n	8007eda <mbedtls_cipher_setup+0x52>
    }

    memset(ctx, 0, sizeof(mbedtls_cipher_context_t));
 8007e9c:	2244      	movs	r2, #68	; 0x44
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f015 f98b 	bl	801d1bc <memset>

    if (mbedtls_cipher_get_base(cipher_info)->ctx_alloc_func != NULL) {
 8007ea6:	6838      	ldr	r0, [r7, #0]
 8007ea8:	f7ff ff48 	bl	8007d3c <mbedtls_cipher_get_base>
 8007eac:	4603      	mov	r3, r0
 8007eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00e      	beq.n	8007ed2 <mbedtls_cipher_setup+0x4a>
        ctx->cipher_ctx = mbedtls_cipher_get_base(cipher_info)->ctx_alloc_func();
 8007eb4:	6838      	ldr	r0, [r7, #0]
 8007eb6:	f7ff ff41 	bl	8007d3c <mbedtls_cipher_get_base>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	4798      	blx	r3
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	63da      	str	r2, [r3, #60]	; 0x3c
        if (ctx->cipher_ctx == NULL) {
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <mbedtls_cipher_setup+0x4a>
            return MBEDTLS_ERR_CIPHER_ALLOC_FAILED;
 8007ece:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <mbedtls_cipher_setup+0x60>)
 8007ed0:	e003      	b.n	8007eda <mbedtls_cipher_setup+0x52>
        }
    }

    ctx->cipher_info = cipher_info;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	601a      	str	r2, [r3, #0]

    return 0;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	ffff9f00 	.word	0xffff9f00
 8007ee8:	ffff9e80 	.word	0xffff9e80

08007eec <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey(mbedtls_cipher_context_t *ctx,
                          const unsigned char *key,
                          int key_bitlen,
                          const mbedtls_operation_t operation)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	70fb      	strb	r3, [r7, #3]
    if (operation != MBEDTLS_ENCRYPT && operation != MBEDTLS_DECRYPT) {
 8007efa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d005      	beq.n	8007f0e <mbedtls_cipher_setkey+0x22>
 8007f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <mbedtls_cipher_setkey+0x22>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007f0a:	4b33      	ldr	r3, [pc, #204]	; (8007fd8 <mbedtls_cipher_setkey+0xec>)
 8007f0c:	e060      	b.n	8007fd0 <mbedtls_cipher_setkey+0xe4>
    }
    if (ctx->cipher_info == NULL) {
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <mbedtls_cipher_setkey+0x2e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007f16:	4b30      	ldr	r3, [pc, #192]	; (8007fd8 <mbedtls_cipher_setkey+0xec>)
 8007f18:	e05a      	b.n	8007fd0 <mbedtls_cipher_setkey+0xe4>
        ctx->operation = operation;
        return 0;
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_DEPRECATED_REMOVED */

    if ((ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN) == 0 &&
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	79db      	ldrb	r3, [r3, #7]
 8007f20:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10b      	bne.n	8007f46 <mbedtls_cipher_setkey+0x5a>
        (int) mbedtls_cipher_info_get_key_bitlen(ctx->cipher_info) != key_bitlen) {
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff fed7 	bl	8007ce6 <mbedtls_cipher_info_get_key_bitlen>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	461a      	mov	r2, r3
    if ((ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN) == 0 &&
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d001      	beq.n	8007f46 <mbedtls_cipher_setkey+0x5a>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007f42:	4b25      	ldr	r3, [pc, #148]	; (8007fd8 <mbedtls_cipher_setkey+0xec>)
 8007f44:	e044      	b.n	8007fd0 <mbedtls_cipher_setkey+0xe4>
    }

    ctx->key_bitlen = key_bitlen;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	605a      	str	r2, [r3, #4]
    ctx->operation = operation;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	78fa      	ldrb	r2, [r7, #3]
 8007f50:	721a      	strb	r2, [r3, #8]

#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if (MBEDTLS_ENCRYPT == operation ||
 8007f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d017      	beq.n	8007f8a <mbedtls_cipher_setkey+0x9e>
        MBEDTLS_MODE_CFB == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode) ||
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	795b      	ldrb	r3, [r3, #5]
 8007f60:	f023 030f 	bic.w	r3, r3, #15
 8007f64:	b2db      	uxtb	r3, r3
    if (MBEDTLS_ENCRYPT == operation ||
 8007f66:	2b30      	cmp	r3, #48	; 0x30
 8007f68:	d00f      	beq.n	8007f8a <mbedtls_cipher_setkey+0x9e>
        MBEDTLS_MODE_OFB == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode) ||
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	795b      	ldrb	r3, [r3, #5]
 8007f70:	f023 030f 	bic.w	r3, r3, #15
 8007f74:	b2db      	uxtb	r3, r3
        MBEDTLS_MODE_CFB == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode) ||
 8007f76:	2b40      	cmp	r3, #64	; 0x40
 8007f78:	d007      	beq.n	8007f8a <mbedtls_cipher_setkey+0x9e>
        MBEDTLS_MODE_CTR == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode)) {
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	795b      	ldrb	r3, [r3, #5]
 8007f80:	f023 030f 	bic.w	r3, r3, #15
 8007f84:	b2db      	uxtb	r3, r3
        MBEDTLS_MODE_OFB == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode) ||
 8007f86:	2b50      	cmp	r3, #80	; 0x50
 8007f88:	d10e      	bne.n	8007fa8 <mbedtls_cipher_setkey+0xbc>
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_enc_func(ctx->cipher_ctx, key,
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff fed4 	bl	8007d3c <mbedtls_cipher_get_base>
 8007f94:	4603      	mov	r3, r0
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                                                                          ctx->key_bitlen);
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	6852      	ldr	r2, [r2, #4]
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_enc_func(ctx->cipher_ctx, key,
 8007fa0:	68b9      	ldr	r1, [r7, #8]
 8007fa2:	4798      	blx	r3
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	e013      	b.n	8007fd0 <mbedtls_cipher_setkey+0xe4>
    }

    if (MBEDTLS_DECRYPT == operation) {
 8007fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10e      	bne.n	8007fce <mbedtls_cipher_setkey+0xe2>
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_dec_func(ctx->cipher_ctx, key,
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff fec1 	bl	8007d3c <mbedtls_cipher_get_base>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                                                                          ctx->key_bitlen);
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	6852      	ldr	r2, [r2, #4]
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_dec_func(ctx->cipher_ctx, key,
 8007fc6:	68b9      	ldr	r1, [r7, #8]
 8007fc8:	4798      	blx	r3
 8007fca:	4603      	mov	r3, r0
 8007fcc:	e000      	b.n	8007fd0 <mbedtls_cipher_setkey+0xe4>
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_enc_func(ctx->cipher_ctx, key,
                                                                          ctx->key_bitlen);
    }
#endif

    return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007fce:	4b02      	ldr	r3, [pc, #8]	; (8007fd8 <mbedtls_cipher_setkey+0xec>)
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	ffff9f00 	.word	0xffff9f00

08007fdc <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update(mbedtls_cipher_context_t *ctx, const unsigned char *input,
                          size_t ilen, unsigned char *output, size_t *olen)
{
 8007fdc:	b5b0      	push	{r4, r5, r7, lr}
 8007fde:	b08c      	sub	sp, #48	; 0x30
 8007fe0:	af04      	add	r7, sp, #16
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8007fea:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007fee:	61bb      	str	r3, [r7, #24]
    size_t block_size;

    if (ctx->cipher_info == NULL) {
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <mbedtls_cipher_update+0x20>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007ff8:	4b7f      	ldr	r3, [pc, #508]	; (80081f8 <mbedtls_cipher_update+0x21c>)
 8007ffa:	e241      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
         * accessible through the cipher layer. */
        return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_DEPRECATED_REMOVED */

    *olen = 0;
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
    block_size = mbedtls_cipher_get_block_size(ctx);
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7ff fe84 	bl	8007d10 <mbedtls_cipher_get_block_size>
 8008008:	6178      	str	r0, [r7, #20]
    if (0 == block_size) {
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <mbedtls_cipher_update+0x38>
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 8008010:	4b7a      	ldr	r3, [pc, #488]	; (80081fc <mbedtls_cipher_update+0x220>)
 8008012:	e235      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
    }

    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_ECB) {
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	795b      	ldrb	r3, [r3, #5]
 800801a:	f023 030f 	bic.w	r3, r3, #15
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b10      	cmp	r3, #16
 8008022:	d11f      	bne.n	8008064 <mbedtls_cipher_update+0x88>
        if (ilen != block_size) {
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	429a      	cmp	r2, r3
 800802a:	d001      	beq.n	8008030 <mbedtls_cipher_update+0x54>
            return MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED;
 800802c:	4b74      	ldr	r3, [pc, #464]	; (8008200 <mbedtls_cipher_update+0x224>)
 800802e:	e227      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	601a      	str	r2, [r3, #0]

        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ecb_func(ctx->cipher_ctx,
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff fe7e 	bl	8007d3c <mbedtls_cipher_get_base>
 8008040:	4603      	mov	r3, r0
 8008042:	685c      	ldr	r4, [r3, #4]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f993 1008 	ldrsb.w	r1, [r3, #8]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	47a0      	blx	r4
 8008054:	61b8      	str	r0, [r7, #24]
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <mbedtls_cipher_update+0x84>
                                                                            ctx->operation, input,
                                                                            output))) {
            return ret;
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	e20f      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
        }

        return 0;
 8008060:	2300      	movs	r3, #0
 8008062:	e20d      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
    }

#if defined(MBEDTLS_GCM_C)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_GCM) {
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	795b      	ldrb	r3, [r3, #5]
 800806a:	f023 030f 	bic.w	r3, r3, #15
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b60      	cmp	r3, #96	; 0x60
 8008072:	d10c      	bne.n	800808e <mbedtls_cipher_update+0xb2>
        return mbedtls_gcm_update((mbedtls_gcm_context *) ctx->cipher_ctx,
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	68b9      	ldr	r1, [r7, #8]
 8008086:	f004 fc4f 	bl	800c928 <mbedtls_gcm_update>
 800808a:	4603      	mov	r3, r0
 800808c:	e1f8      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
                                  output, ilen, olen);
    }
#endif

#if defined(MBEDTLS_CCM_C)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_CCM_STAR_NO_TAG) {
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	795b      	ldrb	r3, [r3, #5]
 8008094:	f023 030f 	bic.w	r3, r3, #15
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b90      	cmp	r3, #144	; 0x90
 800809c:	d10c      	bne.n	80080b8 <mbedtls_cipher_update+0xdc>
        return mbedtls_ccm_update((mbedtls_ccm_context *) ctx->cipher_ctx,
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	68b9      	ldr	r1, [r7, #8]
 80080b0:	f7ff f828 	bl	8007104 <mbedtls_ccm_update>
 80080b4:	4603      	mov	r3, r0
 80080b6:	e1e3      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
                                  output, ilen, olen);
    }
#endif

#if defined(MBEDTLS_CHACHAPOLY_C)
    if (((mbedtls_cipher_type_t) ctx->cipher_info->type) == MBEDTLS_CIPHER_CHACHA20_POLY1305) {
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	799b      	ldrb	r3, [r3, #6]
 80080be:	2b4d      	cmp	r3, #77	; 0x4d
 80080c0:	d10b      	bne.n	80080da <mbedtls_cipher_update+0xfe>
        *olen = ilen;
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	601a      	str	r2, [r3, #0]
        return mbedtls_chachapoly_update((mbedtls_chachapoly_context *) ctx->cipher_ctx,
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	f7ff fd93 	bl	8007bfc <mbedtls_chachapoly_update>
 80080d6:	4603      	mov	r3, r0
 80080d8:	e1d2      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
                                         ilen, input, output);
    }
#endif

    if (input == output &&
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d10f      	bne.n	8008102 <mbedtls_cipher_update+0x126>
        (ctx->unprocessed_len != 0 || ilen % block_size)) {
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (input == output &&
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d109      	bne.n	80080fe <mbedtls_cipher_update+0x122>
        (ctx->unprocessed_len != 0 || ilen % block_size)) {
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80080f2:	6979      	ldr	r1, [r7, #20]
 80080f4:	fb01 f202 	mul.w	r2, r1, r2
 80080f8:	1a9b      	subs	r3, r3, r2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <mbedtls_cipher_update+0x126>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 80080fe:	4b3e      	ldr	r3, [pc, #248]	; (80081f8 <mbedtls_cipher_update+0x21c>)
 8008100:	e1be      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_CBC) {
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	795b      	ldrb	r3, [r3, #5]
 8008108:	f023 030f 	bic.w	r3, r3, #15
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b20      	cmp	r3, #32
 8008110:	f040 80e4 	bne.w	80082dc <mbedtls_cipher_update+0x300>
        size_t copy_len = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	61fb      	str	r3, [r7, #28]

        /*
         * If there is not enough data for a full block, cache it.
         */
        if ((ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10a      	bne.n	8008138 <mbedtls_cipher_update+0x15c>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d006      	beq.n	8008138 <mbedtls_cipher_update+0x15c>
             ilen <= block_size - ctx->unprocessed_len) ||
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	1ad3      	subs	r3, r2, r3
        if ((ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	429a      	cmp	r2, r3
 8008136:	d91b      	bls.n	8008170 <mbedtls_cipher_update+0x194>
            (ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f993 3008 	ldrsb.w	r3, [r3, #8]
             ilen <= block_size - ctx->unprocessed_len) ||
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10a      	bne.n	8008158 <mbedtls_cipher_update+0x17c>
            (ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d106      	bne.n	8008158 <mbedtls_cipher_update+0x17c>
             ilen < block_size - ctx->unprocessed_len) ||
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	1ad3      	subs	r3, r2, r3
            (ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	429a      	cmp	r2, r3
 8008156:	d30b      	bcc.n	8008170 <mbedtls_cipher_update+0x194>
            (ctx->operation == MBEDTLS_ENCRYPT &&
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f993 3008 	ldrsb.w	r3, [r3, #8]
             ilen < block_size - ctx->unprocessed_len) ||
 800815e:	2b01      	cmp	r3, #1
 8008160:	d119      	bne.n	8008196 <mbedtls_cipher_update+0x1ba>
             ilen < block_size - ctx->unprocessed_len)) {
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	1ad3      	subs	r3, r2, r3
            (ctx->operation == MBEDTLS_ENCRYPT &&
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	429a      	cmp	r2, r3
 800816e:	d212      	bcs.n	8008196 <mbedtls_cipher_update+0x1ba>
            memcpy(&(ctx->unprocessed_data[ctx->unprocessed_len]), input,
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	3310      	adds	r3, #16
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	4413      	add	r3, r2
 800817a:	3304      	adds	r3, #4
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	4618      	mov	r0, r3
 8008182:	f015 f8b9 	bl	801d2f8 <memcpy>
                   ilen);

            ctx->unprocessed_len += ilen;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	441a      	add	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	625a      	str	r2, [r3, #36]	; 0x24
            return 0;
 8008192:	2300      	movs	r3, #0
 8008194:	e174      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
        }

        /*
         * Process cached data first
         */
        if (0 != ctx->unprocessed_len) {
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	2b00      	cmp	r3, #0
 800819c:	d047      	beq.n	800822e <mbedtls_cipher_update+0x252>
            copy_len = block_size - ctx->unprocessed_len;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	61fb      	str	r3, [r7, #28]

            memcpy(&(ctx->unprocessed_data[ctx->unprocessed_len]), input,
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	3310      	adds	r3, #16
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4413      	add	r3, r2
 80081b2:	3304      	adds	r3, #4
 80081b4:	69fa      	ldr	r2, [r7, #28]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f015 f89d 	bl	801d2f8 <memcpy>
                   copy_len);

            if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cbc_func(ctx->cipher_ctx,
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff fdba 	bl	8007d3c <mbedtls_cipher_get_base>
 80081c8:	4603      	mov	r3, r0
 80081ca:	689c      	ldr	r4, [r3, #8]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                                                ctx->operation,
                                                                                block_size, ctx->iv,
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f103 0528 	add.w	r5, r3, #40	; 0x28
                                                                                ctx->
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	3314      	adds	r3, #20
            if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cbc_func(ctx->cipher_ctx,
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	9201      	str	r2, [sp, #4]
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	462b      	mov	r3, r5
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	47a0      	blx	r4
 80081ec:	61b8      	str	r0, [r7, #24]
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d007      	beq.n	8008204 <mbedtls_cipher_update+0x228>
                                                                                unprocessed_data,
                                                                                output))) {
                return ret;
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	e143      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
 80081f8:	ffff9f00 	.word	0xffff9f00
 80081fc:	ffff9c80 	.word	0xffff9c80
 8008200:	ffff9d80 	.word	0xffff9d80
            }

            *olen += block_size;
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	441a      	add	r2, r3
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	601a      	str	r2, [r3, #0]
            output += block_size;
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	4413      	add	r3, r2
 8008216:	603b      	str	r3, [r7, #0]
            ctx->unprocessed_len = 0;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	625a      	str	r2, [r3, #36]	; 0x24

            input += copy_len;
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	4413      	add	r3, r2
 8008224:	60bb      	str	r3, [r7, #8]
            ilen -= copy_len;
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	607b      	str	r3, [r7, #4]
        }

        /*
         * Cache final, incomplete block
         */
        if (0 != ilen) {
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d02c      	beq.n	800828e <mbedtls_cipher_update+0x2b2>
            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	fbb3 f2f2 	udiv	r2, r3, r2
 800823c:	6979      	ldr	r1, [r7, #20]
 800823e:	fb01 f202 	mul.w	r2, r1, r2
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	61fb      	str	r3, [r7, #28]
            if (copy_len == 0 &&
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <mbedtls_cipher_update+0x286>
                ctx->operation == MBEDTLS_DECRYPT &&
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f993 3008 	ldrsb.w	r3, [r3, #8]
            if (copy_len == 0 &&
 8008252:	2b00      	cmp	r3, #0
 8008254:	d105      	bne.n	8008262 <mbedtls_cipher_update+0x286>
                NULL != ctx->add_padding) {
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	68db      	ldr	r3, [r3, #12]
                ctx->operation == MBEDTLS_DECRYPT &&
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <mbedtls_cipher_update+0x286>
                copy_len = block_size;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	61fb      	str	r3, [r7, #28]
            }

            memcpy(ctx->unprocessed_data, &(input[ilen - copy_len]),
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f103 0014 	add.w	r0, r3, #20
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	4413      	add	r3, r2
 8008272:	69fa      	ldr	r2, [r7, #28]
 8008274:	4619      	mov	r1, r3
 8008276:	f015 f83f 	bl	801d2f8 <memcpy>
                   copy_len);

            ctx->unprocessed_len += copy_len;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	441a      	add	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	625a      	str	r2, [r3, #36]	; 0x24
            ilen -= copy_len;
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	607b      	str	r3, [r7, #4]
        }

        /*
         * Process remaining full blocks
         */
        if (ilen) {
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d021      	beq.n	80082d8 <mbedtls_cipher_update+0x2fc>
            if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cbc_func(ctx->cipher_ctx,
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff fd4f 	bl	8007d3c <mbedtls_cipher_get_base>
 800829e:	4603      	mov	r3, r0
 80082a0:	689c      	ldr	r4, [r3, #8]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                                                ctx->operation,
                                                                                ilen, ctx->iv,
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f103 0228 	add.w	r2, r3, #40	; 0x28
            if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cbc_func(ctx->cipher_ctx,
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	4613      	mov	r3, r2
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	47a0      	blx	r4
 80082c0:	61b8      	str	r0, [r7, #24]
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <mbedtls_cipher_update+0x2f0>
                                                                                input,
                                                                                output))) {
                return ret;
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	e0d9      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
            }

            *olen += ilen;
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	441a      	add	r2, r3
 80082d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d6:	601a      	str	r2, [r3, #0]
        }

        return 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	e0d1      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

#if defined(MBEDTLS_CIPHER_MODE_CFB)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_CFB) {
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	795b      	ldrb	r3, [r3, #5]
 80082e2:	f023 030f 	bic.w	r3, r3, #15
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b30      	cmp	r3, #48	; 0x30
 80082ea:	d123      	bne.n	8008334 <mbedtls_cipher_update+0x358>
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cfb_func(ctx->cipher_ctx,
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7ff fd23 	bl	8007d3c <mbedtls_cipher_get_base>
 80082f6:	4603      	mov	r3, r0
 80082f8:	68dc      	ldr	r4, [r3, #12]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f993 1008 	ldrsb.w	r1, [r3, #8]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f103 0524 	add.w	r5, r3, #36	; 0x24
                                                                            ctx->operation, ilen,
                                                                            &ctx->unprocessed_len,
                                                                            ctx->iv,
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3328      	adds	r3, #40	; 0x28
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cfb_func(ctx->cipher_ctx,
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	9202      	str	r2, [sp, #8]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	9201      	str	r2, [sp, #4]
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	462b      	mov	r3, r5
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	47a0      	blx	r4
 800831e:	61b8      	str	r0, [r7, #24]
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <mbedtls_cipher_update+0x34e>
                                                                            input, output))) {
            return ret;
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	e0aa      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	601a      	str	r2, [r3, #0]

        return 0;
 8008330:	2300      	movs	r3, #0
 8008332:	e0a5      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_OFB) {
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	795b      	ldrb	r3, [r3, #5]
 800833a:	f023 030f 	bic.w	r3, r3, #15
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b40      	cmp	r3, #64	; 0x40
 8008342:	d120      	bne.n	8008386 <mbedtls_cipher_update+0x3aa>
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ofb_func(ctx->cipher_ctx,
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4618      	mov	r0, r3
 800834a:	f7ff fcf7 	bl	8007d3c <mbedtls_cipher_get_base>
 800834e:	4603      	mov	r3, r0
 8008350:	691c      	ldr	r4, [r3, #16]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f103 0224 	add.w	r2, r3, #36	; 0x24
                                                                            ilen,
                                                                            &ctx->unprocessed_len,
                                                                            ctx->iv,
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f103 0128 	add.w	r1, r3, #40	; 0x28
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ofb_func(ctx->cipher_ctx,
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	460b      	mov	r3, r1
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	47a0      	blx	r4
 8008370:	61b8      	str	r0, [r7, #24]
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <mbedtls_cipher_update+0x3a0>
                                                                            input, output))) {
            return ret;
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	e081      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 800837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	601a      	str	r2, [r3, #0]

        return 0;
 8008382:	2300      	movs	r3, #0
 8008384:	e07c      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_OFB */

#if defined(MBEDTLS_CIPHER_MODE_CTR)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_CTR) {
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	795b      	ldrb	r3, [r3, #5]
 800838c:	f023 030f 	bic.w	r3, r3, #15
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b50      	cmp	r3, #80	; 0x50
 8008394:	d124      	bne.n	80083e0 <mbedtls_cipher_update+0x404>
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ctr_func(ctx->cipher_ctx,
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f7ff fcce 	bl	8007d3c <mbedtls_cipher_get_base>
 80083a0:	4603      	mov	r3, r0
 80083a2:	695c      	ldr	r4, [r3, #20]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f103 0124 	add.w	r1, r3, #36	; 0x24
                                                                            ilen,
                                                                            &ctx->unprocessed_len,
                                                                            ctx->iv,
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f103 0528 	add.w	r5, r3, #40	; 0x28
                                                                            ctx->unprocessed_data,
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3314      	adds	r3, #20
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ctr_func(ctx->cipher_ctx,
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	9202      	str	r2, [sp, #8]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	9201      	str	r2, [sp, #4]
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	462b      	mov	r3, r5
 80083c4:	460a      	mov	r2, r1
 80083c6:	6879      	ldr	r1, [r7, #4]
 80083c8:	47a0      	blx	r4
 80083ca:	61b8      	str	r0, [r7, #24]
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <mbedtls_cipher_update+0x3fa>
                                                                            input, output))) {
            return ret;
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	e054      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	601a      	str	r2, [r3, #0]

        return 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	e04f      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_XTS) {
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	795b      	ldrb	r3, [r3, #5]
 80083e6:	f023 030f 	bic.w	r3, r3, #15
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2ba0      	cmp	r3, #160	; 0xa0
 80083ee:	d126      	bne.n	800843e <mbedtls_cipher_update+0x462>
        if (ctx->unprocessed_len > 0) {
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <mbedtls_cipher_update+0x420>
            /* We can only process an entire data unit at a time. */
            return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
 80083f8:	4b23      	ldr	r3, [pc, #140]	; (8008488 <mbedtls_cipher_update+0x4ac>)
 80083fa:	e041      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
        }

        ret = mbedtls_cipher_get_base(ctx->cipher_info)->xts_func(ctx->cipher_ctx,
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff fc9b 	bl	8007d3c <mbedtls_cipher_get_base>
 8008406:	4603      	mov	r3, r0
 8008408:	699c      	ldr	r4, [r3, #24]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                                  ctx->operation,
                                                                  ilen,
                                                                  ctx->iv,
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f103 0228 	add.w	r2, r3, #40	; 0x28
        ret = mbedtls_cipher_get_base(ctx->cipher_info)->xts_func(ctx->cipher_ctx,
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	4613      	mov	r3, r2
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	47a0      	blx	r4
 8008428:	61b8      	str	r0, [r7, #24]
                                                                  input,
                                                                  output);
        if (ret != 0) {
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <mbedtls_cipher_update+0x458>
            return ret;
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	e025      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	601a      	str	r2, [r3, #0]

        return 0;
 800843a:	2300      	movs	r3, #0
 800843c:	e020      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_CIPHER_MODE_STREAM)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_STREAM) {
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	795b      	ldrb	r3, [r3, #5]
 8008444:	f023 030f 	bic.w	r3, r3, #15
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b70      	cmp	r3, #112	; 0x70
 800844c:	d117      	bne.n	800847e <mbedtls_cipher_update+0x4a2>
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->stream_func(ctx->cipher_ctx,
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff fc72 	bl	8007d3c <mbedtls_cipher_get_base>
 8008458:	4603      	mov	r3, r0
 800845a:	69dc      	ldr	r4, [r3, #28]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	47a0      	blx	r4
 8008468:	61b8      	str	r0, [r7, #24]
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <mbedtls_cipher_update+0x498>
                                                                               ilen, input,
                                                                               output))) {
            return ret;
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	e005      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8008474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	601a      	str	r2, [r3, #0]

        return 0;
 800847a:	2300      	movs	r3, #0
 800847c:	e000      	b.n	8008480 <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
 800847e:	4b02      	ldr	r3, [pc, #8]	; (8008488 <mbedtls_cipher_update+0x4ac>)
}
 8008480:	4618      	mov	r0, r3
 8008482:	3720      	adds	r7, #32
 8008484:	46bd      	mov	sp, r7
 8008486:	bdb0      	pop	{r4, r5, r7, pc}
 8008488:	ffff9f80 	.word	0xffff9f80

0800848c <gcm_ctx_alloc>:
#if defined(MBEDTLS_GCM_C) && \
    (defined(MBEDTLS_CIPHER_HAVE_GCM_AES_VIA_LEGACY_OR_USE_PSA) || \
    defined(MBEDTLS_ARIA_C) || defined(MBEDTLS_CAMELLIA_C))
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc(void)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc(1, sizeof(mbedtls_gcm_context));
 8008492:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008496:	2001      	movs	r0, #1
 8008498:	f013 ffa0 	bl	801c3dc <calloc>
 800849c:	4603      	mov	r3, r0
 800849e:	607b      	str	r3, [r7, #4]

    if (ctx != NULL) {
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <gcm_ctx_alloc+0x20>
        mbedtls_gcm_init((mbedtls_gcm_context *) ctx);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f003 fc36 	bl	800bd18 <mbedtls_gcm_init>
    }

    return ctx;
 80084ac:	687b      	ldr	r3, [r7, #4]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <gcm_ctx_free>:

static void gcm_ctx_free(void *ctx)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
    mbedtls_gcm_free(ctx);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f004 fb6a 	bl	800cb98 <mbedtls_gcm_free>
    mbedtls_free(ctx);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f013 ffaf 	bl	801c428 <free>
}
 80084ca:	bf00      	nop
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <ccm_ctx_alloc>:
#if defined(MBEDTLS_CCM_C) && \
    (defined(MBEDTLS_CIPHER_HAVE_CCM_AES_VIA_LEGACY_OR_USE_PSA) || \
    defined(MBEDTLS_ARIA_C) || defined(MBEDTLS_CAMELLIA_C))
/* shared by all CCM ciphers */
static void *ccm_ctx_alloc(void)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b082      	sub	sp, #8
 80084d6:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc(1, sizeof(mbedtls_ccm_context));
 80084d8:	2180      	movs	r1, #128	; 0x80
 80084da:	2001      	movs	r0, #1
 80084dc:	f013 ff7e 	bl	801c3dc <calloc>
 80084e0:	4603      	mov	r3, r0
 80084e2:	607b      	str	r3, [r7, #4]

    if (ctx != NULL) {
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <ccm_ctx_alloc+0x1e>
        mbedtls_ccm_init((mbedtls_ccm_context *) ctx);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7fe fd1a 	bl	8006f24 <mbedtls_ccm_init>
    }

    return ctx;
 80084f0:	687b      	ldr	r3, [r7, #4]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <ccm_ctx_free>:

static void ccm_ctx_free(void *ctx)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b082      	sub	sp, #8
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
    mbedtls_ccm_free(ctx);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7fe fd60 	bl	8006fc8 <mbedtls_ccm_free>
    mbedtls_free(ctx);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f013 ff8d 	bl	801c428 <free>
}
 800850e:	bf00      	nop
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                              const unsigned char *input, unsigned char *output)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	603b      	str	r3, [r7, #0]
 8008522:	460b      	mov	r3, r1
 8008524:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_ecb((mbedtls_aes_context *) ctx, operation, input, output);
 8008526:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7fb fbde 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 8008534:	4603      	mov	r3, r0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <aes_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
                              unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b086      	sub	sp, #24
 8008542:	af02      	add	r7, sp, #8
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
 800854a:	460b      	mov	r3, r1
 800854c:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cbc((mbedtls_aes_context *) ctx, operation, length, iv, input,
 800854e:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f7fb fbea 	bl	8003d38 <mbedtls_aes_crypt_cbc>
 8008564:	4603      	mov	r3, r0
                                 output);
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <aes_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int aes_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
                                 size_t length, size_t *iv_off, unsigned char *iv,
                                 const unsigned char *input, unsigned char *output)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b088      	sub	sp, #32
 8008572:	af04      	add	r7, sp, #16
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
 800857a:	460b      	mov	r3, r1
 800857c:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cfb128((mbedtls_aes_context *) ctx, operation, length, iv_off, iv,
 800857e:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	9302      	str	r3, [sp, #8]
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f7fc f930 	bl	80047f8 <mbedtls_aes_crypt_cfb128>
 8008598:	4603      	mov	r3, r0
                                    input, output);
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <aes_crypt_ofb_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
static int aes_crypt_ofb_wrap(void *ctx, size_t length, size_t *iv_off,
                              unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b086      	sub	sp, #24
 80085a6:	af02      	add	r7, sp, #8
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	607a      	str	r2, [r7, #4]
 80085ae:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ofb((mbedtls_aes_context *) ctx, length, iv_off,
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	9301      	str	r3, [sp, #4]
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7fc f9a3 	bl	800490a <mbedtls_aes_crypt_ofb>
 80085c4:	4603      	mov	r3, r0
                                 iv, input, output);
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <aes_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int aes_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
                              unsigned char *nonce_counter, unsigned char *stream_block,
                              const unsigned char *input, unsigned char *output)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b088      	sub	sp, #32
 80085d2:	af04      	add	r7, sp, #16
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	607a      	str	r2, [r7, #4]
 80085da:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ctr((mbedtls_aes_context *) ctx, length, nc_off, nonce_counter,
 80085dc:	6a3b      	ldr	r3, [r7, #32]
 80085de:	9302      	str	r3, [sp, #8]
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	9301      	str	r3, [sp, #4]
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f7fc f9cc 	bl	800498c <mbedtls_aes_crypt_ctr>
 80085f4:	4603      	mov	r3, r0
                                 stream_block, input, output);
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <aes_crypt_xts_wrap>:
static int aes_crypt_xts_wrap(void *ctx, mbedtls_operation_t operation,
                              size_t length,
                              const unsigned char data_unit[16],
                              const unsigned char *input,
                              unsigned char *output)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af02      	add	r7, sp, #8
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	607a      	str	r2, [r7, #4]
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	460b      	mov	r3, r1
 800860e:	72fb      	strb	r3, [r7, #11]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	613b      	str	r3, [r7, #16]
    int mode;

    switch (operation) {
 8008614:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d004      	beq.n	8008626 <aes_crypt_xts_wrap+0x26>
 800861c:	2b01      	cmp	r3, #1
 800861e:	d105      	bne.n	800862c <aes_crypt_xts_wrap+0x2c>
        case MBEDTLS_ENCRYPT:
            mode = MBEDTLS_AES_ENCRYPT;
 8008620:	2301      	movs	r3, #1
 8008622:	617b      	str	r3, [r7, #20]
            break;
 8008624:	e004      	b.n	8008630 <aes_crypt_xts_wrap+0x30>
        case MBEDTLS_DECRYPT:
            mode = MBEDTLS_AES_DECRYPT;
 8008626:	2300      	movs	r3, #0
 8008628:	617b      	str	r3, [r7, #20]
            break;
 800862a:	e001      	b.n	8008630 <aes_crypt_xts_wrap+0x30>
        default:
            return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800862c:	4b08      	ldr	r3, [pc, #32]	; (8008650 <aes_crypt_xts_wrap+0x50>)
 800862e:	e00a      	b.n	8008646 <aes_crypt_xts_wrap+0x46>
    }

    return mbedtls_aes_crypt_xts(xts_ctx, mode, length,
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6979      	ldr	r1, [r7, #20]
 800863e:	6938      	ldr	r0, [r7, #16]
 8008640:	f7fb fd17 	bl	8004072 <mbedtls_aes_crypt_xts>
 8008644:	4603      	mov	r3, r0
                                 data_unit, input, output);
}
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	ffff9f00 	.word	0xffff9f00

08008654 <aes_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
static int aes_setkey_dec_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_dec((mbedtls_aes_context *) ctx, key, key_bitlen);
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	68b9      	ldr	r1, [r7, #8]
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f7fa fbad 	bl	8002dc4 <mbedtls_aes_setkey_dec>
 800866a:	4603      	mov	r3, r0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <aes_setkey_enc_wrap>:
#endif

static int aes_setkey_enc_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_enc((mbedtls_aes_context *) ctx, key, key_bitlen);
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7fa f9b7 	bl	80029f8 <mbedtls_aes_setkey_enc>
 800868a:	4603      	mov	r3, r0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <aes_ctx_alloc>:

static void *aes_ctx_alloc(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
    mbedtls_aes_context *aes = mbedtls_calloc(1, sizeof(mbedtls_aes_context));
 800869a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800869e:	2001      	movs	r0, #1
 80086a0:	f013 fe9c 	bl	801c3dc <calloc>
 80086a4:	4603      	mov	r3, r0
 80086a6:	607b      	str	r3, [r7, #4]

    if (aes == NULL) {
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <aes_ctx_alloc+0x1e>
        return NULL;
 80086ae:	2300      	movs	r3, #0
 80086b0:	e003      	b.n	80086ba <aes_ctx_alloc+0x26>
    }

    mbedtls_aes_init(aes);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7fa f94e 	bl	8002954 <mbedtls_aes_init>

    return aes;
 80086b8:	687b      	ldr	r3, [r7, #4]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <aes_ctx_free>:

static void aes_ctx_free(void *ctx)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
    mbedtls_aes_free((mbedtls_aes_context *) ctx);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7fa f950 	bl	8002970 <mbedtls_aes_free>
    mbedtls_free(ctx);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f013 fea9 	bl	801c428 <free>
}
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <xts_aes_setkey_enc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
static int xts_aes_setkey_enc_wrap(void *ctx, const unsigned char *key,
                                   unsigned int key_bitlen)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b086      	sub	sp, #24
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	617b      	str	r3, [r7, #20]
    return mbedtls_aes_xts_setkey_enc(xts_ctx, key, key_bitlen);
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	68b9      	ldr	r1, [r7, #8]
 80086f2:	6978      	ldr	r0, [r7, #20]
 80086f4:	f7fa fce2 	bl	80030bc <mbedtls_aes_xts_setkey_enc>
 80086f8:	4603      	mov	r3, r0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <xts_aes_setkey_dec_wrap>:

static int xts_aes_setkey_dec_wrap(void *ctx, const unsigned char *key,
                                   unsigned int key_bitlen)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b086      	sub	sp, #24
 8008706:	af00      	add	r7, sp, #0
 8008708:	60f8      	str	r0, [r7, #12]
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	617b      	str	r3, [r7, #20]
    return mbedtls_aes_xts_setkey_dec(xts_ctx, key, key_bitlen);
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	6978      	ldr	r0, [r7, #20]
 8008718:	f7fa fd07 	bl	800312a <mbedtls_aes_xts_setkey_dec>
 800871c:	4603      	mov	r3, r0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <xts_aes_ctx_alloc>:

static void *xts_aes_ctx_alloc(void)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b082      	sub	sp, #8
 800872a:	af00      	add	r7, sp, #0
    mbedtls_aes_xts_context *xts_ctx = mbedtls_calloc(1, sizeof(*xts_ctx));
 800872c:	f44f 710c 	mov.w	r1, #560	; 0x230
 8008730:	2001      	movs	r0, #1
 8008732:	f013 fe53 	bl	801c3dc <calloc>
 8008736:	4603      	mov	r3, r0
 8008738:	607b      	str	r3, [r7, #4]

    if (xts_ctx != NULL) {
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <xts_aes_ctx_alloc+0x20>
        mbedtls_aes_xts_init(xts_ctx);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7fa f926 	bl	8002992 <mbedtls_aes_xts_init>
    }

    return xts_ctx;
 8008746:	687b      	ldr	r3, [r7, #4]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <xts_aes_ctx_free>:

static void xts_aes_ctx_free(void *ctx)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	60fb      	str	r3, [r7, #12]

    if (xts_ctx == NULL) {
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d006      	beq.n	8008770 <xts_aes_ctx_free+0x20>
        return;
    }

    mbedtls_aes_xts_free(xts_ctx);
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7fa f927 	bl	80029b6 <mbedtls_aes_xts_free>
    mbedtls_free(xts_ctx);
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f013 fe5d 	bl	801c428 <free>
 800876e:	e000      	b.n	8008772 <xts_aes_ctx_free+0x22>
        return;
 8008770:	bf00      	nop
}
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_AES_C */

#if defined(MBEDTLS_GCM_C) && defined(MBEDTLS_CCM_GCM_CAN_AES)
static int gcm_aes_setkey_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	2102      	movs	r1, #2
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f003 fc5c 	bl	800c048 <mbedtls_gcm_setkey>
 8008790:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <ccm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_HAVE_GCM_AES_VIA_LEGACY_OR_USE_PSA */

#if defined(MBEDTLS_CCM_C) && defined(MBEDTLS_CCM_GCM_CAN_AES)
static int ccm_aes_setkey_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	60f8      	str	r0, [r7, #12]
 80087a2:	60b9      	str	r1, [r7, #8]
 80087a4:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	2102      	movs	r1, #2
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f7fe fbc6 	bl	8006f3e <mbedtls_ccm_setkey>
 80087b2:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <camellia_crypt_ecb_wrap>:

#if defined(MBEDTLS_CAMELLIA_C)

static int camellia_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                                   const unsigned char *input, unsigned char *output)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	607a      	str	r2, [r7, #4]
 80087c6:	603b      	str	r3, [r7, #0]
 80087c8:	460b      	mov	r3, r1
 80087ca:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_ecb((mbedtls_camellia_context *) ctx, operation, input,
 80087cc:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7fe f8b1 	bl	800693c <mbedtls_camellia_crypt_ecb>
 80087da:	4603      	mov	r3, r0
                                      output);
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <camellia_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int camellia_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation,
                                   size_t length, unsigned char *iv,
                                   const unsigned char *input, unsigned char *output)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	607a      	str	r2, [r7, #4]
 80087ee:	603b      	str	r3, [r7, #0]
 80087f0:	460b      	mov	r3, r1
 80087f2:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cbc((mbedtls_camellia_context *) ctx, operation, length, iv,
 80087f4:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	9301      	str	r3, [sp, #4]
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7fe f9b2 	bl	8006b6e <mbedtls_camellia_crypt_cbc>
 800880a:	4603      	mov	r3, r0
                                      input, output);
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <camellia_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int camellia_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
                                      size_t length, size_t *iv_off, unsigned char *iv,
                                      const unsigned char *input, unsigned char *output)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af04      	add	r7, sp, #16
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	607a      	str	r2, [r7, #4]
 800881e:	603b      	str	r3, [r7, #0]
 8008820:	460b      	mov	r3, r1
 8008822:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cfb128((mbedtls_camellia_context *) ctx, operation, length,
 8008824:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	9302      	str	r3, [sp, #8]
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	9301      	str	r3, [sp, #4]
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f7fe fa93 	bl	8006d64 <mbedtls_camellia_crypt_cfb128>
 800883e:	4603      	mov	r3, r0
                                         iv_off, iv, input, output);
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <camellia_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int camellia_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
                                   unsigned char *nonce_counter, unsigned char *stream_block,
                                   const unsigned char *input, unsigned char *output)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af04      	add	r7, sp, #16
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	603b      	str	r3, [r7, #0]
    return mbedtls_camellia_crypt_ctr((mbedtls_camellia_context *) ctx, length, nc_off,
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	9302      	str	r3, [sp, #8]
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	9301      	str	r3, [sp, #4]
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f7fe faf3 	bl	8006e54 <mbedtls_camellia_crypt_ctr>
 800886e:	4603      	mov	r3, r0
                                      nonce_counter, stream_block, input, output);
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <camellia_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
static int camellia_setkey_dec_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_dec((mbedtls_camellia_context *) ctx, key, key_bitlen);
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	68b9      	ldr	r1, [r7, #8]
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f7fd ff5b 	bl	8006744 <mbedtls_camellia_setkey_dec>
 800888e:	4603      	mov	r3, r0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <camellia_setkey_enc_wrap>:
#endif

static int camellia_setkey_enc_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_enc((mbedtls_camellia_context *) ctx, key, key_bitlen);
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f7fd f8dd 	bl	8005a68 <mbedtls_camellia_setkey_enc>
 80088ae:	4603      	mov	r3, r0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <camellia_ctx_alloc>:

static void *camellia_ctx_alloc(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
    mbedtls_camellia_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_camellia_context));
 80088be:	f44f 718a 	mov.w	r1, #276	; 0x114
 80088c2:	2001      	movs	r0, #1
 80088c4:	f013 fd8a 	bl	801c3dc <calloc>
 80088c8:	4603      	mov	r3, r0
 80088ca:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <camellia_ctx_alloc+0x1e>
        return NULL;
 80088d2:	2300      	movs	r3, #0
 80088d4:	e003      	b.n	80088de <camellia_ctx_alloc+0x26>
    }

    mbedtls_camellia_init(ctx);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fd f8a6 	bl	8005a28 <mbedtls_camellia_init>

    return ctx;
 80088dc:	687b      	ldr	r3, [r7, #4]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <camellia_ctx_free>:

static void camellia_ctx_free(void *ctx)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b082      	sub	sp, #8
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
    mbedtls_camellia_free((mbedtls_camellia_context *) ctx);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7fd f8a8 	bl	8005a44 <mbedtls_camellia_free>
    mbedtls_free(ctx);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f013 fd97 	bl	801c428 <free>
}
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <gcm_camellia_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_camellia_setkey_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	2105      	movs	r1, #5
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f003 fb97 	bl	800c048 <mbedtls_gcm_setkey>
 800891a:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <ccm_camellia_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_camellia_setkey_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	2105      	movs	r1, #5
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f7fe fb01 	bl	8006f3e <mbedtls_ccm_setkey>
 800893c:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <aria_crypt_ecb_wrap>:

#if defined(MBEDTLS_ARIA_C)

static int aria_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                               const unsigned char *input, unsigned char *output)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	607a      	str	r2, [r7, #4]
 8008950:	603b      	str	r3, [r7, #0]
 8008952:	460b      	mov	r3, r1
 8008954:	72fb      	strb	r3, [r7, #11]
    (void) operation;
    return mbedtls_aria_crypt_ecb((mbedtls_aria_context *) ctx, input,
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	6879      	ldr	r1, [r7, #4]
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f7fc fcf6 	bl	800534c <mbedtls_aria_crypt_ecb>
 8008960:	4603      	mov	r3, r0
                                  output);
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <aria_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aria_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation,
                               size_t length, unsigned char *iv,
                               const unsigned char *input, unsigned char *output)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b086      	sub	sp, #24
 800896e:	af02      	add	r7, sp, #8
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
 8008976:	460b      	mov	r3, r1
 8008978:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aria_crypt_cbc((mbedtls_aria_context *) ctx, operation, length, iv,
 800897a:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f7fc fe09 	bl	80055a2 <mbedtls_aria_crypt_cbc>
 8008990:	4603      	mov	r3, r0
                                  input, output);
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <aria_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int aria_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
                                  size_t length, size_t *iv_off, unsigned char *iv,
                                  const unsigned char *input, unsigned char *output)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b088      	sub	sp, #32
 800899e:	af04      	add	r7, sp, #16
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
 80089a6:	460b      	mov	r3, r1
 80089a8:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aria_crypt_cfb128((mbedtls_aria_context *) ctx, operation, length,
 80089aa:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	9302      	str	r3, [sp, #8]
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f7fc fee8 	bl	8005794 <mbedtls_aria_crypt_cfb128>
 80089c4:	4603      	mov	r3, r0
                                     iv_off, iv, input, output);
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <aria_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int aria_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
                               unsigned char *nonce_counter, unsigned char *stream_block,
                               const unsigned char *input, unsigned char *output)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b088      	sub	sp, #32
 80089d2:	af04      	add	r7, sp, #16
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	607a      	str	r2, [r7, #4]
 80089da:	603b      	str	r3, [r7, #0]
    return mbedtls_aria_crypt_ctr((mbedtls_aria_context *) ctx, length, nc_off,
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	9302      	str	r3, [sp, #8]
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	68b9      	ldr	r1, [r7, #8]
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f7fc ff42 	bl	8005878 <mbedtls_aria_crypt_ctr>
 80089f4:	4603      	mov	r3, r0
                                  nonce_counter, stream_block, input, output);
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <aria_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
static int aria_setkey_dec_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	60f8      	str	r0, [r7, #12]
 8008a06:	60b9      	str	r1, [r7, #8]
 8008a08:	607a      	str	r2, [r7, #4]
    return mbedtls_aria_setkey_dec((mbedtls_aria_context *) ctx, key, key_bitlen);
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	68b9      	ldr	r1, [r7, #8]
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f7fc fc24 	bl	800525c <mbedtls_aria_setkey_dec>
 8008a14:	4603      	mov	r3, r0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <aria_setkey_enc_wrap>:
#endif

static int aria_setkey_enc_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	607a      	str	r2, [r7, #4]
    return mbedtls_aria_setkey_enc((mbedtls_aria_context *) ctx, key, key_bitlen);
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	68b9      	ldr	r1, [r7, #8]
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f7fc fac0 	bl	8004fb4 <mbedtls_aria_setkey_enc>
 8008a34:	4603      	mov	r3, r0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <aria_ctx_alloc>:

static void *aria_ctx_alloc(void)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b082      	sub	sp, #8
 8008a42:	af00      	add	r7, sp, #0
    mbedtls_aria_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_aria_context));
 8008a44:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008a48:	2001      	movs	r0, #1
 8008a4a:	f013 fcc7 	bl	801c3dc <calloc>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d101      	bne.n	8008a5c <aria_ctx_alloc+0x1e>
        return NULL;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	e003      	b.n	8008a64 <aria_ctx_alloc+0x26>
    }

    mbedtls_aria_init(ctx);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7fc fd81 	bl	8005564 <mbedtls_aria_init>

    return ctx;
 8008a62:	687b      	ldr	r3, [r7, #4]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <aria_ctx_free>:

static void aria_ctx_free(void *ctx)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
    mbedtls_aria_free((mbedtls_aria_context *) ctx);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7fc fd83 	bl	8005580 <mbedtls_aria_free>
    mbedtls_free(ctx);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f013 fcd4 	bl	801c428 <free>
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <gcm_aria_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_aria_setkey_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	2106      	movs	r1, #6
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f003 fad4 	bl	800c048 <mbedtls_gcm_setkey>
 8008aa0:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <ccm_aria_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aria_setkey_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	2106      	movs	r1, #6
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f7fe fa3e 	bl	8006f3e <mbedtls_ccm_setkey>
 8008ac2:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <des_crypt_ecb_wrap>:

#if defined(MBEDTLS_DES_C)

static int des_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                              const unsigned char *input, unsigned char *output)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	607a      	str	r2, [r7, #4]
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	72fb      	strb	r3, [r7, #11]
    ((void) operation);
    return mbedtls_des_crypt_ecb((mbedtls_des_context *) ctx, input, output);
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	6879      	ldr	r1, [r7, #4]
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f001 ffb5 	bl	800aa50 <mbedtls_des_crypt_ecb>
 8008ae6:	4603      	mov	r3, r0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <des3_crypt_ecb_wrap>:

static int des3_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                               const unsigned char *input, unsigned char *output)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	607a      	str	r2, [r7, #4]
 8008afa:	603b      	str	r3, [r7, #0]
 8008afc:	460b      	mov	r3, r1
 8008afe:	72fb      	strb	r3, [r7, #11]
    ((void) operation);
    return mbedtls_des3_crypt_ecb((mbedtls_des3_context *) ctx, input, output);
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	6879      	ldr	r1, [r7, #4]
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f002 fa3d 	bl	800af84 <mbedtls_des3_crypt_ecb>
 8008b0a:	4603      	mov	r3, r0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <des_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int des_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
                              unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	607a      	str	r2, [r7, #4]
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	460b      	mov	r3, r1
 8008b22:	72fb      	strb	r3, [r7, #11]
    return mbedtls_des_crypt_cbc((mbedtls_des_context *) ctx, operation, length, iv, input,
 8008b24:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f002 f927 	bl	800ad88 <mbedtls_des_crypt_cbc>
 8008b3a:	4603      	mov	r3, r0
                                 output);
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <des3_crypt_cbc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CBC */

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int des3_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
                               unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af02      	add	r7, sp, #8
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	607a      	str	r2, [r7, #4]
 8008b4e:	603b      	str	r3, [r7, #0]
 8008b50:	460b      	mov	r3, r1
 8008b52:	72fb      	strb	r3, [r7, #11]
    return mbedtls_des3_crypt_cbc((mbedtls_des3_context *) ctx, operation, length, iv, input,
 8008b54:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	9301      	str	r3, [sp, #4]
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f002 fd15 	bl	800b594 <mbedtls_des3_crypt_cbc>
 8008b6a:	4603      	mov	r3, r0
                                  output);
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <des_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CBC */

static int des_setkey_dec_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des_setkey_dec((mbedtls_des_context *) ctx, key);
 8008b80:	68b9      	ldr	r1, [r7, #8]
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f001 fd81 	bl	800a68a <mbedtls_des_setkey_dec>
 8008b88:	4603      	mov	r3, r0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <des_setkey_enc_wrap>:

static int des_setkey_enc_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	60f8      	str	r0, [r7, #12]
 8008b9a:	60b9      	str	r1, [r7, #8]
 8008b9c:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des_setkey_enc((mbedtls_des_context *) ctx, key);
 8008b9e:	68b9      	ldr	r1, [r7, #8]
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f001 fd63 	bl	800a66c <mbedtls_des_setkey_enc>
 8008ba6:	4603      	mov	r3, r0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <des3_set2key_dec_wrap>:

static int des3_set2key_dec_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set2key_dec((mbedtls_des3_context *) ctx, key);
 8008bbc:	68b9      	ldr	r1, [r7, #8]
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f001 fe57 	bl	800a872 <mbedtls_des3_set2key_dec>
 8008bc4:	4603      	mov	r3, r0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <des3_set2key_enc_wrap>:

static int des3_set2key_enc_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	60f8      	str	r0, [r7, #12]
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set2key_enc((mbedtls_des3_context *) ctx, key);
 8008bda:	68b9      	ldr	r1, [r7, #8]
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f001 fe20 	bl	800a822 <mbedtls_des3_set2key_enc>
 8008be2:	4603      	mov	r3, r0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <des3_set3key_dec_wrap>:

static int des3_set3key_dec_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set3key_dec((mbedtls_des3_context *) ctx, key);
 8008bf8:	68b9      	ldr	r1, [r7, #8]
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f001 ff00 	bl	800aa00 <mbedtls_des3_set3key_dec>
 8008c00:	4603      	mov	r3, r0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <des3_set3key_enc_wrap>:

static int des3_set3key_enc_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set3key_enc((mbedtls_des3_context *) ctx, key);
 8008c16:	68b9      	ldr	r1, [r7, #8]
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f001 fec9 	bl	800a9b0 <mbedtls_des3_set3key_enc>
 8008c1e:	4603      	mov	r3, r0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <des_ctx_alloc>:

static void *des_ctx_alloc(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
    mbedtls_des_context *des = mbedtls_calloc(1, sizeof(mbedtls_des_context));
 8008c2e:	2180      	movs	r1, #128	; 0x80
 8008c30:	2001      	movs	r0, #1
 8008c32:	f013 fbd3 	bl	801c3dc <calloc>
 8008c36:	4603      	mov	r3, r0
 8008c38:	607b      	str	r3, [r7, #4]

    if (des == NULL) {
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <des_ctx_alloc+0x1c>
        return NULL;
 8008c40:	2300      	movs	r3, #0
 8008c42:	e003      	b.n	8008c4c <des_ctx_alloc+0x24>
    }

    mbedtls_des_init(des);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f001 faed 	bl	800a224 <mbedtls_des_init>

    return des;
 8008c4a:	687b      	ldr	r3, [r7, #4]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <des_ctx_free>:

static void des_ctx_free(void *ctx)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
    mbedtls_des_free((mbedtls_des_context *) ctx);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 faee 	bl	800a23e <mbedtls_des_free>
    mbedtls_free(ctx);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f013 fbe0 	bl	801c428 <free>
}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <des3_ctx_alloc>:

static void *des3_ctx_alloc(void)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
    mbedtls_des3_context *des3;
    des3 = mbedtls_calloc(1, sizeof(mbedtls_des3_context));
 8008c76:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008c7a:	2001      	movs	r0, #1
 8008c7c:	f013 fbae 	bl	801c3dc <calloc>
 8008c80:	4603      	mov	r3, r0
 8008c82:	607b      	str	r3, [r7, #4]

    if (des3 == NULL) {
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <des3_ctx_alloc+0x1e>
        return NULL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	e003      	b.n	8008c96 <des3_ctx_alloc+0x26>
    }

    mbedtls_des3_init(des3);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f001 fae5 	bl	800a25e <mbedtls_des3_init>

    return des3;
 8008c94:	687b      	ldr	r3, [r7, #4]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <des3_ctx_free>:

static void des3_ctx_free(void *ctx)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
    mbedtls_des3_free((mbedtls_des3_context *) ctx);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f001 fae7 	bl	800a27a <mbedtls_des3_free>
    mbedtls_free(ctx);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f013 fbbb 	bl	801c428 <free>
}
 8008cb2:	bf00      	nop
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
	...

08008cbc <chacha20_setkey_wrap>:

#if defined(MBEDTLS_CHACHA20_C)

static int chacha20_setkey_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
    if (key_bitlen != 256U) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cce:	d001      	beq.n	8008cd4 <chacha20_setkey_wrap+0x18>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8008cd0:	4b07      	ldr	r3, [pc, #28]	; (8008cf0 <chacha20_setkey_wrap+0x34>)
 8008cd2:	e009      	b.n	8008ce8 <chacha20_setkey_wrap+0x2c>
    }

    if (0 != mbedtls_chacha20_setkey((mbedtls_chacha20_context *) ctx, key)) {
 8008cd4:	68b9      	ldr	r1, [r7, #8]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7fe fda8 	bl	800782c <mbedtls_chacha20_setkey>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <chacha20_setkey_wrap+0x2a>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8008ce2:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <chacha20_setkey_wrap+0x34>)
 8008ce4:	e000      	b.n	8008ce8 <chacha20_setkey_wrap+0x2c>
    }

    return 0;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	ffff9f00 	.word	0xffff9f00

08008cf4 <chacha20_stream_wrap>:

static int chacha20_stream_wrap(void *ctx,  size_t length,
                                const unsigned char *input,
                                unsigned char *output)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
 8008d00:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008d02:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8008d06:	617b      	str	r3, [r7, #20]

    ret = mbedtls_chacha20_update(ctx, length, input, output);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f7fe fdf4 	bl	80078fc <mbedtls_chacha20_update>
 8008d14:	6178      	str	r0, [r7, #20]
    if (ret == MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA) {
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8008d1c:	d101      	bne.n	8008d22 <chacha20_stream_wrap+0x2e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8008d1e:	4b03      	ldr	r3, [pc, #12]	; (8008d2c <chacha20_stream_wrap+0x38>)
 8008d20:	e000      	b.n	8008d24 <chacha20_stream_wrap+0x30>
    }

    return ret;
 8008d22:	697b      	ldr	r3, [r7, #20]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	ffff9f00 	.word	0xffff9f00

08008d30 <chacha20_ctx_alloc>:

static void *chacha20_ctx_alloc(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
    mbedtls_chacha20_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_chacha20_context));
 8008d36:	2184      	movs	r1, #132	; 0x84
 8008d38:	2001      	movs	r0, #1
 8008d3a:	f013 fb4f 	bl	801c3dc <calloc>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d101      	bne.n	8008d4c <chacha20_ctx_alloc+0x1c>
        return NULL;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	e003      	b.n	8008d54 <chacha20_ctx_alloc+0x24>
    }

    mbedtls_chacha20_init(ctx);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7fe fd46 	bl	80077de <mbedtls_chacha20_init>

    return ctx;
 8008d52:	687b      	ldr	r3, [r7, #4]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <chacha20_ctx_free>:

static void chacha20_ctx_free(void *ctx)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
    mbedtls_chacha20_free((mbedtls_chacha20_context *) ctx);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7fe fd51 	bl	800780c <mbedtls_chacha20_free>
    mbedtls_free(ctx);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f013 fb5c 	bl	801c428 <free>
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <chachapoly_setkey_wrap>:
#if defined(MBEDTLS_CHACHAPOLY_C)

static int chachapoly_setkey_wrap(void *ctx,
                                  const unsigned char *key,
                                  unsigned int key_bitlen)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
    if (key_bitlen != 256U) {
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d8a:	d001      	beq.n	8008d90 <chachapoly_setkey_wrap+0x18>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8008d8c:	4b07      	ldr	r3, [pc, #28]	; (8008dac <chachapoly_setkey_wrap+0x34>)
 8008d8e:	e009      	b.n	8008da4 <chachapoly_setkey_wrap+0x2c>
    }

    if (0 != mbedtls_chachapoly_setkey((mbedtls_chachapoly_context *) ctx, key)) {
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7fe ff1f 	bl	8007bd6 <mbedtls_chachapoly_setkey>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <chachapoly_setkey_wrap+0x2a>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8008d9e:	4b03      	ldr	r3, [pc, #12]	; (8008dac <chachapoly_setkey_wrap+0x34>)
 8008da0:	e000      	b.n	8008da4 <chachapoly_setkey_wrap+0x2c>
    }

    return 0;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	ffff9f00 	.word	0xffff9f00

08008db0 <chachapoly_ctx_alloc>:

static void *chachapoly_ctx_alloc(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
    mbedtls_chachapoly_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_chachapoly_context));
 8008db6:	21e8      	movs	r1, #232	; 0xe8
 8008db8:	2001      	movs	r0, #1
 8008dba:	f013 fb0f 	bl	801c3dc <calloc>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <chachapoly_ctx_alloc+0x1c>
        return NULL;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	e003      	b.n	8008dd4 <chachapoly_ctx_alloc+0x24>
    }

    mbedtls_chachapoly_init(ctx);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7fe feb0 	bl	8007b32 <mbedtls_chachapoly_init>

    return ctx;
 8008dd2:	687b      	ldr	r3, [r7, #4]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <chachapoly_ctx_free>:

static void chachapoly_ctx_free(void *ctx)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
    mbedtls_chachapoly_free((mbedtls_chachapoly_context *) ctx);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7fe fecb 	bl	8007b80 <mbedtls_chachapoly_free>
    mbedtls_free(ctx);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f013 fb1c 	bl	801c428 <free>
}
 8008df0:	bf00      	nop
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <kw_ctx_alloc>:
};
#endif /* defined(MBEDTLS_CIPHER_NULL_CIPHER) */

#if defined(MBEDTLS_NIST_KW_C)
static void *kw_ctx_alloc(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc(1, sizeof(mbedtls_nist_kw_context));
 8008dfe:	2144      	movs	r1, #68	; 0x44
 8008e00:	2001      	movs	r0, #1
 8008e02:	f013 faeb 	bl	801c3dc <calloc>
 8008e06:	4603      	mov	r3, r0
 8008e08:	607b      	str	r3, [r7, #4]

    if (ctx != NULL) {
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <kw_ctx_alloc+0x1e>
        mbedtls_nist_kw_init((mbedtls_nist_kw_context *) ctx);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f005 fd1c 	bl	800e84e <mbedtls_nist_kw_init>
    }

    return ctx;
 8008e16:	687b      	ldr	r3, [r7, #4]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <kw_ctx_free>:

static void kw_ctx_free(void *ctx)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
    mbedtls_nist_kw_free(ctx);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f005 fd6b 	bl	800e904 <mbedtls_nist_kw_free>
    mbedtls_free(ctx);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f013 fafa 	bl	801c428 <free>
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <kw_aes_setkey_wrap>:

static int kw_aes_setkey_wrap(void *ctx, const unsigned char *key,
                              unsigned int key_bitlen)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af02      	add	r7, sp, #8
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
    return mbedtls_nist_kw_setkey((mbedtls_nist_kw_context *) ctx,
 8008e48:	2301      	movs	r3, #1
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	2102      	movs	r1, #2
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f005 fd08 	bl	800e868 <mbedtls_nist_kw_setkey>
 8008e58:	4603      	mov	r3, r0
                                  MBEDTLS_CIPHER_ID_AES, key, key_bitlen, 1);
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <kw_aes_setkey_unwrap>:

static int kw_aes_setkey_unwrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b086      	sub	sp, #24
 8008e66:	af02      	add	r7, sp, #8
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	607a      	str	r2, [r7, #4]
    return mbedtls_nist_kw_setkey((mbedtls_nist_kw_context *) ctx,
 8008e6e:	2300      	movs	r3, #0
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	2102      	movs	r1, #2
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f005 fcf5 	bl	800e868 <mbedtls_nist_kw_setkey>
 8008e7e:	4603      	mov	r3, r0
                                  MBEDTLS_CIPHER_ID_AES, key, key_bitlen, 0);
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <mbedtls_cipher_info_get_type>:
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <mbedtls_cipher_info_get_type+0x12>
        return MBEDTLS_CIPHER_NONE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	e001      	b.n	8008e9e <mbedtls_cipher_info_get_type+0x16>
        return (mbedtls_cipher_type_t) info->MBEDTLS_PRIVATE(type);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	799b      	ldrb	r3, [r3, #6]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <mbedtls_cipher_info_get_block_size>:
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <mbedtls_cipher_info_get_block_size+0x12>
        return 0;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e004      	b.n	8008ec6 <mbedtls_cipher_info_get_block_size+0x1c>
    return (size_t) (info->MBEDTLS_PRIVATE(block_size));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	791b      	ldrb	r3, [r3, #4]
 8008ec0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008ec4:	b2db      	uxtb	r3, r3
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <mbedtls_ct_bool>:
#define RESTORE_ASM_SYNTAX
#endif

/* Convert a number into a condition in constant time. */
static inline mbedtls_ct_condition_t mbedtls_ct_bool(mbedtls_ct_uint_t x)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b085      	sub	sp, #20
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
                  :
                  );
    return (mbedtls_ct_condition_t) x;
#elif defined(MBEDTLS_CT_ARM_ASM) && defined(MBEDTLS_CT_SIZE_32)
    uint32_t s;
    asm volatile (".syntax unified                                \n\t"
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	425a      	negs	r2, r3
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	17db      	asrs	r3, r3, #31
 8008ee2:	60fa      	str	r2, [r7, #12]
 8008ee4:	607b      	str	r3, [r7, #4]
                  [x] "+&l" (x)
                  :
                  :
                  "cc" /* clobbers flag bits */
                  );
    return (mbedtls_ct_condition_t) x;
 8008ee6:	687b      	ldr	r3, [r7, #4]
    return (mbedtls_ct_condition_t) (-y);
#if defined(_MSC_VER)
#pragma warning( pop )
#endif
#endif
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <mbedtls_ct_uint_if_else_0>:
{
    return (size_t) (condition & if1);
}

static inline unsigned mbedtls_ct_uint_if_else_0(mbedtls_ct_condition_t condition, unsigned if1)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
    return (unsigned) (condition & if1);
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	4013      	ands	r3, r2
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <cmac_multiply_by_u>:
 * Block size must be 8 bytes or 16 bytes - the block sizes for DES and AES.
 */
static int cmac_multiply_by_u(unsigned char *output,
                              const unsigned char *input,
                              size_t blocksize)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08e      	sub	sp, #56	; 0x38
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
    const unsigned char R_128 = 0x87;
 8008f1c:	2387      	movs	r3, #135	; 0x87
 8008f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    unsigned char R_n;
    uint32_t overflow = 0x00;
 8008f22:	2300      	movs	r3, #0
 8008f24:	633b      	str	r3, [r7, #48]	; 0x30
    int i;

    if (blocksize == MBEDTLS_AES_BLOCK_SIZE) {
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b10      	cmp	r3, #16
 8008f2a:	d104      	bne.n	8008f36 <cmac_multiply_by_u+0x26>
        R_n = R_128;
 8008f2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008f34:	e00c      	b.n	8008f50 <cmac_multiply_by_u+0x40>
    }
#if defined(MBEDTLS_DES_C)
    else if (blocksize == MBEDTLS_DES3_BLOCK_SIZE) {
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b08      	cmp	r3, #8
 8008f3a:	d107      	bne.n	8008f4c <cmac_multiply_by_u+0x3c>
        const unsigned char R_64 = 0x1B;
 8008f3c:	231b      	movs	r3, #27
 8008f3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        R_n = R_64;
 8008f42:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008f46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008f4a:	e001      	b.n	8008f50 <cmac_multiply_by_u+0x40>
    }
#endif
    else {
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8008f4c:	4b27      	ldr	r3, [pc, #156]	; (8008fec <cmac_multiply_by_u+0xdc>)
 8008f4e:	e048      	b.n	8008fe2 <cmac_multiply_by_u+0xd2>
    }

    for (i = (int) blocksize - 4; i >= 0; i -= 4) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3b04      	subs	r3, #4
 8008f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f56:	e021      	b.n	8008f9c <cmac_multiply_by_u+0x8c>
        uint32_t i32 = MBEDTLS_GET_UINT32_BE(&input[i], 0);
 8008f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	61fb      	str	r3, [r7, #28]
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008f64:	613b      	str	r3, [r7, #16]
    return r;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	ba1b      	rev	r3, r3
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t new_overflow = i32 >> 31;
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	0fdb      	lsrs	r3, r3, #31
 8008f70:	623b      	str	r3, [r7, #32]
        i32 = (i32 << 1) | overflow;
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
        MBEDTLS_PUT_UINT32_BE(i32, &output[i], 0);
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	441a      	add	r2, r3
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	ba1b      	rev	r3, r3
 8008f86:	61ba      	str	r2, [r7, #24]
 8008f88:	617b      	str	r3, [r7, #20]
 8008f8a:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	601a      	str	r2, [r3, #0]
}
 8008f90:	bf00      	nop
        overflow = new_overflow;
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	633b      	str	r3, [r7, #48]	; 0x30
    for (i = (int) blocksize - 4; i >= 0; i -= 4) {
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f98:	3b04      	subs	r3, #4
 8008f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	dada      	bge.n	8008f58 <cmac_multiply_by_u+0x48>
    }

    R_n = (unsigned char) mbedtls_ct_uint_if_else_0(mbedtls_ct_bool(input[0] >> 7), R_n);
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	09db      	lsrs	r3, r3, #7
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7ff ff91 	bl	8008ed2 <mbedtls_ct_bool>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	4610      	mov	r0, r2
 8008fba:	f7ff ff9b 	bl	8008ef4 <mbedtls_ct_uint_if_else_0>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    output[blocksize - 1] ^= R_n;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	4413      	add	r3, r2
 8008fcc:	7819      	ldrb	r1, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008fda:	404a      	eors	r2, r1
 8008fdc:	b2d2      	uxtb	r2, r2
 8008fde:	701a      	strb	r2, [r3, #0]

    return 0;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3738      	adds	r7, #56	; 0x38
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	ffff9f00 	.word	0xffff9f00

08008ff0 <cmac_generate_subkeys>:
 *
 * - as specified by RFC 4493, section 2.3 Subkey Generation Algorithm
 */
static int cmac_generate_subkeys(mbedtls_cipher_context_t *ctx,
                                 unsigned char *K1, unsigned char *K2)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b08e      	sub	sp, #56	; 0x38
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008ffc:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8009000:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned char L[MBEDTLS_CMAC_MAX_BLOCK_SIZE];
    size_t olen, block_size;

    mbedtls_platform_zeroize(L, sizeof(L));
 8009002:	f107 0318 	add.w	r3, r7, #24
 8009006:	2110      	movs	r1, #16
 8009008:	4618      	mov	r0, r3
 800900a:	f005 fc8f 	bl	800e92c <mbedtls_platform_zeroize>

    block_size = mbedtls_cipher_info_get_block_size(ctx->cipher_info);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff ff49 	bl	8008eaa <mbedtls_cipher_info_get_block_size>
 8009018:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Calculate Ek(0) */
    if ((ret = mbedtls_cipher_update(ctx, L, block_size, L, &olen)) != 0) {
 800901a:	f107 0218 	add.w	r2, r7, #24
 800901e:	f107 0118 	add.w	r1, r7, #24
 8009022:	f107 0314 	add.w	r3, r7, #20
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	4613      	mov	r3, r2
 800902a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f7fe ffd5 	bl	8007fdc <mbedtls_cipher_update>
 8009032:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d113      	bne.n	8009062 <cmac_generate_subkeys+0x72>
    }

    /*
     * Generate K1 and K2
     */
    if ((ret = cmac_multiply_by_u(K1, L, block_size)) != 0) {
 800903a:	f107 0318 	add.w	r3, r7, #24
 800903e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009040:	4619      	mov	r1, r3
 8009042:	68b8      	ldr	r0, [r7, #8]
 8009044:	f7ff ff64 	bl	8008f10 <cmac_multiply_by_u>
 8009048:	62f8      	str	r0, [r7, #44]	; 0x2c
 800904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10a      	bne.n	8009066 <cmac_generate_subkeys+0x76>
        goto exit;
    }

    if ((ret = cmac_multiply_by_u(K2, K1, block_size)) != 0) {
 8009050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009052:	68b9      	ldr	r1, [r7, #8]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff ff5b 	bl	8008f10 <cmac_multiply_by_u>
 800905a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905e:	2b00      	cmp	r3, #0
        goto exit;
    }

exit:
 8009060:	e002      	b.n	8009068 <cmac_generate_subkeys+0x78>
        goto exit;
 8009062:	bf00      	nop
 8009064:	e000      	b.n	8009068 <cmac_generate_subkeys+0x78>
        goto exit;
 8009066:	bf00      	nop
    mbedtls_platform_zeroize(L, sizeof(L));
 8009068:	f107 0318 	add.w	r3, r7, #24
 800906c:	2110      	movs	r1, #16
 800906e:	4618      	mov	r0, r3
 8009070:	f005 fc5c 	bl	800e92c <mbedtls_platform_zeroize>

    return ret;
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009076:	4618      	mov	r0, r3
 8009078:	3730      	adds	r7, #48	; 0x30
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <cmac_pad>:
 */
static void cmac_pad(unsigned char padded_block[MBEDTLS_CMAC_MAX_BLOCK_SIZE],
                     size_t padded_block_len,
                     const unsigned char *last_block,
                     size_t last_block_len)
{
 800907e:	b480      	push	{r7}
 8009080:	b087      	sub	sp, #28
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	607a      	str	r2, [r7, #4]
 800908a:	603b      	str	r3, [r7, #0]
    size_t j;

    for (j = 0; j < padded_block_len; j++) {
 800908c:	2300      	movs	r3, #0
 800908e:	617b      	str	r3, [r7, #20]
 8009090:	e01e      	b.n	80090d0 <cmac_pad+0x52>
        if (j < last_block_len) {
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d208      	bcs.n	80090ac <cmac_pad+0x2e>
            padded_block[j] = last_block[j];
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	441a      	add	r2, r3
 80090a0:	68f9      	ldr	r1, [r7, #12]
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	440b      	add	r3, r1
 80090a6:	7812      	ldrb	r2, [r2, #0]
 80090a8:	701a      	strb	r2, [r3, #0]
 80090aa:	e00e      	b.n	80090ca <cmac_pad+0x4c>
        } else if (j == last_block_len) {
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d105      	bne.n	80090c0 <cmac_pad+0x42>
            padded_block[j] = 0x80;
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	4413      	add	r3, r2
 80090ba:	2280      	movs	r2, #128	; 0x80
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e004      	b.n	80090ca <cmac_pad+0x4c>
        } else {
            padded_block[j] = 0x00;
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	4413      	add	r3, r2
 80090c6:	2200      	movs	r2, #0
 80090c8:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < padded_block_len; j++) {
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	3301      	adds	r3, #1
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d3dc      	bcc.n	8009092 <cmac_pad+0x14>
        }
    }
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <mbedtls_cipher_cmac_starts>:

int mbedtls_cipher_cmac_starts(mbedtls_cipher_context_t *ctx,
                               const unsigned char *key, size_t keybits)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
    mbedtls_cipher_type_t type;
    mbedtls_cmac_context_t *cmac_ctx;
    int retval;

    if (ctx == NULL || ctx->cipher_info == NULL || key == NULL) {
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d006      	beq.n	8009108 <mbedtls_cipher_cmac_starts+0x20>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <mbedtls_cipher_cmac_starts+0x20>
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d101      	bne.n	800910c <mbedtls_cipher_cmac_starts+0x24>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8009108:	4b1b      	ldr	r3, [pc, #108]	; (8009178 <mbedtls_cipher_cmac_starts+0x90>)
 800910a:	e031      	b.n	8009170 <mbedtls_cipher_cmac_starts+0x88>
    }

    if ((retval = mbedtls_cipher_setkey(ctx, key, (int) keybits,
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	2301      	movs	r3, #1
 8009110:	68b9      	ldr	r1, [r7, #8]
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f7fe feea 	bl	8007eec <mbedtls_cipher_setkey>
 8009118:	61f8      	str	r0, [r7, #28]
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <mbedtls_cipher_cmac_starts+0x3c>
                                        MBEDTLS_ENCRYPT)) != 0) {
        return retval;
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	e025      	b.n	8009170 <mbedtls_cipher_cmac_starts+0x88>
    }

    type = mbedtls_cipher_info_get_type(ctx->cipher_info);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4618      	mov	r0, r3
 800912a:	f7ff fead 	bl	8008e88 <mbedtls_cipher_info_get_type>
 800912e:	4603      	mov	r3, r0
 8009130:	76fb      	strb	r3, [r7, #27]

    switch (type) {
 8009132:	7efb      	ldrb	r3, [r7, #27]
 8009134:	2b04      	cmp	r3, #4
 8009136:	dc02      	bgt.n	800913e <mbedtls_cipher_cmac_starts+0x56>
 8009138:	2b02      	cmp	r3, #2
 800913a:	da04      	bge.n	8009146 <mbedtls_cipher_cmac_starts+0x5e>
 800913c:	e001      	b.n	8009142 <mbedtls_cipher_cmac_starts+0x5a>
 800913e:	2b24      	cmp	r3, #36	; 0x24
 8009140:	d001      	beq.n	8009146 <mbedtls_cipher_cmac_starts+0x5e>
        case MBEDTLS_CIPHER_AES_192_ECB:
        case MBEDTLS_CIPHER_AES_256_ECB:
        case MBEDTLS_CIPHER_DES_EDE3_ECB:
            break;
        default:
            return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8009142:	4b0d      	ldr	r3, [pc, #52]	; (8009178 <mbedtls_cipher_cmac_starts+0x90>)
 8009144:	e014      	b.n	8009170 <mbedtls_cipher_cmac_starts+0x88>
            break;
 8009146:	bf00      	nop
    }

    /* Allocated and initialise in the cipher context memory for the CMAC
     * context */
    cmac_ctx = mbedtls_calloc(1, sizeof(mbedtls_cmac_context_t));
 8009148:	2124      	movs	r1, #36	; 0x24
 800914a:	2001      	movs	r0, #1
 800914c:	f013 f946 	bl	801c3dc <calloc>
 8009150:	4603      	mov	r3, r0
 8009152:	617b      	str	r3, [r7, #20]
    if (cmac_ctx == NULL) {
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <mbedtls_cipher_cmac_starts+0x76>
        return MBEDTLS_ERR_CIPHER_ALLOC_FAILED;
 800915a:	4b08      	ldr	r3, [pc, #32]	; (800917c <mbedtls_cipher_cmac_starts+0x94>)
 800915c:	e008      	b.n	8009170 <mbedtls_cipher_cmac_starts+0x88>
    }

    ctx->cmac_ctx = cmac_ctx;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	641a      	str	r2, [r3, #64]	; 0x40

    mbedtls_platform_zeroize(cmac_ctx->state, sizeof(cmac_ctx->state));
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2110      	movs	r1, #16
 8009168:	4618      	mov	r0, r3
 800916a:	f005 fbdf 	bl	800e92c <mbedtls_platform_zeroize>

    return 0;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3720      	adds	r7, #32
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	ffff9f00 	.word	0xffff9f00
 800917c:	ffff9e80 	.word	0xffff9e80

08009180 <mbedtls_cipher_cmac_update>:

int mbedtls_cipher_cmac_update(mbedtls_cipher_context_t *ctx,
                               const unsigned char *input, size_t ilen)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b0a6      	sub	sp, #152	; 0x98
 8009184:	af02      	add	r7, sp, #8
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
    mbedtls_cmac_context_t *cmac_ctx;
    unsigned char *state;
    int ret = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    size_t n, j, olen, block_size;

    if (ctx == NULL || ctx->cipher_info == NULL || input == NULL ||
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00a      	beq.n	80091ae <mbedtls_cipher_cmac_update+0x2e>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d006      	beq.n	80091ae <mbedtls_cipher_cmac_update+0x2e>
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <mbedtls_cipher_cmac_update+0x2e>
        ctx->cmac_ctx == NULL) {
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if (ctx == NULL || ctx->cipher_info == NULL || input == NULL ||
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d101      	bne.n	80091b2 <mbedtls_cipher_cmac_update+0x32>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 80091ae:	4ba0      	ldr	r3, [pc, #640]	; (8009430 <mbedtls_cipher_cmac_update+0x2b0>)
 80091b0:	e139      	b.n	8009426 <mbedtls_cipher_cmac_update+0x2a6>
    }

    cmac_ctx = ctx->cmac_ctx;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    block_size = mbedtls_cipher_info_get_block_size(ctx->cipher_info);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4618      	mov	r0, r3
 80091c0:	f7ff fe73 	bl	8008eaa <mbedtls_cipher_info_get_block_size>
 80091c4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    state = ctx->cmac_ctx->state;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091cc:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Without the MBEDTLS_ASSUME below, gcc -O3 will generate a warning of the form
     * error: writing 16 bytes into a region of size 0 [-Werror=stringop-overflow=] */
    MBEDTLS_ASSUME(block_size <= MBEDTLS_CMAC_MAX_BLOCK_SIZE);
 80091ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091d2:	2b10      	cmp	r3, #16

    /* Is there data still to process from the last call, that's greater in
     * size than a block? */
    if (cmac_ctx->unprocessed_len > 0 &&
 80091d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 808b 	beq.w	80092f6 <mbedtls_cipher_cmac_update+0x176>
        ilen > block_size - cmac_ctx->unprocessed_len) {
 80091e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80091ea:	1ad3      	subs	r3, r2, r3
    if (cmac_ctx->unprocessed_len > 0 &&
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	f240 8081 	bls.w	80092f6 <mbedtls_cipher_cmac_update+0x176>
        memcpy(&cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 80091f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	3310      	adds	r3, #16
 80091fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009200:	18d0      	adds	r0, r2, r3
               input,
               block_size - cmac_ctx->unprocessed_len);
 8009202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009206:	6a1b      	ldr	r3, [r3, #32]
        memcpy(&cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 8009208:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	461a      	mov	r2, r3
 8009210:	68b9      	ldr	r1, [r7, #8]
 8009212:	f014 f871 	bl	801d2f8 <memcpy>

        mbedtls_xor_no_simd(state, cmac_ctx->unprocessed_block, state, block_size);
 8009216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800921a:	3310      	adds	r3, #16
 800921c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800921e:	677a      	str	r2, [r7, #116]	; 0x74
 8009220:	673b      	str	r3, [r7, #112]	; 0x70
 8009222:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009224:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009226:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800922a:	66bb      	str	r3, [r7, #104]	; 0x68
    size_t i = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	667b      	str	r3, [r7, #100]	; 0x64
    for (; (i + 4) <= n; i += 4) {
 8009230:	e01e      	b.n	8009270 <mbedtls_cipher_cmac_update+0xf0>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8009232:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009236:	4413      	add	r3, r2
 8009238:	663b      	str	r3, [r7, #96]	; 0x60
 800923a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800923c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800923e:	61fb      	str	r3, [r7, #28]
    return r;
 8009240:	69fa      	ldr	r2, [r7, #28]
 8009242:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009246:	440b      	add	r3, r1
 8009248:	65fb      	str	r3, [r7, #92]	; 0x5c
 800924a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800924c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800924e:	61bb      	str	r3, [r7, #24]
    return r;
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	4053      	eors	r3, r2
 8009254:	65bb      	str	r3, [r7, #88]	; 0x58
        mbedtls_put_unaligned_uint32(r + i, x);
 8009256:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800925a:	4413      	add	r3, r2
 800925c:	657b      	str	r3, [r7, #84]	; 0x54
 800925e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009260:	617b      	str	r3, [r7, #20]
 8009262:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8009264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009266:	601a      	str	r2, [r3, #0]
}
 8009268:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800926a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800926c:	3304      	adds	r3, #4
 800926e:	667b      	str	r3, [r7, #100]	; 0x64
 8009270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009272:	3304      	adds	r3, #4
 8009274:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009276:	429a      	cmp	r2, r3
 8009278:	d2db      	bcs.n	8009232 <mbedtls_cipher_cmac_update+0xb2>
    for (; i < n; i++) {
 800927a:	e010      	b.n	800929e <mbedtls_cipher_cmac_update+0x11e>
        r[i] = a[i] ^ b[i];
 800927c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800927e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009280:	4413      	add	r3, r2
 8009282:	7819      	ldrb	r1, [r3, #0]
 8009284:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009286:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009288:	4413      	add	r3, r2
 800928a:	781a      	ldrb	r2, [r3, #0]
 800928c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800928e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009290:	4403      	add	r3, r0
 8009292:	404a      	eors	r2, r1
 8009294:	b2d2      	uxtb	r2, r2
 8009296:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8009298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800929a:	3301      	adds	r3, #1
 800929c:	667b      	str	r3, [r7, #100]	; 0x64
 800929e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d8ea      	bhi.n	800927c <mbedtls_cipher_cmac_update+0xfc>
}
 80092a6:	bf00      	nop

        if ((ret = mbedtls_cipher_update(ctx, state, block_size, state,
 80092a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f7fe fe90 	bl	8007fdc <mbedtls_cipher_update>
 80092bc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80092c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f040 80a7 	bne.w	8009418 <mbedtls_cipher_cmac_update+0x298>
                                         &olen)) != 0) {
            goto exit;
        }

        input += block_size - cmac_ctx->unprocessed_len;
 80092ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092ce:	6a1b      	ldr	r3, [r3, #32]
 80092d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	4413      	add	r3, r2
 80092da:	60bb      	str	r3, [r7, #8]
        ilen -= block_size - cmac_ctx->unprocessed_len;
 80092dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092e0:	6a1a      	ldr	r2, [r3, #32]
 80092e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	4413      	add	r3, r2
 80092ec:	607b      	str	r3, [r7, #4]
        cmac_ctx->unprocessed_len = 0;
 80092ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092f2:	2200      	movs	r2, #0
 80092f4:	621a      	str	r2, [r3, #32]
    }

    /* n is the number of blocks including any final partial block */
    n = (ilen + block_size - 1) / block_size;
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092fc:	4413      	add	r3, r2
 80092fe:	1e5a      	subs	r2, r3, #1
 8009300:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009304:	fbb2 f3f3 	udiv	r3, r2, r3
 8009308:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Iterate across the input data in block sized chunks, excluding any
     * final partial or complete block */
    for (j = 1; j < n; j++) {
 800930a:	2301      	movs	r3, #1
 800930c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009310:	e065      	b.n	80093de <mbedtls_cipher_cmac_update+0x25e>
 8009312:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009314:	653b      	str	r3, [r7, #80]	; 0x50
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800931a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800931c:	64bb      	str	r3, [r7, #72]	; 0x48
 800931e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009322:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	643b      	str	r3, [r7, #64]	; 0x40
    for (; (i + 4) <= n; i += 4) {
 8009328:	e01e      	b.n	8009368 <mbedtls_cipher_cmac_update+0x1e8>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800932a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800932c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800932e:	4413      	add	r3, r2
 8009330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009334:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009336:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8009338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800933a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800933c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800933e:	440b      	add	r3, r1
 8009340:	63bb      	str	r3, [r7, #56]	; 0x38
 8009342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009344:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	4053      	eors	r3, r2
 800934c:	637b      	str	r3, [r7, #52]	; 0x34
        mbedtls_put_unaligned_uint32(r + i, x);
 800934e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009352:	4413      	add	r3, r2
 8009354:	633b      	str	r3, [r7, #48]	; 0x30
 8009356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009358:	623b      	str	r3, [r7, #32]
 800935a:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	601a      	str	r2, [r3, #0]
}
 8009360:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8009362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009364:	3304      	adds	r3, #4
 8009366:	643b      	str	r3, [r7, #64]	; 0x40
 8009368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800936a:	3304      	adds	r3, #4
 800936c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800936e:	429a      	cmp	r2, r3
 8009370:	d2db      	bcs.n	800932a <mbedtls_cipher_cmac_update+0x1aa>
    for (; i < n; i++) {
 8009372:	e010      	b.n	8009396 <mbedtls_cipher_cmac_update+0x216>
        r[i] = a[i] ^ b[i];
 8009374:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009378:	4413      	add	r3, r2
 800937a:	7819      	ldrb	r1, [r3, #0]
 800937c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800937e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009380:	4413      	add	r3, r2
 8009382:	781a      	ldrb	r2, [r3, #0]
 8009384:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009388:	4403      	add	r3, r0
 800938a:	404a      	eors	r2, r1
 800938c:	b2d2      	uxtb	r2, r2
 800938e:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8009390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009392:	3301      	adds	r3, #1
 8009394:	643b      	str	r3, [r7, #64]	; 0x40
 8009396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800939a:	429a      	cmp	r2, r3
 800939c:	d8ea      	bhi.n	8009374 <mbedtls_cipher_cmac_update+0x1f4>
}
 800939e:	bf00      	nop
        mbedtls_xor_no_simd(state, input, state, block_size);

        if ((ret = mbedtls_cipher_update(ctx, state, block_size, state,
 80093a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f7fe fe14 	bl	8007fdc <mbedtls_cipher_update>
 80093b4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80093b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d12d      	bne.n	800941c <mbedtls_cipher_cmac_update+0x29c>
                                         &olen)) != 0) {
            goto exit;
        }

        ilen -= block_size;
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	607b      	str	r3, [r7, #4]
        input += block_size;
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093d0:	4413      	add	r3, r2
 80093d2:	60bb      	str	r3, [r7, #8]
    for (j = 1; j < n; j++) {
 80093d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093d8:	3301      	adds	r3, #1
 80093da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80093de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80093e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d394      	bcc.n	8009312 <mbedtls_cipher_cmac_update+0x192>
    }

    /* If there is data left over that wasn't aligned to a block */
    if (ilen > 0) {
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d018      	beq.n	8009420 <mbedtls_cipher_cmac_update+0x2a0>
        memcpy(&cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 80093ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093f2:	6a1b      	ldr	r3, [r3, #32]
 80093f4:	3310      	adds	r3, #16
 80093f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80093fa:	4413      	add	r3, r2
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	68b9      	ldr	r1, [r7, #8]
 8009400:	4618      	mov	r0, r3
 8009402:	f013 ff79 	bl	801d2f8 <memcpy>
               input,
               ilen);
        cmac_ctx->unprocessed_len += ilen;
 8009406:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800940a:	6a1a      	ldr	r2, [r3, #32]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	441a      	add	r2, r3
 8009410:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009414:	621a      	str	r2, [r3, #32]
 8009416:	e004      	b.n	8009422 <mbedtls_cipher_cmac_update+0x2a2>
            goto exit;
 8009418:	bf00      	nop
 800941a:	e002      	b.n	8009422 <mbedtls_cipher_cmac_update+0x2a2>
            goto exit;
 800941c:	bf00      	nop
 800941e:	e000      	b.n	8009422 <mbedtls_cipher_cmac_update+0x2a2>
    }

exit:
 8009420:	bf00      	nop
    return ret;
 8009422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8009426:	4618      	mov	r0, r3
 8009428:	3790      	adds	r7, #144	; 0x90
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	ffff9f00 	.word	0xffff9f00

08009434 <mbedtls_cipher_cmac_finish>:

int mbedtls_cipher_cmac_finish(mbedtls_cipher_context_t *ctx,
                               unsigned char *output)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b0ba      	sub	sp, #232	; 0xe8
 8009438:	af02      	add	r7, sp, #8
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
    mbedtls_cmac_context_t *cmac_ctx;
    unsigned char *state, *last_block;
    unsigned char K1[MBEDTLS_CMAC_MAX_BLOCK_SIZE];
    unsigned char K2[MBEDTLS_CMAC_MAX_BLOCK_SIZE];
    unsigned char M_last[MBEDTLS_CMAC_MAX_BLOCK_SIZE];
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800943e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8009442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    size_t olen, block_size;

    if (ctx == NULL || ctx->cipher_info == NULL || ctx->cmac_ctx == NULL ||
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00a      	beq.n	8009462 <mbedtls_cipher_cmac_finish+0x2e>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d006      	beq.n	8009462 <mbedtls_cipher_cmac_finish+0x2e>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009458:	2b00      	cmp	r3, #0
 800945a:	d002      	beq.n	8009462 <mbedtls_cipher_cmac_finish+0x2e>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <mbedtls_cipher_cmac_finish+0x32>
        output == NULL) {
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8009462:	4bbe      	ldr	r3, [pc, #760]	; (800975c <mbedtls_cipher_cmac_finish+0x328>)
 8009464:	e19b      	b.n	800979e <mbedtls_cipher_cmac_finish+0x36a>
    }

    cmac_ctx = ctx->cmac_ctx;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    block_size = mbedtls_cipher_info_get_block_size(ctx->cipher_info);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff fd19 	bl	8008eaa <mbedtls_cipher_info_get_block_size>
 8009478:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    MBEDTLS_ASSUME(block_size <= MBEDTLS_CMAC_MAX_BLOCK_SIZE); // silence GCC warning
 800947c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009480:	2b10      	cmp	r3, #16
    state = cmac_ctx->state;
 8009482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009486:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    mbedtls_platform_zeroize(K1, sizeof(K1));
 800948a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800948e:	2110      	movs	r1, #16
 8009490:	4618      	mov	r0, r3
 8009492:	f005 fa4b 	bl	800e92c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(K2, sizeof(K2));
 8009496:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800949a:	2110      	movs	r1, #16
 800949c:	4618      	mov	r0, r3
 800949e:	f005 fa45 	bl	800e92c <mbedtls_platform_zeroize>
    cmac_generate_subkeys(ctx, K1, K2);
 80094a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80094a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff fd9f 	bl	8008ff0 <cmac_generate_subkeys>

    last_block = cmac_ctx->unprocessed_block;
 80094b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094b6:	3310      	adds	r3, #16
 80094b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    /* Calculate last block */
    if (cmac_ctx->unprocessed_len < block_size) {
 80094bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d975      	bls.n	80095b6 <mbedtls_cipher_cmac_finish+0x182>
        cmac_pad(M_last, block_size, last_block, cmac_ctx->unprocessed_len);
 80094ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80094d4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80094d8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80094dc:	f7ff fdcf 	bl	800907e <cmac_pad>
 80094e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80094f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    size_t i = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    for (; (i + 4) <= n; i += 4) {
 8009506:	e02e      	b.n	8009566 <mbedtls_cipher_cmac_finish+0x132>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8009508:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800950c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009510:	4413      	add	r3, r2
 8009512:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800951a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800951c:	613b      	str	r3, [r7, #16]
    return r;
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8009524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009528:	440b      	add	r3, r1
 800952a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800952e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009532:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009534:	60fb      	str	r3, [r7, #12]
    return r;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	4053      	eors	r3, r2
 800953a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        mbedtls_put_unaligned_uint32(r + i, x);
 800953e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009542:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009546:	4413      	add	r3, r2
 8009548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800954c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009550:	60bb      	str	r3, [r7, #8]
 8009552:	68ba      	ldr	r2, [r7, #8]
    memcpy(p, &x, sizeof(x));
 8009554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009558:	601a      	str	r2, [r3, #0]
}
 800955a:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800955c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009560:	3304      	adds	r3, #4
 8009562:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800956a:	3304      	adds	r3, #4
 800956c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009570:	429a      	cmp	r2, r3
 8009572:	d2c9      	bcs.n	8009508 <mbedtls_cipher_cmac_finish+0xd4>
    for (; i < n; i++) {
 8009574:	e018      	b.n	80095a8 <mbedtls_cipher_cmac_finish+0x174>
        r[i] = a[i] ^ b[i];
 8009576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800957a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800957e:	4413      	add	r3, r2
 8009580:	7819      	ldrb	r1, [r3, #0]
 8009582:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800958a:	4413      	add	r3, r2
 800958c:	781a      	ldrb	r2, [r3, #0]
 800958e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8009592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009596:	4403      	add	r3, r0
 8009598:	404a      	eors	r2, r1
 800959a:	b2d2      	uxtb	r2, r2
 800959c:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800959e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80095a2:	3301      	adds	r3, #1
 80095a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80095ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d8e0      	bhi.n	8009576 <mbedtls_cipher_cmac_finish+0x142>
}
 80095b4:	e06a      	b.n	800968c <mbedtls_cipher_cmac_finish+0x258>
 80095b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80095be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80095c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80095c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80095ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80095ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    size_t i = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (; (i + 4) <= n; i += 4) {
 80095dc:	e02e      	b.n	800963c <mbedtls_cipher_cmac_finish+0x208>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80095de:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80095e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095e6:	4413      	add	r3, r2
 80095e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095f0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80095f2:	61fb      	str	r3, [r7, #28]
    return r;
 80095f4:	69fa      	ldr	r2, [r7, #28]
 80095f6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80095fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095fe:	440b      	add	r3, r1
 8009600:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009604:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009608:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800960a:	61bb      	str	r3, [r7, #24]
    return r;
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	4053      	eors	r3, r2
 8009610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        mbedtls_put_unaligned_uint32(r + i, x);
 8009614:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009618:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800961c:	4413      	add	r3, r2
 800961e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009622:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009626:	617b      	str	r3, [r7, #20]
 8009628:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 800962a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800962e:	601a      	str	r2, [r3, #0]
}
 8009630:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8009632:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009636:	3304      	adds	r3, #4
 8009638:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800963c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009640:	3304      	adds	r3, #4
 8009642:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009646:	429a      	cmp	r2, r3
 8009648:	d2c9      	bcs.n	80095de <mbedtls_cipher_cmac_finish+0x1aa>
    for (; i < n; i++) {
 800964a:	e018      	b.n	800967e <mbedtls_cipher_cmac_finish+0x24a>
        r[i] = a[i] ^ b[i];
 800964c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009650:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009654:	4413      	add	r3, r2
 8009656:	7819      	ldrb	r1, [r3, #0]
 8009658:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800965c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009660:	4413      	add	r3, r2
 8009662:	781a      	ldrb	r2, [r3, #0]
 8009664:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009668:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800966c:	4403      	add	r3, r0
 800966e:	404a      	eors	r2, r1
 8009670:	b2d2      	uxtb	r2, r2
 8009672:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8009674:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009678:	3301      	adds	r3, #1
 800967a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800967e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009682:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009686:	429a      	cmp	r2, r3
 8009688:	d8e0      	bhi.n	800964c <mbedtls_cipher_cmac_finish+0x218>
}
 800968a:	bf00      	nop
 800968c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009694:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009698:	67fb      	str	r3, [r7, #124]	; 0x7c
 800969a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800969e:	67bb      	str	r3, [r7, #120]	; 0x78
 80096a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096a4:	677b      	str	r3, [r7, #116]	; 0x74
    size_t i = 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	673b      	str	r3, [r7, #112]	; 0x70
    for (; (i + 4) <= n; i += 4) {
 80096aa:	e01f      	b.n	80096ec <mbedtls_cipher_cmac_finish+0x2b8>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80096ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096b0:	4413      	add	r3, r2
 80096b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80096b8:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 80096ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096bc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80096be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096c0:	440b      	add	r3, r1
 80096c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80096c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096c6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 80096ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096cc:	4053      	eors	r3, r2
 80096ce:	667b      	str	r3, [r7, #100]	; 0x64
        mbedtls_put_unaligned_uint32(r + i, x);
 80096d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80096d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096d6:	4413      	add	r3, r2
 80096d8:	663b      	str	r3, [r7, #96]	; 0x60
 80096da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096dc:	623b      	str	r3, [r7, #32]
 80096de:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 80096e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096e2:	601a      	str	r2, [r3, #0]
}
 80096e4:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80096e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096e8:	3304      	adds	r3, #4
 80096ea:	673b      	str	r3, [r7, #112]	; 0x70
 80096ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096ee:	3304      	adds	r3, #4
 80096f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d2da      	bcs.n	80096ac <mbedtls_cipher_cmac_finish+0x278>
    for (; i < n; i++) {
 80096f6:	e011      	b.n	800971c <mbedtls_cipher_cmac_finish+0x2e8>
        r[i] = a[i] ^ b[i];
 80096f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096fc:	4413      	add	r3, r2
 80096fe:	7819      	ldrb	r1, [r3, #0]
 8009700:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009704:	4413      	add	r3, r2
 8009706:	781a      	ldrb	r2, [r3, #0]
 8009708:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800970c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800970e:	4403      	add	r3, r0
 8009710:	404a      	eors	r2, r1
 8009712:	b2d2      	uxtb	r2, r2
 8009714:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8009716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009718:	3301      	adds	r3, #1
 800971a:	673b      	str	r3, [r7, #112]	; 0x70
 800971c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800971e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009720:	429a      	cmp	r2, r3
 8009722:	d8e9      	bhi.n	80096f8 <mbedtls_cipher_cmac_finish+0x2c4>
}
 8009724:	bf00      	nop
        mbedtls_xor(M_last, last_block, K1, block_size);
    }


    mbedtls_xor(state, M_last, state, block_size);
    if ((ret = mbedtls_cipher_update(ctx, state, block_size, state,
 8009726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009730:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009734:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7fe fc4f 	bl	8007fdc <mbedtls_cipher_update>
 800973e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8009742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <mbedtls_cipher_cmac_finish+0x32c>
                                     &olen)) != 0) {
        goto exit;
    }

    memcpy(output, state, block_size);
 800974a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800974e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009752:	6838      	ldr	r0, [r7, #0]
 8009754:	f013 fdd0 	bl	801d2f8 <memcpy>
 8009758:	e003      	b.n	8009762 <mbedtls_cipher_cmac_finish+0x32e>
 800975a:	bf00      	nop
 800975c:	ffff9f00 	.word	0xffff9f00
        goto exit;
 8009760:	bf00      	nop

exit:
    /* Wipe the generated keys on the stack, and any other transients to avoid
     * side channel leakage */
    mbedtls_platform_zeroize(K1, sizeof(K1));
 8009762:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009766:	2110      	movs	r1, #16
 8009768:	4618      	mov	r0, r3
 800976a:	f005 f8df 	bl	800e92c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(K2, sizeof(K2));
 800976e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009772:	2110      	movs	r1, #16
 8009774:	4618      	mov	r0, r3
 8009776:	f005 f8d9 	bl	800e92c <mbedtls_platform_zeroize>

    cmac_ctx->unprocessed_len = 0;
 800977a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800977e:	2200      	movs	r2, #0
 8009780:	621a      	str	r2, [r3, #32]
    mbedtls_platform_zeroize(cmac_ctx->unprocessed_block,
 8009782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009786:	3310      	adds	r3, #16
 8009788:	2110      	movs	r1, #16
 800978a:	4618      	mov	r0, r3
 800978c:	f005 f8ce 	bl	800e92c <mbedtls_platform_zeroize>
                             sizeof(cmac_ctx->unprocessed_block));

    mbedtls_platform_zeroize(state, MBEDTLS_CMAC_MAX_BLOCK_SIZE);
 8009790:	2110      	movs	r1, #16
 8009792:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8009796:	f005 f8c9 	bl	800e92c <mbedtls_platform_zeroize>
    return ret;
 800979a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
}
 800979e:	4618      	mov	r0, r3
 80097a0:	37e0      	adds	r7, #224	; 0xe0
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop

080097a8 <mbedtls_ctr_increment_counter>:
{
 80097a8:	b480      	push	{r7}
 80097aa:	b089      	sub	sp, #36	; 0x24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
    for (int i = 3;; i--) {
 80097b0:	2303      	movs	r3, #3
 80097b2:	61fb      	str	r3, [r7, #28]
        uint32_t x = MBEDTLS_GET_UINT32_BE(n, i << 2);
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	461a      	mov	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4413      	add	r3, r2
 80097be:	617b      	str	r3, [r7, #20]
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80097c4:	60bb      	str	r3, [r7, #8]
    return r;
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	ba1b      	rev	r3, r3
 80097ca:	61bb      	str	r3, [r7, #24]
        x += 1;
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	3301      	adds	r3, #1
 80097d0:	61bb      	str	r3, [r7, #24]
        MBEDTLS_PUT_UINT32_BE(x, n, i << 2);
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	461a      	mov	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	441a      	add	r2, r3
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	ba1b      	rev	r3, r3
 80097e0:	613a      	str	r2, [r7, #16]
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	68fa      	ldr	r2, [r7, #12]
    memcpy(p, &x, sizeof(x));
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	601a      	str	r2, [r3, #0]
}
 80097ea:	bf00      	nop
        if (x != 0 || i == 0) {
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d106      	bne.n	8009800 <mbedtls_ctr_increment_counter+0x58>
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d003      	beq.n	8009800 <mbedtls_ctr_increment_counter+0x58>
    for (int i = 3;; i--) {
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	3b01      	subs	r3, #1
 80097fc:	61fb      	str	r3, [r7, #28]
 80097fe:	e7d9      	b.n	80097b4 <mbedtls_ctr_increment_counter+0xc>
}
 8009800:	bf00      	nop
 8009802:	3724      	adds	r7, #36	; 0x24
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <mbedtls_ctr_drbg_init>:

/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init(mbedtls_ctr_drbg_context *ctx)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_ctr_drbg_context));
 8009814:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009818:	2100      	movs	r1, #0
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f013 fcce 	bl	801d1bc <memset>
#if defined(MBEDTLS_CTR_DRBG_USE_PSA_CRYPTO)
    ctx->psa_ctx.key_id = MBEDTLS_SVC_KEY_ID_INIT;
    ctx->psa_ctx.operation = psa_cipher_operation_init();
#else
    mbedtls_aes_init(&ctx->aes_ctx);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	3320      	adds	r3, #32
 8009824:	4618      	mov	r0, r3
 8009826:	f7f9 f895 	bl	8002954 <mbedtls_aes_init>
#endif
    /* Indicate that the entropy nonce length is not set explicitly.
     * See mbedtls_ctr_drbg_set_nonce_len(). */
    ctx->reseed_counter = -1;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f04f 32ff 	mov.w	r2, #4294967295
 8009830:	611a      	str	r2, [r3, #16]

    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f242 7210 	movw	r2, #10000	; 0x2710
 8009838:	61da      	str	r2, [r3, #28]
}
 800983a:	bf00      	nop
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <mbedtls_ctr_drbg_free>:
/*
 *  This function resets CTR_DRBG context to the state immediately
 *  after initial call of mbedtls_ctr_drbg_init().
 */
void mbedtls_ctr_drbg_free(mbedtls_ctr_drbg_context *ctx)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b082      	sub	sp, #8
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d012      	beq.n	8009876 <mbedtls_ctr_drbg_free+0x34>
    }
#endif
#if defined(MBEDTLS_CTR_DRBG_USE_PSA_CRYPTO)
    ctr_drbg_destroy_psa_contex(&ctx->psa_ctx);
#else
    mbedtls_aes_free(&ctx->aes_ctx);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3320      	adds	r3, #32
 8009854:	4618      	mov	r0, r3
 8009856:	f7f9 f88b 	bl	8002970 <mbedtls_aes_free>
#endif
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_ctr_drbg_context));
 800985a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f005 f864 	bl	800e92c <mbedtls_platform_zeroize>
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f242 7210 	movw	r2, #10000	; 0x2710
 800986a:	61da      	str	r2, [r3, #28]
    ctx->reseed_counter = -1;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f04f 32ff 	mov.w	r2, #4294967295
 8009872:	611a      	str	r2, [r3, #16]
 8009874:	e000      	b.n	8009878 <mbedtls_ctr_drbg_free+0x36>
        return;
 8009876:	bf00      	nop
}
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df(unsigned char *output,
                           const unsigned char *data, size_t data_len)
{
 800987e:	b5b0      	push	{r4, r5, r7, lr}
 8009880:	f5ad 7d60 	sub.w	sp, sp, #896	; 0x380
 8009884:	af00      	add	r7, sp, #0
 8009886:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800988a:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 800988e:	6018      	str	r0, [r3, #0]
 8009890:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009894:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8009898:	6019      	str	r1, [r3, #0]
 800989a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800989e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80098a2:	601a      	str	r2, [r3, #0]
                      MBEDTLS_CTR_DRBG_BLOCKSIZE + 16];
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];
    unsigned char chain[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    unsigned char *p, *iv;
    int ret = 0;
 80098a4:	2300      	movs	r3, #0
 80098a6:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
#endif

    int i, j;
    size_t buf_len, use_len;

    if (data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT) {
 80098aa:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80098ae:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80098b8:	d902      	bls.n	80098c0 <block_cipher_df+0x42>
        return MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG;
 80098ba:	f06f 0337 	mvn.w	r3, #55	; 0x37
 80098be:	e1d6      	b.n	8009c6e <block_cipher_df+0x3f0>
    }

    memset(buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT +
 80098c0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80098c4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80098c8:	2100      	movs	r1, #0
 80098ca:	4618      	mov	r0, r3
 80098cc:	f013 fc76 	bl	801d1bc <memset>
     * IV = Counter (in 32-bits) padded to 16 with zeroes
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
 80098d0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80098d4:	3310      	adds	r3, #16
 80098d6:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
    MBEDTLS_PUT_UINT32_BE(data_len, p, 0);
 80098da:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80098de:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	ba1a      	rev	r2, r3
 80098e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80098ea:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 80098ee:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80098f2:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80098f6:	601a      	str	r2, [r3, #0]
 80098f8:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80098fc:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8009900:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8009902:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8009906:	601a      	str	r2, [r3, #0]
}
 8009908:	bf00      	nop
    p += 4 + 3;
 800990a:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 800990e:	3307      	adds	r3, #7
 8009910:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 8009914:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8009918:	1c5a      	adds	r2, r3, #1
 800991a:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 800991e:	2230      	movs	r2, #48	; 0x30
 8009920:	701a      	strb	r2, [r3, #0]
    memcpy(p, data, data_len);
 8009922:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009926:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 800992a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800992e:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8009932:	6812      	ldr	r2, [r2, #0]
 8009934:	6819      	ldr	r1, [r3, #0]
 8009936:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 800993a:	f013 fcdd 	bl	801d2f8 <memcpy>
    p[data_len] = 0x80;
 800993e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009942:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8009946:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4413      	add	r3, r2
 800994e:	2280      	movs	r2, #128	; 0x80
 8009950:	701a      	strb	r2, [r3, #0]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 8009952:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009956:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3319      	adds	r3, #25
 800995e:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368

    for (i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++) {
 8009962:	2300      	movs	r3, #0
 8009964:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8009968:	e010      	b.n	800998c <block_cipher_df+0x10e>
        key[i] = i;
 800996a:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800996e:	b2d9      	uxtb	r1, r3
 8009970:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009974:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8009978:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800997c:	4413      	add	r3, r2
 800997e:	460a      	mov	r2, r1
 8009980:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++) {
 8009982:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8009986:	3301      	adds	r3, #1
 8009988:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800998c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8009990:	2b1f      	cmp	r3, #31
 8009992:	ddea      	ble.n	800996a <block_cipher_df+0xec>
    if (status != PSA_SUCCESS) {
        ret = psa_generic_status_to_mbedtls(status);
        goto exit;
    }
#else
    mbedtls_aes_init(&aes_ctx);
 8009994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009998:	4618      	mov	r0, r3
 800999a:	f7f8 ffdb 	bl	8002954 <mbedtls_aes_init>

    if ((ret = mbedtls_aes_setkey_enc(&aes_ctx, key,
 800999e:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 80099a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7f9 f824 	bl	80029f8 <mbedtls_aes_setkey_enc>
 80099b0:	f8c7 0378 	str.w	r0, [r7, #888]	; 0x378
 80099b4:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f040 8125 	bne.w	8009c08 <block_cipher_df+0x38a>
#endif

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for (j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE) {
 80099be:	2300      	movs	r3, #0
 80099c0:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 80099c4:	e0d7      	b.n	8009b76 <block_cipher_df+0x2f8>
        p = buf;
 80099c6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80099ca:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
        memset(chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE);
 80099ce:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80099d2:	2210      	movs	r2, #16
 80099d4:	2100      	movs	r1, #0
 80099d6:	4618      	mov	r0, r3
 80099d8:	f013 fbf0 	bl	801d1bc <memset>
        use_len = buf_len;
 80099dc:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80099e0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c

        while (use_len > 0) {
 80099e4:	e0a1      	b.n	8009b2a <block_cipher_df+0x2ac>
 80099e6:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80099ea:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80099ee:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80099f2:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 80099f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80099fa:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80099fe:	2310      	movs	r3, #16
 8009a00:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
    size_t i = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (; (i + 4) <= n; i += 4) {
 8009a0a:	e048      	b.n	8009a9e <block_cipher_df+0x220>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8009a0c:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8009a10:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8009a14:	4413      	add	r3, r2
 8009a16:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8009a1a:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8009a22:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009a26:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009a2a:	601a      	str	r2, [r3, #0]
    return r;
 8009a2c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009a30:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8009a3a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8009a3e:	440b      	add	r3, r1
 8009a40:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8009a44:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 8009a4c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009a50:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009a54:	6019      	str	r1, [r3, #0]
    return r;
 8009a56:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009a5a:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4053      	eors	r3, r2
 8009a62:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
        mbedtls_put_unaligned_uint32(r + i, x);
 8009a66:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8009a6a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8009a6e:	4413      	add	r3, r2
 8009a70:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8009a74:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009a78:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8009a7c:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009a86:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8009a8a:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8009a8c:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8009a90:	601a      	str	r2, [r3, #0]
}
 8009a92:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8009a94:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8009a98:	3304      	adds	r3, #4
 8009a9a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8009a9e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d2af      	bcs.n	8009a0c <block_cipher_df+0x18e>
    for (; i < n; i++) {
 8009aac:	e018      	b.n	8009ae0 <block_cipher_df+0x262>
        r[i] = a[i] ^ b[i];
 8009aae:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8009ab2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8009ab6:	4413      	add	r3, r2
 8009ab8:	7819      	ldrb	r1, [r3, #0]
 8009aba:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8009abe:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8009ac2:	4413      	add	r3, r2
 8009ac4:	781a      	ldrb	r2, [r3, #0]
 8009ac6:	f8d7 035c 	ldr.w	r0, [r7, #860]	; 0x35c
 8009aca:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8009ace:	4403      	add	r3, r0
 8009ad0:	404a      	eors	r2, r1
 8009ad2:	b2d2      	uxtb	r2, r2
 8009ad4:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8009ad6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8009ada:	3301      	adds	r3, #1
 8009adc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8009ae0:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8009ae4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d8e0      	bhi.n	8009aae <block_cipher_df+0x230>
}
 8009aec:	bf00      	nop
            mbedtls_xor(chain, chain, p, MBEDTLS_CTR_DRBG_BLOCKSIZE);
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8009aee:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8009af2:	3310      	adds	r3, #16
 8009af4:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
            use_len -= (use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 8009af8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8009afc:	2b10      	cmp	r3, #16
 8009afe:	bf28      	it	cs
 8009b00:	2310      	movcs	r3, #16
            use_len -= (use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE) ?
 8009b02:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
            if (status != PSA_SUCCESS) {
                ret = psa_generic_status_to_mbedtls(status);
                goto exit;
            }
#else
            if ((ret = mbedtls_aes_crypt_ecb(&aes_ctx, MBEDTLS_AES_ENCRYPT,
 8009b0c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009b10:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009b14:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009b18:	2101      	movs	r1, #1
 8009b1a:	f7fa f8e9 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 8009b1e:	f8c7 0378 	str.w	r0, [r7, #888]	; 0x378
 8009b22:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d170      	bne.n	8009c0c <block_cipher_df+0x38e>
        while (use_len > 0) {
 8009b2a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f47f af59 	bne.w	80099e6 <block_cipher_df+0x168>
                goto exit;
            }
#endif
        }

        memcpy(tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE);
 8009b34:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8009b38:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8009b3c:	441a      	add	r2, r3
 8009b3e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009b42:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009b46:	4614      	mov	r4, r2
 8009b48:	461d      	mov	r5, r3
 8009b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b4c:	6020      	str	r0, [r4, #0]
 8009b4e:	6061      	str	r1, [r4, #4]
 8009b50:	60a2      	str	r2, [r4, #8]
 8009b52:	60e3      	str	r3, [r4, #12]

        /*
         * Update IV
         */
        buf[3]++;
 8009b54:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009b58:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009b5c:	78db      	ldrb	r3, [r3, #3]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009b66:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009b6a:	70da      	strb	r2, [r3, #3]
    for (j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE) {
 8009b6c:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8009b70:	3310      	adds	r3, #16
 8009b72:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8009b76:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8009b7a:	2b2f      	cmp	r3, #47	; 0x2f
 8009b7c:	f77f af23 	ble.w	80099c6 <block_cipher_df+0x148>
    if (status != PSA_SUCCESS) {
        ret = psa_generic_status_to_mbedtls(status);
        goto exit;
    }
#else
    if ((ret = mbedtls_aes_setkey_enc(&aes_ctx, tmp,
 8009b80:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8009b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7f8 ff33 	bl	80029f8 <mbedtls_aes_setkey_enc>
 8009b92:	f8c7 0378 	str.w	r0, [r7, #888]	; 0x378
 8009b96:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d138      	bne.n	8009c10 <block_cipher_df+0x392>
                                      MBEDTLS_CTR_DRBG_KEYBITS)) != 0) {
        goto exit;
    }
#endif
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
 8009b9e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009ba2:	3320      	adds	r3, #32
 8009ba4:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
    p = output;
 8009ba8:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009bac:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c

    for (j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE) {
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8009bbc:	e01f      	b.n	8009bfe <block_cipher_df+0x380>
        if (status != PSA_SUCCESS) {
            ret = psa_generic_status_to_mbedtls(status);
            goto exit;
        }
#else
        if ((ret = mbedtls_aes_crypt_ecb(&aes_ctx, MBEDTLS_AES_ENCRYPT,
 8009bbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009bc2:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8009bc6:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8009bca:	2101      	movs	r1, #1
 8009bcc:	f7fa f890 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 8009bd0:	f8c7 0378 	str.w	r0, [r7, #888]	; 0x378
 8009bd4:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d11b      	bne.n	8009c14 <block_cipher_df+0x396>
                                         iv, iv)) != 0) {
            goto exit;
        }
#endif
        memcpy(p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE);
 8009bdc:	2210      	movs	r2, #16
 8009bde:	f8d7 1364 	ldr.w	r1, [r7, #868]	; 0x364
 8009be2:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 8009be6:	f013 fb87 	bl	801d2f8 <memcpy>
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8009bea:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8009bee:	3310      	adds	r3, #16
 8009bf0:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
    for (j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE) {
 8009bf4:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8009bf8:	3310      	adds	r3, #16
 8009bfa:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8009bfe:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8009c02:	2b2f      	cmp	r3, #47	; 0x2f
 8009c04:	dddb      	ble.n	8009bbe <block_cipher_df+0x340>
    }
exit:
 8009c06:	e006      	b.n	8009c16 <block_cipher_df+0x398>
        goto exit;
 8009c08:	bf00      	nop
 8009c0a:	e004      	b.n	8009c16 <block_cipher_df+0x398>
                goto exit;
 8009c0c:	bf00      	nop
 8009c0e:	e002      	b.n	8009c16 <block_cipher_df+0x398>
        goto exit;
 8009c10:	bf00      	nop
 8009c12:	e000      	b.n	8009c16 <block_cipher_df+0x398>
            goto exit;
 8009c14:	bf00      	nop
#if defined(MBEDTLS_CTR_DRBG_USE_PSA_CRYPTO)
    ctr_drbg_destroy_psa_contex(&psa_ctx);
#else
    mbedtls_aes_free(&aes_ctx);
 8009c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7f8 fea8 	bl	8002970 <mbedtls_aes_free>
#endif
    /*
     * tidy up the stack
     */
    mbedtls_platform_zeroize(buf, sizeof(buf));
 8009c20:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8009c24:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f004 fe7f 	bl	800e92c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(tmp, sizeof(tmp));
 8009c2e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009c32:	2130      	movs	r1, #48	; 0x30
 8009c34:	4618      	mov	r0, r3
 8009c36:	f004 fe79 	bl	800e92c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(key, sizeof(key));
 8009c3a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8009c3e:	2120      	movs	r1, #32
 8009c40:	4618      	mov	r0, r3
 8009c42:	f004 fe73 	bl	800e92c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(chain, sizeof(chain));
 8009c46:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009c4a:	2110      	movs	r1, #16
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f004 fe6d 	bl	800e92c <mbedtls_platform_zeroize>
    if (0 != ret) {
 8009c52:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d007      	beq.n	8009c6a <block_cipher_df+0x3ec>
        /*
         * wipe partial seed from memory
         */
        mbedtls_platform_zeroize(output, MBEDTLS_CTR_DRBG_SEEDLEN);
 8009c5a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009c5e:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8009c62:	2130      	movs	r1, #48	; 0x30
 8009c64:	6818      	ldr	r0, [r3, #0]
 8009c66:	f004 fe61 	bl	800e92c <mbedtls_platform_zeroize>
    }

    return ret;
 8009c6a:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f507 7760 	add.w	r7, r7, #896	; 0x380
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bdb0      	pop	{r4, r5, r7, pc}

08009c78 <ctr_drbg_update_internal>:
 *   ctx->aes_ctx = Key
 *   ctx->counter = V
 */
static int ctr_drbg_update_internal(mbedtls_ctr_drbg_context *ctx,
                                    const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN])
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b09e      	sub	sp, #120	; 0x78
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
 8009c82:	f107 0318 	add.w	r3, r7, #24
 8009c86:	677b      	str	r3, [r7, #116]	; 0x74
    int j;
    int ret = 0;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
#if defined(MBEDTLS_CTR_DRBG_USE_PSA_CRYPTO)
    psa_status_t status;
    size_t tmp_len;
#endif

    memset(tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN);
 8009c8c:	f107 0318 	add.w	r3, r7, #24
 8009c90:	2230      	movs	r2, #48	; 0x30
 8009c92:	2100      	movs	r1, #0
 8009c94:	4618      	mov	r0, r3
 8009c96:	f013 fa91 	bl	801d1bc <memset>

    for (j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE) {
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	673b      	str	r3, [r7, #112]	; 0x70
 8009c9e:	e015      	b.n	8009ccc <ctr_drbg_update_internal+0x54>
        /*
         * Increase counter
         */
        mbedtls_ctr_increment_counter(ctx->counter);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff fd80 	bl	80097a8 <mbedtls_ctr_increment_counter>
        if (status != PSA_SUCCESS) {
            ret = psa_generic_status_to_mbedtls(status);
            goto exit;
        }
#else
        if ((ret = mbedtls_aes_crypt_ecb(&ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f103 0020 	add.w	r0, r3, #32
                                         ctx->counter, p)) != 0) {
 8009cae:	687a      	ldr	r2, [r7, #4]
        if ((ret = mbedtls_aes_crypt_ecb(&ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 8009cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	f7fa f81c 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 8009cb8:	66f8      	str	r0, [r7, #108]	; 0x6c
 8009cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d166      	bne.n	8009d8e <ctr_drbg_update_internal+0x116>
            goto exit;
        }
#endif

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8009cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cc2:	3310      	adds	r3, #16
 8009cc4:	677b      	str	r3, [r7, #116]	; 0x74
    for (j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE) {
 8009cc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cc8:	3310      	adds	r3, #16
 8009cca:	673b      	str	r3, [r7, #112]	; 0x70
 8009ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cce:	2b2f      	cmp	r3, #47	; 0x2f
 8009cd0:	dde6      	ble.n	8009ca0 <ctr_drbg_update_internal+0x28>
 8009cd2:	f107 0318 	add.w	r3, r7, #24
 8009cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cd8:	f107 0318 	add.w	r3, r7, #24
 8009cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	663b      	str	r3, [r7, #96]	; 0x60
 8009ce2:	2330      	movs	r3, #48	; 0x30
 8009ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t i = 0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	65bb      	str	r3, [r7, #88]	; 0x58
    for (; (i + 4) <= n; i += 4) {
 8009cea:	e01e      	b.n	8009d2a <ctr_drbg_update_internal+0xb2>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8009cec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cf0:	4413      	add	r3, r2
 8009cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8009cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cf6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009cf8:	617b      	str	r3, [r7, #20]
    return r;
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d00:	440b      	add	r3, r1
 8009d02:	653b      	str	r3, [r7, #80]	; 0x50
 8009d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d06:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009d08:	613b      	str	r3, [r7, #16]
    return r;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	4053      	eors	r3, r2
 8009d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
        mbedtls_put_unaligned_uint32(r + i, x);
 8009d10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d14:	4413      	add	r3, r2
 8009d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
    memcpy(p, &x, sizeof(x));
 8009d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d20:	601a      	str	r2, [r3, #0]
}
 8009d22:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8009d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d26:	3304      	adds	r3, #4
 8009d28:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d2db      	bcs.n	8009cec <ctr_drbg_update_internal+0x74>
    for (; i < n; i++) {
 8009d34:	e010      	b.n	8009d58 <ctr_drbg_update_internal+0xe0>
        r[i] = a[i] ^ b[i];
 8009d36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009d38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d3a:	4413      	add	r3, r2
 8009d3c:	7819      	ldrb	r1, [r3, #0]
 8009d3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d42:	4413      	add	r3, r2
 8009d44:	781a      	ldrb	r2, [r3, #0]
 8009d46:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009d48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d4a:	4403      	add	r3, r0
 8009d4c:	404a      	eors	r2, r1
 8009d4e:	b2d2      	uxtb	r2, r2
 8009d50:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8009d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d54:	3301      	adds	r3, #1
 8009d56:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d8ea      	bhi.n	8009d36 <ctr_drbg_update_internal+0xbe>
}
 8009d60:	bf00      	nop
    if (status != PSA_SUCCESS) {
        ret = psa_generic_status_to_mbedtls(status);
        goto exit;
    }
#else
    if ((ret = mbedtls_aes_setkey_enc(&ctx->aes_ctx, tmp,
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	3320      	adds	r3, #32
 8009d66:	f107 0118 	add.w	r1, r7, #24
 8009d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7f8 fe42 	bl	80029f8 <mbedtls_aes_setkey_enc>
 8009d74:	66f8      	str	r0, [r7, #108]	; 0x6c
 8009d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <ctr_drbg_update_internal+0x11a>
                                      MBEDTLS_CTR_DRBG_KEYBITS)) != 0) {
        goto exit;
    }
#endif
    memcpy(ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE,
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f107 0318 	add.w	r3, r7, #24
 8009d82:	3320      	adds	r3, #32
 8009d84:	2210      	movs	r2, #16
 8009d86:	4619      	mov	r1, r3
 8009d88:	f013 fab6 	bl	801d2f8 <memcpy>
 8009d8c:	e002      	b.n	8009d94 <ctr_drbg_update_internal+0x11c>
            goto exit;
 8009d8e:	bf00      	nop
 8009d90:	e000      	b.n	8009d94 <ctr_drbg_update_internal+0x11c>
        goto exit;
 8009d92:	bf00      	nop
           MBEDTLS_CTR_DRBG_BLOCKSIZE);

exit:
    mbedtls_platform_zeroize(tmp, sizeof(tmp));
 8009d94:	f107 0318 	add.w	r3, r7, #24
 8009d98:	2130      	movs	r1, #48	; 0x30
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f004 fdc6 	bl	800e92c <mbedtls_platform_zeroize>
    return ret;
 8009da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3778      	adds	r7, #120	; 0x78
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <mbedtls_ctr_drbg_reseed_internal>:
 */
static int mbedtls_ctr_drbg_reseed_internal(mbedtls_ctr_drbg_context *ctx,
                                            const unsigned char *additional,
                                            size_t len,
                                            size_t nonce_len)
{
 8009daa:	b590      	push	{r4, r7, lr}
 8009dac:	b0e7      	sub	sp, #412	; 0x19c
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	f507 74cc 	add.w	r4, r7, #408	; 0x198
 8009db4:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
 8009db8:	6020      	str	r0, [r4, #0]
 8009dba:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8009dbe:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
 8009dc2:	6001      	str	r1, [r0, #0]
 8009dc4:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8009dc8:	f5a1 71ca 	sub.w	r1, r1, #404	; 0x194
 8009dcc:	600a      	str	r2, [r1, #0]
 8009dce:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8009dd2:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8009dd6:	6013      	str	r3, [r2, #0]
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8009dde:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8009de2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

    if (ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT) {
 8009de6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009dea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009df6:	d902      	bls.n	8009dfe <mbedtls_ctr_drbg_reseed_internal+0x54>
        return MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG;
 8009df8:	f06f 0337 	mvn.w	r3, #55	; 0x37
 8009dfc:	e0e5      	b.n	8009fca <mbedtls_ctr_drbg_reseed_internal+0x220>
    }
    if (nonce_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len) {
 8009dfe:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009e02:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	f5c3 73c0 	rsb	r3, r3, #384	; 0x180
 8009e0e:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8009e12:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8009e16:	6812      	ldr	r2, [r2, #0]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d902      	bls.n	8009e22 <mbedtls_ctr_drbg_reseed_internal+0x78>
        return MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG;
 8009e1c:	f06f 0337 	mvn.w	r3, #55	; 0x37
 8009e20:	e0d3      	b.n	8009fca <mbedtls_ctr_drbg_reseed_internal+0x220>
    }
    if (len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len - nonce_len) {
 8009e22:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009e26:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	699a      	ldr	r2, [r3, #24]
 8009e2e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009e32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4413      	add	r3, r2
 8009e3a:	f5c3 73c0 	rsb	r3, r3, #384	; 0x180
 8009e3e:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8009e42:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8009e46:	6812      	ldr	r2, [r2, #0]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d902      	bls.n	8009e52 <mbedtls_ctr_drbg_reseed_internal+0xa8>
        return MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG;
 8009e4c:	f06f 0337 	mvn.w	r3, #55	; 0x37
 8009e50:	e0bb      	b.n	8009fca <mbedtls_ctr_drbg_reseed_internal+0x220>
    }

    memset(seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT);
 8009e52:	f107 0310 	add.w	r3, r7, #16
 8009e56:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f013 f9ad 	bl	801d1bc <memset>

    /* Gather entropy_len bytes of entropy to seed state. */
    if (0 != ctx->f_entropy(ctx->p_entropy, seed, ctx->entropy_len)) {
 8009e62:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009e66:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8009e70:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8009e74:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 8009e78:	6812      	ldr	r2, [r2, #0]
 8009e7a:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
 8009e7e:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8009e82:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 8009e86:	6812      	ldr	r2, [r2, #0]
 8009e88:	6992      	ldr	r2, [r2, #24]
 8009e8a:	f107 0110 	add.w	r1, r7, #16
 8009e8e:	4798      	blx	r3
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <mbedtls_ctr_drbg_reseed_internal+0xf2>
        return MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED;
 8009e96:	f06f 0333 	mvn.w	r3, #51	; 0x33
 8009e9a:	e096      	b.n	8009fca <mbedtls_ctr_drbg_reseed_internal+0x220>
    }
    seedlen += ctx->entropy_len;
 8009e9c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009ea0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8009eac:	4413      	add	r3, r2
 8009eae:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    /* Gather entropy for a nonce if requested. */
    if (nonce_len != 0) {
 8009eb2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009eb6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d028      	beq.n	8009f12 <mbedtls_ctr_drbg_reseed_internal+0x168>
        if (0 != ctx->f_entropy(ctx->p_entropy, seed + seedlen, nonce_len)) {
 8009ec0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009ec4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8009ece:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8009ed2:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 8009ed6:	6812      	ldr	r2, [r2, #0]
 8009ed8:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
 8009edc:	f107 0110 	add.w	r1, r7, #16
 8009ee0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8009ee4:	4411      	add	r1, r2
 8009ee6:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8009eea:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8009eee:	6812      	ldr	r2, [r2, #0]
 8009ef0:	4798      	blx	r3
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <mbedtls_ctr_drbg_reseed_internal+0x154>
            return MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED;
 8009ef8:	f06f 0333 	mvn.w	r3, #51	; 0x33
 8009efc:	e065      	b.n	8009fca <mbedtls_ctr_drbg_reseed_internal+0x220>
        }
        seedlen += nonce_len;
 8009efe:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009f02:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009f06:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    }

    /* Add additional data if provided. */
    if (additional != NULL && len != 0) {
 8009f12:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009f16:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d021      	beq.n	8009f64 <mbedtls_ctr_drbg_reseed_internal+0x1ba>
 8009f20:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009f24:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d01a      	beq.n	8009f64 <mbedtls_ctr_drbg_reseed_internal+0x1ba>
        memcpy(seed + seedlen, additional, len);
 8009f2e:	f107 0210 	add.w	r2, r7, #16
 8009f32:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8009f36:	18d0      	adds	r0, r2, r3
 8009f38:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009f3c:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 8009f40:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009f44:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009f48:	6812      	ldr	r2, [r2, #0]
 8009f4a:	6819      	ldr	r1, [r3, #0]
 8009f4c:	f013 f9d4 	bl	801d2f8 <memcpy>
        seedlen += len;
 8009f50:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009f54:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009f58:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    }

    /* Reduce to 384 bits. */
    if ((ret = block_cipher_df(seed, seed, seedlen)) != 0) {
 8009f64:	f107 0110 	add.w	r1, r7, #16
 8009f68:	f107 0310 	add.w	r3, r7, #16
 8009f6c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7ff fc84 	bl	800987e <block_cipher_df>
 8009f76:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8009f7a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d117      	bne.n	8009fb2 <mbedtls_ctr_drbg_reseed_internal+0x208>
        goto exit;
    }

    /* Update state. */
    if ((ret = ctr_drbg_update_internal(ctx, seed)) != 0) {
 8009f82:	f107 0210 	add.w	r2, r7, #16
 8009f86:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009f8a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009f8e:	4611      	mov	r1, r2
 8009f90:	6818      	ldr	r0, [r3, #0]
 8009f92:	f7ff fe71 	bl	8009c78 <ctr_drbg_update_internal>
 8009f96:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8009f9a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d109      	bne.n	8009fb6 <mbedtls_ctr_drbg_reseed_internal+0x20c>
        goto exit;
    }
    ctx->reseed_counter = 1;
 8009fa2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009fa6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2201      	movs	r2, #1
 8009fae:	611a      	str	r2, [r3, #16]
 8009fb0:	e002      	b.n	8009fb8 <mbedtls_ctr_drbg_reseed_internal+0x20e>
        goto exit;
 8009fb2:	bf00      	nop
 8009fb4:	e000      	b.n	8009fb8 <mbedtls_ctr_drbg_reseed_internal+0x20e>
        goto exit;
 8009fb6:	bf00      	nop

exit:
    mbedtls_platform_zeroize(seed, sizeof(seed));
 8009fb8:	f107 0310 	add.w	r3, r7, #16
 8009fbc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f004 fcb3 	bl	800e92c <mbedtls_platform_zeroize>
    return ret;
 8009fc6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd90      	pop	{r4, r7, pc}

08009fd4 <mbedtls_ctr_drbg_reseed>:

int mbedtls_ctr_drbg_reseed(mbedtls_ctr_drbg_context *ctx,
                            const unsigned char *additional, size_t len)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
    return mbedtls_ctr_drbg_reseed_internal(ctx, additional, len, 0);
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	68b9      	ldr	r1, [r7, #8]
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f7ff fedf 	bl	8009daa <mbedtls_ctr_drbg_reseed_internal>
 8009fec:	4603      	mov	r3, r0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <good_nonce_len>:
 * is sufficient to achieve the maximum security strength given the key
 * size and entropy length. If there is enough entropy in the initial
 * call to the entropy function to serve as both the entropy input and
 * the nonce, don't make a second call to get a nonce. */
static size_t good_nonce_len(size_t entropy_len)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b083      	sub	sp, #12
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
    if (entropy_len >= MBEDTLS_CTR_DRBG_KEYSIZE * 3 / 2) {
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2b2f      	cmp	r3, #47	; 0x2f
 800a002:	d901      	bls.n	800a008 <good_nonce_len+0x12>
        return 0;
 800a004:	2300      	movs	r3, #0
 800a006:	e002      	b.n	800a00e <good_nonce_len+0x18>
    } else {
        return (entropy_len + 1) / 2;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	3301      	adds	r3, #1
 800a00c:	085b      	lsrs	r3, r3, #1
    }
}
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <mbedtls_ctr_drbg_seed>:
int mbedtls_ctr_drbg_seed(mbedtls_ctr_drbg_context *ctx,
                          int (*f_entropy)(void *, unsigned char *, size_t),
                          void *p_entropy,
                          const unsigned char *custom,
                          size_t len)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b08e      	sub	sp, #56	; 0x38
 800a01e:	af00      	add	r7, sp, #0
 800a020:	60f8      	str	r0, [r7, #12]
 800a022:	60b9      	str	r1, [r7, #8]
 800a024:	607a      	str	r2, [r7, #4]
 800a026:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800a028:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800a02c:	637b      	str	r3, [r7, #52]	; 0x34
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];
    size_t nonce_len;

    memset(key, 0, MBEDTLS_CTR_DRBG_KEYSIZE);
 800a02e:	f107 0310 	add.w	r3, r7, #16
 800a032:	2220      	movs	r2, #32
 800a034:	2100      	movs	r1, #0
 800a036:	4618      	mov	r0, r3
 800a038:	f013 f8c0 	bl	801d1bc <memset>
    /* The mutex is initialized iff f_entropy is set. */
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init(&ctx->mutex);
#endif

    ctx->f_entropy = f_entropy;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    ctx->p_entropy = p_entropy;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    if (ctx->entropy_len == 0) {
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <mbedtls_ctr_drbg_seed+0x40>
        ctx->entropy_len = MBEDTLS_CTR_DRBG_ENTROPY_LEN;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2230      	movs	r2, #48	; 0x30
 800a058:	619a      	str	r2, [r3, #24]
    }
    /* ctx->reseed_counter contains the desired amount of entropy to
     * grab for a nonce (see mbedtls_ctr_drbg_set_nonce_len()).
     * If it's -1, indicating that the entropy nonce length was not set
     * explicitly, use a sufficiently large nonce for security. */
    nonce_len = (ctx->reseed_counter >= 0 ?
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	691b      	ldr	r3, [r3, #16]
                 (size_t) ctx->reseed_counter :
 800a05e:	2b00      	cmp	r3, #0
 800a060:	db02      	blt.n	800a068 <mbedtls_ctr_drbg_seed+0x4e>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	e005      	b.n	800a074 <mbedtls_ctr_drbg_seed+0x5a>
                 good_nonce_len(ctx->entropy_len));
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7ff ffc2 	bl	8009ff6 <good_nonce_len>
 800a072:	4603      	mov	r3, r0
    nonce_len = (ctx->reseed_counter >= 0 ?
 800a074:	633b      	str	r3, [r7, #48]	; 0x30
    if (status != PSA_SUCCESS) {
        ret = psa_generic_status_to_mbedtls(status);
        return status;
    }
#else
    if ((ret = mbedtls_aes_setkey_enc(&ctx->aes_ctx, key,
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3320      	adds	r3, #32
 800a07a:	f107 0110 	add.w	r1, r7, #16
 800a07e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a082:	4618      	mov	r0, r3
 800a084:	f7f8 fcb8 	bl	80029f8 <mbedtls_aes_setkey_enc>
 800a088:	6378      	str	r0, [r7, #52]	; 0x34
 800a08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <mbedtls_ctr_drbg_seed+0x7a>
                                      MBEDTLS_CTR_DRBG_KEYBITS)) != 0) {
        return ret;
 800a090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a092:	e00c      	b.n	800a0ae <mbedtls_ctr_drbg_seed+0x94>
    }
#endif

    /* Do the initial seeding. */
    if ((ret = mbedtls_ctr_drbg_reseed_internal(ctx, custom, len,
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f7ff fe85 	bl	8009daa <mbedtls_ctr_drbg_reseed_internal>
 800a0a0:	6378      	str	r0, [r7, #52]	; 0x34
 800a0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <mbedtls_ctr_drbg_seed+0x92>
                                                nonce_len)) != 0) {
        return ret;
 800a0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0aa:	e000      	b.n	800a0ae <mbedtls_ctr_drbg_seed+0x94>
    }
    return 0;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3738      	adds	r7, #56	; 0x38
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <mbedtls_ctr_drbg_random_with_add>:
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_random_with_add(void *p_rng,
                                     unsigned char *output, size_t output_len,
                                     const unsigned char *additional, size_t add_len)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b098      	sub	sp, #96	; 0x60
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	60f8      	str	r0, [r7, #12]
 800a0be:	60b9      	str	r1, [r7, #8]
 800a0c0:	607a      	str	r2, [r7, #4]
 800a0c2:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char *p = output;
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	65bb      	str	r3, [r7, #88]	; 0x58
        unsigned char add_input[MBEDTLS_CTR_DRBG_SEEDLEN];
        unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    } locals;
    size_t use_len;

    if (output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST) {
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0d6:	d902      	bls.n	800a0de <mbedtls_ctr_drbg_random_with_add+0x28>
        return MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG;
 800a0d8:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a0dc:	e085      	b.n	800a1ea <mbedtls_ctr_drbg_random_with_add+0x134>
    }

    if (add_len > MBEDTLS_CTR_DRBG_MAX_INPUT) {
 800a0de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a0e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0e4:	d902      	bls.n	800a0ec <mbedtls_ctr_drbg_random_with_add+0x36>
        return MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG;
 800a0e6:	f06f 0337 	mvn.w	r3, #55	; 0x37
 800a0ea:	e07e      	b.n	800a1ea <mbedtls_ctr_drbg_random_with_add+0x134>
    }

    memset(locals.add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN);
 800a0ec:	f107 0310 	add.w	r3, r7, #16
 800a0f0:	2230      	movs	r2, #48	; 0x30
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f013 f861 	bl	801d1bc <memset>

    if (ctx->reseed_counter > ctx->reseed_interval ||
 800a0fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0fc:	691a      	ldr	r2, [r3, #16]
 800a0fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	429a      	cmp	r2, r3
 800a104:	dc03      	bgt.n	800a10e <mbedtls_ctr_drbg_random_with_add+0x58>
        ctx->prediction_resistance) {
 800a106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a108:	695b      	ldr	r3, [r3, #20]
    if (ctx->reseed_counter > ctx->reseed_interval ||
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00c      	beq.n	800a128 <mbedtls_ctr_drbg_random_with_add+0x72>
        if ((ret = mbedtls_ctr_drbg_reseed(ctx, additional, add_len)) != 0) {
 800a10e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a114:	f7ff ff5e 	bl	8009fd4 <mbedtls_ctr_drbg_reseed>
 800a118:	65f8      	str	r0, [r7, #92]	; 0x5c
 800a11a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <mbedtls_ctr_drbg_random_with_add+0x6e>
            return ret;
 800a120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a122:	e062      	b.n	800a1ea <mbedtls_ctr_drbg_random_with_add+0x134>
        }
        add_len = 0;
 800a124:	2300      	movs	r3, #0
 800a126:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    if (add_len > 0) {
 800a128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d03c      	beq.n	800a1a8 <mbedtls_ctr_drbg_random_with_add+0xf2>
        if ((ret = block_cipher_df(locals.add_input, additional, add_len)) != 0) {
 800a12e:	f107 0310 	add.w	r3, r7, #16
 800a132:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	4618      	mov	r0, r3
 800a138:	f7ff fba1 	bl	800987e <block_cipher_df>
 800a13c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800a13e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a140:	2b00      	cmp	r3, #0
 800a142:	d144      	bne.n	800a1ce <mbedtls_ctr_drbg_random_with_add+0x118>
            goto exit;
        }
        if ((ret = ctr_drbg_update_internal(ctx, locals.add_input)) != 0) {
 800a144:	f107 0310 	add.w	r3, r7, #16
 800a148:	4619      	mov	r1, r3
 800a14a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a14c:	f7ff fd94 	bl	8009c78 <ctr_drbg_update_internal>
 800a150:	65f8      	str	r0, [r7, #92]	; 0x5c
 800a152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a154:	2b00      	cmp	r3, #0
 800a156:	d13c      	bne.n	800a1d2 <mbedtls_ctr_drbg_random_with_add+0x11c>
            goto exit;
        }
    }

    while (output_len > 0) {
 800a158:	e026      	b.n	800a1a8 <mbedtls_ctr_drbg_random_with_add+0xf2>
        /*
         * Increase counter (treat it as a 128-bit big-endian integer).
         */
        mbedtls_ctr_increment_counter(ctx->counter);
 800a15a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7ff fb23 	bl	80097a8 <mbedtls_ctr_increment_counter>
        if (status != PSA_SUCCESS) {
            ret = psa_generic_status_to_mbedtls(status);
            goto exit;
        }
#else
        if ((ret = mbedtls_aes_crypt_ecb(&ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 800a162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a164:	f103 0020 	add.w	r0, r3, #32
                                         ctx->counter, locals.tmp)) != 0) {
 800a168:	6d7a      	ldr	r2, [r7, #84]	; 0x54
        if ((ret = mbedtls_aes_crypt_ecb(&ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 800a16a:	f107 0310 	add.w	r3, r7, #16
 800a16e:	3330      	adds	r3, #48	; 0x30
 800a170:	2101      	movs	r1, #1
 800a172:	f7f9 fdbd 	bl	8003cf0 <mbedtls_aes_crypt_ecb>
 800a176:	65f8      	str	r0, [r7, #92]	; 0x5c
 800a178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d12b      	bne.n	800a1d6 <mbedtls_ctr_drbg_random_with_add+0x120>
            goto exit;
        }
#endif

        use_len = (output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2b10      	cmp	r3, #16
 800a182:	bf28      	it	cs
 800a184:	2310      	movcs	r3, #16
 800a186:	653b      	str	r3, [r7, #80]	; 0x50
            ? MBEDTLS_CTR_DRBG_BLOCKSIZE : output_len;
        /*
         * Copy random block to destination
         */
        memcpy(p, locals.tmp, use_len);
 800a188:	f107 0310 	add.w	r3, r7, #16
 800a18c:	3330      	adds	r3, #48	; 0x30
 800a18e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a190:	4619      	mov	r1, r3
 800a192:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a194:	f013 f8b0 	bl	801d2f8 <memcpy>
        p += use_len;
 800a198:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a19a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a19c:	4413      	add	r3, r2
 800a19e:	65bb      	str	r3, [r7, #88]	; 0x58
        output_len -= use_len;
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	607b      	str	r3, [r7, #4]
    while (output_len > 0) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1d5      	bne.n	800a15a <mbedtls_ctr_drbg_random_with_add+0xa4>
    }

    if ((ret = ctr_drbg_update_internal(ctx, locals.add_input)) != 0) {
 800a1ae:	f107 0310 	add.w	r3, r7, #16
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a1b6:	f7ff fd5f 	bl	8009c78 <ctr_drbg_update_internal>
 800a1ba:	65f8      	str	r0, [r7, #92]	; 0x5c
 800a1bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10b      	bne.n	800a1da <mbedtls_ctr_drbg_random_with_add+0x124>
        goto exit;
    }

    ctx->reseed_counter++;
 800a1c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	1c5a      	adds	r2, r3, #1
 800a1c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1ca:	611a      	str	r2, [r3, #16]
 800a1cc:	e006      	b.n	800a1dc <mbedtls_ctr_drbg_random_with_add+0x126>
            goto exit;
 800a1ce:	bf00      	nop
 800a1d0:	e004      	b.n	800a1dc <mbedtls_ctr_drbg_random_with_add+0x126>
            goto exit;
 800a1d2:	bf00      	nop
 800a1d4:	e002      	b.n	800a1dc <mbedtls_ctr_drbg_random_with_add+0x126>
            goto exit;
 800a1d6:	bf00      	nop
 800a1d8:	e000      	b.n	800a1dc <mbedtls_ctr_drbg_random_with_add+0x126>
        goto exit;
 800a1da:	bf00      	nop

exit:
    mbedtls_platform_zeroize(&locals, sizeof(locals));
 800a1dc:	f107 0310 	add.w	r3, r7, #16
 800a1e0:	2140      	movs	r1, #64	; 0x40
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f004 fba2 	bl	800e92c <mbedtls_platform_zeroize>
    return ret;
 800a1e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3760      	adds	r7, #96	; 0x60
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random(void *p_rng, unsigned char *output,
                            size_t output_len)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b088      	sub	sp, #32
 800a1f6:	af02      	add	r7, sp, #8
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800a1fe:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800a202:	617b      	str	r3, [r7, #20]
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	613b      	str	r3, [r7, #16]
    if ((ret = mbedtls_mutex_lock(&ctx->mutex)) != 0) {
        return ret;
    }
#endif

    ret = mbedtls_ctr_drbg_random_with_add(ctx, output, output_len, NULL, 0);
 800a208:	2300      	movs	r3, #0
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	2300      	movs	r3, #0
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	68b9      	ldr	r1, [r7, #8]
 800a212:	6938      	ldr	r0, [r7, #16]
 800a214:	f7ff ff4f 	bl	800a0b6 <mbedtls_ctr_drbg_random_with_add>
 800a218:	6178      	str	r0, [r7, #20]
    if (mbedtls_mutex_unlock(&ctx->mutex) != 0) {
        return MBEDTLS_ERR_THREADING_MUTEX_ERROR;
    }
#endif

    return ret;
 800a21a:	697b      	ldr	r3, [r7, #20]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3718      	adds	r7, #24
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <mbedtls_des_init>:
    {                                                   \
        uint32_t t = (a); (a) = (b); (b) = t; t = 0;    \
    } while (0)

void mbedtls_des_init(mbedtls_des_context *ctx)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_des_context));
 800a22c:	2280      	movs	r2, #128	; 0x80
 800a22e:	2100      	movs	r1, #0
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f012 ffc3 	bl	801d1bc <memset>
}
 800a236:	bf00      	nop
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <mbedtls_des_free>:

void mbedtls_des_free(mbedtls_des_context *ctx)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b082      	sub	sp, #8
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d004      	beq.n	800a256 <mbedtls_des_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_des_context));
 800a24c:	2180      	movs	r1, #128	; 0x80
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f004 fb6c 	bl	800e92c <mbedtls_platform_zeroize>
 800a254:	e000      	b.n	800a258 <mbedtls_des_free+0x1a>
        return;
 800a256:	bf00      	nop
}
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <mbedtls_des3_init>:

void mbedtls_des3_init(mbedtls_des3_context *ctx)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b082      	sub	sp, #8
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_des3_context));
 800a266:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800a26a:	2100      	movs	r1, #0
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f012 ffa5 	bl	801d1bc <memset>
}
 800a272:	bf00      	nop
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <mbedtls_des3_free>:

void mbedtls_des3_free(mbedtls_des3_context *ctx)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b082      	sub	sp, #8
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d005      	beq.n	800a294 <mbedtls_des3_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_des3_context));
 800a288:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f004 fb4d 	bl	800e92c <mbedtls_platform_zeroize>
 800a292:	e000      	b.n	800a296 <mbedtls_des3_free+0x1c>
        return;
 800a294:	bf00      	nop
}
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <mbedtls_des_setkey>:
    return 0;
}

#if !defined(MBEDTLS_DES_SETKEY_ALT)
void mbedtls_des_setkey(uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE])
{
 800a29c:	b480      	push	{r7}
 800a29e:	b08b      	sub	sp, #44	; 0x2c
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	613b      	str	r3, [r7, #16]
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a2ae:	60fb      	str	r3, [r7, #12]
    return r;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
    int i;
    uint32_t X, Y, T;

    X = MBEDTLS_GET_UINT32_BE(key, 0);
 800a2b2:	ba1b      	rev	r3, r3
 800a2b4:	623b      	str	r3, [r7, #32]
    Y = MBEDTLS_GET_UINT32_BE(key, 4);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	617b      	str	r3, [r7, #20]
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a2c0:	60bb      	str	r3, [r7, #8]
    return r;
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	ba1b      	rev	r3, r3
 800a2c6:	61fb      	str	r3, [r7, #28]

    /*
     * Permuted Choice 1
     */
    T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	091a      	lsrs	r2, r3, #4
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	4053      	eors	r3, r2
 800a2d0:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800a2d4:	61bb      	str	r3, [r7, #24]
 800a2d6:	6a3a      	ldr	r2, [r7, #32]
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	4053      	eors	r3, r2
 800a2dc:	623b      	str	r3, [r7, #32]
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	011b      	lsls	r3, r3, #4
 800a2e2:	69fa      	ldr	r2, [r7, #28]
 800a2e4:	4053      	eors	r3, r2
 800a2e6:	61fb      	str	r3, [r7, #28]
    T =  ((Y) ^ X) & 0x10101010;  X ^= T; Y ^= (T);
 800a2e8:	69fa      	ldr	r2, [r7, #28]
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	4053      	eors	r3, r2
 800a2ee:	f003 3310 	and.w	r3, r3, #269488144	; 0x10101010
 800a2f2:	61bb      	str	r3, [r7, #24]
 800a2f4:	6a3a      	ldr	r2, [r7, #32]
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	4053      	eors	r3, r2
 800a2fa:	623b      	str	r3, [r7, #32]
 800a2fc:	69fa      	ldr	r2, [r7, #28]
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	4053      	eors	r3, r2
 800a302:	61fb      	str	r3, [r7, #28]

    X =   (LHs[(X) & 0xF] << 3) | (LHs[(X >>  8) & 0xF] << 2)
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	f003 030f 	and.w	r3, r3, #15
 800a30a:	4a55      	ldr	r2, [pc, #340]	; (800a460 <mbedtls_des_setkey+0x1c4>)
 800a30c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a310:	00da      	lsls	r2, r3, #3
 800a312:	6a3b      	ldr	r3, [r7, #32]
 800a314:	0a1b      	lsrs	r3, r3, #8
 800a316:	f003 030f 	and.w	r3, r3, #15
 800a31a:	4951      	ldr	r1, [pc, #324]	; (800a460 <mbedtls_des_setkey+0x1c4>)
 800a31c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	431a      	orrs	r2, r3
        | (LHs[(X >> 16) & 0xF] << 1) | (LHs[(X >> 24) & 0xF])
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	0c1b      	lsrs	r3, r3, #16
 800a328:	f003 030f 	and.w	r3, r3, #15
 800a32c:	494c      	ldr	r1, [pc, #304]	; (800a460 <mbedtls_des_setkey+0x1c4>)
 800a32e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	431a      	orrs	r2, r3
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	0e1b      	lsrs	r3, r3, #24
 800a33a:	f003 030f 	and.w	r3, r3, #15
 800a33e:	4948      	ldr	r1, [pc, #288]	; (800a460 <mbedtls_des_setkey+0x1c4>)
 800a340:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a344:	431a      	orrs	r2, r3
        | (LHs[(X >>  5) & 0xF] << 7) | (LHs[(X >> 13) & 0xF] << 6)
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	095b      	lsrs	r3, r3, #5
 800a34a:	f003 030f 	and.w	r3, r3, #15
 800a34e:	4944      	ldr	r1, [pc, #272]	; (800a460 <mbedtls_des_setkey+0x1c4>)
 800a350:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a354:	01db      	lsls	r3, r3, #7
 800a356:	431a      	orrs	r2, r3
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	0b5b      	lsrs	r3, r3, #13
 800a35c:	f003 030f 	and.w	r3, r3, #15
 800a360:	493f      	ldr	r1, [pc, #252]	; (800a460 <mbedtls_des_setkey+0x1c4>)
 800a362:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a366:	019b      	lsls	r3, r3, #6
 800a368:	431a      	orrs	r2, r3
        | (LHs[(X >> 21) & 0xF] << 5) | (LHs[(X >> 29) & 0xF] << 4);
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	0d5b      	lsrs	r3, r3, #21
 800a36e:	f003 030f 	and.w	r3, r3, #15
 800a372:	493b      	ldr	r1, [pc, #236]	; (800a460 <mbedtls_des_setkey+0x1c4>)
 800a374:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a378:	015b      	lsls	r3, r3, #5
 800a37a:	431a      	orrs	r2, r3
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	0f5b      	lsrs	r3, r3, #29
 800a380:	4937      	ldr	r1, [pc, #220]	; (800a460 <mbedtls_des_setkey+0x1c4>)
 800a382:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a386:	011b      	lsls	r3, r3, #4
    X =   (LHs[(X) & 0xF] << 3) | (LHs[(X >>  8) & 0xF] << 2)
 800a388:	4313      	orrs	r3, r2
 800a38a:	623b      	str	r3, [r7, #32]

    Y =   (RHs[(Y >>  1) & 0xF] << 3) | (RHs[(Y >>  9) & 0xF] << 2)
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	085b      	lsrs	r3, r3, #1
 800a390:	f003 030f 	and.w	r3, r3, #15
 800a394:	4a33      	ldr	r2, [pc, #204]	; (800a464 <mbedtls_des_setkey+0x1c8>)
 800a396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a39a:	00da      	lsls	r2, r3, #3
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	0a5b      	lsrs	r3, r3, #9
 800a3a0:	f003 030f 	and.w	r3, r3, #15
 800a3a4:	492f      	ldr	r1, [pc, #188]	; (800a464 <mbedtls_des_setkey+0x1c8>)
 800a3a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	431a      	orrs	r2, r3
        | (RHs[(Y >> 17) & 0xF] << 1) | (RHs[(Y >> 25) & 0xF])
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	0c5b      	lsrs	r3, r3, #17
 800a3b2:	f003 030f 	and.w	r3, r3, #15
 800a3b6:	492b      	ldr	r1, [pc, #172]	; (800a464 <mbedtls_des_setkey+0x1c8>)
 800a3b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	0e5b      	lsrs	r3, r3, #25
 800a3c4:	f003 030f 	and.w	r3, r3, #15
 800a3c8:	4926      	ldr	r1, [pc, #152]	; (800a464 <mbedtls_des_setkey+0x1c8>)
 800a3ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a3ce:	431a      	orrs	r2, r3
        | (RHs[(Y >>  4) & 0xF] << 7) | (RHs[(Y >> 12) & 0xF] << 6)
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	091b      	lsrs	r3, r3, #4
 800a3d4:	f003 030f 	and.w	r3, r3, #15
 800a3d8:	4922      	ldr	r1, [pc, #136]	; (800a464 <mbedtls_des_setkey+0x1c8>)
 800a3da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a3de:	01db      	lsls	r3, r3, #7
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	0b1b      	lsrs	r3, r3, #12
 800a3e6:	f003 030f 	and.w	r3, r3, #15
 800a3ea:	491e      	ldr	r1, [pc, #120]	; (800a464 <mbedtls_des_setkey+0x1c8>)
 800a3ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a3f0:	019b      	lsls	r3, r3, #6
 800a3f2:	431a      	orrs	r2, r3
        | (RHs[(Y >> 20) & 0xF] << 5) | (RHs[(Y >> 28) & 0xF] << 4);
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	0d1b      	lsrs	r3, r3, #20
 800a3f8:	f003 030f 	and.w	r3, r3, #15
 800a3fc:	4919      	ldr	r1, [pc, #100]	; (800a464 <mbedtls_des_setkey+0x1c8>)
 800a3fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a402:	015b      	lsls	r3, r3, #5
 800a404:	431a      	orrs	r2, r3
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	0f1b      	lsrs	r3, r3, #28
 800a40a:	4916      	ldr	r1, [pc, #88]	; (800a464 <mbedtls_des_setkey+0x1c8>)
 800a40c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a410:	011b      	lsls	r3, r3, #4
    Y =   (RHs[(Y >>  1) & 0xF] << 3) | (RHs[(Y >>  9) & 0xF] << 2)
 800a412:	4313      	orrs	r3, r2
 800a414:	61fb      	str	r3, [r7, #28]

    X &= 0x0FFFFFFF;
 800a416:	6a3b      	ldr	r3, [r7, #32]
 800a418:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a41c:	623b      	str	r3, [r7, #32]
    Y &= 0x0FFFFFFF;
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a424:	61fb      	str	r3, [r7, #28]

    /*
     * calculate subkeys
     */
    for (i = 0; i < 16; i++) {
 800a426:	2300      	movs	r3, #0
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
 800a42a:	e113      	b.n	800a654 <mbedtls_des_setkey+0x3b8>
        if (i < 2 || i == 8 || i == 15) {
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	2b01      	cmp	r3, #1
 800a430:	dd05      	ble.n	800a43e <mbedtls_des_setkey+0x1a2>
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	2b08      	cmp	r3, #8
 800a436:	d002      	beq.n	800a43e <mbedtls_des_setkey+0x1a2>
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	2b0f      	cmp	r3, #15
 800a43c:	d114      	bne.n	800a468 <mbedtls_des_setkey+0x1cc>
            X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
 800a43e:	6a3b      	ldr	r3, [r7, #32]
 800a440:	005a      	lsls	r2, r3, #1
 800a442:	6a3b      	ldr	r3, [r7, #32]
 800a444:	0edb      	lsrs	r3, r3, #27
 800a446:	4313      	orrs	r3, r2
 800a448:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a44c:	623b      	str	r3, [r7, #32]
            Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	005a      	lsls	r2, r3, #1
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	0edb      	lsrs	r3, r3, #27
 800a456:	4313      	orrs	r3, r2
 800a458:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a45c:	61fb      	str	r3, [r7, #28]
 800a45e:	e013      	b.n	800a488 <mbedtls_des_setkey+0x1ec>
 800a460:	0801fe94 	.word	0x0801fe94
 800a464:	0801fed4 	.word	0x0801fed4
        } else {
            X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
 800a468:	6a3b      	ldr	r3, [r7, #32]
 800a46a:	009a      	lsls	r2, r3, #2
 800a46c:	6a3b      	ldr	r3, [r7, #32]
 800a46e:	0e9b      	lsrs	r3, r3, #26
 800a470:	4313      	orrs	r3, r2
 800a472:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a476:	623b      	str	r3, [r7, #32]
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	009a      	lsls	r2, r3, #2
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	0e9b      	lsrs	r3, r3, #26
 800a480:	4313      	orrs	r3, r2
 800a482:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a486:	61fb      	str	r3, [r7, #28]
        }

        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	011b      	lsls	r3, r3, #4
 800a48c:	f003 5210 	and.w	r2, r3, #603979776	; 0x24000000
 800a490:	6a3b      	ldr	r3, [r7, #32]
 800a492:	071b      	lsls	r3, r3, #28
 800a494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a498:	431a      	orrs	r2, r3
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	039b      	lsls	r3, r3, #14
 800a49e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	049b      	lsls	r3, r3, #18
 800a4a8:	f003 7302 	and.w	r3, r3, #34078720	; 0x2080000
 800a4ac:	431a      	orrs	r2, r3
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 800a4ae:	6a3b      	ldr	r3, [r7, #32]
 800a4b0:	019b      	lsls	r3, r3, #6
 800a4b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
 800a4ba:	025b      	lsls	r3, r3, #9
 800a4bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4c0:	431a      	orrs	r2, r3
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 800a4c2:	6a3b      	ldr	r3, [r7, #32]
 800a4c4:	085b      	lsrs	r3, r3, #1
 800a4c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4ca:	431a      	orrs	r2, r3
 800a4cc:	6a3b      	ldr	r3, [r7, #32]
 800a4ce:	029b      	lsls	r3, r3, #10
 800a4d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4d4:	431a      	orrs	r2, r3
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4de:	431a      	orrs	r2, r3
 800a4e0:	6a3b      	ldr	r3, [r7, #32]
 800a4e2:	0a9b      	lsrs	r3, r3, #10
 800a4e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4e8:	431a      	orrs	r2, r3
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	0b5b      	lsrs	r3, r3, #13
 800a4ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	091b      	lsrs	r3, r3, #4
 800a4f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4fc:	431a      	orrs	r2, r3
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	019b      	lsls	r3, r3, #6
 800a502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a506:	431a      	orrs	r2, r3
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	085b      	lsrs	r3, r3, #1
 800a50c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a510:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000200) | ((Y) & 0x00000100)
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	0b9b      	lsrs	r3, r3, #14
 800a516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a51a:	431a      	orrs	r2, r3
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a522:	431a      	orrs	r2, r3
                | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	095b      	lsrs	r3, r3, #5
 800a528:	f003 0320 	and.w	r3, r3, #32
 800a52c:	431a      	orrs	r2, r3
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	0a9b      	lsrs	r3, r3, #10
 800a532:	f003 0310 	and.w	r3, r3, #16
 800a536:	431a      	orrs	r2, r3
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	08db      	lsrs	r3, r3, #3
 800a53c:	f003 0308 	and.w	r3, r3, #8
 800a540:	431a      	orrs	r2, r3
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	0c9b      	lsrs	r3, r3, #18
 800a546:	f003 0304 	and.w	r3, r3, #4
 800a54a:	431a      	orrs	r2, r3
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	0e9b      	lsrs	r3, r3, #26
 800a550:	f003 0302 	and.w	r3, r3, #2
 800a554:	ea42 0103 	orr.w	r1, r2, r3
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	0e1b      	lsrs	r3, r3, #24
 800a55c:	f003 0201 	and.w	r2, r3, #1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	1d18      	adds	r0, r3, #4
 800a564:	6078      	str	r0, [r7, #4]
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 800a566:	430a      	orrs	r2, r1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800a568:	601a      	str	r2, [r3, #0]

        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	03db      	lsls	r3, r3, #15
 800a56e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800a572:	6a3b      	ldr	r3, [r7, #32]
 800a574:	045b      	lsls	r3, r3, #17
 800a576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a57a:	431a      	orrs	r2, r3
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 800a57c:	6a3b      	ldr	r3, [r7, #32]
 800a57e:	029b      	lsls	r3, r3, #10
 800a580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a584:	431a      	orrs	r2, r3
 800a586:	6a3b      	ldr	r3, [r7, #32]
 800a588:	059b      	lsls	r3, r3, #22
 800a58a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a58e:	431a      	orrs	r2, r3
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 800a590:	6a3b      	ldr	r3, [r7, #32]
 800a592:	089b      	lsrs	r3, r3, #2
 800a594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a598:	431a      	orrs	r2, r3
 800a59a:	6a3b      	ldr	r3, [r7, #32]
 800a59c:	005b      	lsls	r3, r3, #1
 800a59e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5a2:	431a      	orrs	r2, r3
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	041b      	lsls	r3, r3, #16
 800a5a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5ac:	431a      	orrs	r2, r3
 800a5ae:	6a3b      	ldr	r3, [r7, #32]
 800a5b0:	02db      	lsls	r3, r3, #11
 800a5b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5b6:	431a      	orrs	r2, r3
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 800a5b8:	6a3b      	ldr	r3, [r7, #32]
 800a5ba:	00db      	lsls	r3, r3, #3
 800a5bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	6a3b      	ldr	r3, [r7, #32]
 800a5c4:	099b      	lsrs	r3, r3, #6
 800a5c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5ca:	431a      	orrs	r2, r3
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 800a5cc:	6a3b      	ldr	r3, [r7, #32]
 800a5ce:	03db      	lsls	r3, r3, #15
 800a5d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d4:	431a      	orrs	r2, r3
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	091b      	lsrs	r3, r3, #4
 800a5da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5de:	431a      	orrs	r2, r3
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	089b      	lsrs	r3, r3, #2
 800a5e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5e8:	431a      	orrs	r2, r3
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	021b      	lsls	r3, r3, #8
 800a5ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5f2:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	0b99      	lsrs	r1, r3, #14
 800a5f8:	f640 0308 	movw	r3, #2056	; 0x808
 800a5fc:	400b      	ands	r3, r1
 800a5fe:	431a      	orrs	r2, r3
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	0a5b      	lsrs	r3, r3, #9
 800a604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a608:	431a      	orrs	r2, r3
                | ((Y) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a610:	431a      	orrs	r2, r3
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	01db      	lsls	r3, r3, #7
 800a616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a61a:	431a      	orrs	r2, r3
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	09db      	lsrs	r3, r3, #7
 800a620:	f003 0320 	and.w	r3, r3, #32
 800a624:	431a      	orrs	r2, r3
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	08db      	lsrs	r3, r3, #3
 800a62a:	f003 0311 	and.w	r3, r3, #17
 800a62e:	431a      	orrs	r2, r3
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	f003 0304 	and.w	r3, r3, #4
 800a638:	ea42 0103 	orr.w	r1, r2, r3
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	0d5b      	lsrs	r3, r3, #21
 800a640:	f003 0202 	and.w	r2, r3, #2
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	1d18      	adds	r0, r3, #4
 800a648:	6078      	str	r0, [r7, #4]
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 800a64a:	430a      	orrs	r2, r1
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800a64c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 16; i++) {
 800a64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a650:	3301      	adds	r3, #1
 800a652:	627b      	str	r3, [r7, #36]	; 0x24
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	2b0f      	cmp	r3, #15
 800a658:	f77f aee8 	ble.w	800a42c <mbedtls_des_setkey+0x190>
    }
}
 800a65c:	bf00      	nop
 800a65e:	bf00      	nop
 800a660:	372c      	adds	r7, #44	; 0x2c
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop

0800a66c <mbedtls_des_setkey_enc>:

/*
 * DES key schedule (56-bit, encryption)
 */
int mbedtls_des_setkey_enc(mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE])
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
    mbedtls_des_setkey(ctx->sk, key);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6839      	ldr	r1, [r7, #0]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff fe0e 	bl	800a29c <mbedtls_des_setkey>

    return 0;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <mbedtls_des_setkey_dec>:

/*
 * DES key schedule (56-bit, decryption)
 */
int mbedtls_des_setkey_dec(mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE])
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b086      	sub	sp, #24
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	6039      	str	r1, [r7, #0]
    int i;

    mbedtls_des_setkey(ctx->sk, key);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff fdff 	bl	800a29c <mbedtls_des_setkey>

    for (i = 0; i < 16; i += 2) {
 800a69e:	2300      	movs	r3, #0
 800a6a0:	617b      	str	r3, [r7, #20]
 800a6a2:	e034      	b.n	800a70e <mbedtls_des_setkey_dec+0x84>
        SWAP(ctx->sk[i], ctx->sk[30 - i]);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ac:	613b      	str	r3, [r7, #16]
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f1c3 021e 	rsb	r2, r3, #30
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f1c3 021e 	rsb	r2, r3, #30
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6939      	ldr	r1, [r7, #16]
 800a6cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	613b      	str	r3, [r7, #16]
        SWAP(ctx->sk[i + 1], ctx->sk[31 - i]);
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	1c5a      	adds	r2, r3, #1
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6de:	60fb      	str	r3, [r7, #12]
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	f1c3 011f 	rsb	r1, r3, #31
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f1c3 021f 	rsb	r2, r3, #31
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68f9      	ldr	r1, [r7, #12]
 800a700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a704:	2300      	movs	r3, #0
 800a706:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 16; i += 2) {
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	3302      	adds	r3, #2
 800a70c:	617b      	str	r3, [r7, #20]
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	2b0f      	cmp	r3, #15
 800a712:	ddc7      	ble.n	800a6a4 <mbedtls_des_setkey_dec+0x1a>
    }

    return 0;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3718      	adds	r7, #24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <des3_set2key>:

static void des3_set2key(uint32_t esk[96],
                         uint32_t dsk[96],
                         const unsigned char key[MBEDTLS_DES_KEY_SIZE*2])
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b086      	sub	sp, #24
 800a722:	af00      	add	r7, sp, #0
 800a724:	60f8      	str	r0, [r7, #12]
 800a726:	60b9      	str	r1, [r7, #8]
 800a728:	607a      	str	r2, [r7, #4]
    int i;

    mbedtls_des_setkey(esk, key);
 800a72a:	6879      	ldr	r1, [r7, #4]
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7ff fdb5 	bl	800a29c <mbedtls_des_setkey>
    mbedtls_des_setkey(dsk + 32, key + 8);
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3308      	adds	r3, #8
 800a73c:	4619      	mov	r1, r3
 800a73e:	4610      	mov	r0, r2
 800a740:	f7ff fdac 	bl	800a29c <mbedtls_des_setkey>

    for (i = 0; i < 32; i += 2) {
 800a744:	2300      	movs	r3, #0
 800a746:	617b      	str	r3, [r7, #20]
 800a748:	e063      	b.n	800a812 <des3_set2key+0xf4>
        dsk[i] = esk[30 - i];
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	f1c3 031e 	rsb	r3, r3, #30
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	441a      	add	r2, r3
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	68b9      	ldr	r1, [r7, #8]
 800a75c:	440b      	add	r3, r1
 800a75e:	6812      	ldr	r2, [r2, #0]
 800a760:	601a      	str	r2, [r3, #0]
        dsk[i +  1] = esk[31 - i];
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f1c3 031f 	rsb	r3, r3, #31
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	441a      	add	r2, r3
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	3301      	adds	r3, #1
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	68b9      	ldr	r1, [r7, #8]
 800a776:	440b      	add	r3, r1
 800a778:	6812      	ldr	r2, [r2, #0]
 800a77a:	601a      	str	r2, [r3, #0]

        esk[i + 32] = dsk[62 - i];
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	441a      	add	r2, r3
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	3320      	adds	r3, #32
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	68f9      	ldr	r1, [r7, #12]
 800a790:	440b      	add	r3, r1
 800a792:	6812      	ldr	r2, [r2, #0]
 800a794:	601a      	str	r2, [r3, #0]
        esk[i + 33] = dsk[63 - i];
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	441a      	add	r2, r3
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	3321      	adds	r3, #33	; 0x21
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	68f9      	ldr	r1, [r7, #12]
 800a7aa:	440b      	add	r3, r1
 800a7ac:	6812      	ldr	r2, [r2, #0]
 800a7ae:	601a      	str	r2, [r3, #0]

        esk[i + 64] = esk[i];
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	441a      	add	r2, r3
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	3340      	adds	r3, #64	; 0x40
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	68f9      	ldr	r1, [r7, #12]
 800a7c0:	440b      	add	r3, r1
 800a7c2:	6812      	ldr	r2, [r2, #0]
 800a7c4:	601a      	str	r2, [r3, #0]
        esk[i + 65] = esk[i + 1];
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	441a      	add	r2, r3
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	3341      	adds	r3, #65	; 0x41
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	68f9      	ldr	r1, [r7, #12]
 800a7d8:	440b      	add	r3, r1
 800a7da:	6812      	ldr	r2, [r2, #0]
 800a7dc:	601a      	str	r2, [r3, #0]

        dsk[i + 64] = dsk[i];
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	441a      	add	r2, r3
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	3340      	adds	r3, #64	; 0x40
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	68b9      	ldr	r1, [r7, #8]
 800a7ee:	440b      	add	r3, r1
 800a7f0:	6812      	ldr	r2, [r2, #0]
 800a7f2:	601a      	str	r2, [r3, #0]
        dsk[i + 65] = dsk[i + 1];
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	441a      	add	r2, r3
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	3341      	adds	r3, #65	; 0x41
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	68b9      	ldr	r1, [r7, #8]
 800a806:	440b      	add	r3, r1
 800a808:	6812      	ldr	r2, [r2, #0]
 800a80a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 32; i += 2) {
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	3302      	adds	r3, #2
 800a810:	617b      	str	r3, [r7, #20]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	2b1f      	cmp	r3, #31
 800a816:	dd98      	ble.n	800a74a <des3_set2key+0x2c>
    }
}
 800a818:	bf00      	nop
 800a81a:	bf00      	nop
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <mbedtls_des3_set2key_enc>:
/*
 * Triple-DES key schedule (112-bit, encryption)
 */
int mbedtls_des3_set2key_enc(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2])
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b0e2      	sub	sp, #392	; 0x188
 800a826:	af00      	add	r7, sp, #0
 800a828:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a82c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800a830:	6018      	str	r0, [r3, #0]
 800a832:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a836:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800a83a:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set2key(ctx->sk, sk, key);
 800a83c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a840:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800a844:	6818      	ldr	r0, [r3, #0]
 800a846:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a84a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800a84e:	f107 0108 	add.w	r1, r7, #8
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	f7ff ff63 	bl	800a71e <des3_set2key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 800a858:	f107 0308 	add.w	r3, r7, #8
 800a85c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800a860:	4618      	mov	r0, r3
 800a862:	f004 f863 	bl	800e92c <mbedtls_platform_zeroize>

    return 0;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <mbedtls_des3_set2key_dec>:
/*
 * Triple-DES key schedule (112-bit, decryption)
 */
int mbedtls_des3_set2key_dec(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2])
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b0e2      	sub	sp, #392	; 0x188
 800a876:	af00      	add	r7, sp, #0
 800a878:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a87c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800a880:	6018      	str	r0, [r3, #0]
 800a882:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a886:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800a88a:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set2key(sk, ctx->sk, key);
 800a88c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a890:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800a894:	6819      	ldr	r1, [r3, #0]
 800a896:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a89a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800a89e:	f107 0008 	add.w	r0, r7, #8
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	f7ff ff3b 	bl	800a71e <des3_set2key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 800a8a8:	f107 0308 	add.w	r3, r7, #8
 800a8ac:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f004 f83b 	bl	800e92c <mbedtls_platform_zeroize>

    return 0;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <des3_set3key>:

static void des3_set3key(uint32_t esk[96],
                         uint32_t dsk[96],
                         const unsigned char key[24])
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b086      	sub	sp, #24
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	60f8      	str	r0, [r7, #12]
 800a8ca:	60b9      	str	r1, [r7, #8]
 800a8cc:	607a      	str	r2, [r7, #4]
    int i;

    mbedtls_des_setkey(esk, key);
 800a8ce:	6879      	ldr	r1, [r7, #4]
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f7ff fce3 	bl	800a29c <mbedtls_des_setkey>
    mbedtls_des_setkey(dsk + 32, key +  8);
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	3308      	adds	r3, #8
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	4610      	mov	r0, r2
 800a8e4:	f7ff fcda 	bl	800a29c <mbedtls_des_setkey>
    mbedtls_des_setkey(esk + 64, key + 16);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	3310      	adds	r3, #16
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	f7ff fcd1 	bl	800a29c <mbedtls_des_setkey>

    for (i = 0; i < 32; i += 2) {
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]
 800a8fe:	e04f      	b.n	800a9a0 <des3_set3key+0xde>
        dsk[i] = esk[94 - i];
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	441a      	add	r2, r3
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	68b9      	ldr	r1, [r7, #8]
 800a912:	440b      	add	r3, r1
 800a914:	6812      	ldr	r2, [r2, #0]
 800a916:	601a      	str	r2, [r3, #0]
        dsk[i +  1] = esk[95 - i];
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	441a      	add	r2, r3
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	3301      	adds	r3, #1
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	68b9      	ldr	r1, [r7, #8]
 800a92c:	440b      	add	r3, r1
 800a92e:	6812      	ldr	r2, [r2, #0]
 800a930:	601a      	str	r2, [r3, #0]

        esk[i + 32] = dsk[62 - i];
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	441a      	add	r2, r3
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	3320      	adds	r3, #32
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	68f9      	ldr	r1, [r7, #12]
 800a946:	440b      	add	r3, r1
 800a948:	6812      	ldr	r2, [r2, #0]
 800a94a:	601a      	str	r2, [r3, #0]
        esk[i + 33] = dsk[63 - i];
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	441a      	add	r2, r3
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	3321      	adds	r3, #33	; 0x21
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	68f9      	ldr	r1, [r7, #12]
 800a960:	440b      	add	r3, r1
 800a962:	6812      	ldr	r2, [r2, #0]
 800a964:	601a      	str	r2, [r3, #0]

        dsk[i + 64] = esk[30 - i];
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f1c3 031e 	rsb	r3, r3, #30
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	441a      	add	r2, r3
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	3340      	adds	r3, #64	; 0x40
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	68b9      	ldr	r1, [r7, #8]
 800a97a:	440b      	add	r3, r1
 800a97c:	6812      	ldr	r2, [r2, #0]
 800a97e:	601a      	str	r2, [r3, #0]
        dsk[i + 65] = esk[31 - i];
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	f1c3 031f 	rsb	r3, r3, #31
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	441a      	add	r2, r3
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	3341      	adds	r3, #65	; 0x41
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	68b9      	ldr	r1, [r7, #8]
 800a994:	440b      	add	r3, r1
 800a996:	6812      	ldr	r2, [r2, #0]
 800a998:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 32; i += 2) {
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	3302      	adds	r3, #2
 800a99e:	617b      	str	r3, [r7, #20]
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	2b1f      	cmp	r3, #31
 800a9a4:	ddac      	ble.n	800a900 <des3_set3key+0x3e>
    }
}
 800a9a6:	bf00      	nop
 800a9a8:	bf00      	nop
 800a9aa:	3718      	adds	r7, #24
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <mbedtls_des3_set3key_enc>:
/*
 * Triple-DES key schedule (168-bit, encryption)
 */
int mbedtls_des3_set3key_enc(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3])
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b0e2      	sub	sp, #392	; 0x188
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a9ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800a9be:	6018      	str	r0, [r3, #0]
 800a9c0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a9c4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800a9c8:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key(ctx->sk, sk, key);
 800a9ca:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a9ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800a9d2:	6818      	ldr	r0, [r3, #0]
 800a9d4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a9d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800a9dc:	f107 0108 	add.w	r1, r7, #8
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	f7ff ff6e 	bl	800a8c2 <des3_set3key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 800a9e6:	f107 0308 	add.w	r3, r7, #8
 800a9ea:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f003 ff9c 	bl	800e92c <mbedtls_platform_zeroize>

    return 0;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <mbedtls_des3_set3key_dec>:
/*
 * Triple-DES key schedule (168-bit, decryption)
 */
int mbedtls_des3_set3key_dec(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3])
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b0e2      	sub	sp, #392	; 0x188
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800aa0a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800aa0e:	6018      	str	r0, [r3, #0]
 800aa10:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800aa14:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800aa18:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key(sk, ctx->sk, key);
 800aa1a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800aa1e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800aa22:	6819      	ldr	r1, [r3, #0]
 800aa24:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800aa28:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800aa2c:	f107 0008 	add.w	r0, r7, #8
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	f7ff ff46 	bl	800a8c2 <des3_set3key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 800aa36:	f107 0308 	add.w	r3, r7, #8
 800aa3a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f003 ff74 	bl	800e92c <mbedtls_platform_zeroize>

    return 0;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <mbedtls_des_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES_CRYPT_ECB_ALT)
int mbedtls_des_crypt_ecb(mbedtls_des_context *ctx,
                          const unsigned char input[8],
                          unsigned char output[8])
{
 800aa50:	b480      	push	{r7}
 800aa52:	b093      	sub	sp, #76	; 0x4c
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa66:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800aa68:	61bb      	str	r3, [r7, #24]
    return r;
 800aa6a:	69bb      	ldr	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE(input, 0);
 800aa6c:	ba1b      	rev	r3, r3
 800aa6e:	643b      	str	r3, [r7, #64]	; 0x40
    Y = MBEDTLS_GET_UINT32_BE(input, 4);
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	3304      	adds	r3, #4
 800aa74:	633b      	str	r3, [r7, #48]	; 0x30
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800aa7a:	617b      	str	r3, [r7, #20]
    return r;
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	ba1b      	rev	r3, r3
 800aa80:	63fb      	str	r3, [r7, #60]	; 0x3c

    DES_IP(X, Y);
 800aa82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa84:	091a      	lsrs	r2, r3, #4
 800aa86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa88:	4053      	eors	r3, r2
 800aa8a:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800aa8e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa94:	4053      	eors	r3, r2
 800aa96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9a:	011b      	lsls	r3, r3, #4
 800aa9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa9e:	4053      	eors	r3, r2
 800aaa0:	643b      	str	r3, [r7, #64]	; 0x40
 800aaa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaa4:	0c1a      	lsrs	r2, r3, #16
 800aaa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa8:	4053      	eors	r3, r2
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	637b      	str	r3, [r7, #52]	; 0x34
 800aaae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab2:	4053      	eors	r3, r2
 800aab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab8:	041b      	lsls	r3, r3, #16
 800aaba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aabc:	4053      	eors	r3, r2
 800aabe:	643b      	str	r3, [r7, #64]	; 0x40
 800aac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac2:	089a      	lsrs	r2, r3, #2
 800aac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aac6:	4053      	eors	r3, r2
 800aac8:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800aacc:	637b      	str	r3, [r7, #52]	; 0x34
 800aace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad2:	4053      	eors	r3, r2
 800aad4:	643b      	str	r3, [r7, #64]	; 0x40
 800aad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aadc:	4053      	eors	r3, r2
 800aade:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae2:	0a1a      	lsrs	r2, r3, #8
 800aae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aae6:	4053      	eors	r3, r2
 800aae8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800aaec:	637b      	str	r3, [r7, #52]	; 0x34
 800aaee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aaf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf2:	4053      	eors	r3, r2
 800aaf4:	643b      	str	r3, [r7, #64]	; 0x40
 800aaf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf8:	021b      	lsls	r3, r3, #8
 800aafa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aafc:	4053      	eors	r3, r2
 800aafe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab02:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800ab06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab0c:	4053      	eors	r3, r2
 800ab0e:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800ab12:	637b      	str	r3, [r7, #52]	; 0x34
 800ab14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab18:	4053      	eors	r3, r2
 800ab1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab20:	4053      	eors	r3, r2
 800ab22:	643b      	str	r3, [r7, #64]	; 0x40
 800ab24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab26:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800ab2a:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < 8; i++) {
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab30:	e0a6      	b.n	800ac80 <mbedtls_des_crypt_ecb+0x230>
        DES_ROUND(Y, X);
 800ab32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab34:	1d1a      	adds	r2, r3, #4
 800ab36:	63ba      	str	r2, [r7, #56]	; 0x38
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab3c:	4053      	eors	r3, r2
 800ab3e:	637b      	str	r3, [r7, #52]	; 0x34
 800ab40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab46:	4a88      	ldr	r2, [pc, #544]	; (800ad68 <mbedtls_des_crypt_ecb+0x318>)
 800ab48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ab4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab4e:	0a1b      	lsrs	r3, r3, #8
 800ab50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab54:	4985      	ldr	r1, [pc, #532]	; (800ad6c <mbedtls_des_crypt_ecb+0x31c>)
 800ab56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ab5a:	405a      	eors	r2, r3
 800ab5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab5e:	0c1b      	lsrs	r3, r3, #16
 800ab60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab64:	4982      	ldr	r1, [pc, #520]	; (800ad70 <mbedtls_des_crypt_ecb+0x320>)
 800ab66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ab6a:	405a      	eors	r2, r3
 800ab6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab6e:	0e1b      	lsrs	r3, r3, #24
 800ab70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab74:	497f      	ldr	r1, [pc, #508]	; (800ad74 <mbedtls_des_crypt_ecb+0x324>)
 800ab76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ab7a:	4053      	eors	r3, r2
 800ab7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab7e:	4053      	eors	r3, r2
 800ab80:	643b      	str	r3, [r7, #64]	; 0x40
 800ab82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab84:	1d1a      	adds	r2, r3, #4
 800ab86:	63ba      	str	r2, [r7, #56]	; 0x38
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab8c:	ea4f 1333 	mov.w	r3, r3, ror #4
 800ab90:	4053      	eors	r3, r2
 800ab92:	637b      	str	r3, [r7, #52]	; 0x34
 800ab94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab9a:	4a77      	ldr	r2, [pc, #476]	; (800ad78 <mbedtls_des_crypt_ecb+0x328>)
 800ab9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba2:	0a1b      	lsrs	r3, r3, #8
 800aba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aba8:	4974      	ldr	r1, [pc, #464]	; (800ad7c <mbedtls_des_crypt_ecb+0x32c>)
 800abaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800abae:	405a      	eors	r2, r3
 800abb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb2:	0c1b      	lsrs	r3, r3, #16
 800abb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abb8:	4971      	ldr	r1, [pc, #452]	; (800ad80 <mbedtls_des_crypt_ecb+0x330>)
 800abba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800abbe:	405a      	eors	r2, r3
 800abc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc2:	0e1b      	lsrs	r3, r3, #24
 800abc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abc8:	496e      	ldr	r1, [pc, #440]	; (800ad84 <mbedtls_des_crypt_ecb+0x334>)
 800abca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800abce:	4053      	eors	r3, r2
 800abd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abd2:	4053      	eors	r3, r2
 800abd4:	643b      	str	r3, [r7, #64]	; 0x40
        DES_ROUND(X, Y);
 800abd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd8:	1d1a      	adds	r2, r3, #4
 800abda:	63ba      	str	r2, [r7, #56]	; 0x38
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abe0:	4053      	eors	r3, r2
 800abe2:	637b      	str	r3, [r7, #52]	; 0x34
 800abe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abea:	4a5f      	ldr	r2, [pc, #380]	; (800ad68 <mbedtls_des_crypt_ecb+0x318>)
 800abec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800abf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf2:	0a1b      	lsrs	r3, r3, #8
 800abf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abf8:	495c      	ldr	r1, [pc, #368]	; (800ad6c <mbedtls_des_crypt_ecb+0x31c>)
 800abfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800abfe:	405a      	eors	r2, r3
 800ac00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac02:	0c1b      	lsrs	r3, r3, #16
 800ac04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac08:	4959      	ldr	r1, [pc, #356]	; (800ad70 <mbedtls_des_crypt_ecb+0x320>)
 800ac0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac0e:	405a      	eors	r2, r3
 800ac10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac12:	0e1b      	lsrs	r3, r3, #24
 800ac14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac18:	4956      	ldr	r1, [pc, #344]	; (800ad74 <mbedtls_des_crypt_ecb+0x324>)
 800ac1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac1e:	4053      	eors	r3, r2
 800ac20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac22:	4053      	eors	r3, r2
 800ac24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac28:	1d1a      	adds	r2, r3, #4
 800ac2a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac30:	ea4f 1333 	mov.w	r3, r3, ror #4
 800ac34:	4053      	eors	r3, r2
 800ac36:	637b      	str	r3, [r7, #52]	; 0x34
 800ac38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac3e:	4a4e      	ldr	r2, [pc, #312]	; (800ad78 <mbedtls_des_crypt_ecb+0x328>)
 800ac40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ac44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac46:	0a1b      	lsrs	r3, r3, #8
 800ac48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac4c:	494b      	ldr	r1, [pc, #300]	; (800ad7c <mbedtls_des_crypt_ecb+0x32c>)
 800ac4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac52:	405a      	eors	r2, r3
 800ac54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac56:	0c1b      	lsrs	r3, r3, #16
 800ac58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac5c:	4948      	ldr	r1, [pc, #288]	; (800ad80 <mbedtls_des_crypt_ecb+0x330>)
 800ac5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac62:	405a      	eors	r2, r3
 800ac64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac66:	0e1b      	lsrs	r3, r3, #24
 800ac68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac6c:	4945      	ldr	r1, [pc, #276]	; (800ad84 <mbedtls_des_crypt_ecb+0x334>)
 800ac6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac72:	4053      	eors	r3, r2
 800ac74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac76:	4053      	eors	r3, r2
 800ac78:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < 8; i++) {
 800ac7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	647b      	str	r3, [r7, #68]	; 0x44
 800ac80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac82:	2b07      	cmp	r3, #7
 800ac84:	f77f af55 	ble.w	800ab32 <mbedtls_des_crypt_ecb+0xe2>
    }

    DES_FP(Y, X);
 800ac88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac8a:	ea4f 0373 	mov.w	r3, r3, ror #1
 800ac8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac94:	4053      	eors	r3, r2
 800ac96:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800ac9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca0:	4053      	eors	r3, r2
 800aca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca8:	4053      	eors	r3, r2
 800acaa:	643b      	str	r3, [r7, #64]	; 0x40
 800acac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acae:	ea4f 0373 	mov.w	r3, r3, ror #1
 800acb2:	643b      	str	r3, [r7, #64]	; 0x40
 800acb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acb6:	0a1a      	lsrs	r2, r3, #8
 800acb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acba:	4053      	eors	r3, r2
 800acbc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800acc0:	637b      	str	r3, [r7, #52]	; 0x34
 800acc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800acc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc6:	4053      	eors	r3, r2
 800acc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800accc:	021b      	lsls	r3, r3, #8
 800acce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acd0:	4053      	eors	r3, r2
 800acd2:	643b      	str	r3, [r7, #64]	; 0x40
 800acd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acd6:	089a      	lsrs	r2, r3, #2
 800acd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acda:	4053      	eors	r3, r2
 800acdc:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800ace0:	637b      	str	r3, [r7, #52]	; 0x34
 800ace2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ace4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace6:	4053      	eors	r3, r2
 800ace8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acf0:	4053      	eors	r3, r2
 800acf2:	643b      	str	r3, [r7, #64]	; 0x40
 800acf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf6:	0c1a      	lsrs	r2, r3, #16
 800acf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acfa:	4053      	eors	r3, r2
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	637b      	str	r3, [r7, #52]	; 0x34
 800ad00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad04:	4053      	eors	r3, r2
 800ad06:	643b      	str	r3, [r7, #64]	; 0x40
 800ad08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0a:	041b      	lsls	r3, r3, #16
 800ad0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad0e:	4053      	eors	r3, r2
 800ad10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad14:	091a      	lsrs	r2, r3, #4
 800ad16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad18:	4053      	eors	r3, r2
 800ad1a:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800ad1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad24:	4053      	eors	r3, r2
 800ad26:	643b      	str	r3, [r7, #64]	; 0x40
 800ad28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2a:	011b      	lsls	r3, r3, #4
 800ad2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad2e:	4053      	eors	r3, r2
 800ad30:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT32_BE(Y, output, 0);
 800ad32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad34:	ba1b      	rev	r3, r3
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	62ba      	str	r2, [r7, #40]	; 0x28
 800ad3a:	61fb      	str	r3, [r7, #28]
 800ad3c:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 800ad3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad40:	601a      	str	r2, [r3, #0]
}
 800ad42:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X, output, 4);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	1d1a      	adds	r2, r3, #4
 800ad48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad4a:	ba1b      	rev	r3, r3
 800ad4c:	627a      	str	r2, [r7, #36]	; 0x24
 800ad4e:	623b      	str	r3, [r7, #32]
 800ad50:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 800ad52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad54:	601a      	str	r2, [r3, #0]
}
 800ad56:	bf00      	nop

    return 0;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	374c      	adds	r7, #76	; 0x4c
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	0801fd94 	.word	0x0801fd94
 800ad6c:	0801fb94 	.word	0x0801fb94
 800ad70:	0801f994 	.word	0x0801f994
 800ad74:	0801f794 	.word	0x0801f794
 800ad78:	0801fc94 	.word	0x0801fc94
 800ad7c:	0801fa94 	.word	0x0801fa94
 800ad80:	0801f894 	.word	0x0801f894
 800ad84:	0801f694 	.word	0x0801f694

0800ad88 <mbedtls_des_crypt_cbc>:
                          int mode,
                          size_t length,
                          unsigned char iv[8],
                          const unsigned char *input,
                          unsigned char *output)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b0a0      	sub	sp, #128	; 0x80
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
 800ad94:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800ad96:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800ad9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    unsigned char temp[8];

    if (length % 8) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f003 0307 	and.w	r3, r3, #7
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d002      	beq.n	800adac <mbedtls_des_crypt_cbc+0x24>
        return MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH;
 800ada6:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800adaa:	e0e7      	b.n	800af7c <mbedtls_des_crypt_cbc+0x1f4>
    }

    if (mode == MBEDTLS_DES_ENCRYPT) {
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	f040 80da 	bne.w	800af68 <mbedtls_des_crypt_cbc+0x1e0>
        while (length > 0) {
 800adb4:	e066      	b.n	800ae84 <mbedtls_des_crypt_cbc+0xfc>
 800adb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adba:	67bb      	str	r3, [r7, #120]	; 0x78
 800adbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800adc0:	677b      	str	r3, [r7, #116]	; 0x74
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	673b      	str	r3, [r7, #112]	; 0x70
 800adc6:	2308      	movs	r3, #8
 800adc8:	66fb      	str	r3, [r7, #108]	; 0x6c
    size_t i = 0;
 800adca:	2300      	movs	r3, #0
 800adcc:	66bb      	str	r3, [r7, #104]	; 0x68
    for (; (i + 4) <= n; i += 4) {
 800adce:	e01e      	b.n	800ae0e <mbedtls_des_crypt_cbc+0x86>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800add0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800add2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800add4:	4413      	add	r3, r2
 800add6:	667b      	str	r3, [r7, #100]	; 0x64
 800add8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adda:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800addc:	61fb      	str	r3, [r7, #28]
    return r;
 800adde:	69fa      	ldr	r2, [r7, #28]
 800ade0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ade2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ade4:	440b      	add	r3, r1
 800ade6:	663b      	str	r3, [r7, #96]	; 0x60
 800ade8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adea:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800adec:	61bb      	str	r3, [r7, #24]
    return r;
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	4053      	eors	r3, r2
 800adf2:	65fb      	str	r3, [r7, #92]	; 0x5c
        mbedtls_put_unaligned_uint32(r + i, x);
 800adf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800adf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adf8:	4413      	add	r3, r2
 800adfa:	65bb      	str	r3, [r7, #88]	; 0x58
 800adfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adfe:	617b      	str	r3, [r7, #20]
 800ae00:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 800ae02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae04:	601a      	str	r2, [r3, #0]
}
 800ae06:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800ae08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae0a:	3304      	adds	r3, #4
 800ae0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae10:	3304      	adds	r3, #4
 800ae12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d2db      	bcs.n	800add0 <mbedtls_des_crypt_cbc+0x48>
    for (; i < n; i++) {
 800ae18:	e010      	b.n	800ae3c <mbedtls_des_crypt_cbc+0xb4>
        r[i] = a[i] ^ b[i];
 800ae1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ae1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae1e:	4413      	add	r3, r2
 800ae20:	7819      	ldrb	r1, [r3, #0]
 800ae22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ae24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae26:	4413      	add	r3, r2
 800ae28:	781a      	ldrb	r2, [r3, #0]
 800ae2a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800ae2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae2e:	4403      	add	r3, r0
 800ae30:	404a      	eors	r2, r1
 800ae32:	b2d2      	uxtb	r2, r2
 800ae34:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800ae36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae38:	3301      	adds	r3, #1
 800ae3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ae3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d8ea      	bhi.n	800ae1a <mbedtls_des_crypt_cbc+0x92>
}
 800ae44:	bf00      	nop
            mbedtls_xor(output, input, iv, 8);

            ret = mbedtls_des_crypt_ecb(ctx, output, output);
 800ae46:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ae4a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff fdfe 	bl	800aa50 <mbedtls_des_crypt_ecb>
 800ae54:	67f8      	str	r0, [r7, #124]	; 0x7c
            if (ret != 0) {
 800ae56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f040 808b 	bne.w	800af74 <mbedtls_des_crypt_cbc+0x1ec>
                goto exit;
            }
            memcpy(iv, output, 8);
 800ae5e:	2208      	movs	r2, #8
 800ae60:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ae64:	6838      	ldr	r0, [r7, #0]
 800ae66:	f012 fa47 	bl	801d2f8 <memcpy>

            input  += 8;
 800ae6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae6e:	3308      	adds	r3, #8
 800ae70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            output += 8;
 800ae74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae78:	3308      	adds	r3, #8
 800ae7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            length -= 8;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	3b08      	subs	r3, #8
 800ae82:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d195      	bne.n	800adb6 <mbedtls_des_crypt_cbc+0x2e>
 800ae8a:	e070      	b.n	800af6e <mbedtls_des_crypt_cbc+0x1e6>
        }
    } else { /* MBEDTLS_DES_DECRYPT */
        while (length > 0) {
            memcpy(temp, input, 8);
 800ae8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ae90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae94:	6810      	ldr	r0, [r2, #0]
 800ae96:	6851      	ldr	r1, [r2, #4]
 800ae98:	c303      	stmia	r3!, {r0, r1}
            ret = mbedtls_des_crypt_ecb(ctx, input, output);
 800ae9a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ae9e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f7ff fdd4 	bl	800aa50 <mbedtls_des_crypt_ecb>
 800aea8:	67f8      	str	r0, [r7, #124]	; 0x7c
            if (ret != 0) {
 800aeaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d163      	bne.n	800af78 <mbedtls_des_crypt_cbc+0x1f0>
 800aeb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aeb4:	657b      	str	r3, [r7, #84]	; 0x54
 800aeb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aeba:	653b      	str	r3, [r7, #80]	; 0x50
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aec0:	2308      	movs	r3, #8
 800aec2:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t i = 0;
 800aec4:	2300      	movs	r3, #0
 800aec6:	647b      	str	r3, [r7, #68]	; 0x44
    for (; (i + 4) <= n; i += 4) {
 800aec8:	e01e      	b.n	800af08 <mbedtls_des_crypt_cbc+0x180>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800aeca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aece:	4413      	add	r3, r2
 800aed0:	643b      	str	r3, [r7, #64]	; 0x40
 800aed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800aed6:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 800aed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeda:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aedc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aede:	440b      	add	r3, r1
 800aee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aee4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800aee6:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	4053      	eors	r3, r2
 800aeec:	63bb      	str	r3, [r7, #56]	; 0x38
        mbedtls_put_unaligned_uint32(r + i, x);
 800aeee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aef2:	4413      	add	r3, r2
 800aef4:	637b      	str	r3, [r7, #52]	; 0x34
 800aef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef8:	623b      	str	r3, [r7, #32]
 800aefa:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 800aefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefe:	601a      	str	r2, [r3, #0]
}
 800af00:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800af02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af04:	3304      	adds	r3, #4
 800af06:	647b      	str	r3, [r7, #68]	; 0x44
 800af08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af0a:	3304      	adds	r3, #4
 800af0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af0e:	429a      	cmp	r2, r3
 800af10:	d2db      	bcs.n	800aeca <mbedtls_des_crypt_cbc+0x142>
    for (; i < n; i++) {
 800af12:	e010      	b.n	800af36 <mbedtls_des_crypt_cbc+0x1ae>
        r[i] = a[i] ^ b[i];
 800af14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af18:	4413      	add	r3, r2
 800af1a:	7819      	ldrb	r1, [r3, #0]
 800af1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af20:	4413      	add	r3, r2
 800af22:	781a      	ldrb	r2, [r3, #0]
 800af24:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800af26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af28:	4403      	add	r3, r0
 800af2a:	404a      	eors	r2, r1
 800af2c:	b2d2      	uxtb	r2, r2
 800af2e:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800af30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af32:	3301      	adds	r3, #1
 800af34:	647b      	str	r3, [r7, #68]	; 0x44
 800af36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d8ea      	bhi.n	800af14 <mbedtls_des_crypt_cbc+0x18c>
}
 800af3e:	bf00      	nop
                goto exit;
            }

            mbedtls_xor(output, output, iv, 8);

            memcpy(iv, temp, 8);
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af48:	cb03      	ldmia	r3!, {r0, r1}
 800af4a:	6010      	str	r0, [r2, #0]
 800af4c:	6051      	str	r1, [r2, #4]

            input  += 8;
 800af4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af52:	3308      	adds	r3, #8
 800af54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            output += 8;
 800af58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af5c:	3308      	adds	r3, #8
 800af5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            length -= 8;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	3b08      	subs	r3, #8
 800af66:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d18e      	bne.n	800ae8c <mbedtls_des_crypt_cbc+0x104>
        }
    }
    ret = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af72:	e002      	b.n	800af7a <mbedtls_des_crypt_cbc+0x1f2>
                goto exit;
 800af74:	bf00      	nop
 800af76:	e000      	b.n	800af7a <mbedtls_des_crypt_cbc+0x1f2>
                goto exit;
 800af78:	bf00      	nop

exit:
    return ret;
 800af7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3780      	adds	r7, #128	; 0x80
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <mbedtls_des3_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES3_CRYPT_ECB_ALT)
int mbedtls_des3_crypt_ecb(mbedtls_des3_context *ctx,
                           const unsigned char input[8],
                           unsigned char output[8])
{
 800af84:	b480      	push	{r7}
 800af86:	b093      	sub	sp, #76	; 0x4c
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	63bb      	str	r3, [r7, #56]	; 0x38
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800af9c:	61bb      	str	r3, [r7, #24]
    return r;
 800af9e:	69bb      	ldr	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE(input, 0);
 800afa0:	ba1b      	rev	r3, r3
 800afa2:	643b      	str	r3, [r7, #64]	; 0x40
    Y = MBEDTLS_GET_UINT32_BE(input, 4);
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	3304      	adds	r3, #4
 800afa8:	633b      	str	r3, [r7, #48]	; 0x30
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800afae:	617b      	str	r3, [r7, #20]
    return r;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	ba1b      	rev	r3, r3
 800afb4:	63fb      	str	r3, [r7, #60]	; 0x3c

    DES_IP(X, Y);
 800afb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afb8:	091a      	lsrs	r2, r3, #4
 800afba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afbc:	4053      	eors	r3, r2
 800afbe:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800afc2:	637b      	str	r3, [r7, #52]	; 0x34
 800afc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800afc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc8:	4053      	eors	r3, r2
 800afca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afce:	011b      	lsls	r3, r3, #4
 800afd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afd2:	4053      	eors	r3, r2
 800afd4:	643b      	str	r3, [r7, #64]	; 0x40
 800afd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afd8:	0c1a      	lsrs	r2, r3, #16
 800afda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afdc:	4053      	eors	r3, r2
 800afde:	b29b      	uxth	r3, r3
 800afe0:	637b      	str	r3, [r7, #52]	; 0x34
 800afe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800afe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe6:	4053      	eors	r3, r2
 800afe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afec:	041b      	lsls	r3, r3, #16
 800afee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aff0:	4053      	eors	r3, r2
 800aff2:	643b      	str	r3, [r7, #64]	; 0x40
 800aff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff6:	089a      	lsrs	r2, r3, #2
 800aff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800affa:	4053      	eors	r3, r2
 800affc:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800b000:	637b      	str	r3, [r7, #52]	; 0x34
 800b002:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b006:	4053      	eors	r3, r2
 800b008:	643b      	str	r3, [r7, #64]	; 0x40
 800b00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b010:	4053      	eors	r3, r2
 800b012:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b016:	0a1a      	lsrs	r2, r3, #8
 800b018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b01a:	4053      	eors	r3, r2
 800b01c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800b020:	637b      	str	r3, [r7, #52]	; 0x34
 800b022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b026:	4053      	eors	r3, r2
 800b028:	643b      	str	r3, [r7, #64]	; 0x40
 800b02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b02c:	021b      	lsls	r3, r3, #8
 800b02e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b030:	4053      	eors	r3, r2
 800b032:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b036:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800b03a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b03c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b040:	4053      	eors	r3, r2
 800b042:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800b046:	637b      	str	r3, [r7, #52]	; 0x34
 800b048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b04c:	4053      	eors	r3, r2
 800b04e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b050:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b054:	4053      	eors	r3, r2
 800b056:	643b      	str	r3, [r7, #64]	; 0x40
 800b058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b05a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800b05e:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < 8; i++) {
 800b060:	2300      	movs	r3, #0
 800b062:	647b      	str	r3, [r7, #68]	; 0x44
 800b064:	e0a6      	b.n	800b1b4 <mbedtls_des3_crypt_ecb+0x230>
        DES_ROUND(Y, X);
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	1d1a      	adds	r2, r3, #4
 800b06a:	63ba      	str	r2, [r7, #56]	; 0x38
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b070:	4053      	eors	r3, r2
 800b072:	637b      	str	r3, [r7, #52]	; 0x34
 800b074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b07a:	4aa9      	ldr	r2, [pc, #676]	; (800b320 <mbedtls_des3_crypt_ecb+0x39c>)
 800b07c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b082:	0a1b      	lsrs	r3, r3, #8
 800b084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b088:	49a6      	ldr	r1, [pc, #664]	; (800b324 <mbedtls_des3_crypt_ecb+0x3a0>)
 800b08a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b08e:	405a      	eors	r2, r3
 800b090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b092:	0c1b      	lsrs	r3, r3, #16
 800b094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b098:	49a3      	ldr	r1, [pc, #652]	; (800b328 <mbedtls_des3_crypt_ecb+0x3a4>)
 800b09a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b09e:	405a      	eors	r2, r3
 800b0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a2:	0e1b      	lsrs	r3, r3, #24
 800b0a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0a8:	49a0      	ldr	r1, [pc, #640]	; (800b32c <mbedtls_des3_crypt_ecb+0x3a8>)
 800b0aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b0ae:	4053      	eors	r3, r2
 800b0b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0b2:	4053      	eors	r3, r2
 800b0b4:	643b      	str	r3, [r7, #64]	; 0x40
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b8:	1d1a      	adds	r2, r3, #4
 800b0ba:	63ba      	str	r2, [r7, #56]	; 0x38
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0c0:	ea4f 1333 	mov.w	r3, r3, ror #4
 800b0c4:	4053      	eors	r3, r2
 800b0c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0ce:	4a98      	ldr	r2, [pc, #608]	; (800b330 <mbedtls_des3_crypt_ecb+0x3ac>)
 800b0d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0d6:	0a1b      	lsrs	r3, r3, #8
 800b0d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0dc:	4995      	ldr	r1, [pc, #596]	; (800b334 <mbedtls_des3_crypt_ecb+0x3b0>)
 800b0de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b0e2:	405a      	eors	r2, r3
 800b0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e6:	0c1b      	lsrs	r3, r3, #16
 800b0e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0ec:	4992      	ldr	r1, [pc, #584]	; (800b338 <mbedtls_des3_crypt_ecb+0x3b4>)
 800b0ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b0f2:	405a      	eors	r2, r3
 800b0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f6:	0e1b      	lsrs	r3, r3, #24
 800b0f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0fc:	498f      	ldr	r1, [pc, #572]	; (800b33c <mbedtls_des3_crypt_ecb+0x3b8>)
 800b0fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b102:	4053      	eors	r3, r2
 800b104:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b106:	4053      	eors	r3, r2
 800b108:	643b      	str	r3, [r7, #64]	; 0x40
        DES_ROUND(X, Y);
 800b10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10c:	1d1a      	adds	r2, r3, #4
 800b10e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b114:	4053      	eors	r3, r2
 800b116:	637b      	str	r3, [r7, #52]	; 0x34
 800b118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b11a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b11e:	4a80      	ldr	r2, [pc, #512]	; (800b320 <mbedtls_des3_crypt_ecb+0x39c>)
 800b120:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b126:	0a1b      	lsrs	r3, r3, #8
 800b128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b12c:	497d      	ldr	r1, [pc, #500]	; (800b324 <mbedtls_des3_crypt_ecb+0x3a0>)
 800b12e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b132:	405a      	eors	r2, r3
 800b134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b136:	0c1b      	lsrs	r3, r3, #16
 800b138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b13c:	497a      	ldr	r1, [pc, #488]	; (800b328 <mbedtls_des3_crypt_ecb+0x3a4>)
 800b13e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b142:	405a      	eors	r2, r3
 800b144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b146:	0e1b      	lsrs	r3, r3, #24
 800b148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b14c:	4977      	ldr	r1, [pc, #476]	; (800b32c <mbedtls_des3_crypt_ecb+0x3a8>)
 800b14e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b152:	4053      	eors	r3, r2
 800b154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b156:	4053      	eors	r3, r2
 800b158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15c:	1d1a      	adds	r2, r3, #4
 800b15e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b164:	ea4f 1333 	mov.w	r3, r3, ror #4
 800b168:	4053      	eors	r3, r2
 800b16a:	637b      	str	r3, [r7, #52]	; 0x34
 800b16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b16e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b172:	4a6f      	ldr	r2, [pc, #444]	; (800b330 <mbedtls_des3_crypt_ecb+0x3ac>)
 800b174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17a:	0a1b      	lsrs	r3, r3, #8
 800b17c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b180:	496c      	ldr	r1, [pc, #432]	; (800b334 <mbedtls_des3_crypt_ecb+0x3b0>)
 800b182:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b186:	405a      	eors	r2, r3
 800b188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18a:	0c1b      	lsrs	r3, r3, #16
 800b18c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b190:	4969      	ldr	r1, [pc, #420]	; (800b338 <mbedtls_des3_crypt_ecb+0x3b4>)
 800b192:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b196:	405a      	eors	r2, r3
 800b198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b19a:	0e1b      	lsrs	r3, r3, #24
 800b19c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1a0:	4966      	ldr	r1, [pc, #408]	; (800b33c <mbedtls_des3_crypt_ecb+0x3b8>)
 800b1a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b1a6:	4053      	eors	r3, r2
 800b1a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1aa:	4053      	eors	r3, r2
 800b1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < 8; i++) {
 800b1ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	647b      	str	r3, [r7, #68]	; 0x44
 800b1b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1b6:	2b07      	cmp	r3, #7
 800b1b8:	f77f af55 	ble.w	800b066 <mbedtls_des3_crypt_ecb+0xe2>
    }

    for (i = 0; i < 8; i++) {
 800b1bc:	2300      	movs	r3, #0
 800b1be:	647b      	str	r3, [r7, #68]	; 0x44
 800b1c0:	e0a6      	b.n	800b310 <mbedtls_des3_crypt_ecb+0x38c>
        DES_ROUND(X, Y);
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c4:	1d1a      	adds	r2, r3, #4
 800b1c6:	63ba      	str	r2, [r7, #56]	; 0x38
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1cc:	4053      	eors	r3, r2
 800b1ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1d6:	4a52      	ldr	r2, [pc, #328]	; (800b320 <mbedtls_des3_crypt_ecb+0x39c>)
 800b1d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1de:	0a1b      	lsrs	r3, r3, #8
 800b1e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1e4:	494f      	ldr	r1, [pc, #316]	; (800b324 <mbedtls_des3_crypt_ecb+0x3a0>)
 800b1e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b1ea:	405a      	eors	r2, r3
 800b1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ee:	0c1b      	lsrs	r3, r3, #16
 800b1f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1f4:	494c      	ldr	r1, [pc, #304]	; (800b328 <mbedtls_des3_crypt_ecb+0x3a4>)
 800b1f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b1fa:	405a      	eors	r2, r3
 800b1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fe:	0e1b      	lsrs	r3, r3, #24
 800b200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b204:	4949      	ldr	r1, [pc, #292]	; (800b32c <mbedtls_des3_crypt_ecb+0x3a8>)
 800b206:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b20a:	4053      	eors	r3, r2
 800b20c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b20e:	4053      	eors	r3, r2
 800b210:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b214:	1d1a      	adds	r2, r3, #4
 800b216:	63ba      	str	r2, [r7, #56]	; 0x38
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b21c:	ea4f 1333 	mov.w	r3, r3, ror #4
 800b220:	4053      	eors	r3, r2
 800b222:	637b      	str	r3, [r7, #52]	; 0x34
 800b224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b22a:	4a41      	ldr	r2, [pc, #260]	; (800b330 <mbedtls_des3_crypt_ecb+0x3ac>)
 800b22c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b232:	0a1b      	lsrs	r3, r3, #8
 800b234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b238:	493e      	ldr	r1, [pc, #248]	; (800b334 <mbedtls_des3_crypt_ecb+0x3b0>)
 800b23a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b23e:	405a      	eors	r2, r3
 800b240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b242:	0c1b      	lsrs	r3, r3, #16
 800b244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b248:	493b      	ldr	r1, [pc, #236]	; (800b338 <mbedtls_des3_crypt_ecb+0x3b4>)
 800b24a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b24e:	405a      	eors	r2, r3
 800b250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b252:	0e1b      	lsrs	r3, r3, #24
 800b254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b258:	4938      	ldr	r1, [pc, #224]	; (800b33c <mbedtls_des3_crypt_ecb+0x3b8>)
 800b25a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b25e:	4053      	eors	r3, r2
 800b260:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b262:	4053      	eors	r3, r2
 800b264:	63fb      	str	r3, [r7, #60]	; 0x3c
        DES_ROUND(Y, X);
 800b266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b268:	1d1a      	adds	r2, r3, #4
 800b26a:	63ba      	str	r2, [r7, #56]	; 0x38
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b270:	4053      	eors	r3, r2
 800b272:	637b      	str	r3, [r7, #52]	; 0x34
 800b274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b27a:	4a29      	ldr	r2, [pc, #164]	; (800b320 <mbedtls_des3_crypt_ecb+0x39c>)
 800b27c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b282:	0a1b      	lsrs	r3, r3, #8
 800b284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b288:	4926      	ldr	r1, [pc, #152]	; (800b324 <mbedtls_des3_crypt_ecb+0x3a0>)
 800b28a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b28e:	405a      	eors	r2, r3
 800b290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b292:	0c1b      	lsrs	r3, r3, #16
 800b294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b298:	4923      	ldr	r1, [pc, #140]	; (800b328 <mbedtls_des3_crypt_ecb+0x3a4>)
 800b29a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b29e:	405a      	eors	r2, r3
 800b2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a2:	0e1b      	lsrs	r3, r3, #24
 800b2a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2a8:	4920      	ldr	r1, [pc, #128]	; (800b32c <mbedtls_des3_crypt_ecb+0x3a8>)
 800b2aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b2ae:	4053      	eors	r3, r2
 800b2b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2b2:	4053      	eors	r3, r2
 800b2b4:	643b      	str	r3, [r7, #64]	; 0x40
 800b2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b8:	1d1a      	adds	r2, r3, #4
 800b2ba:	63ba      	str	r2, [r7, #56]	; 0x38
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c0:	ea4f 1333 	mov.w	r3, r3, ror #4
 800b2c4:	4053      	eors	r3, r2
 800b2c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2ce:	4a18      	ldr	r2, [pc, #96]	; (800b330 <mbedtls_des3_crypt_ecb+0x3ac>)
 800b2d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d6:	0a1b      	lsrs	r3, r3, #8
 800b2d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2dc:	4915      	ldr	r1, [pc, #84]	; (800b334 <mbedtls_des3_crypt_ecb+0x3b0>)
 800b2de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b2e2:	405a      	eors	r2, r3
 800b2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e6:	0c1b      	lsrs	r3, r3, #16
 800b2e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2ec:	4912      	ldr	r1, [pc, #72]	; (800b338 <mbedtls_des3_crypt_ecb+0x3b4>)
 800b2ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b2f2:	405a      	eors	r2, r3
 800b2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f6:	0e1b      	lsrs	r3, r3, #24
 800b2f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2fc:	490f      	ldr	r1, [pc, #60]	; (800b33c <mbedtls_des3_crypt_ecb+0x3b8>)
 800b2fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b302:	4053      	eors	r3, r2
 800b304:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b306:	4053      	eors	r3, r2
 800b308:	643b      	str	r3, [r7, #64]	; 0x40
    for (i = 0; i < 8; i++) {
 800b30a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b30c:	3301      	adds	r3, #1
 800b30e:	647b      	str	r3, [r7, #68]	; 0x44
 800b310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b312:	2b07      	cmp	r3, #7
 800b314:	f77f af55 	ble.w	800b1c2 <mbedtls_des3_crypt_ecb+0x23e>
    }

    for (i = 0; i < 8; i++) {
 800b318:	2300      	movs	r3, #0
 800b31a:	647b      	str	r3, [r7, #68]	; 0x44
 800b31c:	e0b7      	b.n	800b48e <mbedtls_des3_crypt_ecb+0x50a>
 800b31e:	bf00      	nop
 800b320:	0801fd94 	.word	0x0801fd94
 800b324:	0801fb94 	.word	0x0801fb94
 800b328:	0801f994 	.word	0x0801f994
 800b32c:	0801f794 	.word	0x0801f794
 800b330:	0801fc94 	.word	0x0801fc94
 800b334:	0801fa94 	.word	0x0801fa94
 800b338:	0801f894 	.word	0x0801f894
 800b33c:	0801f694 	.word	0x0801f694
        DES_ROUND(Y, X);
 800b340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b342:	1d1a      	adds	r2, r3, #4
 800b344:	63ba      	str	r2, [r7, #56]	; 0x38
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b34a:	4053      	eors	r3, r2
 800b34c:	637b      	str	r3, [r7, #52]	; 0x34
 800b34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b354:	4a87      	ldr	r2, [pc, #540]	; (800b574 <mbedtls_des3_crypt_ecb+0x5f0>)
 800b356:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35c:	0a1b      	lsrs	r3, r3, #8
 800b35e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b362:	4985      	ldr	r1, [pc, #532]	; (800b578 <mbedtls_des3_crypt_ecb+0x5f4>)
 800b364:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b368:	405a      	eors	r2, r3
 800b36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b36c:	0c1b      	lsrs	r3, r3, #16
 800b36e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b372:	4982      	ldr	r1, [pc, #520]	; (800b57c <mbedtls_des3_crypt_ecb+0x5f8>)
 800b374:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b378:	405a      	eors	r2, r3
 800b37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b37c:	0e1b      	lsrs	r3, r3, #24
 800b37e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b382:	497f      	ldr	r1, [pc, #508]	; (800b580 <mbedtls_des3_crypt_ecb+0x5fc>)
 800b384:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b388:	4053      	eors	r3, r2
 800b38a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b38c:	4053      	eors	r3, r2
 800b38e:	643b      	str	r3, [r7, #64]	; 0x40
 800b390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b392:	1d1a      	adds	r2, r3, #4
 800b394:	63ba      	str	r2, [r7, #56]	; 0x38
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b39a:	ea4f 1333 	mov.w	r3, r3, ror #4
 800b39e:	4053      	eors	r3, r2
 800b3a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3a8:	4a76      	ldr	r2, [pc, #472]	; (800b584 <mbedtls_des3_crypt_ecb+0x600>)
 800b3aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b0:	0a1b      	lsrs	r3, r3, #8
 800b3b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3b6:	4974      	ldr	r1, [pc, #464]	; (800b588 <mbedtls_des3_crypt_ecb+0x604>)
 800b3b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b3bc:	405a      	eors	r2, r3
 800b3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c0:	0c1b      	lsrs	r3, r3, #16
 800b3c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3c6:	4971      	ldr	r1, [pc, #452]	; (800b58c <mbedtls_des3_crypt_ecb+0x608>)
 800b3c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b3cc:	405a      	eors	r2, r3
 800b3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d0:	0e1b      	lsrs	r3, r3, #24
 800b3d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3d6:	496e      	ldr	r1, [pc, #440]	; (800b590 <mbedtls_des3_crypt_ecb+0x60c>)
 800b3d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b3dc:	4053      	eors	r3, r2
 800b3de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3e0:	4053      	eors	r3, r2
 800b3e2:	643b      	str	r3, [r7, #64]	; 0x40
        DES_ROUND(X, Y);
 800b3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e6:	1d1a      	adds	r2, r3, #4
 800b3e8:	63ba      	str	r2, [r7, #56]	; 0x38
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3ee:	4053      	eors	r3, r2
 800b3f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3f8:	4a5e      	ldr	r2, [pc, #376]	; (800b574 <mbedtls_des3_crypt_ecb+0x5f0>)
 800b3fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b400:	0a1b      	lsrs	r3, r3, #8
 800b402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b406:	495c      	ldr	r1, [pc, #368]	; (800b578 <mbedtls_des3_crypt_ecb+0x5f4>)
 800b408:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b40c:	405a      	eors	r2, r3
 800b40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b410:	0c1b      	lsrs	r3, r3, #16
 800b412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b416:	4959      	ldr	r1, [pc, #356]	; (800b57c <mbedtls_des3_crypt_ecb+0x5f8>)
 800b418:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b41c:	405a      	eors	r2, r3
 800b41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b420:	0e1b      	lsrs	r3, r3, #24
 800b422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b426:	4956      	ldr	r1, [pc, #344]	; (800b580 <mbedtls_des3_crypt_ecb+0x5fc>)
 800b428:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b42c:	4053      	eors	r3, r2
 800b42e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b430:	4053      	eors	r3, r2
 800b432:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b436:	1d1a      	adds	r2, r3, #4
 800b438:	63ba      	str	r2, [r7, #56]	; 0x38
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b43e:	ea4f 1333 	mov.w	r3, r3, ror #4
 800b442:	4053      	eors	r3, r2
 800b444:	637b      	str	r3, [r7, #52]	; 0x34
 800b446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b44c:	4a4d      	ldr	r2, [pc, #308]	; (800b584 <mbedtls_des3_crypt_ecb+0x600>)
 800b44e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b454:	0a1b      	lsrs	r3, r3, #8
 800b456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b45a:	494b      	ldr	r1, [pc, #300]	; (800b588 <mbedtls_des3_crypt_ecb+0x604>)
 800b45c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b460:	405a      	eors	r2, r3
 800b462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b464:	0c1b      	lsrs	r3, r3, #16
 800b466:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b46a:	4948      	ldr	r1, [pc, #288]	; (800b58c <mbedtls_des3_crypt_ecb+0x608>)
 800b46c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b470:	405a      	eors	r2, r3
 800b472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b474:	0e1b      	lsrs	r3, r3, #24
 800b476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b47a:	4945      	ldr	r1, [pc, #276]	; (800b590 <mbedtls_des3_crypt_ecb+0x60c>)
 800b47c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b480:	4053      	eors	r3, r2
 800b482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b484:	4053      	eors	r3, r2
 800b486:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < 8; i++) {
 800b488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b48a:	3301      	adds	r3, #1
 800b48c:	647b      	str	r3, [r7, #68]	; 0x44
 800b48e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b490:	2b07      	cmp	r3, #7
 800b492:	f77f af55 	ble.w	800b340 <mbedtls_des3_crypt_ecb+0x3bc>
    }

    DES_FP(Y, X);
 800b496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b498:	ea4f 0373 	mov.w	r3, r3, ror #1
 800b49c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b49e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4a2:	4053      	eors	r3, r2
 800b4a4:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800b4a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b4aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ae:	4053      	eors	r3, r2
 800b4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b6:	4053      	eors	r3, r2
 800b4b8:	643b      	str	r3, [r7, #64]	; 0x40
 800b4ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4bc:	ea4f 0373 	mov.w	r3, r3, ror #1
 800b4c0:	643b      	str	r3, [r7, #64]	; 0x40
 800b4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4c4:	0a1a      	lsrs	r2, r3, #8
 800b4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4c8:	4053      	eors	r3, r2
 800b4ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800b4ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b4d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4d4:	4053      	eors	r3, r2
 800b4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4da:	021b      	lsls	r3, r3, #8
 800b4dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4de:	4053      	eors	r3, r2
 800b4e0:	643b      	str	r3, [r7, #64]	; 0x40
 800b4e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4e4:	089a      	lsrs	r2, r3, #2
 800b4e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e8:	4053      	eors	r3, r2
 800b4ea:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800b4ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b4f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f4:	4053      	eors	r3, r2
 800b4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4fe:	4053      	eors	r3, r2
 800b500:	643b      	str	r3, [r7, #64]	; 0x40
 800b502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b504:	0c1a      	lsrs	r2, r3, #16
 800b506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b508:	4053      	eors	r3, r2
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	637b      	str	r3, [r7, #52]	; 0x34
 800b50e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b512:	4053      	eors	r3, r2
 800b514:	643b      	str	r3, [r7, #64]	; 0x40
 800b516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b518:	041b      	lsls	r3, r3, #16
 800b51a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b51c:	4053      	eors	r3, r2
 800b51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b522:	091a      	lsrs	r2, r3, #4
 800b524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b526:	4053      	eors	r3, r2
 800b528:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800b52c:	637b      	str	r3, [r7, #52]	; 0x34
 800b52e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b532:	4053      	eors	r3, r2
 800b534:	643b      	str	r3, [r7, #64]	; 0x40
 800b536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b538:	011b      	lsls	r3, r3, #4
 800b53a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b53c:	4053      	eors	r3, r2
 800b53e:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT32_BE(Y, output, 0);
 800b540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b542:	ba1b      	rev	r3, r3
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	62ba      	str	r2, [r7, #40]	; 0x28
 800b548:	61fb      	str	r3, [r7, #28]
 800b54a:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 800b54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54e:	601a      	str	r2, [r3, #0]
}
 800b550:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X, output, 4);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	1d1a      	adds	r2, r3, #4
 800b556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b558:	ba1b      	rev	r3, r3
 800b55a:	627a      	str	r2, [r7, #36]	; 0x24
 800b55c:	623b      	str	r3, [r7, #32]
 800b55e:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 800b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b562:	601a      	str	r2, [r3, #0]
}
 800b564:	bf00      	nop

    return 0;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	374c      	adds	r7, #76	; 0x4c
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	0801fd94 	.word	0x0801fd94
 800b578:	0801fb94 	.word	0x0801fb94
 800b57c:	0801f994 	.word	0x0801f994
 800b580:	0801f794 	.word	0x0801f794
 800b584:	0801fc94 	.word	0x0801fc94
 800b588:	0801fa94 	.word	0x0801fa94
 800b58c:	0801f894 	.word	0x0801f894
 800b590:	0801f694 	.word	0x0801f694

0800b594 <mbedtls_des3_crypt_cbc>:
                           int mode,
                           size_t length,
                           unsigned char iv[8],
                           const unsigned char *input,
                           unsigned char *output)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b0a0      	sub	sp, #128	; 0x80
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]
 800b5a0:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800b5a2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800b5a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    unsigned char temp[8];

    if (length % 8) {
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f003 0307 	and.w	r3, r3, #7
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d002      	beq.n	800b5b8 <mbedtls_des3_crypt_cbc+0x24>
        return MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH;
 800b5b2:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800b5b6:	e0e7      	b.n	800b788 <mbedtls_des3_crypt_cbc+0x1f4>
    }

    if (mode == MBEDTLS_DES_ENCRYPT) {
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	f040 80da 	bne.w	800b774 <mbedtls_des3_crypt_cbc+0x1e0>
        while (length > 0) {
 800b5c0:	e066      	b.n	800b690 <mbedtls_des3_crypt_cbc+0xfc>
 800b5c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5c6:	67bb      	str	r3, [r7, #120]	; 0x78
 800b5c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5cc:	677b      	str	r3, [r7, #116]	; 0x74
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	673b      	str	r3, [r7, #112]	; 0x70
 800b5d2:	2308      	movs	r3, #8
 800b5d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    size_t i = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	66bb      	str	r3, [r7, #104]	; 0x68
    for (; (i + 4) <= n; i += 4) {
 800b5da:	e01e      	b.n	800b61a <mbedtls_des3_crypt_cbc+0x86>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800b5dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b5de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5e0:	4413      	add	r3, r2
 800b5e2:	667b      	str	r3, [r7, #100]	; 0x64
 800b5e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5e6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b5e8:	61fb      	str	r3, [r7, #28]
    return r;
 800b5ea:	69fa      	ldr	r2, [r7, #28]
 800b5ec:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b5ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5f0:	440b      	add	r3, r1
 800b5f2:	663b      	str	r3, [r7, #96]	; 0x60
 800b5f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5f6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b5f8:	61bb      	str	r3, [r7, #24]
    return r;
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	4053      	eors	r3, r2
 800b5fe:	65fb      	str	r3, [r7, #92]	; 0x5c
        mbedtls_put_unaligned_uint32(r + i, x);
 800b600:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b604:	4413      	add	r3, r2
 800b606:	65bb      	str	r3, [r7, #88]	; 0x58
 800b608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b60a:	617b      	str	r3, [r7, #20]
 800b60c:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 800b60e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b610:	601a      	str	r2, [r3, #0]
}
 800b612:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800b614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b616:	3304      	adds	r3, #4
 800b618:	66bb      	str	r3, [r7, #104]	; 0x68
 800b61a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b61c:	3304      	adds	r3, #4
 800b61e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b620:	429a      	cmp	r2, r3
 800b622:	d2db      	bcs.n	800b5dc <mbedtls_des3_crypt_cbc+0x48>
    for (; i < n; i++) {
 800b624:	e010      	b.n	800b648 <mbedtls_des3_crypt_cbc+0xb4>
        r[i] = a[i] ^ b[i];
 800b626:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b62a:	4413      	add	r3, r2
 800b62c:	7819      	ldrb	r1, [r3, #0]
 800b62e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b632:	4413      	add	r3, r2
 800b634:	781a      	ldrb	r2, [r3, #0]
 800b636:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b638:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b63a:	4403      	add	r3, r0
 800b63c:	404a      	eors	r2, r1
 800b63e:	b2d2      	uxtb	r2, r2
 800b640:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800b642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b644:	3301      	adds	r3, #1
 800b646:	66bb      	str	r3, [r7, #104]	; 0x68
 800b648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b64a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d8ea      	bhi.n	800b626 <mbedtls_des3_crypt_cbc+0x92>
}
 800b650:	bf00      	nop
            mbedtls_xor(output, input, iv, 8);

            ret = mbedtls_des3_crypt_ecb(ctx, output, output);
 800b652:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b656:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff fc92 	bl	800af84 <mbedtls_des3_crypt_ecb>
 800b660:	67f8      	str	r0, [r7, #124]	; 0x7c
            if (ret != 0) {
 800b662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b664:	2b00      	cmp	r3, #0
 800b666:	f040 808b 	bne.w	800b780 <mbedtls_des3_crypt_cbc+0x1ec>
                goto exit;
            }
            memcpy(iv, output, 8);
 800b66a:	2208      	movs	r2, #8
 800b66c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800b670:	6838      	ldr	r0, [r7, #0]
 800b672:	f011 fe41 	bl	801d2f8 <memcpy>

            input  += 8;
 800b676:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b67a:	3308      	adds	r3, #8
 800b67c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            output += 8;
 800b680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b684:	3308      	adds	r3, #8
 800b686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            length -= 8;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	3b08      	subs	r3, #8
 800b68e:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d195      	bne.n	800b5c2 <mbedtls_des3_crypt_cbc+0x2e>
 800b696:	e070      	b.n	800b77a <mbedtls_des3_crypt_cbc+0x1e6>
        }
    } else { /* MBEDTLS_DES_DECRYPT */
        while (length > 0) {
            memcpy(temp, input, 8);
 800b698:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b69c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b6a0:	6810      	ldr	r0, [r2, #0]
 800b6a2:	6851      	ldr	r1, [r2, #4]
 800b6a4:	c303      	stmia	r3!, {r0, r1}
            ret = mbedtls_des3_crypt_ecb(ctx, input, output);
 800b6a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b6aa:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7ff fc68 	bl	800af84 <mbedtls_des3_crypt_ecb>
 800b6b4:	67f8      	str	r0, [r7, #124]	; 0x7c
            if (ret != 0) {
 800b6b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d163      	bne.n	800b784 <mbedtls_des3_crypt_cbc+0x1f0>
 800b6bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6c0:	657b      	str	r3, [r7, #84]	; 0x54
 800b6c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6c6:	653b      	str	r3, [r7, #80]	; 0x50
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6cc:	2308      	movs	r3, #8
 800b6ce:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t i = 0;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	647b      	str	r3, [r7, #68]	; 0x44
    for (; (i + 4) <= n; i += 4) {
 800b6d4:	e01e      	b.n	800b714 <mbedtls_des3_crypt_cbc+0x180>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800b6d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6da:	4413      	add	r3, r2
 800b6dc:	643b      	str	r3, [r7, #64]	; 0x40
 800b6de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6e0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b6e2:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 800b6e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b6e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6ea:	440b      	add	r3, r1
 800b6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6f0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b6f2:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	4053      	eors	r3, r2
 800b6f8:	63bb      	str	r3, [r7, #56]	; 0x38
        mbedtls_put_unaligned_uint32(r + i, x);
 800b6fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6fe:	4413      	add	r3, r2
 800b700:	637b      	str	r3, [r7, #52]	; 0x34
 800b702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b704:	623b      	str	r3, [r7, #32]
 800b706:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 800b708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b70a:	601a      	str	r2, [r3, #0]
}
 800b70c:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800b70e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b710:	3304      	adds	r3, #4
 800b712:	647b      	str	r3, [r7, #68]	; 0x44
 800b714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b716:	3304      	adds	r3, #4
 800b718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d2db      	bcs.n	800b6d6 <mbedtls_des3_crypt_cbc+0x142>
    for (; i < n; i++) {
 800b71e:	e010      	b.n	800b742 <mbedtls_des3_crypt_cbc+0x1ae>
        r[i] = a[i] ^ b[i];
 800b720:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b724:	4413      	add	r3, r2
 800b726:	7819      	ldrb	r1, [r3, #0]
 800b728:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b72a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b72c:	4413      	add	r3, r2
 800b72e:	781a      	ldrb	r2, [r3, #0]
 800b730:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b734:	4403      	add	r3, r0
 800b736:	404a      	eors	r2, r1
 800b738:	b2d2      	uxtb	r2, r2
 800b73a:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800b73c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b73e:	3301      	adds	r3, #1
 800b740:	647b      	str	r3, [r7, #68]	; 0x44
 800b742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b746:	429a      	cmp	r2, r3
 800b748:	d8ea      	bhi.n	800b720 <mbedtls_des3_crypt_cbc+0x18c>
}
 800b74a:	bf00      	nop
                goto exit;
            }

            mbedtls_xor(output, output, iv, 8);

            memcpy(iv, temp, 8);
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	461a      	mov	r2, r3
 800b750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b754:	cb03      	ldmia	r3!, {r0, r1}
 800b756:	6010      	str	r0, [r2, #0]
 800b758:	6051      	str	r1, [r2, #4]

            input  += 8;
 800b75a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b75e:	3308      	adds	r3, #8
 800b760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            output += 8;
 800b764:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b768:	3308      	adds	r3, #8
 800b76a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            length -= 8;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	3b08      	subs	r3, #8
 800b772:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d18e      	bne.n	800b698 <mbedtls_des3_crypt_cbc+0x104>
        }
    }
    ret = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b77e:	e002      	b.n	800b786 <mbedtls_des3_crypt_cbc+0x1f2>
                goto exit;
 800b780:	bf00      	nop
 800b782:	e000      	b.n	800b786 <mbedtls_des3_crypt_cbc+0x1f2>
                goto exit;
 800b784:	bf00      	nop

exit:
    return ret;
 800b786:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3780      	adds	r7, #128	; 0x80
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <mbedtls_entropy_init>:
#include "mbedtls/platform.h"

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init(mbedtls_entropy_context *ctx)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af02      	add	r7, sp, #8
 800b796:	6078      	str	r0, [r7, #4]
    ctx->source_count = 0;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	611a      	str	r2, [r3, #16]
    memset(ctx->source, 0, sizeof(ctx->source));
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	3314      	adds	r3, #20
 800b7a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f011 fd07 	bl	801d1bc <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init(&ctx->mutex);
#endif

    ctx->accumulator_started = 0;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	60da      	str	r2, [r3, #12]
    mbedtls_md_init(&ctx->accumulator);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f001 fa66 	bl	800cc88 <mbedtls_md_init>
    /* Reminder: Update ENTROPY_HAVE_STRONG in the test files
     *           when adding more strong entropy sources here. */

#if !defined(MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES)
#if !defined(MBEDTLS_NO_PLATFORM_ENTROPY)
    mbedtls_entropy_add_source(ctx, mbedtls_platform_entropy_poll, NULL,
 800b7bc:	2301      	movs	r3, #1
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	2320      	movs	r3, #32
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	4903      	ldr	r1, [pc, #12]	; (800b7d4 <mbedtls_entropy_init+0x44>)
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f82b 	bl	800b822 <mbedtls_entropy_add_source>
                               MBEDTLS_ENTROPY_BLOCK_SIZE,
                               MBEDTLS_ENTROPY_SOURCE_STRONG);
    ctx->initial_entropy_run = 0;
#endif
#endif /* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */
}
 800b7cc:	bf00      	nop
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	0800bc79 	.word	0x0800bc79

0800b7d8 <mbedtls_entropy_free>:

void mbedtls_entropy_free(mbedtls_entropy_context *ctx)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d017      	beq.n	800b816 <mbedtls_entropy_free+0x3e>
        return;
    }

    /* If the context was already free, don't call free() again.
     * This is important for mutexes which don't allow double-free. */
    if (ctx->accumulator_started == -1) {
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ee:	d014      	beq.n	800b81a <mbedtls_entropy_free+0x42>
    }

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free(&ctx->mutex);
#endif
    mbedtls_md_free(&ctx->accumulator);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f001 fa56 	bl	800cca4 <mbedtls_md_free>
#if defined(MBEDTLS_ENTROPY_NV_SEED)
    ctx->initial_entropy_run = 0;
#endif
    ctx->source_count = 0;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	611a      	str	r2, [r3, #16]
    mbedtls_platform_zeroize(ctx->source, sizeof(ctx->source));
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	3314      	adds	r3, #20
 800b802:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b806:	4618      	mov	r0, r3
 800b808:	f003 f890 	bl	800e92c <mbedtls_platform_zeroize>
    ctx->accumulator_started = -1;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f04f 32ff 	mov.w	r2, #4294967295
 800b812:	60da      	str	r2, [r3, #12]
 800b814:	e002      	b.n	800b81c <mbedtls_entropy_free+0x44>
        return;
 800b816:	bf00      	nop
 800b818:	e000      	b.n	800b81c <mbedtls_entropy_free+0x44>
        return;
 800b81a:	bf00      	nop
}
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <mbedtls_entropy_add_source>:

int mbedtls_entropy_add_source(mbedtls_entropy_context *ctx,
                               mbedtls_entropy_f_source_ptr f_source, void *p_source,
                               size_t threshold, int strong)
{
 800b822:	b480      	push	{r7}
 800b824:	b087      	sub	sp, #28
 800b826:	af00      	add	r7, sp, #0
 800b828:	60f8      	str	r0, [r7, #12]
 800b82a:	60b9      	str	r1, [r7, #8]
 800b82c:	607a      	str	r2, [r7, #4]
 800b82e:	603b      	str	r3, [r7, #0]
    int idx, ret = 0;
 800b830:	2300      	movs	r3, #0
 800b832:	617b      	str	r3, [r7, #20]
    if ((ret = mbedtls_mutex_lock(&ctx->mutex)) != 0) {
        return ret;
    }
#endif

    idx = ctx->source_count;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	613b      	str	r3, [r7, #16]
    if (idx >= MBEDTLS_ENTROPY_MAX_SOURCES) {
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	2b13      	cmp	r3, #19
 800b83e:	dd03      	ble.n	800b848 <mbedtls_entropy_add_source+0x26>
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
 800b840:	f06f 033d 	mvn.w	r3, #61	; 0x3d
 800b844:	617b      	str	r3, [r7, #20]
        goto exit;
 800b846:	e02c      	b.n	800b8a2 <mbedtls_entropy_add_source+0x80>
    }

    ctx->source[idx].f_source  = f_source;
 800b848:	68f9      	ldr	r1, [r7, #12]
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	4613      	mov	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4413      	add	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	440b      	add	r3, r1
 800b856:	3314      	adds	r3, #20
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	601a      	str	r2, [r3, #0]
    ctx->source[idx].p_source  = p_source;
 800b85c:	68f9      	ldr	r1, [r7, #12]
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	4613      	mov	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	4413      	add	r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	440b      	add	r3, r1
 800b86a:	3318      	adds	r3, #24
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	601a      	str	r2, [r3, #0]
    ctx->source[idx].threshold = threshold;
 800b870:	68f9      	ldr	r1, [r7, #12]
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	4613      	mov	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4413      	add	r3, r2
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	440b      	add	r3, r1
 800b87e:	3320      	adds	r3, #32
 800b880:	683a      	ldr	r2, [r7, #0]
 800b882:	601a      	str	r2, [r3, #0]
    ctx->source[idx].strong    = strong;
 800b884:	68f9      	ldr	r1, [r7, #12]
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	4613      	mov	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	4413      	add	r3, r2
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	440b      	add	r3, r1
 800b892:	3324      	adds	r3, #36	; 0x24
 800b894:	6a3a      	ldr	r2, [r7, #32]
 800b896:	601a      	str	r2, [r3, #0]

    ctx->source_count++;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	1c5a      	adds	r2, r3, #1
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	611a      	str	r2, [r3, #16]
    if (mbedtls_mutex_unlock(&ctx->mutex) != 0) {
        return MBEDTLS_ERR_THREADING_MUTEX_ERROR;
    }
#endif

    return ret;
 800b8a2:	697b      	ldr	r3, [r7, #20]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	371c      	adds	r7, #28
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update(mbedtls_entropy_context *ctx, unsigned char source_id,
                          const unsigned char *data, size_t len)
{
 800b8b0:	b590      	push	{r4, r7, lr}
 800b8b2:	b099      	sub	sp, #100	; 0x64
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	607a      	str	r2, [r7, #4]
 800b8ba:	603b      	str	r3, [r7, #0]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	72fb      	strb	r3, [r7, #11]
    unsigned char header[2];
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    const unsigned char *p = data;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	65bb      	str	r3, [r7, #88]	; 0x58
    int ret = 0;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	657b      	str	r3, [r7, #84]	; 0x54

    if (use_len > MBEDTLS_ENTROPY_BLOCK_SIZE) {
 800b8cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8ce:	2b40      	cmp	r3, #64	; 0x40
 800b8d0:	d911      	bls.n	800b8f6 <entropy_update+0x46>
        if ((ret = mbedtls_md(mbedtls_md_info_from_type(MBEDTLS_ENTROPY_MD),
 800b8d2:	200b      	movs	r0, #11
 800b8d4:	f001 f976 	bl	800cbc4 <mbedtls_md_info_from_type>
 800b8d8:	f107 0310 	add.w	r3, r7, #16
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	f001 fd10 	bl	800d304 <mbedtls_md>
 800b8e4:	6578      	str	r0, [r7, #84]	; 0x54
 800b8e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d13b      	bne.n	800b964 <entropy_update+0xb4>
                              data, len, tmp)) != 0) {
            goto cleanup;
        }
        p = tmp;
 800b8ec:	f107 0310 	add.w	r3, r7, #16
 800b8f0:	65bb      	str	r3, [r7, #88]	; 0x58
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 800b8f2:	2340      	movs	r3, #64	; 0x40
 800b8f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    header[0] = source_id;
 800b8f6:	7afb      	ldrb	r3, [r7, #11]
 800b8f8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    header[1] = use_len & 0xFF;
 800b8fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    /*
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
    if (ctx->accumulator_started == 0) {
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d118      	bne.n	800b93e <entropy_update+0x8e>
        ret = mbedtls_md_setup(&ctx->accumulator,
 800b90c:	68fc      	ldr	r4, [r7, #12]
 800b90e:	200b      	movs	r0, #11
 800b910:	f001 f958 	bl	800cbc4 <mbedtls_md_info_from_type>
 800b914:	4603      	mov	r3, r0
 800b916:	2200      	movs	r2, #0
 800b918:	4619      	mov	r1, r3
 800b91a:	4620      	mov	r0, r4
 800b91c:	f001 fa4a 	bl	800cdb4 <mbedtls_md_setup>
 800b920:	6578      	str	r0, [r7, #84]	; 0x54
                               mbedtls_md_info_from_type(MBEDTLS_ENTROPY_MD), 0);
        if (ret != 0) {
 800b922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b924:	2b00      	cmp	r3, #0
 800b926:	d11f      	bne.n	800b968 <entropy_update+0xb8>
            goto cleanup;
        }
        ret = mbedtls_md_starts(&ctx->accumulator);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	4618      	mov	r0, r3
 800b92c:	f001 fb48 	bl	800cfc0 <mbedtls_md_starts>
 800b930:	6578      	str	r0, [r7, #84]	; 0x54
        if (ret != 0) {
 800b932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b934:	2b00      	cmp	r3, #0
 800b936:	d119      	bne.n	800b96c <entropy_update+0xbc>
            goto cleanup;
        }
        ctx->accumulator_started = 1;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2201      	movs	r2, #1
 800b93c:	60da      	str	r2, [r3, #12]
    }
    if ((ret = mbedtls_md_update(&ctx->accumulator, header, 2)) != 0) {
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800b944:	2202      	movs	r2, #2
 800b946:	4618      	mov	r0, r3
 800b948:	f001 fbce 	bl	800d0e8 <mbedtls_md_update>
 800b94c:	6578      	str	r0, [r7, #84]	; 0x54
 800b94e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10d      	bne.n	800b970 <entropy_update+0xc0>
        goto cleanup;
    }
    ret = mbedtls_md_update(&ctx->accumulator, p, use_len);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b958:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b95a:	4618      	mov	r0, r3
 800b95c:	f001 fbc4 	bl	800d0e8 <mbedtls_md_update>
 800b960:	6578      	str	r0, [r7, #84]	; 0x54
 800b962:	e006      	b.n	800b972 <entropy_update+0xc2>
            goto cleanup;
 800b964:	bf00      	nop
 800b966:	e004      	b.n	800b972 <entropy_update+0xc2>
            goto cleanup;
 800b968:	bf00      	nop
 800b96a:	e002      	b.n	800b972 <entropy_update+0xc2>
            goto cleanup;
 800b96c:	bf00      	nop
 800b96e:	e000      	b.n	800b972 <entropy_update+0xc2>
        goto cleanup;
 800b970:	bf00      	nop

cleanup:
    mbedtls_platform_zeroize(tmp, sizeof(tmp));
 800b972:	f107 0310 	add.w	r3, r7, #16
 800b976:	2140      	movs	r1, #64	; 0x40
 800b978:	4618      	mov	r0, r3
 800b97a:	f002 ffd7 	bl	800e92c <mbedtls_platform_zeroize>

    return ret;
 800b97e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800b980:	4618      	mov	r0, r3
 800b982:	3764      	adds	r7, #100	; 0x64
 800b984:	46bd      	mov	sp, r7
 800b986:	bd90      	pop	{r4, r7, pc}

0800b988 <entropy_gather_internal>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal(mbedtls_entropy_context *ctx)
{
 800b988:	b590      	push	{r4, r7, lr}
 800b98a:	b0a7      	sub	sp, #156	; 0x9c
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 800b990:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 800b994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int i;
    int have_one_strong = 0;
 800b998:	2300      	movs	r3, #0
 800b99a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if (ctx->source_count == 0) {
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d102      	bne.n	800b9ac <entropy_gather_internal+0x24>
        return MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED;
 800b9a6:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 800b9aa:	e07e      	b.n	800baaa <entropy_gather_internal+0x122>
    }

    /*
     * Run through our entropy sources
     */
    for (i = 0; i < ctx->source_count; i++) {
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b9b2:	e060      	b.n	800ba76 <entropy_gather_internal+0xee>
        if (ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG) {
 800b9b4:	6879      	ldr	r1, [r7, #4]
 800b9b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	440b      	add	r3, r1
 800b9c4:	3324      	adds	r3, #36	; 0x24
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d102      	bne.n	800b9d2 <entropy_gather_internal+0x4a>
            have_one_strong = 1;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        olen = 0;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	60bb      	str	r3, [r7, #8]
        if ((ret = ctx->source[i].f_source(ctx->source[i].p_source,
 800b9d6:	6879      	ldr	r1, [r7, #4]
 800b9d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b9dc:	4613      	mov	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	4413      	add	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	440b      	add	r3, r1
 800b9e6:	3314      	adds	r3, #20
 800b9e8:	681c      	ldr	r4, [r3, #0]
 800b9ea:	6879      	ldr	r1, [r7, #4]
 800b9ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4413      	add	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	440b      	add	r3, r1
 800b9fa:	3318      	adds	r3, #24
 800b9fc:	6818      	ldr	r0, [r3, #0]
 800b9fe:	f107 0308 	add.w	r3, r7, #8
 800ba02:	f107 010c 	add.w	r1, r7, #12
 800ba06:	2280      	movs	r2, #128	; 0x80
 800ba08:	47a0      	blx	r4
 800ba0a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ba0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d13e      	bne.n	800ba94 <entropy_gather_internal+0x10c>
        }

        /*
         * Add if we actually gathered something
         */
        if (olen > 0) {
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d027      	beq.n	800ba6c <entropy_gather_internal+0xe4>
            if ((ret = entropy_update(ctx, (unsigned char) i,
 800ba1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba20:	b2d9      	uxtb	r1, r3
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	f107 020c 	add.w	r2, r7, #12
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7ff ff41 	bl	800b8b0 <entropy_update>
 800ba2e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800ba32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d002      	beq.n	800ba40 <entropy_gather_internal+0xb8>
                                      buf, olen)) != 0) {
                return ret;
 800ba3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ba3e:	e034      	b.n	800baaa <entropy_gather_internal+0x122>
            }
            ctx->source[i].size += olen;
 800ba40:	6879      	ldr	r1, [r7, #4]
 800ba42:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ba46:	4613      	mov	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	440b      	add	r3, r1
 800ba50:	331c      	adds	r3, #28
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	18d1      	adds	r1, r2, r3
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ba5e:	4613      	mov	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4413      	add	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4403      	add	r3, r0
 800ba68:	331c      	adds	r3, #28
 800ba6a:	6019      	str	r1, [r3, #0]
    for (i = 0; i < ctx->source_count; i++) {
 800ba6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba70:	3301      	adds	r3, #1
 800ba72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	db98      	blt.n	800b9b4 <entropy_gather_internal+0x2c>
        }
    }

    if (have_one_strong == 0) {
 800ba82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d106      	bne.n	800ba98 <entropy_gather_internal+0x110>
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 800ba8a:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 800ba8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba92:	e002      	b.n	800ba9a <entropy_gather_internal+0x112>
            goto cleanup;
 800ba94:	bf00      	nop
 800ba96:	e000      	b.n	800ba9a <entropy_gather_internal+0x112>
    }

cleanup:
 800ba98:	bf00      	nop
    mbedtls_platform_zeroize(buf, sizeof(buf));
 800ba9a:	f107 030c 	add.w	r3, r7, #12
 800ba9e:	2180      	movs	r1, #128	; 0x80
 800baa0:	4618      	mov	r0, r3
 800baa2:	f002 ff43 	bl	800e92c <mbedtls_platform_zeroize>

    return ret;
 800baa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 800baaa:	4618      	mov	r0, r3
 800baac:	379c      	adds	r7, #156	; 0x9c
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd90      	pop	{r4, r7, pc}

0800bab2 <mbedtls_entropy_func>:

    return ret;
}

int mbedtls_entropy_func(void *data, unsigned char *output, size_t len)
{
 800bab2:	b590      	push	{r4, r7, lr}
 800bab4:	b09b      	sub	sp, #108	; 0x6c
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	607a      	str	r2, [r7, #4]
    int ret, count = 0, i, thresholds_reached;
 800babe:	2300      	movs	r3, #0
 800bac0:	663b      	str	r3, [r7, #96]	; 0x60
    size_t strong_size;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	653b      	str	r3, [r7, #80]	; 0x50
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if (len > MBEDTLS_ENTROPY_BLOCK_SIZE) {
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b40      	cmp	r3, #64	; 0x40
 800baca:	d902      	bls.n	800bad2 <mbedtls_entropy_func+0x20>
        return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 800bacc:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 800bad0:	e0cd      	b.n	800bc6e <mbedtls_entropy_func+0x1bc>

    /*
     * Always gather extra entropy before a call
     */
    do {
        if (count++ > ENTROPY_MAX_LOOP) {
 800bad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bad4:	1c5a      	adds	r2, r3, #1
 800bad6:	663a      	str	r2, [r7, #96]	; 0x60
 800bad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800badc:	dd03      	ble.n	800bae6 <mbedtls_entropy_func+0x34>
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 800bade:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 800bae2:	667b      	str	r3, [r7, #100]	; 0x64
            goto exit;
 800bae4:	e0bc      	b.n	800bc60 <mbedtls_entropy_func+0x1ae>
        }

        if ((ret = entropy_gather_internal(ctx)) != 0) {
 800bae6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bae8:	f7ff ff4e 	bl	800b988 <entropy_gather_internal>
 800baec:	6678      	str	r0, [r7, #100]	; 0x64
 800baee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f040 80aa 	bne.w	800bc4a <mbedtls_entropy_func+0x198>
            goto exit;
        }

        thresholds_reached = 1;
 800baf6:	2301      	movs	r3, #1
 800baf8:	65bb      	str	r3, [r7, #88]	; 0x58
        strong_size = 0;
 800bafa:	2300      	movs	r3, #0
 800bafc:	657b      	str	r3, [r7, #84]	; 0x54
        for (i = 0; i < ctx->source_count; i++) {
 800bafe:	2300      	movs	r3, #0
 800bb00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb02:	e02f      	b.n	800bb64 <mbedtls_entropy_func+0xb2>
            if (ctx->source[i].size < ctx->source[i].threshold) {
 800bb04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb08:	4613      	mov	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4413      	add	r3, r2
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	440b      	add	r3, r1
 800bb12:	331c      	adds	r3, #28
 800bb14:	6819      	ldr	r1, [r3, #0]
 800bb16:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bb18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4413      	add	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4403      	add	r3, r0
 800bb24:	3320      	adds	r3, #32
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4299      	cmp	r1, r3
 800bb2a:	d201      	bcs.n	800bb30 <mbedtls_entropy_func+0x7e>
                thresholds_reached = 0;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	65bb      	str	r3, [r7, #88]	; 0x58
            }
            if (ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG) {
 800bb30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb34:	4613      	mov	r3, r2
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	4413      	add	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	440b      	add	r3, r1
 800bb3e:	3324      	adds	r3, #36	; 0x24
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d10b      	bne.n	800bb5e <mbedtls_entropy_func+0xac>
                strong_size += ctx->source[i].size;
 800bb46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4413      	add	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	440b      	add	r3, r1
 800bb54:	331c      	adds	r3, #28
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb5a:	4413      	add	r3, r2
 800bb5c:	657b      	str	r3, [r7, #84]	; 0x54
        for (i = 0; i < ctx->source_count; i++) {
 800bb5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb60:	3301      	adds	r3, #1
 800bb62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb66:	691b      	ldr	r3, [r3, #16]
 800bb68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	dbca      	blt.n	800bb04 <mbedtls_entropy_func+0x52>
            }
        }
    } while (!thresholds_reached || strong_size < MBEDTLS_ENTROPY_BLOCK_SIZE);
 800bb6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d0ae      	beq.n	800bad2 <mbedtls_entropy_func+0x20>
 800bb74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb76:	2b3f      	cmp	r3, #63	; 0x3f
 800bb78:	d9ab      	bls.n	800bad2 <mbedtls_entropy_func+0x20>

    memset(buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE);
 800bb7a:	f107 0310 	add.w	r3, r7, #16
 800bb7e:	2240      	movs	r2, #64	; 0x40
 800bb80:	2100      	movs	r1, #0
 800bb82:	4618      	mov	r0, r3
 800bb84:	f011 fb1a 	bl	801d1bc <memset>
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if ((ret = mbedtls_md_finish(&ctx->accumulator, buf)) != 0) {
 800bb88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb8a:	f107 0210 	add.w	r2, r7, #16
 800bb8e:	4611      	mov	r1, r2
 800bb90:	4618      	mov	r0, r3
 800bb92:	f001 fb33 	bl	800d1fc <mbedtls_md_finish>
 800bb96:	6678      	str	r0, [r7, #100]	; 0x64
 800bb98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d157      	bne.n	800bc4e <mbedtls_entropy_func+0x19c>
    }

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_md_free(&ctx->accumulator);
 800bb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bba0:	4618      	mov	r0, r3
 800bba2:	f001 f87f 	bl	800cca4 <mbedtls_md_free>
    mbedtls_md_init(&ctx->accumulator);
 800bba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f001 f86d 	bl	800cc88 <mbedtls_md_init>
    ret = mbedtls_md_setup(&ctx->accumulator,
 800bbae:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800bbb0:	200b      	movs	r0, #11
 800bbb2:	f001 f807 	bl	800cbc4 <mbedtls_md_info_from_type>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2200      	movs	r2, #0
 800bbba:	4619      	mov	r1, r3
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f001 f8f9 	bl	800cdb4 <mbedtls_md_setup>
 800bbc2:	6678      	str	r0, [r7, #100]	; 0x64
                           mbedtls_md_info_from_type(MBEDTLS_ENTROPY_MD), 0);
    if (ret != 0) {
 800bbc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d143      	bne.n	800bc52 <mbedtls_entropy_func+0x1a0>
        goto exit;
    }
    ret = mbedtls_md_starts(&ctx->accumulator);
 800bbca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f001 f9f7 	bl	800cfc0 <mbedtls_md_starts>
 800bbd2:	6678      	str	r0, [r7, #100]	; 0x64
    if (ret != 0) {
 800bbd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d13d      	bne.n	800bc56 <mbedtls_entropy_func+0x1a4>
        goto exit;
    }
    if ((ret = mbedtls_md_update(&ctx->accumulator, buf,
 800bbda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbdc:	f107 0110 	add.w	r1, r7, #16
 800bbe0:	2240      	movs	r2, #64	; 0x40
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f001 fa80 	bl	800d0e8 <mbedtls_md_update>
 800bbe8:	6678      	str	r0, [r7, #100]	; 0x64
 800bbea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d134      	bne.n	800bc5a <mbedtls_entropy_func+0x1a8>
    }

    /*
     * Perform second hashing on entropy
     */
    if ((ret = mbedtls_md(mbedtls_md_info_from_type(MBEDTLS_ENTROPY_MD),
 800bbf0:	200b      	movs	r0, #11
 800bbf2:	f000 ffe7 	bl	800cbc4 <mbedtls_md_info_from_type>
 800bbf6:	f107 0310 	add.w	r3, r7, #16
 800bbfa:	f107 0110 	add.w	r1, r7, #16
 800bbfe:	2240      	movs	r2, #64	; 0x40
 800bc00:	f001 fb80 	bl	800d304 <mbedtls_md>
 800bc04:	6678      	str	r0, [r7, #100]	; 0x64
 800bc06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d128      	bne.n	800bc5e <mbedtls_entropy_func+0x1ac>
                          buf, MBEDTLS_ENTROPY_BLOCK_SIZE, buf)) != 0) {
        goto exit;
    }

    for (i = 0; i < ctx->source_count; i++) {
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc10:	e00c      	b.n	800bc2c <mbedtls_entropy_func+0x17a>
        ctx->source[i].size = 0;
 800bc12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc16:	4613      	mov	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4413      	add	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	440b      	add	r3, r1
 800bc20:	331c      	adds	r3, #28
 800bc22:	2200      	movs	r2, #0
 800bc24:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ctx->source_count; i++) {
 800bc26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc28:	3301      	adds	r3, #1
 800bc2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc2e:	691b      	ldr	r3, [r3, #16]
 800bc30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc32:	429a      	cmp	r2, r3
 800bc34:	dbed      	blt.n	800bc12 <mbedtls_entropy_func+0x160>
    }

    memcpy(output, buf, len);
 800bc36:	f107 0310 	add.w	r3, r7, #16
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	68b8      	ldr	r0, [r7, #8]
 800bc40:	f011 fb5a 	bl	801d2f8 <memcpy>

    ret = 0;
 800bc44:	2300      	movs	r3, #0
 800bc46:	667b      	str	r3, [r7, #100]	; 0x64
 800bc48:	e00a      	b.n	800bc60 <mbedtls_entropy_func+0x1ae>
            goto exit;
 800bc4a:	bf00      	nop
 800bc4c:	e008      	b.n	800bc60 <mbedtls_entropy_func+0x1ae>
        goto exit;
 800bc4e:	bf00      	nop
 800bc50:	e006      	b.n	800bc60 <mbedtls_entropy_func+0x1ae>
        goto exit;
 800bc52:	bf00      	nop
 800bc54:	e004      	b.n	800bc60 <mbedtls_entropy_func+0x1ae>
        goto exit;
 800bc56:	bf00      	nop
 800bc58:	e002      	b.n	800bc60 <mbedtls_entropy_func+0x1ae>
        goto exit;
 800bc5a:	bf00      	nop
 800bc5c:	e000      	b.n	800bc60 <mbedtls_entropy_func+0x1ae>
        goto exit;
 800bc5e:	bf00      	nop

exit:
    mbedtls_platform_zeroize(buf, sizeof(buf));
 800bc60:	f107 0310 	add.w	r3, r7, #16
 800bc64:	2140      	movs	r1, #64	; 0x40
 800bc66:	4618      	mov	r0, r3
 800bc68:	f002 fe60 	bl	800e92c <mbedtls_platform_zeroize>
    if (mbedtls_mutex_unlock(&ctx->mutex) != 0) {
        return MBEDTLS_ERR_THREADING_MUTEX_ERROR;
    }
#endif

    return ret;
 800bc6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	376c      	adds	r7, #108	; 0x6c
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd90      	pop	{r4, r7, pc}
	...

0800bc78 <mbedtls_platform_entropy_poll>:

#include <stdio.h>

int mbedtls_platform_entropy_poll(void *data,
                                  unsigned char *output, size_t len, size_t *olen)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b088      	sub	sp, #32
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
 800bc84:	603b      	str	r3, [r7, #0]
    FILE *file;
    size_t read_len;
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800bc86:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800bc8a:	61fb      	str	r3, [r7, #28]
    }
    *olen = len;
    return 0;
#else

    *olen = 0;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	601a      	str	r2, [r3, #0]

    file = fopen("/dev/urandom", "rb");
 800bc92:	4915      	ldr	r1, [pc, #84]	; (800bce8 <mbedtls_platform_entropy_poll+0x70>)
 800bc94:	4815      	ldr	r0, [pc, #84]	; (800bcec <mbedtls_platform_entropy_poll+0x74>)
 800bc96:	f010 fed5 	bl	801ca44 <fopen>
 800bc9a:	61b8      	str	r0, [r7, #24]
    if (file == NULL) {
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d102      	bne.n	800bca8 <mbedtls_platform_entropy_poll+0x30>
        return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 800bca2:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 800bca6:	e01b      	b.n	800bce0 <mbedtls_platform_entropy_poll+0x68>
    }

    /* Ensure no stdio buffering of secrets, as such buffers cannot be wiped. */
    mbedtls_setbuf(file, NULL);
 800bca8:	2100      	movs	r1, #0
 800bcaa:	69b8      	ldr	r0, [r7, #24]
 800bcac:	f011 f858 	bl	801cd60 <setbuf>

    read_len = fread(output, 1, len, file);
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	2101      	movs	r1, #1
 800bcb6:	68b8      	ldr	r0, [r7, #8]
 800bcb8:	f010 ff28 	bl	801cb0c <fread>
 800bcbc:	6178      	str	r0, [r7, #20]
    if (read_len != len) {
 800bcbe:	697a      	ldr	r2, [r7, #20]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d005      	beq.n	800bcd2 <mbedtls_platform_entropy_poll+0x5a>
        fclose(file);
 800bcc6:	69b8      	ldr	r0, [r7, #24]
 800bcc8:	f010 fcba 	bl	801c640 <fclose>
        return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 800bccc:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 800bcd0:	e006      	b.n	800bce0 <mbedtls_platform_entropy_poll+0x68>
    }

    fclose(file);
 800bcd2:	69b8      	ldr	r0, [r7, #24]
 800bcd4:	f010 fcb4 	bl	801c640 <fclose>
    *olen = len;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	601a      	str	r2, [r3, #0]

    return 0;
 800bcde:	2300      	movs	r3, #0
#endif /* HAVE_SYSCTL_ARND */
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3720      	adds	r7, #32
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	0801e520 	.word	0x0801e520
 800bcec:	0801e524 	.word	0x0801e524

0800bcf0 <mbedtls_cipher_info_get_block_size>:
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <mbedtls_cipher_info_get_block_size+0x12>
        return 0;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	e004      	b.n	800bd0c <mbedtls_cipher_info_get_block_size+0x1c>
    return (size_t) (info->MBEDTLS_PRIVATE(block_size));
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	791b      	ldrb	r3, [r3, #4]
 800bd06:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800bd0a:	b2db      	uxtb	r3, r3
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <mbedtls_gcm_init>:

/*
 * Initialize a context
 */
void mbedtls_gcm_init(mbedtls_gcm_context *ctx)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_gcm_context));
 800bd20:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bd24:	2100      	movs	r1, #0
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f011 fa48 	bl	801d1bc <memset>
}
 800bd2c:	bf00      	nop
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <gcm_set_acceleration>:

static inline void gcm_set_acceleration(mbedtls_gcm_context *ctx)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
#if defined(MBEDTLS_GCM_LARGE_TABLE)
    ctx->acceleration = MBEDTLS_GCM_ACC_LARGETABLE;
#else
    ctx->acceleration = MBEDTLS_GCM_ACC_SMALLTABLE;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
#if defined(MBEDTLS_AESCE_HAVE_CODE)
    if (MBEDTLS_AESCE_HAS_SUPPORT()) {
        ctx->acceleration = MBEDTLS_GCM_ACC_AESCE;
    }
#endif
}
 800bd44:	bf00      	nop
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <gcm_gen_table_rightshift>:

static inline void gcm_gen_table_rightshift(uint64_t dst[2], const uint64_t src[2])
{
 800bd50:	b5b0      	push	{r4, r5, r7, lr}
 800bd52:	b090      	sub	sp, #64	; 0x40
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
    uint8_t *u8Dst = (uint8_t *) dst;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t *u8Src = (uint8_t *) src;
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT64_BE(MBEDTLS_GET_UINT64_BE(&src[1], 0) >> 1, &dst[1], 0);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f103 0408 	add.w	r4, r3, #8
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	3308      	adds	r3, #8
 800bd6c:	633b      	str	r3, [r7, #48]	; 0x30
    memcpy(&r, p, sizeof(r));
 800bd6e:	f107 0310 	add.w	r3, r7, #16
 800bd72:	2208      	movs	r2, #8
 800bd74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd76:	4618      	mov	r0, r3
 800bd78:	f011 fabe 	bl	801d2f8 <memcpy>
    return r;
 800bd7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bd80:	ba15      	rev	r5, r2
 800bd82:	ba1b      	rev	r3, r3
 800bd84:	4618      	mov	r0, r3
 800bd86:	4629      	mov	r1, r5
 800bd88:	f04f 0200 	mov.w	r2, #0
 800bd8c:	f04f 0300 	mov.w	r3, #0
 800bd90:	0842      	lsrs	r2, r0, #1
 800bd92:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800bd96:	084b      	lsrs	r3, r1, #1
 800bd98:	ba11      	rev	r1, r2
 800bd9a:	ba18      	rev	r0, r3
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	637c      	str	r4, [r7, #52]	; 0x34
 800bda2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    memcpy(p, &x, sizeof(x));
 800bda6:	f107 0308 	add.w	r3, r7, #8
 800bdaa:	2208      	movs	r2, #8
 800bdac:	4619      	mov	r1, r3
 800bdae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bdb0:	f011 faa2 	bl	801d2f8 <memcpy>
}
 800bdb4:	bf00      	nop
    u8Dst[8] |= (u8Src[7] & 0x01) << 7;
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb8:	3308      	adds	r3, #8
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	b25a      	sxtb	r2, r3
 800bdbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc0:	3307      	adds	r3, #7
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	01db      	lsls	r3, r3, #7
 800bdc6:	b25b      	sxtb	r3, r3
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	b25a      	sxtb	r2, r3
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdce:	3308      	adds	r3, #8
 800bdd0:	b2d2      	uxtb	r2, r2
 800bdd2:	701a      	strb	r2, [r3, #0]
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	62bb      	str	r3, [r7, #40]	; 0x28
    memcpy(&r, p, sizeof(r));
 800bdd8:	f107 0320 	add.w	r3, r7, #32
 800bddc:	2208      	movs	r2, #8
 800bdde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bde0:	4618      	mov	r0, r3
 800bde2:	f011 fa89 	bl	801d2f8 <memcpy>
    return r;
 800bde6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    MBEDTLS_PUT_UINT64_BE(MBEDTLS_GET_UINT64_BE(&src[0], 0) >> 1, &dst[0], 0);
 800bdea:	ba14      	rev	r4, r2
 800bdec:	ba1b      	rev	r3, r3
 800bdee:	4618      	mov	r0, r3
 800bdf0:	4621      	mov	r1, r4
 800bdf2:	f04f 0200 	mov.w	r2, #0
 800bdf6:	f04f 0300 	mov.w	r3, #0
 800bdfa:	0842      	lsrs	r2, r0, #1
 800bdfc:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800be00:	084b      	lsrs	r3, r1, #1
 800be02:	ba11      	rev	r1, r2
 800be04:	ba18      	rev	r0, r3
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800be0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    memcpy(p, &x, sizeof(x));
 800be12:	f107 0318 	add.w	r3, r7, #24
 800be16:	2208      	movs	r2, #8
 800be18:	4619      	mov	r1, r3
 800be1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be1c:	f011 fa6c 	bl	801d2f8 <memcpy>
}
 800be20:	bf00      	nop
    u8Dst[0] ^= (u8Src[15] & 0x01) ? 0xE1 : 0;
 800be22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	b25b      	sxtb	r3, r3
 800be28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be2a:	320f      	adds	r2, #15
 800be2c:	7812      	ldrb	r2, [r2, #0]
 800be2e:	f002 0201 	and.w	r2, r2, #1
 800be32:	2a00      	cmp	r2, #0
 800be34:	d002      	beq.n	800be3c <gcm_gen_table_rightshift+0xec>
 800be36:	f06f 021e 	mvn.w	r2, #30
 800be3a:	e000      	b.n	800be3e <gcm_gen_table_rightshift+0xee>
 800be3c:	2200      	movs	r2, #0
 800be3e:	4053      	eors	r3, r2
 800be40:	b25b      	sxtb	r3, r3
 800be42:	b2da      	uxtb	r2, r3
 800be44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be46:	701a      	strb	r2, [r3, #0]
}
 800be48:	bf00      	nop
 800be4a:	3740      	adds	r7, #64	; 0x40
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bdb0      	pop	{r4, r5, r7, pc}

0800be50 <gcm_gen_table>:
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */
static int gcm_gen_table(mbedtls_gcm_context *ctx)
{
 800be50:	b590      	push	{r4, r7, lr}
 800be52:	b0a1      	sub	sp, #132	; 0x84
 800be54:	af02      	add	r7, sp, #8
 800be56:	6078      	str	r0, [r7, #4]
    int ret, i, j;
    uint64_t u64h[2] = { 0 };
 800be58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be5c:	2200      	movs	r2, #0
 800be5e:	601a      	str	r2, [r3, #0]
 800be60:	605a      	str	r2, [r3, #4]
 800be62:	609a      	str	r2, [r3, #8]
 800be64:	60da      	str	r2, [r3, #12]
    uint8_t *h = (uint8_t *) u64h;
 800be66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be6a:	66fb      	str	r3, [r7, #108]	; 0x6c

#if defined(MBEDTLS_BLOCK_CIPHER_C)
    ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, h, h);
#else
    size_t olen = 0;
 800be6c:	2300      	movs	r3, #0
 800be6e:	627b      	str	r3, [r7, #36]	; 0x24
    ret = mbedtls_cipher_update(&ctx->cipher_ctx, h, 16, h, &olen);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be7a:	2210      	movs	r2, #16
 800be7c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800be7e:	f7fc f8ad 	bl	8007fdc <mbedtls_cipher_update>
 800be82:	66b8      	str	r0, [r7, #104]	; 0x68
#endif
    if (ret != 0) {
 800be84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <gcm_gen_table+0x3e>
        return ret;
 800be8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be8c:	e0d8      	b.n	800c040 <gcm_gen_table+0x1f0>
    }

    gcm_set_acceleration(ctx);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff ff50 	bl	800bd34 <gcm_set_acceleration>

    /* MBEDTLS_GCM_HTABLE_SIZE/2 = 1000 corresponds to 1 in GF(2^128) */
    ctx->H[MBEDTLS_GCM_HTABLE_SIZE/2][0] = u64h[0];
 800be94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800be98:	6879      	ldr	r1, [r7, #4]
 800be9a:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    ctx->H[MBEDTLS_GCM_HTABLE_SIZE/2][1] = u64h[1];
 800be9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bea2:	6879      	ldr	r1, [r7, #4]
 800bea4:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
            return 0;
#endif

        default:
            /* 0 corresponds to 0 in GF(2^128) */
            ctx->H[0][0] = 0;
 800bea8:	6879      	ldr	r1, [r7, #4]
 800beaa:	f04f 0200 	mov.w	r2, #0
 800beae:	f04f 0300 	mov.w	r3, #0
 800beb2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
            ctx->H[0][1] = 0;
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	f04f 0200 	mov.w	r2, #0
 800bebc:	f04f 0300 	mov.w	r3, #0
 800bec0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

            for (i = MBEDTLS_GCM_HTABLE_SIZE/4; i > 0; i >>= 1) {
 800bec4:	2304      	movs	r3, #4
 800bec6:	677b      	str	r3, [r7, #116]	; 0x74
 800bec8:	e010      	b.n	800beec <gcm_gen_table+0x9c>
                gcm_gen_table_rightshift(ctx->H[i], ctx->H[i*2]);
 800beca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800becc:	011b      	lsls	r3, r3, #4
 800bece:	3348      	adds	r3, #72	; 0x48
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	18d0      	adds	r0, r2, r3
 800bed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	011b      	lsls	r3, r3, #4
 800beda:	3348      	adds	r3, #72	; 0x48
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	4413      	add	r3, r2
 800bee0:	4619      	mov	r1, r3
 800bee2:	f7ff ff35 	bl	800bd50 <gcm_gen_table_rightshift>
            for (i = MBEDTLS_GCM_HTABLE_SIZE/4; i > 0; i >>= 1) {
 800bee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bee8:	105b      	asrs	r3, r3, #1
 800beea:	677b      	str	r3, [r7, #116]	; 0x74
 800beec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800beee:	2b00      	cmp	r3, #0
 800bef0:	dceb      	bgt.n	800beca <gcm_gen_table+0x7a>
            }

#if !defined(MBEDTLS_GCM_LARGE_TABLE)
            /* pack elements of H as 64-bits ints, big-endian */
            for (i = MBEDTLS_GCM_HTABLE_SIZE/2; i > 0; i >>= 1) {
 800bef2:	2308      	movs	r3, #8
 800bef4:	677b      	str	r3, [r7, #116]	; 0x74
 800bef6:	e038      	b.n	800bf6a <gcm_gen_table+0x11a>
                MBEDTLS_PUT_UINT64_BE(ctx->H[i][0], &ctx->H[i][0], 0);
 800bef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800befa:	011b      	lsls	r3, r3, #4
 800befc:	3348      	adds	r3, #72	; 0x48
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	18d1      	adds	r1, r2, r3
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf06:	011b      	lsls	r3, r3, #4
 800bf08:	4413      	add	r3, r2
 800bf0a:	3348      	adds	r3, #72	; 0x48
 800bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf10:	ba10      	rev	r0, r2
 800bf12:	ba1c      	rev	r4, r3
 800bf14:	4622      	mov	r2, r4
 800bf16:	4603      	mov	r3, r0
 800bf18:	6679      	str	r1, [r7, #100]	; 0x64
 800bf1a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    memcpy(p, &x, sizeof(x));
 800bf1e:	f107 0308 	add.w	r3, r7, #8
 800bf22:	2208      	movs	r2, #8
 800bf24:	4619      	mov	r1, r3
 800bf26:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bf28:	f011 f9e6 	bl	801d2f8 <memcpy>
}
 800bf2c:	bf00      	nop
                MBEDTLS_PUT_UINT64_BE(ctx->H[i][1], &ctx->H[i][1], 0);
 800bf2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf30:	3305      	adds	r3, #5
 800bf32:	011b      	lsls	r3, r3, #4
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	18d1      	adds	r1, r2, r3
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf3c:	3305      	adds	r3, #5
 800bf3e:	011b      	lsls	r3, r3, #4
 800bf40:	4413      	add	r3, r2
 800bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf46:	ba10      	rev	r0, r2
 800bf48:	ba1c      	rev	r4, r3
 800bf4a:	4622      	mov	r2, r4
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	6639      	str	r1, [r7, #96]	; 0x60
 800bf50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    memcpy(p, &x, sizeof(x));
 800bf54:	f107 0310 	add.w	r3, r7, #16
 800bf58:	2208      	movs	r2, #8
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800bf5e:	f011 f9cb 	bl	801d2f8 <memcpy>
}
 800bf62:	bf00      	nop
            for (i = MBEDTLS_GCM_HTABLE_SIZE/2; i > 0; i >>= 1) {
 800bf64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf66:	105b      	asrs	r3, r3, #1
 800bf68:	677b      	str	r3, [r7, #116]	; 0x74
 800bf6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dcc3      	bgt.n	800bef8 <gcm_gen_table+0xa8>
            }
#endif

            for (i = 2; i < MBEDTLS_GCM_HTABLE_SIZE; i <<= 1) {
 800bf70:	2302      	movs	r3, #2
 800bf72:	677b      	str	r3, [r7, #116]	; 0x74
 800bf74:	e060      	b.n	800c038 <gcm_gen_table+0x1e8>
                for (j = 1; j < i; j++) {
 800bf76:	2301      	movs	r3, #1
 800bf78:	673b      	str	r3, [r7, #112]	; 0x70
 800bf7a:	e056      	b.n	800c02a <gcm_gen_table+0x1da>
                    mbedtls_xor_no_simd((unsigned char *) ctx->H[i+j],
 800bf7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bf7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf80:	4413      	add	r3, r2
 800bf82:	011b      	lsls	r3, r3, #4
 800bf84:	3348      	adds	r3, #72	; 0x48
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	18d1      	adds	r1, r2, r3
                                        (unsigned char *) ctx->H[i],
 800bf8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf8c:	011b      	lsls	r3, r3, #4
 800bf8e:	3348      	adds	r3, #72	; 0x48
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	441a      	add	r2, r3
                                        (unsigned char *) ctx->H[j],
 800bf94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf96:	011b      	lsls	r3, r3, #4
 800bf98:	3348      	adds	r3, #72	; 0x48
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	4403      	add	r3, r0
 800bf9e:	65f9      	str	r1, [r7, #92]	; 0x5c
 800bfa0:	65ba      	str	r2, [r7, #88]	; 0x58
 800bfa2:	657b      	str	r3, [r7, #84]	; 0x54
 800bfa4:	2310      	movs	r3, #16
 800bfa6:	653b      	str	r3, [r7, #80]	; 0x50
    size_t i = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (; (i + 4) <= n; i += 4) {
 800bfac:	e01e      	b.n	800bfec <gcm_gen_table+0x19c>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800bfae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfb2:	4413      	add	r3, r2
 800bfb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfb8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800bfba:	623b      	str	r3, [r7, #32]
    return r;
 800bfbc:	6a3a      	ldr	r2, [r7, #32]
 800bfbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfc2:	440b      	add	r3, r1
 800bfc4:	647b      	str	r3, [r7, #68]	; 0x44
 800bfc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfc8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800bfca:	61fb      	str	r3, [r7, #28]
    return r;
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	4053      	eors	r3, r2
 800bfd0:	643b      	str	r3, [r7, #64]	; 0x40
        mbedtls_put_unaligned_uint32(r + i, x);
 800bfd2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bfd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfd6:	4413      	add	r3, r2
 800bfd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfdc:	61bb      	str	r3, [r7, #24]
 800bfde:	69ba      	ldr	r2, [r7, #24]
    memcpy(p, &x, sizeof(x));
 800bfe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe2:	601a      	str	r2, [r3, #0]
}
 800bfe4:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800bfe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfe8:	3304      	adds	r3, #4
 800bfea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfee:	3304      	adds	r3, #4
 800bff0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d2db      	bcs.n	800bfae <gcm_gen_table+0x15e>
    for (; i < n; i++) {
 800bff6:	e010      	b.n	800c01a <gcm_gen_table+0x1ca>
        r[i] = a[i] ^ b[i];
 800bff8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bffc:	4413      	add	r3, r2
 800bffe:	7819      	ldrb	r1, [r3, #0]
 800c000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c004:	4413      	add	r3, r2
 800c006:	781a      	ldrb	r2, [r3, #0]
 800c008:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c00a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c00c:	4403      	add	r3, r0
 800c00e:	404a      	eors	r2, r1
 800c010:	b2d2      	uxtb	r2, r2
 800c012:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800c014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c016:	3301      	adds	r3, #1
 800c018:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c01a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c01c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c01e:	429a      	cmp	r2, r3
 800c020:	d8ea      	bhi.n	800bff8 <gcm_gen_table+0x1a8>
}
 800c022:	bf00      	nop
                for (j = 1; j < i; j++) {
 800c024:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c026:	3301      	adds	r3, #1
 800c028:	673b      	str	r3, [r7, #112]	; 0x70
 800c02a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c02c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c02e:	429a      	cmp	r2, r3
 800c030:	dba4      	blt.n	800bf7c <gcm_gen_table+0x12c>
            for (i = 2; i < MBEDTLS_GCM_HTABLE_SIZE; i <<= 1) {
 800c032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c034:	005b      	lsls	r3, r3, #1
 800c036:	677b      	str	r3, [r7, #116]	; 0x74
 800c038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c03a:	2b0f      	cmp	r3, #15
 800c03c:	dd9b      	ble.n	800bf76 <gcm_gen_table+0x126>
                                        16);
                }
            }
    }

    return 0;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	377c      	adds	r7, #124	; 0x7c
 800c044:	46bd      	mov	sp, r7
 800c046:	bd90      	pop	{r4, r7, pc}

0800c048 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey(mbedtls_gcm_context *ctx,
                       mbedtls_cipher_id_t cipher,
                       const unsigned char *key,
                       unsigned int keybits)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	607a      	str	r2, [r7, #4]
 800c052:	603b      	str	r3, [r7, #0]
 800c054:	460b      	mov	r3, r1
 800c056:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800c058:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800c05c:	617b      	str	r3, [r7, #20]

    if (keybits != 128 && keybits != 192 && keybits != 256) {
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	2b80      	cmp	r3, #128	; 0x80
 800c062:	d009      	beq.n	800c078 <mbedtls_gcm_setkey+0x30>
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	2bc0      	cmp	r3, #192	; 0xc0
 800c068:	d006      	beq.n	800c078 <mbedtls_gcm_setkey+0x30>
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c070:	d002      	beq.n	800c078 <mbedtls_gcm_setkey+0x30>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800c072:	f06f 0313 	mvn.w	r3, #19
 800c076:	e03a      	b.n	800c0ee <mbedtls_gcm_setkey+0xa6>
        return ret;
    }
#else
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values(cipher, keybits,
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	7afb      	ldrb	r3, [r7, #11]
 800c07c:	2201      	movs	r2, #1
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fb fe92 	bl	8007da8 <mbedtls_cipher_info_from_values>
 800c084:	6138      	str	r0, [r7, #16]
                                                  MBEDTLS_MODE_ECB);
    if (cipher_info == NULL) {
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d102      	bne.n	800c092 <mbedtls_gcm_setkey+0x4a>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800c08c:	f06f 0313 	mvn.w	r3, #19
 800c090:	e02d      	b.n	800c0ee <mbedtls_gcm_setkey+0xa6>
    }

    if (mbedtls_cipher_info_get_block_size(cipher_info) != 16) {
 800c092:	6938      	ldr	r0, [r7, #16]
 800c094:	f7ff fe2c 	bl	800bcf0 <mbedtls_cipher_info_get_block_size>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b10      	cmp	r3, #16
 800c09c:	d002      	beq.n	800c0a4 <mbedtls_gcm_setkey+0x5c>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800c09e:	f06f 0313 	mvn.w	r3, #19
 800c0a2:	e024      	b.n	800c0ee <mbedtls_gcm_setkey+0xa6>
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fb fec5 	bl	8007e36 <mbedtls_cipher_free>

    if ((ret = mbedtls_cipher_setup(&ctx->cipher_ctx, cipher_info)) != 0) {
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6939      	ldr	r1, [r7, #16]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7fb fee9 	bl	8007e88 <mbedtls_cipher_setup>
 800c0b6:	6178      	str	r0, [r7, #20]
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <mbedtls_gcm_setkey+0x7a>
        return ret;
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	e015      	b.n	800c0ee <mbedtls_gcm_setkey+0xa6>
    }

    if ((ret = mbedtls_cipher_setkey(&ctx->cipher_ctx, key, keybits,
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	6879      	ldr	r1, [r7, #4]
 800c0ca:	f7fb ff0f 	bl	8007eec <mbedtls_cipher_setkey>
 800c0ce:	6178      	str	r0, [r7, #20]
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d001      	beq.n	800c0da <mbedtls_gcm_setkey+0x92>
                                     MBEDTLS_ENCRYPT)) != 0) {
        return ret;
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	e009      	b.n	800c0ee <mbedtls_gcm_setkey+0xa6>
    }
#endif

    if ((ret = gcm_gen_table(ctx)) != 0) {
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	f7ff feb8 	bl	800be50 <gcm_gen_table>
 800c0e0:	6178      	str	r0, [r7, #20]
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d001      	beq.n	800c0ec <mbedtls_gcm_setkey+0xa4>
        return ret;
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	e000      	b.n	800c0ee <mbedtls_gcm_setkey+0xa6>
    }

    return 0;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
	...

0800c0f8 <gcm_mult_smalltable>:
    0xe100, 0xfd20, 0xd940, 0xc560,
    0x9180, 0x8da0, 0xa9c0, 0xb5e0
};

static void gcm_mult_smalltable(uint8_t *output, const uint8_t *x, uint64_t H[16][2])
{
 800c0f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0fc:	b0c6      	sub	sp, #280	; 0x118
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6478      	str	r0, [r7, #68]	; 0x44
 800c102:	6439      	str	r1, [r7, #64]	; 0x40
 800c104:	63fa      	str	r2, [r7, #60]	; 0x3c
    int i = 0;
 800c106:	2300      	movs	r3, #0
 800c108:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    unsigned char lo, hi, rem;
    uint64_t u64z[2];
    const uint64_t *pu64z = NULL;
 800c10c:	2300      	movs	r3, #0
 800c10e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    uint8_t *u8z = (uint8_t *) u64z;
 800c112:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c116:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    lo = x[15] & 0xf;
 800c11a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c11c:	330f      	adds	r3, #15
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	f003 030f 	and.w	r3, r3, #15
 800c124:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    hi = (x[15] >> 4) & 0xf;
 800c128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c12a:	330f      	adds	r3, #15
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	091b      	lsrs	r3, r3, #4
 800c130:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

    pu64z = H[lo];
 800c134:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800c138:	011a      	lsls	r2, r3, #4
 800c13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c13c:	4413      	add	r3, r2
 800c13e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    rem = (unsigned char) pu64z[1] & 0xf;
 800c142:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c146:	3308      	adds	r3, #8
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	b2d3      	uxtb	r3, r2
 800c14e:	f003 030f 	and.w	r3, r3, #15
 800c152:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    u64z[1] = (pu64z[0] << 60) | (pu64z[1] >> 4);
 800c156:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	f04f 0400 	mov.w	r4, #0
 800c162:	f04f 0500 	mov.w	r5, #0
 800c166:	0715      	lsls	r5, r2, #28
 800c168:	2400      	movs	r4, #0
 800c16a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c16e:	3308      	adds	r3, #8
 800c170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c174:	f04f 0000 	mov.w	r0, #0
 800c178:	f04f 0100 	mov.w	r1, #0
 800c17c:	0910      	lsrs	r0, r2, #4
 800c17e:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800c182:	0919      	lsrs	r1, r3, #4
 800c184:	ea44 0800 	orr.w	r8, r4, r0
 800c188:	ea45 0901 	orr.w	r9, r5, r1
 800c18c:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
    u64z[0] = (pu64z[0] >> 4);
 800c190:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	f04f 0000 	mov.w	r0, #0
 800c19c:	f04f 0100 	mov.w	r1, #0
 800c1a0:	0910      	lsrs	r0, r2, #4
 800c1a2:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800c1a6:	0919      	lsrs	r1, r3, #4
 800c1a8:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
    u64z[0] ^= (uint64_t) last4[rem] << 48;
 800c1ac:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c1b0:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 800c1b4:	4bd7      	ldr	r3, [pc, #860]	; (800c514 <gcm_mult_smalltable+0x41c>)
 800c1b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	2200      	movs	r2, #0
 800c1be:	633b      	str	r3, [r7, #48]	; 0x30
 800c1c0:	637a      	str	r2, [r7, #52]	; 0x34
 800c1c2:	f04f 0200 	mov.w	r2, #0
 800c1c6:	f04f 0300 	mov.w	r3, #0
 800c1ca:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800c1cc:	0423      	lsls	r3, r4, #16
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	ea80 0a02 	eor.w	sl, r0, r2
 800c1d4:	ea81 0b03 	eor.w	fp, r1, r3
 800c1d8:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
    mbedtls_xor_no_simd(u8z, u8z, (uint8_t *) H[hi], 16);
 800c1dc:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800c1e0:	011b      	lsls	r3, r3, #4
 800c1e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1e4:	441a      	add	r2, r3
 800c1e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c1ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c1f6:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800c1fa:	2310      	movs	r3, #16
 800c1fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    size_t i = 0;
 800c200:	2300      	movs	r3, #0
 800c202:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    for (; (i + 4) <= n; i += 4) {
 800c206:	e02e      	b.n	800c266 <gcm_mult_smalltable+0x16e>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800c208:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800c20c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c210:	4413      	add	r3, r2
 800c212:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c216:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c21a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c21c:	657b      	str	r3, [r7, #84]	; 0x54
    return r;
 800c21e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c220:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800c224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c228:	4413      	add	r3, r2
 800c22a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c22e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c232:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c234:	653b      	str	r3, [r7, #80]	; 0x50
    return r;
 800c236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c238:	404b      	eors	r3, r1
 800c23a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
        mbedtls_put_unaligned_uint32(r + i, x);
 800c23e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c246:	4413      	add	r3, r2
 800c248:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c24c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c250:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c252:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    memcpy(p, &x, sizeof(x));
 800c254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c258:	601a      	str	r2, [r3, #0]
}
 800c25a:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800c25c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c260:	3304      	adds	r3, #4
 800c262:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c26a:	3304      	adds	r3, #4
 800c26c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800c270:	429a      	cmp	r2, r3
 800c272:	d2c9      	bcs.n	800c208 <gcm_mult_smalltable+0x110>
    for (; i < n; i++) {
 800c274:	e019      	b.n	800c2aa <gcm_mult_smalltable+0x1b2>
        r[i] = a[i] ^ b[i];
 800c276:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800c27a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c27e:	4413      	add	r3, r2
 800c280:	7818      	ldrb	r0, [r3, #0]
 800c282:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800c286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c28a:	4413      	add	r3, r2
 800c28c:	7819      	ldrb	r1, [r3, #0]
 800c28e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c296:	441a      	add	r2, r3
 800c298:	ea80 0301 	eor.w	r3, r0, r1
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	7013      	strb	r3, [r2, #0]
    for (; i < n; i++) {
 800c2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c2aa:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800c2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d8df      	bhi.n	800c276 <gcm_mult_smalltable+0x17e>
}
 800c2b6:	bf00      	nop

    for (i = 14; i >= 0; i--) {
 800c2b8:	230e      	movs	r3, #14
 800c2ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c2be:	e188      	b.n	800c5d2 <gcm_mult_smalltable+0x4da>
        lo = x[i] & 0xf;
 800c2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2c6:	4413      	add	r3, r2
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	f003 030f 	and.w	r3, r3, #15
 800c2ce:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        hi = (x[i] >> 4) & 0xf;
 800c2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2d8:	4413      	add	r3, r2
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	091b      	lsrs	r3, r3, #4
 800c2de:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

        rem = (unsigned char) u64z[1] & 0xf;
 800c2e2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c2e6:	b2d3      	uxtb	r3, r2
 800c2e8:	f003 030f 	and.w	r3, r3, #15
 800c2ec:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
        u64z[1] = (u64z[0] << 60) | (u64z[1] >> 4);
 800c2f0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800c2f4:	f04f 0400 	mov.w	r4, #0
 800c2f8:	f04f 0500 	mov.w	r5, #0
 800c2fc:	0715      	lsls	r5, r2, #28
 800c2fe:	2400      	movs	r4, #0
 800c300:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c304:	f04f 0000 	mov.w	r0, #0
 800c308:	f04f 0100 	mov.w	r1, #0
 800c30c:	0910      	lsrs	r0, r2, #4
 800c30e:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800c312:	0919      	lsrs	r1, r3, #4
 800c314:	ea44 0300 	orr.w	r3, r4, r0
 800c318:	62bb      	str	r3, [r7, #40]	; 0x28
 800c31a:	ea45 0301 	orr.w	r3, r5, r1
 800c31e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c320:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c324:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        u64z[0] = (u64z[0] >> 4);
 800c328:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800c32c:	f04f 0000 	mov.w	r0, #0
 800c330:	f04f 0100 	mov.w	r1, #0
 800c334:	0910      	lsrs	r0, r2, #4
 800c336:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800c33a:	0919      	lsrs	r1, r3, #4
 800c33c:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
        u64z[0] ^= (uint64_t) last4[rem] << 48;
 800c340:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c344:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 800c348:	4b72      	ldr	r3, [pc, #456]	; (800c514 <gcm_mult_smalltable+0x41c>)
 800c34a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c34e:	b29b      	uxth	r3, r3
 800c350:	2200      	movs	r2, #0
 800c352:	623b      	str	r3, [r7, #32]
 800c354:	627a      	str	r2, [r7, #36]	; 0x24
 800c356:	f04f 0200 	mov.w	r2, #0
 800c35a:	f04f 0300 	mov.w	r3, #0
 800c35e:	6a3c      	ldr	r4, [r7, #32]
 800c360:	0423      	lsls	r3, r4, #16
 800c362:	2200      	movs	r2, #0
 800c364:	ea80 0402 	eor.w	r4, r0, r2
 800c368:	61bc      	str	r4, [r7, #24]
 800c36a:	404b      	eors	r3, r1
 800c36c:	61fb      	str	r3, [r7, #28]
 800c36e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c372:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        mbedtls_xor_no_simd(u8z, u8z, (uint8_t *) H[lo], 16);
 800c376:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800c37a:	011b      	lsls	r3, r3, #4
 800c37c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c37e:	441a      	add	r2, r3
 800c380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c384:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c38c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c390:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c394:	2310      	movs	r3, #16
 800c396:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    size_t i = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (; (i + 4) <= n; i += 4) {
 800c3a0:	e02e      	b.n	800c400 <gcm_mult_smalltable+0x308>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800c3a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c3a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c3b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3b4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c3b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    return r;
 800c3b8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c3ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c3be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c3c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c3cc:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c3ce:	66bb      	str	r3, [r7, #104]	; 0x68
    return r;
 800c3d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3d2:	404b      	eors	r3, r1
 800c3d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        mbedtls_put_unaligned_uint32(r + i, x);
 800c3d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c3dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3e0:	4413      	add	r3, r2
 800c3e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c3e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c3ea:	667b      	str	r3, [r7, #100]	; 0x64
 800c3ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    memcpy(p, &x, sizeof(x));
 800c3ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3f2:	601a      	str	r2, [r3, #0]
}
 800c3f4:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800c3f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3fa:	3304      	adds	r3, #4
 800c3fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c404:	3304      	adds	r3, #4
 800c406:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d2c9      	bcs.n	800c3a2 <gcm_mult_smalltable+0x2aa>
    for (; i < n; i++) {
 800c40e:	e019      	b.n	800c444 <gcm_mult_smalltable+0x34c>
        r[i] = a[i] ^ b[i];
 800c410:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c418:	4413      	add	r3, r2
 800c41a:	7818      	ldrb	r0, [r3, #0]
 800c41c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c424:	4413      	add	r3, r2
 800c426:	7819      	ldrb	r1, [r3, #0]
 800c428:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c42c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c430:	441a      	add	r2, r3
 800c432:	ea80 0301 	eor.w	r3, r0, r1
 800c436:	b2db      	uxtb	r3, r3
 800c438:	7013      	strb	r3, [r2, #0]
    for (; i < n; i++) {
 800c43a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c43e:	3301      	adds	r3, #1
 800c440:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c444:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d8df      	bhi.n	800c410 <gcm_mult_smalltable+0x318>
}
 800c450:	bf00      	nop

        rem = (unsigned char) u64z[1] & 0xf;
 800c452:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c456:	b2d3      	uxtb	r3, r2
 800c458:	f003 030f 	and.w	r3, r3, #15
 800c45c:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
        u64z[1] = (u64z[0] << 60) | (u64z[1] >> 4);
 800c460:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800c464:	f04f 0400 	mov.w	r4, #0
 800c468:	f04f 0500 	mov.w	r5, #0
 800c46c:	0715      	lsls	r5, r2, #28
 800c46e:	2400      	movs	r4, #0
 800c470:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c474:	f04f 0000 	mov.w	r0, #0
 800c478:	f04f 0100 	mov.w	r1, #0
 800c47c:	0910      	lsrs	r0, r2, #4
 800c47e:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800c482:	0919      	lsrs	r1, r3, #4
 800c484:	ea44 0300 	orr.w	r3, r4, r0
 800c488:	613b      	str	r3, [r7, #16]
 800c48a:	ea45 0301 	orr.w	r3, r5, r1
 800c48e:	617b      	str	r3, [r7, #20]
 800c490:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c494:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        u64z[0] = (u64z[0] >> 4);
 800c498:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800c49c:	f04f 0000 	mov.w	r0, #0
 800c4a0:	f04f 0100 	mov.w	r1, #0
 800c4a4:	0910      	lsrs	r0, r2, #4
 800c4a6:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800c4aa:	0919      	lsrs	r1, r3, #4
 800c4ac:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
        u64z[0] ^= (uint64_t) last4[rem] << 48;
 800c4b0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c4b4:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 800c4b8:	4b16      	ldr	r3, [pc, #88]	; (800c514 <gcm_mult_smalltable+0x41c>)
 800c4ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	60bb      	str	r3, [r7, #8]
 800c4c4:	60fa      	str	r2, [r7, #12]
 800c4c6:	f04f 0200 	mov.w	r2, #0
 800c4ca:	f04f 0300 	mov.w	r3, #0
 800c4ce:	68bc      	ldr	r4, [r7, #8]
 800c4d0:	0423      	lsls	r3, r4, #16
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	ea80 0402 	eor.w	r4, r0, r2
 800c4d8:	603c      	str	r4, [r7, #0]
 800c4da:	404b      	eors	r3, r1
 800c4dc:	607b      	str	r3, [r7, #4]
 800c4de:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c4e2:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        mbedtls_xor_no_simd(u8z, u8z, (uint8_t *) H[hi], 16);
 800c4e6:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800c4ea:	011b      	lsls	r3, r3, #4
 800c4ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4ee:	441a      	add	r2, r3
 800c4f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c4f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c500:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800c504:	2310      	movs	r3, #16
 800c506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    size_t i = 0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    for (; (i + 4) <= n; i += 4) {
 800c510:	e031      	b.n	800c576 <gcm_mult_smalltable+0x47e>
 800c512:	bf00      	nop
 800c514:	0801ff14 	.word	0x0801ff14
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800c518:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c51c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c520:	4413      	add	r3, r2
 800c522:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c526:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c52a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c52c:	663b      	str	r3, [r7, #96]	; 0x60
    return r;
 800c52e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c530:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800c534:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c538:	4413      	add	r3, r2
 800c53a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c53e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c542:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c544:	65fb      	str	r3, [r7, #92]	; 0x5c
    return r;
 800c546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c548:	404b      	eors	r3, r1
 800c54a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        mbedtls_put_unaligned_uint32(r + i, x);
 800c54e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c552:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c556:	4413      	add	r3, r2
 800c558:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c55c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c560:	65bb      	str	r3, [r7, #88]	; 0x58
 800c562:	6dba      	ldr	r2, [r7, #88]	; 0x58
    memcpy(p, &x, sizeof(x));
 800c564:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c568:	601a      	str	r2, [r3, #0]
}
 800c56a:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800c56c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c570:	3304      	adds	r3, #4
 800c572:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c576:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c57a:	3304      	adds	r3, #4
 800c57c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c580:	429a      	cmp	r2, r3
 800c582:	d2c9      	bcs.n	800c518 <gcm_mult_smalltable+0x420>
    for (; i < n; i++) {
 800c584:	e019      	b.n	800c5ba <gcm_mult_smalltable+0x4c2>
        r[i] = a[i] ^ b[i];
 800c586:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c58a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c58e:	4413      	add	r3, r2
 800c590:	7818      	ldrb	r0, [r3, #0]
 800c592:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800c596:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c59a:	4413      	add	r3, r2
 800c59c:	7819      	ldrb	r1, [r3, #0]
 800c59e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c5a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c5a6:	441a      	add	r2, r3
 800c5a8:	ea80 0301 	eor.w	r3, r0, r1
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	7013      	strb	r3, [r2, #0]
    for (; i < n; i++) {
 800c5b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c5ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c5be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d8df      	bhi.n	800c586 <gcm_mult_smalltable+0x48e>
}
 800c5c6:	bf00      	nop
    for (i = 14; i >= 0; i--) {
 800c5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f6bf ae72 	bge.w	800c2c0 <gcm_mult_smalltable+0x1c8>
    }

    MBEDTLS_PUT_UINT64_BE(u64z[0], output, 0);
 800c5dc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800c5e0:	ba11      	rev	r1, r2
 800c5e2:	ba18      	rev	r0, r3
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5ea:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800c5ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    memcpy(p, &x, sizeof(x));
 800c5f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c5f6:	2208      	movs	r2, #8
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c5fe:	f010 fe7b 	bl	801d2f8 <memcpy>
}
 800c602:	bf00      	nop
    MBEDTLS_PUT_UINT64_BE(u64z[1], output, 8);
 800c604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c606:	f103 0108 	add.w	r1, r3, #8
 800c60a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c60e:	ba10      	rev	r0, r2
 800c610:	ba1c      	rev	r4, r3
 800c612:	4622      	mov	r2, r4
 800c614:	4603      	mov	r3, r0
 800c616:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800c61a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    memcpy(p, &x, sizeof(x));
 800c61e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c622:	2208      	movs	r2, #8
 800c624:	4619      	mov	r1, r3
 800c626:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800c62a:	f010 fe65 	bl	801d2f8 <memcpy>
}
 800c62e:	bf00      	nop
}
 800c630:	bf00      	nop
 800c632:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800c636:	46bd      	mov	sp, r7
 800c638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c63c <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult(mbedtls_gcm_context *ctx, const unsigned char x[16],
                     unsigned char output[16])
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]
    switch (ctx->acceleration) {
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d108      	bne.n	800c664 <gcm_mult+0x28>
        case MBEDTLS_GCM_ACC_LARGETABLE:
            gcm_mult_largetable(output, x, ctx->H);
            break;
#else
        case MBEDTLS_GCM_ACC_SMALLTABLE:
            gcm_mult_smalltable(output, x, ctx->H);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	3348      	adds	r3, #72	; 0x48
 800c656:	461a      	mov	r2, r3
 800c658:	68b9      	ldr	r1, [r7, #8]
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7ff fd4c 	bl	800c0f8 <gcm_mult_smalltable>
            break;
 800c660:	bf00      	nop
#endif
    }

    return;
 800c662:	bf00      	nop
 800c664:	bf00      	nop
}
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <gcm_incr>:
    return 0;
}

/* Increment the counter. */
static void gcm_incr(unsigned char y[16])
{
 800c66c:	b480      	push	{r7}
 800c66e:	b089      	sub	sp, #36	; 0x24
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
    uint32_t x = MBEDTLS_GET_UINT32_BE(y, 12);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	330c      	adds	r3, #12
 800c678:	61bb      	str	r3, [r7, #24]
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c67e:	60fb      	str	r3, [r7, #12]
    return r;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	ba1b      	rev	r3, r3
 800c684:	61fb      	str	r3, [r7, #28]
    x++;
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	3301      	adds	r3, #1
 800c68a:	61fb      	str	r3, [r7, #28]
    MBEDTLS_PUT_UINT32_BE(x, y, 12);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f103 020c 	add.w	r2, r3, #12
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	ba1b      	rev	r3, r3
 800c696:	617a      	str	r2, [r7, #20]
 800c698:	613b      	str	r3, [r7, #16]
 800c69a:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	601a      	str	r2, [r3, #0]
}
 800c6a0:	bf00      	nop
}
 800c6a2:	bf00      	nop
 800c6a4:	3724      	adds	r7, #36	; 0x24
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <gcm_mask>:
static int gcm_mask(mbedtls_gcm_context *ctx,
                    unsigned char ectr[16],
                    size_t offset, size_t use_len,
                    const unsigned char *input,
                    unsigned char *output)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b0ac      	sub	sp, #176	; 0xb0
 800c6b2:	af02      	add	r7, sp, #8
 800c6b4:	60f8      	str	r0, [r7, #12]
 800c6b6:	60b9      	str	r1, [r7, #8]
 800c6b8:	607a      	str	r2, [r7, #4]
 800c6ba:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800c6bc:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800c6c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

#if defined(MBEDTLS_BLOCK_CIPHER_C)
    ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, ctx->y, ectr);
#else
    size_t olen = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	637b      	str	r3, [r7, #52]	; 0x34
    ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16, ectr, &olen);
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800c6d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	2210      	movs	r2, #16
 800c6da:	f7fb fc7f 	bl	8007fdc <mbedtls_cipher_update>
 800c6de:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
#endif
    if (ret != 0) {
 800c6e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d006      	beq.n	800c6f8 <gcm_mask+0x4a>
        mbedtls_platform_zeroize(ectr, 16);
 800c6ea:	2110      	movs	r1, #16
 800c6ec:	68b8      	ldr	r0, [r7, #8]
 800c6ee:	f002 f91d 	bl	800e92c <mbedtls_platform_zeroize>
        return ret;
 800c6f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c6f6:	e113      	b.n	800c920 <gcm_mask+0x272>
    }

    if (ctx->mode == MBEDTLS_GCM_DECRYPT) {
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d16f      	bne.n	800c7e2 <gcm_mask+0x134>
        mbedtls_xor(ctx->buf + offset, ctx->buf + offset, input, use_len);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	441a      	add	r2, r3
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	440b      	add	r3, r1
 800c716:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800c71a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c71e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c722:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    size_t i = 0;
 800c72c:	2300      	movs	r3, #0
 800c72e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    for (; (i + 4) <= n; i += 4) {
 800c732:	e02e      	b.n	800c792 <gcm_mask+0xe4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800c734:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c738:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c73c:	4413      	add	r3, r2
 800c73e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c746:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c748:	61bb      	str	r3, [r7, #24]
    return r;
 800c74a:	69ba      	ldr	r2, [r7, #24]
 800c74c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800c750:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c754:	440b      	add	r3, r1
 800c756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c75a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c75e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c760:	617b      	str	r3, [r7, #20]
    return r;
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	4053      	eors	r3, r2
 800c766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        mbedtls_put_unaligned_uint32(r + i, x);
 800c76a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c76e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c772:	4413      	add	r3, r2
 800c774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c77c:	613b      	str	r3, [r7, #16]
 800c77e:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 800c780:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c784:	601a      	str	r2, [r3, #0]
}
 800c786:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800c788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c78c:	3304      	adds	r3, #4
 800c78e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c792:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c796:	3304      	adds	r3, #4
 800c798:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d2c9      	bcs.n	800c734 <gcm_mask+0x86>
    for (; i < n; i++) {
 800c7a0:	e018      	b.n	800c7d4 <gcm_mask+0x126>
        r[i] = a[i] ^ b[i];
 800c7a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c7a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c7aa:	4413      	add	r3, r2
 800c7ac:	7819      	ldrb	r1, [r3, #0]
 800c7ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c7b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c7b6:	4413      	add	r3, r2
 800c7b8:	781a      	ldrb	r2, [r3, #0]
 800c7ba:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800c7be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c7c2:	4403      	add	r3, r0
 800c7c4:	404a      	eors	r2, r1
 800c7c6:	b2d2      	uxtb	r2, r2
 800c7c8:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800c7ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c7d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c7d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d8e0      	bhi.n	800c7a2 <gcm_mask+0xf4>
}
 800c7e0:	bf00      	nop
    }
    mbedtls_xor(output, ectr + offset, input, use_len);
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	4413      	add	r3, r2
 800c7e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c7ec:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c7ee:	67bb      	str	r3, [r7, #120]	; 0x78
 800c7f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c7f4:	677b      	str	r3, [r7, #116]	; 0x74
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	673b      	str	r3, [r7, #112]	; 0x70
    size_t i = 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (; (i + 4) <= n; i += 4) {
 800c7fe:	e01e      	b.n	800c83e <gcm_mask+0x190>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800c800:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c804:	4413      	add	r3, r2
 800c806:	66bb      	str	r3, [r7, #104]	; 0x68
 800c808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c80a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c80c:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 800c80e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c810:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c814:	440b      	add	r3, r1
 800c816:	667b      	str	r3, [r7, #100]	; 0x64
 800c818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c81a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c81c:	623b      	str	r3, [r7, #32]
    return r;
 800c81e:	6a3b      	ldr	r3, [r7, #32]
 800c820:	4053      	eors	r3, r2
 800c822:	663b      	str	r3, [r7, #96]	; 0x60
        mbedtls_put_unaligned_uint32(r + i, x);
 800c824:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c828:	4413      	add	r3, r2
 800c82a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c82c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c82e:	61fb      	str	r3, [r7, #28]
 800c830:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 800c832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c834:	601a      	str	r2, [r3, #0]
}
 800c836:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800c838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c83a:	3304      	adds	r3, #4
 800c83c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c83e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c840:	3304      	adds	r3, #4
 800c842:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c844:	429a      	cmp	r2, r3
 800c846:	d2db      	bcs.n	800c800 <gcm_mask+0x152>
    for (; i < n; i++) {
 800c848:	e010      	b.n	800c86c <gcm_mask+0x1be>
        r[i] = a[i] ^ b[i];
 800c84a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c84c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c84e:	4413      	add	r3, r2
 800c850:	7819      	ldrb	r1, [r3, #0]
 800c852:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c856:	4413      	add	r3, r2
 800c858:	781a      	ldrb	r2, [r3, #0]
 800c85a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800c85c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c85e:	4403      	add	r3, r0
 800c860:	404a      	eors	r2, r1
 800c862:	b2d2      	uxtb	r2, r2
 800c864:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800c866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c868:	3301      	adds	r3, #1
 800c86a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c86c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c86e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c870:	429a      	cmp	r2, r3
 800c872:	d8ea      	bhi.n	800c84a <gcm_mask+0x19c>
}
 800c874:	bf00      	nop
    if (ctx->mode == MBEDTLS_GCM_ENCRYPT) {
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d14e      	bne.n	800c91e <gcm_mask+0x270>
        mbedtls_xor(ctx->buf + offset, ctx->buf + offset, output, use_len);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	441a      	add	r2, r3
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	440b      	add	r3, r1
 800c894:	65ba      	str	r2, [r7, #88]	; 0x58
 800c896:	657b      	str	r3, [r7, #84]	; 0x54
 800c898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c89c:	653b      	str	r3, [r7, #80]	; 0x50
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t i = 0;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	64bb      	str	r3, [r7, #72]	; 0x48
    for (; (i + 4) <= n; i += 4) {
 800c8a6:	e01e      	b.n	800c8e6 <gcm_mask+0x238>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800c8a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c8aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8ac:	4413      	add	r3, r2
 800c8ae:	647b      	str	r3, [r7, #68]	; 0x44
 800c8b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8b2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c8b4:	633b      	str	r3, [r7, #48]	; 0x30
    return r;
 800c8b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8bc:	440b      	add	r3, r1
 800c8be:	643b      	str	r3, [r7, #64]	; 0x40
 800c8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8c2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 800c8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c8:	4053      	eors	r3, r2
 800c8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        mbedtls_put_unaligned_uint32(r + i, x);
 800c8cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8d0:	4413      	add	r3, r2
 800c8d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 800c8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8dc:	601a      	str	r2, [r3, #0]
}
 800c8de:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800c8e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d2db      	bcs.n	800c8a8 <gcm_mask+0x1fa>
    for (; i < n; i++) {
 800c8f0:	e010      	b.n	800c914 <gcm_mask+0x266>
        r[i] = a[i] ^ b[i];
 800c8f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c8f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8f6:	4413      	add	r3, r2
 800c8f8:	7819      	ldrb	r1, [r3, #0]
 800c8fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8fe:	4413      	add	r3, r2
 800c900:	781a      	ldrb	r2, [r3, #0]
 800c902:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c906:	4403      	add	r3, r0
 800c908:	404a      	eors	r2, r1
 800c90a:	b2d2      	uxtb	r2, r2
 800c90c:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800c90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c910:	3301      	adds	r3, #1
 800c912:	64bb      	str	r3, [r7, #72]	; 0x48
 800c914:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c918:	429a      	cmp	r2, r3
 800c91a:	d8ea      	bhi.n	800c8f2 <gcm_mask+0x244>
}
 800c91c:	bf00      	nop
    }

    return 0;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	37a8      	adds	r7, #168	; 0xa8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <mbedtls_gcm_update>:

int mbedtls_gcm_update(mbedtls_gcm_context *ctx,
                       const unsigned char *input, size_t input_length,
                       unsigned char *output, size_t output_size,
                       size_t *output_length)
{
 800c928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c92c:	b09c      	sub	sp, #112	; 0x70
 800c92e:	af02      	add	r7, sp, #8
 800c930:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c932:	63b9      	str	r1, [r7, #56]	; 0x38
 800c934:	637a      	str	r2, [r7, #52]	; 0x34
 800c936:	633b      	str	r3, [r7, #48]	; 0x30
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800c938:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800c93c:	65bb      	str	r3, [r7, #88]	; 0x58
    const unsigned char *p = input;
 800c93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c940:	667b      	str	r3, [r7, #100]	; 0x64
    unsigned char *out_p = output;
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	663b      	str	r3, [r7, #96]	; 0x60
    size_t offset;
    unsigned char ectr[16] = { 0 };
 800c946:	2300      	movs	r3, #0
 800c948:	647b      	str	r3, [r7, #68]	; 0x44
 800c94a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c94e:	2300      	movs	r3, #0
 800c950:	6013      	str	r3, [r2, #0]
 800c952:	6053      	str	r3, [r2, #4]
 800c954:	6093      	str	r3, [r2, #8]

    if (output_size < input_length) {
 800c956:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d202      	bcs.n	800c966 <mbedtls_gcm_update+0x3e>
        return MBEDTLS_ERR_GCM_BUFFER_TOO_SMALL;
 800c960:	f06f 0315 	mvn.w	r3, #21
 800c964:	e113      	b.n	800cb8e <mbedtls_gcm_update+0x266>
    }
    *output_length = input_length;
 800c966:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c96c:	6013      	str	r3, [r2, #0]

    /* Exit early if input_length==0 so that we don't do any pointer arithmetic
     * on a potentially null pointer.
     * Returning early also means that the last partial block of AD remains
     * untouched for mbedtls_gcm_finish */
    if (input_length == 0) {
 800c96e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c970:	2b00      	cmp	r3, #0
 800c972:	d101      	bne.n	800c978 <mbedtls_gcm_update+0x50>
        return 0;
 800c974:	2300      	movs	r3, #0
 800c976:	e10a      	b.n	800cb8e <mbedtls_gcm_update+0x266>
    }

    if (output > input && (size_t) (output - input) < input_length) {
 800c978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d909      	bls.n	800c994 <mbedtls_gcm_update+0x6c>
 800c980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	461a      	mov	r2, r3
 800c988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d902      	bls.n	800c994 <mbedtls_gcm_update+0x6c>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800c98e:	f06f 0313 	mvn.w	r3, #19
 800c992:	e0fc      	b.n	800cb8e <mbedtls_gcm_update+0x266>
    }

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if (ctx->len + input_length < ctx->len ||
 800c994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c996:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800c99a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c99c:	2000      	movs	r0, #0
 800c99e:	62b9      	str	r1, [r7, #40]	; 0x28
 800c9a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c9a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9a4:	1854      	adds	r4, r2, r1
 800c9a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9a8:	eb43 0101 	adc.w	r1, r3, r1
 800c9ac:	460d      	mov	r5, r1
 800c9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9b0:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800c9b4:	4294      	cmp	r4, r2
 800c9b6:	eb75 0303 	sbcs.w	r3, r5, r3
 800c9ba:	d313      	bcc.n	800c9e4 <mbedtls_gcm_update+0xbc>
        (uint64_t) ctx->len + input_length > 0xFFFFFFFE0ull) {
 800c9bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9be:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800c9c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	6239      	str	r1, [r7, #32]
 800c9c8:	6278      	str	r0, [r7, #36]	; 0x24
 800c9ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	eb12 0801 	adds.w	r8, r2, r1
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	eb43 0901 	adc.w	r9, r3, r1
    if (ctx->len + input_length < ctx->len ||
 800c9da:	f118 0f1f 	cmn.w	r8, #31
 800c9de:	f179 030f 	sbcs.w	r3, r9, #15
 800c9e2:	d302      	bcc.n	800c9ea <mbedtls_gcm_update+0xc2>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800c9e4:	f06f 0313 	mvn.w	r3, #19
 800c9e8:	e0d1      	b.n	800cb8e <mbedtls_gcm_update+0x266>
    }

    if (ctx->len == 0 && ctx->add_len % 16 != 0) {
 800c9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ec:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	d113      	bne.n	800ca1c <mbedtls_gcm_update+0xf4>
 800c9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f6:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800c9fa:	f002 0a0f 	and.w	sl, r2, #15
 800c9fe:	f04f 0b00 	mov.w	fp, #0
 800ca02:	ea5a 030b 	orrs.w	r3, sl, fp
 800ca06:	d009      	beq.n	800ca1c <mbedtls_gcm_update+0xf4>
        gcm_mult(ctx, ctx->buf, ctx->buf);
 800ca08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0a:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800ca0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca10:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ca14:	461a      	mov	r2, r3
 800ca16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ca18:	f7ff fe10 	bl	800c63c <gcm_mult>
    }

    offset = ctx->len % 16;
 800ca1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca1e:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800ca22:	4613      	mov	r3, r2
 800ca24:	f003 030f 	and.w	r3, r3, #15
 800ca28:	657b      	str	r3, [r7, #84]	; 0x54
    if (offset != 0) {
 800ca2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d04a      	beq.n	800cac6 <mbedtls_gcm_update+0x19e>
        size_t use_len = 16 - offset;
 800ca30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca32:	f1c3 0310 	rsb	r3, r3, #16
 800ca36:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (use_len > input_length) {
 800ca38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d901      	bls.n	800ca44 <mbedtls_gcm_update+0x11c>
            use_len = input_length;
 800ca40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca42:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        if ((ret = gcm_mask(ctx, ectr, offset, use_len, p, out_p)) != 0) {
 800ca44:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800ca48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca4a:	9301      	str	r3, [sp, #4]
 800ca4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ca56:	f7ff fe2a 	bl	800c6ae <gcm_mask>
 800ca5a:	65b8      	str	r0, [r7, #88]	; 0x58
 800ca5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d001      	beq.n	800ca66 <mbedtls_gcm_update+0x13e>
            return ret;
 800ca62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca64:	e093      	b.n	800cb8e <mbedtls_gcm_update+0x266>
        }

        if (offset + use_len == 16) {
 800ca66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca6a:	4413      	add	r3, r2
 800ca6c:	2b10      	cmp	r3, #16
 800ca6e:	d109      	bne.n	800ca84 <mbedtls_gcm_update+0x15c>
            gcm_mult(ctx, ctx->buf, ctx->buf);
 800ca70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca72:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800ca76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca78:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ca80:	f7ff fddc 	bl	800c63c <gcm_mult>
        }

        ctx->len += use_len;
 800ca84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca86:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800ca8a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	61b9      	str	r1, [r7, #24]
 800ca90:	61f8      	str	r0, [r7, #28]
 800ca92:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800ca96:	4621      	mov	r1, r4
 800ca98:	1851      	adds	r1, r2, r1
 800ca9a:	6139      	str	r1, [r7, #16]
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	eb43 0101 	adc.w	r1, r3, r1
 800caa2:	6179      	str	r1, [r7, #20]
 800caa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800caaa:	e9c3 1252 	strd	r1, r2, [r3, #328]	; 0x148
        input_length -= use_len;
 800caae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	637b      	str	r3, [r7, #52]	; 0x34
        p += use_len;
 800cab6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caba:	4413      	add	r3, r2
 800cabc:	667b      	str	r3, [r7, #100]	; 0x64
        out_p += use_len;
 800cabe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cac2:	4413      	add	r3, r2
 800cac4:	663b      	str	r3, [r7, #96]	; 0x60
    }

    ctx->len += input_length;
 800cac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cac8:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800cacc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cace:	2000      	movs	r0, #0
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cad8:	4621      	mov	r1, r4
 800cada:	1851      	adds	r1, r2, r1
 800cadc:	6039      	str	r1, [r7, #0]
 800cade:	4629      	mov	r1, r5
 800cae0:	eb43 0101 	adc.w	r1, r3, r1
 800cae4:	6079      	str	r1, [r7, #4]
 800cae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cae8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800caec:	e9c3 1252 	strd	r1, r2, [r3, #328]	; 0x148

    while (input_length >= 16) {
 800caf0:	e029      	b.n	800cb46 <mbedtls_gcm_update+0x21e>
        gcm_incr(ctx->y);
 800caf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7ff fdb7 	bl	800c66c <gcm_incr>
        if ((ret = gcm_mask(ctx, ectr, 0, 16, p, out_p)) != 0) {
 800cafe:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800cb02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb04:	9301      	str	r3, [sp, #4]
 800cb06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	2310      	movs	r3, #16
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cb10:	f7ff fdcd 	bl	800c6ae <gcm_mask>
 800cb14:	65b8      	str	r0, [r7, #88]	; 0x58
 800cb16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d001      	beq.n	800cb20 <mbedtls_gcm_update+0x1f8>
            return ret;
 800cb1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb1e:	e036      	b.n	800cb8e <mbedtls_gcm_update+0x266>
        }

        gcm_mult(ctx, ctx->buf, ctx->buf);
 800cb20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb22:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800cb26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb28:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cb30:	f7ff fd84 	bl	800c63c <gcm_mult>

        input_length -= 16;
 800cb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb36:	3b10      	subs	r3, #16
 800cb38:	637b      	str	r3, [r7, #52]	; 0x34
        p += 16;
 800cb3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb3c:	3310      	adds	r3, #16
 800cb3e:	667b      	str	r3, [r7, #100]	; 0x64
        out_p += 16;
 800cb40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb42:	3310      	adds	r3, #16
 800cb44:	663b      	str	r3, [r7, #96]	; 0x60
    while (input_length >= 16) {
 800cb46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb48:	2b0f      	cmp	r3, #15
 800cb4a:	d8d2      	bhi.n	800caf2 <mbedtls_gcm_update+0x1ca>
    }

    if (input_length > 0) {
 800cb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d016      	beq.n	800cb80 <mbedtls_gcm_update+0x258>
        gcm_incr(ctx->y);
 800cb52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7ff fd87 	bl	800c66c <gcm_incr>
        if ((ret = gcm_mask(ctx, ectr, 0, input_length, p, out_p)) != 0) {
 800cb5e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800cb62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb64:	9301      	str	r3, [sp, #4]
 800cb66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cb70:	f7ff fd9d 	bl	800c6ae <gcm_mask>
 800cb74:	65b8      	str	r0, [r7, #88]	; 0x58
 800cb76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <mbedtls_gcm_update+0x258>
            return ret;
 800cb7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb7e:	e006      	b.n	800cb8e <mbedtls_gcm_update+0x266>
        }
    }

    mbedtls_platform_zeroize(ectr, sizeof(ectr));
 800cb80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cb84:	2110      	movs	r1, #16
 800cb86:	4618      	mov	r0, r3
 800cb88:	f001 fed0 	bl	800e92c <mbedtls_platform_zeroize>
    return 0;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3768      	adds	r7, #104	; 0x68
 800cb92:	46bd      	mov	sp, r7
 800cb94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cb98 <mbedtls_gcm_free>:

    return 0;
}

void mbedtls_gcm_free(mbedtls_gcm_context *ctx)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d009      	beq.n	800cbba <mbedtls_gcm_free+0x22>
        return;
    }
#if defined(MBEDTLS_BLOCK_CIPHER_C)
    mbedtls_block_cipher_free(&ctx->block_cipher_ctx);
#else
    mbedtls_cipher_free(&ctx->cipher_ctx);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fb f944 	bl	8007e36 <mbedtls_cipher_free>
#endif
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_gcm_context));
 800cbae:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f001 feba 	bl	800e92c <mbedtls_platform_zeroize>
 800cbb8:	e000      	b.n	800cbbc <mbedtls_gcm_free+0x24>
        return;
 800cbba:	bf00      	nop
}
 800cbbc:	3708      	adds	r7, #8
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
	...

0800cbc4 <mbedtls_md_info_from_type>:
    MD_INFO(MBEDTLS_MD_SHA3_512, 64, 72)
};
#endif

const mbedtls_md_info_t *mbedtls_md_info_from_type(mbedtls_md_type_t md_type)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	4603      	mov	r3, r0
 800cbcc:	71fb      	strb	r3, [r7, #7]
    switch (md_type) {
 800cbce:	79fb      	ldrb	r3, [r7, #7]
 800cbd0:	3b03      	subs	r3, #3
 800cbd2:	2b10      	cmp	r3, #16
 800cbd4:	d83a      	bhi.n	800cc4c <mbedtls_md_info_from_type+0x88>
 800cbd6:	a201      	add	r2, pc, #4	; (adr r2, 800cbdc <mbedtls_md_info_from_type+0x18>)
 800cbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbdc:	0800cc21 	.word	0x0800cc21
 800cbe0:	0800cc25 	.word	0x0800cc25
 800cbe4:	0800cc29 	.word	0x0800cc29
 800cbe8:	0800cc4d 	.word	0x0800cc4d
 800cbec:	0800cc4d 	.word	0x0800cc4d
 800cbf0:	0800cc2d 	.word	0x0800cc2d
 800cbf4:	0800cc31 	.word	0x0800cc31
 800cbf8:	0800cc35 	.word	0x0800cc35
 800cbfc:	0800cc39 	.word	0x0800cc39
 800cc00:	0800cc4d 	.word	0x0800cc4d
 800cc04:	0800cc4d 	.word	0x0800cc4d
 800cc08:	0800cc4d 	.word	0x0800cc4d
 800cc0c:	0800cc4d 	.word	0x0800cc4d
 800cc10:	0800cc3d 	.word	0x0800cc3d
 800cc14:	0800cc41 	.word	0x0800cc41
 800cc18:	0800cc45 	.word	0x0800cc45
 800cc1c:	0800cc49 	.word	0x0800cc49
#if defined(MBEDTLS_MD_CAN_MD5)
        case MBEDTLS_MD_MD5:
            return &mbedtls_md5_info;
 800cc20:	4b0e      	ldr	r3, [pc, #56]	; (800cc5c <mbedtls_md_info_from_type+0x98>)
 800cc22:	e014      	b.n	800cc4e <mbedtls_md_info_from_type+0x8a>
#endif
#if defined(MBEDTLS_MD_CAN_RIPEMD160)
        case MBEDTLS_MD_RIPEMD160:
            return &mbedtls_ripemd160_info;
 800cc24:	4b0e      	ldr	r3, [pc, #56]	; (800cc60 <mbedtls_md_info_from_type+0x9c>)
 800cc26:	e012      	b.n	800cc4e <mbedtls_md_info_from_type+0x8a>
#endif
#if defined(MBEDTLS_MD_CAN_SHA1)
        case MBEDTLS_MD_SHA1:
            return &mbedtls_sha1_info;
 800cc28:	4b0e      	ldr	r3, [pc, #56]	; (800cc64 <mbedtls_md_info_from_type+0xa0>)
 800cc2a:	e010      	b.n	800cc4e <mbedtls_md_info_from_type+0x8a>
#endif
#if defined(MBEDTLS_MD_CAN_SHA224)
        case MBEDTLS_MD_SHA224:
            return &mbedtls_sha224_info;
 800cc2c:	4b0e      	ldr	r3, [pc, #56]	; (800cc68 <mbedtls_md_info_from_type+0xa4>)
 800cc2e:	e00e      	b.n	800cc4e <mbedtls_md_info_from_type+0x8a>
#endif
#if defined(MBEDTLS_MD_CAN_SHA256)
        case MBEDTLS_MD_SHA256:
            return &mbedtls_sha256_info;
 800cc30:	4b0e      	ldr	r3, [pc, #56]	; (800cc6c <mbedtls_md_info_from_type+0xa8>)
 800cc32:	e00c      	b.n	800cc4e <mbedtls_md_info_from_type+0x8a>
#endif
#if defined(MBEDTLS_MD_CAN_SHA384)
        case MBEDTLS_MD_SHA384:
            return &mbedtls_sha384_info;
 800cc34:	4b0e      	ldr	r3, [pc, #56]	; (800cc70 <mbedtls_md_info_from_type+0xac>)
 800cc36:	e00a      	b.n	800cc4e <mbedtls_md_info_from_type+0x8a>
#endif
#if defined(MBEDTLS_MD_CAN_SHA512)
        case MBEDTLS_MD_SHA512:
            return &mbedtls_sha512_info;
 800cc38:	4b0e      	ldr	r3, [pc, #56]	; (800cc74 <mbedtls_md_info_from_type+0xb0>)
 800cc3a:	e008      	b.n	800cc4e <mbedtls_md_info_from_type+0x8a>
#endif
#if defined(MBEDTLS_MD_CAN_SHA3_224)
        case MBEDTLS_MD_SHA3_224:
            return &mbedtls_sha3_224_info;
 800cc3c:	4b0e      	ldr	r3, [pc, #56]	; (800cc78 <mbedtls_md_info_from_type+0xb4>)
 800cc3e:	e006      	b.n	800cc4e <mbedtls_md_info_from_type+0x8a>
#endif
#if defined(MBEDTLS_MD_CAN_SHA3_256)
        case MBEDTLS_MD_SHA3_256:
            return &mbedtls_sha3_256_info;
 800cc40:	4b0e      	ldr	r3, [pc, #56]	; (800cc7c <mbedtls_md_info_from_type+0xb8>)
 800cc42:	e004      	b.n	800cc4e <mbedtls_md_info_from_type+0x8a>
#endif
#if defined(MBEDTLS_MD_CAN_SHA3_384)
        case MBEDTLS_MD_SHA3_384:
            return &mbedtls_sha3_384_info;
 800cc44:	4b0e      	ldr	r3, [pc, #56]	; (800cc80 <mbedtls_md_info_from_type+0xbc>)
 800cc46:	e002      	b.n	800cc4e <mbedtls_md_info_from_type+0x8a>
#endif
#if defined(MBEDTLS_MD_CAN_SHA3_512)
        case MBEDTLS_MD_SHA3_512:
            return &mbedtls_sha3_512_info;
 800cc48:	4b0e      	ldr	r3, [pc, #56]	; (800cc84 <mbedtls_md_info_from_type+0xc0>)
 800cc4a:	e000      	b.n	800cc4e <mbedtls_md_info_from_type+0x8a>
#endif
        default:
            return NULL;
 800cc4c:	2300      	movs	r3, #0
    }
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	370c      	adds	r7, #12
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	0801ff34 	.word	0x0801ff34
 800cc60:	0801ff38 	.word	0x0801ff38
 800cc64:	0801ff3c 	.word	0x0801ff3c
 800cc68:	0801ff40 	.word	0x0801ff40
 800cc6c:	0801ff44 	.word	0x0801ff44
 800cc70:	0801ff48 	.word	0x0801ff48
 800cc74:	0801ff4c 	.word	0x0801ff4c
 800cc78:	0801ff50 	.word	0x0801ff50
 800cc7c:	0801ff54 	.word	0x0801ff54
 800cc80:	0801ff58 	.word	0x0801ff58
 800cc84:	0801ff5c 	.word	0x0801ff5c

0800cc88 <mbedtls_md_init>:
    return psa_can_do_hash(alg);
}
#endif /* MBEDTLS_MD_SOME_PSA */

void mbedtls_md_init(mbedtls_md_context_t *ctx)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
    /* Note: this sets engine (if present) to MBEDTLS_MD_ENGINE_LEGACY */
    memset(ctx, 0, sizeof(mbedtls_md_context_t));
 800cc90:	220c      	movs	r2, #12
 800cc92:	2100      	movs	r1, #0
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f010 fa91 	bl	801d1bc <memset>
}
 800cc9a:	bf00      	nop
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
	...

0800cca4 <mbedtls_md_free>:

void mbedtls_md_free(mbedtls_md_context_t *ctx)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
    if (ctx == NULL || ctx->md_info == NULL) {
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d07b      	beq.n	800cdaa <mbedtls_md_free+0x106>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d077      	beq.n	800cdaa <mbedtls_md_free+0x106>
        return;
    }

    if (ctx->md_ctx != NULL) {
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d060      	beq.n	800cd84 <mbedtls_md_free+0xe0>
#if defined(MBEDTLS_MD_SOME_PSA)
        if (ctx->engine == MBEDTLS_MD_ENGINE_PSA) {
            psa_hash_abort(ctx->md_ctx);
        } else
#endif
        switch (ctx->md_info->type) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	3b03      	subs	r3, #3
 800ccca:	2b10      	cmp	r3, #16
 800cccc:	d854      	bhi.n	800cd78 <mbedtls_md_free+0xd4>
 800ccce:	a201      	add	r2, pc, #4	; (adr r2, 800ccd4 <mbedtls_md_free+0x30>)
 800ccd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd4:	0800cd19 	.word	0x0800cd19
 800ccd8:	0800cd25 	.word	0x0800cd25
 800ccdc:	0800cd31 	.word	0x0800cd31
 800cce0:	0800cd79 	.word	0x0800cd79
 800cce4:	0800cd79 	.word	0x0800cd79
 800cce8:	0800cd3d 	.word	0x0800cd3d
 800ccec:	0800cd49 	.word	0x0800cd49
 800ccf0:	0800cd55 	.word	0x0800cd55
 800ccf4:	0800cd61 	.word	0x0800cd61
 800ccf8:	0800cd79 	.word	0x0800cd79
 800ccfc:	0800cd79 	.word	0x0800cd79
 800cd00:	0800cd79 	.word	0x0800cd79
 800cd04:	0800cd79 	.word	0x0800cd79
 800cd08:	0800cd6d 	.word	0x0800cd6d
 800cd0c:	0800cd6d 	.word	0x0800cd6d
 800cd10:	0800cd6d 	.word	0x0800cd6d
 800cd14:	0800cd6d 	.word	0x0800cd6d
#if defined(MBEDTLS_MD5_C)
            case MBEDTLS_MD_MD5:
                mbedtls_md5_free(ctx->md_ctx);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 fb9e 	bl	800d45e <mbedtls_md5_free>
                break;
 800cd22:	e02a      	b.n	800cd7a <mbedtls_md_free+0xd6>
#endif
#if defined(MBEDTLS_RIPEMD160_C)
            case MBEDTLS_MD_RIPEMD160:
                mbedtls_ripemd160_free(ctx->md_ctx);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f002 fad3 	bl	800f2d4 <mbedtls_ripemd160_free>
                break;
 800cd2e:	e024      	b.n	800cd7a <mbedtls_md_free+0xd6>
#endif
#if defined(MBEDTLS_SHA1_C)
            case MBEDTLS_MD_SHA1:
                mbedtls_sha1_free(ctx->md_ctx);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	4618      	mov	r0, r3
 800cd36:	f004 fc8b 	bl	8011650 <mbedtls_sha1_free>
                break;
 800cd3a:	e01e      	b.n	800cd7a <mbedtls_md_free+0xd6>
#endif
#if defined(MBEDTLS_SHA224_C)
            case MBEDTLS_MD_SHA224:
                mbedtls_sha256_free(ctx->md_ctx);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	4618      	mov	r0, r3
 800cd42:	f006 fc09 	bl	8013558 <mbedtls_sha256_free>
                break;
 800cd46:	e018      	b.n	800cd7a <mbedtls_md_free+0xd6>
#endif
#if defined(MBEDTLS_SHA256_C)
            case MBEDTLS_MD_SHA256:
                mbedtls_sha256_free(ctx->md_ctx);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f006 fc03 	bl	8013558 <mbedtls_sha256_free>
                break;
 800cd52:	e012      	b.n	800cd7a <mbedtls_md_free+0xd6>
#endif
#if defined(MBEDTLS_SHA384_C)
            case MBEDTLS_MD_SHA384:
                mbedtls_sha512_free(ctx->md_ctx);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f00a fd91 	bl	8017880 <mbedtls_sha512_free>
                break;
 800cd5e:	e00c      	b.n	800cd7a <mbedtls_md_free+0xd6>
#endif
#if defined(MBEDTLS_SHA512_C)
            case MBEDTLS_MD_SHA512:
                mbedtls_sha512_free(ctx->md_ctx);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	4618      	mov	r0, r3
 800cd66:	f00a fd8b 	bl	8017880 <mbedtls_sha512_free>
                break;
 800cd6a:	e006      	b.n	800cd7a <mbedtls_md_free+0xd6>
#if defined(MBEDTLS_SHA3_C)
            case MBEDTLS_MD_SHA3_224:
            case MBEDTLS_MD_SHA3_256:
            case MBEDTLS_MD_SHA3_384:
            case MBEDTLS_MD_SHA3_512:
                mbedtls_sha3_free(ctx->md_ctx);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f00a fac0 	bl	80172f6 <mbedtls_sha3_free>
                break;
 800cd76:	e000      	b.n	800cd7a <mbedtls_md_free+0xd6>
#endif
            default:
                /* Shouldn't happen */
                break;
 800cd78:	bf00      	nop
        }
        mbedtls_free(ctx->md_ctx);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f00f fb52 	bl	801c428 <free>
    }

#if defined(MBEDTLS_MD_C)
    if (ctx->hmac_ctx != NULL) {
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d009      	beq.n	800cda0 <mbedtls_md_free+0xfc>
        mbedtls_zeroize_and_free(ctx->hmac_ctx,
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	689a      	ldr	r2, [r3, #8]
                                 2 * ctx->md_info->block_size);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	789b      	ldrb	r3, [r3, #2]
 800cd96:	005b      	lsls	r3, r3, #1
        mbedtls_zeroize_and_free(ctx->hmac_ctx,
 800cd98:	4619      	mov	r1, r3
 800cd9a:	4610      	mov	r0, r2
 800cd9c:	f001 fdea 	bl	800e974 <mbedtls_zeroize_and_free>
    }
#endif

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_md_context_t));
 800cda0:	210c      	movs	r1, #12
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f001 fdc2 	bl	800e92c <mbedtls_platform_zeroize>
 800cda8:	e000      	b.n	800cdac <mbedtls_md_free+0x108>
        return;
 800cdaa:	bf00      	nop
}
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop

0800cdb4 <mbedtls_md_setup>:
        mbedtls_##type##_init(ctx->md_ctx);                           \
    }                                                                   \
    while (0)

int mbedtls_md_setup(mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	607a      	str	r2, [r7, #4]
#if defined(MBEDTLS_MD_C)
    if (ctx == NULL) {
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <mbedtls_md_setup+0x16>
        return MBEDTLS_ERR_MD_BAD_INPUT_DATA;
 800cdc6:	4b7c      	ldr	r3, [pc, #496]	; (800cfb8 <mbedtls_md_setup+0x204>)
 800cdc8:	e0f1      	b.n	800cfae <mbedtls_md_setup+0x1fa>
    }
#endif
    if (md_info == NULL) {
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d101      	bne.n	800cdd4 <mbedtls_md_setup+0x20>
        return MBEDTLS_ERR_MD_BAD_INPUT_DATA;
 800cdd0:	4b79      	ldr	r3, [pc, #484]	; (800cfb8 <mbedtls_md_setup+0x204>)
 800cdd2:	e0ec      	b.n	800cfae <mbedtls_md_setup+0x1fa>
    }

    ctx->md_info = md_info;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	601a      	str	r2, [r3, #0]
    ctx->md_ctx = NULL;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2200      	movs	r2, #0
 800cdde:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_MD_C)
    ctx->hmac_ctx = NULL;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2200      	movs	r2, #0
 800cde4:	609a      	str	r2, [r3, #8]
            return MBEDTLS_ERR_MD_ALLOC_FAILED;
        }
        ctx->engine = MBEDTLS_MD_ENGINE_PSA;
    } else
#endif
    switch (md_info->type) {
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	3b03      	subs	r3, #3
 800cdec:	2b10      	cmp	r3, #16
 800cdee:	f200 80c5 	bhi.w	800cf7c <mbedtls_md_setup+0x1c8>
 800cdf2:	a201      	add	r2, pc, #4	; (adr r2, 800cdf8 <mbedtls_md_setup+0x44>)
 800cdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf8:	0800ce3d 	.word	0x0800ce3d
 800cdfc:	0800ce65 	.word	0x0800ce65
 800ce00:	0800ce8d 	.word	0x0800ce8d
 800ce04:	0800cf7d 	.word	0x0800cf7d
 800ce08:	0800cf7d 	.word	0x0800cf7d
 800ce0c:	0800ceb5 	.word	0x0800ceb5
 800ce10:	0800cedd 	.word	0x0800cedd
 800ce14:	0800cf05 	.word	0x0800cf05
 800ce18:	0800cf2d 	.word	0x0800cf2d
 800ce1c:	0800cf7d 	.word	0x0800cf7d
 800ce20:	0800cf7d 	.word	0x0800cf7d
 800ce24:	0800cf7d 	.word	0x0800cf7d
 800ce28:	0800cf7d 	.word	0x0800cf7d
 800ce2c:	0800cf55 	.word	0x0800cf55
 800ce30:	0800cf55 	.word	0x0800cf55
 800ce34:	0800cf55 	.word	0x0800cf55
 800ce38:	0800cf55 	.word	0x0800cf55
#if defined(MBEDTLS_MD5_C)
        case MBEDTLS_MD_MD5:
            ALLOC(md5);
 800ce3c:	2158      	movs	r1, #88	; 0x58
 800ce3e:	2001      	movs	r0, #1
 800ce40:	f00f facc 	bl	801c3dc <calloc>
 800ce44:	4603      	mov	r3, r0
 800ce46:	461a      	mov	r2, r3
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	605a      	str	r2, [r3, #4]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d101      	bne.n	800ce58 <mbedtls_md_setup+0xa4>
 800ce54:	4b59      	ldr	r3, [pc, #356]	; (800cfbc <mbedtls_md_setup+0x208>)
 800ce56:	e0aa      	b.n	800cfae <mbedtls_md_setup+0x1fa>
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f000 faf1 	bl	800d444 <mbedtls_md5_init>
            break;
 800ce62:	e08d      	b.n	800cf80 <mbedtls_md_setup+0x1cc>
#endif
#if defined(MBEDTLS_RIPEMD160_C)
        case MBEDTLS_MD_RIPEMD160:
            ALLOC(ripemd160);
 800ce64:	215c      	movs	r1, #92	; 0x5c
 800ce66:	2001      	movs	r0, #1
 800ce68:	f00f fab8 	bl	801c3dc <calloc>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	461a      	mov	r2, r3
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	605a      	str	r2, [r3, #4]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d101      	bne.n	800ce80 <mbedtls_md_setup+0xcc>
 800ce7c:	4b4f      	ldr	r3, [pc, #316]	; (800cfbc <mbedtls_md_setup+0x208>)
 800ce7e:	e096      	b.n	800cfae <mbedtls_md_setup+0x1fa>
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	4618      	mov	r0, r3
 800ce86:	f002 fa18 	bl	800f2ba <mbedtls_ripemd160_init>
            break;
 800ce8a:	e079      	b.n	800cf80 <mbedtls_md_setup+0x1cc>
#endif
#if defined(MBEDTLS_SHA1_C)
        case MBEDTLS_MD_SHA1:
            ALLOC(sha1);
 800ce8c:	215c      	movs	r1, #92	; 0x5c
 800ce8e:	2001      	movs	r0, #1
 800ce90:	f00f faa4 	bl	801c3dc <calloc>
 800ce94:	4603      	mov	r3, r0
 800ce96:	461a      	mov	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	605a      	str	r2, [r3, #4]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d101      	bne.n	800cea8 <mbedtls_md_setup+0xf4>
 800cea4:	4b45      	ldr	r3, [pc, #276]	; (800cfbc <mbedtls_md_setup+0x208>)
 800cea6:	e082      	b.n	800cfae <mbedtls_md_setup+0x1fa>
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	4618      	mov	r0, r3
 800ceae:	f004 fbc2 	bl	8011636 <mbedtls_sha1_init>
            break;
 800ceb2:	e065      	b.n	800cf80 <mbedtls_md_setup+0x1cc>
#endif
#if defined(MBEDTLS_SHA224_C)
        case MBEDTLS_MD_SHA224:
            ALLOC(sha256);
 800ceb4:	216c      	movs	r1, #108	; 0x6c
 800ceb6:	2001      	movs	r0, #1
 800ceb8:	f00f fa90 	bl	801c3dc <calloc>
 800cebc:	4603      	mov	r3, r0
 800cebe:	461a      	mov	r2, r3
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	605a      	str	r2, [r3, #4]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d101      	bne.n	800ced0 <mbedtls_md_setup+0x11c>
 800cecc:	4b3b      	ldr	r3, [pc, #236]	; (800cfbc <mbedtls_md_setup+0x208>)
 800cece:	e06e      	b.n	800cfae <mbedtls_md_setup+0x1fa>
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f006 fb32 	bl	801353e <mbedtls_sha256_init>
            break;
 800ceda:	e051      	b.n	800cf80 <mbedtls_md_setup+0x1cc>
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA256:
            ALLOC(sha256);
 800cedc:	216c      	movs	r1, #108	; 0x6c
 800cede:	2001      	movs	r0, #1
 800cee0:	f00f fa7c 	bl	801c3dc <calloc>
 800cee4:	4603      	mov	r3, r0
 800cee6:	461a      	mov	r2, r3
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	605a      	str	r2, [r3, #4]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d101      	bne.n	800cef8 <mbedtls_md_setup+0x144>
 800cef4:	4b31      	ldr	r3, [pc, #196]	; (800cfbc <mbedtls_md_setup+0x208>)
 800cef6:	e05a      	b.n	800cfae <mbedtls_md_setup+0x1fa>
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f006 fb1e 	bl	801353e <mbedtls_sha256_init>
            break;
 800cf02:	e03d      	b.n	800cf80 <mbedtls_md_setup+0x1cc>
#endif
#if defined(MBEDTLS_SHA384_C)
        case MBEDTLS_MD_SHA384:
            ALLOC(sha512);
 800cf04:	21d8      	movs	r1, #216	; 0xd8
 800cf06:	2001      	movs	r0, #1
 800cf08:	f00f fa68 	bl	801c3dc <calloc>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	461a      	mov	r2, r3
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	605a      	str	r2, [r3, #4]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d101      	bne.n	800cf20 <mbedtls_md_setup+0x16c>
 800cf1c:	4b27      	ldr	r3, [pc, #156]	; (800cfbc <mbedtls_md_setup+0x208>)
 800cf1e:	e046      	b.n	800cfae <mbedtls_md_setup+0x1fa>
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f00a fc9e 	bl	8017866 <mbedtls_sha512_init>
            break;
 800cf2a:	e029      	b.n	800cf80 <mbedtls_md_setup+0x1cc>
#endif
#if defined(MBEDTLS_SHA512_C)
        case MBEDTLS_MD_SHA512:
            ALLOC(sha512);
 800cf2c:	21d8      	movs	r1, #216	; 0xd8
 800cf2e:	2001      	movs	r0, #1
 800cf30:	f00f fa54 	bl	801c3dc <calloc>
 800cf34:	4603      	mov	r3, r0
 800cf36:	461a      	mov	r2, r3
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	605a      	str	r2, [r3, #4]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d101      	bne.n	800cf48 <mbedtls_md_setup+0x194>
 800cf44:	4b1d      	ldr	r3, [pc, #116]	; (800cfbc <mbedtls_md_setup+0x208>)
 800cf46:	e032      	b.n	800cfae <mbedtls_md_setup+0x1fa>
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f00a fc8a 	bl	8017866 <mbedtls_sha512_init>
            break;
 800cf52:	e015      	b.n	800cf80 <mbedtls_md_setup+0x1cc>
#if defined(MBEDTLS_SHA3_C)
        case MBEDTLS_MD_SHA3_224:
        case MBEDTLS_MD_SHA3_256:
        case MBEDTLS_MD_SHA3_384:
        case MBEDTLS_MD_SHA3_512:
            ALLOC(sha3);
 800cf54:	21d0      	movs	r1, #208	; 0xd0
 800cf56:	2001      	movs	r0, #1
 800cf58:	f00f fa40 	bl	801c3dc <calloc>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	461a      	mov	r2, r3
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	605a      	str	r2, [r3, #4]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d101      	bne.n	800cf70 <mbedtls_md_setup+0x1bc>
 800cf6c:	4b13      	ldr	r3, [pc, #76]	; (800cfbc <mbedtls_md_setup+0x208>)
 800cf6e:	e01e      	b.n	800cfae <mbedtls_md_setup+0x1fa>
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f00a f9b1 	bl	80172dc <mbedtls_sha3_init>
            break;
 800cf7a:	e001      	b.n	800cf80 <mbedtls_md_setup+0x1cc>
#endif
        default:
            return MBEDTLS_ERR_MD_BAD_INPUT_DATA;
 800cf7c:	4b0e      	ldr	r3, [pc, #56]	; (800cfb8 <mbedtls_md_setup+0x204>)
 800cf7e:	e016      	b.n	800cfae <mbedtls_md_setup+0x1fa>
    }

#if defined(MBEDTLS_MD_C)
    if (hmac != 0) {
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d012      	beq.n	800cfac <mbedtls_md_setup+0x1f8>
        ctx->hmac_ctx = mbedtls_calloc(2, md_info->block_size);
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	789b      	ldrb	r3, [r3, #2]
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	2002      	movs	r0, #2
 800cf8e:	f00f fa25 	bl	801c3dc <calloc>
 800cf92:	4603      	mov	r3, r0
 800cf94:	461a      	mov	r2, r3
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	609a      	str	r2, [r3, #8]
        if (ctx->hmac_ctx == NULL) {
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d104      	bne.n	800cfac <mbedtls_md_setup+0x1f8>
            mbedtls_md_free(ctx);
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f7ff fe7e 	bl	800cca4 <mbedtls_md_free>
            return MBEDTLS_ERR_MD_ALLOC_FAILED;
 800cfa8:	4b04      	ldr	r3, [pc, #16]	; (800cfbc <mbedtls_md_setup+0x208>)
 800cfaa:	e000      	b.n	800cfae <mbedtls_md_setup+0x1fa>
        }
    }
#endif

    return 0;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	ffffaf00 	.word	0xffffaf00
 800cfbc:	ffffae80 	.word	0xffffae80

0800cfc0 <mbedtls_md_starts>:
#undef ALLOC

int mbedtls_md_starts(mbedtls_md_context_t *ctx)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
#if defined(MBEDTLS_MD_C)
    if (ctx == NULL || ctx->md_info == NULL) {
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d003      	beq.n	800cfd6 <mbedtls_md_starts+0x16>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d101      	bne.n	800cfda <mbedtls_md_starts+0x1a>
        return MBEDTLS_ERR_MD_BAD_INPUT_DATA;
 800cfd6:	4b43      	ldr	r3, [pc, #268]	; (800d0e4 <mbedtls_md_starts+0x124>)
 800cfd8:	e080      	b.n	800d0dc <mbedtls_md_starts+0x11c>
        psa_status_t status = psa_hash_setup(ctx->md_ctx, alg);
        return mbedtls_md_error_from_psa(status);
    }
#endif

    switch (ctx->md_info->type) {
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	3b03      	subs	r3, #3
 800cfe2:	2b10      	cmp	r3, #16
 800cfe4:	d879      	bhi.n	800d0da <mbedtls_md_starts+0x11a>
 800cfe6:	a201      	add	r2, pc, #4	; (adr r2, 800cfec <mbedtls_md_starts+0x2c>)
 800cfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfec:	0800d031 	.word	0x0800d031
 800cff0:	0800d03f 	.word	0x0800d03f
 800cff4:	0800d04d 	.word	0x0800d04d
 800cff8:	0800d0db 	.word	0x0800d0db
 800cffc:	0800d0db 	.word	0x0800d0db
 800d000:	0800d05b 	.word	0x0800d05b
 800d004:	0800d06b 	.word	0x0800d06b
 800d008:	0800d07b 	.word	0x0800d07b
 800d00c:	0800d08b 	.word	0x0800d08b
 800d010:	0800d0db 	.word	0x0800d0db
 800d014:	0800d0db 	.word	0x0800d0db
 800d018:	0800d0db 	.word	0x0800d0db
 800d01c:	0800d0db 	.word	0x0800d0db
 800d020:	0800d09b 	.word	0x0800d09b
 800d024:	0800d0ab 	.word	0x0800d0ab
 800d028:	0800d0bb 	.word	0x0800d0bb
 800d02c:	0800d0cb 	.word	0x0800d0cb
#if defined(MBEDTLS_MD5_C)
        case MBEDTLS_MD_MD5:
            return mbedtls_md5_starts(ctx->md_ctx);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	4618      	mov	r0, r3
 800d036:	f000 fa23 	bl	800d480 <mbedtls_md5_starts>
 800d03a:	4603      	mov	r3, r0
 800d03c:	e04e      	b.n	800d0dc <mbedtls_md_starts+0x11c>
#endif
#if defined(MBEDTLS_RIPEMD160_C)
        case MBEDTLS_MD_RIPEMD160:
            return mbedtls_ripemd160_starts(ctx->md_ctx);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	4618      	mov	r0, r3
 800d044:	f002 f956 	bl	800f2f4 <mbedtls_ripemd160_starts>
 800d048:	4603      	mov	r3, r0
 800d04a:	e047      	b.n	800d0dc <mbedtls_md_starts+0x11c>
#endif
#if defined(MBEDTLS_SHA1_C)
        case MBEDTLS_MD_SHA1:
            return mbedtls_sha1_starts(ctx->md_ctx);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	4618      	mov	r0, r3
 800d052:	f004 fb0d 	bl	8011670 <mbedtls_sha1_starts>
 800d056:	4603      	mov	r3, r0
 800d058:	e040      	b.n	800d0dc <mbedtls_md_starts+0x11c>
#endif
#if defined(MBEDTLS_SHA224_C)
        case MBEDTLS_MD_SHA224:
            return mbedtls_sha256_starts(ctx->md_ctx, 1);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	2101      	movs	r1, #1
 800d060:	4618      	mov	r0, r3
 800d062:	f006 fa89 	bl	8013578 <mbedtls_sha256_starts>
 800d066:	4603      	mov	r3, r0
 800d068:	e038      	b.n	800d0dc <mbedtls_md_starts+0x11c>
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA256:
            return mbedtls_sha256_starts(ctx->md_ctx, 0);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	2100      	movs	r1, #0
 800d070:	4618      	mov	r0, r3
 800d072:	f006 fa81 	bl	8013578 <mbedtls_sha256_starts>
 800d076:	4603      	mov	r3, r0
 800d078:	e030      	b.n	800d0dc <mbedtls_md_starts+0x11c>
#endif
#if defined(MBEDTLS_SHA384_C)
        case MBEDTLS_MD_SHA384:
            return mbedtls_sha512_starts(ctx->md_ctx, 1);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	2101      	movs	r1, #1
 800d080:	4618      	mov	r0, r3
 800d082:	f00a fc0d 	bl	80178a0 <mbedtls_sha512_starts>
 800d086:	4603      	mov	r3, r0
 800d088:	e028      	b.n	800d0dc <mbedtls_md_starts+0x11c>
#endif
#if defined(MBEDTLS_SHA512_C)
        case MBEDTLS_MD_SHA512:
            return mbedtls_sha512_starts(ctx->md_ctx, 0);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	2100      	movs	r1, #0
 800d090:	4618      	mov	r0, r3
 800d092:	f00a fc05 	bl	80178a0 <mbedtls_sha512_starts>
 800d096:	4603      	mov	r3, r0
 800d098:	e020      	b.n	800d0dc <mbedtls_md_starts+0x11c>
#endif
#if defined(MBEDTLS_SHA3_C)
        case MBEDTLS_MD_SHA3_224:
            return mbedtls_sha3_starts(ctx->md_ctx, MBEDTLS_SHA3_224);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	2101      	movs	r1, #1
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f00a f939 	bl	8017318 <mbedtls_sha3_starts>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	e018      	b.n	800d0dc <mbedtls_md_starts+0x11c>
        case MBEDTLS_MD_SHA3_256:
            return mbedtls_sha3_starts(ctx->md_ctx, MBEDTLS_SHA3_256);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	2102      	movs	r1, #2
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f00a f931 	bl	8017318 <mbedtls_sha3_starts>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	e010      	b.n	800d0dc <mbedtls_md_starts+0x11c>
        case MBEDTLS_MD_SHA3_384:
            return mbedtls_sha3_starts(ctx->md_ctx, MBEDTLS_SHA3_384);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	2103      	movs	r1, #3
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f00a f929 	bl	8017318 <mbedtls_sha3_starts>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	e008      	b.n	800d0dc <mbedtls_md_starts+0x11c>
        case MBEDTLS_MD_SHA3_512:
            return mbedtls_sha3_starts(ctx->md_ctx, MBEDTLS_SHA3_512);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	2104      	movs	r1, #4
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f00a f921 	bl	8017318 <mbedtls_sha3_starts>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	e000      	b.n	800d0dc <mbedtls_md_starts+0x11c>
#endif
        default:
            return MBEDTLS_ERR_MD_BAD_INPUT_DATA;
 800d0da:	4b02      	ldr	r3, [pc, #8]	; (800d0e4 <mbedtls_md_starts+0x124>)
    }
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3708      	adds	r7, #8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	ffffaf00 	.word	0xffffaf00

0800d0e8 <mbedtls_md_update>:

int mbedtls_md_update(mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
#if defined(MBEDTLS_MD_C)
    if (ctx == NULL || ctx->md_info == NULL) {
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d003      	beq.n	800d102 <mbedtls_md_update+0x1a>
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d101      	bne.n	800d106 <mbedtls_md_update+0x1e>
        return MBEDTLS_ERR_MD_BAD_INPUT_DATA;
 800d102:	4b3d      	ldr	r3, [pc, #244]	; (800d1f8 <mbedtls_md_update+0x110>)
 800d104:	e073      	b.n	800d1ee <mbedtls_md_update+0x106>
        psa_status_t status = psa_hash_update(ctx->md_ctx, input, ilen);
        return mbedtls_md_error_from_psa(status);
    }
#endif

    switch (ctx->md_info->type) {
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	3b03      	subs	r3, #3
 800d10e:	2b10      	cmp	r3, #16
 800d110:	d86c      	bhi.n	800d1ec <mbedtls_md_update+0x104>
 800d112:	a201      	add	r2, pc, #4	; (adr r2, 800d118 <mbedtls_md_update+0x30>)
 800d114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d118:	0800d15d 	.word	0x0800d15d
 800d11c:	0800d16f 	.word	0x0800d16f
 800d120:	0800d181 	.word	0x0800d181
 800d124:	0800d1ed 	.word	0x0800d1ed
 800d128:	0800d1ed 	.word	0x0800d1ed
 800d12c:	0800d193 	.word	0x0800d193
 800d130:	0800d1a5 	.word	0x0800d1a5
 800d134:	0800d1b7 	.word	0x0800d1b7
 800d138:	0800d1c9 	.word	0x0800d1c9
 800d13c:	0800d1ed 	.word	0x0800d1ed
 800d140:	0800d1ed 	.word	0x0800d1ed
 800d144:	0800d1ed 	.word	0x0800d1ed
 800d148:	0800d1ed 	.word	0x0800d1ed
 800d14c:	0800d1db 	.word	0x0800d1db
 800d150:	0800d1db 	.word	0x0800d1db
 800d154:	0800d1db 	.word	0x0800d1db
 800d158:	0800d1db 	.word	0x0800d1db
#if defined(MBEDTLS_MD5_C)
        case MBEDTLS_MD_MD5:
            return mbedtls_md5_update(ctx->md_ctx, input, ilen);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	68b9      	ldr	r1, [r7, #8]
 800d164:	4618      	mov	r0, r3
 800d166:	f001 fa0b 	bl	800e580 <mbedtls_md5_update>
 800d16a:	4603      	mov	r3, r0
 800d16c:	e03f      	b.n	800d1ee <mbedtls_md_update+0x106>
#endif
#if defined(MBEDTLS_RIPEMD160_C)
        case MBEDTLS_MD_RIPEMD160:
            return mbedtls_ripemd160_update(ctx->md_ctx, input, ilen);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	68b9      	ldr	r1, [r7, #8]
 800d176:	4618      	mov	r0, r3
 800d178:	f004 f91c 	bl	80113b4 <mbedtls_ripemd160_update>
 800d17c:	4603      	mov	r3, r0
 800d17e:	e036      	b.n	800d1ee <mbedtls_md_update+0x106>
#endif
#if defined(MBEDTLS_SHA1_C)
        case MBEDTLS_MD_SHA1:
            return mbedtls_sha1_update(ctx->md_ctx, input, ilen);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	68b9      	ldr	r1, [r7, #8]
 800d188:	4618      	mov	r0, r3
 800d18a:	f006 f871 	bl	8013270 <mbedtls_sha1_update>
 800d18e:	4603      	mov	r3, r0
 800d190:	e02d      	b.n	800d1ee <mbedtls_md_update+0x106>
#endif
#if defined(MBEDTLS_SHA224_C)
        case MBEDTLS_MD_SHA224:
            return mbedtls_sha256_update(ctx->md_ctx, input, ilen);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	68b9      	ldr	r1, [r7, #8]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f008 fa35 	bl	801560a <mbedtls_sha256_update>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	e024      	b.n	800d1ee <mbedtls_md_update+0x106>
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA256:
            return mbedtls_sha256_update(ctx->md_ctx, input, ilen);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	68b9      	ldr	r1, [r7, #8]
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f008 fa2c 	bl	801560a <mbedtls_sha256_update>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	e01b      	b.n	800d1ee <mbedtls_md_update+0x106>
#endif
#if defined(MBEDTLS_SHA384_C)
        case MBEDTLS_MD_SHA384:
            return mbedtls_sha512_update(ctx->md_ctx, input, ilen);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	68b9      	ldr	r1, [r7, #8]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f00c fc1b 	bl	80199fa <mbedtls_sha512_update>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	e012      	b.n	800d1ee <mbedtls_md_update+0x106>
#endif
#if defined(MBEDTLS_SHA512_C)
        case MBEDTLS_MD_SHA512:
            return mbedtls_sha512_update(ctx->md_ctx, input, ilen);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	68b9      	ldr	r1, [r7, #8]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f00c fc12 	bl	80199fa <mbedtls_sha512_update>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	e009      	b.n	800d1ee <mbedtls_md_update+0x106>
#if defined(MBEDTLS_SHA3_C)
        case MBEDTLS_MD_SHA3_224:
        case MBEDTLS_MD_SHA3_256:
        case MBEDTLS_MD_SHA3_384:
        case MBEDTLS_MD_SHA3_512:
            return mbedtls_sha3_update(ctx->md_ctx, input, ilen);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	68b9      	ldr	r1, [r7, #8]
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f00a f8e4 	bl	80173b0 <mbedtls_sha3_update>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	e000      	b.n	800d1ee <mbedtls_md_update+0x106>
#endif
        default:
            return MBEDTLS_ERR_MD_BAD_INPUT_DATA;
 800d1ec:	4b02      	ldr	r3, [pc, #8]	; (800d1f8 <mbedtls_md_update+0x110>)
    }
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	ffffaf00 	.word	0xffffaf00

0800d1fc <mbedtls_md_finish>:

int mbedtls_md_finish(mbedtls_md_context_t *ctx, unsigned char *output)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
#if defined(MBEDTLS_MD_C)
    if (ctx == NULL || ctx->md_info == NULL) {
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d003      	beq.n	800d214 <mbedtls_md_finish+0x18>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d101      	bne.n	800d218 <mbedtls_md_finish+0x1c>
        return MBEDTLS_ERR_MD_BAD_INPUT_DATA;
 800d214:	4b3a      	ldr	r3, [pc, #232]	; (800d300 <mbedtls_md_finish+0x104>)
 800d216:	e06f      	b.n	800d2f8 <mbedtls_md_finish+0xfc>
                                              output, size, &size);
        return mbedtls_md_error_from_psa(status);
    }
#endif

    switch (ctx->md_info->type) {
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	3b03      	subs	r3, #3
 800d220:	2b10      	cmp	r3, #16
 800d222:	d868      	bhi.n	800d2f6 <mbedtls_md_finish+0xfa>
 800d224:	a201      	add	r2, pc, #4	; (adr r2, 800d22c <mbedtls_md_finish+0x30>)
 800d226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d22a:	bf00      	nop
 800d22c:	0800d271 	.word	0x0800d271
 800d230:	0800d281 	.word	0x0800d281
 800d234:	0800d291 	.word	0x0800d291
 800d238:	0800d2f7 	.word	0x0800d2f7
 800d23c:	0800d2f7 	.word	0x0800d2f7
 800d240:	0800d2a1 	.word	0x0800d2a1
 800d244:	0800d2b1 	.word	0x0800d2b1
 800d248:	0800d2c1 	.word	0x0800d2c1
 800d24c:	0800d2d1 	.word	0x0800d2d1
 800d250:	0800d2f7 	.word	0x0800d2f7
 800d254:	0800d2f7 	.word	0x0800d2f7
 800d258:	0800d2f7 	.word	0x0800d2f7
 800d25c:	0800d2f7 	.word	0x0800d2f7
 800d260:	0800d2e1 	.word	0x0800d2e1
 800d264:	0800d2e1 	.word	0x0800d2e1
 800d268:	0800d2e1 	.word	0x0800d2e1
 800d26c:	0800d2e1 	.word	0x0800d2e1
#if defined(MBEDTLS_MD5_C)
        case MBEDTLS_MD_MD5:
            return mbedtls_md5_finish(ctx->md_ctx, output);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	6839      	ldr	r1, [r7, #0]
 800d276:	4618      	mov	r0, r3
 800d278:	f001 f9fa 	bl	800e670 <mbedtls_md5_finish>
 800d27c:	4603      	mov	r3, r0
 800d27e:	e03b      	b.n	800d2f8 <mbedtls_md_finish+0xfc>
#endif
#if defined(MBEDTLS_RIPEMD160_C)
        case MBEDTLS_MD_RIPEMD160:
            return mbedtls_ripemd160_finish(ctx->md_ctx, output);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	6839      	ldr	r1, [r7, #0]
 800d286:	4618      	mov	r0, r3
 800d288:	f004 f90c 	bl	80114a4 <mbedtls_ripemd160_finish>
 800d28c:	4603      	mov	r3, r0
 800d28e:	e033      	b.n	800d2f8 <mbedtls_md_finish+0xfc>
#endif
#if defined(MBEDTLS_SHA1_C)
        case MBEDTLS_MD_SHA1:
            return mbedtls_sha1_finish(ctx->md_ctx, output);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	6839      	ldr	r1, [r7, #0]
 800d296:	4618      	mov	r0, r3
 800d298:	f006 f862 	bl	8013360 <mbedtls_sha1_finish>
 800d29c:	4603      	mov	r3, r0
 800d29e:	e02b      	b.n	800d2f8 <mbedtls_md_finish+0xfc>
#endif
#if defined(MBEDTLS_SHA224_C)
        case MBEDTLS_MD_SHA224:
            return mbedtls_sha256_finish(ctx->md_ctx, output);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	6839      	ldr	r1, [r7, #0]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f008 fa26 	bl	80156f8 <mbedtls_sha256_finish>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	e023      	b.n	800d2f8 <mbedtls_md_finish+0xfc>
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA256:
            return mbedtls_sha256_finish(ctx->md_ctx, output);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	6839      	ldr	r1, [r7, #0]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f008 fa1e 	bl	80156f8 <mbedtls_sha256_finish>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	e01b      	b.n	800d2f8 <mbedtls_md_finish+0xfc>
#endif
#if defined(MBEDTLS_SHA384_C)
        case MBEDTLS_MD_SHA384:
            return mbedtls_sha512_finish(ctx->md_ctx, output);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	6839      	ldr	r1, [r7, #0]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f00c fc29 	bl	8019b1e <mbedtls_sha512_finish>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	e013      	b.n	800d2f8 <mbedtls_md_finish+0xfc>
#endif
#if defined(MBEDTLS_SHA512_C)
        case MBEDTLS_MD_SHA512:
            return mbedtls_sha512_finish(ctx->md_ctx, output);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	6839      	ldr	r1, [r7, #0]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f00c fc21 	bl	8019b1e <mbedtls_sha512_finish>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	e00b      	b.n	800d2f8 <mbedtls_md_finish+0xfc>
#if defined(MBEDTLS_SHA3_C)
        case MBEDTLS_MD_SHA3_224:
        case MBEDTLS_MD_SHA3_256:
        case MBEDTLS_MD_SHA3_384:
        case MBEDTLS_MD_SHA3_512:
            return mbedtls_sha3_finish(ctx->md_ctx, output, ctx->md_info->size);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6858      	ldr	r0, [r3, #4]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	785b      	ldrb	r3, [r3, #1]
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	6839      	ldr	r1, [r7, #0]
 800d2ee:	f00a f994 	bl	801761a <mbedtls_sha3_finish>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	e000      	b.n	800d2f8 <mbedtls_md_finish+0xfc>
#endif
        default:
            return MBEDTLS_ERR_MD_BAD_INPUT_DATA;
 800d2f6:	4b02      	ldr	r3, [pc, #8]	; (800d300 <mbedtls_md_finish+0x104>)
    }
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	ffffaf00 	.word	0xffffaf00

0800d304 <mbedtls_md>:

int mbedtls_md(const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
               unsigned char *output)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af02      	add	r7, sp, #8
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]
    if (md_info == NULL) {
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d101      	bne.n	800d31c <mbedtls_md+0x18>
        return MBEDTLS_ERR_MD_BAD_INPUT_DATA;
 800d318:	4b49      	ldr	r3, [pc, #292]	; (800d440 <mbedtls_md+0x13c>)
 800d31a:	e08d      	b.n	800d438 <mbedtls_md+0x134>
                                               output, size, &size);
        return mbedtls_md_error_from_psa(status);
    }
#endif

    switch (md_info->type) {
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	3b03      	subs	r3, #3
 800d322:	2b10      	cmp	r3, #16
 800d324:	f200 8087 	bhi.w	800d436 <mbedtls_md+0x132>
 800d328:	a201      	add	r2, pc, #4	; (adr r2, 800d330 <mbedtls_md+0x2c>)
 800d32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d32e:	bf00      	nop
 800d330:	0800d375 	.word	0x0800d375
 800d334:	0800d383 	.word	0x0800d383
 800d338:	0800d391 	.word	0x0800d391
 800d33c:	0800d437 	.word	0x0800d437
 800d340:	0800d437 	.word	0x0800d437
 800d344:	0800d39f 	.word	0x0800d39f
 800d348:	0800d3af 	.word	0x0800d3af
 800d34c:	0800d3bf 	.word	0x0800d3bf
 800d350:	0800d3cf 	.word	0x0800d3cf
 800d354:	0800d437 	.word	0x0800d437
 800d358:	0800d437 	.word	0x0800d437
 800d35c:	0800d437 	.word	0x0800d437
 800d360:	0800d437 	.word	0x0800d437
 800d364:	0800d3df 	.word	0x0800d3df
 800d368:	0800d3f5 	.word	0x0800d3f5
 800d36c:	0800d40b 	.word	0x0800d40b
 800d370:	0800d421 	.word	0x0800d421
#if defined(MBEDTLS_MD5_C)
        case MBEDTLS_MD_MD5:
            return mbedtls_md5(input, ilen, output);
 800d374:	683a      	ldr	r2, [r7, #0]
 800d376:	6879      	ldr	r1, [r7, #4]
 800d378:	68b8      	ldr	r0, [r7, #8]
 800d37a:	f001 fa1b 	bl	800e7b4 <mbedtls_md5>
 800d37e:	4603      	mov	r3, r0
 800d380:	e05a      	b.n	800d438 <mbedtls_md+0x134>
#endif
#if defined(MBEDTLS_RIPEMD160_C)
        case MBEDTLS_MD_RIPEMD160:
            return mbedtls_ripemd160(input, ilen, output);
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	6879      	ldr	r1, [r7, #4]
 800d386:	68b8      	ldr	r0, [r7, #8]
 800d388:	f004 f91c 	bl	80115c4 <mbedtls_ripemd160>
 800d38c:	4603      	mov	r3, r0
 800d38e:	e053      	b.n	800d438 <mbedtls_md+0x134>
#endif
#if defined(MBEDTLS_SHA1_C)
        case MBEDTLS_MD_SHA1:
            return mbedtls_sha1(input, ilen, output);
 800d390:	683a      	ldr	r2, [r7, #0]
 800d392:	6879      	ldr	r1, [r7, #4]
 800d394:	68b8      	ldr	r0, [r7, #8]
 800d396:	f006 f899 	bl	80134cc <mbedtls_sha1>
 800d39a:	4603      	mov	r3, r0
 800d39c:	e04c      	b.n	800d438 <mbedtls_md+0x134>
#endif
#if defined(MBEDTLS_SHA224_C)
        case MBEDTLS_MD_SHA224:
            return mbedtls_sha256(input, ilen, output, 1);
 800d39e:	2301      	movs	r3, #1
 800d3a0:	683a      	ldr	r2, [r7, #0]
 800d3a2:	6879      	ldr	r1, [r7, #4]
 800d3a4:	68b8      	ldr	r0, [r7, #8]
 800d3a6:	f008 fa80 	bl	80158aa <mbedtls_sha256>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	e044      	b.n	800d438 <mbedtls_md+0x134>
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA256:
            return mbedtls_sha256(input, ilen, output, 0);
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	683a      	ldr	r2, [r7, #0]
 800d3b2:	6879      	ldr	r1, [r7, #4]
 800d3b4:	68b8      	ldr	r0, [r7, #8]
 800d3b6:	f008 fa78 	bl	80158aa <mbedtls_sha256>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	e03c      	b.n	800d438 <mbedtls_md+0x134>
#endif
#if defined(MBEDTLS_SHA384_C)
        case MBEDTLS_MD_SHA384:
            return mbedtls_sha512(input, ilen, output, 1);
 800d3be:	2301      	movs	r3, #1
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	6879      	ldr	r1, [r7, #4]
 800d3c4:	68b8      	ldr	r0, [r7, #8]
 800d3c6:	f00c fd22 	bl	8019e0e <mbedtls_sha512>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	e034      	b.n	800d438 <mbedtls_md+0x134>
#endif
#if defined(MBEDTLS_SHA512_C)
        case MBEDTLS_MD_SHA512:
            return mbedtls_sha512(input, ilen, output, 0);
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	683a      	ldr	r2, [r7, #0]
 800d3d2:	6879      	ldr	r1, [r7, #4]
 800d3d4:	68b8      	ldr	r0, [r7, #8]
 800d3d6:	f00c fd1a 	bl	8019e0e <mbedtls_sha512>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	e02c      	b.n	800d438 <mbedtls_md+0x134>
#endif
#if defined(MBEDTLS_SHA3_C)
        case MBEDTLS_MD_SHA3_224:
            return mbedtls_sha3(MBEDTLS_SHA3_224, input, ilen, output, md_info->size);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	785b      	ldrb	r3, [r3, #1]
 800d3e2:	9300      	str	r3, [sp, #0]
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	68b9      	ldr	r1, [r7, #8]
 800d3ea:	2001      	movs	r0, #1
 800d3ec:	f00a f9f4 	bl	80177d8 <mbedtls_sha3>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	e021      	b.n	800d438 <mbedtls_md+0x134>
        case MBEDTLS_MD_SHA3_256:
            return mbedtls_sha3(MBEDTLS_SHA3_256, input, ilen, output, md_info->size);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	785b      	ldrb	r3, [r3, #1]
 800d3f8:	9300      	str	r3, [sp, #0]
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	68b9      	ldr	r1, [r7, #8]
 800d400:	2002      	movs	r0, #2
 800d402:	f00a f9e9 	bl	80177d8 <mbedtls_sha3>
 800d406:	4603      	mov	r3, r0
 800d408:	e016      	b.n	800d438 <mbedtls_md+0x134>
        case MBEDTLS_MD_SHA3_384:
            return mbedtls_sha3(MBEDTLS_SHA3_384, input, ilen, output, md_info->size);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	785b      	ldrb	r3, [r3, #1]
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	68b9      	ldr	r1, [r7, #8]
 800d416:	2003      	movs	r0, #3
 800d418:	f00a f9de 	bl	80177d8 <mbedtls_sha3>
 800d41c:	4603      	mov	r3, r0
 800d41e:	e00b      	b.n	800d438 <mbedtls_md+0x134>
        case MBEDTLS_MD_SHA3_512:
            return mbedtls_sha3(MBEDTLS_SHA3_512, input, ilen, output, md_info->size);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	785b      	ldrb	r3, [r3, #1]
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	68b9      	ldr	r1, [r7, #8]
 800d42c:	2004      	movs	r0, #4
 800d42e:	f00a f9d3 	bl	80177d8 <mbedtls_sha3>
 800d432:	4603      	mov	r3, r0
 800d434:	e000      	b.n	800d438 <mbedtls_md+0x134>
#endif
        default:
            return MBEDTLS_ERR_MD_BAD_INPUT_DATA;
 800d436:	4b02      	ldr	r3, [pc, #8]	; (800d440 <mbedtls_md+0x13c>)
    }
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	ffffaf00 	.word	0xffffaf00

0800d444 <mbedtls_md5_init>:
#include "mbedtls/platform.h"

#if !defined(MBEDTLS_MD5_ALT)

void mbedtls_md5_init(mbedtls_md5_context *ctx)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_md5_context));
 800d44c:	2258      	movs	r2, #88	; 0x58
 800d44e:	2100      	movs	r1, #0
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f00f feb3 	bl	801d1bc <memset>
}
 800d456:	bf00      	nop
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <mbedtls_md5_free>:

void mbedtls_md5_free(mbedtls_md5_context *ctx)
{
 800d45e:	b580      	push	{r7, lr}
 800d460:	b082      	sub	sp, #8
 800d462:	af00      	add	r7, sp, #0
 800d464:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d004      	beq.n	800d476 <mbedtls_md5_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_md5_context));
 800d46c:	2158      	movs	r1, #88	; 0x58
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f001 fa5c 	bl	800e92c <mbedtls_platform_zeroize>
 800d474:	e000      	b.n	800d478 <mbedtls_md5_free+0x1a>
        return;
 800d476:	bf00      	nop
}
 800d478:	3708      	adds	r7, #8
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
	...

0800d480 <mbedtls_md5_starts>:

/*
 * MD5 context setup
 */
int mbedtls_md5_starts(mbedtls_md5_context *ctx)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2200      	movs	r2, #0
 800d492:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4a09      	ldr	r2, [pc, #36]	; (800d4bc <mbedtls_md5_starts+0x3c>)
 800d498:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4a08      	ldr	r2, [pc, #32]	; (800d4c0 <mbedtls_md5_starts+0x40>)
 800d49e:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	4a08      	ldr	r2, [pc, #32]	; (800d4c4 <mbedtls_md5_starts+0x44>)
 800d4a4:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4a07      	ldr	r2, [pc, #28]	; (800d4c8 <mbedtls_md5_starts+0x48>)
 800d4aa:	615a      	str	r2, [r3, #20]

    return 0;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	370c      	adds	r7, #12
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	67452301 	.word	0x67452301
 800d4c0:	efcdab89 	.word	0xefcdab89
 800d4c4:	98badcfe 	.word	0x98badcfe
 800d4c8:	10325476 	.word	0x10325476

0800d4cc <mbedtls_internal_md5_process>:

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process(mbedtls_md5_context *ctx,
                                 const unsigned char data[64])
{
 800d4cc:	b590      	push	{r4, r7, lr}
 800d4ce:	b0b7      	sub	sp, #220	; 0xdc
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d4dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d4e0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d4e2:	647b      	str	r3, [r7, #68]	; 0x44
    return r;
 800d4e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    struct {
        uint32_t X[16], A, B, C, D;
    } local;

    local.X[0] = MBEDTLS_GET_UINT32_LE(data,  0);
 800d4e6:	64bb      	str	r3, [r7, #72]	; 0x48
    local.X[1] = MBEDTLS_GET_UINT32_LE(data,  4);
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	3304      	adds	r3, #4
 800d4ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d4f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d4f4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d4f6:	643b      	str	r3, [r7, #64]	; 0x40
    return r;
 800d4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    local.X[2] = MBEDTLS_GET_UINT32_LE(data,  8);
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	3308      	adds	r3, #8
 800d500:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d508:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d50a:	63fb      	str	r3, [r7, #60]	; 0x3c
    return r;
 800d50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d50e:	653b      	str	r3, [r7, #80]	; 0x50
    local.X[3] = MBEDTLS_GET_UINT32_LE(data, 12);
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	330c      	adds	r3, #12
 800d514:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d518:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d51c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d51e:	63bb      	str	r3, [r7, #56]	; 0x38
    return r;
 800d520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d522:	657b      	str	r3, [r7, #84]	; 0x54
    local.X[4] = MBEDTLS_GET_UINT32_LE(data, 16);
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	3310      	adds	r3, #16
 800d528:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d52c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d530:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d532:	637b      	str	r3, [r7, #52]	; 0x34
    return r;
 800d534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d536:	65bb      	str	r3, [r7, #88]	; 0x58
    local.X[5] = MBEDTLS_GET_UINT32_LE(data, 20);
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	3314      	adds	r3, #20
 800d53c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d544:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d546:	633b      	str	r3, [r7, #48]	; 0x30
    return r;
 800d548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54a:	65fb      	str	r3, [r7, #92]	; 0x5c
    local.X[6] = MBEDTLS_GET_UINT32_LE(data, 24);
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	3318      	adds	r3, #24
 800d550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d554:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d558:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d55a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	663b      	str	r3, [r7, #96]	; 0x60
    local.X[7] = MBEDTLS_GET_UINT32_LE(data, 28);
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	331c      	adds	r3, #28
 800d564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d568:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d56c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d56e:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 800d570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d572:	667b      	str	r3, [r7, #100]	; 0x64
    local.X[8] = MBEDTLS_GET_UINT32_LE(data, 32);
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	3320      	adds	r3, #32
 800d578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d57c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d580:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d582:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 800d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d586:	66bb      	str	r3, [r7, #104]	; 0x68
    local.X[9] = MBEDTLS_GET_UINT32_LE(data, 36);
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	3324      	adds	r3, #36	; 0x24
 800d58c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d590:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d594:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d596:	623b      	str	r3, [r7, #32]
    return r;
 800d598:	6a3b      	ldr	r3, [r7, #32]
 800d59a:	66fb      	str	r3, [r7, #108]	; 0x6c
    local.X[10] = MBEDTLS_GET_UINT32_LE(data, 40);
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	3328      	adds	r3, #40	; 0x28
 800d5a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d5a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d5a8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d5aa:	61fb      	str	r3, [r7, #28]
    return r;
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	673b      	str	r3, [r7, #112]	; 0x70
    local.X[11] = MBEDTLS_GET_UINT32_LE(data, 44);
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	332c      	adds	r3, #44	; 0x2c
 800d5b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d5b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d5bc:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d5be:	61bb      	str	r3, [r7, #24]
    return r;
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	677b      	str	r3, [r7, #116]	; 0x74
    local.X[12] = MBEDTLS_GET_UINT32_LE(data, 48);
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	3330      	adds	r3, #48	; 0x30
 800d5c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d5cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d5d0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d5d2:	617b      	str	r3, [r7, #20]
    return r;
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	67bb      	str	r3, [r7, #120]	; 0x78
    local.X[13] = MBEDTLS_GET_UINT32_LE(data, 52);
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	3334      	adds	r3, #52	; 0x34
 800d5dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d5e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d5e4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d5e6:	613b      	str	r3, [r7, #16]
    return r;
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    local.X[14] = MBEDTLS_GET_UINT32_LE(data, 56);
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	3338      	adds	r3, #56	; 0x38
 800d5f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d5f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d5f8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d5fa:	60fb      	str	r3, [r7, #12]
    return r;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    local.X[15] = MBEDTLS_GET_UINT32_LE(data, 60);
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	333c      	adds	r3, #60	; 0x3c
 800d606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d60a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d60e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800d610:	60bb      	str	r3, [r7, #8]
    return r;
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    {                                                                   \
        (a) += F((b), (c), (d)) + local.X[(k)] + (t);                     \
        (a) = S((a), (s)) + (b);                                         \
    } while (0)

    local.A = ctx->state[0];
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	689b      	ldr	r3, [r3, #8]
 800d61c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    local.B = ctx->state[1];
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    local.C = ctx->state[2];
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    local.D = ctx->state[3];
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	695b      	ldr	r3, [r3, #20]
 800d634:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

#define F(x, y, z) ((z) ^ ((x) & ((y) ^ (z))))

    P(local.A, local.B, local.C, local.D,  0,  7, 0xD76AA478);
 800d638:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d63c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d640:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d644:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800d648:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d64c:	4063      	eors	r3, r4
 800d64e:	4003      	ands	r3, r0
 800d650:	4059      	eors	r1, r3
 800d652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d654:	440b      	add	r3, r1
 800d656:	441a      	add	r2, r3
 800d658:	4bef      	ldr	r3, [pc, #956]	; (800da18 <mbedtls_internal_md5_process+0x54c>)
 800d65a:	4413      	add	r3, r2
 800d65c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d664:	ea4f 6273 	mov.w	r2, r3, ror #25
 800d668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d66c:	4413      	add	r3, r2
 800d66e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756);
 800d672:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d676:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d67a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800d67e:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800d682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d686:	4063      	eors	r3, r4
 800d688:	4003      	ands	r3, r0
 800d68a:	4059      	eors	r1, r3
 800d68c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d68e:	440b      	add	r3, r1
 800d690:	441a      	add	r2, r3
 800d692:	4be2      	ldr	r3, [pc, #904]	; (800da1c <mbedtls_internal_md5_process+0x550>)
 800d694:	4413      	add	r3, r2
 800d696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d69a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d69e:	ea4f 5233 	mov.w	r2, r3, ror #20
 800d6a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6a6:	4413      	add	r3, r2
 800d6a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B,  2, 17, 0x242070DB);
 800d6ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d6b0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d6b4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d6b8:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800d6bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6c0:	4063      	eors	r3, r4
 800d6c2:	4003      	ands	r3, r0
 800d6c4:	4059      	eors	r1, r3
 800d6c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6c8:	440b      	add	r3, r1
 800d6ca:	441a      	add	r2, r3
 800d6cc:	4bd4      	ldr	r3, [pc, #848]	; (800da20 <mbedtls_internal_md5_process+0x554>)
 800d6ce:	4413      	add	r3, r2
 800d6d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d6d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6d8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 800d6dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d6e0:	4413      	add	r3, r2
 800d6e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE);
 800d6e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d6ea:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d6ee:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d6f2:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800d6f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6fa:	4063      	eors	r3, r4
 800d6fc:	4003      	ands	r3, r0
 800d6fe:	4059      	eors	r1, r3
 800d700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d702:	440b      	add	r3, r1
 800d704:	441a      	add	r2, r3
 800d706:	4bc7      	ldr	r3, [pc, #796]	; (800da24 <mbedtls_internal_md5_process+0x558>)
 800d708:	4413      	add	r3, r2
 800d70a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d70e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d712:	ea4f 22b3 	mov.w	r2, r3, ror #10
 800d716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d71a:	4413      	add	r3, r2
 800d71c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF);
 800d720:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d724:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d728:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d72c:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800d730:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d734:	4063      	eors	r3, r4
 800d736:	4003      	ands	r3, r0
 800d738:	4059      	eors	r1, r3
 800d73a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d73c:	440b      	add	r3, r1
 800d73e:	441a      	add	r2, r3
 800d740:	4bb9      	ldr	r3, [pc, #740]	; (800da28 <mbedtls_internal_md5_process+0x55c>)
 800d742:	4413      	add	r3, r2
 800d744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d74c:	ea4f 6273 	mov.w	r2, r3, ror #25
 800d750:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d754:	4413      	add	r3, r2
 800d756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A);
 800d75a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d75e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d762:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800d766:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800d76a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d76e:	4063      	eors	r3, r4
 800d770:	4003      	ands	r3, r0
 800d772:	4059      	eors	r1, r3
 800d774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d776:	440b      	add	r3, r1
 800d778:	441a      	add	r2, r3
 800d77a:	4bac      	ldr	r3, [pc, #688]	; (800da2c <mbedtls_internal_md5_process+0x560>)
 800d77c:	4413      	add	r3, r2
 800d77e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d782:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d786:	ea4f 5233 	mov.w	r2, r3, ror #20
 800d78a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d78e:	4413      	add	r3, r2
 800d790:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B,  6, 17, 0xA8304613);
 800d794:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d798:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d79c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d7a0:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800d7a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7a8:	4063      	eors	r3, r4
 800d7aa:	4003      	ands	r3, r0
 800d7ac:	4059      	eors	r1, r3
 800d7ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7b0:	440b      	add	r3, r1
 800d7b2:	441a      	add	r2, r3
 800d7b4:	4b9e      	ldr	r3, [pc, #632]	; (800da30 <mbedtls_internal_md5_process+0x564>)
 800d7b6:	4413      	add	r3, r2
 800d7b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d7bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7c0:	ea4f 32f3 	mov.w	r2, r3, ror #15
 800d7c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A,  7, 22, 0xFD469501);
 800d7ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d7d2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d7d6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d7da:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800d7de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d7e2:	4063      	eors	r3, r4
 800d7e4:	4003      	ands	r3, r0
 800d7e6:	4059      	eors	r1, r3
 800d7e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7ea:	440b      	add	r3, r1
 800d7ec:	441a      	add	r2, r3
 800d7ee:	4b91      	ldr	r3, [pc, #580]	; (800da34 <mbedtls_internal_md5_process+0x568>)
 800d7f0:	4413      	add	r3, r2
 800d7f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d7f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7fa:	ea4f 22b3 	mov.w	r2, r3, ror #10
 800d7fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d802:	4413      	add	r3, r2
 800d804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.A, local.B, local.C, local.D,  8,  7, 0x698098D8);
 800d808:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d80c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d810:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d814:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800d818:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d81c:	4063      	eors	r3, r4
 800d81e:	4003      	ands	r3, r0
 800d820:	4059      	eors	r1, r3
 800d822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d824:	440b      	add	r3, r1
 800d826:	441a      	add	r2, r3
 800d828:	4b83      	ldr	r3, [pc, #524]	; (800da38 <mbedtls_internal_md5_process+0x56c>)
 800d82a:	4413      	add	r3, r2
 800d82c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d834:	ea4f 6273 	mov.w	r2, r3, ror #25
 800d838:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d83c:	4413      	add	r3, r2
 800d83e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF);
 800d842:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d846:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d84a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800d84e:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800d852:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d856:	4063      	eors	r3, r4
 800d858:	4003      	ands	r3, r0
 800d85a:	4059      	eors	r1, r3
 800d85c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d85e:	440b      	add	r3, r1
 800d860:	441a      	add	r2, r3
 800d862:	4b76      	ldr	r3, [pc, #472]	; (800da3c <mbedtls_internal_md5_process+0x570>)
 800d864:	4413      	add	r3, r2
 800d866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d86a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d86e:	ea4f 5233 	mov.w	r2, r3, ror #20
 800d872:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d876:	4413      	add	r3, r2
 800d878:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1);
 800d87c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d880:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d884:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d888:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800d88c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d890:	4063      	eors	r3, r4
 800d892:	4003      	ands	r3, r0
 800d894:	4059      	eors	r1, r3
 800d896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d898:	440b      	add	r3, r1
 800d89a:	4413      	add	r3, r2
 800d89c:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 800d8a0:	3b4f      	subs	r3, #79	; 0x4f
 800d8a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d8a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8aa:	ea4f 32f3 	mov.w	r2, r3, ror #15
 800d8ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8b2:	4413      	add	r3, r2
 800d8b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE);
 800d8b8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d8bc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d8c0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d8c4:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800d8c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8cc:	4063      	eors	r3, r4
 800d8ce:	4003      	ands	r3, r0
 800d8d0:	4059      	eors	r1, r3
 800d8d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8d4:	440b      	add	r3, r1
 800d8d6:	441a      	add	r2, r3
 800d8d8:	4b59      	ldr	r3, [pc, #356]	; (800da40 <mbedtls_internal_md5_process+0x574>)
 800d8da:	4413      	add	r3, r2
 800d8dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d8e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8e4:	ea4f 22b3 	mov.w	r2, r3, ror #10
 800d8e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8ec:	4413      	add	r3, r2
 800d8ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.A, local.B, local.C, local.D, 12,  7, 0x6B901122);
 800d8f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d8f6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d8fa:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d8fe:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800d902:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d906:	4063      	eors	r3, r4
 800d908:	4003      	ands	r3, r0
 800d90a:	4059      	eors	r1, r3
 800d90c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d90e:	440b      	add	r3, r1
 800d910:	441a      	add	r2, r3
 800d912:	4b4c      	ldr	r3, [pc, #304]	; (800da44 <mbedtls_internal_md5_process+0x578>)
 800d914:	4413      	add	r3, r2
 800d916:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d91a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d91e:	ea4f 6273 	mov.w	r2, r3, ror #25
 800d922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d926:	4413      	add	r3, r2
 800d928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C, 13, 12, 0xFD987193);
 800d92c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d930:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d934:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800d938:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800d93c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d940:	4063      	eors	r3, r4
 800d942:	4003      	ands	r3, r0
 800d944:	4059      	eors	r1, r3
 800d946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d948:	440b      	add	r3, r1
 800d94a:	441a      	add	r2, r3
 800d94c:	4b3e      	ldr	r3, [pc, #248]	; (800da48 <mbedtls_internal_md5_process+0x57c>)
 800d94e:	4413      	add	r3, r2
 800d950:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d954:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d958:	ea4f 5233 	mov.w	r2, r3, ror #20
 800d95c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d960:	4413      	add	r3, r2
 800d962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B, 14, 17, 0xA679438E);
 800d966:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d96a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d96e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d972:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800d976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d97a:	4063      	eors	r3, r4
 800d97c:	4003      	ands	r3, r0
 800d97e:	4059      	eors	r1, r3
 800d980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d984:	440b      	add	r3, r1
 800d986:	441a      	add	r2, r3
 800d988:	4b30      	ldr	r3, [pc, #192]	; (800da4c <mbedtls_internal_md5_process+0x580>)
 800d98a:	4413      	add	r3, r2
 800d98c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d990:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d994:	ea4f 32f3 	mov.w	r2, r3, ror #15
 800d998:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d99c:	4413      	add	r3, r2
 800d99e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A, 15, 22, 0x49B40821);
 800d9a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d9a6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d9aa:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d9ae:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800d9b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d9b6:	4063      	eors	r3, r4
 800d9b8:	4003      	ands	r3, r0
 800d9ba:	4059      	eors	r1, r3
 800d9bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d9c0:	440b      	add	r3, r1
 800d9c2:	441a      	add	r2, r3
 800d9c4:	4b22      	ldr	r3, [pc, #136]	; (800da50 <mbedtls_internal_md5_process+0x584>)
 800d9c6:	4413      	add	r3, r2
 800d9c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d9cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d9d0:	ea4f 22b3 	mov.w	r2, r3, ror #10
 800d9d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d9d8:	4413      	add	r3, r2
 800d9da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

#undef F

#define F(x, y, z) ((y) ^ ((z) & ((x) ^ (y))))

    P(local.A, local.B, local.C, local.D,  1,  5, 0xF61E2562);
 800d9de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d9e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d9e6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d9ea:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800d9ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d9f2:	4063      	eors	r3, r4
 800d9f4:	4003      	ands	r3, r0
 800d9f6:	4059      	eors	r1, r3
 800d9f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9fa:	440b      	add	r3, r1
 800d9fc:	441a      	add	r2, r3
 800d9fe:	4b15      	ldr	r3, [pc, #84]	; (800da54 <mbedtls_internal_md5_process+0x588>)
 800da00:	4413      	add	r3, r2
 800da02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800da06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da0a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800da0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800da12:	4413      	add	r3, r2
 800da14:	e020      	b.n	800da58 <mbedtls_internal_md5_process+0x58c>
 800da16:	bf00      	nop
 800da18:	d76aa478 	.word	0xd76aa478
 800da1c:	e8c7b756 	.word	0xe8c7b756
 800da20:	242070db 	.word	0x242070db
 800da24:	c1bdceee 	.word	0xc1bdceee
 800da28:	f57c0faf 	.word	0xf57c0faf
 800da2c:	4787c62a 	.word	0x4787c62a
 800da30:	a8304613 	.word	0xa8304613
 800da34:	fd469501 	.word	0xfd469501
 800da38:	698098d8 	.word	0x698098d8
 800da3c:	8b44f7af 	.word	0x8b44f7af
 800da40:	895cd7be 	.word	0x895cd7be
 800da44:	6b901122 	.word	0x6b901122
 800da48:	fd987193 	.word	0xfd987193
 800da4c:	a679438e 	.word	0xa679438e
 800da50:	49b40821 	.word	0x49b40821
 800da54:	f61e2562 	.word	0xf61e2562
 800da58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C,  6,  9, 0xC040B340);
 800da5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800da60:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800da64:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800da68:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800da6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800da70:	4063      	eors	r3, r4
 800da72:	4003      	ands	r3, r0
 800da74:	4059      	eors	r1, r3
 800da76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da78:	440b      	add	r3, r1
 800da7a:	441a      	add	r2, r3
 800da7c:	4bee      	ldr	r3, [pc, #952]	; (800de38 <mbedtls_internal_md5_process+0x96c>)
 800da7e:	4413      	add	r3, r2
 800da80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da88:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800da8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da90:	4413      	add	r3, r2
 800da92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B, 11, 14, 0x265E5A51);
 800da96:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800da9a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800da9e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800daa2:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800daa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800daaa:	4063      	eors	r3, r4
 800daac:	4003      	ands	r3, r0
 800daae:	4059      	eors	r1, r3
 800dab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dab2:	440b      	add	r3, r1
 800dab4:	441a      	add	r2, r3
 800dab6:	4be1      	ldr	r3, [pc, #900]	; (800de3c <mbedtls_internal_md5_process+0x970>)
 800dab8:	4413      	add	r3, r2
 800daba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dabe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dac2:	ea4f 42b3 	mov.w	r2, r3, ror #18
 800dac6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800daca:	4413      	add	r3, r2
 800dacc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A,  0, 20, 0xE9B6C7AA);
 800dad0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dad4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800dad8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800dadc:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800dae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dae4:	4063      	eors	r3, r4
 800dae6:	4003      	ands	r3, r0
 800dae8:	4059      	eors	r1, r3
 800daea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daec:	440b      	add	r3, r1
 800daee:	441a      	add	r2, r3
 800daf0:	4bd3      	ldr	r3, [pc, #844]	; (800de40 <mbedtls_internal_md5_process+0x974>)
 800daf2:	4413      	add	r3, r2
 800daf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800daf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dafc:	ea4f 3233 	mov.w	r2, r3, ror #12
 800db00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db04:	4413      	add	r3, r2
 800db06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.A, local.B, local.C, local.D,  5,  5, 0xD62F105D);
 800db0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800db0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800db12:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800db16:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800db1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db1e:	4063      	eors	r3, r4
 800db20:	4003      	ands	r3, r0
 800db22:	4059      	eors	r1, r3
 800db24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db26:	440b      	add	r3, r1
 800db28:	441a      	add	r2, r3
 800db2a:	4bc6      	ldr	r3, [pc, #792]	; (800de44 <mbedtls_internal_md5_process+0x978>)
 800db2c:	4413      	add	r3, r2
 800db2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800db32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db36:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800db3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db3e:	4413      	add	r3, r2
 800db40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C, 10,  9, 0x02441453);
 800db44:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800db48:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800db4c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800db50:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800db54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db58:	4063      	eors	r3, r4
 800db5a:	4003      	ands	r3, r0
 800db5c:	4059      	eors	r1, r3
 800db5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db60:	440b      	add	r3, r1
 800db62:	441a      	add	r2, r3
 800db64:	4bb8      	ldr	r3, [pc, #736]	; (800de48 <mbedtls_internal_md5_process+0x97c>)
 800db66:	4413      	add	r3, r2
 800db68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db70:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800db74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db78:	4413      	add	r3, r2
 800db7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B, 15, 14, 0xD8A1E681);
 800db7e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800db82:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800db86:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800db8a:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800db8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db92:	4063      	eors	r3, r4
 800db94:	4003      	ands	r3, r0
 800db96:	4059      	eors	r1, r3
 800db98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db9c:	440b      	add	r3, r1
 800db9e:	441a      	add	r2, r3
 800dba0:	4baa      	ldr	r3, [pc, #680]	; (800de4c <mbedtls_internal_md5_process+0x980>)
 800dba2:	4413      	add	r3, r2
 800dba4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dba8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dbac:	ea4f 42b3 	mov.w	r2, r3, ror #18
 800dbb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dbb4:	4413      	add	r3, r2
 800dbb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A,  4, 20, 0xE7D3FBC8);
 800dbba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dbbe:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800dbc2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800dbc6:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800dbca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dbce:	4063      	eors	r3, r4
 800dbd0:	4003      	ands	r3, r0
 800dbd2:	4059      	eors	r1, r3
 800dbd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbd6:	440b      	add	r3, r1
 800dbd8:	441a      	add	r2, r3
 800dbda:	4b9d      	ldr	r3, [pc, #628]	; (800de50 <mbedtls_internal_md5_process+0x984>)
 800dbdc:	4413      	add	r3, r2
 800dbde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dbe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbe6:	ea4f 3233 	mov.w	r2, r3, ror #12
 800dbea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dbee:	4413      	add	r3, r2
 800dbf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.A, local.B, local.C, local.D,  9,  5, 0x21E1CDE6);
 800dbf4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dbf8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dbfc:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800dc00:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800dc04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc08:	4063      	eors	r3, r4
 800dc0a:	4003      	ands	r3, r0
 800dc0c:	4059      	eors	r1, r3
 800dc0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc10:	440b      	add	r3, r1
 800dc12:	441a      	add	r2, r3
 800dc14:	4b8f      	ldr	r3, [pc, #572]	; (800de54 <mbedtls_internal_md5_process+0x988>)
 800dc16:	4413      	add	r3, r2
 800dc18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dc1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc20:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800dc24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc28:	4413      	add	r3, r2
 800dc2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C, 14,  9, 0xC33707D6);
 800dc2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dc32:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800dc36:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800dc3a:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800dc3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc42:	4063      	eors	r3, r4
 800dc44:	4003      	ands	r3, r0
 800dc46:	4059      	eors	r1, r3
 800dc48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dc4c:	440b      	add	r3, r1
 800dc4e:	441a      	add	r2, r3
 800dc50:	4b81      	ldr	r3, [pc, #516]	; (800de58 <mbedtls_internal_md5_process+0x98c>)
 800dc52:	4413      	add	r3, r2
 800dc54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dc58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc5c:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800dc60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc64:	4413      	add	r3, r2
 800dc66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B,  3, 14, 0xF4D50D87);
 800dc6a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dc6e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800dc72:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800dc76:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800dc7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc7e:	4063      	eors	r3, r4
 800dc80:	4003      	ands	r3, r0
 800dc82:	4059      	eors	r1, r3
 800dc84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc86:	440b      	add	r3, r1
 800dc88:	441a      	add	r2, r3
 800dc8a:	4b74      	ldr	r3, [pc, #464]	; (800de5c <mbedtls_internal_md5_process+0x990>)
 800dc8c:	4413      	add	r3, r2
 800dc8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dc92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc96:	ea4f 42b3 	mov.w	r2, r3, ror #18
 800dc9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc9e:	4413      	add	r3, r2
 800dca0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A,  8, 20, 0x455A14ED);
 800dca4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dca8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800dcac:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800dcb0:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800dcb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dcb8:	4063      	eors	r3, r4
 800dcba:	4003      	ands	r3, r0
 800dcbc:	4059      	eors	r1, r3
 800dcbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcc0:	440b      	add	r3, r1
 800dcc2:	441a      	add	r2, r3
 800dcc4:	4b66      	ldr	r3, [pc, #408]	; (800de60 <mbedtls_internal_md5_process+0x994>)
 800dcc6:	4413      	add	r3, r2
 800dcc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dccc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dcd0:	ea4f 3233 	mov.w	r2, r3, ror #12
 800dcd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dcd8:	4413      	add	r3, r2
 800dcda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.A, local.B, local.C, local.D, 13,  5, 0xA9E3E905);
 800dcde:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dce2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dce6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800dcea:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800dcee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dcf2:	4063      	eors	r3, r4
 800dcf4:	4003      	ands	r3, r0
 800dcf6:	4059      	eors	r1, r3
 800dcf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcfa:	440b      	add	r3, r1
 800dcfc:	441a      	add	r2, r3
 800dcfe:	4b59      	ldr	r3, [pc, #356]	; (800de64 <mbedtls_internal_md5_process+0x998>)
 800dd00:	4413      	add	r3, r2
 800dd02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dd06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd0a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800dd0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd12:	4413      	add	r3, r2
 800dd14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C,  2,  9, 0xFCEFA3F8);
 800dd18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dd1c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800dd20:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800dd24:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800dd28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd2c:	4063      	eors	r3, r4
 800dd2e:	4003      	ands	r3, r0
 800dd30:	4059      	eors	r1, r3
 800dd32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd34:	440b      	add	r3, r1
 800dd36:	441a      	add	r2, r3
 800dd38:	4b4b      	ldr	r3, [pc, #300]	; (800de68 <mbedtls_internal_md5_process+0x99c>)
 800dd3a:	4413      	add	r3, r2
 800dd3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dd40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd44:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800dd48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd4c:	4413      	add	r3, r2
 800dd4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B,  7, 14, 0x676F02D9);
 800dd52:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dd56:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800dd5a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800dd5e:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800dd62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd66:	4063      	eors	r3, r4
 800dd68:	4003      	ands	r3, r0
 800dd6a:	4059      	eors	r1, r3
 800dd6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd6e:	440b      	add	r3, r1
 800dd70:	441a      	add	r2, r3
 800dd72:	4b3e      	ldr	r3, [pc, #248]	; (800de6c <mbedtls_internal_md5_process+0x9a0>)
 800dd74:	4413      	add	r3, r2
 800dd76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dd7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd7e:	ea4f 42b3 	mov.w	r2, r3, ror #18
 800dd82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd86:	4413      	add	r3, r2
 800dd88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A, 12, 20, 0x8D2A4C8A);
 800dd8c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dd90:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800dd94:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800dd98:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800dd9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dda0:	4063      	eors	r3, r4
 800dda2:	4003      	ands	r3, r0
 800dda4:	4059      	eors	r1, r3
 800dda6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dda8:	440b      	add	r3, r1
 800ddaa:	441a      	add	r2, r3
 800ddac:	4b30      	ldr	r3, [pc, #192]	; (800de70 <mbedtls_internal_md5_process+0x9a4>)
 800ddae:	4413      	add	r3, r2
 800ddb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ddb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ddb8:	ea4f 3233 	mov.w	r2, r3, ror #12
 800ddbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ddc0:	4413      	add	r3, r2
 800ddc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

#undef F

#define F(x, y, z) ((x) ^ (y) ^ (z))

    P(local.A, local.B, local.C, local.D,  5,  4, 0xFFFA3942);
 800ddc6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ddca:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ddce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ddd2:	4059      	eors	r1, r3
 800ddd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddd8:	4059      	eors	r1, r3
 800ddda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dddc:	440b      	add	r3, r1
 800ddde:	4413      	add	r3, r2
 800dde0:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 800dde4:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 800dde8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ddec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ddf0:	ea4f 7233 	mov.w	r2, r3, ror #28
 800ddf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ddf8:	4413      	add	r3, r2
 800ddfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C,  8, 11, 0x8771F681);
 800ddfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800de02:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800de06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de0a:	4059      	eors	r1, r3
 800de0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de10:	4059      	eors	r1, r3
 800de12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de14:	440b      	add	r3, r1
 800de16:	441a      	add	r2, r3
 800de18:	4b16      	ldr	r3, [pc, #88]	; (800de74 <mbedtls_internal_md5_process+0x9a8>)
 800de1a:	4413      	add	r3, r2
 800de1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800de20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de24:	ea4f 5273 	mov.w	r2, r3, ror #21
 800de28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de2c:	4413      	add	r3, r2
 800de2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122);
 800de32:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800de36:	e01f      	b.n	800de78 <mbedtls_internal_md5_process+0x9ac>
 800de38:	c040b340 	.word	0xc040b340
 800de3c:	265e5a51 	.word	0x265e5a51
 800de40:	e9b6c7aa 	.word	0xe9b6c7aa
 800de44:	d62f105d 	.word	0xd62f105d
 800de48:	02441453 	.word	0x02441453
 800de4c:	d8a1e681 	.word	0xd8a1e681
 800de50:	e7d3fbc8 	.word	0xe7d3fbc8
 800de54:	21e1cde6 	.word	0x21e1cde6
 800de58:	c33707d6 	.word	0xc33707d6
 800de5c:	f4d50d87 	.word	0xf4d50d87
 800de60:	455a14ed 	.word	0x455a14ed
 800de64:	a9e3e905 	.word	0xa9e3e905
 800de68:	fcefa3f8 	.word	0xfcefa3f8
 800de6c:	676f02d9 	.word	0x676f02d9
 800de70:	8d2a4c8a 	.word	0x8d2a4c8a
 800de74:	8771f681 	.word	0x8771f681
 800de78:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800de7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de80:	4059      	eors	r1, r3
 800de82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de86:	4059      	eors	r1, r3
 800de88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de8a:	440b      	add	r3, r1
 800de8c:	441a      	add	r2, r3
 800de8e:	4bee      	ldr	r3, [pc, #952]	; (800e248 <mbedtls_internal_md5_process+0xd7c>)
 800de90:	4413      	add	r3, r2
 800de92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800de96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de9a:	ea4f 4233 	mov.w	r2, r3, ror #16
 800de9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dea2:	4413      	add	r3, r2
 800dea4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C);
 800dea8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800deac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800deb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800deb4:	4059      	eors	r1, r3
 800deb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800deba:	4059      	eors	r1, r3
 800debc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dec0:	440b      	add	r3, r1
 800dec2:	441a      	add	r2, r3
 800dec4:	4be1      	ldr	r3, [pc, #900]	; (800e24c <mbedtls_internal_md5_process+0xd80>)
 800dec6:	4413      	add	r3, r2
 800dec8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800decc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ded0:	ea4f 2273 	mov.w	r2, r3, ror #9
 800ded4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ded8:	4413      	add	r3, r2
 800deda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44);
 800dede:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dee2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800dee6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800deea:	4059      	eors	r1, r3
 800deec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800def0:	4059      	eors	r1, r3
 800def2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800def4:	440b      	add	r3, r1
 800def6:	441a      	add	r2, r3
 800def8:	4bd5      	ldr	r3, [pc, #852]	; (800e250 <mbedtls_internal_md5_process+0xd84>)
 800defa:	4413      	add	r3, r2
 800defc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800df00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800df04:	ea4f 7233 	mov.w	r2, r3, ror #28
 800df08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800df0c:	4413      	add	r3, r2
 800df0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9);
 800df12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800df16:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800df1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800df1e:	4059      	eors	r1, r3
 800df20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df24:	4059      	eors	r1, r3
 800df26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df28:	440b      	add	r3, r1
 800df2a:	441a      	add	r2, r3
 800df2c:	4bc9      	ldr	r3, [pc, #804]	; (800e254 <mbedtls_internal_md5_process+0xd88>)
 800df2e:	4413      	add	r3, r2
 800df30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800df34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df38:	ea4f 5273 	mov.w	r2, r3, ror #21
 800df3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800df40:	4413      	add	r3, r2
 800df42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60);
 800df46:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800df4a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800df4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800df52:	4059      	eors	r1, r3
 800df54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800df58:	4059      	eors	r1, r3
 800df5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df5c:	440b      	add	r3, r1
 800df5e:	441a      	add	r2, r3
 800df60:	4bbd      	ldr	r3, [pc, #756]	; (800e258 <mbedtls_internal_md5_process+0xd8c>)
 800df62:	4413      	add	r3, r2
 800df64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800df68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df6c:	ea4f 4233 	mov.w	r2, r3, ror #16
 800df70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df74:	4413      	add	r3, r2
 800df76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70);
 800df7a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800df7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800df82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df86:	4059      	eors	r1, r3
 800df88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800df8c:	4059      	eors	r1, r3
 800df8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800df90:	440b      	add	r3, r1
 800df92:	441a      	add	r2, r3
 800df94:	4bb1      	ldr	r3, [pc, #708]	; (800e25c <mbedtls_internal_md5_process+0xd90>)
 800df96:	4413      	add	r3, r2
 800df98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800df9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dfa0:	ea4f 2273 	mov.w	r2, r3, ror #9
 800dfa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dfa8:	4413      	add	r3, r2
 800dfaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6);
 800dfae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dfb2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800dfb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dfba:	4059      	eors	r1, r3
 800dfbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dfc0:	4059      	eors	r1, r3
 800dfc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dfc4:	440b      	add	r3, r1
 800dfc6:	441a      	add	r2, r3
 800dfc8:	4ba5      	ldr	r3, [pc, #660]	; (800e260 <mbedtls_internal_md5_process+0xd94>)
 800dfca:	4413      	add	r3, r2
 800dfcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dfd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dfd4:	ea4f 7233 	mov.w	r2, r3, ror #28
 800dfd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dfdc:	4413      	add	r3, r2
 800dfde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA);
 800dfe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dfe6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800dfea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dfee:	4059      	eors	r1, r3
 800dff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dff4:	4059      	eors	r1, r3
 800dff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dff8:	440b      	add	r3, r1
 800dffa:	441a      	add	r2, r3
 800dffc:	4b99      	ldr	r3, [pc, #612]	; (800e264 <mbedtls_internal_md5_process+0xd98>)
 800dffe:	4413      	add	r3, r2
 800e000:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e008:	ea4f 5273 	mov.w	r2, r3, ror #21
 800e00c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e010:	4413      	add	r3, r2
 800e012:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085);
 800e016:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e01a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800e01e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e022:	4059      	eors	r1, r3
 800e024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e028:	4059      	eors	r1, r3
 800e02a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e02c:	440b      	add	r3, r1
 800e02e:	441a      	add	r2, r3
 800e030:	4b8d      	ldr	r3, [pc, #564]	; (800e268 <mbedtls_internal_md5_process+0xd9c>)
 800e032:	4413      	add	r3, r2
 800e034:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e038:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e03c:	ea4f 4233 	mov.w	r2, r3, ror #16
 800e040:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e044:	4413      	add	r3, r2
 800e046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A,  6, 23, 0x04881D05);
 800e04a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e04e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e052:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e056:	4059      	eors	r1, r3
 800e058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e05c:	4059      	eors	r1, r3
 800e05e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e060:	440b      	add	r3, r1
 800e062:	441a      	add	r2, r3
 800e064:	4b81      	ldr	r3, [pc, #516]	; (800e26c <mbedtls_internal_md5_process+0xda0>)
 800e066:	4413      	add	r3, r2
 800e068:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e06c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e070:	ea4f 2273 	mov.w	r2, r3, ror #9
 800e074:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e078:	4413      	add	r3, r2
 800e07a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039);
 800e07e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e082:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e08a:	4059      	eors	r1, r3
 800e08c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e090:	4059      	eors	r1, r3
 800e092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e094:	440b      	add	r3, r1
 800e096:	441a      	add	r2, r3
 800e098:	4b75      	ldr	r3, [pc, #468]	; (800e270 <mbedtls_internal_md5_process+0xda4>)
 800e09a:	4413      	add	r3, r2
 800e09c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e0a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e0a4:	ea4f 7233 	mov.w	r2, r3, ror #28
 800e0a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e0ac:	4413      	add	r3, r2
 800e0ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5);
 800e0b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e0b6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e0ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e0be:	4059      	eors	r1, r3
 800e0c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0c4:	4059      	eors	r1, r3
 800e0c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0c8:	440b      	add	r3, r1
 800e0ca:	441a      	add	r2, r3
 800e0cc:	4b69      	ldr	r3, [pc, #420]	; (800e274 <mbedtls_internal_md5_process+0xda8>)
 800e0ce:	4413      	add	r3, r2
 800e0d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e0d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e0d8:	ea4f 5273 	mov.w	r2, r3, ror #21
 800e0dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e0e0:	4413      	add	r3, r2
 800e0e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8);
 800e0e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e0ea:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800e0ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e0f2:	4059      	eors	r1, r3
 800e0f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e0f8:	4059      	eors	r1, r3
 800e0fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e0fe:	440b      	add	r3, r1
 800e100:	441a      	add	r2, r3
 800e102:	4b5d      	ldr	r3, [pc, #372]	; (800e278 <mbedtls_internal_md5_process+0xdac>)
 800e104:	4413      	add	r3, r2
 800e106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e10a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e10e:	ea4f 4233 	mov.w	r2, r3, ror #16
 800e112:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e116:	4413      	add	r3, r2
 800e118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665);
 800e11c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e120:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e124:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e128:	4059      	eors	r1, r3
 800e12a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e12e:	4059      	eors	r1, r3
 800e130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e132:	440b      	add	r3, r1
 800e134:	441a      	add	r2, r3
 800e136:	4b51      	ldr	r3, [pc, #324]	; (800e27c <mbedtls_internal_md5_process+0xdb0>)
 800e138:	4413      	add	r3, r2
 800e13a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e13e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e142:	ea4f 2273 	mov.w	r2, r3, ror #9
 800e146:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e14a:	4413      	add	r3, r2
 800e14c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

#undef F

#define F(x, y, z) ((y) ^ ((x) | ~(z)))

    P(local.A, local.B, local.C, local.D,  0,  6, 0xF4292244);
 800e150:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e154:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e158:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e15c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e160:	43db      	mvns	r3, r3
 800e162:	4303      	orrs	r3, r0
 800e164:	4059      	eors	r1, r3
 800e166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e168:	440b      	add	r3, r1
 800e16a:	441a      	add	r2, r3
 800e16c:	4b44      	ldr	r3, [pc, #272]	; (800e280 <mbedtls_internal_md5_process+0xdb4>)
 800e16e:	4413      	add	r3, r2
 800e170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e174:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e178:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800e17c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e180:	4413      	add	r3, r2
 800e182:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C,  7, 10, 0x432AFF97);
 800e186:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e18a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e18e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800e192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e196:	43db      	mvns	r3, r3
 800e198:	4303      	orrs	r3, r0
 800e19a:	4059      	eors	r1, r3
 800e19c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e19e:	440b      	add	r3, r1
 800e1a0:	441a      	add	r2, r3
 800e1a2:	4b38      	ldr	r3, [pc, #224]	; (800e284 <mbedtls_internal_md5_process+0xdb8>)
 800e1a4:	4413      	add	r3, r2
 800e1a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e1aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e1ae:	ea4f 52b3 	mov.w	r2, r3, ror #22
 800e1b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e1b6:	4413      	add	r3, r2
 800e1b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B, 14, 15, 0xAB9423A7);
 800e1bc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e1c0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e1c4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e1c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e1cc:	43db      	mvns	r3, r3
 800e1ce:	4303      	orrs	r3, r0
 800e1d0:	4059      	eors	r1, r3
 800e1d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e1d6:	440b      	add	r3, r1
 800e1d8:	441a      	add	r2, r3
 800e1da:	4b2b      	ldr	r3, [pc, #172]	; (800e288 <mbedtls_internal_md5_process+0xdbc>)
 800e1dc:	4413      	add	r3, r2
 800e1de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e1e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e1e6:	ea4f 4273 	mov.w	r2, r3, ror #17
 800e1ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e1ee:	4413      	add	r3, r2
 800e1f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A,  5, 21, 0xFC93A039);
 800e1f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e1f8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800e1fc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800e200:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e204:	43db      	mvns	r3, r3
 800e206:	4303      	orrs	r3, r0
 800e208:	4059      	eors	r1, r3
 800e20a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e20c:	440b      	add	r3, r1
 800e20e:	441a      	add	r2, r3
 800e210:	4b1e      	ldr	r3, [pc, #120]	; (800e28c <mbedtls_internal_md5_process+0xdc0>)
 800e212:	4413      	add	r3, r2
 800e214:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e21c:	ea4f 22f3 	mov.w	r2, r3, ror #11
 800e220:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e224:	4413      	add	r3, r2
 800e226:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3);
 800e22a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e22e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e232:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e236:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e23a:	43db      	mvns	r3, r3
 800e23c:	4303      	orrs	r3, r0
 800e23e:	4059      	eors	r1, r3
 800e240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e242:	440b      	add	r3, r1
 800e244:	e024      	b.n	800e290 <mbedtls_internal_md5_process+0xdc4>
 800e246:	bf00      	nop
 800e248:	6d9d6122 	.word	0x6d9d6122
 800e24c:	fde5380c 	.word	0xfde5380c
 800e250:	a4beea44 	.word	0xa4beea44
 800e254:	4bdecfa9 	.word	0x4bdecfa9
 800e258:	f6bb4b60 	.word	0xf6bb4b60
 800e25c:	bebfbc70 	.word	0xbebfbc70
 800e260:	289b7ec6 	.word	0x289b7ec6
 800e264:	eaa127fa 	.word	0xeaa127fa
 800e268:	d4ef3085 	.word	0xd4ef3085
 800e26c:	04881d05 	.word	0x04881d05
 800e270:	d9d4d039 	.word	0xd9d4d039
 800e274:	e6db99e5 	.word	0xe6db99e5
 800e278:	1fa27cf8 	.word	0x1fa27cf8
 800e27c:	c4ac5665 	.word	0xc4ac5665
 800e280:	f4292244 	.word	0xf4292244
 800e284:	432aff97 	.word	0x432aff97
 800e288:	ab9423a7 	.word	0xab9423a7
 800e28c:	fc93a039 	.word	0xfc93a039
 800e290:	441a      	add	r2, r3
 800e292:	4bb0      	ldr	r3, [pc, #704]	; (800e554 <mbedtls_internal_md5_process+0x1088>)
 800e294:	4413      	add	r3, r2
 800e296:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e29a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e29e:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800e2a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e2a6:	4413      	add	r3, r2
 800e2a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92);
 800e2ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e2b0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e2b4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800e2b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e2bc:	43db      	mvns	r3, r3
 800e2be:	4303      	orrs	r3, r0
 800e2c0:	4059      	eors	r1, r3
 800e2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2c4:	440b      	add	r3, r1
 800e2c6:	441a      	add	r2, r3
 800e2c8:	4ba3      	ldr	r3, [pc, #652]	; (800e558 <mbedtls_internal_md5_process+0x108c>)
 800e2ca:	4413      	add	r3, r2
 800e2cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e2d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e2d4:	ea4f 52b3 	mov.w	r2, r3, ror #22
 800e2d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e2dc:	4413      	add	r3, r2
 800e2de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D);
 800e2e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e2e6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e2ea:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e2ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e2f2:	43db      	mvns	r3, r3
 800e2f4:	4303      	orrs	r3, r0
 800e2f6:	4059      	eors	r1, r3
 800e2f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2fa:	440b      	add	r3, r1
 800e2fc:	4413      	add	r3, r2
 800e2fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e302:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 800e306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e30a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e30e:	ea4f 4273 	mov.w	r2, r3, ror #17
 800e312:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e316:	4413      	add	r3, r2
 800e318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1);
 800e31c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e320:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800e324:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800e328:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e32c:	43db      	mvns	r3, r3
 800e32e:	4303      	orrs	r3, r0
 800e330:	4059      	eors	r1, r3
 800e332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e334:	440b      	add	r3, r1
 800e336:	441a      	add	r2, r3
 800e338:	4b88      	ldr	r3, [pc, #544]	; (800e55c <mbedtls_internal_md5_process+0x1090>)
 800e33a:	4413      	add	r3, r2
 800e33c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e344:	ea4f 22f3 	mov.w	r2, r3, ror #11
 800e348:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e34c:	4413      	add	r3, r2
 800e34e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F);
 800e352:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e356:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e35a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e35e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e362:	43db      	mvns	r3, r3
 800e364:	4303      	orrs	r3, r0
 800e366:	4059      	eors	r1, r3
 800e368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e36a:	440b      	add	r3, r1
 800e36c:	441a      	add	r2, r3
 800e36e:	4b7c      	ldr	r3, [pc, #496]	; (800e560 <mbedtls_internal_md5_process+0x1094>)
 800e370:	4413      	add	r3, r2
 800e372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e37a:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800e37e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e382:	4413      	add	r3, r2
 800e384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0);
 800e388:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e38c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e390:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800e394:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e398:	43db      	mvns	r3, r3
 800e39a:	4303      	orrs	r3, r0
 800e39c:	4059      	eors	r1, r3
 800e39e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e3a2:	440b      	add	r3, r1
 800e3a4:	441a      	add	r2, r3
 800e3a6:	4b6f      	ldr	r3, [pc, #444]	; (800e564 <mbedtls_internal_md5_process+0x1098>)
 800e3a8:	4413      	add	r3, r2
 800e3aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e3ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e3b2:	ea4f 52b3 	mov.w	r2, r3, ror #22
 800e3b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e3ba:	4413      	add	r3, r2
 800e3bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B,  6, 15, 0xA3014314);
 800e3c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e3c4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e3c8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e3cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e3d0:	43db      	mvns	r3, r3
 800e3d2:	4303      	orrs	r3, r0
 800e3d4:	4059      	eors	r1, r3
 800e3d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3d8:	440b      	add	r3, r1
 800e3da:	441a      	add	r2, r3
 800e3dc:	4b62      	ldr	r3, [pc, #392]	; (800e568 <mbedtls_internal_md5_process+0x109c>)
 800e3de:	4413      	add	r3, r2
 800e3e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e3e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e3e8:	ea4f 4273 	mov.w	r2, r3, ror #17
 800e3ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e3f0:	4413      	add	r3, r2
 800e3f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1);
 800e3f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e3fa:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800e3fe:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800e402:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e406:	43db      	mvns	r3, r3
 800e408:	4303      	orrs	r3, r0
 800e40a:	4059      	eors	r1, r3
 800e40c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e40e:	440b      	add	r3, r1
 800e410:	441a      	add	r2, r3
 800e412:	4b56      	ldr	r3, [pc, #344]	; (800e56c <mbedtls_internal_md5_process+0x10a0>)
 800e414:	4413      	add	r3, r2
 800e416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e41a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e41e:	ea4f 22f3 	mov.w	r2, r3, ror #11
 800e422:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e426:	4413      	add	r3, r2
 800e428:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82);
 800e42c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e430:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e434:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e438:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e43c:	43db      	mvns	r3, r3
 800e43e:	4303      	orrs	r3, r0
 800e440:	4059      	eors	r1, r3
 800e442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e444:	440b      	add	r3, r1
 800e446:	441a      	add	r2, r3
 800e448:	4b49      	ldr	r3, [pc, #292]	; (800e570 <mbedtls_internal_md5_process+0x10a4>)
 800e44a:	4413      	add	r3, r2
 800e44c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e454:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800e458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e45c:	4413      	add	r3, r2
 800e45e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    P(local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235);
 800e462:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e466:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e46a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800e46e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e472:	43db      	mvns	r3, r3
 800e474:	4303      	orrs	r3, r0
 800e476:	4059      	eors	r1, r3
 800e478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e47a:	440b      	add	r3, r1
 800e47c:	441a      	add	r2, r3
 800e47e:	4b3d      	ldr	r3, [pc, #244]	; (800e574 <mbedtls_internal_md5_process+0x10a8>)
 800e480:	4413      	add	r3, r2
 800e482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e48a:	ea4f 52b3 	mov.w	r2, r3, ror #22
 800e48e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e492:	4413      	add	r3, r2
 800e494:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB);
 800e498:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e49c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e4a0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e4a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4a8:	43db      	mvns	r3, r3
 800e4aa:	4303      	orrs	r3, r0
 800e4ac:	4059      	eors	r1, r3
 800e4ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4b0:	440b      	add	r3, r1
 800e4b2:	441a      	add	r2, r3
 800e4b4:	4b30      	ldr	r3, [pc, #192]	; (800e578 <mbedtls_internal_md5_process+0x10ac>)
 800e4b6:	4413      	add	r3, r2
 800e4b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e4bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e4c0:	ea4f 4273 	mov.w	r2, r3, ror #17
 800e4c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4c8:	4413      	add	r3, r2
 800e4ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.B, local.C, local.D, local.A,  9, 21, 0xEB86D391);
 800e4ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e4d2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800e4d6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800e4da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e4de:	43db      	mvns	r3, r3
 800e4e0:	4303      	orrs	r3, r0
 800e4e2:	4059      	eors	r1, r3
 800e4e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4e6:	440b      	add	r3, r1
 800e4e8:	441a      	add	r2, r3
 800e4ea:	4b24      	ldr	r3, [pc, #144]	; (800e57c <mbedtls_internal_md5_process+0x10b0>)
 800e4ec:	4413      	add	r3, r2
 800e4ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e4f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4f6:	ea4f 22f3 	mov.w	r2, r3, ror #11
 800e4fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e4fe:	4413      	add	r3, r2
 800e500:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

#undef F

    ctx->state[0] += local.A;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	689a      	ldr	r2, [r3, #8]
 800e508:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e50c:	441a      	add	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	609a      	str	r2, [r3, #8]
    ctx->state[1] += local.B;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	68da      	ldr	r2, [r3, #12]
 800e516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e51a:	441a      	add	r2, r3
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	60da      	str	r2, [r3, #12]
    ctx->state[2] += local.C;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	691a      	ldr	r2, [r3, #16]
 800e524:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e528:	441a      	add	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	611a      	str	r2, [r3, #16]
    ctx->state[3] += local.D;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	695a      	ldr	r2, [r3, #20]
 800e532:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e536:	441a      	add	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	615a      	str	r2, [r3, #20]

    /* Zeroise variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize(&local, sizeof(local));
 800e53c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e540:	2150      	movs	r1, #80	; 0x50
 800e542:	4618      	mov	r0, r3
 800e544:	f000 f9f2 	bl	800e92c <mbedtls_platform_zeroize>

    return 0;
 800e548:	2300      	movs	r3, #0
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	37dc      	adds	r7, #220	; 0xdc
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd90      	pop	{r4, r7, pc}
 800e552:	bf00      	nop
 800e554:	655b59c3 	.word	0x655b59c3
 800e558:	8f0ccc92 	.word	0x8f0ccc92
 800e55c:	85845dd1 	.word	0x85845dd1
 800e560:	6fa87e4f 	.word	0x6fa87e4f
 800e564:	fe2ce6e0 	.word	0xfe2ce6e0
 800e568:	a3014314 	.word	0xa3014314
 800e56c:	4e0811a1 	.word	0x4e0811a1
 800e570:	f7537e82 	.word	0xf7537e82
 800e574:	bd3af235 	.word	0xbd3af235
 800e578:	2ad7d2bb 	.word	0x2ad7d2bb
 800e57c:	eb86d391 	.word	0xeb86d391

0800e580 <mbedtls_md5_update>:
 * MD5 process buffer
 */
int mbedtls_md5_update(mbedtls_md5_context *ctx,
                       const unsigned char *input,
                       size_t ilen)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b088      	sub	sp, #32
 800e584:	af00      	add	r7, sp, #0
 800e586:	60f8      	str	r0, [r7, #12]
 800e588:	60b9      	str	r1, [r7, #8]
 800e58a:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e58c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e590:	61bb      	str	r3, [r7, #24]
    size_t fill;
    uint32_t left;

    if (ilen == 0) {
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d101      	bne.n	800e59c <mbedtls_md5_update+0x1c>
        return 0;
 800e598:	2300      	movs	r3, #0
 800e59a:	e065      	b.n	800e668 <mbedtls_md5_update+0xe8>
    }

    left = ctx->total[0] & 0x3F;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5a4:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800e5ac:	617b      	str	r3, [r7, #20]

    ctx->total[0] += (uint32_t) ilen;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	441a      	add	r2, r3
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	601a      	str	r2, [r3, #0]

    if (ctx->total[0] < (uint32_t) ilen) {
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d904      	bls.n	800e5d6 <mbedtls_md5_update+0x56>
        ctx->total[1]++;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	1c5a      	adds	r2, r3, #1
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	605a      	str	r2, [r3, #4]
    }

    if (left && ilen >= fill) {
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d034      	beq.n	800e646 <mbedtls_md5_update+0xc6>
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d330      	bcc.n	800e646 <mbedtls_md5_update+0xc6>
        memcpy((void *) (ctx->buffer + left), input, fill);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f103 0218 	add.w	r2, r3, #24
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	697a      	ldr	r2, [r7, #20]
 800e5f0:	68b9      	ldr	r1, [r7, #8]
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f00e fe80 	bl	801d2f8 <memcpy>
        if ((ret = mbedtls_internal_md5_process(ctx, ctx->buffer)) != 0) {
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	3318      	adds	r3, #24
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f7fe ff64 	bl	800d4cc <mbedtls_internal_md5_process>
 800e604:	61b8      	str	r0, [r7, #24]
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d001      	beq.n	800e610 <mbedtls_md5_update+0x90>
            return ret;
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	e02b      	b.n	800e668 <mbedtls_md5_update+0xe8>
        }

        input += fill;
 800e610:	68ba      	ldr	r2, [r7, #8]
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	4413      	add	r3, r2
 800e616:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	1ad3      	subs	r3, r2, r3
 800e61e:	607b      	str	r3, [r7, #4]
        left = 0;
 800e620:	2300      	movs	r3, #0
 800e622:	61fb      	str	r3, [r7, #28]
    }

    while (ilen >= 64) {
 800e624:	e00f      	b.n	800e646 <mbedtls_md5_update+0xc6>
        if ((ret = mbedtls_internal_md5_process(ctx, input)) != 0) {
 800e626:	68b9      	ldr	r1, [r7, #8]
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f7fe ff4f 	bl	800d4cc <mbedtls_internal_md5_process>
 800e62e:	61b8      	str	r0, [r7, #24]
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d001      	beq.n	800e63a <mbedtls_md5_update+0xba>
            return ret;
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	e016      	b.n	800e668 <mbedtls_md5_update+0xe8>
        }

        input += 64;
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	3340      	adds	r3, #64	; 0x40
 800e63e:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	3b40      	subs	r3, #64	; 0x40
 800e644:	607b      	str	r3, [r7, #4]
    while (ilen >= 64) {
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2b3f      	cmp	r3, #63	; 0x3f
 800e64a:	d8ec      	bhi.n	800e626 <mbedtls_md5_update+0xa6>
    }

    if (ilen > 0) {
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d009      	beq.n	800e666 <mbedtls_md5_update+0xe6>
        memcpy((void *) (ctx->buffer + left), input, ilen);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f103 0218 	add.w	r2, r3, #24
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	4413      	add	r3, r2
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	68b9      	ldr	r1, [r7, #8]
 800e660:	4618      	mov	r0, r3
 800e662:	f00e fe49 	bl	801d2f8 <memcpy>
    }

    return 0;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3720      	adds	r7, #32
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <mbedtls_md5_finish>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish(mbedtls_md5_context *ctx,
                       unsigned char output[16])
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b092      	sub	sp, #72	; 0x48
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e67a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e67e:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e688:	63bb      	str	r3, [r7, #56]	; 0x38

    ctx->buffer[used++] = 0x80;
 800e68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68c:	1c5a      	adds	r2, r3, #1
 800e68e:	63ba      	str	r2, [r7, #56]	; 0x38
 800e690:	687a      	ldr	r2, [r7, #4]
 800e692:	4413      	add	r3, r2
 800e694:	2280      	movs	r2, #128	; 0x80
 800e696:	761a      	strb	r2, [r3, #24]

    if (used <= 56) {
 800e698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69a:	2b38      	cmp	r3, #56	; 0x38
 800e69c:	d80c      	bhi.n	800e6b8 <mbedtls_md5_finish+0x48>
        /* Enough room for padding + length in current block */
        memset(ctx->buffer + used, 0, 56 - used);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f103 0218 	add.w	r2, r3, #24
 800e6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a6:	18d0      	adds	r0, r2, r3
 800e6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6aa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	f00e fd83 	bl	801d1bc <memset>
 800e6b6:	e01c      	b.n	800e6f2 <mbedtls_md5_finish+0x82>
    } else {
        /* We'll need an extra block */
        memset(ctx->buffer + used, 0, 64 - used);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f103 0218 	add.w	r2, r3, #24
 800e6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c0:	18d0      	adds	r0, r2, r3
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	2100      	movs	r1, #0
 800e6cc:	f00e fd76 	bl	801d1bc <memset>

        if ((ret = mbedtls_internal_md5_process(ctx, ctx->buffer)) != 0) {
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	3318      	adds	r3, #24
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f7fe fef8 	bl	800d4cc <mbedtls_internal_md5_process>
 800e6dc:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d15c      	bne.n	800e79e <mbedtls_md5_finish+0x12e>
            goto exit;
        }

        memset(ctx->buffer, 0, 56);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	3318      	adds	r3, #24
 800e6e8:	2238      	movs	r2, #56	; 0x38
 800e6ea:	2100      	movs	r1, #0
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f00e fd65 	bl	801d1bc <memset>
    }

    /*
     * Add message length
     */
    high = (ctx->total[0] >> 29)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	0f5a      	lsrs	r2, r3, #29
           | (ctx->total[1] <<  3);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	00db      	lsls	r3, r3, #3
    high = (ctx->total[0] >> 29)
 800e6fe:	4313      	orrs	r3, r2
 800e700:	647b      	str	r3, [r7, #68]	; 0x44
    low  = (ctx->total[0] <<  3);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	00db      	lsls	r3, r3, #3
 800e708:	643b      	str	r3, [r7, #64]	; 0x40

    MBEDTLS_PUT_UINT32_LE(low,  ctx->buffer, 56);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	3318      	adds	r3, #24
 800e70e:	3338      	adds	r3, #56	; 0x38
 800e710:	637b      	str	r3, [r7, #52]	; 0x34
 800e712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e714:	60bb      	str	r3, [r7, #8]
 800e716:	68ba      	ldr	r2, [r7, #8]
    memcpy(p, &x, sizeof(x));
 800e718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e71a:	601a      	str	r2, [r3, #0]
}
 800e71c:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(high, ctx->buffer, 60);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	3318      	adds	r3, #24
 800e722:	333c      	adds	r3, #60	; 0x3c
 800e724:	633b      	str	r3, [r7, #48]	; 0x30
 800e726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e728:	60fb      	str	r3, [r7, #12]
 800e72a:	68fa      	ldr	r2, [r7, #12]
    memcpy(p, &x, sizeof(x));
 800e72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e72e:	601a      	str	r2, [r3, #0]
}
 800e730:	bf00      	nop

    if ((ret = mbedtls_internal_md5_process(ctx, ctx->buffer)) != 0) {
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	3318      	adds	r3, #24
 800e736:	4619      	mov	r1, r3
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f7fe fec7 	bl	800d4cc <mbedtls_internal_md5_process>
 800e73e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e742:	2b00      	cmp	r3, #0
 800e744:	d12d      	bne.n	800e7a2 <mbedtls_md5_finish+0x132>
    }

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_LE(ctx->state[0], output,  0);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	689b      	ldr	r3, [r3, #8]
 800e74a:	683a      	ldr	r2, [r7, #0]
 800e74c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e74e:	613b      	str	r3, [r7, #16]
 800e750:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 800e752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e754:	601a      	str	r2, [r3, #0]
}
 800e756:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(ctx->state[1], output,  4);
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	1d1a      	adds	r2, r3, #4
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	68db      	ldr	r3, [r3, #12]
 800e760:	62ba      	str	r2, [r7, #40]	; 0x28
 800e762:	617b      	str	r3, [r7, #20]
 800e764:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 800e766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e768:	601a      	str	r2, [r3, #0]
}
 800e76a:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(ctx->state[2], output,  8);
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	f103 0208 	add.w	r2, r3, #8
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	691b      	ldr	r3, [r3, #16]
 800e776:	627a      	str	r2, [r7, #36]	; 0x24
 800e778:	61bb      	str	r3, [r7, #24]
 800e77a:	69ba      	ldr	r2, [r7, #24]
    memcpy(p, &x, sizeof(x));
 800e77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77e:	601a      	str	r2, [r3, #0]
}
 800e780:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(ctx->state[3], output, 12);
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	f103 020c 	add.w	r2, r3, #12
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	695b      	ldr	r3, [r3, #20]
 800e78c:	623a      	str	r2, [r7, #32]
 800e78e:	61fb      	str	r3, [r7, #28]
 800e790:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 800e792:	6a3b      	ldr	r3, [r7, #32]
 800e794:	601a      	str	r2, [r3, #0]
}
 800e796:	bf00      	nop

    ret = 0;
 800e798:	2300      	movs	r3, #0
 800e79a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e79c:	e002      	b.n	800e7a4 <mbedtls_md5_finish+0x134>
            goto exit;
 800e79e:	bf00      	nop
 800e7a0:	e000      	b.n	800e7a4 <mbedtls_md5_finish+0x134>
        goto exit;
 800e7a2:	bf00      	nop

exit:
    mbedtls_md5_free(ctx);
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7fe fe5a 	bl	800d45e <mbedtls_md5_free>
    return ret;
 800e7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3748      	adds	r7, #72	; 0x48
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <mbedtls_md5>:
 * output = MD5( input buffer )
 */
int mbedtls_md5(const unsigned char *input,
                size_t ilen,
                unsigned char output[16])
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b09c      	sub	sp, #112	; 0x70
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e7c0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e7c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    mbedtls_md5_context ctx;

    mbedtls_md5_init(&ctx);
 800e7c6:	f107 0314 	add.w	r3, r7, #20
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7fe fe3a 	bl	800d444 <mbedtls_md5_init>

    if ((ret = mbedtls_md5_starts(&ctx)) != 0) {
 800e7d0:	f107 0314 	add.w	r3, r7, #20
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fe fe53 	bl	800d480 <mbedtls_md5_starts>
 800e7da:	66f8      	str	r0, [r7, #108]	; 0x6c
 800e7dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d114      	bne.n	800e80c <mbedtls_md5+0x58>
        goto exit;
    }

    if ((ret = mbedtls_md5_update(&ctx, input, ilen)) != 0) {
 800e7e2:	f107 0314 	add.w	r3, r7, #20
 800e7e6:	68ba      	ldr	r2, [r7, #8]
 800e7e8:	68f9      	ldr	r1, [r7, #12]
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7ff fec8 	bl	800e580 <mbedtls_md5_update>
 800e7f0:	66f8      	str	r0, [r7, #108]	; 0x6c
 800e7f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d10b      	bne.n	800e810 <mbedtls_md5+0x5c>
        goto exit;
    }

    if ((ret = mbedtls_md5_finish(&ctx, output)) != 0) {
 800e7f8:	f107 0314 	add.w	r3, r7, #20
 800e7fc:	6879      	ldr	r1, [r7, #4]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7ff ff36 	bl	800e670 <mbedtls_md5_finish>
 800e804:	66f8      	str	r0, [r7, #108]	; 0x6c
 800e806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e808:	2b00      	cmp	r3, #0
        goto exit;
    }

exit:
 800e80a:	e002      	b.n	800e812 <mbedtls_md5+0x5e>
        goto exit;
 800e80c:	bf00      	nop
 800e80e:	e000      	b.n	800e812 <mbedtls_md5+0x5e>
        goto exit;
 800e810:	bf00      	nop
    mbedtls_md5_free(&ctx);
 800e812:	f107 0314 	add.w	r3, r7, #20
 800e816:	4618      	mov	r0, r3
 800e818:	f7fe fe21 	bl	800d45e <mbedtls_md5_free>

    return ret;
 800e81c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3770      	adds	r7, #112	; 0x70
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <mbedtls_cipher_info_get_block_size>:
{
 800e826:	b480      	push	{r7}
 800e828:	b083      	sub	sp, #12
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d101      	bne.n	800e838 <mbedtls_cipher_info_get_block_size+0x12>
        return 0;
 800e834:	2300      	movs	r3, #0
 800e836:	e004      	b.n	800e842 <mbedtls_cipher_info_get_block_size+0x1c>
    return (size_t) (info->MBEDTLS_PRIVATE(block_size));
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	791b      	ldrb	r3, [r3, #4]
 800e83c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800e840:	b2db      	uxtb	r3, r3
}
 800e842:	4618      	mov	r0, r3
 800e844:	370c      	adds	r7, #12
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr

0800e84e <mbedtls_nist_kw_init>:

/*
 * Initialize context
 */
void mbedtls_nist_kw_init(mbedtls_nist_kw_context *ctx)
{
 800e84e:	b580      	push	{r7, lr}
 800e850:	b082      	sub	sp, #8
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_nist_kw_context));
 800e856:	2244      	movs	r2, #68	; 0x44
 800e858:	2100      	movs	r1, #0
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f00e fcae 	bl	801d1bc <memset>
}
 800e860:	bf00      	nop
 800e862:	3708      	adds	r7, #8
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <mbedtls_nist_kw_setkey>:
int mbedtls_nist_kw_setkey(mbedtls_nist_kw_context *ctx,
                           mbedtls_cipher_id_t cipher,
                           const unsigned char *key,
                           unsigned int keybits,
                           const int is_wrap)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	607a      	str	r2, [r7, #4]
 800e872:	603b      	str	r3, [r7, #0]
 800e874:	460b      	mov	r3, r1
 800e876:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e878:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e87c:	617b      	str	r3, [r7, #20]
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values(cipher,
 800e87e:	6839      	ldr	r1, [r7, #0]
 800e880:	7afb      	ldrb	r3, [r7, #11]
 800e882:	2201      	movs	r2, #1
 800e884:	4618      	mov	r0, r3
 800e886:	f7f9 fa8f 	bl	8007da8 <mbedtls_cipher_info_from_values>
 800e88a:	6138      	str	r0, [r7, #16]
                                                  keybits,
                                                  MBEDTLS_MODE_ECB);
    if (cipher_info == NULL) {
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d101      	bne.n	800e896 <mbedtls_nist_kw_setkey+0x2e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800e892:	4b1a      	ldr	r3, [pc, #104]	; (800e8fc <mbedtls_nist_kw_setkey+0x94>)
 800e894:	e02e      	b.n	800e8f4 <mbedtls_nist_kw_setkey+0x8c>
    }

    if (mbedtls_cipher_info_get_block_size(cipher_info) != 16) {
 800e896:	6938      	ldr	r0, [r7, #16]
 800e898:	f7ff ffc5 	bl	800e826 <mbedtls_cipher_info_get_block_size>
 800e89c:	4603      	mov	r3, r0
 800e89e:	2b10      	cmp	r3, #16
 800e8a0:	d001      	beq.n	800e8a6 <mbedtls_nist_kw_setkey+0x3e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800e8a2:	4b16      	ldr	r3, [pc, #88]	; (800e8fc <mbedtls_nist_kw_setkey+0x94>)
 800e8a4:	e026      	b.n	800e8f4 <mbedtls_nist_kw_setkey+0x8c>
     *  lengths of 128, 192, or 256 bits, is the only block cipher that fits
     *  this profile."
     *  Currently we don't support other 128 bit block ciphers for key wrapping,
     *  such as Camellia and Aria.
     */
    if (cipher != MBEDTLS_CIPHER_ID_AES) {
 800e8a6:	7afb      	ldrb	r3, [r7, #11]
 800e8a8:	2b02      	cmp	r3, #2
 800e8aa:	d001      	beq.n	800e8b0 <mbedtls_nist_kw_setkey+0x48>
        return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
 800e8ac:	4b14      	ldr	r3, [pc, #80]	; (800e900 <mbedtls_nist_kw_setkey+0x98>)
 800e8ae:	e021      	b.n	800e8f4 <mbedtls_nist_kw_setkey+0x8c>
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7f9 fabf 	bl	8007e36 <mbedtls_cipher_free>

    if ((ret = mbedtls_cipher_setup(&ctx->cipher_ctx, cipher_info)) != 0) {
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6939      	ldr	r1, [r7, #16]
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7f9 fae3 	bl	8007e88 <mbedtls_cipher_setup>
 800e8c2:	6178      	str	r0, [r7, #20]
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d001      	beq.n	800e8ce <mbedtls_nist_kw_setkey+0x66>
        return ret;
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	e012      	b.n	800e8f4 <mbedtls_nist_kw_setkey+0x8c>
    }

    if ((ret = mbedtls_cipher_setkey(&ctx->cipher_ctx, key, keybits,
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	683a      	ldr	r2, [r7, #0]
 800e8d2:	6a3b      	ldr	r3, [r7, #32]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	bf14      	ite	ne
 800e8d8:	2301      	movne	r3, #1
 800e8da:	2300      	moveq	r3, #0
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	b25b      	sxtb	r3, r3
 800e8e0:	6879      	ldr	r1, [r7, #4]
 800e8e2:	f7f9 fb03 	bl	8007eec <mbedtls_cipher_setkey>
 800e8e6:	6178      	str	r0, [r7, #20]
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d001      	beq.n	800e8f2 <mbedtls_nist_kw_setkey+0x8a>
                                     is_wrap ? MBEDTLS_ENCRYPT :
                                     MBEDTLS_DECRYPT)
         ) != 0) {
        return ret;
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	e000      	b.n	800e8f4 <mbedtls_nist_kw_setkey+0x8c>
    }

    return 0;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3718      	adds	r7, #24
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	ffff9f00 	.word	0xffff9f00
 800e900:	ffff9f80 	.word	0xffff9f80

0800e904 <mbedtls_nist_kw_free>:

/*
 * Free context
 */
void mbedtls_nist_kw_free(mbedtls_nist_kw_context *ctx)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d008      	beq.n	800e924 <mbedtls_nist_kw_free+0x20>
        return;
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	4618      	mov	r0, r3
 800e916:	f7f9 fa8e 	bl	8007e36 <mbedtls_cipher_free>
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_nist_kw_context));
 800e91a:	2144      	movs	r1, #68	; 0x44
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 f805 	bl	800e92c <mbedtls_platform_zeroize>
 800e922:	e000      	b.n	800e926 <mbedtls_nist_kw_free+0x22>
        return;
 800e924:	bf00      	nop
}
 800e926:	3708      	adds	r7, #8
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <mbedtls_platform_zeroize>:
    && !defined(_WIN32)
static void *(*const volatile memset_func)(void *, int, size_t) = memset;
#endif

void mbedtls_platform_zeroize(void *buf, size_t len)
{
 800e92c:	b5b0      	push	{r4, r5, r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
    if (len > 0) {
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d015      	beq.n	800e968 <mbedtls_platform_zeroize+0x3c>
#elif defined(__STDC_LIB_EXT1__) && !defined(__IAR_SYSTEMS_ICC__)
        memset_s(buf, len, 0, len);
#elif defined(_WIN32)
        SecureZeroMemory(buf, len);
#else
        memset_func(buf, 0, len);
 800e93c:	4b0c      	ldr	r3, [pc, #48]	; (800e970 <mbedtls_platform_zeroize+0x44>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	683a      	ldr	r2, [r7, #0]
 800e942:	2100      	movs	r1, #0
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	4798      	blx	r3
#pragma clang diagnostic ignored "-Wvla"
#elif defined(MBEDTLS_COMPILER_IS_GCC)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
#endif
        asm volatile ("" : : "m" (*(char (*)[len]) buf) :);
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	461a      	mov	r2, r3
 800e94c:	3a01      	subs	r2, #1
 800e94e:	60fa      	str	r2, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	461c      	mov	r4, r3
 800e954:	4615      	mov	r5, r2
 800e956:	f04f 0200 	mov.w	r2, #0
 800e95a:	f04f 0300 	mov.w	r3, #0
 800e95e:	00eb      	lsls	r3, r5, #3
 800e960:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e964:	00e2      	lsls	r2, r4, #3
 800e966:	687b      	ldr	r3, [r7, #4]
#pragma GCC diagnostic pop
#endif
#endif
#endif
    }
}
 800e968:	bf00      	nop
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bdb0      	pop	{r4, r5, r7, pc}
 800e970:	20000044 	.word	0x20000044

0800e974 <mbedtls_zeroize_and_free>:
#endif /* MBEDTLS_PLATFORM_ZEROIZE_ALT */

void mbedtls_zeroize_and_free(void *buf, size_t len)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
    if (buf != NULL) {
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d003      	beq.n	800e98c <mbedtls_zeroize_and_free+0x18>
        mbedtls_platform_zeroize(buf, len);
 800e984:	6839      	ldr	r1, [r7, #0]
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f7ff ffd0 	bl	800e92c <mbedtls_platform_zeroize>
    }

    mbedtls_free(buf);
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f00d fd4b 	bl	801c428 <free>
}
 800e992:	bf00      	nop
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}

0800e99a <mul64>:

    return lo + (me << 16) + ((uint64_t) hi << 32);
}
#else
static inline uint64_t mul64(uint32_t a, uint32_t b)
{
 800e99a:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
    return (uint64_t) a * b;
 800e9a6:	6879      	ldr	r1, [r7, #4]
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	4688      	mov	r8, r1
 800e9ac:	4681      	mov	r9, r0
 800e9ae:	6839      	ldr	r1, [r7, #0]
 800e9b0:	2000      	movs	r0, #0
 800e9b2:	460c      	mov	r4, r1
 800e9b4:	4605      	mov	r5, r0
 800e9b6:	fb04 f009 	mul.w	r0, r4, r9
 800e9ba:	fb08 f105 	mul.w	r1, r8, r5
 800e9be:	4401      	add	r1, r0
 800e9c0:	fba8 2304 	umull	r2, r3, r8, r4
 800e9c4:	4419      	add	r1, r3
 800e9c6:	460b      	mov	r3, r1
}
 800e9c8:	4610      	mov	r0, r2
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	370c      	adds	r7, #12
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800e9d4:	4770      	bx	lr

0800e9d6 <poly1305_process>:
 */
static void poly1305_process(mbedtls_poly1305_context *ctx,
                             size_t nblocks,
                             const unsigned char *input,
                             uint32_t needs_padding)
{
 800e9d6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e9da:	b0fc      	sub	sp, #496	; 0x1f0
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 800e9e2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 800e9e6:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800e9ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    uint64_t d0, d1, d2, d3;
    uint32_t acc0, acc1, acc2, acc3, acc4;
    uint32_t r0, r1, r2, r3;
    uint32_t rs1, rs2, rs3;
    size_t offset  = 0U;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    size_t i;

    r0 = ctx->r[0];
 800e9f4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    r1 = ctx->r[1];
 800e9fe:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    r2 = ctx->r[2];
 800ea08:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    r3 = ctx->r[3];
 800ea12:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

    rs1 = r1 + (r1 >> 2U);
 800ea1c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800ea20:	089a      	lsrs	r2, r3, #2
 800ea22:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800ea26:	4413      	add	r3, r2
 800ea28:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    rs2 = r2 + (r2 >> 2U);
 800ea2c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800ea30:	089a      	lsrs	r2, r3, #2
 800ea32:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800ea36:	4413      	add	r3, r2
 800ea38:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    rs3 = r3 + (r3 >> 2U);
 800ea3c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800ea40:	089a      	lsrs	r2, r3, #2
 800ea42:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800ea46:	4413      	add	r3, r2
 800ea48:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    acc0 = ctx->acc[0];
 800ea4c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ea50:	6a1b      	ldr	r3, [r3, #32]
 800ea52:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    acc1 = ctx->acc[1];
 800ea56:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ea5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    acc2 = ctx->acc[2];
 800ea60:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ea64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea66:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    acc3 = ctx->acc[3];
 800ea6a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ea6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    acc4 = ctx->acc[4];
 800ea74:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ea78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea7a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

    /* Process full blocks */
    for (i = 0U; i < nblocks; i++) {
 800ea7e:	2300      	movs	r3, #0
 800ea80:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800ea84:	e35f      	b.n	800f146 <poly1305_process+0x770>
        /* The input block is treated as a 128-bit little-endian integer */
        d0   = MBEDTLS_GET_UINT32_LE(input, offset + 0);
 800ea86:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800ea8a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800ea8e:	4413      	add	r3, r2
 800ea90:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800ea94:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ea98:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800ea9a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    return r;
 800ea9e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800eaa8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800eaac:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800eab0:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        d1   = MBEDTLS_GET_UINT32_LE(input, offset + 4);
 800eab4:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800eab8:	1d1a      	adds	r2, r3, #4
 800eaba:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800eabe:	4413      	add	r3, r2
 800eac0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800eac4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800eac8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800eaca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    return r;
 800eace:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ead2:	2200      	movs	r2, #0
 800ead4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ead8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800eadc:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800eae0:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
        d2   = MBEDTLS_GET_UINT32_LE(input, offset + 8);
 800eae4:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800eae8:	f103 0208 	add.w	r2, r3, #8
 800eaec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800eaf0:	4413      	add	r3, r2
 800eaf2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800eaf6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800eafa:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800eafc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    return r;
 800eb00:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800eb04:	2200      	movs	r2, #0
 800eb06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800eb0a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800eb0e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800eb12:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
        d3   = MBEDTLS_GET_UINT32_LE(input, offset + 12);
 800eb16:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800eb1a:	f103 020c 	add.w	r2, r3, #12
 800eb1e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800eb22:	4413      	add	r3, r2
 800eb24:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800eb28:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800eb2c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800eb2e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    return r;
 800eb32:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800eb36:	2200      	movs	r2, #0
 800eb38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eb3c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800eb40:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800eb44:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198

        /* Compute: acc += (padded) block as a 130-bit integer */
        d0  += (uint64_t) acc0;
 800eb48:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800eb52:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800eb56:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800eb5a:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800eb5e:	4621      	mov	r1, r4
 800eb60:	1851      	adds	r1, r2, r1
 800eb62:	67b9      	str	r1, [r7, #120]	; 0x78
 800eb64:	4629      	mov	r1, r5
 800eb66:	414b      	adcs	r3, r1
 800eb68:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eb6a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800eb6e:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        d1  += (uint64_t) acc1 + (d0 >> 32U);
 800eb72:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800eb76:	2200      	movs	r2, #0
 800eb78:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800eb7c:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800eb80:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800eb84:	f04f 0000 	mov.w	r0, #0
 800eb88:	f04f 0100 	mov.w	r1, #0
 800eb8c:	0018      	movs	r0, r3
 800eb8e:	2100      	movs	r1, #0
 800eb90:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800eb94:	4623      	mov	r3, r4
 800eb96:	181b      	adds	r3, r3, r0
 800eb98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800eb9c:	462b      	mov	r3, r5
 800eb9e:	414b      	adcs	r3, r1
 800eba0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800eba4:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800eba8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800ebac:	4621      	mov	r1, r4
 800ebae:	1851      	adds	r1, r2, r1
 800ebb0:	6739      	str	r1, [r7, #112]	; 0x70
 800ebb2:	4629      	mov	r1, r5
 800ebb4:	414b      	adcs	r3, r1
 800ebb6:	677b      	str	r3, [r7, #116]	; 0x74
 800ebb8:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800ebbc:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
        d2  += (uint64_t) acc2 + (d1 >> 32U);
 800ebc0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800ebca:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800ebce:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800ebd2:	f04f 0000 	mov.w	r0, #0
 800ebd6:	f04f 0100 	mov.w	r1, #0
 800ebda:	0018      	movs	r0, r3
 800ebdc:	2100      	movs	r1, #0
 800ebde:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 800ebe2:	4623      	mov	r3, r4
 800ebe4:	181b      	adds	r3, r3, r0
 800ebe6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800ebea:	462b      	mov	r3, r5
 800ebec:	414b      	adcs	r3, r1
 800ebee:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800ebf2:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800ebf6:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 800ebfa:	4621      	mov	r1, r4
 800ebfc:	1851      	adds	r1, r2, r1
 800ebfe:	66b9      	str	r1, [r7, #104]	; 0x68
 800ec00:	4629      	mov	r1, r5
 800ec02:	414b      	adcs	r3, r1
 800ec04:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec06:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800ec0a:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
        d3  += (uint64_t) acc3 + (d2 >> 32U);
 800ec0e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800ec12:	2200      	movs	r2, #0
 800ec14:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800ec18:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800ec1c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800ec20:	f04f 0000 	mov.w	r0, #0
 800ec24:	f04f 0100 	mov.w	r1, #0
 800ec28:	0018      	movs	r0, r3
 800ec2a:	2100      	movs	r1, #0
 800ec2c:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 800ec30:	4623      	mov	r3, r4
 800ec32:	181b      	adds	r3, r3, r0
 800ec34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800ec38:	462b      	mov	r3, r5
 800ec3a:	414b      	adcs	r3, r1
 800ec3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800ec40:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800ec44:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800ec48:	4621      	mov	r1, r4
 800ec4a:	1851      	adds	r1, r2, r1
 800ec4c:	6639      	str	r1, [r7, #96]	; 0x60
 800ec4e:	4629      	mov	r1, r5
 800ec50:	414b      	adcs	r3, r1
 800ec52:	667b      	str	r3, [r7, #100]	; 0x64
 800ec54:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800ec58:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
        acc0 = (uint32_t) d0;
 800ec5c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ec60:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        acc1 = (uint32_t) d1;
 800ec64:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800ec68:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
        acc2 = (uint32_t) d2;
 800ec6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800ec70:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        acc3 = (uint32_t) d3;
 800ec74:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800ec78:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        acc4 += (uint32_t) (d3 >> 32U) + needs_padding;
 800ec7c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800ec80:	f04f 0000 	mov.w	r0, #0
 800ec84:	f04f 0100 	mov.w	r1, #0
 800ec88:	0018      	movs	r0, r3
 800ec8a:	2100      	movs	r1, #0
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800ec92:	441a      	add	r2, r3
 800ec94:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800ec98:	4413      	add	r3, r2
 800ec9a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        /* Compute: acc *= r */
        d0 = mul64(acc0, r0) +
 800ec9e:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800eca2:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800eca6:	f7ff fe78 	bl	800e99a <mul64>
 800ecaa:	4604      	mov	r4, r0
 800ecac:	460d      	mov	r5, r1
             mul64(acc1, rs3) +
 800ecae:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800ecb2:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800ecb6:	f7ff fe70 	bl	800e99a <mul64>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	460b      	mov	r3, r1
        d0 = mul64(acc0, r0) +
 800ecbe:	18a1      	adds	r1, r4, r2
 800ecc0:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800ecc4:	eb45 0303 	adc.w	r3, r5, r3
 800ecc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
             mul64(acc2, rs2) +
 800eccc:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800ecd0:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800ecd4:	f7ff fe61 	bl	800e99a <mul64>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	460b      	mov	r3, r1
             mul64(acc1, rs3) +
 800ecdc:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800ece0:	4621      	mov	r1, r4
 800ece2:	1889      	adds	r1, r1, r2
 800ece4:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800ece8:	4629      	mov	r1, r5
 800ecea:	eb41 0303 	adc.w	r3, r1, r3
 800ecee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
             mul64(acc3, rs1);
 800ecf2:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800ecf6:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800ecfa:	f7ff fe4e 	bl	800e99a <mul64>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	460b      	mov	r3, r1
        d0 = mul64(acc0, r0) +
 800ed02:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800ed06:	4621      	mov	r1, r4
 800ed08:	1889      	adds	r1, r1, r2
 800ed0a:	65b9      	str	r1, [r7, #88]	; 0x58
 800ed0c:	4629      	mov	r1, r5
 800ed0e:	eb41 0303 	adc.w	r3, r1, r3
 800ed12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed14:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800ed18:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        d1 = mul64(acc0, r1) +
 800ed1c:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800ed20:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800ed24:	f7ff fe39 	bl	800e99a <mul64>
 800ed28:	4604      	mov	r4, r0
 800ed2a:	460d      	mov	r5, r1
             mul64(acc1, r0) +
 800ed2c:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800ed30:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800ed34:	f7ff fe31 	bl	800e99a <mul64>
 800ed38:	4602      	mov	r2, r0
 800ed3a:	460b      	mov	r3, r1
        d1 = mul64(acc0, r1) +
 800ed3c:	18a1      	adds	r1, r4, r2
 800ed3e:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800ed42:	eb45 0303 	adc.w	r3, r5, r3
 800ed46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
             mul64(acc2, rs3) +
 800ed4a:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800ed4e:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800ed52:	f7ff fe22 	bl	800e99a <mul64>
 800ed56:	4602      	mov	r2, r0
 800ed58:	460b      	mov	r3, r1
             mul64(acc1, r0) +
 800ed5a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800ed5e:	4621      	mov	r1, r4
 800ed60:	1889      	adds	r1, r1, r2
 800ed62:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800ed66:	4629      	mov	r1, r5
 800ed68:	eb41 0303 	adc.w	r3, r1, r3
 800ed6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
             mul64(acc3, rs2) +
 800ed70:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800ed74:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800ed78:	f7ff fe0f 	bl	800e99a <mul64>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
             mul64(acc2, rs3) +
 800ed80:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 800ed84:	4621      	mov	r1, r4
 800ed86:	1889      	adds	r1, r1, r2
 800ed88:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800ed8c:	4629      	mov	r1, r5
 800ed8e:	eb41 0303 	adc.w	r3, r1, r3
 800ed92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
             mul64(acc4, rs1);
 800ed96:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800ed9a:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 800ed9e:	f7ff fdfc 	bl	800e99a <mul64>
 800eda2:	4602      	mov	r2, r0
 800eda4:	460b      	mov	r3, r1
        d1 = mul64(acc0, r1) +
 800eda6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800edaa:	4621      	mov	r1, r4
 800edac:	1889      	adds	r1, r1, r2
 800edae:	6539      	str	r1, [r7, #80]	; 0x50
 800edb0:	4629      	mov	r1, r5
 800edb2:	eb41 0303 	adc.w	r3, r1, r3
 800edb6:	657b      	str	r3, [r7, #84]	; 0x54
 800edb8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800edbc:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
        d2 = mul64(acc0, r2) +
 800edc0:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800edc4:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800edc8:	f7ff fde7 	bl	800e99a <mul64>
 800edcc:	4604      	mov	r4, r0
 800edce:	460d      	mov	r5, r1
             mul64(acc1, r1) +
 800edd0:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800edd4:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800edd8:	f7ff fddf 	bl	800e99a <mul64>
 800eddc:	4602      	mov	r2, r0
 800edde:	460b      	mov	r3, r1
        d2 = mul64(acc0, r2) +
 800ede0:	18a1      	adds	r1, r4, r2
 800ede2:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800ede6:	eb45 0303 	adc.w	r3, r5, r3
 800edea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
             mul64(acc2, r0) +
 800edee:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800edf2:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800edf6:	f7ff fdd0 	bl	800e99a <mul64>
 800edfa:	4602      	mov	r2, r0
 800edfc:	460b      	mov	r3, r1
             mul64(acc1, r1) +
 800edfe:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800ee02:	4621      	mov	r1, r4
 800ee04:	1889      	adds	r1, r1, r2
 800ee06:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800ee0a:	4629      	mov	r1, r5
 800ee0c:	eb41 0303 	adc.w	r3, r1, r3
 800ee10:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
             mul64(acc3, rs3) +
 800ee14:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800ee18:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800ee1c:	f7ff fdbd 	bl	800e99a <mul64>
 800ee20:	4602      	mov	r2, r0
 800ee22:	460b      	mov	r3, r1
             mul64(acc2, r0) +
 800ee24:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800ee28:	4621      	mov	r1, r4
 800ee2a:	1889      	adds	r1, r1, r2
 800ee2c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800ee30:	4629      	mov	r1, r5
 800ee32:	eb41 0303 	adc.w	r3, r1, r3
 800ee36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
             mul64(acc4, rs2);
 800ee3a:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800ee3e:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 800ee42:	f7ff fdaa 	bl	800e99a <mul64>
 800ee46:	4602      	mov	r2, r0
 800ee48:	460b      	mov	r3, r1
        d2 = mul64(acc0, r2) +
 800ee4a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800ee4e:	4621      	mov	r1, r4
 800ee50:	1889      	adds	r1, r1, r2
 800ee52:	64b9      	str	r1, [r7, #72]	; 0x48
 800ee54:	4629      	mov	r1, r5
 800ee56:	eb41 0303 	adc.w	r3, r1, r3
 800ee5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee5c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800ee60:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
        d3 = mul64(acc0, r3) +
 800ee64:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800ee68:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800ee6c:	f7ff fd95 	bl	800e99a <mul64>
 800ee70:	4604      	mov	r4, r0
 800ee72:	460d      	mov	r5, r1
             mul64(acc1, r2) +
 800ee74:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800ee78:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800ee7c:	f7ff fd8d 	bl	800e99a <mul64>
 800ee80:	4602      	mov	r2, r0
 800ee82:	460b      	mov	r3, r1
        d3 = mul64(acc0, r3) +
 800ee84:	18a1      	adds	r1, r4, r2
 800ee86:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800ee8a:	eb45 0303 	adc.w	r3, r5, r3
 800ee8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
             mul64(acc2, r1) +
 800ee92:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800ee96:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800ee9a:	f7ff fd7e 	bl	800e99a <mul64>
 800ee9e:	4602      	mov	r2, r0
 800eea0:	460b      	mov	r3, r1
             mul64(acc1, r2) +
 800eea2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800eea6:	4621      	mov	r1, r4
 800eea8:	1889      	adds	r1, r1, r2
 800eeaa:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800eeae:	4629      	mov	r1, r5
 800eeb0:	eb41 0303 	adc.w	r3, r1, r3
 800eeb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
             mul64(acc3, r0) +
 800eeb8:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800eebc:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800eec0:	f7ff fd6b 	bl	800e99a <mul64>
 800eec4:	4602      	mov	r2, r0
 800eec6:	460b      	mov	r3, r1
             mul64(acc2, r1) +
 800eec8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800eecc:	4621      	mov	r1, r4
 800eece:	eb11 0a02 	adds.w	sl, r1, r2
 800eed2:	4629      	mov	r1, r5
 800eed4:	eb41 0b03 	adc.w	fp, r1, r3
             mul64(acc4, rs3);
 800eed8:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800eedc:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 800eee0:	f7ff fd5b 	bl	800e99a <mul64>
 800eee4:	4602      	mov	r2, r0
 800eee6:	460b      	mov	r3, r1
        d3 = mul64(acc0, r3) +
 800eee8:	eb1a 0102 	adds.w	r1, sl, r2
 800eeec:	6439      	str	r1, [r7, #64]	; 0x40
 800eeee:	eb4b 0303 	adc.w	r3, fp, r3
 800eef2:	647b      	str	r3, [r7, #68]	; 0x44
 800eef4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800eef8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
        acc4 *= r0;
 800eefc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800ef00:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800ef04:	fb02 f303 	mul.w	r3, r2, r3
 800ef08:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        /* Compute: acc %= (2^130 - 5) (partial remainder) */
        d1 += (d0 >> 32);
 800ef0c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800ef10:	f04f 0000 	mov.w	r0, #0
 800ef14:	f04f 0100 	mov.w	r1, #0
 800ef18:	0018      	movs	r0, r3
 800ef1a:	2100      	movs	r1, #0
 800ef1c:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800ef20:	1814      	adds	r4, r2, r0
 800ef22:	63bc      	str	r4, [r7, #56]	; 0x38
 800ef24:	414b      	adcs	r3, r1
 800ef26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef28:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800ef2c:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
        d2 += (d1 >> 32);
 800ef30:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800ef34:	f04f 0000 	mov.w	r0, #0
 800ef38:	f04f 0100 	mov.w	r1, #0
 800ef3c:	0018      	movs	r0, r3
 800ef3e:	2100      	movs	r1, #0
 800ef40:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800ef44:	1814      	adds	r4, r2, r0
 800ef46:	633c      	str	r4, [r7, #48]	; 0x30
 800ef48:	414b      	adcs	r3, r1
 800ef4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ef4c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800ef50:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
        d3 += (d2 >> 32);
 800ef54:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800ef58:	f04f 0000 	mov.w	r0, #0
 800ef5c:	f04f 0100 	mov.w	r1, #0
 800ef60:	0018      	movs	r0, r3
 800ef62:	2100      	movs	r1, #0
 800ef64:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800ef68:	1814      	adds	r4, r2, r0
 800ef6a:	62bc      	str	r4, [r7, #40]	; 0x28
 800ef6c:	414b      	adcs	r3, r1
 800ef6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef70:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800ef74:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
        acc0 = (uint32_t) d0;
 800ef78:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ef7c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        acc1 = (uint32_t) d1;
 800ef80:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800ef84:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
        acc2 = (uint32_t) d2;
 800ef88:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800ef8c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        acc3 = (uint32_t) d3;
 800ef90:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800ef94:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        acc4 = (uint32_t) (d3 >> 32) + acc4;
 800ef98:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800ef9c:	f04f 0000 	mov.w	r0, #0
 800efa0:	f04f 0100 	mov.w	r1, #0
 800efa4:	0018      	movs	r0, r3
 800efa6:	2100      	movs	r1, #0
 800efa8:	4602      	mov	r2, r0
 800efaa:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800efae:	4413      	add	r3, r2
 800efb0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        d0 = (uint64_t) acc0 + (acc4 >> 2) + (acc4 & 0xFFFFFFFCU);
 800efb4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800efb8:	2200      	movs	r2, #0
 800efba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800efbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800efc2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800efc6:	089b      	lsrs	r3, r3, #2
 800efc8:	2200      	movs	r2, #0
 800efca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800efce:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800efd2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800efd6:	4623      	mov	r3, r4
 800efd8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800efdc:	4602      	mov	r2, r0
 800efde:	eb13 0802 	adds.w	r8, r3, r2
 800efe2:	462b      	mov	r3, r5
 800efe4:	460a      	mov	r2, r1
 800efe6:	eb43 0902 	adc.w	r9, r3, r2
 800efea:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800efee:	2200      	movs	r2, #0
 800eff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800eff4:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800eff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800effc:	f023 0303 	bic.w	r3, r3, #3
 800f000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f004:	2300      	movs	r3, #0
 800f006:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f00a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f00e:	460b      	mov	r3, r1
 800f010:	eb18 0303 	adds.w	r3, r8, r3
 800f014:	623b      	str	r3, [r7, #32]
 800f016:	4613      	mov	r3, r2
 800f018:	eb49 0303 	adc.w	r3, r9, r3
 800f01c:	627b      	str	r3, [r7, #36]	; 0x24
 800f01e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f022:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc4 &= 3U;
 800f026:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800f02a:	f003 0303 	and.w	r3, r3, #3
 800f02e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
        acc0 = (uint32_t) d0;
 800f032:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800f036:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        d0 = (uint64_t) acc1 + (d0 >> 32U);
 800f03a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800f03e:	2200      	movs	r2, #0
 800f040:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f044:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f048:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800f04c:	f04f 0000 	mov.w	r0, #0
 800f050:	f04f 0100 	mov.w	r1, #0
 800f054:	0018      	movs	r0, r3
 800f056:	2100      	movs	r1, #0
 800f058:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800f05c:	4623      	mov	r3, r4
 800f05e:	181b      	adds	r3, r3, r0
 800f060:	61bb      	str	r3, [r7, #24]
 800f062:	462b      	mov	r3, r5
 800f064:	414b      	adcs	r3, r1
 800f066:	61fb      	str	r3, [r7, #28]
 800f068:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f06c:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc1 = (uint32_t) d0;
 800f070:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800f074:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
        d0 = (uint64_t) acc2 + (d0 >> 32U);
 800f078:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800f07c:	2200      	movs	r2, #0
 800f07e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f082:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800f086:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800f08a:	f04f 0000 	mov.w	r0, #0
 800f08e:	f04f 0100 	mov.w	r1, #0
 800f092:	0018      	movs	r0, r3
 800f094:	2100      	movs	r1, #0
 800f096:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800f09a:	4623      	mov	r3, r4
 800f09c:	181b      	adds	r3, r3, r0
 800f09e:	613b      	str	r3, [r7, #16]
 800f0a0:	462b      	mov	r3, r5
 800f0a2:	414b      	adcs	r3, r1
 800f0a4:	617b      	str	r3, [r7, #20]
 800f0a6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f0aa:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc2 = (uint32_t) d0;
 800f0ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800f0b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        d0 = (uint64_t) acc3 + (d0 >> 32U);
 800f0b6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f0c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f0c4:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800f0c8:	f04f 0000 	mov.w	r0, #0
 800f0cc:	f04f 0100 	mov.w	r1, #0
 800f0d0:	0018      	movs	r0, r3
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800f0d8:	4623      	mov	r3, r4
 800f0da:	181b      	adds	r3, r3, r0
 800f0dc:	60bb      	str	r3, [r7, #8]
 800f0de:	462b      	mov	r3, r5
 800f0e0:	414b      	adcs	r3, r1
 800f0e2:	60fb      	str	r3, [r7, #12]
 800f0e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f0e8:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc3 = (uint32_t) d0;
 800f0ec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800f0f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        d0 = (uint64_t) acc4 + (d0 >> 32U);
 800f0f4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f0fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f102:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800f106:	f04f 0000 	mov.w	r0, #0
 800f10a:	f04f 0100 	mov.w	r1, #0
 800f10e:	0018      	movs	r0, r3
 800f110:	2100      	movs	r1, #0
 800f112:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800f116:	4623      	mov	r3, r4
 800f118:	181b      	adds	r3, r3, r0
 800f11a:	603b      	str	r3, [r7, #0]
 800f11c:	462b      	mov	r3, r5
 800f11e:	414b      	adcs	r3, r1
 800f120:	607b      	str	r3, [r7, #4]
 800f122:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f126:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc4 = (uint32_t) d0;
 800f12a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800f12e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        offset    += POLY1305_BLOCK_SIZE_BYTES;
 800f132:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800f136:	3310      	adds	r3, #16
 800f138:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    for (i = 0U; i < nblocks; i++) {
 800f13c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800f140:	3301      	adds	r3, #1
 800f142:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800f146:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800f14a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f14e:	429a      	cmp	r2, r3
 800f150:	f4ff ac99 	bcc.w	800ea86 <poly1305_process+0xb0>
    }

    ctx->acc[0] = acc0;
 800f154:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f158:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800f15c:	621a      	str	r2, [r3, #32]
    ctx->acc[1] = acc1;
 800f15e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f162:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 800f166:	625a      	str	r2, [r3, #36]	; 0x24
    ctx->acc[2] = acc2;
 800f168:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f16c:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 800f170:	629a      	str	r2, [r3, #40]	; 0x28
    ctx->acc[3] = acc3;
 800f172:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f176:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800f17a:	62da      	str	r2, [r3, #44]	; 0x2c
    ctx->acc[4] = acc4;
 800f17c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f180:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800f184:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f186:	bf00      	nop
 800f188:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800f18c:	46bd      	mov	sp, r7
 800f18e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f192 <mbedtls_poly1305_init>:
    MBEDTLS_PUT_UINT32_LE(acc2, mac,  8);
    MBEDTLS_PUT_UINT32_LE(acc3, mac, 12);
}

void mbedtls_poly1305_init(mbedtls_poly1305_context *ctx)
{
 800f192:	b580      	push	{r7, lr}
 800f194:	b082      	sub	sp, #8
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_poly1305_context));
 800f19a:	2148      	movs	r1, #72	; 0x48
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f7ff fbc5 	bl	800e92c <mbedtls_platform_zeroize>
}
 800f1a2:	bf00      	nop
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <mbedtls_poly1305_free>:

void mbedtls_poly1305_free(mbedtls_poly1305_context *ctx)
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b082      	sub	sp, #8
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d004      	beq.n	800f1c2 <mbedtls_poly1305_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_poly1305_context));
 800f1b8:	2148      	movs	r1, #72	; 0x48
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7ff fbb6 	bl	800e92c <mbedtls_platform_zeroize>
 800f1c0:	e000      	b.n	800f1c4 <mbedtls_poly1305_free+0x1a>
        return;
 800f1c2:	bf00      	nop
}
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}

0800f1ca <mbedtls_poly1305_update>:
}

int mbedtls_poly1305_update(mbedtls_poly1305_context *ctx,
                            const unsigned char *input,
                            size_t ilen)
{
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	b088      	sub	sp, #32
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	60f8      	str	r0, [r7, #12]
 800f1d2:	60b9      	str	r1, [r7, #8]
 800f1d4:	607a      	str	r2, [r7, #4]
    size_t offset    = 0U;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	61fb      	str	r3, [r7, #28]
    size_t remaining = ilen;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	61bb      	str	r3, [r7, #24]
    size_t queue_free_len;
    size_t nblocks;

    if ((remaining > 0U) && (ctx->queue_len > 0U)) {
 800f1de:	69bb      	ldr	r3, [r7, #24]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d03e      	beq.n	800f262 <mbedtls_poly1305_update+0x98>
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d03a      	beq.n	800f262 <mbedtls_poly1305_update+0x98>
        queue_free_len = (POLY1305_BLOCK_SIZE_BYTES - ctx->queue_len);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1f0:	f1c3 0310 	rsb	r3, r3, #16
 800f1f4:	617b      	str	r3, [r7, #20]

        if (ilen < queue_free_len) {
 800f1f6:	687a      	ldr	r2, [r7, #4]
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d213      	bcs.n	800f226 <mbedtls_poly1305_update+0x5c>
            /* Not enough data to complete the block.
             * Store this data with the other leftovers.
             */
            memcpy(&ctx->queue[ctx->queue_len],
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f202:	3330      	adds	r3, #48	; 0x30
 800f204:	68fa      	ldr	r2, [r7, #12]
 800f206:	4413      	add	r3, r2
 800f208:	3304      	adds	r3, #4
 800f20a:	687a      	ldr	r2, [r7, #4]
 800f20c:	68b9      	ldr	r1, [r7, #8]
 800f20e:	4618      	mov	r0, r3
 800f210:	f00e f872 	bl	801d2f8 <memcpy>
                   input,
                   ilen);

            ctx->queue_len += ilen;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	441a      	add	r2, r3
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	645a      	str	r2, [r3, #68]	; 0x44

            remaining = 0U;
 800f220:	2300      	movs	r3, #0
 800f222:	61bb      	str	r3, [r7, #24]
 800f224:	e01d      	b.n	800f262 <mbedtls_poly1305_update+0x98>
        } else {
            /* Enough data to produce a complete block */
            memcpy(&ctx->queue[ctx->queue_len],
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f22a:	3330      	adds	r3, #48	; 0x30
 800f22c:	68fa      	ldr	r2, [r7, #12]
 800f22e:	4413      	add	r3, r2
 800f230:	3304      	adds	r3, #4
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	68b9      	ldr	r1, [r7, #8]
 800f236:	4618      	mov	r0, r3
 800f238:	f00e f85e 	bl	801d2f8 <memcpy>
                   input,
                   queue_free_len);

            ctx->queue_len = 0U;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2200      	movs	r2, #0
 800f240:	645a      	str	r2, [r3, #68]	; 0x44

            poly1305_process(ctx, 1U, ctx->queue, 1U);   /* add padding bit */
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f248:	2301      	movs	r3, #1
 800f24a:	2101      	movs	r1, #1
 800f24c:	68f8      	ldr	r0, [r7, #12]
 800f24e:	f7ff fbc2 	bl	800e9d6 <poly1305_process>

            offset    += queue_free_len;
 800f252:	69fa      	ldr	r2, [r7, #28]
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	4413      	add	r3, r2
 800f258:	61fb      	str	r3, [r7, #28]
            remaining -= queue_free_len;
 800f25a:	69ba      	ldr	r2, [r7, #24]
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	61bb      	str	r3, [r7, #24]
        }
    }

    if (remaining >= POLY1305_BLOCK_SIZE_BYTES) {
 800f262:	69bb      	ldr	r3, [r7, #24]
 800f264:	2b0f      	cmp	r3, #15
 800f266:	d913      	bls.n	800f290 <mbedtls_poly1305_update+0xc6>
        nblocks = remaining / POLY1305_BLOCK_SIZE_BYTES;
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	091b      	lsrs	r3, r3, #4
 800f26c:	613b      	str	r3, [r7, #16]

        poly1305_process(ctx, nblocks, &input[offset], 1U);
 800f26e:	68ba      	ldr	r2, [r7, #8]
 800f270:	69fb      	ldr	r3, [r7, #28]
 800f272:	441a      	add	r2, r3
 800f274:	2301      	movs	r3, #1
 800f276:	6939      	ldr	r1, [r7, #16]
 800f278:	68f8      	ldr	r0, [r7, #12]
 800f27a:	f7ff fbac 	bl	800e9d6 <poly1305_process>

        offset += nblocks * POLY1305_BLOCK_SIZE_BYTES;
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	011b      	lsls	r3, r3, #4
 800f282:	69fa      	ldr	r2, [r7, #28]
 800f284:	4413      	add	r3, r2
 800f286:	61fb      	str	r3, [r7, #28]
        remaining %= POLY1305_BLOCK_SIZE_BYTES;
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	f003 030f 	and.w	r3, r3, #15
 800f28e:	61bb      	str	r3, [r7, #24]
    }

    if (remaining > 0U) {
 800f290:	69bb      	ldr	r3, [r7, #24]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d00c      	beq.n	800f2b0 <mbedtls_poly1305_update+0xe6>
        /* Store partial block */
        ctx->queue_len = remaining;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	69ba      	ldr	r2, [r7, #24]
 800f29a:	645a      	str	r2, [r3, #68]	; 0x44
        memcpy(ctx->queue, &input[offset], remaining);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800f2a2:	68ba      	ldr	r2, [r7, #8]
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	4413      	add	r3, r2
 800f2a8:	69ba      	ldr	r2, [r7, #24]
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	f00e f824 	bl	801d2f8 <memcpy>
    }

    return 0;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3720      	adds	r7, #32
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <mbedtls_ripemd160_init>:
#include "mbedtls/platform.h"

#if !defined(MBEDTLS_RIPEMD160_ALT)

void mbedtls_ripemd160_init(mbedtls_ripemd160_context *ctx)
{
 800f2ba:	b580      	push	{r7, lr}
 800f2bc:	b082      	sub	sp, #8
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_ripemd160_context));
 800f2c2:	225c      	movs	r2, #92	; 0x5c
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f00d ff78 	bl	801d1bc <memset>
}
 800f2cc:	bf00      	nop
 800f2ce:	3708      	adds	r7, #8
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <mbedtls_ripemd160_free>:

void mbedtls_ripemd160_free(mbedtls_ripemd160_context *ctx)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d004      	beq.n	800f2ec <mbedtls_ripemd160_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_ripemd160_context));
 800f2e2:	215c      	movs	r1, #92	; 0x5c
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7ff fb21 	bl	800e92c <mbedtls_platform_zeroize>
 800f2ea:	e000      	b.n	800f2ee <mbedtls_ripemd160_free+0x1a>
        return;
 800f2ec:	bf00      	nop
}
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <mbedtls_ripemd160_starts>:

/*
 * RIPEMD-160 context setup
 */
int mbedtls_ripemd160_starts(mbedtls_ripemd160_context *ctx)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	4a0a      	ldr	r2, [pc, #40]	; (800f334 <mbedtls_ripemd160_starts+0x40>)
 800f30c:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4a09      	ldr	r2, [pc, #36]	; (800f338 <mbedtls_ripemd160_starts+0x44>)
 800f312:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4a09      	ldr	r2, [pc, #36]	; (800f33c <mbedtls_ripemd160_starts+0x48>)
 800f318:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4a08      	ldr	r2, [pc, #32]	; (800f340 <mbedtls_ripemd160_starts+0x4c>)
 800f31e:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	4a08      	ldr	r2, [pc, #32]	; (800f344 <mbedtls_ripemd160_starts+0x50>)
 800f324:	619a      	str	r2, [r3, #24]

    return 0;
 800f326:	2300      	movs	r3, #0
}
 800f328:	4618      	mov	r0, r3
 800f32a:	370c      	adds	r7, #12
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr
 800f334:	67452301 	.word	0x67452301
 800f338:	efcdab89 	.word	0xefcdab89
 800f33c:	98badcfe 	.word	0x98badcfe
 800f340:	10325476 	.word	0x10325476
 800f344:	c3d2e1f0 	.word	0xc3d2e1f0

0800f348 <mbedtls_internal_ripemd160_process>:
/*
 * Process one block
 */
int mbedtls_internal_ripemd160_process(mbedtls_ripemd160_context *ctx,
                                       const unsigned char data[64])
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b0bc      	sub	sp, #240	; 0xf0
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	6039      	str	r1, [r7, #0]
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f35c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f35e:	647b      	str	r3, [r7, #68]	; 0x44
    return r;
 800f360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    struct {
        uint32_t A, B, C, D, E, Ap, Bp, Cp, Dp, Ep, X[16];
    } local;

    local.X[0] = MBEDTLS_GET_UINT32_LE(data,  0);
 800f362:	673b      	str	r3, [r7, #112]	; 0x70
    local.X[1] = MBEDTLS_GET_UINT32_LE(data,  4);
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	3304      	adds	r3, #4
 800f368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f36c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f370:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f372:	643b      	str	r3, [r7, #64]	; 0x40
    return r;
 800f374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f376:	677b      	str	r3, [r7, #116]	; 0x74
    local.X[2] = MBEDTLS_GET_UINT32_LE(data,  8);
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	3308      	adds	r3, #8
 800f37c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f380:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f384:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f386:	63fb      	str	r3, [r7, #60]	; 0x3c
    return r;
 800f388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f38a:	67bb      	str	r3, [r7, #120]	; 0x78
    local.X[3] = MBEDTLS_GET_UINT32_LE(data, 12);
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	330c      	adds	r3, #12
 800f390:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f394:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f398:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f39a:	63bb      	str	r3, [r7, #56]	; 0x38
    return r;
 800f39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f39e:	67fb      	str	r3, [r7, #124]	; 0x7c
    local.X[4] = MBEDTLS_GET_UINT32_LE(data, 16);
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	3310      	adds	r3, #16
 800f3a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f3a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f3ac:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f3ae:	637b      	str	r3, [r7, #52]	; 0x34
    return r;
 800f3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    local.X[5] = MBEDTLS_GET_UINT32_LE(data, 20);
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	3314      	adds	r3, #20
 800f3ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f3be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f3c2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f3c4:	633b      	str	r3, [r7, #48]	; 0x30
    return r;
 800f3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    local.X[6] = MBEDTLS_GET_UINT32_LE(data, 24);
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	3318      	adds	r3, #24
 800f3d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f3d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f3d8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f3da:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 800f3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    local.X[7] = MBEDTLS_GET_UINT32_LE(data, 28);
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	331c      	adds	r3, #28
 800f3e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f3ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f3ee:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f3f0:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 800f3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    local.X[8] = MBEDTLS_GET_UINT32_LE(data, 32);
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	3320      	adds	r3, #32
 800f3fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f400:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f404:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f406:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 800f408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    local.X[9] = MBEDTLS_GET_UINT32_LE(data, 36);
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	3324      	adds	r3, #36	; 0x24
 800f412:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f41a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f41c:	623b      	str	r3, [r7, #32]
    return r;
 800f41e:	6a3b      	ldr	r3, [r7, #32]
 800f420:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    local.X[10] = MBEDTLS_GET_UINT32_LE(data, 40);
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	3328      	adds	r3, #40	; 0x28
 800f428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f42c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f430:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f432:	61fb      	str	r3, [r7, #28]
    return r;
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    local.X[11] = MBEDTLS_GET_UINT32_LE(data, 44);
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	332c      	adds	r3, #44	; 0x2c
 800f43e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f446:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f448:	61bb      	str	r3, [r7, #24]
    return r;
 800f44a:	69bb      	ldr	r3, [r7, #24]
 800f44c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    local.X[12] = MBEDTLS_GET_UINT32_LE(data, 48);
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	3330      	adds	r3, #48	; 0x30
 800f454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f45c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f45e:	617b      	str	r3, [r7, #20]
    return r;
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    local.X[13] = MBEDTLS_GET_UINT32_LE(data, 52);
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	3334      	adds	r3, #52	; 0x34
 800f46a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f472:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f474:	613b      	str	r3, [r7, #16]
    return r;
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    local.X[14] = MBEDTLS_GET_UINT32_LE(data, 56);
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	3338      	adds	r3, #56	; 0x38
 800f480:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f484:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f488:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f48a:	60fb      	str	r3, [r7, #12]
    return r;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    local.X[15] = MBEDTLS_GET_UINT32_LE(data, 60);
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	333c      	adds	r3, #60	; 0x3c
 800f496:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f49a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f49e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800f4a0:	60bb      	str	r3, [r7, #8]
    return r;
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    local.A = local.Ap = ctx->state[0];
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	689b      	ldr	r3, [r3, #8]
 800f4ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4b0:	64bb      	str	r3, [r7, #72]	; 0x48
    local.B = local.Bp = ctx->state[1];
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	68db      	ldr	r3, [r3, #12]
 800f4b6:	663b      	str	r3, [r7, #96]	; 0x60
 800f4b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    local.C = local.Cp = ctx->state[2];
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	691b      	ldr	r3, [r3, #16]
 800f4c0:	667b      	str	r3, [r7, #100]	; 0x64
 800f4c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4c4:	653b      	str	r3, [r7, #80]	; 0x50
    local.D = local.Dp = ctx->state[3];
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	695b      	ldr	r3, [r3, #20]
 800f4ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4ce:	657b      	str	r3, [r7, #84]	; 0x54
    local.E = local.Ep = ctx->state[4];
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	699b      	ldr	r3, [r3, #24]
 800f4d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f4d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4d8:	65bb      	str	r3, [r7, #88]	; 0x58

#define F   F1
#define K   0x00000000
#define Fp  F5
#define Kp  0x50A28BE6
    P2(local.A, local.B, local.C, local.D, local.E,  0, 11,  5,  8);
 800f4da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f4de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4e0:	4059      	eors	r1, r3
 800f4e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4e4:	4059      	eors	r1, r3
 800f4e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4e8:	440b      	add	r3, r1
 800f4ea:	4413      	add	r3, r2
 800f4ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4f0:	ea4f 5273 	mov.w	r2, r3, ror #21
 800f4f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f4f6:	4413      	add	r3, r2
 800f4f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4fc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f500:	653b      	str	r3, [r7, #80]	; 0x50
 800f502:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f504:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f506:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800f508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f50a:	43db      	mvns	r3, r3
 800f50c:	4303      	orrs	r3, r0
 800f50e:	4059      	eors	r1, r3
 800f510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f514:	440b      	add	r3, r1
 800f516:	441a      	add	r2, r3
 800f518:	4baa      	ldr	r3, [pc, #680]	; (800f7c4 <mbedtls_internal_ripemd160_process+0x47c>)
 800f51a:	4413      	add	r3, r2
 800f51c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f51e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f520:	ea4f 6233 	mov.w	r2, r3, ror #24
 800f524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f526:	4413      	add	r3, r2
 800f528:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f52a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f52c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f530:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D,  1, 14, 14,  9);
 800f532:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f534:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f538:	4059      	eors	r1, r3
 800f53a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f53c:	4059      	eors	r1, r3
 800f53e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f540:	440b      	add	r3, r1
 800f542:	4413      	add	r3, r2
 800f544:	65bb      	str	r3, [r7, #88]	; 0x58
 800f546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f548:	ea4f 42b3 	mov.w	r2, r3, ror #18
 800f54c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f54e:	4413      	add	r3, r2
 800f550:	65bb      	str	r3, [r7, #88]	; 0x58
 800f552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f554:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f558:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f55a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f55c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f55e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f562:	43db      	mvns	r3, r3
 800f564:	4303      	orrs	r3, r0
 800f566:	4059      	eors	r1, r3
 800f568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f56c:	440b      	add	r3, r1
 800f56e:	441a      	add	r2, r3
 800f570:	4b94      	ldr	r3, [pc, #592]	; (800f7c4 <mbedtls_internal_ripemd160_process+0x47c>)
 800f572:	4413      	add	r3, r2
 800f574:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f578:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800f57c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f57e:	4413      	add	r3, r2
 800f580:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f584:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f588:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C,  2, 15,  7,  9);
 800f58a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f58c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f58e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f590:	4059      	eors	r1, r3
 800f592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f594:	4059      	eors	r1, r3
 800f596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f598:	440b      	add	r3, r1
 800f59a:	4413      	add	r3, r2
 800f59c:	657b      	str	r3, [r7, #84]	; 0x54
 800f59e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5a0:	ea4f 4273 	mov.w	r2, r3, ror #17
 800f5a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5a6:	4413      	add	r3, r2
 800f5a8:	657b      	str	r3, [r7, #84]	; 0x54
 800f5aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5ac:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f5b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f5b4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f5b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f5b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5ba:	43db      	mvns	r3, r3
 800f5bc:	4303      	orrs	r3, r0
 800f5be:	4059      	eors	r1, r3
 800f5c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5c4:	440b      	add	r3, r1
 800f5c6:	441a      	add	r2, r3
 800f5c8:	4b7e      	ldr	r3, [pc, #504]	; (800f7c4 <mbedtls_internal_ripemd160_process+0x47c>)
 800f5ca:	4413      	add	r3, r2
 800f5cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800f5ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f5d0:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800f5d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f5d6:	4413      	add	r3, r2
 800f5d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f5da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5dc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f5e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B,  3, 12,  0, 11);
 800f5e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f5e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f5e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5e8:	4059      	eors	r1, r3
 800f5ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5ec:	4059      	eors	r1, r3
 800f5ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f5f0:	440b      	add	r3, r1
 800f5f2:	4413      	add	r3, r2
 800f5f4:	653b      	str	r3, [r7, #80]	; 0x50
 800f5f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5f8:	ea4f 5233 	mov.w	r2, r3, ror #20
 800f5fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5fe:	4413      	add	r3, r2
 800f600:	653b      	str	r3, [r7, #80]	; 0x50
 800f602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f604:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f608:	65bb      	str	r3, [r7, #88]	; 0x58
 800f60a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f60c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f60e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f612:	43db      	mvns	r3, r3
 800f614:	4303      	orrs	r3, r0
 800f616:	4059      	eors	r1, r3
 800f618:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f61a:	440b      	add	r3, r1
 800f61c:	441a      	add	r2, r3
 800f61e:	4b69      	ldr	r3, [pc, #420]	; (800f7c4 <mbedtls_internal_ripemd160_process+0x47c>)
 800f620:	4413      	add	r3, r2
 800f622:	667b      	str	r3, [r7, #100]	; 0x64
 800f624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f626:	ea4f 5273 	mov.w	r2, r3, ror #21
 800f62a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f62c:	4413      	add	r3, r2
 800f62e:	667b      	str	r3, [r7, #100]	; 0x64
 800f630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f632:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f636:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A,  4,  5,  9, 13);
 800f638:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f63a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f63c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f63e:	4059      	eors	r1, r3
 800f640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f642:	4059      	eors	r1, r3
 800f644:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f648:	440b      	add	r3, r1
 800f64a:	4413      	add	r3, r2
 800f64c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f64e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f650:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800f654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f656:	4413      	add	r3, r2
 800f658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f65a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f65c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f660:	657b      	str	r3, [r7, #84]	; 0x54
 800f662:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f664:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f666:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800f668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f66a:	43db      	mvns	r3, r3
 800f66c:	4303      	orrs	r3, r0
 800f66e:	4059      	eors	r1, r3
 800f670:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f674:	440b      	add	r3, r1
 800f676:	441a      	add	r2, r3
 800f678:	4b52      	ldr	r3, [pc, #328]	; (800f7c4 <mbedtls_internal_ripemd160_process+0x47c>)
 800f67a:	4413      	add	r3, r2
 800f67c:	663b      	str	r3, [r7, #96]	; 0x60
 800f67e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f680:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800f684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f686:	4413      	add	r3, r2
 800f688:	663b      	str	r3, [r7, #96]	; 0x60
 800f68a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f68c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f690:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E,  5,  8,  2, 15);
 800f692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f694:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f698:	4059      	eors	r1, r3
 800f69a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f69c:	4059      	eors	r1, r3
 800f69e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f6a2:	440b      	add	r3, r1
 800f6a4:	4413      	add	r3, r2
 800f6a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6aa:	ea4f 6233 	mov.w	r2, r3, ror #24
 800f6ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6b0:	4413      	add	r3, r2
 800f6b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6b6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f6ba:	653b      	str	r3, [r7, #80]	; 0x50
 800f6bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f6be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f6c0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800f6c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6c4:	43db      	mvns	r3, r3
 800f6c6:	4303      	orrs	r3, r0
 800f6c8:	4059      	eors	r1, r3
 800f6ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6cc:	440b      	add	r3, r1
 800f6ce:	441a      	add	r2, r3
 800f6d0:	4b3c      	ldr	r3, [pc, #240]	; (800f7c4 <mbedtls_internal_ripemd160_process+0x47c>)
 800f6d2:	4413      	add	r3, r2
 800f6d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f6d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6d8:	ea4f 4273 	mov.w	r2, r3, ror #17
 800f6dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6de:	4413      	add	r3, r2
 800f6e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f6e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f6e4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f6e8:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D,  6,  7, 11, 15);
 800f6ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f6ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f6ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6f0:	4059      	eors	r1, r3
 800f6f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6f4:	4059      	eors	r1, r3
 800f6f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f6fa:	440b      	add	r3, r1
 800f6fc:	4413      	add	r3, r2
 800f6fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800f700:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f702:	ea4f 6273 	mov.w	r2, r3, ror #25
 800f706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f708:	4413      	add	r3, r2
 800f70a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f70c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f70e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f712:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f716:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f718:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f71a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f71c:	43db      	mvns	r3, r3
 800f71e:	4303      	orrs	r3, r0
 800f720:	4059      	eors	r1, r3
 800f722:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f726:	440b      	add	r3, r1
 800f728:	441a      	add	r2, r3
 800f72a:	4b26      	ldr	r3, [pc, #152]	; (800f7c4 <mbedtls_internal_ripemd160_process+0x47c>)
 800f72c:	4413      	add	r3, r2
 800f72e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f732:	ea4f 4273 	mov.w	r2, r3, ror #17
 800f736:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f738:	4413      	add	r3, r2
 800f73a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f73c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f73e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f742:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C,  7,  9,  4,  5);
 800f744:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f746:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f74a:	4059      	eors	r1, r3
 800f74c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f74e:	4059      	eors	r1, r3
 800f750:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f754:	440b      	add	r3, r1
 800f756:	4413      	add	r3, r2
 800f758:	657b      	str	r3, [r7, #84]	; 0x54
 800f75a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f75c:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800f760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f762:	4413      	add	r3, r2
 800f764:	657b      	str	r3, [r7, #84]	; 0x54
 800f766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f768:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f76c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f76e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f770:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f772:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f776:	43db      	mvns	r3, r3
 800f778:	4303      	orrs	r3, r0
 800f77a:	4059      	eors	r1, r3
 800f77c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f780:	440b      	add	r3, r1
 800f782:	441a      	add	r2, r3
 800f784:	4b0f      	ldr	r3, [pc, #60]	; (800f7c4 <mbedtls_internal_ripemd160_process+0x47c>)
 800f786:	4413      	add	r3, r2
 800f788:	66bb      	str	r3, [r7, #104]	; 0x68
 800f78a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f78c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800f790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f792:	4413      	add	r3, r2
 800f794:	66bb      	str	r3, [r7, #104]	; 0x68
 800f796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f798:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f79c:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B,  8, 11, 13,  7);
 800f79e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f7a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7a4:	4059      	eors	r1, r3
 800f7a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7a8:	4059      	eors	r1, r3
 800f7aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7ae:	440b      	add	r3, r1
 800f7b0:	4413      	add	r3, r2
 800f7b2:	653b      	str	r3, [r7, #80]	; 0x50
 800f7b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7b6:	ea4f 5273 	mov.w	r2, r3, ror #21
 800f7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7bc:	4413      	add	r3, r2
 800f7be:	653b      	str	r3, [r7, #80]	; 0x50
 800f7c0:	e002      	b.n	800f7c8 <mbedtls_internal_ripemd160_process+0x480>
 800f7c2:	bf00      	nop
 800f7c4:	50a28be6 	.word	0x50a28be6
 800f7c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7ca:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f7ce:	65bb      	str	r3, [r7, #88]	; 0x58
 800f7d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f7d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f7d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f7d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7d8:	43db      	mvns	r3, r3
 800f7da:	4303      	orrs	r3, r0
 800f7dc:	4059      	eors	r1, r3
 800f7de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f7e2:	440b      	add	r3, r1
 800f7e4:	441a      	add	r2, r3
 800f7e6:	4bac      	ldr	r3, [pc, #688]	; (800fa98 <mbedtls_internal_ripemd160_process+0x750>)
 800f7e8:	4413      	add	r3, r2
 800f7ea:	667b      	str	r3, [r7, #100]	; 0x64
 800f7ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7ee:	ea4f 6273 	mov.w	r2, r3, ror #25
 800f7f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7f4:	4413      	add	r3, r2
 800f7f6:	667b      	str	r3, [r7, #100]	; 0x64
 800f7f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7fa:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f7fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A,  9, 13,  6,  7);
 800f800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f802:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f806:	4059      	eors	r1, r3
 800f808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f80a:	4059      	eors	r1, r3
 800f80c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f810:	440b      	add	r3, r1
 800f812:	4413      	add	r3, r2
 800f814:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f818:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800f81c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f81e:	4413      	add	r3, r2
 800f820:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f824:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f828:	657b      	str	r3, [r7, #84]	; 0x54
 800f82a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f82c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f82e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800f830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f832:	43db      	mvns	r3, r3
 800f834:	4303      	orrs	r3, r0
 800f836:	4059      	eors	r1, r3
 800f838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f83c:	440b      	add	r3, r1
 800f83e:	441a      	add	r2, r3
 800f840:	4b95      	ldr	r3, [pc, #596]	; (800fa98 <mbedtls_internal_ripemd160_process+0x750>)
 800f842:	4413      	add	r3, r2
 800f844:	663b      	str	r3, [r7, #96]	; 0x60
 800f846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f848:	ea4f 6273 	mov.w	r2, r3, ror #25
 800f84c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f84e:	4413      	add	r3, r2
 800f850:	663b      	str	r3, [r7, #96]	; 0x60
 800f852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f854:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f858:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E, 10, 14, 15,  8);
 800f85a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f85c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f85e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f860:	4059      	eors	r1, r3
 800f862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f864:	4059      	eors	r1, r3
 800f866:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f86a:	440b      	add	r3, r1
 800f86c:	4413      	add	r3, r2
 800f86e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f872:	ea4f 42b3 	mov.w	r2, r3, ror #18
 800f876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f878:	4413      	add	r3, r2
 800f87a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f87c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f87e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f882:	653b      	str	r3, [r7, #80]	; 0x50
 800f884:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f886:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f888:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800f88a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f88c:	43db      	mvns	r3, r3
 800f88e:	4303      	orrs	r3, r0
 800f890:	4059      	eors	r1, r3
 800f892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f896:	440b      	add	r3, r1
 800f898:	441a      	add	r2, r3
 800f89a:	4b7f      	ldr	r3, [pc, #508]	; (800fa98 <mbedtls_internal_ripemd160_process+0x750>)
 800f89c:	4413      	add	r3, r2
 800f89e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f8a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8a2:	ea4f 6233 	mov.w	r2, r3, ror #24
 800f8a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8a8:	4413      	add	r3, r2
 800f8aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f8ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f8ae:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f8b2:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D, 11, 15,  8, 11);
 800f8b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f8b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f8b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8ba:	4059      	eors	r1, r3
 800f8bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8be:	4059      	eors	r1, r3
 800f8c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f8c4:	440b      	add	r3, r1
 800f8c6:	4413      	add	r3, r2
 800f8c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800f8ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8cc:	ea4f 4273 	mov.w	r2, r3, ror #17
 800f8d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8d2:	4413      	add	r3, r2
 800f8d4:	65bb      	str	r3, [r7, #88]	; 0x58
 800f8d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8d8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f8dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f8e0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f8e2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f8e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f8e6:	43db      	mvns	r3, r3
 800f8e8:	4303      	orrs	r3, r0
 800f8ea:	4059      	eors	r1, r3
 800f8ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f8f0:	440b      	add	r3, r1
 800f8f2:	441a      	add	r2, r3
 800f8f4:	4b68      	ldr	r3, [pc, #416]	; (800fa98 <mbedtls_internal_ripemd160_process+0x750>)
 800f8f6:	4413      	add	r3, r2
 800f8f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f8fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8fc:	ea4f 5273 	mov.w	r2, r3, ror #21
 800f900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f902:	4413      	add	r3, r2
 800f904:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f908:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f90c:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C, 12,  6,  1, 14);
 800f90e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f910:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f914:	4059      	eors	r1, r3
 800f916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f918:	4059      	eors	r1, r3
 800f91a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f91e:	440b      	add	r3, r1
 800f920:	4413      	add	r3, r2
 800f922:	657b      	str	r3, [r7, #84]	; 0x54
 800f924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f926:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800f92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f92c:	4413      	add	r3, r2
 800f92e:	657b      	str	r3, [r7, #84]	; 0x54
 800f930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f932:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f936:	64bb      	str	r3, [r7, #72]	; 0x48
 800f938:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f93a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f93c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f93e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f940:	43db      	mvns	r3, r3
 800f942:	4303      	orrs	r3, r0
 800f944:	4059      	eors	r1, r3
 800f946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f948:	440b      	add	r3, r1
 800f94a:	441a      	add	r2, r3
 800f94c:	4b52      	ldr	r3, [pc, #328]	; (800fa98 <mbedtls_internal_ripemd160_process+0x750>)
 800f94e:	4413      	add	r3, r2
 800f950:	66bb      	str	r3, [r7, #104]	; 0x68
 800f952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f954:	ea4f 42b3 	mov.w	r2, r3, ror #18
 800f958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f95a:	4413      	add	r3, r2
 800f95c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f95e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f960:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f964:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B, 13,  7, 10, 14);
 800f966:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f968:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f96a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f96c:	4059      	eors	r1, r3
 800f96e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f970:	4059      	eors	r1, r3
 800f972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f976:	440b      	add	r3, r1
 800f978:	4413      	add	r3, r2
 800f97a:	653b      	str	r3, [r7, #80]	; 0x50
 800f97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f97e:	ea4f 6273 	mov.w	r2, r3, ror #25
 800f982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f984:	4413      	add	r3, r2
 800f986:	653b      	str	r3, [r7, #80]	; 0x50
 800f988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f98a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f98e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f990:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f992:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f994:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f998:	43db      	mvns	r3, r3
 800f99a:	4303      	orrs	r3, r0
 800f99c:	4059      	eors	r1, r3
 800f99e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f9a2:	440b      	add	r3, r1
 800f9a4:	441a      	add	r2, r3
 800f9a6:	4b3c      	ldr	r3, [pc, #240]	; (800fa98 <mbedtls_internal_ripemd160_process+0x750>)
 800f9a8:	4413      	add	r3, r2
 800f9aa:	667b      	str	r3, [r7, #100]	; 0x64
 800f9ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9ae:	ea4f 42b3 	mov.w	r2, r3, ror #18
 800f9b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9b4:	4413      	add	r3, r2
 800f9b6:	667b      	str	r3, [r7, #100]	; 0x64
 800f9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9ba:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f9be:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A, 14,  9,  3, 12);
 800f9c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f9c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9c6:	4059      	eors	r1, r3
 800f9c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9ca:	4059      	eors	r1, r3
 800f9cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f9d0:	440b      	add	r3, r1
 800f9d2:	4413      	add	r3, r2
 800f9d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9d8:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800f9dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9de:	4413      	add	r3, r2
 800f9e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9e4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800f9e8:	657b      	str	r3, [r7, #84]	; 0x54
 800f9ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f9ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f9ee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800f9f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9f2:	43db      	mvns	r3, r3
 800f9f4:	4303      	orrs	r3, r0
 800f9f6:	4059      	eors	r1, r3
 800f9f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f9fa:	440b      	add	r3, r1
 800f9fc:	441a      	add	r2, r3
 800f9fe:	4b26      	ldr	r3, [pc, #152]	; (800fa98 <mbedtls_internal_ripemd160_process+0x750>)
 800fa00:	4413      	add	r3, r2
 800fa02:	663b      	str	r3, [r7, #96]	; 0x60
 800fa04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa06:	ea4f 5233 	mov.w	r2, r3, ror #20
 800fa0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa0c:	4413      	add	r3, r2
 800fa0e:	663b      	str	r3, [r7, #96]	; 0x60
 800fa10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa12:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fa16:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E, 15,  8, 12,  6);
 800fa18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa1a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fa1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa1e:	4059      	eors	r1, r3
 800fa20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa22:	4059      	eors	r1, r3
 800fa24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fa28:	440b      	add	r3, r1
 800fa2a:	4413      	add	r3, r2
 800fa2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa30:	ea4f 6233 	mov.w	r2, r3, ror #24
 800fa34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa36:	4413      	add	r3, r2
 800fa38:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa3c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fa40:	653b      	str	r3, [r7, #80]	; 0x50
 800fa42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa44:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fa46:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fa48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa4a:	43db      	mvns	r3, r3
 800fa4c:	4303      	orrs	r3, r0
 800fa4e:	4059      	eors	r1, r3
 800fa50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fa54:	440b      	add	r3, r1
 800fa56:	441a      	add	r2, r3
 800fa58:	4b0f      	ldr	r3, [pc, #60]	; (800fa98 <mbedtls_internal_ripemd160_process+0x750>)
 800fa5a:	4413      	add	r3, r2
 800fa5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa60:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800fa64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa66:	4413      	add	r3, r2
 800fa68:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa6c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fa70:	667b      	str	r3, [r7, #100]	; 0x64

#define F   F2
#define K   0x5A827999
#define Fp  F4
#define Kp  0x5C4DD124
    P2(local.E, local.A, local.B, local.C, local.D,  7,  7,  6,  9);
 800fa72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa74:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fa76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa78:	4019      	ands	r1, r3
 800fa7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa7c:	43d8      	mvns	r0, r3
 800fa7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa80:	4003      	ands	r3, r0
 800fa82:	4319      	orrs	r1, r3
 800fa84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa88:	440b      	add	r3, r1
 800fa8a:	441a      	add	r2, r3
 800fa8c:	4b03      	ldr	r3, [pc, #12]	; (800fa9c <mbedtls_internal_ripemd160_process+0x754>)
 800fa8e:	4413      	add	r3, r2
 800fa90:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa94:	e004      	b.n	800faa0 <mbedtls_internal_ripemd160_process+0x758>
 800fa96:	bf00      	nop
 800fa98:	50a28be6 	.word	0x50a28be6
 800fa9c:	5a827999 	.word	0x5a827999
 800faa0:	ea4f 6273 	mov.w	r2, r3, ror #25
 800faa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800faa6:	4413      	add	r3, r2
 800faa8:	65bb      	str	r3, [r7, #88]	; 0x58
 800faaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faac:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fab0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fab2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fab4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800fab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fab8:	4019      	ands	r1, r3
 800faba:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fabc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fabe:	43db      	mvns	r3, r3
 800fac0:	4003      	ands	r3, r0
 800fac2:	4319      	orrs	r1, r3
 800fac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fac8:	440b      	add	r3, r1
 800faca:	441a      	add	r2, r3
 800facc:	4bab      	ldr	r3, [pc, #684]	; (800fd7c <mbedtls_internal_ripemd160_process+0xa34>)
 800face:	4413      	add	r3, r2
 800fad0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fad4:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800fad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fada:	4413      	add	r3, r2
 800fadc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fae0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fae4:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C,  4,  6, 11, 13);
 800fae6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fae8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800faea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faec:	4019      	ands	r1, r3
 800faee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800faf0:	43d8      	mvns	r0, r3
 800faf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faf4:	4003      	ands	r3, r0
 800faf6:	4319      	orrs	r1, r3
 800faf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fafc:	440b      	add	r3, r1
 800fafe:	441a      	add	r2, r3
 800fb00:	4b9f      	ldr	r3, [pc, #636]	; (800fd80 <mbedtls_internal_ripemd160_process+0xa38>)
 800fb02:	4413      	add	r3, r2
 800fb04:	657b      	str	r3, [r7, #84]	; 0x54
 800fb06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb08:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800fb0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb0e:	4413      	add	r3, r2
 800fb10:	657b      	str	r3, [r7, #84]	; 0x54
 800fb12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb14:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fb18:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb1c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fb1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb20:	4019      	ands	r1, r3
 800fb22:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fb24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb26:	43db      	mvns	r3, r3
 800fb28:	4003      	ands	r3, r0
 800fb2a:	4319      	orrs	r1, r3
 800fb2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fb30:	440b      	add	r3, r1
 800fb32:	441a      	add	r2, r3
 800fb34:	4b91      	ldr	r3, [pc, #580]	; (800fd7c <mbedtls_internal_ripemd160_process+0xa34>)
 800fb36:	4413      	add	r3, r2
 800fb38:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb3c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800fb40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb42:	4413      	add	r3, r2
 800fb44:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb48:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fb4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B, 13,  8,  3, 15);
 800fb4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fb52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb54:	4019      	ands	r1, r3
 800fb56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb58:	43d8      	mvns	r0, r3
 800fb5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb5c:	4003      	ands	r3, r0
 800fb5e:	4319      	orrs	r1, r3
 800fb60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fb64:	440b      	add	r3, r1
 800fb66:	441a      	add	r2, r3
 800fb68:	4b85      	ldr	r3, [pc, #532]	; (800fd80 <mbedtls_internal_ripemd160_process+0xa38>)
 800fb6a:	4413      	add	r3, r2
 800fb6c:	653b      	str	r3, [r7, #80]	; 0x50
 800fb6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb70:	ea4f 6233 	mov.w	r2, r3, ror #24
 800fb74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb76:	4413      	add	r3, r2
 800fb78:	653b      	str	r3, [r7, #80]	; 0x50
 800fb7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb7c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fb80:	65bb      	str	r3, [r7, #88]	; 0x58
 800fb82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fb84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fb86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb88:	4019      	ands	r1, r3
 800fb8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fb8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb8e:	43db      	mvns	r3, r3
 800fb90:	4003      	ands	r3, r0
 800fb92:	4319      	orrs	r1, r3
 800fb94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fb96:	440b      	add	r3, r1
 800fb98:	441a      	add	r2, r3
 800fb9a:	4b78      	ldr	r3, [pc, #480]	; (800fd7c <mbedtls_internal_ripemd160_process+0xa34>)
 800fb9c:	4413      	add	r3, r2
 800fb9e:	667b      	str	r3, [r7, #100]	; 0x64
 800fba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fba2:	ea4f 4273 	mov.w	r2, r3, ror #17
 800fba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fba8:	4413      	add	r3, r2
 800fbaa:	667b      	str	r3, [r7, #100]	; 0x64
 800fbac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbae:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fbb2:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A,  1, 13,  7,  7);
 800fbb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fbb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbba:	4019      	ands	r1, r3
 800fbbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbbe:	43d8      	mvns	r0, r3
 800fbc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fbc2:	4003      	ands	r3, r0
 800fbc4:	4319      	orrs	r1, r3
 800fbc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbc8:	440b      	add	r3, r1
 800fbca:	441a      	add	r2, r3
 800fbcc:	4b6c      	ldr	r3, [pc, #432]	; (800fd80 <mbedtls_internal_ripemd160_process+0xa38>)
 800fbce:	4413      	add	r3, r2
 800fbd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fbd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbd4:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800fbd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbda:	4413      	add	r3, r2
 800fbdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fbde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbe0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fbe4:	657b      	str	r3, [r7, #84]	; 0x54
 800fbe6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fbe8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fbea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbec:	4019      	ands	r1, r3
 800fbee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800fbf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbf2:	43db      	mvns	r3, r3
 800fbf4:	4003      	ands	r3, r0
 800fbf6:	4319      	orrs	r1, r3
 800fbf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fbfc:	440b      	add	r3, r1
 800fbfe:	441a      	add	r2, r3
 800fc00:	4b5e      	ldr	r3, [pc, #376]	; (800fd7c <mbedtls_internal_ripemd160_process+0xa34>)
 800fc02:	4413      	add	r3, r2
 800fc04:	663b      	str	r3, [r7, #96]	; 0x60
 800fc06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc08:	ea4f 6273 	mov.w	r2, r3, ror #25
 800fc0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc0e:	4413      	add	r3, r2
 800fc10:	663b      	str	r3, [r7, #96]	; 0x60
 800fc12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc14:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fc18:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E, 10, 11,  0, 12);
 800fc1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fc1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc20:	4019      	ands	r1, r3
 800fc22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc24:	43d8      	mvns	r0, r3
 800fc26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc28:	4003      	ands	r3, r0
 800fc2a:	4319      	orrs	r1, r3
 800fc2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fc30:	440b      	add	r3, r1
 800fc32:	441a      	add	r2, r3
 800fc34:	4b52      	ldr	r3, [pc, #328]	; (800fd80 <mbedtls_internal_ripemd160_process+0xa38>)
 800fc36:	4413      	add	r3, r2
 800fc38:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc3c:	ea4f 5273 	mov.w	r2, r3, ror #21
 800fc40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc42:	4413      	add	r3, r2
 800fc44:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc48:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fc4c:	653b      	str	r3, [r7, #80]	; 0x50
 800fc4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc50:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fc52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc54:	4019      	ands	r1, r3
 800fc56:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fc58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc5a:	43db      	mvns	r3, r3
 800fc5c:	4003      	ands	r3, r0
 800fc5e:	4319      	orrs	r1, r3
 800fc60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc62:	440b      	add	r3, r1
 800fc64:	441a      	add	r2, r3
 800fc66:	4b45      	ldr	r3, [pc, #276]	; (800fd7c <mbedtls_internal_ripemd160_process+0xa34>)
 800fc68:	4413      	add	r3, r2
 800fc6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc6e:	ea4f 5233 	mov.w	r2, r3, ror #20
 800fc72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc74:	4413      	add	r3, r2
 800fc76:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc7a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fc7e:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D,  6,  9, 13,  8);
 800fc80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fc84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc86:	4019      	ands	r1, r3
 800fc88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc8a:	43d8      	mvns	r0, r3
 800fc8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc8e:	4003      	ands	r3, r0
 800fc90:	4319      	orrs	r1, r3
 800fc92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc96:	440b      	add	r3, r1
 800fc98:	441a      	add	r2, r3
 800fc9a:	4b39      	ldr	r3, [pc, #228]	; (800fd80 <mbedtls_internal_ripemd160_process+0xa38>)
 800fc9c:	4413      	add	r3, r2
 800fc9e:	65bb      	str	r3, [r7, #88]	; 0x58
 800fca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fca2:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800fca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fca8:	4413      	add	r3, r2
 800fcaa:	65bb      	str	r3, [r7, #88]	; 0x58
 800fcac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcae:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fcb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fcb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fcb6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800fcb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcba:	4019      	ands	r1, r3
 800fcbc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fcbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcc0:	43db      	mvns	r3, r3
 800fcc2:	4003      	ands	r3, r0
 800fcc4:	4319      	orrs	r1, r3
 800fcc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fcca:	440b      	add	r3, r1
 800fccc:	441a      	add	r2, r3
 800fcce:	4b2b      	ldr	r3, [pc, #172]	; (800fd7c <mbedtls_internal_ripemd160_process+0xa34>)
 800fcd0:	4413      	add	r3, r2
 800fcd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fcd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcd6:	ea4f 6233 	mov.w	r2, r3, ror #24
 800fcda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcdc:	4413      	add	r3, r2
 800fcde:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fce2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fce6:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C, 15,  7,  5,  9);
 800fce8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fcea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fcec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcee:	4019      	ands	r1, r3
 800fcf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcf2:	43d8      	mvns	r0, r3
 800fcf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcf6:	4003      	ands	r3, r0
 800fcf8:	4319      	orrs	r1, r3
 800fcfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fcfe:	440b      	add	r3, r1
 800fd00:	441a      	add	r2, r3
 800fd02:	4b1f      	ldr	r3, [pc, #124]	; (800fd80 <mbedtls_internal_ripemd160_process+0xa38>)
 800fd04:	4413      	add	r3, r2
 800fd06:	657b      	str	r3, [r7, #84]	; 0x54
 800fd08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd0a:	ea4f 6273 	mov.w	r2, r3, ror #25
 800fd0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd10:	4413      	add	r3, r2
 800fd12:	657b      	str	r3, [r7, #84]	; 0x54
 800fd14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd16:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fd1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd1e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fd20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd22:	4019      	ands	r1, r3
 800fd24:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fd26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd28:	43db      	mvns	r3, r3
 800fd2a:	4003      	ands	r3, r0
 800fd2c:	4319      	orrs	r1, r3
 800fd2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fd32:	440b      	add	r3, r1
 800fd34:	441a      	add	r2, r3
 800fd36:	4b11      	ldr	r3, [pc, #68]	; (800fd7c <mbedtls_internal_ripemd160_process+0xa34>)
 800fd38:	4413      	add	r3, r2
 800fd3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd3e:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800fd42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd44:	4413      	add	r3, r2
 800fd46:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd4a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fd4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B,  3, 15, 10, 11);
 800fd50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd56:	4019      	ands	r1, r3
 800fd58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd5a:	43d8      	mvns	r0, r3
 800fd5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd5e:	4003      	ands	r3, r0
 800fd60:	4319      	orrs	r1, r3
 800fd62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd64:	440b      	add	r3, r1
 800fd66:	441a      	add	r2, r3
 800fd68:	4b05      	ldr	r3, [pc, #20]	; (800fd80 <mbedtls_internal_ripemd160_process+0xa38>)
 800fd6a:	4413      	add	r3, r2
 800fd6c:	653b      	str	r3, [r7, #80]	; 0x50
 800fd6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd70:	ea4f 4273 	mov.w	r2, r3, ror #17
 800fd74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd76:	4413      	add	r3, r2
 800fd78:	653b      	str	r3, [r7, #80]	; 0x50
 800fd7a:	e003      	b.n	800fd84 <mbedtls_internal_ripemd160_process+0xa3c>
 800fd7c:	5c4dd124 	.word	0x5c4dd124
 800fd80:	5a827999 	.word	0x5a827999
 800fd84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd86:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fd8a:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fd8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fd90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd92:	4019      	ands	r1, r3
 800fd94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fd96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd98:	43db      	mvns	r3, r3
 800fd9a:	4003      	ands	r3, r0
 800fd9c:	4319      	orrs	r1, r3
 800fd9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fda2:	440b      	add	r3, r1
 800fda4:	441a      	add	r2, r3
 800fda6:	4bad      	ldr	r3, [pc, #692]	; (801005c <mbedtls_internal_ripemd160_process+0xd14>)
 800fda8:	4413      	add	r3, r2
 800fdaa:	667b      	str	r3, [r7, #100]	; 0x64
 800fdac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdae:	ea4f 5273 	mov.w	r2, r3, ror #21
 800fdb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fdb4:	4413      	add	r3, r2
 800fdb6:	667b      	str	r3, [r7, #100]	; 0x64
 800fdb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdba:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fdbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A, 12,  7, 14,  7);
 800fdc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fdc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fdc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdc6:	4019      	ands	r1, r3
 800fdc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdca:	43d8      	mvns	r0, r3
 800fdcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fdce:	4003      	ands	r3, r0
 800fdd0:	4319      	orrs	r1, r3
 800fdd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fdd6:	440b      	add	r3, r1
 800fdd8:	441a      	add	r2, r3
 800fdda:	4ba1      	ldr	r3, [pc, #644]	; (8010060 <mbedtls_internal_ripemd160_process+0xd18>)
 800fddc:	4413      	add	r3, r2
 800fdde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fde0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fde2:	ea4f 6273 	mov.w	r2, r3, ror #25
 800fde6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fde8:	4413      	add	r3, r2
 800fdea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fdec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdee:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fdf2:	657b      	str	r3, [r7, #84]	; 0x54
 800fdf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fdf6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fdf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdfa:	4019      	ands	r1, r3
 800fdfc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800fdfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe00:	43db      	mvns	r3, r3
 800fe02:	4003      	ands	r3, r0
 800fe04:	4319      	orrs	r1, r3
 800fe06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fe0a:	440b      	add	r3, r1
 800fe0c:	441a      	add	r2, r3
 800fe0e:	4b93      	ldr	r3, [pc, #588]	; (801005c <mbedtls_internal_ripemd160_process+0xd14>)
 800fe10:	4413      	add	r3, r2
 800fe12:	663b      	str	r3, [r7, #96]	; 0x60
 800fe14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe16:	ea4f 6273 	mov.w	r2, r3, ror #25
 800fe1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe1c:	4413      	add	r3, r2
 800fe1e:	663b      	str	r3, [r7, #96]	; 0x60
 800fe20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe22:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fe26:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E,  0, 12, 15,  7);
 800fe28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fe2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe2e:	4019      	ands	r1, r3
 800fe30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe32:	43d8      	mvns	r0, r3
 800fe34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe36:	4003      	ands	r3, r0
 800fe38:	4319      	orrs	r1, r3
 800fe3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe3c:	440b      	add	r3, r1
 800fe3e:	441a      	add	r2, r3
 800fe40:	4b87      	ldr	r3, [pc, #540]	; (8010060 <mbedtls_internal_ripemd160_process+0xd18>)
 800fe42:	4413      	add	r3, r2
 800fe44:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe48:	ea4f 5233 	mov.w	r2, r3, ror #20
 800fe4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe4e:	4413      	add	r3, r2
 800fe50:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe54:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fe58:	653b      	str	r3, [r7, #80]	; 0x50
 800fe5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fe5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe60:	4019      	ands	r1, r3
 800fe62:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fe64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe66:	43db      	mvns	r3, r3
 800fe68:	4003      	ands	r3, r0
 800fe6a:	4319      	orrs	r1, r3
 800fe6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fe70:	440b      	add	r3, r1
 800fe72:	441a      	add	r2, r3
 800fe74:	4b79      	ldr	r3, [pc, #484]	; (801005c <mbedtls_internal_ripemd160_process+0xd14>)
 800fe76:	4413      	add	r3, r2
 800fe78:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe7c:	ea4f 6273 	mov.w	r2, r3, ror #25
 800fe80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe82:	4413      	add	r3, r2
 800fe84:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe88:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fe8c:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D,  9, 15,  8, 12);
 800fe8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe90:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fe92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe94:	4019      	ands	r1, r3
 800fe96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe98:	43d8      	mvns	r0, r3
 800fe9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe9c:	4003      	ands	r3, r0
 800fe9e:	4319      	orrs	r1, r3
 800fea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fea4:	440b      	add	r3, r1
 800fea6:	441a      	add	r2, r3
 800fea8:	4b6d      	ldr	r3, [pc, #436]	; (8010060 <mbedtls_internal_ripemd160_process+0xd18>)
 800feaa:	4413      	add	r3, r2
 800feac:	65bb      	str	r3, [r7, #88]	; 0x58
 800feae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800feb0:	ea4f 4273 	mov.w	r2, r3, ror #17
 800feb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feb6:	4413      	add	r3, r2
 800feb8:	65bb      	str	r3, [r7, #88]	; 0x58
 800feba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800febc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fec0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fec2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fec4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800fec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fec8:	4019      	ands	r1, r3
 800feca:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fece:	43db      	mvns	r3, r3
 800fed0:	4003      	ands	r3, r0
 800fed2:	4319      	orrs	r1, r3
 800fed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fed8:	440b      	add	r3, r1
 800feda:	441a      	add	r2, r3
 800fedc:	4b5f      	ldr	r3, [pc, #380]	; (801005c <mbedtls_internal_ripemd160_process+0xd14>)
 800fede:	4413      	add	r3, r2
 800fee0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fee4:	ea4f 5233 	mov.w	r2, r3, ror #20
 800fee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800feea:	4413      	add	r3, r2
 800feec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800feee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fef0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fef4:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C,  5,  9, 12,  7);
 800fef6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fef8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fefa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fefc:	4019      	ands	r1, r3
 800fefe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff00:	43d8      	mvns	r0, r3
 800ff02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff04:	4003      	ands	r3, r0
 800ff06:	4319      	orrs	r1, r3
 800ff08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff0c:	440b      	add	r3, r1
 800ff0e:	441a      	add	r2, r3
 800ff10:	4b53      	ldr	r3, [pc, #332]	; (8010060 <mbedtls_internal_ripemd160_process+0xd18>)
 800ff12:	4413      	add	r3, r2
 800ff14:	657b      	str	r3, [r7, #84]	; 0x54
 800ff16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff18:	ea4f 52f3 	mov.w	r2, r3, ror #23
 800ff1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff1e:	4413      	add	r3, r2
 800ff20:	657b      	str	r3, [r7, #84]	; 0x54
 800ff22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff24:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800ff28:	64bb      	str	r3, [r7, #72]	; 0x48
 800ff2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ff2c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ff2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff30:	4019      	ands	r1, r3
 800ff32:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ff34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff36:	43db      	mvns	r3, r3
 800ff38:	4003      	ands	r3, r0
 800ff3a:	4319      	orrs	r1, r3
 800ff3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ff40:	440b      	add	r3, r1
 800ff42:	441a      	add	r2, r3
 800ff44:	4b45      	ldr	r3, [pc, #276]	; (801005c <mbedtls_internal_ripemd160_process+0xd14>)
 800ff46:	4413      	add	r3, r2
 800ff48:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff4c:	ea4f 6273 	mov.w	r2, r3, ror #25
 800ff50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff52:	4413      	add	r3, r2
 800ff54:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff58:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800ff5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B,  2, 11,  4,  6);
 800ff5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ff62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff64:	4019      	ands	r1, r3
 800ff66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff68:	43d8      	mvns	r0, r3
 800ff6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff6c:	4003      	ands	r3, r0
 800ff6e:	4319      	orrs	r1, r3
 800ff70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff72:	440b      	add	r3, r1
 800ff74:	441a      	add	r2, r3
 800ff76:	4b3a      	ldr	r3, [pc, #232]	; (8010060 <mbedtls_internal_ripemd160_process+0xd18>)
 800ff78:	4413      	add	r3, r2
 800ff7a:	653b      	str	r3, [r7, #80]	; 0x50
 800ff7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff7e:	ea4f 5273 	mov.w	r2, r3, ror #21
 800ff82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff84:	4413      	add	r3, r2
 800ff86:	653b      	str	r3, [r7, #80]	; 0x50
 800ff88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff8a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800ff8e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ff94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff96:	4019      	ands	r1, r3
 800ff98:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ff9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff9c:	43db      	mvns	r3, r3
 800ff9e:	4003      	ands	r3, r0
 800ffa0:	4319      	orrs	r1, r3
 800ffa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ffa6:	440b      	add	r3, r1
 800ffa8:	441a      	add	r2, r3
 800ffaa:	4b2c      	ldr	r3, [pc, #176]	; (801005c <mbedtls_internal_ripemd160_process+0xd14>)
 800ffac:	4413      	add	r3, r2
 800ffae:	667b      	str	r3, [r7, #100]	; 0x64
 800ffb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffb2:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800ffb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffb8:	4413      	add	r3, r2
 800ffba:	667b      	str	r3, [r7, #100]	; 0x64
 800ffbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffbe:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800ffc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A, 14,  7,  9, 15);
 800ffc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ffc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ffc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffca:	4019      	ands	r1, r3
 800ffcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffce:	43d8      	mvns	r0, r3
 800ffd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffd2:	4003      	ands	r3, r0
 800ffd4:	4319      	orrs	r1, r3
 800ffd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ffda:	440b      	add	r3, r1
 800ffdc:	441a      	add	r2, r3
 800ffde:	4b20      	ldr	r3, [pc, #128]	; (8010060 <mbedtls_internal_ripemd160_process+0xd18>)
 800ffe0:	4413      	add	r3, r2
 800ffe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ffe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffe6:	ea4f 6273 	mov.w	r2, r3, ror #25
 800ffea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffec:	4413      	add	r3, r2
 800ffee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fff2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800fff6:	657b      	str	r3, [r7, #84]	; 0x54
 800fff8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fffa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fffe:	4019      	ands	r1, r3
 8010000:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8010002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010004:	43db      	mvns	r3, r3
 8010006:	4003      	ands	r3, r0
 8010008:	4319      	orrs	r1, r3
 801000a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801000e:	440b      	add	r3, r1
 8010010:	441a      	add	r2, r3
 8010012:	4b12      	ldr	r3, [pc, #72]	; (801005c <mbedtls_internal_ripemd160_process+0xd14>)
 8010014:	4413      	add	r3, r2
 8010016:	663b      	str	r3, [r7, #96]	; 0x60
 8010018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801001a:	ea4f 4273 	mov.w	r2, r3, ror #17
 801001e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010020:	4413      	add	r3, r2
 8010022:	663b      	str	r3, [r7, #96]	; 0x60
 8010024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010026:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801002a:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E, 11, 13,  1, 13);
 801002c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801002e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010032:	4019      	ands	r1, r3
 8010034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010036:	43d8      	mvns	r0, r3
 8010038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801003a:	4003      	ands	r3, r0
 801003c:	4319      	orrs	r1, r3
 801003e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010042:	440b      	add	r3, r1
 8010044:	441a      	add	r2, r3
 8010046:	4b06      	ldr	r3, [pc, #24]	; (8010060 <mbedtls_internal_ripemd160_process+0xd18>)
 8010048:	4413      	add	r3, r2
 801004a:	64bb      	str	r3, [r7, #72]	; 0x48
 801004c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801004e:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8010052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010054:	4413      	add	r3, r2
 8010056:	64bb      	str	r3, [r7, #72]	; 0x48
 8010058:	e004      	b.n	8010064 <mbedtls_internal_ripemd160_process+0xd1c>
 801005a:	bf00      	nop
 801005c:	5c4dd124 	.word	0x5c4dd124
 8010060:	5a827999 	.word	0x5a827999
 8010064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010066:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801006a:	653b      	str	r3, [r7, #80]	; 0x50
 801006c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801006e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010072:	4019      	ands	r1, r3
 8010074:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8010076:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010078:	43db      	mvns	r3, r3
 801007a:	4003      	ands	r3, r0
 801007c:	4319      	orrs	r1, r3
 801007e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010080:	440b      	add	r3, r1
 8010082:	441a      	add	r2, r3
 8010084:	4bac      	ldr	r3, [pc, #688]	; (8010338 <mbedtls_internal_ripemd160_process+0xff0>)
 8010086:	4413      	add	r3, r2
 8010088:	65fb      	str	r3, [r7, #92]	; 0x5c
 801008a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801008c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8010090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010092:	4413      	add	r3, r2
 8010094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010098:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801009c:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D,  8, 12,  2, 11);
 801009e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80100a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80100a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100a4:	4019      	ands	r1, r3
 80100a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100a8:	43d8      	mvns	r0, r3
 80100aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100ac:	4003      	ands	r3, r0
 80100ae:	4319      	orrs	r1, r3
 80100b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80100b4:	440b      	add	r3, r1
 80100b6:	441a      	add	r2, r3
 80100b8:	4ba0      	ldr	r3, [pc, #640]	; (801033c <mbedtls_internal_ripemd160_process+0xff4>)
 80100ba:	4413      	add	r3, r2
 80100bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80100be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100c0:	ea4f 5233 	mov.w	r2, r3, ror #20
 80100c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100c6:	4413      	add	r3, r2
 80100c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80100ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100cc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80100d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80100d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80100d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80100d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100d8:	4019      	ands	r1, r3
 80100da:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80100dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100de:	43db      	mvns	r3, r3
 80100e0:	4003      	ands	r3, r0
 80100e2:	4319      	orrs	r1, r3
 80100e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100e6:	440b      	add	r3, r1
 80100e8:	441a      	add	r2, r3
 80100ea:	4b93      	ldr	r3, [pc, #588]	; (8010338 <mbedtls_internal_ripemd160_process+0xff0>)
 80100ec:	4413      	add	r3, r2
 80100ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80100f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100f2:	ea4f 5273 	mov.w	r2, r3, ror #21
 80100f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100f8:	4413      	add	r3, r2
 80100fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80100fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100fe:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010102:	663b      	str	r3, [r7, #96]	; 0x60

#define F   F3
#define K   0x6ED9EBA1
#define Fp  F3
#define Kp  0x6D703EF3
    P2(local.D, local.E, local.A, local.B, local.C,  3, 11, 15,  9);
 8010104:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010106:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801010a:	43db      	mvns	r3, r3
 801010c:	4319      	orrs	r1, r3
 801010e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010110:	4059      	eors	r1, r3
 8010112:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010114:	440b      	add	r3, r1
 8010116:	441a      	add	r2, r3
 8010118:	4b89      	ldr	r3, [pc, #548]	; (8010340 <mbedtls_internal_ripemd160_process+0xff8>)
 801011a:	4413      	add	r3, r2
 801011c:	657b      	str	r3, [r7, #84]	; 0x54
 801011e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010120:	ea4f 5273 	mov.w	r2, r3, ror #21
 8010124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010126:	4413      	add	r3, r2
 8010128:	657b      	str	r3, [r7, #84]	; 0x54
 801012a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801012c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010130:	64bb      	str	r3, [r7, #72]	; 0x48
 8010132:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010134:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010138:	43db      	mvns	r3, r3
 801013a:	4319      	orrs	r1, r3
 801013c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801013e:	4059      	eors	r1, r3
 8010140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010144:	440b      	add	r3, r1
 8010146:	441a      	add	r2, r3
 8010148:	4b7e      	ldr	r3, [pc, #504]	; (8010344 <mbedtls_internal_ripemd160_process+0xffc>)
 801014a:	4413      	add	r3, r2
 801014c:	66bb      	str	r3, [r7, #104]	; 0x68
 801014e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010150:	ea4f 52f3 	mov.w	r2, r3, ror #23
 8010154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010156:	4413      	add	r3, r2
 8010158:	66bb      	str	r3, [r7, #104]	; 0x68
 801015a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801015c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010160:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B, 10, 13,  5,  7);
 8010162:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010164:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010168:	43db      	mvns	r3, r3
 801016a:	4319      	orrs	r1, r3
 801016c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801016e:	4059      	eors	r1, r3
 8010170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010174:	440b      	add	r3, r1
 8010176:	441a      	add	r2, r3
 8010178:	4b71      	ldr	r3, [pc, #452]	; (8010340 <mbedtls_internal_ripemd160_process+0xff8>)
 801017a:	4413      	add	r3, r2
 801017c:	653b      	str	r3, [r7, #80]	; 0x50
 801017e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010180:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8010184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010186:	4413      	add	r3, r2
 8010188:	653b      	str	r3, [r7, #80]	; 0x50
 801018a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801018c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010190:	65bb      	str	r3, [r7, #88]	; 0x58
 8010192:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010194:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010198:	43db      	mvns	r3, r3
 801019a:	4319      	orrs	r1, r3
 801019c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801019e:	4059      	eors	r1, r3
 80101a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80101a4:	440b      	add	r3, r1
 80101a6:	441a      	add	r2, r3
 80101a8:	4b66      	ldr	r3, [pc, #408]	; (8010344 <mbedtls_internal_ripemd160_process+0xffc>)
 80101aa:	4413      	add	r3, r2
 80101ac:	667b      	str	r3, [r7, #100]	; 0x64
 80101ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80101b0:	ea4f 6273 	mov.w	r2, r3, ror #25
 80101b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101b6:	4413      	add	r3, r2
 80101b8:	667b      	str	r3, [r7, #100]	; 0x64
 80101ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101bc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80101c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A, 14,  6,  1, 15);
 80101c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80101c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80101c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101c8:	43db      	mvns	r3, r3
 80101ca:	4319      	orrs	r1, r3
 80101cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101ce:	4059      	eors	r1, r3
 80101d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80101d4:	440b      	add	r3, r1
 80101d6:	441a      	add	r2, r3
 80101d8:	4b59      	ldr	r3, [pc, #356]	; (8010340 <mbedtls_internal_ripemd160_process+0xff8>)
 80101da:	4413      	add	r3, r2
 80101dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80101de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101e0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80101e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101e6:	4413      	add	r3, r2
 80101e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80101ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101ec:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80101f0:	657b      	str	r3, [r7, #84]	; 0x54
 80101f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80101f4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80101f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101f8:	43db      	mvns	r3, r3
 80101fa:	4319      	orrs	r1, r3
 80101fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101fe:	4059      	eors	r1, r3
 8010200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010202:	440b      	add	r3, r1
 8010204:	441a      	add	r2, r3
 8010206:	4b4f      	ldr	r3, [pc, #316]	; (8010344 <mbedtls_internal_ripemd160_process+0xffc>)
 8010208:	4413      	add	r3, r2
 801020a:	663b      	str	r3, [r7, #96]	; 0x60
 801020c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801020e:	ea4f 4273 	mov.w	r2, r3, ror #17
 8010212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010214:	4413      	add	r3, r2
 8010216:	663b      	str	r3, [r7, #96]	; 0x60
 8010218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801021a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801021e:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E,  4,  7,  3, 11);
 8010220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010222:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010226:	43db      	mvns	r3, r3
 8010228:	4319      	orrs	r1, r3
 801022a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801022c:	4059      	eors	r1, r3
 801022e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010232:	440b      	add	r3, r1
 8010234:	441a      	add	r2, r3
 8010236:	4b42      	ldr	r3, [pc, #264]	; (8010340 <mbedtls_internal_ripemd160_process+0xff8>)
 8010238:	4413      	add	r3, r2
 801023a:	64bb      	str	r3, [r7, #72]	; 0x48
 801023c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801023e:	ea4f 6273 	mov.w	r2, r3, ror #25
 8010242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010244:	4413      	add	r3, r2
 8010246:	64bb      	str	r3, [r7, #72]	; 0x48
 8010248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801024a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801024e:	653b      	str	r3, [r7, #80]	; 0x50
 8010250:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010252:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010256:	43db      	mvns	r3, r3
 8010258:	4319      	orrs	r1, r3
 801025a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801025c:	4059      	eors	r1, r3
 801025e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010260:	440b      	add	r3, r1
 8010262:	441a      	add	r2, r3
 8010264:	4b37      	ldr	r3, [pc, #220]	; (8010344 <mbedtls_internal_ripemd160_process+0xffc>)
 8010266:	4413      	add	r3, r2
 8010268:	65fb      	str	r3, [r7, #92]	; 0x5c
 801026a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801026c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8010270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010272:	4413      	add	r3, r2
 8010274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010278:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801027c:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D,  9, 14,  7,  8);
 801027e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010280:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010284:	43db      	mvns	r3, r3
 8010286:	4319      	orrs	r1, r3
 8010288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801028a:	4059      	eors	r1, r3
 801028c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010290:	440b      	add	r3, r1
 8010292:	441a      	add	r2, r3
 8010294:	4b2a      	ldr	r3, [pc, #168]	; (8010340 <mbedtls_internal_ripemd160_process+0xff8>)
 8010296:	4413      	add	r3, r2
 8010298:	65bb      	str	r3, [r7, #88]	; 0x58
 801029a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801029c:	ea4f 42b3 	mov.w	r2, r3, ror #18
 80102a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102a2:	4413      	add	r3, r2
 80102a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80102a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102a8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80102ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80102ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80102b0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80102b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102b4:	43db      	mvns	r3, r3
 80102b6:	4319      	orrs	r1, r3
 80102b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102ba:	4059      	eors	r1, r3
 80102bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80102c0:	440b      	add	r3, r1
 80102c2:	441a      	add	r2, r3
 80102c4:	4b1f      	ldr	r3, [pc, #124]	; (8010344 <mbedtls_internal_ripemd160_process+0xffc>)
 80102c6:	4413      	add	r3, r2
 80102c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80102ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102cc:	ea4f 6233 	mov.w	r2, r3, ror #24
 80102d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102d2:	4413      	add	r3, r2
 80102d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80102d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102d8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80102dc:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C, 15,  9, 14,  6);
 80102de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80102e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102e4:	43db      	mvns	r3, r3
 80102e6:	4319      	orrs	r1, r3
 80102e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102ea:	4059      	eors	r1, r3
 80102ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102f0:	440b      	add	r3, r1
 80102f2:	441a      	add	r2, r3
 80102f4:	4b12      	ldr	r3, [pc, #72]	; (8010340 <mbedtls_internal_ripemd160_process+0xff8>)
 80102f6:	4413      	add	r3, r2
 80102f8:	657b      	str	r3, [r7, #84]	; 0x54
 80102fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102fc:	ea4f 52f3 	mov.w	r2, r3, ror #23
 8010300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010302:	4413      	add	r3, r2
 8010304:	657b      	str	r3, [r7, #84]	; 0x54
 8010306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010308:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801030c:	64bb      	str	r3, [r7, #72]	; 0x48
 801030e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010310:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010314:	43db      	mvns	r3, r3
 8010316:	4319      	orrs	r1, r3
 8010318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801031a:	4059      	eors	r1, r3
 801031c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010320:	440b      	add	r3, r1
 8010322:	441a      	add	r2, r3
 8010324:	4b07      	ldr	r3, [pc, #28]	; (8010344 <mbedtls_internal_ripemd160_process+0xffc>)
 8010326:	4413      	add	r3, r2
 8010328:	66bb      	str	r3, [r7, #104]	; 0x68
 801032a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801032c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8010330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010332:	4413      	add	r3, r2
 8010334:	e008      	b.n	8010348 <mbedtls_internal_ripemd160_process+0x1000>
 8010336:	bf00      	nop
 8010338:	5c4dd124 	.word	0x5c4dd124
 801033c:	5a827999 	.word	0x5a827999
 8010340:	6ed9eba1 	.word	0x6ed9eba1
 8010344:	6d703ef3 	.word	0x6d703ef3
 8010348:	66bb      	str	r3, [r7, #104]	; 0x68
 801034a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801034c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010350:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B,  8, 13,  6,  6);
 8010352:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010354:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010358:	43db      	mvns	r3, r3
 801035a:	4319      	orrs	r1, r3
 801035c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801035e:	4059      	eors	r1, r3
 8010360:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010364:	440b      	add	r3, r1
 8010366:	441a      	add	r2, r3
 8010368:	4bac      	ldr	r3, [pc, #688]	; (801061c <mbedtls_internal_ripemd160_process+0x12d4>)
 801036a:	4413      	add	r3, r2
 801036c:	653b      	str	r3, [r7, #80]	; 0x50
 801036e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010370:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8010374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010376:	4413      	add	r3, r2
 8010378:	653b      	str	r3, [r7, #80]	; 0x50
 801037a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801037c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010380:	65bb      	str	r3, [r7, #88]	; 0x58
 8010382:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010384:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010388:	43db      	mvns	r3, r3
 801038a:	4319      	orrs	r1, r3
 801038c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801038e:	4059      	eors	r1, r3
 8010390:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010394:	440b      	add	r3, r1
 8010396:	441a      	add	r2, r3
 8010398:	4ba1      	ldr	r3, [pc, #644]	; (8010620 <mbedtls_internal_ripemd160_process+0x12d8>)
 801039a:	4413      	add	r3, r2
 801039c:	667b      	str	r3, [r7, #100]	; 0x64
 801039e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103a0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80103a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103a6:	4413      	add	r3, r2
 80103a8:	667b      	str	r3, [r7, #100]	; 0x64
 80103aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103ac:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80103b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A,  1, 15,  9, 14);
 80103b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80103b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103b8:	43db      	mvns	r3, r3
 80103ba:	4319      	orrs	r1, r3
 80103bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103be:	4059      	eors	r1, r3
 80103c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103c2:	440b      	add	r3, r1
 80103c4:	441a      	add	r2, r3
 80103c6:	4b95      	ldr	r3, [pc, #596]	; (801061c <mbedtls_internal_ripemd160_process+0x12d4>)
 80103c8:	4413      	add	r3, r2
 80103ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80103cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103ce:	ea4f 4273 	mov.w	r2, r3, ror #17
 80103d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103d4:	4413      	add	r3, r2
 80103d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80103d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103da:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80103de:	657b      	str	r3, [r7, #84]	; 0x54
 80103e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80103e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80103e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103e6:	43db      	mvns	r3, r3
 80103e8:	4319      	orrs	r1, r3
 80103ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103ec:	4059      	eors	r1, r3
 80103ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103f2:	440b      	add	r3, r1
 80103f4:	441a      	add	r2, r3
 80103f6:	4b8a      	ldr	r3, [pc, #552]	; (8010620 <mbedtls_internal_ripemd160_process+0x12d8>)
 80103f8:	4413      	add	r3, r2
 80103fa:	663b      	str	r3, [r7, #96]	; 0x60
 80103fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103fe:	ea4f 42b3 	mov.w	r2, r3, ror #18
 8010402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010404:	4413      	add	r3, r2
 8010406:	663b      	str	r3, [r7, #96]	; 0x60
 8010408:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801040a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801040e:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E,  2, 14, 11, 12);
 8010410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010412:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010416:	43db      	mvns	r3, r3
 8010418:	4319      	orrs	r1, r3
 801041a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801041c:	4059      	eors	r1, r3
 801041e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010420:	440b      	add	r3, r1
 8010422:	441a      	add	r2, r3
 8010424:	4b7d      	ldr	r3, [pc, #500]	; (801061c <mbedtls_internal_ripemd160_process+0x12d4>)
 8010426:	4413      	add	r3, r2
 8010428:	64bb      	str	r3, [r7, #72]	; 0x48
 801042a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801042c:	ea4f 42b3 	mov.w	r2, r3, ror #18
 8010430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010432:	4413      	add	r3, r2
 8010434:	64bb      	str	r3, [r7, #72]	; 0x48
 8010436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010438:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801043c:	653b      	str	r3, [r7, #80]	; 0x50
 801043e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010440:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010444:	43db      	mvns	r3, r3
 8010446:	4319      	orrs	r1, r3
 8010448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801044a:	4059      	eors	r1, r3
 801044c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010450:	440b      	add	r3, r1
 8010452:	441a      	add	r2, r3
 8010454:	4b72      	ldr	r3, [pc, #456]	; (8010620 <mbedtls_internal_ripemd160_process+0x12d8>)
 8010456:	4413      	add	r3, r2
 8010458:	65fb      	str	r3, [r7, #92]	; 0x5c
 801045a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801045c:	ea4f 5233 	mov.w	r2, r3, ror #20
 8010460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010462:	4413      	add	r3, r2
 8010464:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010466:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010468:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801046c:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D,  7,  8,  8, 13);
 801046e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010470:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010474:	43db      	mvns	r3, r3
 8010476:	4319      	orrs	r1, r3
 8010478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801047a:	4059      	eors	r1, r3
 801047c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010480:	440b      	add	r3, r1
 8010482:	441a      	add	r2, r3
 8010484:	4b65      	ldr	r3, [pc, #404]	; (801061c <mbedtls_internal_ripemd160_process+0x12d4>)
 8010486:	4413      	add	r3, r2
 8010488:	65bb      	str	r3, [r7, #88]	; 0x58
 801048a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801048c:	ea4f 6233 	mov.w	r2, r3, ror #24
 8010490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010492:	4413      	add	r3, r2
 8010494:	65bb      	str	r3, [r7, #88]	; 0x58
 8010496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010498:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801049c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801049e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80104a0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80104a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104a4:	43db      	mvns	r3, r3
 80104a6:	4319      	orrs	r1, r3
 80104a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104aa:	4059      	eors	r1, r3
 80104ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104b0:	440b      	add	r3, r1
 80104b2:	441a      	add	r2, r3
 80104b4:	4b5a      	ldr	r3, [pc, #360]	; (8010620 <mbedtls_internal_ripemd160_process+0x12d8>)
 80104b6:	4413      	add	r3, r2
 80104b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80104ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104bc:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80104c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104c2:	4413      	add	r3, r2
 80104c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80104c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104c8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80104cc:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C,  0, 13, 12,  5);
 80104ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80104d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104d4:	43db      	mvns	r3, r3
 80104d6:	4319      	orrs	r1, r3
 80104d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104da:	4059      	eors	r1, r3
 80104dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104de:	440b      	add	r3, r1
 80104e0:	441a      	add	r2, r3
 80104e2:	4b4e      	ldr	r3, [pc, #312]	; (801061c <mbedtls_internal_ripemd160_process+0x12d4>)
 80104e4:	4413      	add	r3, r2
 80104e6:	657b      	str	r3, [r7, #84]	; 0x54
 80104e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104ea:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80104ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104f0:	4413      	add	r3, r2
 80104f2:	657b      	str	r3, [r7, #84]	; 0x54
 80104f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104f6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80104fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80104fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80104fe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010502:	43db      	mvns	r3, r3
 8010504:	4319      	orrs	r1, r3
 8010506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010508:	4059      	eors	r1, r3
 801050a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801050e:	440b      	add	r3, r1
 8010510:	441a      	add	r2, r3
 8010512:	4b43      	ldr	r3, [pc, #268]	; (8010620 <mbedtls_internal_ripemd160_process+0x12d8>)
 8010514:	4413      	add	r3, r2
 8010516:	66bb      	str	r3, [r7, #104]	; 0x68
 8010518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801051a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 801051e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010520:	4413      	add	r3, r2
 8010522:	66bb      	str	r3, [r7, #104]	; 0x68
 8010524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010526:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801052a:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B,  6,  6,  2, 14);
 801052c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801052e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010532:	43db      	mvns	r3, r3
 8010534:	4319      	orrs	r1, r3
 8010536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010538:	4059      	eors	r1, r3
 801053a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801053e:	440b      	add	r3, r1
 8010540:	441a      	add	r2, r3
 8010542:	4b36      	ldr	r3, [pc, #216]	; (801061c <mbedtls_internal_ripemd160_process+0x12d4>)
 8010544:	4413      	add	r3, r2
 8010546:	653b      	str	r3, [r7, #80]	; 0x50
 8010548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801054a:	ea4f 62b3 	mov.w	r2, r3, ror #26
 801054e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010550:	4413      	add	r3, r2
 8010552:	653b      	str	r3, [r7, #80]	; 0x50
 8010554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010556:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801055a:	65bb      	str	r3, [r7, #88]	; 0x58
 801055c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801055e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010562:	43db      	mvns	r3, r3
 8010564:	4319      	orrs	r1, r3
 8010566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010568:	4059      	eors	r1, r3
 801056a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801056c:	440b      	add	r3, r1
 801056e:	441a      	add	r2, r3
 8010570:	4b2b      	ldr	r3, [pc, #172]	; (8010620 <mbedtls_internal_ripemd160_process+0x12d8>)
 8010572:	4413      	add	r3, r2
 8010574:	667b      	str	r3, [r7, #100]	; 0x64
 8010576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010578:	ea4f 42b3 	mov.w	r2, r3, ror #18
 801057c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801057e:	4413      	add	r3, r2
 8010580:	667b      	str	r3, [r7, #100]	; 0x64
 8010582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010584:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010588:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A, 13,  5, 10, 13);
 801058a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801058c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801058e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010590:	43db      	mvns	r3, r3
 8010592:	4319      	orrs	r1, r3
 8010594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010596:	4059      	eors	r1, r3
 8010598:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801059c:	440b      	add	r3, r1
 801059e:	441a      	add	r2, r3
 80105a0:	4b1e      	ldr	r3, [pc, #120]	; (801061c <mbedtls_internal_ripemd160_process+0x12d4>)
 80105a2:	4413      	add	r3, r2
 80105a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80105a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105a8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80105ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105ae:	4413      	add	r3, r2
 80105b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80105b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105b4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80105b8:	657b      	str	r3, [r7, #84]	; 0x54
 80105ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80105bc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80105be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105c0:	43db      	mvns	r3, r3
 80105c2:	4319      	orrs	r1, r3
 80105c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105c6:	4059      	eors	r1, r3
 80105c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80105cc:	440b      	add	r3, r1
 80105ce:	441a      	add	r2, r3
 80105d0:	4b13      	ldr	r3, [pc, #76]	; (8010620 <mbedtls_internal_ripemd160_process+0x12d8>)
 80105d2:	4413      	add	r3, r2
 80105d4:	663b      	str	r3, [r7, #96]	; 0x60
 80105d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105d8:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80105dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105de:	4413      	add	r3, r2
 80105e0:	663b      	str	r3, [r7, #96]	; 0x60
 80105e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105e4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80105e8:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E, 11, 12,  0, 13);
 80105ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80105ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105f0:	43db      	mvns	r3, r3
 80105f2:	4319      	orrs	r1, r3
 80105f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105f6:	4059      	eors	r1, r3
 80105f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80105fc:	440b      	add	r3, r1
 80105fe:	441a      	add	r2, r3
 8010600:	4b06      	ldr	r3, [pc, #24]	; (801061c <mbedtls_internal_ripemd160_process+0x12d4>)
 8010602:	4413      	add	r3, r2
 8010604:	64bb      	str	r3, [r7, #72]	; 0x48
 8010606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010608:	ea4f 5233 	mov.w	r2, r3, ror #20
 801060c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801060e:	4413      	add	r3, r2
 8010610:	64bb      	str	r3, [r7, #72]	; 0x48
 8010612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010614:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010618:	e004      	b.n	8010624 <mbedtls_internal_ripemd160_process+0x12dc>
 801061a:	bf00      	nop
 801061c:	6ed9eba1 	.word	0x6ed9eba1
 8010620:	6d703ef3 	.word	0x6d703ef3
 8010624:	653b      	str	r3, [r7, #80]	; 0x50
 8010626:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010628:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801062a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801062c:	43db      	mvns	r3, r3
 801062e:	4319      	orrs	r1, r3
 8010630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010632:	4059      	eors	r1, r3
 8010634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010636:	440b      	add	r3, r1
 8010638:	441a      	add	r2, r3
 801063a:	4bac      	ldr	r3, [pc, #688]	; (80108ec <mbedtls_internal_ripemd160_process+0x15a4>)
 801063c:	4413      	add	r3, r2
 801063e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010642:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8010646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010648:	4413      	add	r3, r2
 801064a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801064c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801064e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010652:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D,  5,  7,  4,  7);
 8010654:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010656:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801065a:	43db      	mvns	r3, r3
 801065c:	4319      	orrs	r1, r3
 801065e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010660:	4059      	eors	r1, r3
 8010662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010666:	440b      	add	r3, r1
 8010668:	441a      	add	r2, r3
 801066a:	4ba1      	ldr	r3, [pc, #644]	; (80108f0 <mbedtls_internal_ripemd160_process+0x15a8>)
 801066c:	4413      	add	r3, r2
 801066e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010672:	ea4f 6273 	mov.w	r2, r3, ror #25
 8010676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010678:	4413      	add	r3, r2
 801067a:	65bb      	str	r3, [r7, #88]	; 0x58
 801067c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801067e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010684:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010686:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801068a:	43db      	mvns	r3, r3
 801068c:	4319      	orrs	r1, r3
 801068e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010690:	4059      	eors	r1, r3
 8010692:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010696:	440b      	add	r3, r1
 8010698:	441a      	add	r2, r3
 801069a:	4b94      	ldr	r3, [pc, #592]	; (80108ec <mbedtls_internal_ripemd160_process+0x15a4>)
 801069c:	4413      	add	r3, r2
 801069e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80106a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106a2:	ea4f 6273 	mov.w	r2, r3, ror #25
 80106a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106a8:	4413      	add	r3, r2
 80106aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80106ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106ae:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80106b2:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C, 12,  5, 13,  5);
 80106b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80106b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106ba:	43db      	mvns	r3, r3
 80106bc:	4319      	orrs	r1, r3
 80106be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106c0:	4059      	eors	r1, r3
 80106c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80106c6:	440b      	add	r3, r1
 80106c8:	441a      	add	r2, r3
 80106ca:	4b89      	ldr	r3, [pc, #548]	; (80108f0 <mbedtls_internal_ripemd160_process+0x15a8>)
 80106cc:	4413      	add	r3, r2
 80106ce:	657b      	str	r3, [r7, #84]	; 0x54
 80106d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106d2:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80106d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106d8:	4413      	add	r3, r2
 80106da:	657b      	str	r3, [r7, #84]	; 0x54
 80106dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106de:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80106e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80106e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80106e6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80106e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106ea:	43db      	mvns	r3, r3
 80106ec:	4319      	orrs	r1, r3
 80106ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106f0:	4059      	eors	r1, r3
 80106f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80106f6:	440b      	add	r3, r1
 80106f8:	441a      	add	r2, r3
 80106fa:	4b7c      	ldr	r3, [pc, #496]	; (80108ec <mbedtls_internal_ripemd160_process+0x15a4>)
 80106fc:	4413      	add	r3, r2
 80106fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8010700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010702:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8010706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010708:	4413      	add	r3, r2
 801070a:	66bb      	str	r3, [r7, #104]	; 0x68
 801070c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801070e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010712:	65fb      	str	r3, [r7, #92]	; 0x5c

#define F   F4
#define K   0x8F1BBCDC
#define Fp  F2
#define Kp  0x7A6D76E9
    P2(local.C, local.D, local.E, local.A, local.B,  1, 11,  8, 15);
 8010714:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010716:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801071a:	4019      	ands	r1, r3
 801071c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801071e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010720:	43db      	mvns	r3, r3
 8010722:	4003      	ands	r3, r0
 8010724:	4319      	orrs	r1, r3
 8010726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010728:	440b      	add	r3, r1
 801072a:	441a      	add	r2, r3
 801072c:	4b71      	ldr	r3, [pc, #452]	; (80108f4 <mbedtls_internal_ripemd160_process+0x15ac>)
 801072e:	4413      	add	r3, r2
 8010730:	653b      	str	r3, [r7, #80]	; 0x50
 8010732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010734:	ea4f 5273 	mov.w	r2, r3, ror #21
 8010738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801073a:	4413      	add	r3, r2
 801073c:	653b      	str	r3, [r7, #80]	; 0x50
 801073e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010740:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010744:	65bb      	str	r3, [r7, #88]	; 0x58
 8010746:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010748:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801074a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801074c:	4019      	ands	r1, r3
 801074e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010750:	43d8      	mvns	r0, r3
 8010752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010754:	4003      	ands	r3, r0
 8010756:	4319      	orrs	r1, r3
 8010758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801075c:	440b      	add	r3, r1
 801075e:	441a      	add	r2, r3
 8010760:	4b65      	ldr	r3, [pc, #404]	; (80108f8 <mbedtls_internal_ripemd160_process+0x15b0>)
 8010762:	4413      	add	r3, r2
 8010764:	667b      	str	r3, [r7, #100]	; 0x64
 8010766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010768:	ea4f 4273 	mov.w	r2, r3, ror #17
 801076c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801076e:	4413      	add	r3, r2
 8010770:	667b      	str	r3, [r7, #100]	; 0x64
 8010772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010774:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010778:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A,  9, 12,  6,  5);
 801077a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801077c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801077e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010780:	4019      	ands	r1, r3
 8010782:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010786:	43db      	mvns	r3, r3
 8010788:	4003      	ands	r3, r0
 801078a:	4319      	orrs	r1, r3
 801078c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010790:	440b      	add	r3, r1
 8010792:	441a      	add	r2, r3
 8010794:	4b57      	ldr	r3, [pc, #348]	; (80108f4 <mbedtls_internal_ripemd160_process+0x15ac>)
 8010796:	4413      	add	r3, r2
 8010798:	64fb      	str	r3, [r7, #76]	; 0x4c
 801079a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801079c:	ea4f 5233 	mov.w	r2, r3, ror #20
 80107a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107a2:	4413      	add	r3, r2
 80107a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80107a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107a8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80107ac:	657b      	str	r3, [r7, #84]	; 0x54
 80107ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80107b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80107b4:	4019      	ands	r1, r3
 80107b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107b8:	43d8      	mvns	r0, r3
 80107ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107bc:	4003      	ands	r3, r0
 80107be:	4319      	orrs	r1, r3
 80107c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80107c4:	440b      	add	r3, r1
 80107c6:	441a      	add	r2, r3
 80107c8:	4b4b      	ldr	r3, [pc, #300]	; (80108f8 <mbedtls_internal_ripemd160_process+0x15b0>)
 80107ca:	4413      	add	r3, r2
 80107cc:	663b      	str	r3, [r7, #96]	; 0x60
 80107ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107d0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80107d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107d6:	4413      	add	r3, r2
 80107d8:	663b      	str	r3, [r7, #96]	; 0x60
 80107da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80107dc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80107e0:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E, 11, 14,  4,  8);
 80107e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80107e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107e8:	4019      	ands	r1, r3
 80107ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80107ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107ee:	43db      	mvns	r3, r3
 80107f0:	4003      	ands	r3, r0
 80107f2:	4319      	orrs	r1, r3
 80107f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80107f8:	440b      	add	r3, r1
 80107fa:	441a      	add	r2, r3
 80107fc:	4b3d      	ldr	r3, [pc, #244]	; (80108f4 <mbedtls_internal_ripemd160_process+0x15ac>)
 80107fe:	4413      	add	r3, r2
 8010800:	64bb      	str	r3, [r7, #72]	; 0x48
 8010802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010804:	ea4f 42b3 	mov.w	r2, r3, ror #18
 8010808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801080a:	4413      	add	r3, r2
 801080c:	64bb      	str	r3, [r7, #72]	; 0x48
 801080e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010810:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010814:	653b      	str	r3, [r7, #80]	; 0x50
 8010816:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010818:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801081a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801081c:	4019      	ands	r1, r3
 801081e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010820:	43d8      	mvns	r0, r3
 8010822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010824:	4003      	ands	r3, r0
 8010826:	4319      	orrs	r1, r3
 8010828:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801082c:	440b      	add	r3, r1
 801082e:	441a      	add	r2, r3
 8010830:	4b31      	ldr	r3, [pc, #196]	; (80108f8 <mbedtls_internal_ripemd160_process+0x15b0>)
 8010832:	4413      	add	r3, r2
 8010834:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010838:	ea4f 6233 	mov.w	r2, r3, ror #24
 801083c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801083e:	4413      	add	r3, r2
 8010840:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010844:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010848:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D, 10, 15,  1, 11);
 801084a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801084c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801084e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010850:	4019      	ands	r1, r3
 8010852:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010856:	43db      	mvns	r3, r3
 8010858:	4003      	ands	r3, r0
 801085a:	4319      	orrs	r1, r3
 801085c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010860:	440b      	add	r3, r1
 8010862:	441a      	add	r2, r3
 8010864:	4b23      	ldr	r3, [pc, #140]	; (80108f4 <mbedtls_internal_ripemd160_process+0x15ac>)
 8010866:	4413      	add	r3, r2
 8010868:	65bb      	str	r3, [r7, #88]	; 0x58
 801086a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801086c:	ea4f 4273 	mov.w	r2, r3, ror #17
 8010870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010872:	4413      	add	r3, r2
 8010874:	65bb      	str	r3, [r7, #88]	; 0x58
 8010876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010878:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801087c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801087e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010880:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010884:	4019      	ands	r1, r3
 8010886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010888:	43d8      	mvns	r0, r3
 801088a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801088c:	4003      	ands	r3, r0
 801088e:	4319      	orrs	r1, r3
 8010890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010892:	440b      	add	r3, r1
 8010894:	441a      	add	r2, r3
 8010896:	4b18      	ldr	r3, [pc, #96]	; (80108f8 <mbedtls_internal_ripemd160_process+0x15b0>)
 8010898:	4413      	add	r3, r2
 801089a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801089c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801089e:	ea4f 5273 	mov.w	r2, r3, ror #21
 80108a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80108a4:	4413      	add	r3, r2
 80108a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80108a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80108aa:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80108ae:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C,  0, 14,  3, 14);
 80108b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80108b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80108b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108b6:	4019      	ands	r1, r3
 80108b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80108ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108bc:	43db      	mvns	r3, r3
 80108be:	4003      	ands	r3, r0
 80108c0:	4319      	orrs	r1, r3
 80108c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80108c4:	440b      	add	r3, r1
 80108c6:	441a      	add	r2, r3
 80108c8:	4b0a      	ldr	r3, [pc, #40]	; (80108f4 <mbedtls_internal_ripemd160_process+0x15ac>)
 80108ca:	4413      	add	r3, r2
 80108cc:	657b      	str	r3, [r7, #84]	; 0x54
 80108ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108d0:	ea4f 42b3 	mov.w	r2, r3, ror #18
 80108d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108d6:	4413      	add	r3, r2
 80108d8:	657b      	str	r3, [r7, #84]	; 0x54
 80108da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108dc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80108e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80108e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80108e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80108e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108e8:	e008      	b.n	80108fc <mbedtls_internal_ripemd160_process+0x15b4>
 80108ea:	bf00      	nop
 80108ec:	6d703ef3 	.word	0x6d703ef3
 80108f0:	6ed9eba1 	.word	0x6ed9eba1
 80108f4:	8f1bbcdc 	.word	0x8f1bbcdc
 80108f8:	7a6d76e9 	.word	0x7a6d76e9
 80108fc:	4019      	ands	r1, r3
 80108fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010900:	43d8      	mvns	r0, r3
 8010902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010904:	4003      	ands	r3, r0
 8010906:	4319      	orrs	r1, r3
 8010908:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801090a:	440b      	add	r3, r1
 801090c:	441a      	add	r2, r3
 801090e:	4bac      	ldr	r3, [pc, #688]	; (8010bc0 <mbedtls_internal_ripemd160_process+0x1878>)
 8010910:	4413      	add	r3, r2
 8010912:	66bb      	str	r3, [r7, #104]	; 0x68
 8010914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010916:	ea4f 42b3 	mov.w	r2, r3, ror #18
 801091a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801091c:	4413      	add	r3, r2
 801091e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010922:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010926:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B,  8, 15, 11, 14);
 8010928:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801092a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801092c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801092e:	4019      	ands	r1, r3
 8010930:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010934:	43db      	mvns	r3, r3
 8010936:	4003      	ands	r3, r0
 8010938:	4319      	orrs	r1, r3
 801093a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801093e:	440b      	add	r3, r1
 8010940:	441a      	add	r2, r3
 8010942:	4ba0      	ldr	r3, [pc, #640]	; (8010bc4 <mbedtls_internal_ripemd160_process+0x187c>)
 8010944:	4413      	add	r3, r2
 8010946:	653b      	str	r3, [r7, #80]	; 0x50
 8010948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801094a:	ea4f 4273 	mov.w	r2, r3, ror #17
 801094e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010950:	4413      	add	r3, r2
 8010952:	653b      	str	r3, [r7, #80]	; 0x50
 8010954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010956:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801095a:	65bb      	str	r3, [r7, #88]	; 0x58
 801095c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801095e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010962:	4019      	ands	r1, r3
 8010964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010966:	43d8      	mvns	r0, r3
 8010968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801096a:	4003      	ands	r3, r0
 801096c:	4319      	orrs	r1, r3
 801096e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010972:	440b      	add	r3, r1
 8010974:	441a      	add	r2, r3
 8010976:	4b92      	ldr	r3, [pc, #584]	; (8010bc0 <mbedtls_internal_ripemd160_process+0x1878>)
 8010978:	4413      	add	r3, r2
 801097a:	667b      	str	r3, [r7, #100]	; 0x64
 801097c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801097e:	ea4f 42b3 	mov.w	r2, r3, ror #18
 8010982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010984:	4413      	add	r3, r2
 8010986:	667b      	str	r3, [r7, #100]	; 0x64
 8010988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801098a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801098e:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A, 12,  9, 15,  6);
 8010990:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010992:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010996:	4019      	ands	r1, r3
 8010998:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801099a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801099c:	43db      	mvns	r3, r3
 801099e:	4003      	ands	r3, r0
 80109a0:	4319      	orrs	r1, r3
 80109a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80109a6:	440b      	add	r3, r1
 80109a8:	441a      	add	r2, r3
 80109aa:	4b86      	ldr	r3, [pc, #536]	; (8010bc4 <mbedtls_internal_ripemd160_process+0x187c>)
 80109ac:	4413      	add	r3, r2
 80109ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80109b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109b2:	ea4f 52f3 	mov.w	r2, r3, ror #23
 80109b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109b8:	4413      	add	r3, r2
 80109ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80109bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109be:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80109c2:	657b      	str	r3, [r7, #84]	; 0x54
 80109c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80109c6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80109c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109ca:	4019      	ands	r1, r3
 80109cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109ce:	43d8      	mvns	r0, r3
 80109d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109d2:	4003      	ands	r3, r0
 80109d4:	4319      	orrs	r1, r3
 80109d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80109da:	440b      	add	r3, r1
 80109dc:	441a      	add	r2, r3
 80109de:	4b78      	ldr	r3, [pc, #480]	; (8010bc0 <mbedtls_internal_ripemd160_process+0x1878>)
 80109e0:	4413      	add	r3, r2
 80109e2:	663b      	str	r3, [r7, #96]	; 0x60
 80109e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109e6:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80109ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109ec:	4413      	add	r3, r2
 80109ee:	663b      	str	r3, [r7, #96]	; 0x60
 80109f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109f2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80109f6:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E,  4,  8,  0, 14);
 80109f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80109fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109fe:	4019      	ands	r1, r3
 8010a00:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a04:	43db      	mvns	r3, r3
 8010a06:	4003      	ands	r3, r0
 8010a08:	4319      	orrs	r1, r3
 8010a0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010a0e:	440b      	add	r3, r1
 8010a10:	441a      	add	r2, r3
 8010a12:	4b6c      	ldr	r3, [pc, #432]	; (8010bc4 <mbedtls_internal_ripemd160_process+0x187c>)
 8010a14:	4413      	add	r3, r2
 8010a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a1a:	ea4f 6233 	mov.w	r2, r3, ror #24
 8010a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a20:	4413      	add	r3, r2
 8010a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a26:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8010a2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010a2e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a32:	4019      	ands	r1, r3
 8010a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a36:	43d8      	mvns	r0, r3
 8010a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a3a:	4003      	ands	r3, r0
 8010a3c:	4319      	orrs	r1, r3
 8010a3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a40:	440b      	add	r3, r1
 8010a42:	441a      	add	r2, r3
 8010a44:	4b5e      	ldr	r3, [pc, #376]	; (8010bc0 <mbedtls_internal_ripemd160_process+0x1878>)
 8010a46:	4413      	add	r3, r2
 8010a48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a4c:	ea4f 42b3 	mov.w	r2, r3, ror #18
 8010a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a52:	4413      	add	r3, r2
 8010a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010a56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a58:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010a5c:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D, 13,  9,  5,  6);
 8010a5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a64:	4019      	ands	r1, r3
 8010a66:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a6a:	43db      	mvns	r3, r3
 8010a6c:	4003      	ands	r3, r0
 8010a6e:	4319      	orrs	r1, r3
 8010a70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010a74:	440b      	add	r3, r1
 8010a76:	441a      	add	r2, r3
 8010a78:	4b52      	ldr	r3, [pc, #328]	; (8010bc4 <mbedtls_internal_ripemd160_process+0x187c>)
 8010a7a:	4413      	add	r3, r2
 8010a7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a80:	ea4f 52f3 	mov.w	r2, r3, ror #23
 8010a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a86:	4413      	add	r3, r2
 8010a88:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a8c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010a90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010a94:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a98:	4019      	ands	r1, r3
 8010a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a9c:	43d8      	mvns	r0, r3
 8010a9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010aa0:	4003      	ands	r3, r0
 8010aa2:	4319      	orrs	r1, r3
 8010aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010aa8:	440b      	add	r3, r1
 8010aaa:	441a      	add	r2, r3
 8010aac:	4b44      	ldr	r3, [pc, #272]	; (8010bc0 <mbedtls_internal_ripemd160_process+0x1878>)
 8010aae:	4413      	add	r3, r2
 8010ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ab4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8010ab8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010aba:	4413      	add	r3, r2
 8010abc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ac0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010ac4:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C,  3, 14, 12,  9);
 8010ac6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010ac8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010acc:	4019      	ands	r1, r3
 8010ace:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ad2:	43db      	mvns	r3, r3
 8010ad4:	4003      	ands	r3, r0
 8010ad6:	4319      	orrs	r1, r3
 8010ad8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010ada:	440b      	add	r3, r1
 8010adc:	441a      	add	r2, r3
 8010ade:	4b39      	ldr	r3, [pc, #228]	; (8010bc4 <mbedtls_internal_ripemd160_process+0x187c>)
 8010ae0:	4413      	add	r3, r2
 8010ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8010ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ae6:	ea4f 42b3 	mov.w	r2, r3, ror #18
 8010aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aec:	4413      	add	r3, r2
 8010aee:	657b      	str	r3, [r7, #84]	; 0x54
 8010af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010af2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8010af8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010afa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010afe:	4019      	ands	r1, r3
 8010b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b02:	43d8      	mvns	r0, r3
 8010b04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b06:	4003      	ands	r3, r0
 8010b08:	4319      	orrs	r1, r3
 8010b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010b0e:	440b      	add	r3, r1
 8010b10:	441a      	add	r2, r3
 8010b12:	4b2b      	ldr	r3, [pc, #172]	; (8010bc0 <mbedtls_internal_ripemd160_process+0x1878>)
 8010b14:	4413      	add	r3, r2
 8010b16:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b1a:	ea4f 52f3 	mov.w	r2, r3, ror #23
 8010b1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b20:	4413      	add	r3, r2
 8010b22:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b26:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B,  7,  5,  2, 12);
 8010b2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b32:	4019      	ands	r1, r3
 8010b34:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b38:	43db      	mvns	r3, r3
 8010b3a:	4003      	ands	r3, r0
 8010b3c:	4319      	orrs	r1, r3
 8010b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b42:	440b      	add	r3, r1
 8010b44:	441a      	add	r2, r3
 8010b46:	4b1f      	ldr	r3, [pc, #124]	; (8010bc4 <mbedtls_internal_ripemd160_process+0x187c>)
 8010b48:	4413      	add	r3, r2
 8010b4a:	653b      	str	r3, [r7, #80]	; 0x50
 8010b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b4e:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8010b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b54:	4413      	add	r3, r2
 8010b56:	653b      	str	r3, [r7, #80]	; 0x50
 8010b58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b5a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010b5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010b60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010b62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b66:	4019      	ands	r1, r3
 8010b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b6a:	43d8      	mvns	r0, r3
 8010b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b6e:	4003      	ands	r3, r0
 8010b70:	4319      	orrs	r1, r3
 8010b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b74:	440b      	add	r3, r1
 8010b76:	441a      	add	r2, r3
 8010b78:	4b11      	ldr	r3, [pc, #68]	; (8010bc0 <mbedtls_internal_ripemd160_process+0x1878>)
 8010b7a:	4413      	add	r3, r2
 8010b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8010b7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b80:	ea4f 5233 	mov.w	r2, r3, ror #20
 8010b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b86:	4413      	add	r3, r2
 8010b88:	667b      	str	r3, [r7, #100]	; 0x64
 8010b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b8c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010b90:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A, 15,  6, 13,  9);
 8010b92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b98:	4019      	ands	r1, r3
 8010b9a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b9e:	43db      	mvns	r3, r3
 8010ba0:	4003      	ands	r3, r0
 8010ba2:	4319      	orrs	r1, r3
 8010ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010ba8:	440b      	add	r3, r1
 8010baa:	441a      	add	r2, r3
 8010bac:	4b05      	ldr	r3, [pc, #20]	; (8010bc4 <mbedtls_internal_ripemd160_process+0x187c>)
 8010bae:	4413      	add	r3, r2
 8010bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bb4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8010bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bba:	4413      	add	r3, r2
 8010bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010bbe:	e003      	b.n	8010bc8 <mbedtls_internal_ripemd160_process+0x1880>
 8010bc0:	7a6d76e9 	.word	0x7a6d76e9
 8010bc4:	8f1bbcdc 	.word	0x8f1bbcdc
 8010bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bca:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010bce:	657b      	str	r3, [r7, #84]	; 0x54
 8010bd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010bd2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bd6:	4019      	ands	r1, r3
 8010bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010bda:	43d8      	mvns	r0, r3
 8010bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010bde:	4003      	ands	r3, r0
 8010be0:	4319      	orrs	r1, r3
 8010be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010be6:	440b      	add	r3, r1
 8010be8:	441a      	add	r2, r3
 8010bea:	4bac      	ldr	r3, [pc, #688]	; (8010e9c <mbedtls_internal_ripemd160_process+0x1b54>)
 8010bec:	4413      	add	r3, r2
 8010bee:	663b      	str	r3, [r7, #96]	; 0x60
 8010bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bf2:	ea4f 52f3 	mov.w	r2, r3, ror #23
 8010bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bf8:	4413      	add	r3, r2
 8010bfa:	663b      	str	r3, [r7, #96]	; 0x60
 8010bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bfe:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010c02:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E, 14,  8,  9, 12);
 8010c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c06:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c0a:	4019      	ands	r1, r3
 8010c0c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c10:	43db      	mvns	r3, r3
 8010c12:	4003      	ands	r3, r0
 8010c14:	4319      	orrs	r1, r3
 8010c16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c1a:	440b      	add	r3, r1
 8010c1c:	441a      	add	r2, r3
 8010c1e:	4ba0      	ldr	r3, [pc, #640]	; (8010ea0 <mbedtls_internal_ripemd160_process+0x1b58>)
 8010c20:	4413      	add	r3, r2
 8010c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c26:	ea4f 6233 	mov.w	r2, r3, ror #24
 8010c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c2c:	4413      	add	r3, r2
 8010c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c32:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010c36:	653b      	str	r3, [r7, #80]	; 0x50
 8010c38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010c3a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c3e:	4019      	ands	r1, r3
 8010c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c42:	43d8      	mvns	r0, r3
 8010c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010c46:	4003      	ands	r3, r0
 8010c48:	4319      	orrs	r1, r3
 8010c4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c4e:	440b      	add	r3, r1
 8010c50:	441a      	add	r2, r3
 8010c52:	4b92      	ldr	r3, [pc, #584]	; (8010e9c <mbedtls_internal_ripemd160_process+0x1b54>)
 8010c54:	4413      	add	r3, r2
 8010c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c5a:	ea4f 5233 	mov.w	r2, r3, ror #20
 8010c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c60:	4413      	add	r3, r2
 8010c62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c66:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010c6a:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D,  5,  6,  7,  5);
 8010c6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c6e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c72:	4019      	ands	r1, r3
 8010c74:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c78:	43db      	mvns	r3, r3
 8010c7a:	4003      	ands	r3, r0
 8010c7c:	4319      	orrs	r1, r3
 8010c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010c82:	440b      	add	r3, r1
 8010c84:	441a      	add	r2, r3
 8010c86:	4b86      	ldr	r3, [pc, #536]	; (8010ea0 <mbedtls_internal_ripemd160_process+0x1b58>)
 8010c88:	4413      	add	r3, r2
 8010c8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c8e:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8010c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c94:	4413      	add	r3, r2
 8010c96:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c9a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ca0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010ca2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ca6:	4019      	ands	r1, r3
 8010ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010caa:	43d8      	mvns	r0, r3
 8010cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010cae:	4003      	ands	r3, r0
 8010cb0:	4319      	orrs	r1, r3
 8010cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010cb6:	440b      	add	r3, r1
 8010cb8:	441a      	add	r2, r3
 8010cba:	4b78      	ldr	r3, [pc, #480]	; (8010e9c <mbedtls_internal_ripemd160_process+0x1b54>)
 8010cbc:	4413      	add	r3, r2
 8010cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cc2:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8010cc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cc8:	4413      	add	r3, r2
 8010cca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010cce:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010cd2:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C,  6,  5, 10, 15);
 8010cd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010cd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cda:	4019      	ands	r1, r3
 8010cdc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ce0:	43db      	mvns	r3, r3
 8010ce2:	4003      	ands	r3, r0
 8010ce4:	4319      	orrs	r1, r3
 8010ce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010cea:	440b      	add	r3, r1
 8010cec:	441a      	add	r2, r3
 8010cee:	4b6c      	ldr	r3, [pc, #432]	; (8010ea0 <mbedtls_internal_ripemd160_process+0x1b58>)
 8010cf0:	4413      	add	r3, r2
 8010cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8010cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cf6:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8010cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cfc:	4413      	add	r3, r2
 8010cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8010d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d02:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8010d08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d0a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d0e:	4019      	ands	r1, r3
 8010d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d12:	43d8      	mvns	r0, r3
 8010d14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d16:	4003      	ands	r3, r0
 8010d18:	4319      	orrs	r1, r3
 8010d1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d1e:	440b      	add	r3, r1
 8010d20:	441a      	add	r2, r3
 8010d22:	4b5e      	ldr	r3, [pc, #376]	; (8010e9c <mbedtls_internal_ripemd160_process+0x1b54>)
 8010d24:	4413      	add	r3, r2
 8010d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8010d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d2a:	ea4f 4273 	mov.w	r2, r3, ror #17
 8010d2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d30:	4413      	add	r3, r2
 8010d32:	66bb      	str	r3, [r7, #104]	; 0x68
 8010d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d36:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B,  2, 12, 14,  8);
 8010d3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d42:	4019      	ands	r1, r3
 8010d44:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d48:	43db      	mvns	r3, r3
 8010d4a:	4003      	ands	r3, r0
 8010d4c:	4319      	orrs	r1, r3
 8010d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d50:	440b      	add	r3, r1
 8010d52:	441a      	add	r2, r3
 8010d54:	4b52      	ldr	r3, [pc, #328]	; (8010ea0 <mbedtls_internal_ripemd160_process+0x1b58>)
 8010d56:	4413      	add	r3, r2
 8010d58:	653b      	str	r3, [r7, #80]	; 0x50
 8010d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d5c:	ea4f 5233 	mov.w	r2, r3, ror #20
 8010d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d62:	4413      	add	r3, r2
 8010d64:	653b      	str	r3, [r7, #80]	; 0x50
 8010d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d68:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010d6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8010d6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010d70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d74:	4019      	ands	r1, r3
 8010d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d78:	43d8      	mvns	r0, r3
 8010d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d7c:	4003      	ands	r3, r0
 8010d7e:	4319      	orrs	r1, r3
 8010d80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d84:	440b      	add	r3, r1
 8010d86:	441a      	add	r2, r3
 8010d88:	4b44      	ldr	r3, [pc, #272]	; (8010e9c <mbedtls_internal_ripemd160_process+0x1b54>)
 8010d8a:	4413      	add	r3, r2
 8010d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8010d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d90:	ea4f 6233 	mov.w	r2, r3, ror #24
 8010d94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d96:	4413      	add	r3, r2
 8010d98:	667b      	str	r3, [r7, #100]	; 0x64
 8010d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d9c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010da0:	66fb      	str	r3, [r7, #108]	; 0x6c

#define F   F5
#define K   0xA953FD4E
#define Fp  F1
#define Kp  0x00000000
    P2(local.B, local.C, local.D, local.E, local.A,  4,  9, 12,  8);
 8010da2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010da4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010da6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010da8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010daa:	43db      	mvns	r3, r3
 8010dac:	4303      	orrs	r3, r0
 8010dae:	4059      	eors	r1, r3
 8010db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010db4:	440b      	add	r3, r1
 8010db6:	441a      	add	r2, r3
 8010db8:	4b3a      	ldr	r3, [pc, #232]	; (8010ea4 <mbedtls_internal_ripemd160_process+0x1b5c>)
 8010dba:	4413      	add	r3, r2
 8010dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dc0:	ea4f 52f3 	mov.w	r2, r3, ror #23
 8010dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dc6:	4413      	add	r3, r2
 8010dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010dcc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010dd0:	657b      	str	r3, [r7, #84]	; 0x54
 8010dd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010dd4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010dd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010dd8:	4059      	eors	r1, r3
 8010dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ddc:	4059      	eors	r1, r3
 8010dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010de2:	440b      	add	r3, r1
 8010de4:	4413      	add	r3, r2
 8010de6:	663b      	str	r3, [r7, #96]	; 0x60
 8010de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010dea:	ea4f 6233 	mov.w	r2, r3, ror #24
 8010dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010df0:	4413      	add	r3, r2
 8010df2:	663b      	str	r3, [r7, #96]	; 0x60
 8010df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010df6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010dfa:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E,  0, 15, 15,  5);
 8010dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010dfe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010e00:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e04:	43db      	mvns	r3, r3
 8010e06:	4303      	orrs	r3, r0
 8010e08:	4059      	eors	r1, r3
 8010e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e0c:	440b      	add	r3, r1
 8010e0e:	441a      	add	r2, r3
 8010e10:	4b24      	ldr	r3, [pc, #144]	; (8010ea4 <mbedtls_internal_ripemd160_process+0x1b5c>)
 8010e12:	4413      	add	r3, r2
 8010e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8010e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e18:	ea4f 4273 	mov.w	r2, r3, ror #17
 8010e1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e1e:	4413      	add	r3, r2
 8010e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8010e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e24:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010e28:	653b      	str	r3, [r7, #80]	; 0x50
 8010e2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010e2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e30:	4059      	eors	r1, r3
 8010e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010e34:	4059      	eors	r1, r3
 8010e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010e3a:	440b      	add	r3, r1
 8010e3c:	4413      	add	r3, r2
 8010e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e42:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8010e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e48:	4413      	add	r3, r2
 8010e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e4e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010e52:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D,  5,  5, 10, 12);
 8010e54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010e58:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e5c:	43db      	mvns	r3, r3
 8010e5e:	4303      	orrs	r3, r0
 8010e60:	4059      	eors	r1, r3
 8010e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010e66:	440b      	add	r3, r1
 8010e68:	441a      	add	r2, r3
 8010e6a:	4b0e      	ldr	r3, [pc, #56]	; (8010ea4 <mbedtls_internal_ripemd160_process+0x1b5c>)
 8010e6c:	4413      	add	r3, r2
 8010e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e72:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8010e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e78:	4413      	add	r3, r2
 8010e7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e7e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010e86:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e8a:	4059      	eors	r1, r3
 8010e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e8e:	4059      	eors	r1, r3
 8010e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010e94:	440b      	add	r3, r1
 8010e96:	4413      	add	r3, r2
 8010e98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010e9a:	e005      	b.n	8010ea8 <mbedtls_internal_ripemd160_process+0x1b60>
 8010e9c:	7a6d76e9 	.word	0x7a6d76e9
 8010ea0:	8f1bbcdc 	.word	0x8f1bbcdc
 8010ea4:	a953fd4e 	.word	0xa953fd4e
 8010ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010eaa:	ea4f 5233 	mov.w	r2, r3, ror #20
 8010eae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010eb0:	4413      	add	r3, r2
 8010eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010eb6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010eba:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C,  9, 11,  4,  9);
 8010ebc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010ebe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010ec0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ec4:	43db      	mvns	r3, r3
 8010ec6:	4303      	orrs	r3, r0
 8010ec8:	4059      	eors	r1, r3
 8010eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ece:	440b      	add	r3, r1
 8010ed0:	441a      	add	r2, r3
 8010ed2:	4baa      	ldr	r3, [pc, #680]	; (801117c <mbedtls_internal_ripemd160_process+0x1e34>)
 8010ed4:	4413      	add	r3, r2
 8010ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8010ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010eda:	ea4f 5273 	mov.w	r2, r3, ror #21
 8010ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ee0:	4413      	add	r3, r2
 8010ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8010ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ee6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8010eec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010eee:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ef2:	4059      	eors	r1, r3
 8010ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ef6:	4059      	eors	r1, r3
 8010ef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010efc:	440b      	add	r3, r1
 8010efe:	4413      	add	r3, r2
 8010f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f04:	ea4f 52f3 	mov.w	r2, r3, ror #23
 8010f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f0a:	4413      	add	r3, r2
 8010f0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f10:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010f14:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B,  7,  6,  1, 12);
 8010f16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010f18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f1a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f1e:	43db      	mvns	r3, r3
 8010f20:	4303      	orrs	r3, r0
 8010f22:	4059      	eors	r1, r3
 8010f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010f28:	440b      	add	r3, r1
 8010f2a:	441a      	add	r2, r3
 8010f2c:	4b93      	ldr	r3, [pc, #588]	; (801117c <mbedtls_internal_ripemd160_process+0x1e34>)
 8010f2e:	4413      	add	r3, r2
 8010f30:	653b      	str	r3, [r7, #80]	; 0x50
 8010f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f34:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8010f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f3a:	4413      	add	r3, r2
 8010f3c:	653b      	str	r3, [r7, #80]	; 0x50
 8010f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f40:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8010f46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010f48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f4c:	4059      	eors	r1, r3
 8010f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f50:	4059      	eors	r1, r3
 8010f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f54:	440b      	add	r3, r1
 8010f56:	4413      	add	r3, r2
 8010f58:	667b      	str	r3, [r7, #100]	; 0x64
 8010f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f5c:	ea4f 5233 	mov.w	r2, r3, ror #20
 8010f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f62:	4413      	add	r3, r2
 8010f64:	667b      	str	r3, [r7, #100]	; 0x64
 8010f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f68:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A, 12,  8,  5,  5);
 8010f6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010f72:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010f74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f76:	43db      	mvns	r3, r3
 8010f78:	4303      	orrs	r3, r0
 8010f7a:	4059      	eors	r1, r3
 8010f7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010f80:	440b      	add	r3, r1
 8010f82:	441a      	add	r2, r3
 8010f84:	4b7d      	ldr	r3, [pc, #500]	; (801117c <mbedtls_internal_ripemd160_process+0x1e34>)
 8010f86:	4413      	add	r3, r2
 8010f88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f8c:	ea4f 6233 	mov.w	r2, r3, ror #24
 8010f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f92:	4413      	add	r3, r2
 8010f94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f98:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8010f9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010fa0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010fa4:	4059      	eors	r1, r3
 8010fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fa8:	4059      	eors	r1, r3
 8010faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fae:	440b      	add	r3, r1
 8010fb0:	4413      	add	r3, r2
 8010fb2:	663b      	str	r3, [r7, #96]	; 0x60
 8010fb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010fb6:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8010fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010fbc:	4413      	add	r3, r2
 8010fbe:	663b      	str	r3, [r7, #96]	; 0x60
 8010fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010fc2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010fc6:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E,  2, 13,  8, 14);
 8010fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010fca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010fcc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fd0:	43db      	mvns	r3, r3
 8010fd2:	4303      	orrs	r3, r0
 8010fd4:	4059      	eors	r1, r3
 8010fd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010fd8:	440b      	add	r3, r1
 8010fda:	441a      	add	r2, r3
 8010fdc:	4b67      	ldr	r3, [pc, #412]	; (801117c <mbedtls_internal_ripemd160_process+0x1e34>)
 8010fde:	4413      	add	r3, r2
 8010fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8010fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fe4:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8010fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010fea:	4413      	add	r3, r2
 8010fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8010fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ff0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010ff4:	653b      	str	r3, [r7, #80]	; 0x50
 8010ff6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010ff8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ffc:	4059      	eors	r1, r3
 8010ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011000:	4059      	eors	r1, r3
 8011002:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011006:	440b      	add	r3, r1
 8011008:	4413      	add	r3, r2
 801100a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801100c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801100e:	ea4f 42b3 	mov.w	r2, r3, ror #18
 8011012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011014:	4413      	add	r3, r2
 8011016:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801101a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801101e:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D, 10, 12,  7,  6);
 8011020:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011022:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011024:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011028:	43db      	mvns	r3, r3
 801102a:	4303      	orrs	r3, r0
 801102c:	4059      	eors	r1, r3
 801102e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011032:	440b      	add	r3, r1
 8011034:	441a      	add	r2, r3
 8011036:	4b51      	ldr	r3, [pc, #324]	; (801117c <mbedtls_internal_ripemd160_process+0x1e34>)
 8011038:	4413      	add	r3, r2
 801103a:	65bb      	str	r3, [r7, #88]	; 0x58
 801103c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801103e:	ea4f 5233 	mov.w	r2, r3, ror #20
 8011042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011044:	4413      	add	r3, r2
 8011046:	65bb      	str	r3, [r7, #88]	; 0x58
 8011048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801104a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801104e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011050:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011052:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011056:	4059      	eors	r1, r3
 8011058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801105a:	4059      	eors	r1, r3
 801105c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011060:	440b      	add	r3, r1
 8011062:	4413      	add	r3, r2
 8011064:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011068:	ea4f 62b3 	mov.w	r2, r3, ror #26
 801106c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801106e:	4413      	add	r3, r2
 8011070:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011074:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011078:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C, 14,  5,  6,  8);
 801107a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801107c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801107e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011082:	43db      	mvns	r3, r3
 8011084:	4303      	orrs	r3, r0
 8011086:	4059      	eors	r1, r3
 8011088:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801108c:	440b      	add	r3, r1
 801108e:	441a      	add	r2, r3
 8011090:	4b3a      	ldr	r3, [pc, #232]	; (801117c <mbedtls_internal_ripemd160_process+0x1e34>)
 8011092:	4413      	add	r3, r2
 8011094:	657b      	str	r3, [r7, #84]	; 0x54
 8011096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011098:	ea4f 62f3 	mov.w	r2, r3, ror #27
 801109c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801109e:	4413      	add	r3, r2
 80110a0:	657b      	str	r3, [r7, #84]	; 0x54
 80110a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110a4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80110a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80110aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80110ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80110ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80110b0:	4059      	eors	r1, r3
 80110b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80110b4:	4059      	eors	r1, r3
 80110b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80110ba:	440b      	add	r3, r1
 80110bc:	4413      	add	r3, r2
 80110be:	66bb      	str	r3, [r7, #104]	; 0x68
 80110c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80110c2:	ea4f 6233 	mov.w	r2, r3, ror #24
 80110c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110c8:	4413      	add	r3, r2
 80110ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80110cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80110ce:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80110d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B,  1, 12,  2, 13);
 80110d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80110d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80110d8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80110da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110dc:	43db      	mvns	r3, r3
 80110de:	4303      	orrs	r3, r0
 80110e0:	4059      	eors	r1, r3
 80110e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80110e4:	440b      	add	r3, r1
 80110e6:	441a      	add	r2, r3
 80110e8:	4b24      	ldr	r3, [pc, #144]	; (801117c <mbedtls_internal_ripemd160_process+0x1e34>)
 80110ea:	4413      	add	r3, r2
 80110ec:	653b      	str	r3, [r7, #80]	; 0x50
 80110ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110f0:	ea4f 5233 	mov.w	r2, r3, ror #20
 80110f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110f6:	4413      	add	r3, r2
 80110f8:	653b      	str	r3, [r7, #80]	; 0x50
 80110fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80110fc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011100:	65bb      	str	r3, [r7, #88]	; 0x58
 8011102:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011104:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011108:	4059      	eors	r1, r3
 801110a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801110c:	4059      	eors	r1, r3
 801110e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011110:	440b      	add	r3, r1
 8011112:	4413      	add	r3, r2
 8011114:	667b      	str	r3, [r7, #100]	; 0x64
 8011116:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011118:	ea4f 42f3 	mov.w	r2, r3, ror #19
 801111c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801111e:	4413      	add	r3, r2
 8011120:	667b      	str	r3, [r7, #100]	; 0x64
 8011122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011124:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011128:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A,  3, 13, 13,  6);
 801112a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801112c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801112e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011132:	43db      	mvns	r3, r3
 8011134:	4303      	orrs	r3, r0
 8011136:	4059      	eors	r1, r3
 8011138:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801113a:	440b      	add	r3, r1
 801113c:	441a      	add	r2, r3
 801113e:	4b0f      	ldr	r3, [pc, #60]	; (801117c <mbedtls_internal_ripemd160_process+0x1e34>)
 8011140:	4413      	add	r3, r2
 8011142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011146:	ea4f 42f3 	mov.w	r2, r3, ror #19
 801114a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801114c:	4413      	add	r3, r2
 801114e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011152:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011156:	657b      	str	r3, [r7, #84]	; 0x54
 8011158:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801115a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801115c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801115e:	4059      	eors	r1, r3
 8011160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011162:	4059      	eors	r1, r3
 8011164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011168:	440b      	add	r3, r1
 801116a:	4413      	add	r3, r2
 801116c:	663b      	str	r3, [r7, #96]	; 0x60
 801116e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011170:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8011174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011176:	4413      	add	r3, r2
 8011178:	663b      	str	r3, [r7, #96]	; 0x60
 801117a:	e001      	b.n	8011180 <mbedtls_internal_ripemd160_process+0x1e38>
 801117c:	a953fd4e 	.word	0xa953fd4e
 8011180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011182:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011186:	66bb      	str	r3, [r7, #104]	; 0x68
    P2(local.A, local.B, local.C, local.D, local.E,  8, 14, 14,  5);
 8011188:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801118a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801118c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801118e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011190:	43db      	mvns	r3, r3
 8011192:	4303      	orrs	r3, r0
 8011194:	4059      	eors	r1, r3
 8011196:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801119a:	440b      	add	r3, r1
 801119c:	441a      	add	r2, r3
 801119e:	4b84      	ldr	r3, [pc, #528]	; (80113b0 <mbedtls_internal_ripemd160_process+0x2068>)
 80111a0:	4413      	add	r3, r2
 80111a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80111a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111a6:	ea4f 42b3 	mov.w	r2, r3, ror #18
 80111aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80111ac:	4413      	add	r3, r2
 80111ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80111b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111b2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80111b6:	653b      	str	r3, [r7, #80]	; 0x50
 80111b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80111ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80111bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111be:	4059      	eors	r1, r3
 80111c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80111c2:	4059      	eors	r1, r3
 80111c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80111c8:	440b      	add	r3, r1
 80111ca:	4413      	add	r3, r2
 80111cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80111ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111d0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80111d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80111d6:	4413      	add	r3, r2
 80111d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80111da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111dc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80111e0:	667b      	str	r3, [r7, #100]	; 0x64
    P2(local.E, local.A, local.B, local.C, local.D, 11, 11,  0, 15);
 80111e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80111e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80111e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80111e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111ea:	43db      	mvns	r3, r3
 80111ec:	4303      	orrs	r3, r0
 80111ee:	4059      	eors	r1, r3
 80111f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80111f4:	440b      	add	r3, r1
 80111f6:	441a      	add	r2, r3
 80111f8:	4b6d      	ldr	r3, [pc, #436]	; (80113b0 <mbedtls_internal_ripemd160_process+0x2068>)
 80111fa:	4413      	add	r3, r2
 80111fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80111fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011200:	ea4f 5273 	mov.w	r2, r3, ror #21
 8011204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011206:	4413      	add	r3, r2
 8011208:	65bb      	str	r3, [r7, #88]	; 0x58
 801120a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801120c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011210:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011212:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011214:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011218:	4059      	eors	r1, r3
 801121a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801121c:	4059      	eors	r1, r3
 801121e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011220:	440b      	add	r3, r1
 8011222:	4413      	add	r3, r2
 8011224:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011228:	ea4f 4273 	mov.w	r2, r3, ror #17
 801122c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801122e:	4413      	add	r3, r2
 8011230:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011234:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011238:	663b      	str	r3, [r7, #96]	; 0x60
    P2(local.D, local.E, local.A, local.B, local.C,  6,  8,  3, 13);
 801123a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801123c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801123e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011242:	43db      	mvns	r3, r3
 8011244:	4303      	orrs	r3, r0
 8011246:	4059      	eors	r1, r3
 8011248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801124c:	440b      	add	r3, r1
 801124e:	441a      	add	r2, r3
 8011250:	4b57      	ldr	r3, [pc, #348]	; (80113b0 <mbedtls_internal_ripemd160_process+0x2068>)
 8011252:	4413      	add	r3, r2
 8011254:	657b      	str	r3, [r7, #84]	; 0x54
 8011256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011258:	ea4f 6233 	mov.w	r2, r3, ror #24
 801125c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801125e:	4413      	add	r3, r2
 8011260:	657b      	str	r3, [r7, #84]	; 0x54
 8011262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011264:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011268:	64bb      	str	r3, [r7, #72]	; 0x48
 801126a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801126c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801126e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011270:	4059      	eors	r1, r3
 8011272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011274:	4059      	eors	r1, r3
 8011276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011278:	440b      	add	r3, r1
 801127a:	4413      	add	r3, r2
 801127c:	66bb      	str	r3, [r7, #104]	; 0x68
 801127e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011280:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8011284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011286:	4413      	add	r3, r2
 8011288:	66bb      	str	r3, [r7, #104]	; 0x68
 801128a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801128c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011290:	65fb      	str	r3, [r7, #92]	; 0x5c
    P2(local.C, local.D, local.E, local.A, local.B, 15,  5,  9, 11);
 8011292:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011294:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011296:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801129a:	43db      	mvns	r3, r3
 801129c:	4303      	orrs	r3, r0
 801129e:	4059      	eors	r1, r3
 80112a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80112a4:	440b      	add	r3, r1
 80112a6:	441a      	add	r2, r3
 80112a8:	4b41      	ldr	r3, [pc, #260]	; (80113b0 <mbedtls_internal_ripemd160_process+0x2068>)
 80112aa:	4413      	add	r3, r2
 80112ac:	653b      	str	r3, [r7, #80]	; 0x50
 80112ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112b0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80112b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112b6:	4413      	add	r3, r2
 80112b8:	653b      	str	r3, [r7, #80]	; 0x50
 80112ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112bc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80112c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80112c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80112c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80112c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80112c8:	4059      	eors	r1, r3
 80112ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80112cc:	4059      	eors	r1, r3
 80112ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112d2:	440b      	add	r3, r1
 80112d4:	4413      	add	r3, r2
 80112d6:	667b      	str	r3, [r7, #100]	; 0x64
 80112d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80112da:	ea4f 5273 	mov.w	r2, r3, ror #21
 80112de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80112e0:	4413      	add	r3, r2
 80112e2:	667b      	str	r3, [r7, #100]	; 0x64
 80112e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80112e6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80112ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    P2(local.B, local.C, local.D, local.E, local.A, 13,  6, 11, 11);
 80112ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80112ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80112f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80112f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112f4:	43db      	mvns	r3, r3
 80112f6:	4303      	orrs	r3, r0
 80112f8:	4059      	eors	r1, r3
 80112fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80112fe:	440b      	add	r3, r1
 8011300:	441a      	add	r2, r3
 8011302:	4b2b      	ldr	r3, [pc, #172]	; (80113b0 <mbedtls_internal_ripemd160_process+0x2068>)
 8011304:	4413      	add	r3, r2
 8011306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801130a:	ea4f 62b3 	mov.w	r2, r3, ror #26
 801130e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011310:	4413      	add	r3, r2
 8011312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011316:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801131a:	657b      	str	r3, [r7, #84]	; 0x54
 801131c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801131e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011322:	4059      	eors	r1, r3
 8011324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011326:	4059      	eors	r1, r3
 8011328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801132c:	440b      	add	r3, r1
 801132e:	4413      	add	r3, r2
 8011330:	663b      	str	r3, [r7, #96]	; 0x60
 8011332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011334:	ea4f 5273 	mov.w	r2, r3, ror #21
 8011338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801133a:	4413      	add	r3, r2
 801133c:	663b      	str	r3, [r7, #96]	; 0x60
 801133e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011340:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011344:	66bb      	str	r3, [r7, #104]	; 0x68
#undef F
#undef K
#undef Fp
#undef Kp

    local.C       = ctx->state[1] + local.C + local.Dp;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	68da      	ldr	r2, [r3, #12]
 801134a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801134c:	441a      	add	r2, r3
 801134e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011350:	4413      	add	r3, r2
 8011352:	653b      	str	r3, [r7, #80]	; 0x50
    ctx->state[1] = ctx->state[2] + local.D + local.Ep;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	691a      	ldr	r2, [r3, #16]
 8011358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801135a:	441a      	add	r2, r3
 801135c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801135e:	441a      	add	r2, r3
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	60da      	str	r2, [r3, #12]
    ctx->state[2] = ctx->state[3] + local.E + local.Ap;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	695a      	ldr	r2, [r3, #20]
 8011368:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801136a:	441a      	add	r2, r3
 801136c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801136e:	441a      	add	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	611a      	str	r2, [r3, #16]
    ctx->state[3] = ctx->state[4] + local.A + local.Bp;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	699a      	ldr	r2, [r3, #24]
 8011378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801137a:	441a      	add	r2, r3
 801137c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801137e:	441a      	add	r2, r3
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	615a      	str	r2, [r3, #20]
    ctx->state[4] = ctx->state[0] + local.B + local.Cp;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	689a      	ldr	r2, [r3, #8]
 8011388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801138a:	441a      	add	r2, r3
 801138c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801138e:	441a      	add	r2, r3
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	619a      	str	r2, [r3, #24]
    ctx->state[0] = local.C;
 8011394:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	609a      	str	r2, [r3, #8]

    /* Zeroise variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize(&local, sizeof(local));
 801139a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801139e:	2168      	movs	r1, #104	; 0x68
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7fd fac3 	bl	800e92c <mbedtls_platform_zeroize>

    return 0;
 80113a6:	2300      	movs	r3, #0
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	37f0      	adds	r7, #240	; 0xf0
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	a953fd4e 	.word	0xa953fd4e

080113b4 <mbedtls_ripemd160_update>:
 * RIPEMD-160 process buffer
 */
int mbedtls_ripemd160_update(mbedtls_ripemd160_context *ctx,
                             const unsigned char *input,
                             size_t ilen)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b088      	sub	sp, #32
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	60b9      	str	r1, [r7, #8]
 80113be:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80113c0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80113c4:	61bb      	str	r3, [r7, #24]
    size_t fill;
    uint32_t left;

    if (ilen == 0) {
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d101      	bne.n	80113d0 <mbedtls_ripemd160_update+0x1c>
        return 0;
 80113cc:	2300      	movs	r3, #0
 80113ce:	e065      	b.n	801149c <mbedtls_ripemd160_update+0xe8>
    }

    left = ctx->total[0] & 0x3F;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113d8:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 80113da:	69fb      	ldr	r3, [r7, #28]
 80113dc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80113e0:	617b      	str	r3, [r7, #20]

    ctx->total[0] += (uint32_t) ilen;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	681a      	ldr	r2, [r3, #0]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	441a      	add	r2, r3
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	681a      	ldr	r2, [r3, #0]
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	601a      	str	r2, [r3, #0]

    if (ctx->total[0] < (uint32_t) ilen) {
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	687a      	ldr	r2, [r7, #4]
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d904      	bls.n	801140a <mbedtls_ripemd160_update+0x56>
        ctx->total[1]++;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	1c5a      	adds	r2, r3, #1
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	605a      	str	r2, [r3, #4]
    }

    if (left && ilen >= fill) {
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d034      	beq.n	801147a <mbedtls_ripemd160_update+0xc6>
 8011410:	687a      	ldr	r2, [r7, #4]
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	429a      	cmp	r2, r3
 8011416:	d330      	bcc.n	801147a <mbedtls_ripemd160_update+0xc6>
        memcpy((void *) (ctx->buffer + left), input, fill);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f103 021c 	add.w	r2, r3, #28
 801141e:	69fb      	ldr	r3, [r7, #28]
 8011420:	4413      	add	r3, r2
 8011422:	697a      	ldr	r2, [r7, #20]
 8011424:	68b9      	ldr	r1, [r7, #8]
 8011426:	4618      	mov	r0, r3
 8011428:	f00b ff66 	bl	801d2f8 <memcpy>

        if ((ret = mbedtls_internal_ripemd160_process(ctx, ctx->buffer)) != 0) {
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	331c      	adds	r3, #28
 8011430:	4619      	mov	r1, r3
 8011432:	68f8      	ldr	r0, [r7, #12]
 8011434:	f7fd ff88 	bl	800f348 <mbedtls_internal_ripemd160_process>
 8011438:	61b8      	str	r0, [r7, #24]
 801143a:	69bb      	ldr	r3, [r7, #24]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d001      	beq.n	8011444 <mbedtls_ripemd160_update+0x90>
            return ret;
 8011440:	69bb      	ldr	r3, [r7, #24]
 8011442:	e02b      	b.n	801149c <mbedtls_ripemd160_update+0xe8>
        }

        input += fill;
 8011444:	68ba      	ldr	r2, [r7, #8]
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	4413      	add	r3, r2
 801144a:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 801144c:	687a      	ldr	r2, [r7, #4]
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	607b      	str	r3, [r7, #4]
        left = 0;
 8011454:	2300      	movs	r3, #0
 8011456:	61fb      	str	r3, [r7, #28]
    }

    while (ilen >= 64) {
 8011458:	e00f      	b.n	801147a <mbedtls_ripemd160_update+0xc6>
        if ((ret = mbedtls_internal_ripemd160_process(ctx, input)) != 0) {
 801145a:	68b9      	ldr	r1, [r7, #8]
 801145c:	68f8      	ldr	r0, [r7, #12]
 801145e:	f7fd ff73 	bl	800f348 <mbedtls_internal_ripemd160_process>
 8011462:	61b8      	str	r0, [r7, #24]
 8011464:	69bb      	ldr	r3, [r7, #24]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d001      	beq.n	801146e <mbedtls_ripemd160_update+0xba>
            return ret;
 801146a:	69bb      	ldr	r3, [r7, #24]
 801146c:	e016      	b.n	801149c <mbedtls_ripemd160_update+0xe8>
        }

        input += 64;
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	3340      	adds	r3, #64	; 0x40
 8011472:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	3b40      	subs	r3, #64	; 0x40
 8011478:	607b      	str	r3, [r7, #4]
    while (ilen >= 64) {
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2b3f      	cmp	r3, #63	; 0x3f
 801147e:	d8ec      	bhi.n	801145a <mbedtls_ripemd160_update+0xa6>
    }

    if (ilen > 0) {
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d009      	beq.n	801149a <mbedtls_ripemd160_update+0xe6>
        memcpy((void *) (ctx->buffer + left), input, ilen);
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	f103 021c 	add.w	r2, r3, #28
 801148c:	69fb      	ldr	r3, [r7, #28]
 801148e:	4413      	add	r3, r2
 8011490:	687a      	ldr	r2, [r7, #4]
 8011492:	68b9      	ldr	r1, [r7, #8]
 8011494:	4618      	mov	r0, r3
 8011496:	f00b ff2f 	bl	801d2f8 <memcpy>
    }

    return 0;
 801149a:	2300      	movs	r3, #0
}
 801149c:	4618      	mov	r0, r3
 801149e:	3720      	adds	r7, #32
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}

080114a4 <mbedtls_ripemd160_finish>:
/*
 * RIPEMD-160 final digest
 */
int mbedtls_ripemd160_finish(mbedtls_ripemd160_context *ctx,
                             unsigned char output[20])
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b098      	sub	sp, #96	; 0x60
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80114ae:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80114b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = (ctx->total[0] >> 29)
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	0f5a      	lsrs	r2, r3, #29
           | (ctx->total[1] <<  3);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	00db      	lsls	r3, r3, #3
    high = (ctx->total[0] >> 29)
 80114c0:	4313      	orrs	r3, r2
 80114c2:	653b      	str	r3, [r7, #80]	; 0x50
    low  = (ctx->total[0] <<  3);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	00db      	lsls	r3, r3, #3
 80114ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80114d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80114d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114d4:	60fb      	str	r3, [r7, #12]
 80114d6:	68fa      	ldr	r2, [r7, #12]
    memcpy(p, &x, sizeof(x));
 80114d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114da:	601a      	str	r2, [r3, #0]
}
 80114dc:	bf00      	nop

    MBEDTLS_PUT_UINT32_LE(low,  msglen, 0);
    MBEDTLS_PUT_UINT32_LE(high, msglen, 4);
 80114de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80114e2:	3304      	adds	r3, #4
 80114e4:	647b      	str	r3, [r7, #68]	; 0x44
 80114e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114e8:	613b      	str	r3, [r7, #16]
 80114ea:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 80114ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114ee:	601a      	str	r2, [r3, #0]
}
 80114f0:	bf00      	nop

    last = ctx->total[0] & 0x3F;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114fa:	657b      	str	r3, [r7, #84]	; 0x54
    padn = (last < 56) ? (56 - last) : (120 - last);
 80114fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114fe:	2b37      	cmp	r3, #55	; 0x37
 8011500:	d803      	bhi.n	801150a <mbedtls_ripemd160_finish+0x66>
 8011502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011504:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011508:	e002      	b.n	8011510 <mbedtls_ripemd160_finish+0x6c>
 801150a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801150c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8011510:	65bb      	str	r3, [r7, #88]	; 0x58

    ret = mbedtls_ripemd160_update(ctx, ripemd160_padding, padn);
 8011512:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011514:	492a      	ldr	r1, [pc, #168]	; (80115c0 <mbedtls_ripemd160_finish+0x11c>)
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f7ff ff4c 	bl	80113b4 <mbedtls_ripemd160_update>
 801151c:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (ret != 0) {
 801151e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011520:	2b00      	cmp	r3, #0
 8011522:	d141      	bne.n	80115a8 <mbedtls_ripemd160_finish+0x104>
        goto exit;
    }

    ret = mbedtls_ripemd160_update(ctx, msglen, 8);
 8011524:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011528:	2208      	movs	r2, #8
 801152a:	4619      	mov	r1, r3
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f7ff ff41 	bl	80113b4 <mbedtls_ripemd160_update>
 8011532:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (ret != 0) {
 8011534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011536:	2b00      	cmp	r3, #0
 8011538:	d138      	bne.n	80115ac <mbedtls_ripemd160_finish+0x108>
        goto exit;
    }

    MBEDTLS_PUT_UINT32_LE(ctx->state[0], output,  0);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	689b      	ldr	r3, [r3, #8]
 801153e:	683a      	ldr	r2, [r7, #0]
 8011540:	643a      	str	r2, [r7, #64]	; 0x40
 8011542:	617b      	str	r3, [r7, #20]
 8011544:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8011546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011548:	601a      	str	r2, [r3, #0]
}
 801154a:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(ctx->state[1], output,  4);
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	1d1a      	adds	r2, r3, #4
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	68db      	ldr	r3, [r3, #12]
 8011554:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011556:	61bb      	str	r3, [r7, #24]
 8011558:	69ba      	ldr	r2, [r7, #24]
    memcpy(p, &x, sizeof(x));
 801155a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801155c:	601a      	str	r2, [r3, #0]
}
 801155e:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(ctx->state[2], output,  8);
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	f103 0208 	add.w	r2, r3, #8
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	691b      	ldr	r3, [r3, #16]
 801156a:	63ba      	str	r2, [r7, #56]	; 0x38
 801156c:	61fb      	str	r3, [r7, #28]
 801156e:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 8011570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011572:	601a      	str	r2, [r3, #0]
}
 8011574:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(ctx->state[3], output, 12);
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	f103 020c 	add.w	r2, r3, #12
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	695b      	ldr	r3, [r3, #20]
 8011580:	637a      	str	r2, [r7, #52]	; 0x34
 8011582:	623b      	str	r3, [r7, #32]
 8011584:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8011586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011588:	601a      	str	r2, [r3, #0]
}
 801158a:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(ctx->state[4], output, 16);
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	f103 0210 	add.w	r2, r3, #16
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	699b      	ldr	r3, [r3, #24]
 8011596:	633a      	str	r2, [r7, #48]	; 0x30
 8011598:	627b      	str	r3, [r7, #36]	; 0x24
 801159a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 801159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159e:	601a      	str	r2, [r3, #0]
}
 80115a0:	bf00      	nop

    ret = 0;
 80115a2:	2300      	movs	r3, #0
 80115a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80115a6:	e002      	b.n	80115ae <mbedtls_ripemd160_finish+0x10a>
        goto exit;
 80115a8:	bf00      	nop
 80115aa:	e000      	b.n	80115ae <mbedtls_ripemd160_finish+0x10a>
        goto exit;
 80115ac:	bf00      	nop

exit:
    mbedtls_ripemd160_free(ctx);
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f7fd fe90 	bl	800f2d4 <mbedtls_ripemd160_free>
    return ret;
 80115b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3760      	adds	r7, #96	; 0x60
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	0801ff60 	.word	0x0801ff60

080115c4 <mbedtls_ripemd160>:
 * output = RIPEMD-160( input buffer )
 */
int mbedtls_ripemd160(const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20])
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b09c      	sub	sp, #112	; 0x70
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80115d0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80115d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    mbedtls_ripemd160_context ctx;

    mbedtls_ripemd160_init(&ctx);
 80115d6:	f107 0310 	add.w	r3, r7, #16
 80115da:	4618      	mov	r0, r3
 80115dc:	f7fd fe6d 	bl	800f2ba <mbedtls_ripemd160_init>

    if ((ret = mbedtls_ripemd160_starts(&ctx)) != 0) {
 80115e0:	f107 0310 	add.w	r3, r7, #16
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7fd fe85 	bl	800f2f4 <mbedtls_ripemd160_starts>
 80115ea:	66f8      	str	r0, [r7, #108]	; 0x6c
 80115ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d114      	bne.n	801161c <mbedtls_ripemd160+0x58>
        goto exit;
    }

    if ((ret = mbedtls_ripemd160_update(&ctx, input, ilen)) != 0) {
 80115f2:	f107 0310 	add.w	r3, r7, #16
 80115f6:	68ba      	ldr	r2, [r7, #8]
 80115f8:	68f9      	ldr	r1, [r7, #12]
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7ff feda 	bl	80113b4 <mbedtls_ripemd160_update>
 8011600:	66f8      	str	r0, [r7, #108]	; 0x6c
 8011602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011604:	2b00      	cmp	r3, #0
 8011606:	d10b      	bne.n	8011620 <mbedtls_ripemd160+0x5c>
        goto exit;
    }

    if ((ret = mbedtls_ripemd160_finish(&ctx, output)) != 0) {
 8011608:	f107 0310 	add.w	r3, r7, #16
 801160c:	6879      	ldr	r1, [r7, #4]
 801160e:	4618      	mov	r0, r3
 8011610:	f7ff ff48 	bl	80114a4 <mbedtls_ripemd160_finish>
 8011614:	66f8      	str	r0, [r7, #108]	; 0x6c
 8011616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011618:	2b00      	cmp	r3, #0
        goto exit;
    }

exit:
 801161a:	e002      	b.n	8011622 <mbedtls_ripemd160+0x5e>
        goto exit;
 801161c:	bf00      	nop
 801161e:	e000      	b.n	8011622 <mbedtls_ripemd160+0x5e>
        goto exit;
 8011620:	bf00      	nop
    mbedtls_ripemd160_free(&ctx);
 8011622:	f107 0310 	add.w	r3, r7, #16
 8011626:	4618      	mov	r0, r3
 8011628:	f7fd fe54 	bl	800f2d4 <mbedtls_ripemd160_free>

    return ret;
 801162c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 801162e:	4618      	mov	r0, r3
 8011630:	3770      	adds	r7, #112	; 0x70
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}

08011636 <mbedtls_sha1_init>:
#include "mbedtls/platform.h"

#if !defined(MBEDTLS_SHA1_ALT)

void mbedtls_sha1_init(mbedtls_sha1_context *ctx)
{
 8011636:	b580      	push	{r7, lr}
 8011638:	b082      	sub	sp, #8
 801163a:	af00      	add	r7, sp, #0
 801163c:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_sha1_context));
 801163e:	225c      	movs	r2, #92	; 0x5c
 8011640:	2100      	movs	r1, #0
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f00b fdba 	bl	801d1bc <memset>
}
 8011648:	bf00      	nop
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <mbedtls_sha1_free>:

void mbedtls_sha1_free(mbedtls_sha1_context *ctx)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d004      	beq.n	8011668 <mbedtls_sha1_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_sha1_context));
 801165e:	215c      	movs	r1, #92	; 0x5c
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f7fd f963 	bl	800e92c <mbedtls_platform_zeroize>
 8011666:	e000      	b.n	801166a <mbedtls_sha1_free+0x1a>
        return;
 8011668:	bf00      	nop
}
 801166a:	3708      	adds	r7, #8
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <mbedtls_sha1_starts>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts(mbedtls_sha1_context *ctx)
{
 8011670:	b480      	push	{r7}
 8011672:	b083      	sub	sp, #12
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2200      	movs	r2, #0
 801167c:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2200      	movs	r2, #0
 8011682:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	4a0a      	ldr	r2, [pc, #40]	; (80116b0 <mbedtls_sha1_starts+0x40>)
 8011688:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4a09      	ldr	r2, [pc, #36]	; (80116b4 <mbedtls_sha1_starts+0x44>)
 801168e:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	4a09      	ldr	r2, [pc, #36]	; (80116b8 <mbedtls_sha1_starts+0x48>)
 8011694:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	4a08      	ldr	r2, [pc, #32]	; (80116bc <mbedtls_sha1_starts+0x4c>)
 801169a:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	4a08      	ldr	r2, [pc, #32]	; (80116c0 <mbedtls_sha1_starts+0x50>)
 80116a0:	619a      	str	r2, [r3, #24]

    return 0;
 80116a2:	2300      	movs	r3, #0
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	370c      	adds	r7, #12
 80116a8:	46bd      	mov	sp, r7
 80116aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ae:	4770      	bx	lr
 80116b0:	67452301 	.word	0x67452301
 80116b4:	efcdab89 	.word	0xefcdab89
 80116b8:	98badcfe 	.word	0x98badcfe
 80116bc:	10325476 	.word	0x10325476
 80116c0:	c3d2e1f0 	.word	0xc3d2e1f0

080116c4 <mbedtls_internal_sha1_process>:

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process(mbedtls_sha1_context *ctx,
                                  const unsigned char data[64])
{
 80116c4:	b5b0      	push	{r4, r5, r7, lr}
 80116c6:	b0b8      	sub	sp, #224	; 0xe0
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	6039      	str	r1, [r7, #0]
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80116d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80116d8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80116da:	647b      	str	r3, [r7, #68]	; 0x44
    return r;
 80116dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    struct {
        uint32_t temp, W[16], A, B, C, D, E;
    } local;

    local.W[0] = MBEDTLS_GET_UINT32_BE(data,  0);
 80116de:	ba1b      	rev	r3, r3
 80116e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    local.W[1] = MBEDTLS_GET_UINT32_BE(data,  4);
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	3304      	adds	r3, #4
 80116e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80116ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80116ee:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80116f0:	643b      	str	r3, [r7, #64]	; 0x40
    return r;
 80116f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116f4:	ba1b      	rev	r3, r3
 80116f6:	653b      	str	r3, [r7, #80]	; 0x50
    local.W[2] = MBEDTLS_GET_UINT32_BE(data,  8);
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	3308      	adds	r3, #8
 80116fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011704:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8011706:	63fb      	str	r3, [r7, #60]	; 0x3c
    return r;
 8011708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801170a:	ba1b      	rev	r3, r3
 801170c:	657b      	str	r3, [r7, #84]	; 0x54
    local.W[3] = MBEDTLS_GET_UINT32_BE(data, 12);
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	330c      	adds	r3, #12
 8011712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801171a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 801171c:	63bb      	str	r3, [r7, #56]	; 0x38
    return r;
 801171e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011720:	ba1b      	rev	r3, r3
 8011722:	65bb      	str	r3, [r7, #88]	; 0x58
    local.W[4] = MBEDTLS_GET_UINT32_BE(data, 16);
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	3310      	adds	r3, #16
 8011728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801172c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011730:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8011732:	637b      	str	r3, [r7, #52]	; 0x34
    return r;
 8011734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011736:	ba1b      	rev	r3, r3
 8011738:	65fb      	str	r3, [r7, #92]	; 0x5c
    local.W[5] = MBEDTLS_GET_UINT32_BE(data, 20);
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	3314      	adds	r3, #20
 801173e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011746:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8011748:	633b      	str	r3, [r7, #48]	; 0x30
    return r;
 801174a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174c:	ba1b      	rev	r3, r3
 801174e:	663b      	str	r3, [r7, #96]	; 0x60
    local.W[6] = MBEDTLS_GET_UINT32_BE(data, 24);
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	3318      	adds	r3, #24
 8011754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011758:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801175c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 801175e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 8011760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011762:	ba1b      	rev	r3, r3
 8011764:	667b      	str	r3, [r7, #100]	; 0x64
    local.W[7] = MBEDTLS_GET_UINT32_BE(data, 28);
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	331c      	adds	r3, #28
 801176a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801176e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011772:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8011774:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8011776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011778:	ba1b      	rev	r3, r3
 801177a:	66bb      	str	r3, [r7, #104]	; 0x68
    local.W[8] = MBEDTLS_GET_UINT32_BE(data, 32);
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	3320      	adds	r3, #32
 8011780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011784:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011788:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 801178a:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 801178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801178e:	ba1b      	rev	r3, r3
 8011790:	66fb      	str	r3, [r7, #108]	; 0x6c
    local.W[9] = MBEDTLS_GET_UINT32_BE(data, 36);
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	3324      	adds	r3, #36	; 0x24
 8011796:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801179a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801179e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80117a0:	623b      	str	r3, [r7, #32]
    return r;
 80117a2:	6a3b      	ldr	r3, [r7, #32]
 80117a4:	ba1b      	rev	r3, r3
 80117a6:	673b      	str	r3, [r7, #112]	; 0x70
    local.W[10] = MBEDTLS_GET_UINT32_BE(data, 40);
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	3328      	adds	r3, #40	; 0x28
 80117ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80117b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80117b4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80117b6:	61fb      	str	r3, [r7, #28]
    return r;
 80117b8:	69fb      	ldr	r3, [r7, #28]
 80117ba:	ba1b      	rev	r3, r3
 80117bc:	677b      	str	r3, [r7, #116]	; 0x74
    local.W[11] = MBEDTLS_GET_UINT32_BE(data, 44);
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	332c      	adds	r3, #44	; 0x2c
 80117c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80117c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80117ca:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80117cc:	61bb      	str	r3, [r7, #24]
    return r;
 80117ce:	69bb      	ldr	r3, [r7, #24]
 80117d0:	ba1b      	rev	r3, r3
 80117d2:	67bb      	str	r3, [r7, #120]	; 0x78
    local.W[12] = MBEDTLS_GET_UINT32_BE(data, 48);
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	3330      	adds	r3, #48	; 0x30
 80117d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80117dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80117e0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80117e2:	617b      	str	r3, [r7, #20]
    return r;
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	ba1b      	rev	r3, r3
 80117e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    local.W[13] = MBEDTLS_GET_UINT32_BE(data, 52);
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	3334      	adds	r3, #52	; 0x34
 80117ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80117f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80117f6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80117f8:	613b      	str	r3, [r7, #16]
    return r;
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	ba1b      	rev	r3, r3
 80117fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    local.W[14] = MBEDTLS_GET_UINT32_BE(data, 56);
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	3338      	adds	r3, #56	; 0x38
 8011806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801180a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801180e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8011810:	60fb      	str	r3, [r7, #12]
    return r;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	ba1b      	rev	r3, r3
 8011816:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    local.W[15] = MBEDTLS_GET_UINT32_BE(data, 60);
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	333c      	adds	r3, #60	; 0x3c
 801181e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011826:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8011828:	60bb      	str	r3, [r7, #8]
    return r;
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	ba1b      	rev	r3, r3
 801182e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    {                                                           \
        (e) += S((a), 5) + F((b), (c), (d)) + K + (x);             \
        (b) = S((b), 30);                                        \
    } while (0)

    local.A = ctx->state[0];
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	689b      	ldr	r3, [r3, #8]
 8011836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    local.B = ctx->state[1];
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	68db      	ldr	r3, [r3, #12]
 801183e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    local.C = ctx->state[2];
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	691b      	ldr	r3, [r3, #16]
 8011846:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    local.D = ctx->state[3];
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	695b      	ldr	r3, [r3, #20]
 801184e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    local.E = ctx->state[4];
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	699b      	ldr	r3, [r3, #24]
 8011856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

#define F(x, y, z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P(local.A, local.B, local.C, local.D, local.E, local.W[0]);
 801185a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801185e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011862:	ea4f 61f3 	mov.w	r1, r3, ror #27
 8011866:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801186a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 801186e:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
 8011872:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011876:	406b      	eors	r3, r5
 8011878:	4023      	ands	r3, r4
 801187a:	4043      	eors	r3, r0
 801187c:	4419      	add	r1, r3
 801187e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011880:	440b      	add	r3, r1
 8011882:	441a      	add	r2, r3
 8011884:	4bf0      	ldr	r3, [pc, #960]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 8011886:	4413      	add	r3, r2
 8011888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801188c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011890:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011894:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, local.W[1]);
 8011898:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801189c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80118a0:	ea4f 61f3 	mov.w	r1, r3, ror #27
 80118a4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80118a8:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 80118ac:	f8d7 5090 	ldr.w	r5, [r7, #144]	; 0x90
 80118b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80118b4:	406b      	eors	r3, r5
 80118b6:	4023      	ands	r3, r4
 80118b8:	4043      	eors	r3, r0
 80118ba:	4419      	add	r1, r3
 80118bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118be:	440b      	add	r3, r1
 80118c0:	441a      	add	r2, r3
 80118c2:	4be1      	ldr	r3, [pc, #900]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 80118c4:	4413      	add	r3, r2
 80118c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80118ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80118ce:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80118d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, local.W[2]);
 80118d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80118da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80118de:	ea4f 61f3 	mov.w	r1, r3, ror #27
 80118e2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80118e6:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80118ea:	f8d7 508c 	ldr.w	r5, [r7, #140]	; 0x8c
 80118ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80118f2:	406b      	eors	r3, r5
 80118f4:	4023      	ands	r3, r4
 80118f6:	4043      	eors	r3, r0
 80118f8:	4419      	add	r1, r3
 80118fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118fc:	440b      	add	r3, r1
 80118fe:	441a      	add	r2, r3
 8011900:	4bd1      	ldr	r3, [pc, #836]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 8011902:	4413      	add	r3, r2
 8011904:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801190c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, local.W[3]);
 8011914:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011918:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801191c:	ea4f 61f3 	mov.w	r1, r3, ror #27
 8011920:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8011924:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8011928:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 801192c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011930:	406b      	eors	r3, r5
 8011932:	4023      	ands	r3, r4
 8011934:	4043      	eors	r3, r0
 8011936:	4419      	add	r1, r3
 8011938:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801193a:	440b      	add	r3, r1
 801193c:	441a      	add	r2, r3
 801193e:	4bc2      	ldr	r3, [pc, #776]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 8011940:	4413      	add	r3, r2
 8011942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011946:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801194a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801194e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, local.W[4]);
 8011952:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801195a:	ea4f 61f3 	mov.w	r1, r3, ror #27
 801195e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8011962:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 8011966:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 801196a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801196e:	406b      	eors	r3, r5
 8011970:	4023      	ands	r3, r4
 8011972:	4043      	eors	r3, r0
 8011974:	4419      	add	r1, r3
 8011976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011978:	440b      	add	r3, r1
 801197a:	441a      	add	r2, r3
 801197c:	4bb2      	ldr	r3, [pc, #712]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 801197e:	4413      	add	r3, r2
 8011980:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011984:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011988:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801198c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, local.W[5]);
 8011990:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011998:	ea4f 61f3 	mov.w	r1, r3, ror #27
 801199c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80119a0:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80119a4:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
 80119a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80119ac:	406b      	eors	r3, r5
 80119ae:	4023      	ands	r3, r4
 80119b0:	4043      	eors	r3, r0
 80119b2:	4419      	add	r1, r3
 80119b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119b6:	440b      	add	r3, r1
 80119b8:	441a      	add	r2, r3
 80119ba:	4ba3      	ldr	r3, [pc, #652]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 80119bc:	4413      	add	r3, r2
 80119be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80119c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80119c6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80119ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, local.W[6]);
 80119ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80119d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80119d6:	ea4f 61f3 	mov.w	r1, r3, ror #27
 80119da:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80119de:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 80119e2:	f8d7 5090 	ldr.w	r5, [r7, #144]	; 0x90
 80119e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80119ea:	406b      	eors	r3, r5
 80119ec:	4023      	ands	r3, r4
 80119ee:	4043      	eors	r3, r0
 80119f0:	4419      	add	r1, r3
 80119f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119f4:	440b      	add	r3, r1
 80119f6:	441a      	add	r2, r3
 80119f8:	4b93      	ldr	r3, [pc, #588]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 80119fa:	4413      	add	r3, r2
 80119fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011a04:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011a08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, local.W[7]);
 8011a0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011a14:	ea4f 61f3 	mov.w	r1, r3, ror #27
 8011a18:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8011a1c:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8011a20:	f8d7 508c 	ldr.w	r5, [r7, #140]	; 0x8c
 8011a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011a28:	406b      	eors	r3, r5
 8011a2a:	4023      	ands	r3, r4
 8011a2c:	4043      	eors	r3, r0
 8011a2e:	4419      	add	r1, r3
 8011a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011a32:	440b      	add	r3, r1
 8011a34:	441a      	add	r2, r3
 8011a36:	4b84      	ldr	r3, [pc, #528]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 8011a38:	4413      	add	r3, r2
 8011a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011a3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011a42:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, local.W[8]);
 8011a4a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011a4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011a52:	ea4f 61f3 	mov.w	r1, r3, ror #27
 8011a56:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8011a5a:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8011a5e:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 8011a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011a66:	406b      	eors	r3, r5
 8011a68:	4023      	ands	r3, r4
 8011a6a:	4043      	eors	r3, r0
 8011a6c:	4419      	add	r1, r3
 8011a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a70:	440b      	add	r3, r1
 8011a72:	441a      	add	r2, r3
 8011a74:	4b74      	ldr	r3, [pc, #464]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 8011a76:	4413      	add	r3, r2
 8011a78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011a80:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, local.W[9]);
 8011a88:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011a90:	ea4f 61f3 	mov.w	r1, r3, ror #27
 8011a94:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8011a98:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 8011a9c:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 8011aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011aa4:	406b      	eors	r3, r5
 8011aa6:	4023      	ands	r3, r4
 8011aa8:	4043      	eors	r3, r0
 8011aaa:	4419      	add	r1, r3
 8011aac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011aae:	440b      	add	r3, r1
 8011ab0:	441a      	add	r2, r3
 8011ab2:	4b65      	ldr	r3, [pc, #404]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 8011ab4:	4413      	add	r3, r2
 8011ab6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011aba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011abe:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, local.W[10]);
 8011ac6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011ace:	ea4f 61f3 	mov.w	r1, r3, ror #27
 8011ad2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8011ad6:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8011ada:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
 8011ade:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011ae2:	406b      	eors	r3, r5
 8011ae4:	4023      	ands	r3, r4
 8011ae6:	4043      	eors	r3, r0
 8011ae8:	4419      	add	r1, r3
 8011aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011aec:	440b      	add	r3, r1
 8011aee:	441a      	add	r2, r3
 8011af0:	4b55      	ldr	r3, [pc, #340]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 8011af2:	4413      	add	r3, r2
 8011af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011afc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011b00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, local.W[11]);
 8011b04:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011b0c:	ea4f 61f3 	mov.w	r1, r3, ror #27
 8011b10:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8011b14:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8011b18:	f8d7 5090 	ldr.w	r5, [r7, #144]	; 0x90
 8011b1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011b20:	406b      	eors	r3, r5
 8011b22:	4023      	ands	r3, r4
 8011b24:	4043      	eors	r3, r0
 8011b26:	4419      	add	r1, r3
 8011b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b2a:	440b      	add	r3, r1
 8011b2c:	441a      	add	r2, r3
 8011b2e:	4b46      	ldr	r3, [pc, #280]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 8011b30:	4413      	add	r3, r2
 8011b32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011b3a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, local.W[12]);
 8011b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011b46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b4a:	ea4f 61f3 	mov.w	r1, r3, ror #27
 8011b4e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8011b52:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8011b56:	f8d7 508c 	ldr.w	r5, [r7, #140]	; 0x8c
 8011b5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011b5e:	406b      	eors	r3, r5
 8011b60:	4023      	ands	r3, r4
 8011b62:	4043      	eors	r3, r0
 8011b64:	4419      	add	r1, r3
 8011b66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b68:	440b      	add	r3, r1
 8011b6a:	441a      	add	r2, r3
 8011b6c:	4b36      	ldr	r3, [pc, #216]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 8011b6e:	4413      	add	r3, r2
 8011b70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011b78:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, local.W[13]);
 8011b80:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011b84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011b88:	ea4f 61f3 	mov.w	r1, r3, ror #27
 8011b8c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8011b90:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8011b94:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 8011b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011b9c:	406b      	eors	r3, r5
 8011b9e:	4023      	ands	r3, r4
 8011ba0:	4043      	eors	r3, r0
 8011ba2:	4419      	add	r1, r3
 8011ba4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ba8:	440b      	add	r3, r1
 8011baa:	441a      	add	r2, r3
 8011bac:	4b26      	ldr	r3, [pc, #152]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 8011bae:	4413      	add	r3, r2
 8011bb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011bb8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, local.W[14]);
 8011bc0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011bc8:	ea4f 61f3 	mov.w	r1, r3, ror #27
 8011bcc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8011bd0:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 8011bd4:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 8011bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011bdc:	406b      	eors	r3, r5
 8011bde:	4023      	ands	r3, r4
 8011be0:	4043      	eors	r3, r0
 8011be2:	4419      	add	r1, r3
 8011be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011be8:	440b      	add	r3, r1
 8011bea:	441a      	add	r2, r3
 8011bec:	4b16      	ldr	r3, [pc, #88]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 8011bee:	4413      	add	r3, r2
 8011bf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011bf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011bf8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011bfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, local.W[15]);
 8011c00:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c08:	ea4f 61f3 	mov.w	r1, r3, ror #27
 8011c0c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8011c10:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8011c14:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
 8011c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011c1c:	406b      	eors	r3, r5
 8011c1e:	4023      	ands	r3, r4
 8011c20:	4043      	eors	r3, r0
 8011c22:	4419      	add	r1, r3
 8011c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011c28:	440b      	add	r3, r1
 8011c2a:	441a      	add	r2, r3
 8011c2c:	4b06      	ldr	r3, [pc, #24]	; (8011c48 <mbedtls_internal_sha1_process+0x584>)
 8011c2e:	4413      	add	r3, r2
 8011c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011c34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011c38:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011c3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(16));
 8011c40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011c44:	e002      	b.n	8011c4c <mbedtls_internal_sha1_process+0x588>
 8011c46:	bf00      	nop
 8011c48:	5a827999 	.word	0x5a827999
 8011c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c4e:	405a      	eors	r2, r3
 8011c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c52:	405a      	eors	r2, r3
 8011c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c56:	4053      	eors	r3, r2
 8011c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011c5e:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8011c62:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011c66:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8011c6a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8011c6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011c72:	4063      	eors	r3, r4
 8011c74:	4003      	ands	r3, r0
 8011c76:	404b      	eors	r3, r1
 8011c78:	441a      	add	r2, r3
 8011c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c7c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011c80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c84:	441a      	add	r2, r3
 8011c86:	4bd3      	ldr	r3, [pc, #844]	; (8011fd4 <mbedtls_internal_sha1_process+0x910>)
 8011c88:	4413      	add	r3, r2
 8011c8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011c8e:	4413      	add	r3, r2
 8011c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c98:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(17));
 8011ca0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011ca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ca6:	405a      	eors	r2, r3
 8011ca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011caa:	405a      	eors	r2, r3
 8011cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cae:	4053      	eors	r3, r2
 8011cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8011cb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011cb6:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8011cba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011cbe:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8011cc2:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8011cc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011cca:	4063      	eors	r3, r4
 8011ccc:	4003      	ands	r3, r0
 8011cce:	404b      	eors	r3, r1
 8011cd0:	441a      	add	r2, r3
 8011cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cd4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011cd8:	653b      	str	r3, [r7, #80]	; 0x50
 8011cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cdc:	441a      	add	r2, r3
 8011cde:	4bbd      	ldr	r3, [pc, #756]	; (8011fd4 <mbedtls_internal_sha1_process+0x910>)
 8011ce0:	4413      	add	r3, r2
 8011ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011ce6:	4413      	add	r3, r2
 8011ce8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011cf0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(18));
 8011cf8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011cfe:	405a      	eors	r2, r3
 8011d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d02:	405a      	eors	r2, r3
 8011d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d06:	4053      	eors	r3, r2
 8011d08:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011d0e:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8011d12:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011d16:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8011d1a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8011d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011d22:	4063      	eors	r3, r4
 8011d24:	4003      	ands	r3, r0
 8011d26:	404b      	eors	r3, r1
 8011d28:	441a      	add	r2, r3
 8011d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d2c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011d30:	657b      	str	r3, [r7, #84]	; 0x54
 8011d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d34:	441a      	add	r2, r3
 8011d36:	4ba7      	ldr	r3, [pc, #668]	; (8011fd4 <mbedtls_internal_sha1_process+0x910>)
 8011d38:	4413      	add	r3, r2
 8011d3a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011d3e:	4413      	add	r3, r2
 8011d40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011d48:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(19));
 8011d50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d54:	405a      	eors	r2, r3
 8011d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d58:	405a      	eors	r2, r3
 8011d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d5c:	4053      	eors	r3, r2
 8011d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d64:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8011d68:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011d6c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8011d70:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8011d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011d78:	4063      	eors	r3, r4
 8011d7a:	4003      	ands	r3, r0
 8011d7c:	404b      	eors	r3, r1
 8011d7e:	441a      	add	r2, r3
 8011d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d82:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011d86:	65bb      	str	r3, [r7, #88]	; 0x58
 8011d88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d8a:	441a      	add	r2, r3
 8011d8c:	4b91      	ldr	r3, [pc, #580]	; (8011fd4 <mbedtls_internal_sha1_process+0x910>)
 8011d8e:	4413      	add	r3, r2
 8011d90:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011d94:	4413      	add	r3, r2
 8011d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011d9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011d9e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011da2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#undef F

#define F(x, y, z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P(local.A, local.B, local.C, local.D, local.E, R(20));
 8011da6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011da8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011daa:	405a      	eors	r2, r3
 8011dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011dae:	405a      	eors	r2, r3
 8011db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011db2:	4053      	eors	r3, r2
 8011db4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011dba:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8011dbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011dc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011dc6:	4059      	eors	r1, r3
 8011dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011dcc:	404b      	eors	r3, r1
 8011dce:	441a      	add	r2, r3
 8011dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011dd2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011dda:	441a      	add	r2, r3
 8011ddc:	4b7e      	ldr	r3, [pc, #504]	; (8011fd8 <mbedtls_internal_sha1_process+0x914>)
 8011dde:	4413      	add	r3, r2
 8011de0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011de4:	4413      	add	r3, r2
 8011de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011dee:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(21));
 8011df6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011dfc:	405a      	eors	r2, r3
 8011dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e00:	405a      	eors	r2, r3
 8011e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e04:	4053      	eors	r3, r2
 8011e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011e0c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8011e10:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e18:	4059      	eors	r1, r3
 8011e1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011e1e:	404b      	eors	r3, r1
 8011e20:	441a      	add	r2, r3
 8011e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e24:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011e28:	663b      	str	r3, [r7, #96]	; 0x60
 8011e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e2c:	441a      	add	r2, r3
 8011e2e:	4b6a      	ldr	r3, [pc, #424]	; (8011fd8 <mbedtls_internal_sha1_process+0x914>)
 8011e30:	4413      	add	r3, r2
 8011e32:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011e36:	4413      	add	r3, r2
 8011e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e40:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011e44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(22));
 8011e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011e4e:	405a      	eors	r2, r3
 8011e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e52:	405a      	eors	r2, r3
 8011e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e56:	4053      	eors	r3, r2
 8011e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e5e:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8011e62:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e6a:	4059      	eors	r1, r3
 8011e6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e70:	404b      	eors	r3, r1
 8011e72:	441a      	add	r2, r3
 8011e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e76:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011e7a:	667b      	str	r3, [r7, #100]	; 0x64
 8011e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e7e:	441a      	add	r2, r3
 8011e80:	4b55      	ldr	r3, [pc, #340]	; (8011fd8 <mbedtls_internal_sha1_process+0x914>)
 8011e82:	4413      	add	r3, r2
 8011e84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011e88:	4413      	add	r3, r2
 8011e8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011e92:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(23));
 8011e9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011ea0:	405a      	eors	r2, r3
 8011ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ea4:	405a      	eors	r2, r3
 8011ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ea8:	4053      	eors	r3, r2
 8011eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8011eac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011eb0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8011eb4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011ebc:	4059      	eors	r1, r3
 8011ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011ec2:	404b      	eors	r3, r1
 8011ec4:	441a      	add	r2, r3
 8011ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ec8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011ecc:	66bb      	str	r3, [r7, #104]	; 0x68
 8011ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ed0:	441a      	add	r2, r3
 8011ed2:	4b41      	ldr	r3, [pc, #260]	; (8011fd8 <mbedtls_internal_sha1_process+0x914>)
 8011ed4:	4413      	add	r3, r2
 8011ed6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011eda:	4413      	add	r3, r2
 8011edc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011ee4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(24));
 8011eec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ef0:	405a      	eors	r2, r3
 8011ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011ef4:	405a      	eors	r2, r3
 8011ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ef8:	4053      	eors	r3, r2
 8011efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8011efc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011f00:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8011f04:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011f0c:	4059      	eors	r1, r3
 8011f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011f12:	404b      	eors	r3, r1
 8011f14:	441a      	add	r2, r3
 8011f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f18:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f20:	441a      	add	r2, r3
 8011f22:	4b2d      	ldr	r3, [pc, #180]	; (8011fd8 <mbedtls_internal_sha1_process+0x914>)
 8011f24:	4413      	add	r3, r2
 8011f26:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011f2a:	4413      	add	r3, r2
 8011f2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011f30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011f34:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(25));
 8011f3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f40:	405a      	eors	r2, r3
 8011f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f44:	405a      	eors	r2, r3
 8011f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f48:	4053      	eors	r3, r2
 8011f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011f50:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8011f54:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011f5c:	4059      	eors	r1, r3
 8011f5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011f62:	404b      	eors	r3, r1
 8011f64:	441a      	add	r2, r3
 8011f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f68:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011f6c:	673b      	str	r3, [r7, #112]	; 0x70
 8011f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f70:	441a      	add	r2, r3
 8011f72:	4b19      	ldr	r3, [pc, #100]	; (8011fd8 <mbedtls_internal_sha1_process+0x914>)
 8011f74:	4413      	add	r3, r2
 8011f76:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011f7a:	4413      	add	r3, r2
 8011f7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011f80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011f84:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011f88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(26));
 8011f8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f90:	405a      	eors	r2, r3
 8011f92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011f94:	405a      	eors	r2, r3
 8011f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f98:	4053      	eors	r3, r2
 8011f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011fa0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8011fa4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011fa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011fac:	4059      	eors	r1, r3
 8011fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011fb2:	404b      	eors	r3, r1
 8011fb4:	441a      	add	r2, r3
 8011fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fb8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011fbc:	677b      	str	r3, [r7, #116]	; 0x74
 8011fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011fc0:	441a      	add	r2, r3
 8011fc2:	4b05      	ldr	r3, [pc, #20]	; (8011fd8 <mbedtls_internal_sha1_process+0x914>)
 8011fc4:	4413      	add	r3, r2
 8011fc6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011fca:	4413      	add	r3, r2
 8011fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011fd0:	e004      	b.n	8011fdc <mbedtls_internal_sha1_process+0x918>
 8011fd2:	bf00      	nop
 8011fd4:	5a827999 	.word	0x5a827999
 8011fd8:	6ed9eba1 	.word	0x6ed9eba1
 8011fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011fe0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011fe4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(27));
 8011fe8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fec:	405a      	eors	r2, r3
 8011fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ff2:	405a      	eors	r2, r3
 8011ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ff6:	4053      	eors	r3, r2
 8011ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ffa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011ffe:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012002:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801200a:	4059      	eors	r1, r3
 801200c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012010:	404b      	eors	r3, r1
 8012012:	441a      	add	r2, r3
 8012014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012016:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801201a:	67bb      	str	r3, [r7, #120]	; 0x78
 801201c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801201e:	441a      	add	r2, r3
 8012020:	4bd7      	ldr	r3, [pc, #860]	; (8012380 <mbedtls_internal_sha1_process+0xcbc>)
 8012022:	4413      	add	r3, r2
 8012024:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012028:	4413      	add	r3, r2
 801202a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801202e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012032:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(28));
 801203a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801203c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801203e:	405a      	eors	r2, r3
 8012040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012044:	405a      	eors	r2, r3
 8012046:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012048:	4053      	eors	r3, r2
 801204a:	64bb      	str	r3, [r7, #72]	; 0x48
 801204c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012050:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012054:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012058:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801205c:	4059      	eors	r1, r3
 801205e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012062:	404b      	eors	r3, r1
 8012064:	441a      	add	r2, r3
 8012066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012068:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801206c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801206e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012070:	441a      	add	r2, r3
 8012072:	4bc3      	ldr	r3, [pc, #780]	; (8012380 <mbedtls_internal_sha1_process+0xcbc>)
 8012074:	4413      	add	r3, r2
 8012076:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801207a:	4413      	add	r3, r2
 801207c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012080:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012084:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(29));
 801208c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801208e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012090:	405a      	eors	r2, r3
 8012092:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012096:	405a      	eors	r2, r3
 8012098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801209c:	4053      	eors	r3, r2
 801209e:	64bb      	str	r3, [r7, #72]	; 0x48
 80120a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80120a4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80120a8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80120ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80120b0:	4059      	eors	r1, r3
 80120b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80120b6:	404b      	eors	r3, r1
 80120b8:	441a      	add	r2, r3
 80120ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120bc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80120c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80120c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80120c8:	441a      	add	r2, r3
 80120ca:	4bad      	ldr	r3, [pc, #692]	; (8012380 <mbedtls_internal_sha1_process+0xcbc>)
 80120cc:	4413      	add	r3, r2
 80120ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80120d2:	4413      	add	r3, r2
 80120d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80120d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80120dc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80120e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(30));
 80120e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80120e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120e8:	405a      	eors	r2, r3
 80120ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120ec:	405a      	eors	r2, r3
 80120ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80120f2:	4053      	eors	r3, r2
 80120f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80120f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120fa:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80120fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012102:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012106:	4059      	eors	r1, r3
 8012108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801210c:	404b      	eors	r3, r1
 801210e:	441a      	add	r2, r3
 8012110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012112:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012116:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801211a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801211e:	441a      	add	r2, r3
 8012120:	4b97      	ldr	r3, [pc, #604]	; (8012380 <mbedtls_internal_sha1_process+0xcbc>)
 8012122:	4413      	add	r3, r2
 8012124:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012128:	4413      	add	r3, r2
 801212a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801212e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012132:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(31));
 801213a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801213c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801213e:	405a      	eors	r2, r3
 8012140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012142:	405a      	eors	r2, r3
 8012144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012148:	4053      	eors	r3, r2
 801214a:	64bb      	str	r3, [r7, #72]	; 0x48
 801214c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012150:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012154:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012158:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801215c:	4059      	eors	r1, r3
 801215e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012162:	404b      	eors	r3, r1
 8012164:	441a      	add	r2, r3
 8012166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012168:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801216c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012174:	441a      	add	r2, r3
 8012176:	4b82      	ldr	r3, [pc, #520]	; (8012380 <mbedtls_internal_sha1_process+0xcbc>)
 8012178:	4413      	add	r3, r2
 801217a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801217e:	4413      	add	r3, r2
 8012180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012188:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801218c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(32));
 8012190:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012196:	405a      	eors	r2, r3
 8012198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801219a:	405a      	eors	r2, r3
 801219c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801219e:	4053      	eors	r3, r2
 80121a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80121a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80121a6:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80121aa:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80121ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80121b2:	4059      	eors	r1, r3
 80121b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80121b8:	404b      	eors	r3, r1
 80121ba:	441a      	add	r2, r3
 80121bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121be:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80121c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80121c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121c6:	441a      	add	r2, r3
 80121c8:	4b6d      	ldr	r3, [pc, #436]	; (8012380 <mbedtls_internal_sha1_process+0xcbc>)
 80121ca:	4413      	add	r3, r2
 80121cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80121d0:	4413      	add	r3, r2
 80121d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80121d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80121da:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80121de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(33));
 80121e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80121e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80121e8:	405a      	eors	r2, r3
 80121ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80121ec:	405a      	eors	r2, r3
 80121ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121f0:	4053      	eors	r3, r2
 80121f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80121f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80121f8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80121fc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012204:	4059      	eors	r1, r3
 8012206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801220a:	404b      	eors	r3, r1
 801220c:	441a      	add	r2, r3
 801220e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012210:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012214:	653b      	str	r3, [r7, #80]	; 0x50
 8012216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012218:	441a      	add	r2, r3
 801221a:	4b59      	ldr	r3, [pc, #356]	; (8012380 <mbedtls_internal_sha1_process+0xcbc>)
 801221c:	4413      	add	r3, r2
 801221e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012222:	4413      	add	r3, r2
 8012224:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801222c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(34));
 8012234:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801223a:	405a      	eors	r2, r3
 801223c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801223e:	405a      	eors	r2, r3
 8012240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012242:	4053      	eors	r3, r2
 8012244:	64bb      	str	r3, [r7, #72]	; 0x48
 8012246:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801224a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 801224e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8012252:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012256:	4059      	eors	r1, r3
 8012258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801225c:	404b      	eors	r3, r1
 801225e:	441a      	add	r2, r3
 8012260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012262:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012266:	657b      	str	r3, [r7, #84]	; 0x54
 8012268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801226a:	441a      	add	r2, r3
 801226c:	4b44      	ldr	r3, [pc, #272]	; (8012380 <mbedtls_internal_sha1_process+0xcbc>)
 801226e:	4413      	add	r3, r2
 8012270:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012274:	4413      	add	r3, r2
 8012276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801227a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801227e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(35));
 8012286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801228a:	405a      	eors	r2, r3
 801228c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801228e:	405a      	eors	r2, r3
 8012290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012292:	4053      	eors	r3, r2
 8012294:	64bb      	str	r3, [r7, #72]	; 0x48
 8012296:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801229a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 801229e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80122a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80122a6:	4059      	eors	r1, r3
 80122a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80122ac:	404b      	eors	r3, r1
 80122ae:	441a      	add	r2, r3
 80122b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122b2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80122b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80122b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80122ba:	441a      	add	r2, r3
 80122bc:	4b30      	ldr	r3, [pc, #192]	; (8012380 <mbedtls_internal_sha1_process+0xcbc>)
 80122be:	4413      	add	r3, r2
 80122c0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80122c4:	4413      	add	r3, r2
 80122c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80122ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80122ce:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80122d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(36));
 80122d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80122d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80122da:	405a      	eors	r2, r3
 80122dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122de:	405a      	eors	r2, r3
 80122e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80122e2:	4053      	eors	r3, r2
 80122e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80122e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80122ea:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80122ee:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80122f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80122f6:	4059      	eors	r1, r3
 80122f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80122fc:	404b      	eors	r3, r1
 80122fe:	441a      	add	r2, r3
 8012300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012302:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801230a:	441a      	add	r2, r3
 801230c:	4b1c      	ldr	r3, [pc, #112]	; (8012380 <mbedtls_internal_sha1_process+0xcbc>)
 801230e:	4413      	add	r3, r2
 8012310:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012314:	4413      	add	r3, r2
 8012316:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801231a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801231e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(37));
 8012326:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012328:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801232c:	405a      	eors	r2, r3
 801232e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012330:	405a      	eors	r2, r3
 8012332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012334:	4053      	eors	r3, r2
 8012336:	64bb      	str	r3, [r7, #72]	; 0x48
 8012338:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801233c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012340:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012348:	4059      	eors	r1, r3
 801234a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801234e:	404b      	eors	r3, r1
 8012350:	441a      	add	r2, r3
 8012352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012354:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012358:	663b      	str	r3, [r7, #96]	; 0x60
 801235a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801235c:	441a      	add	r2, r3
 801235e:	4b08      	ldr	r3, [pc, #32]	; (8012380 <mbedtls_internal_sha1_process+0xcbc>)
 8012360:	4413      	add	r3, r2
 8012362:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012366:	4413      	add	r3, r2
 8012368:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801236c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012370:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(38));
 8012378:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801237a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801237e:	e001      	b.n	8012384 <mbedtls_internal_sha1_process+0xcc0>
 8012380:	6ed9eba1 	.word	0x6ed9eba1
 8012384:	405a      	eors	r2, r3
 8012386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012388:	405a      	eors	r2, r3
 801238a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801238c:	4053      	eors	r3, r2
 801238e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012390:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012394:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012398:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801239c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80123a0:	4059      	eors	r1, r3
 80123a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80123a6:	404b      	eors	r3, r1
 80123a8:	441a      	add	r2, r3
 80123aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123ac:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80123b0:	667b      	str	r3, [r7, #100]	; 0x64
 80123b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123b4:	441a      	add	r2, r3
 80123b6:	4bdb      	ldr	r3, [pc, #876]	; (8012724 <mbedtls_internal_sha1_process+0x1060>)
 80123b8:	4413      	add	r3, r2
 80123ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80123be:	4413      	add	r3, r2
 80123c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80123c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80123c8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80123cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(39));
 80123d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80123d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80123d6:	405a      	eors	r2, r3
 80123d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80123da:	405a      	eors	r2, r3
 80123dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80123de:	4053      	eors	r3, r2
 80123e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80123e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80123e6:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80123ea:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80123ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80123f2:	4059      	eors	r1, r3
 80123f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80123f8:	404b      	eors	r3, r1
 80123fa:	441a      	add	r2, r3
 80123fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123fe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012402:	66bb      	str	r3, [r7, #104]	; 0x68
 8012404:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012406:	441a      	add	r2, r3
 8012408:	4bc6      	ldr	r3, [pc, #792]	; (8012724 <mbedtls_internal_sha1_process+0x1060>)
 801240a:	4413      	add	r3, r2
 801240c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012410:	4413      	add	r3, r2
 8012412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012416:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801241a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801241e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#undef F

#define F(x, y, z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P(local.A, local.B, local.C, local.D, local.E, R(40));
 8012422:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012426:	405a      	eors	r2, r3
 8012428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801242a:	405a      	eors	r2, r3
 801242c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801242e:	4053      	eors	r3, r2
 8012430:	64bb      	str	r3, [r7, #72]	; 0x48
 8012432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012436:	ea4f 62f3 	mov.w	r2, r3, ror #27
 801243a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801243e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012442:	4019      	ands	r1, r3
 8012444:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8012448:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 801244c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012450:	4323      	orrs	r3, r4
 8012452:	4003      	ands	r3, r0
 8012454:	430b      	orrs	r3, r1
 8012456:	441a      	add	r2, r3
 8012458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801245a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801245e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012462:	441a      	add	r2, r3
 8012464:	4bb0      	ldr	r3, [pc, #704]	; (8012728 <mbedtls_internal_sha1_process+0x1064>)
 8012466:	4413      	add	r3, r2
 8012468:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801246c:	4413      	add	r3, r2
 801246e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012472:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012476:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801247a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(41));
 801247e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012482:	405a      	eors	r2, r3
 8012484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012486:	405a      	eors	r2, r3
 8012488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801248a:	4053      	eors	r3, r2
 801248c:	64bb      	str	r3, [r7, #72]	; 0x48
 801248e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012492:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012496:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801249a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801249e:	4019      	ands	r1, r3
 80124a0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80124a4:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 80124a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80124ac:	4323      	orrs	r3, r4
 80124ae:	4003      	ands	r3, r0
 80124b0:	430b      	orrs	r3, r1
 80124b2:	441a      	add	r2, r3
 80124b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124b6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80124ba:	673b      	str	r3, [r7, #112]	; 0x70
 80124bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80124be:	441a      	add	r2, r3
 80124c0:	4b99      	ldr	r3, [pc, #612]	; (8012728 <mbedtls_internal_sha1_process+0x1064>)
 80124c2:	4413      	add	r3, r2
 80124c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80124c8:	4413      	add	r3, r2
 80124ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80124ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80124d2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80124d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(42));
 80124da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80124dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124de:	405a      	eors	r2, r3
 80124e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80124e2:	405a      	eors	r2, r3
 80124e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80124e6:	4053      	eors	r3, r2
 80124e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80124ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80124ee:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80124f2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80124f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80124fa:	4019      	ands	r1, r3
 80124fc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8012500:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8012504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012508:	4323      	orrs	r3, r4
 801250a:	4003      	ands	r3, r0
 801250c:	430b      	orrs	r3, r1
 801250e:	441a      	add	r2, r3
 8012510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012512:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012516:	677b      	str	r3, [r7, #116]	; 0x74
 8012518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801251a:	441a      	add	r2, r3
 801251c:	4b82      	ldr	r3, [pc, #520]	; (8012728 <mbedtls_internal_sha1_process+0x1064>)
 801251e:	4413      	add	r3, r2
 8012520:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012524:	4413      	add	r3, r2
 8012526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801252a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801252e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(43));
 8012536:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801253a:	405a      	eors	r2, r3
 801253c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012540:	405a      	eors	r2, r3
 8012542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012544:	4053      	eors	r3, r2
 8012546:	64bb      	str	r3, [r7, #72]	; 0x48
 8012548:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801254c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012550:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012554:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012558:	4019      	ands	r1, r3
 801255a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801255e:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8012562:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012566:	4323      	orrs	r3, r4
 8012568:	4003      	ands	r3, r0
 801256a:	430b      	orrs	r3, r1
 801256c:	441a      	add	r2, r3
 801256e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012570:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012574:	67bb      	str	r3, [r7, #120]	; 0x78
 8012576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012578:	441a      	add	r2, r3
 801257a:	4b6b      	ldr	r3, [pc, #428]	; (8012728 <mbedtls_internal_sha1_process+0x1064>)
 801257c:	4413      	add	r3, r2
 801257e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012582:	4413      	add	r3, r2
 8012584:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801258c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(44));
 8012594:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012598:	405a      	eors	r2, r3
 801259a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801259e:	405a      	eors	r2, r3
 80125a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80125a2:	4053      	eors	r3, r2
 80125a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80125a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80125aa:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80125ae:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80125b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80125b6:	4019      	ands	r1, r3
 80125b8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80125bc:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 80125c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80125c4:	4323      	orrs	r3, r4
 80125c6:	4003      	ands	r3, r0
 80125c8:	430b      	orrs	r3, r1
 80125ca:	441a      	add	r2, r3
 80125cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125ce:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80125d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80125d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80125d6:	441a      	add	r2, r3
 80125d8:	4b53      	ldr	r3, [pc, #332]	; (8012728 <mbedtls_internal_sha1_process+0x1064>)
 80125da:	4413      	add	r3, r2
 80125dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80125e0:	4413      	add	r3, r2
 80125e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80125e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80125ea:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80125ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(45));
 80125f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80125f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125f6:	405a      	eors	r2, r3
 80125f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80125fc:	405a      	eors	r2, r3
 80125fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012602:	4053      	eors	r3, r2
 8012604:	64bb      	str	r3, [r7, #72]	; 0x48
 8012606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801260a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 801260e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012612:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012616:	4019      	ands	r1, r3
 8012618:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801261c:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8012620:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012624:	4323      	orrs	r3, r4
 8012626:	4003      	ands	r3, r0
 8012628:	430b      	orrs	r3, r1
 801262a:	441a      	add	r2, r3
 801262c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801262e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012632:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012636:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801263a:	441a      	add	r2, r3
 801263c:	4b3a      	ldr	r3, [pc, #232]	; (8012728 <mbedtls_internal_sha1_process+0x1064>)
 801263e:	4413      	add	r3, r2
 8012640:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012644:	4413      	add	r3, r2
 8012646:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801264a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801264e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(46));
 8012656:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801265a:	405a      	eors	r2, r3
 801265c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801265e:	405a      	eors	r2, r3
 8012660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012664:	4053      	eors	r3, r2
 8012666:	64bb      	str	r3, [r7, #72]	; 0x48
 8012668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801266c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012670:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012674:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012678:	4019      	ands	r1, r3
 801267a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 801267e:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8012682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012686:	4323      	orrs	r3, r4
 8012688:	4003      	ands	r3, r0
 801268a:	430b      	orrs	r3, r1
 801268c:	441a      	add	r2, r3
 801268e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012690:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801269c:	441a      	add	r2, r3
 801269e:	4b22      	ldr	r3, [pc, #136]	; (8012728 <mbedtls_internal_sha1_process+0x1064>)
 80126a0:	4413      	add	r3, r2
 80126a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80126a6:	4413      	add	r3, r2
 80126a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80126ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80126b0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80126b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(47));
 80126b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80126ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80126bc:	405a      	eors	r2, r3
 80126be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126c0:	405a      	eors	r2, r3
 80126c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80126c6:	4053      	eors	r3, r2
 80126c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80126ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80126ce:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80126d2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80126d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80126da:	4019      	ands	r1, r3
 80126dc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80126e0:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80126e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80126e8:	4323      	orrs	r3, r4
 80126ea:	4003      	ands	r3, r0
 80126ec:	430b      	orrs	r3, r1
 80126ee:	441a      	add	r2, r3
 80126f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126f2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80126f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80126fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80126fe:	441a      	add	r2, r3
 8012700:	4b09      	ldr	r3, [pc, #36]	; (8012728 <mbedtls_internal_sha1_process+0x1064>)
 8012702:	4413      	add	r3, r2
 8012704:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012708:	4413      	add	r3, r2
 801270a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801270e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012712:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(48));
 801271a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801271e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012720:	405a      	eors	r2, r3
 8012722:	e003      	b.n	801272c <mbedtls_internal_sha1_process+0x1068>
 8012724:	6ed9eba1 	.word	0x6ed9eba1
 8012728:	8f1bbcdc 	.word	0x8f1bbcdc
 801272c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801272e:	405a      	eors	r2, r3
 8012730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012732:	4053      	eors	r3, r2
 8012734:	64bb      	str	r3, [r7, #72]	; 0x48
 8012736:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801273a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 801273e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012742:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012746:	4019      	ands	r1, r3
 8012748:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801274c:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8012750:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012754:	4323      	orrs	r3, r4
 8012756:	4003      	ands	r3, r0
 8012758:	430b      	orrs	r3, r1
 801275a:	441a      	add	r2, r3
 801275c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801275e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012766:	441a      	add	r2, r3
 8012768:	4bd7      	ldr	r3, [pc, #860]	; (8012ac8 <mbedtls_internal_sha1_process+0x1404>)
 801276a:	4413      	add	r3, r2
 801276c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012770:	4413      	add	r3, r2
 8012772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012776:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801277a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801277e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(49));
 8012782:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012788:	405a      	eors	r2, r3
 801278a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801278c:	405a      	eors	r2, r3
 801278e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012790:	4053      	eors	r3, r2
 8012792:	64bb      	str	r3, [r7, #72]	; 0x48
 8012794:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012798:	ea4f 62f3 	mov.w	r2, r3, ror #27
 801279c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80127a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80127a4:	4019      	ands	r1, r3
 80127a6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80127aa:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 80127ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80127b2:	4323      	orrs	r3, r4
 80127b4:	4003      	ands	r3, r0
 80127b6:	430b      	orrs	r3, r1
 80127b8:	441a      	add	r2, r3
 80127ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127bc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80127c0:	653b      	str	r3, [r7, #80]	; 0x50
 80127c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127c4:	441a      	add	r2, r3
 80127c6:	4bc0      	ldr	r3, [pc, #768]	; (8012ac8 <mbedtls_internal_sha1_process+0x1404>)
 80127c8:	4413      	add	r3, r2
 80127ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80127ce:	4413      	add	r3, r2
 80127d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80127d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80127d8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80127dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(50));
 80127e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80127e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80127e6:	405a      	eors	r2, r3
 80127e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80127ea:	405a      	eors	r2, r3
 80127ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127ee:	4053      	eors	r3, r2
 80127f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80127f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80127f6:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80127fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80127fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012802:	4019      	ands	r1, r3
 8012804:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8012808:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 801280c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012810:	4323      	orrs	r3, r4
 8012812:	4003      	ands	r3, r0
 8012814:	430b      	orrs	r3, r1
 8012816:	441a      	add	r2, r3
 8012818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801281a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801281e:	657b      	str	r3, [r7, #84]	; 0x54
 8012820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012822:	441a      	add	r2, r3
 8012824:	4ba8      	ldr	r3, [pc, #672]	; (8012ac8 <mbedtls_internal_sha1_process+0x1404>)
 8012826:	4413      	add	r3, r2
 8012828:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801282c:	4413      	add	r3, r2
 801282e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012836:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801283a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(51));
 801283e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012842:	405a      	eors	r2, r3
 8012844:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012846:	405a      	eors	r2, r3
 8012848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801284a:	4053      	eors	r3, r2
 801284c:	64bb      	str	r3, [r7, #72]	; 0x48
 801284e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012852:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012856:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801285a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801285e:	4019      	ands	r1, r3
 8012860:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8012864:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8012868:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801286c:	4323      	orrs	r3, r4
 801286e:	4003      	ands	r3, r0
 8012870:	430b      	orrs	r3, r1
 8012872:	441a      	add	r2, r3
 8012874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012876:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801287a:	65bb      	str	r3, [r7, #88]	; 0x58
 801287c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801287e:	441a      	add	r2, r3
 8012880:	4b91      	ldr	r3, [pc, #580]	; (8012ac8 <mbedtls_internal_sha1_process+0x1404>)
 8012882:	4413      	add	r3, r2
 8012884:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012888:	4413      	add	r3, r2
 801288a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801288e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012892:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(52));
 801289a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801289c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801289e:	405a      	eors	r2, r3
 80128a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80128a2:	405a      	eors	r2, r3
 80128a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80128a6:	4053      	eors	r3, r2
 80128a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80128aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80128ae:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80128b2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80128b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80128ba:	4019      	ands	r1, r3
 80128bc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80128c0:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80128c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80128c8:	4323      	orrs	r3, r4
 80128ca:	4003      	ands	r3, r0
 80128cc:	430b      	orrs	r3, r1
 80128ce:	441a      	add	r2, r3
 80128d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128d2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80128d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80128d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80128da:	441a      	add	r2, r3
 80128dc:	4b7a      	ldr	r3, [pc, #488]	; (8012ac8 <mbedtls_internal_sha1_process+0x1404>)
 80128de:	4413      	add	r3, r2
 80128e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80128e4:	4413      	add	r3, r2
 80128e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80128ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80128ee:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80128f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(53));
 80128f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80128f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128fc:	405a      	eors	r2, r3
 80128fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012900:	405a      	eors	r2, r3
 8012902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012904:	4053      	eors	r3, r2
 8012906:	64bb      	str	r3, [r7, #72]	; 0x48
 8012908:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801290c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012910:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012918:	4019      	ands	r1, r3
 801291a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801291e:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8012922:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012926:	4323      	orrs	r3, r4
 8012928:	4003      	ands	r3, r0
 801292a:	430b      	orrs	r3, r1
 801292c:	441a      	add	r2, r3
 801292e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012930:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012934:	663b      	str	r3, [r7, #96]	; 0x60
 8012936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012938:	441a      	add	r2, r3
 801293a:	4b63      	ldr	r3, [pc, #396]	; (8012ac8 <mbedtls_internal_sha1_process+0x1404>)
 801293c:	4413      	add	r3, r2
 801293e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012942:	4413      	add	r3, r2
 8012944:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801294c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(54));
 8012954:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801295a:	405a      	eors	r2, r3
 801295c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801295e:	405a      	eors	r2, r3
 8012960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012962:	4053      	eors	r3, r2
 8012964:	64bb      	str	r3, [r7, #72]	; 0x48
 8012966:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801296a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 801296e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8012972:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012976:	4019      	ands	r1, r3
 8012978:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801297c:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 8012980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012984:	4323      	orrs	r3, r4
 8012986:	4003      	ands	r3, r0
 8012988:	430b      	orrs	r3, r1
 801298a:	441a      	add	r2, r3
 801298c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801298e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012992:	667b      	str	r3, [r7, #100]	; 0x64
 8012994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012996:	441a      	add	r2, r3
 8012998:	4b4b      	ldr	r3, [pc, #300]	; (8012ac8 <mbedtls_internal_sha1_process+0x1404>)
 801299a:	4413      	add	r3, r2
 801299c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80129a0:	4413      	add	r3, r2
 80129a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80129a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80129aa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80129ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(55));
 80129b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80129b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80129b8:	405a      	eors	r2, r3
 80129ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80129bc:	405a      	eors	r2, r3
 80129be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80129c0:	4053      	eors	r3, r2
 80129c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80129c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80129c8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80129cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80129d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80129d4:	4019      	ands	r1, r3
 80129d6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80129da:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80129de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80129e2:	4323      	orrs	r3, r4
 80129e4:	4003      	ands	r3, r0
 80129e6:	430b      	orrs	r3, r1
 80129e8:	441a      	add	r2, r3
 80129ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129ec:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80129f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80129f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80129f4:	441a      	add	r2, r3
 80129f6:	4b34      	ldr	r3, [pc, #208]	; (8012ac8 <mbedtls_internal_sha1_process+0x1404>)
 80129f8:	4413      	add	r3, r2
 80129fa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80129fe:	4413      	add	r3, r2
 8012a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012a08:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012a0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(56));
 8012a10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a14:	405a      	eors	r2, r3
 8012a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a18:	405a      	eors	r2, r3
 8012a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a1c:	4053      	eors	r3, r2
 8012a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012a24:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012a28:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012a2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012a30:	4019      	ands	r1, r3
 8012a32:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8012a36:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8012a3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012a3e:	4323      	orrs	r3, r4
 8012a40:	4003      	ands	r3, r0
 8012a42:	430b      	orrs	r3, r1
 8012a44:	441a      	add	r2, r3
 8012a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a48:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a50:	441a      	add	r2, r3
 8012a52:	4b1d      	ldr	r3, [pc, #116]	; (8012ac8 <mbedtls_internal_sha1_process+0x1404>)
 8012a54:	4413      	add	r3, r2
 8012a56:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012a5a:	4413      	add	r3, r2
 8012a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012a64:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012a68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(57));
 8012a6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a70:	405a      	eors	r2, r3
 8012a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012a74:	405a      	eors	r2, r3
 8012a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a78:	4053      	eors	r3, r2
 8012a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012a80:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012a84:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012a8c:	4019      	ands	r1, r3
 8012a8e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8012a92:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8012a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012a9a:	4323      	orrs	r3, r4
 8012a9c:	4003      	ands	r3, r0
 8012a9e:	430b      	orrs	r3, r1
 8012aa0:	441a      	add	r2, r3
 8012aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012aa4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012aa8:	673b      	str	r3, [r7, #112]	; 0x70
 8012aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012aac:	441a      	add	r2, r3
 8012aae:	4b06      	ldr	r3, [pc, #24]	; (8012ac8 <mbedtls_internal_sha1_process+0x1404>)
 8012ab0:	4413      	add	r3, r2
 8012ab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012ab6:	4413      	add	r3, r2
 8012ab8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012ac0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012ac4:	e002      	b.n	8012acc <mbedtls_internal_sha1_process+0x1408>
 8012ac6:	bf00      	nop
 8012ac8:	8f1bbcdc 	.word	0x8f1bbcdc
 8012acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(58));
 8012ad0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ad4:	405a      	eors	r2, r3
 8012ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ad8:	405a      	eors	r2, r3
 8012ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012adc:	4053      	eors	r3, r2
 8012ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012ae4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012ae8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012af0:	4019      	ands	r1, r3
 8012af2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8012af6:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8012afa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012afe:	4323      	orrs	r3, r4
 8012b00:	4003      	ands	r3, r0
 8012b02:	430b      	orrs	r3, r1
 8012b04:	441a      	add	r2, r3
 8012b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b08:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012b0c:	677b      	str	r3, [r7, #116]	; 0x74
 8012b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012b10:	441a      	add	r2, r3
 8012b12:	4bd8      	ldr	r3, [pc, #864]	; (8012e74 <mbedtls_internal_sha1_process+0x17b0>)
 8012b14:	4413      	add	r3, r2
 8012b16:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012b1a:	4413      	add	r3, r2
 8012b1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b24:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(59));
 8012b2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012b30:	405a      	eors	r2, r3
 8012b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012b36:	405a      	eors	r2, r3
 8012b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b3a:	4053      	eors	r3, r2
 8012b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8012b3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012b42:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012b46:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8012b4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b4e:	4019      	ands	r1, r3
 8012b50:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8012b54:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 8012b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b5c:	4323      	orrs	r3, r4
 8012b5e:	4003      	ands	r3, r0
 8012b60:	430b      	orrs	r3, r1
 8012b62:	441a      	add	r2, r3
 8012b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b66:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012b6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8012b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b6e:	441a      	add	r2, r3
 8012b70:	4bc0      	ldr	r3, [pc, #768]	; (8012e74 <mbedtls_internal_sha1_process+0x17b0>)
 8012b72:	4413      	add	r3, r2
 8012b74:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012b78:	4413      	add	r3, r2
 8012b7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012b7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b82:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012b86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#undef F

#define F(x, y, z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P(local.A, local.B, local.C, local.D, local.E, R(60));
 8012b8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b8e:	405a      	eors	r2, r3
 8012b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012b94:	405a      	eors	r2, r3
 8012b96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b98:	4053      	eors	r3, r2
 8012b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8012b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012ba0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012ba4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012ba8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012bac:	4059      	eors	r1, r3
 8012bae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012bb2:	404b      	eors	r3, r1
 8012bb4:	441a      	add	r2, r3
 8012bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bb8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012bc0:	441a      	add	r2, r3
 8012bc2:	4bad      	ldr	r3, [pc, #692]	; (8012e78 <mbedtls_internal_sha1_process+0x17b4>)
 8012bc4:	4413      	add	r3, r2
 8012bc6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012bca:	4413      	add	r3, r2
 8012bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012bd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012bd4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012bd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(61));
 8012bdc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012be0:	405a      	eors	r2, r3
 8012be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012be6:	405a      	eors	r2, r3
 8012be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012bec:	4053      	eors	r3, r2
 8012bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8012bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012bf4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012bf8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012bfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012c00:	4059      	eors	r1, r3
 8012c02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012c06:	404b      	eors	r3, r1
 8012c08:	441a      	add	r2, r3
 8012c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c0c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012c14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012c18:	441a      	add	r2, r3
 8012c1a:	4b97      	ldr	r3, [pc, #604]	; (8012e78 <mbedtls_internal_sha1_process+0x17b4>)
 8012c1c:	4413      	add	r3, r2
 8012c1e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012c22:	4413      	add	r3, r2
 8012c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012c2c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012c30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(62));
 8012c34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c38:	405a      	eors	r2, r3
 8012c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c3c:	405a      	eors	r2, r3
 8012c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c42:	4053      	eors	r3, r2
 8012c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8012c46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c4a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012c4e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012c56:	4059      	eors	r1, r3
 8012c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012c5c:	404b      	eors	r3, r1
 8012c5e:	441a      	add	r2, r3
 8012c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c62:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012c66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c6e:	441a      	add	r2, r3
 8012c70:	4b81      	ldr	r3, [pc, #516]	; (8012e78 <mbedtls_internal_sha1_process+0x17b4>)
 8012c72:	4413      	add	r3, r2
 8012c74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012c78:	4413      	add	r3, r2
 8012c7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012c82:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(63));
 8012c8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012c8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c8e:	405a      	eors	r2, r3
 8012c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c92:	405a      	eors	r2, r3
 8012c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012c98:	4053      	eors	r3, r2
 8012c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8012c9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012ca0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012ca4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012cac:	4059      	eors	r1, r3
 8012cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012cb2:	404b      	eors	r3, r1
 8012cb4:	441a      	add	r2, r3
 8012cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cb8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012cc4:	441a      	add	r2, r3
 8012cc6:	4b6c      	ldr	r3, [pc, #432]	; (8012e78 <mbedtls_internal_sha1_process+0x17b4>)
 8012cc8:	4413      	add	r3, r2
 8012cca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012cce:	4413      	add	r3, r2
 8012cd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012cd8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(64));
 8012ce0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012ce6:	405a      	eors	r2, r3
 8012ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cea:	405a      	eors	r2, r3
 8012cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cee:	4053      	eors	r3, r2
 8012cf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8012cf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012cf6:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012cfa:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8012cfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012d02:	4059      	eors	r1, r3
 8012d04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012d08:	404b      	eors	r3, r1
 8012d0a:	441a      	add	r2, r3
 8012d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d0e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d16:	441a      	add	r2, r3
 8012d18:	4b57      	ldr	r3, [pc, #348]	; (8012e78 <mbedtls_internal_sha1_process+0x17b4>)
 8012d1a:	4413      	add	r3, r2
 8012d1c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012d20:	4413      	add	r3, r2
 8012d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012d26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012d2a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(65));
 8012d32:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d38:	405a      	eors	r2, r3
 8012d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d3c:	405a      	eors	r2, r3
 8012d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d40:	4053      	eors	r3, r2
 8012d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012d48:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012d4c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012d50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012d54:	4059      	eors	r1, r3
 8012d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012d5a:	404b      	eors	r3, r1
 8012d5c:	441a      	add	r2, r3
 8012d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d60:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012d64:	653b      	str	r3, [r7, #80]	; 0x50
 8012d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d68:	441a      	add	r2, r3
 8012d6a:	4b43      	ldr	r3, [pc, #268]	; (8012e78 <mbedtls_internal_sha1_process+0x17b4>)
 8012d6c:	4413      	add	r3, r2
 8012d6e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012d72:	4413      	add	r3, r2
 8012d74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012d78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012d7c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012d80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(66));
 8012d84:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012d8a:	405a      	eors	r2, r3
 8012d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012d8e:	405a      	eors	r2, r3
 8012d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d92:	4053      	eors	r3, r2
 8012d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012d9a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012d9e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012da2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012da6:	4059      	eors	r1, r3
 8012da8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012dac:	404b      	eors	r3, r1
 8012dae:	441a      	add	r2, r3
 8012db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012db2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012db6:	657b      	str	r3, [r7, #84]	; 0x54
 8012db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012dba:	441a      	add	r2, r3
 8012dbc:	4b2e      	ldr	r3, [pc, #184]	; (8012e78 <mbedtls_internal_sha1_process+0x17b4>)
 8012dbe:	4413      	add	r3, r2
 8012dc0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012dc4:	4413      	add	r3, r2
 8012dc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012dce:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012dd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(67));
 8012dd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012dda:	405a      	eors	r2, r3
 8012ddc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012dde:	405a      	eors	r2, r3
 8012de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012de2:	4053      	eors	r3, r2
 8012de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8012de6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012dea:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012dee:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012df6:	4059      	eors	r1, r3
 8012df8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012dfc:	404b      	eors	r3, r1
 8012dfe:	441a      	add	r2, r3
 8012e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e02:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012e06:	65bb      	str	r3, [r7, #88]	; 0x58
 8012e08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e0a:	441a      	add	r2, r3
 8012e0c:	4b1a      	ldr	r3, [pc, #104]	; (8012e78 <mbedtls_internal_sha1_process+0x17b4>)
 8012e0e:	4413      	add	r3, r2
 8012e10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012e14:	4413      	add	r3, r2
 8012e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012e1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012e1e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(68));
 8012e26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e2a:	405a      	eors	r2, r3
 8012e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012e2e:	405a      	eors	r2, r3
 8012e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e32:	4053      	eors	r3, r2
 8012e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012e3a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012e3e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012e42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012e46:	4059      	eors	r1, r3
 8012e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012e4c:	404b      	eors	r3, r1
 8012e4e:	441a      	add	r2, r3
 8012e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e52:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e5a:	441a      	add	r2, r3
 8012e5c:	4b06      	ldr	r3, [pc, #24]	; (8012e78 <mbedtls_internal_sha1_process+0x17b4>)
 8012e5e:	4413      	add	r3, r2
 8012e60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012e64:	4413      	add	r3, r2
 8012e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012e6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012e6e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012e72:	e003      	b.n	8012e7c <mbedtls_internal_sha1_process+0x17b8>
 8012e74:	8f1bbcdc 	.word	0x8f1bbcdc
 8012e78:	ca62c1d6 	.word	0xca62c1d6
 8012e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(69));
 8012e80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012e82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012e86:	405a      	eors	r2, r3
 8012e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e8a:	405a      	eors	r2, r3
 8012e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e8e:	4053      	eors	r3, r2
 8012e90:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012e96:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012e9a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8012e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012ea2:	4059      	eors	r1, r3
 8012ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012ea8:	404b      	eors	r3, r1
 8012eaa:	441a      	add	r2, r3
 8012eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012eae:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012eb2:	663b      	str	r3, [r7, #96]	; 0x60
 8012eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012eb6:	441a      	add	r2, r3
 8012eb8:	4bd6      	ldr	r3, [pc, #856]	; (8013214 <mbedtls_internal_sha1_process+0x1b50>)
 8012eba:	4413      	add	r3, r2
 8012ebc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012ec0:	4413      	add	r3, r2
 8012ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012ec6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012eca:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(70));
 8012ed2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ed8:	405a      	eors	r2, r3
 8012eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012edc:	405a      	eors	r2, r3
 8012ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012ee0:	4053      	eors	r3, r2
 8012ee2:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012ee8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012eec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012ef0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012ef4:	4059      	eors	r1, r3
 8012ef6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012efa:	404b      	eors	r3, r1
 8012efc:	441a      	add	r2, r3
 8012efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f00:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012f04:	667b      	str	r3, [r7, #100]	; 0x64
 8012f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f08:	441a      	add	r2, r3
 8012f0a:	4bc2      	ldr	r3, [pc, #776]	; (8013214 <mbedtls_internal_sha1_process+0x1b50>)
 8012f0c:	4413      	add	r3, r2
 8012f0e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012f12:	4413      	add	r3, r2
 8012f14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012f18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012f1c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012f20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(71));
 8012f24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012f2a:	405a      	eors	r2, r3
 8012f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012f2e:	405a      	eors	r2, r3
 8012f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f32:	4053      	eors	r3, r2
 8012f34:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012f3a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012f3e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012f42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012f46:	4059      	eors	r1, r3
 8012f48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012f4c:	404b      	eors	r3, r1
 8012f4e:	441a      	add	r2, r3
 8012f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f52:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012f56:	66bb      	str	r3, [r7, #104]	; 0x68
 8012f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f5a:	441a      	add	r2, r3
 8012f5c:	4bad      	ldr	r3, [pc, #692]	; (8013214 <mbedtls_internal_sha1_process+0x1b50>)
 8012f5e:	4413      	add	r3, r2
 8012f60:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012f64:	4413      	add	r3, r2
 8012f66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f6e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(72));
 8012f76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f7a:	405a      	eors	r2, r3
 8012f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012f7e:	405a      	eors	r2, r3
 8012f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f82:	4053      	eors	r3, r2
 8012f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012f8a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012f8e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f96:	4059      	eors	r1, r3
 8012f98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012f9c:	404b      	eors	r3, r1
 8012f9e:	441a      	add	r2, r3
 8012fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fa2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012faa:	441a      	add	r2, r3
 8012fac:	4b99      	ldr	r3, [pc, #612]	; (8013214 <mbedtls_internal_sha1_process+0x1b50>)
 8012fae:	4413      	add	r3, r2
 8012fb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012fb4:	4413      	add	r3, r2
 8012fb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012fba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012fbe:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(73));
 8012fc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fca:	405a      	eors	r2, r3
 8012fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012fce:	405a      	eors	r2, r3
 8012fd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012fd2:	4053      	eors	r3, r2
 8012fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8012fd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012fda:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8012fde:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012fe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012fe6:	4059      	eors	r1, r3
 8012fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012fec:	404b      	eors	r3, r1
 8012fee:	441a      	add	r2, r3
 8012ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ff2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012ff6:	673b      	str	r3, [r7, #112]	; 0x70
 8012ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ffa:	441a      	add	r2, r3
 8012ffc:	4b85      	ldr	r3, [pc, #532]	; (8013214 <mbedtls_internal_sha1_process+0x1b50>)
 8012ffe:	4413      	add	r3, r2
 8013000:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8013004:	4413      	add	r3, r2
 8013006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801300a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801300e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013012:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(74));
 8013016:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801301a:	405a      	eors	r2, r3
 801301c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801301e:	405a      	eors	r2, r3
 8013020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013022:	4053      	eors	r3, r2
 8013024:	64bb      	str	r3, [r7, #72]	; 0x48
 8013026:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801302a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 801302e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8013032:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013036:	4059      	eors	r1, r3
 8013038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801303c:	404b      	eors	r3, r1
 801303e:	441a      	add	r2, r3
 8013040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013042:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013046:	677b      	str	r3, [r7, #116]	; 0x74
 8013048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801304a:	441a      	add	r2, r3
 801304c:	4b71      	ldr	r3, [pc, #452]	; (8013214 <mbedtls_internal_sha1_process+0x1b50>)
 801304e:	4413      	add	r3, r2
 8013050:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013054:	4413      	add	r3, r2
 8013056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801305a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801305e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(75));
 8013066:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801306a:	405a      	eors	r2, r3
 801306c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013070:	405a      	eors	r2, r3
 8013072:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013074:	4053      	eors	r3, r2
 8013076:	64bb      	str	r3, [r7, #72]	; 0x48
 8013078:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801307c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8013080:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8013084:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013088:	4059      	eors	r1, r3
 801308a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801308e:	404b      	eors	r3, r1
 8013090:	441a      	add	r2, r3
 8013092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013094:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013098:	67bb      	str	r3, [r7, #120]	; 0x78
 801309a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801309c:	441a      	add	r2, r3
 801309e:	4b5d      	ldr	r3, [pc, #372]	; (8013214 <mbedtls_internal_sha1_process+0x1b50>)
 80130a0:	4413      	add	r3, r2
 80130a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80130a6:	4413      	add	r3, r2
 80130a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80130ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80130b0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80130b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(76));
 80130b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80130ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80130bc:	405a      	eors	r2, r3
 80130be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80130c2:	405a      	eors	r2, r3
 80130c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80130c6:	4053      	eors	r3, r2
 80130c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80130ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80130ce:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80130d2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80130d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80130da:	4059      	eors	r1, r3
 80130dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80130e0:	404b      	eors	r3, r1
 80130e2:	441a      	add	r2, r3
 80130e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130e6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80130ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80130ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80130ee:	441a      	add	r2, r3
 80130f0:	4b48      	ldr	r3, [pc, #288]	; (8013214 <mbedtls_internal_sha1_process+0x1b50>)
 80130f2:	4413      	add	r3, r2
 80130f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80130f8:	4413      	add	r3, r2
 80130fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80130fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013102:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013106:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(77));
 801310a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801310c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801310e:	405a      	eors	r2, r3
 8013110:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013114:	405a      	eors	r2, r3
 8013116:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801311a:	4053      	eors	r3, r2
 801311c:	64bb      	str	r3, [r7, #72]	; 0x48
 801311e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013122:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8013126:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801312a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801312e:	4059      	eors	r1, r3
 8013130:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013134:	404b      	eors	r3, r1
 8013136:	441a      	add	r2, r3
 8013138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801313a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801313e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013146:	441a      	add	r2, r3
 8013148:	4b32      	ldr	r3, [pc, #200]	; (8013214 <mbedtls_internal_sha1_process+0x1b50>)
 801314a:	4413      	add	r3, r2
 801314c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013150:	4413      	add	r3, r2
 8013152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801315a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801315e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(78));
 8013162:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013166:	405a      	eors	r2, r3
 8013168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801316a:	405a      	eors	r2, r3
 801316c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013170:	4053      	eors	r3, r2
 8013172:	64bb      	str	r3, [r7, #72]	; 0x48
 8013174:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013178:	ea4f 62f3 	mov.w	r2, r3, ror #27
 801317c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013184:	4059      	eors	r1, r3
 8013186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801318a:	404b      	eors	r3, r1
 801318c:	441a      	add	r2, r3
 801318e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013190:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801319c:	441a      	add	r2, r3
 801319e:	4b1d      	ldr	r3, [pc, #116]	; (8013214 <mbedtls_internal_sha1_process+0x1b50>)
 80131a0:	4413      	add	r3, r2
 80131a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80131a6:	4413      	add	r3, r2
 80131a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80131ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80131b0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80131b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(79));
 80131b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80131ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80131bc:	405a      	eors	r2, r3
 80131be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131c0:	405a      	eors	r2, r3
 80131c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80131c6:	4053      	eors	r3, r2
 80131c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80131ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80131ce:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80131d2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80131d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80131da:	4059      	eors	r1, r3
 80131dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80131e0:	404b      	eors	r3, r1
 80131e2:	441a      	add	r2, r3
 80131e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131e6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80131ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80131ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80131f2:	441a      	add	r2, r3
 80131f4:	4b07      	ldr	r3, [pc, #28]	; (8013214 <mbedtls_internal_sha1_process+0x1b50>)
 80131f6:	4413      	add	r3, r2
 80131f8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80131fc:	4413      	add	r3, r2
 80131fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013202:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013206:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801320a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

#undef K
#undef F

    ctx->state[0] += local.A;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	689a      	ldr	r2, [r3, #8]
 8013212:	e001      	b.n	8013218 <mbedtls_internal_sha1_process+0x1b54>
 8013214:	ca62c1d6 	.word	0xca62c1d6
 8013218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801321c:	441a      	add	r2, r3
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	609a      	str	r2, [r3, #8]
    ctx->state[1] += local.B;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	68da      	ldr	r2, [r3, #12]
 8013226:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801322a:	441a      	add	r2, r3
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	60da      	str	r2, [r3, #12]
    ctx->state[2] += local.C;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	691a      	ldr	r2, [r3, #16]
 8013234:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013238:	441a      	add	r2, r3
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	611a      	str	r2, [r3, #16]
    ctx->state[3] += local.D;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	695a      	ldr	r2, [r3, #20]
 8013242:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013246:	441a      	add	r2, r3
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	615a      	str	r2, [r3, #20]
    ctx->state[4] += local.E;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	699a      	ldr	r2, [r3, #24]
 8013250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013254:	441a      	add	r2, r3
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	619a      	str	r2, [r3, #24]

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize(&local, sizeof(local));
 801325a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801325e:	2158      	movs	r1, #88	; 0x58
 8013260:	4618      	mov	r0, r3
 8013262:	f7fb fb63 	bl	800e92c <mbedtls_platform_zeroize>

    return 0;
 8013266:	2300      	movs	r3, #0
}
 8013268:	4618      	mov	r0, r3
 801326a:	37e0      	adds	r7, #224	; 0xe0
 801326c:	46bd      	mov	sp, r7
 801326e:	bdb0      	pop	{r4, r5, r7, pc}

08013270 <mbedtls_sha1_update>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update(mbedtls_sha1_context *ctx,
                        const unsigned char *input,
                        size_t ilen)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b088      	sub	sp, #32
 8013274:	af00      	add	r7, sp, #0
 8013276:	60f8      	str	r0, [r7, #12]
 8013278:	60b9      	str	r1, [r7, #8]
 801327a:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 801327c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8013280:	61bb      	str	r3, [r7, #24]
    size_t fill;
    uint32_t left;

    if (ilen == 0) {
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d101      	bne.n	801328c <mbedtls_sha1_update+0x1c>
        return 0;
 8013288:	2300      	movs	r3, #0
 801328a:	e065      	b.n	8013358 <mbedtls_sha1_update+0xe8>
    }

    left = ctx->total[0] & 0x3F;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013294:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 8013296:	69fb      	ldr	r3, [r7, #28]
 8013298:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801329c:	617b      	str	r3, [r7, #20]

    ctx->total[0] += (uint32_t) ilen;
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	681a      	ldr	r2, [r3, #0]
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	441a      	add	r2, r3
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	681a      	ldr	r2, [r3, #0]
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	601a      	str	r2, [r3, #0]

    if (ctx->total[0] < (uint32_t) ilen) {
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	687a      	ldr	r2, [r7, #4]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d904      	bls.n	80132c6 <mbedtls_sha1_update+0x56>
        ctx->total[1]++;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	685b      	ldr	r3, [r3, #4]
 80132c0:	1c5a      	adds	r2, r3, #1
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	605a      	str	r2, [r3, #4]
    }

    if (left && ilen >= fill) {
 80132c6:	69fb      	ldr	r3, [r7, #28]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d034      	beq.n	8013336 <mbedtls_sha1_update+0xc6>
 80132cc:	687a      	ldr	r2, [r7, #4]
 80132ce:	697b      	ldr	r3, [r7, #20]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d330      	bcc.n	8013336 <mbedtls_sha1_update+0xc6>
        memcpy((void *) (ctx->buffer + left), input, fill);
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	f103 021c 	add.w	r2, r3, #28
 80132da:	69fb      	ldr	r3, [r7, #28]
 80132dc:	4413      	add	r3, r2
 80132de:	697a      	ldr	r2, [r7, #20]
 80132e0:	68b9      	ldr	r1, [r7, #8]
 80132e2:	4618      	mov	r0, r3
 80132e4:	f00a f808 	bl	801d2f8 <memcpy>

        if ((ret = mbedtls_internal_sha1_process(ctx, ctx->buffer)) != 0) {
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	331c      	adds	r3, #28
 80132ec:	4619      	mov	r1, r3
 80132ee:	68f8      	ldr	r0, [r7, #12]
 80132f0:	f7fe f9e8 	bl	80116c4 <mbedtls_internal_sha1_process>
 80132f4:	61b8      	str	r0, [r7, #24]
 80132f6:	69bb      	ldr	r3, [r7, #24]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d001      	beq.n	8013300 <mbedtls_sha1_update+0x90>
            return ret;
 80132fc:	69bb      	ldr	r3, [r7, #24]
 80132fe:	e02b      	b.n	8013358 <mbedtls_sha1_update+0xe8>
        }

        input += fill;
 8013300:	68ba      	ldr	r2, [r7, #8]
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	4413      	add	r3, r2
 8013306:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 8013308:	687a      	ldr	r2, [r7, #4]
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	1ad3      	subs	r3, r2, r3
 801330e:	607b      	str	r3, [r7, #4]
        left = 0;
 8013310:	2300      	movs	r3, #0
 8013312:	61fb      	str	r3, [r7, #28]
    }

    while (ilen >= 64) {
 8013314:	e00f      	b.n	8013336 <mbedtls_sha1_update+0xc6>
        if ((ret = mbedtls_internal_sha1_process(ctx, input)) != 0) {
 8013316:	68b9      	ldr	r1, [r7, #8]
 8013318:	68f8      	ldr	r0, [r7, #12]
 801331a:	f7fe f9d3 	bl	80116c4 <mbedtls_internal_sha1_process>
 801331e:	61b8      	str	r0, [r7, #24]
 8013320:	69bb      	ldr	r3, [r7, #24]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d001      	beq.n	801332a <mbedtls_sha1_update+0xba>
            return ret;
 8013326:	69bb      	ldr	r3, [r7, #24]
 8013328:	e016      	b.n	8013358 <mbedtls_sha1_update+0xe8>
        }

        input += 64;
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	3340      	adds	r3, #64	; 0x40
 801332e:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	3b40      	subs	r3, #64	; 0x40
 8013334:	607b      	str	r3, [r7, #4]
    while (ilen >= 64) {
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2b3f      	cmp	r3, #63	; 0x3f
 801333a:	d8ec      	bhi.n	8013316 <mbedtls_sha1_update+0xa6>
    }

    if (ilen > 0) {
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d009      	beq.n	8013356 <mbedtls_sha1_update+0xe6>
        memcpy((void *) (ctx->buffer + left), input, ilen);
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	f103 021c 	add.w	r2, r3, #28
 8013348:	69fb      	ldr	r3, [r7, #28]
 801334a:	4413      	add	r3, r2
 801334c:	687a      	ldr	r2, [r7, #4]
 801334e:	68b9      	ldr	r1, [r7, #8]
 8013350:	4618      	mov	r0, r3
 8013352:	f009 ffd1 	bl	801d2f8 <memcpy>
    }

    return 0;
 8013356:	2300      	movs	r3, #0
}
 8013358:	4618      	mov	r0, r3
 801335a:	3720      	adds	r7, #32
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}

08013360 <mbedtls_sha1_finish>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish(mbedtls_sha1_context *ctx,
                        unsigned char output[20])
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b094      	sub	sp, #80	; 0x50
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 801336a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801336e:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013378:	64bb      	str	r3, [r7, #72]	; 0x48

    ctx->buffer[used++] = 0x80;
 801337a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801337c:	1c5a      	adds	r2, r3, #1
 801337e:	64ba      	str	r2, [r7, #72]	; 0x48
 8013380:	687a      	ldr	r2, [r7, #4]
 8013382:	4413      	add	r3, r2
 8013384:	2280      	movs	r2, #128	; 0x80
 8013386:	771a      	strb	r2, [r3, #28]

    if (used <= 56) {
 8013388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801338a:	2b38      	cmp	r3, #56	; 0x38
 801338c:	d80c      	bhi.n	80133a8 <mbedtls_sha1_finish+0x48>
        /* Enough room for padding + length in current block */
        memset(ctx->buffer + used, 0, 56 - used);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f103 021c 	add.w	r2, r3, #28
 8013394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013396:	18d0      	adds	r0, r2, r3
 8013398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801339a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801339e:	461a      	mov	r2, r3
 80133a0:	2100      	movs	r1, #0
 80133a2:	f009 ff0b 	bl	801d1bc <memset>
 80133a6:	e01c      	b.n	80133e2 <mbedtls_sha1_finish+0x82>
    } else {
        /* We'll need an extra block */
        memset(ctx->buffer + used, 0, 64 - used);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f103 021c 	add.w	r2, r3, #28
 80133ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133b0:	18d0      	adds	r0, r2, r3
 80133b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133b4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80133b8:	461a      	mov	r2, r3
 80133ba:	2100      	movs	r1, #0
 80133bc:	f009 fefe 	bl	801d1bc <memset>

        if ((ret = mbedtls_internal_sha1_process(ctx, ctx->buffer)) != 0) {
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	331c      	adds	r3, #28
 80133c4:	4619      	mov	r1, r3
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f7fe f97c 	bl	80116c4 <mbedtls_internal_sha1_process>
 80133cc:	64f8      	str	r0, [r7, #76]	; 0x4c
 80133ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d170      	bne.n	80134b6 <mbedtls_sha1_finish+0x156>
            goto exit;
        }

        memset(ctx->buffer, 0, 56);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	331c      	adds	r3, #28
 80133d8:	2238      	movs	r2, #56	; 0x38
 80133da:	2100      	movs	r1, #0
 80133dc:	4618      	mov	r0, r3
 80133de:	f009 feed 	bl	801d1bc <memset>
    }

    /*
     * Add message length
     */
    high = (ctx->total[0] >> 29)
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	0f5a      	lsrs	r2, r3, #29
           | (ctx->total[1] <<  3);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	00db      	lsls	r3, r3, #3
    high = (ctx->total[0] >> 29)
 80133ee:	4313      	orrs	r3, r2
 80133f0:	647b      	str	r3, [r7, #68]	; 0x44
    low  = (ctx->total[0] <<  3);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	00db      	lsls	r3, r3, #3
 80133f8:	643b      	str	r3, [r7, #64]	; 0x40

    MBEDTLS_PUT_UINT32_BE(high, ctx->buffer, 56);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	331c      	adds	r3, #28
 80133fe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013404:	ba1b      	rev	r3, r3
 8013406:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013408:	60bb      	str	r3, [r7, #8]
 801340a:	68ba      	ldr	r2, [r7, #8]
    memcpy(p, &x, sizeof(x));
 801340c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801340e:	601a      	str	r2, [r3, #0]
}
 8013410:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(low,  ctx->buffer, 60);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	331c      	adds	r3, #28
 8013416:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 801341a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801341c:	ba1b      	rev	r3, r3
 801341e:	63ba      	str	r2, [r7, #56]	; 0x38
 8013420:	60fb      	str	r3, [r7, #12]
 8013422:	68fa      	ldr	r2, [r7, #12]
    memcpy(p, &x, sizeof(x));
 8013424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013426:	601a      	str	r2, [r3, #0]
}
 8013428:	bf00      	nop

    if ((ret = mbedtls_internal_sha1_process(ctx, ctx->buffer)) != 0) {
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	331c      	adds	r3, #28
 801342e:	4619      	mov	r1, r3
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f7fe f947 	bl	80116c4 <mbedtls_internal_sha1_process>
 8013436:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801343a:	2b00      	cmp	r3, #0
 801343c:	d13d      	bne.n	80134ba <mbedtls_sha1_finish+0x15a>
    }

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_BE(ctx->state[0], output,  0);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	689b      	ldr	r3, [r3, #8]
 8013442:	ba1b      	rev	r3, r3
 8013444:	683a      	ldr	r2, [r7, #0]
 8013446:	637a      	str	r2, [r7, #52]	; 0x34
 8013448:	613b      	str	r3, [r7, #16]
 801344a:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 801344c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801344e:	601a      	str	r2, [r3, #0]
}
 8013450:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[1], output,  4);
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	1d1a      	adds	r2, r3, #4
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	68db      	ldr	r3, [r3, #12]
 801345a:	ba1b      	rev	r3, r3
 801345c:	633a      	str	r2, [r7, #48]	; 0x30
 801345e:	617b      	str	r3, [r7, #20]
 8013460:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8013462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013464:	601a      	str	r2, [r3, #0]
}
 8013466:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[2], output,  8);
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	f103 0208 	add.w	r2, r3, #8
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	691b      	ldr	r3, [r3, #16]
 8013472:	ba1b      	rev	r3, r3
 8013474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013476:	61bb      	str	r3, [r7, #24]
 8013478:	69ba      	ldr	r2, [r7, #24]
    memcpy(p, &x, sizeof(x));
 801347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801347c:	601a      	str	r2, [r3, #0]
}
 801347e:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[3], output, 12);
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	f103 020c 	add.w	r2, r3, #12
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	695b      	ldr	r3, [r3, #20]
 801348a:	ba1b      	rev	r3, r3
 801348c:	62ba      	str	r2, [r7, #40]	; 0x28
 801348e:	61fb      	str	r3, [r7, #28]
 8013490:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 8013492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013494:	601a      	str	r2, [r3, #0]
}
 8013496:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[4], output, 16);
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	f103 0210 	add.w	r2, r3, #16
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	699b      	ldr	r3, [r3, #24]
 80134a2:	ba1b      	rev	r3, r3
 80134a4:	627a      	str	r2, [r7, #36]	; 0x24
 80134a6:	623b      	str	r3, [r7, #32]
 80134a8:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 80134aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ac:	601a      	str	r2, [r3, #0]
}
 80134ae:	bf00      	nop

    ret = 0;
 80134b0:	2300      	movs	r3, #0
 80134b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80134b4:	e002      	b.n	80134bc <mbedtls_sha1_finish+0x15c>
            goto exit;
 80134b6:	bf00      	nop
 80134b8:	e000      	b.n	80134bc <mbedtls_sha1_finish+0x15c>
        goto exit;
 80134ba:	bf00      	nop

exit:
    mbedtls_sha1_free(ctx);
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f7fe f8c7 	bl	8011650 <mbedtls_sha1_free>
    return ret;
 80134c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	3750      	adds	r7, #80	; 0x50
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <mbedtls_sha1>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1(const unsigned char *input,
                 size_t ilen,
                 unsigned char output[20])
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b09c      	sub	sp, #112	; 0x70
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	60f8      	str	r0, [r7, #12]
 80134d4:	60b9      	str	r1, [r7, #8]
 80134d6:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80134d8:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80134dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init(&ctx);
 80134de:	f107 0310 	add.w	r3, r7, #16
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7fe f8a7 	bl	8011636 <mbedtls_sha1_init>

    if ((ret = mbedtls_sha1_starts(&ctx)) != 0) {
 80134e8:	f107 0310 	add.w	r3, r7, #16
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7fe f8bf 	bl	8011670 <mbedtls_sha1_starts>
 80134f2:	66f8      	str	r0, [r7, #108]	; 0x6c
 80134f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d114      	bne.n	8013524 <mbedtls_sha1+0x58>
        goto exit;
    }

    if ((ret = mbedtls_sha1_update(&ctx, input, ilen)) != 0) {
 80134fa:	f107 0310 	add.w	r3, r7, #16
 80134fe:	68ba      	ldr	r2, [r7, #8]
 8013500:	68f9      	ldr	r1, [r7, #12]
 8013502:	4618      	mov	r0, r3
 8013504:	f7ff feb4 	bl	8013270 <mbedtls_sha1_update>
 8013508:	66f8      	str	r0, [r7, #108]	; 0x6c
 801350a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801350c:	2b00      	cmp	r3, #0
 801350e:	d10b      	bne.n	8013528 <mbedtls_sha1+0x5c>
        goto exit;
    }

    if ((ret = mbedtls_sha1_finish(&ctx, output)) != 0) {
 8013510:	f107 0310 	add.w	r3, r7, #16
 8013514:	6879      	ldr	r1, [r7, #4]
 8013516:	4618      	mov	r0, r3
 8013518:	f7ff ff22 	bl	8013360 <mbedtls_sha1_finish>
 801351c:	66f8      	str	r0, [r7, #108]	; 0x6c
 801351e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013520:	2b00      	cmp	r3, #0
        goto exit;
    }

exit:
 8013522:	e002      	b.n	801352a <mbedtls_sha1+0x5e>
        goto exit;
 8013524:	bf00      	nop
 8013526:	e000      	b.n	801352a <mbedtls_sha1+0x5e>
        goto exit;
 8013528:	bf00      	nop
    mbedtls_sha1_free(&ctx);
 801352a:	f107 0310 	add.w	r3, r7, #16
 801352e:	4618      	mov	r0, r3
 8013530:	f7fe f88e 	bl	8011650 <mbedtls_sha1_free>
    return ret;
 8013534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8013536:	4618      	mov	r0, r3
 8013538:	3770      	adds	r7, #112	; 0x70
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}

0801353e <mbedtls_sha256_init>:
#if !defined(MBEDTLS_SHA256_ALT)

#define SHA256_BLOCK_SIZE 64

void mbedtls_sha256_init(mbedtls_sha256_context *ctx)
{
 801353e:	b580      	push	{r7, lr}
 8013540:	b082      	sub	sp, #8
 8013542:	af00      	add	r7, sp, #0
 8013544:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_sha256_context));
 8013546:	226c      	movs	r2, #108	; 0x6c
 8013548:	2100      	movs	r1, #0
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f009 fe36 	bl	801d1bc <memset>
}
 8013550:	bf00      	nop
 8013552:	3708      	adds	r7, #8
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}

08013558 <mbedtls_sha256_free>:

void mbedtls_sha256_free(mbedtls_sha256_context *ctx)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d004      	beq.n	8013570 <mbedtls_sha256_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_sha256_context));
 8013566:	216c      	movs	r1, #108	; 0x6c
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f7fb f9df 	bl	800e92c <mbedtls_platform_zeroize>
 801356e:	e000      	b.n	8013572 <mbedtls_sha256_free+0x1a>
        return;
 8013570:	bf00      	nop
}
 8013572:	3708      	adds	r7, #8
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}

08013578 <mbedtls_sha256_starts>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts(mbedtls_sha256_context *ctx, int is224)
{
 8013578:	b480      	push	{r7}
 801357a:	b083      	sub	sp, #12
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	6039      	str	r1, [r7, #0]
#if defined(MBEDTLS_SHA224_C) && defined(MBEDTLS_SHA256_C)
    if (is224 != 0 && is224 != 1) {
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d005      	beq.n	8013594 <mbedtls_sha256_starts+0x1c>
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	2b01      	cmp	r3, #1
 801358c:	d002      	beq.n	8013594 <mbedtls_sha256_starts+0x1c>
        return MBEDTLS_ERR_SHA256_BAD_INPUT_DATA;
 801358e:	f06f 0373 	mvn.w	r3, #115	; 0x73
 8013592:	e03d      	b.n	8013610 <mbedtls_sha256_starts+0x98>
    if (is224 == 0) {
        return MBEDTLS_ERR_SHA256_BAD_INPUT_DATA;
    }
#endif

    ctx->total[0] = 0;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	2200      	movs	r2, #0
 8013598:	641a      	str	r2, [r3, #64]	; 0x40
    ctx->total[1] = 0;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	2200      	movs	r2, #0
 801359e:	645a      	str	r2, [r3, #68]	; 0x44

    if (is224 == 0) {
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d118      	bne.n	80135d8 <mbedtls_sha256_starts+0x60>
#if defined(MBEDTLS_SHA256_C)
        ctx->state[0] = 0x6A09E667;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	4a1c      	ldr	r2, [pc, #112]	; (801361c <mbedtls_sha256_starts+0xa4>)
 80135aa:	649a      	str	r2, [r3, #72]	; 0x48
        ctx->state[1] = 0xBB67AE85;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	4a1c      	ldr	r2, [pc, #112]	; (8013620 <mbedtls_sha256_starts+0xa8>)
 80135b0:	64da      	str	r2, [r3, #76]	; 0x4c
        ctx->state[2] = 0x3C6EF372;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4a1b      	ldr	r2, [pc, #108]	; (8013624 <mbedtls_sha256_starts+0xac>)
 80135b6:	651a      	str	r2, [r3, #80]	; 0x50
        ctx->state[3] = 0xA54FF53A;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	4a1b      	ldr	r2, [pc, #108]	; (8013628 <mbedtls_sha256_starts+0xb0>)
 80135bc:	655a      	str	r2, [r3, #84]	; 0x54
        ctx->state[4] = 0x510E527F;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	4a1a      	ldr	r2, [pc, #104]	; (801362c <mbedtls_sha256_starts+0xb4>)
 80135c2:	659a      	str	r2, [r3, #88]	; 0x58
        ctx->state[5] = 0x9B05688C;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	4a1a      	ldr	r2, [pc, #104]	; (8013630 <mbedtls_sha256_starts+0xb8>)
 80135c8:	65da      	str	r2, [r3, #92]	; 0x5c
        ctx->state[6] = 0x1F83D9AB;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	4a19      	ldr	r2, [pc, #100]	; (8013634 <mbedtls_sha256_starts+0xbc>)
 80135ce:	661a      	str	r2, [r3, #96]	; 0x60
        ctx->state[7] = 0x5BE0CD19;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	4a19      	ldr	r2, [pc, #100]	; (8013638 <mbedtls_sha256_starts+0xc0>)
 80135d4:	665a      	str	r2, [r3, #100]	; 0x64
 80135d6:	e017      	b.n	8013608 <mbedtls_sha256_starts+0x90>
#endif
    } else {
#if defined(MBEDTLS_SHA224_C)
        ctx->state[0] = 0xC1059ED8;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	4a18      	ldr	r2, [pc, #96]	; (801363c <mbedtls_sha256_starts+0xc4>)
 80135dc:	649a      	str	r2, [r3, #72]	; 0x48
        ctx->state[1] = 0x367CD507;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	4a17      	ldr	r2, [pc, #92]	; (8013640 <mbedtls_sha256_starts+0xc8>)
 80135e2:	64da      	str	r2, [r3, #76]	; 0x4c
        ctx->state[2] = 0x3070DD17;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	4a17      	ldr	r2, [pc, #92]	; (8013644 <mbedtls_sha256_starts+0xcc>)
 80135e8:	651a      	str	r2, [r3, #80]	; 0x50
        ctx->state[3] = 0xF70E5939;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	4a16      	ldr	r2, [pc, #88]	; (8013648 <mbedtls_sha256_starts+0xd0>)
 80135ee:	655a      	str	r2, [r3, #84]	; 0x54
        ctx->state[4] = 0xFFC00B31;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	4a16      	ldr	r2, [pc, #88]	; (801364c <mbedtls_sha256_starts+0xd4>)
 80135f4:	659a      	str	r2, [r3, #88]	; 0x58
        ctx->state[5] = 0x68581511;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	4a15      	ldr	r2, [pc, #84]	; (8013650 <mbedtls_sha256_starts+0xd8>)
 80135fa:	65da      	str	r2, [r3, #92]	; 0x5c
        ctx->state[6] = 0x64F98FA7;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	4a15      	ldr	r2, [pc, #84]	; (8013654 <mbedtls_sha256_starts+0xdc>)
 8013600:	661a      	str	r2, [r3, #96]	; 0x60
        ctx->state[7] = 0xBEFA4FA4;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	4a14      	ldr	r2, [pc, #80]	; (8013658 <mbedtls_sha256_starts+0xe0>)
 8013606:	665a      	str	r2, [r3, #100]	; 0x64
#endif
    }

#if defined(MBEDTLS_SHA224_C)
    ctx->is224 = is224;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	683a      	ldr	r2, [r7, #0]
 801360c:	669a      	str	r2, [r3, #104]	; 0x68
#endif

    return 0;
 801360e:	2300      	movs	r3, #0
}
 8013610:	4618      	mov	r0, r3
 8013612:	370c      	adds	r7, #12
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr
 801361c:	6a09e667 	.word	0x6a09e667
 8013620:	bb67ae85 	.word	0xbb67ae85
 8013624:	3c6ef372 	.word	0x3c6ef372
 8013628:	a54ff53a 	.word	0xa54ff53a
 801362c:	510e527f 	.word	0x510e527f
 8013630:	9b05688c 	.word	0x9b05688c
 8013634:	1f83d9ab 	.word	0x1f83d9ab
 8013638:	5be0cd19 	.word	0x5be0cd19
 801363c:	c1059ed8 	.word	0xc1059ed8
 8013640:	367cd507 	.word	0x367cd507
 8013644:	3070dd17 	.word	0x3070dd17
 8013648:	f70e5939 	.word	0xf70e5939
 801364c:	ffc00b31 	.word	0xffc00b31
 8013650:	68581511 	.word	0x68581511
 8013654:	64f98fa7 	.word	0x64f98fa7
 8013658:	befa4fa4 	.word	0xbefa4fa4

0801365c <mbedtls_internal_sha256_process>:
 */
static
#endif
int mbedtls_internal_sha256_process_c(mbedtls_sha256_context *ctx,
                                      const unsigned char data[SHA256_BLOCK_SIZE])
{
 801365c:	b590      	push	{r4, r7, lr}
 801365e:	b0d1      	sub	sp, #324	; 0x144
 8013660:	af00      	add	r7, sp, #0
 8013662:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013666:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801366a:	6018      	str	r0, [r3, #0]
 801366c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013670:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013674:	6019      	str	r1, [r3, #0]
        uint32_t A[8];
    } local;

    unsigned int i;

    for (i = 0; i < 8; i++) {
 8013676:	2300      	movs	r3, #0
 8013678:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801367c:	e017      	b.n	80136ae <mbedtls_internal_sha256_process+0x52>
        local.A[i] = ctx->state[i];
 801367e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013682:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801368c:	3212      	adds	r2, #18
 801368e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013692:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801369a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801369e:	3242      	adds	r2, #66	; 0x42
 80136a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 8; i++) {
 80136a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80136a8:	3301      	adds	r3, #1
 80136aa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80136ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80136b2:	2b07      	cmp	r3, #7
 80136b4:	d9e3      	bls.n	801367e <mbedtls_internal_sha256_process+0x22>
        local.A[4] = local.A[3]; local.A[3] = local.A[2];
        local.A[2] = local.A[1]; local.A[1] = local.A[0];
        local.A[0] = local.temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for (i = 0; i < 16; i++) {
 80136b6:	2300      	movs	r3, #0
 80136b8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80136bc:	e027      	b.n	801370e <mbedtls_internal_sha256_process+0xb2>
        local.W[i] = MBEDTLS_GET_UINT32_BE(data, 4 * i);
 80136be:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80136c2:	009b      	lsls	r3, r3, #2
 80136c4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80136c8:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 80136cc:	6812      	ldr	r2, [r2, #0]
 80136ce:	4413      	add	r3, r2
 80136d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80136d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 80136dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80136e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80136e4:	601a      	str	r2, [r3, #0]
    return r;
 80136e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80136ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	ba19      	rev	r1, r3
 80136f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80136f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80136fa:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80136fe:	3202      	adds	r2, #2
 8013700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; i++) {
 8013704:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013708:	3301      	adds	r3, #1
 801370a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801370e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013712:	2b0f      	cmp	r3, #15
 8013714:	d9d3      	bls.n	80136be <mbedtls_internal_sha256_process+0x62>
    }

    for (i = 0; i < 16; i += 8) {
 8013716:	2300      	movs	r3, #0
 8013718:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801371c:	f000 bdd1 	b.w	80142c2 <mbedtls_internal_sha256_process+0xc66>
        P(local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
 8013720:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013728:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 801372c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013734:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8013738:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801373c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013744:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8013748:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801374c:	4059      	eors	r1, r3
 801374e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013756:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801375a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801375e:	404b      	eors	r3, r1
 8013760:	441a      	add	r2, r3
 8013762:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801376a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 801376e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013776:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 801377a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801377e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013782:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 8013786:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801378a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801378e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8013792:	4063      	eors	r3, r4
 8013794:	4003      	ands	r3, r0
 8013796:	404b      	eors	r3, r1
 8013798:	441a      	add	r2, r3
 801379a:	49f5      	ldr	r1, [pc, #980]	; (8013b70 <mbedtls_internal_sha256_process+0x514>)
 801379c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80137a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80137a4:	441a      	add	r2, r3
 80137a6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80137aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80137ae:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80137b2:	3102      	adds	r1, #2
 80137b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80137b8:	441a      	add	r2, r3
 80137ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80137be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80137c2:	601a      	str	r2, [r3, #0]
 80137c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80137c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80137cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80137d0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80137d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80137d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80137dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80137e0:	ea4f 3373 	mov.w	r3, r3, ror #13
 80137e4:	405a      	eors	r2, r3
 80137e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80137ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80137ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80137f2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80137f6:	405a      	eors	r2, r3
 80137f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80137fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013800:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8013804:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801380c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8013810:	4019      	ands	r1, r3
 8013812:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801381a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
 801381e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013826:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 801382a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801382e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013832:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8013836:	4323      	orrs	r3, r4
 8013838:	4003      	ands	r3, r0
 801383a:	430b      	orrs	r3, r1
 801383c:	441a      	add	r2, r3
 801383e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013846:	605a      	str	r2, [r3, #4]
 8013848:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801384c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013850:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8013854:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	441a      	add	r2, r3
 8013860:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013868:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 801386c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013874:	681a      	ldr	r2, [r3, #0]
 8013876:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801387a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801387e:	685b      	ldr	r3, [r3, #4]
 8013880:	441a      	add	r2, r3
 8013882:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801388a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
          local.A[5], local.A[6], local.A[7], local.W[i+0], K[i+0]);
        P(local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
 801388e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013896:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 801389a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801389e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80138a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80138a6:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80138aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80138ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80138b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80138b6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80138ba:	4059      	eors	r1, r3
 80138bc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80138c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80138c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80138c8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80138cc:	404b      	eors	r3, r1
 80138ce:	441a      	add	r2, r3
 80138d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80138d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80138d8:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 80138dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80138e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80138e4:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80138e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80138ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80138f0:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 80138f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80138f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80138fc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013900:	4063      	eors	r3, r4
 8013902:	4003      	ands	r3, r0
 8013904:	404b      	eors	r3, r1
 8013906:	441a      	add	r2, r3
 8013908:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801390c:	3301      	adds	r3, #1
 801390e:	4998      	ldr	r1, [pc, #608]	; (8013b70 <mbedtls_internal_sha256_process+0x514>)
 8013910:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013914:	441a      	add	r2, r3
 8013916:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801391a:	1c59      	adds	r1, r3, #1
 801391c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013924:	3102      	adds	r1, #2
 8013926:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801392a:	441a      	add	r2, r3
 801392c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013934:	601a      	str	r2, [r3, #0]
 8013936:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801393a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801393e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013942:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013946:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801394a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801394e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013952:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013956:	405a      	eors	r2, r3
 8013958:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801395c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013960:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013964:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013968:	405a      	eors	r2, r3
 801396a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801396e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013972:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 8013976:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801397a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801397e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8013982:	4019      	ands	r1, r3
 8013984:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801398c:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8013990:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013998:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 801399c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80139a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80139a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80139a8:	4323      	orrs	r3, r4
 80139aa:	4003      	ands	r3, r0
 80139ac:	430b      	orrs	r3, r1
 80139ae:	441a      	add	r2, r3
 80139b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80139b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80139b8:	605a      	str	r2, [r3, #4]
 80139ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80139be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80139c2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80139c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80139ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	441a      	add	r2, r3
 80139d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80139d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80139da:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80139de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80139e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80139e6:	681a      	ldr	r2, [r3, #0]
 80139e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80139ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	441a      	add	r2, r3
 80139f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80139f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80139fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
          local.A[4], local.A[5], local.A[6], local.W[i+1], K[i+1]);
        P(local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
 8013a00:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013a08:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8013a0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013a14:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8013a18:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013a1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013a24:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8013a28:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013a2c:	4059      	eors	r1, r3
 8013a2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013a36:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8013a3a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013a3e:	404b      	eors	r3, r1
 8013a40:	441a      	add	r2, r3
 8013a42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013a4a:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8013a4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013a56:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
 8013a5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013a62:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
 8013a66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013a6e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8013a72:	4063      	eors	r3, r4
 8013a74:	4003      	ands	r3, r0
 8013a76:	404b      	eors	r3, r1
 8013a78:	441a      	add	r2, r3
 8013a7a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013a7e:	3302      	adds	r3, #2
 8013a80:	493b      	ldr	r1, [pc, #236]	; (8013b70 <mbedtls_internal_sha256_process+0x514>)
 8013a82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013a86:	441a      	add	r2, r3
 8013a88:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013a8c:	1c99      	adds	r1, r3, #2
 8013a8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013a96:	3102      	adds	r1, #2
 8013a98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a9c:	441a      	add	r2, r3
 8013a9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013aa6:	601a      	str	r2, [r3, #0]
 8013aa8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013ab0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8013ab4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013ab8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013ac0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8013ac4:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013ac8:	405a      	eors	r2, r3
 8013aca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013ad2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8013ad6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013ada:	405a      	eors	r2, r3
 8013adc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013ae4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 8013ae8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013af0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013af4:	4019      	ands	r1, r3
 8013af6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013afe:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013b02:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013b0a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8013b0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013b16:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013b1a:	4323      	orrs	r3, r4
 8013b1c:	4003      	ands	r3, r0
 8013b1e:	430b      	orrs	r3, r1
 8013b20:	441a      	add	r2, r3
 8013b22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013b2a:	605a      	str	r2, [r3, #4]
 8013b2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013b34:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8013b38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	441a      	add	r2, r3
 8013b44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013b4c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8013b50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013b54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013b58:	681a      	ldr	r2, [r3, #0]
 8013b5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013b62:	685b      	ldr	r3, [r3, #4]
 8013b64:	441a      	add	r2, r3
 8013b66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013b6e:	e001      	b.n	8013b74 <mbedtls_internal_sha256_process+0x518>
 8013b70:	0801ffa0 	.word	0x0801ffa0
 8013b74:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          local.A[3], local.A[4], local.A[5], local.W[i+2], K[i+2]);
        P(local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
 8013b78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013b7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013b80:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8013b84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013b8c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8013b90:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013b94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013b9c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8013ba0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013ba4:	4059      	eors	r1, r3
 8013ba6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013bae:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8013bb2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013bb6:	404b      	eors	r3, r1
 8013bb8:	441a      	add	r2, r3
 8013bba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013bc2:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 8013bc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013bce:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8013bd2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013bda:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 8013bde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013be6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8013bea:	4063      	eors	r3, r4
 8013bec:	4003      	ands	r3, r0
 8013bee:	404b      	eors	r3, r1
 8013bf0:	441a      	add	r2, r3
 8013bf2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013bf6:	3303      	adds	r3, #3
 8013bf8:	49f4      	ldr	r1, [pc, #976]	; (8013fcc <mbedtls_internal_sha256_process+0x970>)
 8013bfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013bfe:	441a      	add	r2, r3
 8013c00:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013c04:	1cd9      	adds	r1, r3, #3
 8013c06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013c0e:	3102      	adds	r1, #2
 8013c10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013c14:	441a      	add	r2, r3
 8013c16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013c1e:	601a      	str	r2, [r3, #0]
 8013c20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013c28:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013c2c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013c30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013c34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013c38:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013c3c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013c40:	405a      	eors	r2, r3
 8013c42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013c4a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013c4e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013c52:	405a      	eors	r2, r3
 8013c54:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013c5c:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 8013c60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013c68:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8013c6c:	4019      	ands	r1, r3
 8013c6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013c76:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
 8013c7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013c82:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 8013c86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013c8e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8013c92:	4323      	orrs	r3, r4
 8013c94:	4003      	ands	r3, r0
 8013c96:	430b      	orrs	r3, r1
 8013c98:	441a      	add	r2, r3
 8013c9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013ca2:	605a      	str	r2, [r3, #4]
 8013ca4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013ca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013cac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8013cb0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	441a      	add	r2, r3
 8013cbc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013cc4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8013cc8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013cd0:	681a      	ldr	r2, [r3, #0]
 8013cd2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	441a      	add	r2, r3
 8013cde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013ce6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          local.A[2], local.A[3], local.A[4], local.W[i+3], K[i+3]);
        P(local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
 8013cea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013cee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013cf2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8013cf6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013cfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8013d02:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013d06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013d0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8013d12:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013d16:	4059      	eors	r1, r3
 8013d18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013d20:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8013d24:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013d28:	404b      	eors	r3, r1
 8013d2a:	441a      	add	r2, r3
 8013d2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013d34:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8013d38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013d40:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013d44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013d4c:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8013d50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013d54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013d58:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8013d5c:	4063      	eors	r3, r4
 8013d5e:	4003      	ands	r3, r0
 8013d60:	404b      	eors	r3, r1
 8013d62:	441a      	add	r2, r3
 8013d64:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013d68:	3304      	adds	r3, #4
 8013d6a:	4998      	ldr	r1, [pc, #608]	; (8013fcc <mbedtls_internal_sha256_process+0x970>)
 8013d6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013d70:	441a      	add	r2, r3
 8013d72:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013d76:	1d19      	adds	r1, r3, #4
 8013d78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013d7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013d80:	3102      	adds	r1, #2
 8013d82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013d86:	441a      	add	r2, r3
 8013d88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013d90:	601a      	str	r2, [r3, #0]
 8013d92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013d96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013d9a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8013d9e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013da2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013daa:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8013dae:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013db2:	405a      	eors	r2, r3
 8013db4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013dbc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8013dc0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013dc4:	405a      	eors	r2, r3
 8013dc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013dce:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8013dd2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013dda:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013dde:	4019      	ands	r1, r3
 8013de0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013de8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
 8013dec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013df4:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8013df8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e00:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013e04:	4323      	orrs	r3, r4
 8013e06:	4003      	ands	r3, r0
 8013e08:	430b      	orrs	r3, r1
 8013e0a:	441a      	add	r2, r3
 8013e0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e14:	605a      	str	r2, [r3, #4]
 8013e16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e1e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8013e22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	441a      	add	r2, r3
 8013e2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e36:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8013e3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e42:	681a      	ldr	r2, [r3, #0]
 8013e44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e4c:	685b      	ldr	r3, [r3, #4]
 8013e4e:	441a      	add	r2, r3
 8013e50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013e54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e58:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          local.A[1], local.A[2], local.A[3], local.W[i+4], K[i+4]);
        P(local.A[3], local.A[4], local.A[5], local.A[6], local.A[7],
 8013e5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013e60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e64:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8013e68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013e6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e70:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013e74:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013e78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e80:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013e84:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013e88:	4059      	eors	r1, r3
 8013e8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e92:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013e96:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013e9a:	404b      	eors	r3, r1
 8013e9c:	441a      	add	r2, r3
 8013e9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013ea6:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8013eaa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013eb2:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
 8013eb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013ebe:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 8013ec2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013eca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8013ece:	4063      	eors	r3, r4
 8013ed0:	4003      	ands	r3, r0
 8013ed2:	404b      	eors	r3, r1
 8013ed4:	441a      	add	r2, r3
 8013ed6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013eda:	3305      	adds	r3, #5
 8013edc:	493b      	ldr	r1, [pc, #236]	; (8013fcc <mbedtls_internal_sha256_process+0x970>)
 8013ede:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013ee2:	441a      	add	r2, r3
 8013ee4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013ee8:	1d59      	adds	r1, r3, #5
 8013eea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013ef2:	3102      	adds	r1, #2
 8013ef4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013ef8:	441a      	add	r2, r3
 8013efa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f02:	601a      	str	r2, [r3, #0]
 8013f04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f0c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8013f10:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013f14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f1c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8013f20:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013f24:	405a      	eors	r2, r3
 8013f26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f2e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8013f32:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013f36:	405a      	eors	r2, r3
 8013f38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f40:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 8013f44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f4c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8013f50:	4019      	ands	r1, r3
 8013f52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f5a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
 8013f5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f66:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
 8013f6a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f72:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8013f76:	4323      	orrs	r3, r4
 8013f78:	4003      	ands	r3, r0
 8013f7a:	430b      	orrs	r3, r1
 8013f7c:	441a      	add	r2, r3
 8013f7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f86:	605a      	str	r2, [r3, #4]
 8013f88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f90:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8013f94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	441a      	add	r2, r3
 8013fa0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013fa8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8013fac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013fb4:	681a      	ldr	r2, [r3, #0]
 8013fb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013fbe:	685b      	ldr	r3, [r3, #4]
 8013fc0:	441a      	add	r2, r3
 8013fc2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013fca:	e001      	b.n	8013fd0 <mbedtls_internal_sha256_process+0x974>
 8013fcc:	0801ffa0 	.word	0x0801ffa0
 8013fd0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          local.A[0], local.A[1], local.A[2], local.W[i+5], K[i+5]);
        P(local.A[2], local.A[3], local.A[4], local.A[5], local.A[6],
 8013fd4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013fdc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8013fe0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013fe8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8013fec:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013ff0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013ff8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8013ffc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014000:	4059      	eors	r1, r3
 8014002:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801400a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801400e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014012:	404b      	eors	r3, r1
 8014014:	441a      	add	r2, r3
 8014016:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801401a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801401e:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8014022:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801402a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
 801402e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014036:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 801403a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801403e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014042:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8014046:	4063      	eors	r3, r4
 8014048:	4003      	ands	r3, r0
 801404a:	404b      	eors	r3, r1
 801404c:	441a      	add	r2, r3
 801404e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014052:	3306      	adds	r3, #6
 8014054:	49a0      	ldr	r1, [pc, #640]	; (80142d8 <mbedtls_internal_sha256_process+0xc7c>)
 8014056:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801405a:	441a      	add	r2, r3
 801405c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014060:	1d99      	adds	r1, r3, #6
 8014062:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801406a:	3102      	adds	r1, #2
 801406c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014070:	441a      	add	r2, r3
 8014072:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801407a:	601a      	str	r2, [r3, #0]
 801407c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014084:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8014088:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801408c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014094:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8014098:	ea4f 3373 	mov.w	r3, r3, ror #13
 801409c:	405a      	eors	r2, r3
 801409e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80140a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80140a6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80140aa:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80140ae:	405a      	eors	r2, r3
 80140b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80140b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80140b8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 80140bc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80140c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80140c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80140c8:	4019      	ands	r1, r3
 80140ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80140ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80140d2:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 80140d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80140da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80140de:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 80140e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80140e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80140ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80140ee:	4323      	orrs	r3, r4
 80140f0:	4003      	ands	r3, r0
 80140f2:	430b      	orrs	r3, r1
 80140f4:	441a      	add	r2, r3
 80140f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80140fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80140fe:	605a      	str	r2, [r3, #4]
 8014100:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014108:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 801410c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	441a      	add	r2, r3
 8014118:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801411c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014120:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8014124:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801412c:	681a      	ldr	r2, [r3, #0]
 801412e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014136:	685b      	ldr	r3, [r3, #4]
 8014138:	441a      	add	r2, r3
 801413a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801413e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014142:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
          local.A[7], local.A[0], local.A[1], local.W[i+6], K[i+6]);
        P(local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
 8014146:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801414a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801414e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8014152:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801415a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801415e:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014162:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014166:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801416a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801416e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014172:	4059      	eors	r1, r3
 8014174:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801417c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014180:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014184:	404b      	eors	r3, r1
 8014186:	441a      	add	r2, r3
 8014188:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801418c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014190:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 8014194:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014198:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801419c:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
 80141a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80141a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80141a8:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80141ac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80141b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80141b4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80141b8:	4063      	eors	r3, r4
 80141ba:	4003      	ands	r3, r0
 80141bc:	404b      	eors	r3, r1
 80141be:	441a      	add	r2, r3
 80141c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80141c4:	3307      	adds	r3, #7
 80141c6:	4944      	ldr	r1, [pc, #272]	; (80142d8 <mbedtls_internal_sha256_process+0xc7c>)
 80141c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80141cc:	441a      	add	r2, r3
 80141ce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80141d2:	1dd9      	adds	r1, r3, #7
 80141d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80141d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80141dc:	3102      	adds	r1, #2
 80141de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80141e2:	441a      	add	r2, r3
 80141e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80141e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80141ec:	601a      	str	r2, [r3, #0]
 80141ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80141f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80141f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80141fa:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80141fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014206:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801420a:	ea4f 3373 	mov.w	r3, r3, ror #13
 801420e:	405a      	eors	r2, r3
 8014210:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014218:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801421c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014220:	405a      	eors	r2, r3
 8014222:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801422a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 801422e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014236:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801423a:	4019      	ands	r1, r3
 801423c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014244:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8014248:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801424c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014250:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8014254:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801425c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8014260:	4323      	orrs	r3, r4
 8014262:	4003      	ands	r3, r0
 8014264:	430b      	orrs	r3, r1
 8014266:	441a      	add	r2, r3
 8014268:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801426c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014270:	605a      	str	r2, [r3, #4]
 8014272:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801427a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 801427e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	441a      	add	r2, r3
 801428a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801428e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014292:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8014296:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801429a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801429e:	681a      	ldr	r2, [r3, #0]
 80142a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80142a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80142a8:	685b      	ldr	r3, [r3, #4]
 80142aa:	441a      	add	r2, r3
 80142ac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80142b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80142b4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    for (i = 0; i < 16; i += 8) {
 80142b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80142bc:	3308      	adds	r3, #8
 80142be:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80142c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80142c6:	2b0f      	cmp	r3, #15
 80142c8:	f67f aa2a 	bls.w	8013720 <mbedtls_internal_sha256_process+0xc4>
          local.A[6], local.A[7], local.A[0], local.W[i+7], K[i+7]);
    }

    for (i = 16; i < 64; i += 8) {
 80142cc:	2310      	movs	r3, #16
 80142ce:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80142d2:	f001 b939 	b.w	8015548 <mbedtls_internal_sha256_process+0x1eec>
 80142d6:	bf00      	nop
 80142d8:	0801ffa0 	.word	0x0801ffa0
        P(local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
 80142dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80142e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80142e4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 80142e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80142ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80142f0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80142f4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80142f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80142fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014300:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8014304:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014308:	4059      	eors	r1, r3
 801430a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801430e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014312:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8014316:	ea4f 6373 	mov.w	r3, r3, ror #25
 801431a:	404b      	eors	r3, r1
 801431c:	441a      	add	r2, r3
 801431e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014326:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 801432a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801432e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014332:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 8014336:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801433a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801433e:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 8014342:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801434a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801434e:	4063      	eors	r3, r4
 8014350:	4003      	ands	r3, r0
 8014352:	404b      	eors	r3, r1
 8014354:	441a      	add	r2, r3
 8014356:	49f9      	ldr	r1, [pc, #996]	; (801473c <mbedtls_internal_sha256_process+0x10e0>)
 8014358:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801435c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014360:	441a      	add	r2, r3
 8014362:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014366:	1e99      	subs	r1, r3, #2
 8014368:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801436c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014370:	3102      	adds	r1, #2
 8014372:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014376:	ea4f 4173 	mov.w	r1, r3, ror #17
 801437a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801437e:	1e98      	subs	r0, r3, #2
 8014380:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014388:	3002      	adds	r0, #2
 801438a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801438e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014392:	4059      	eors	r1, r3
 8014394:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014398:	1e98      	subs	r0, r3, #2
 801439a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801439e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80143a2:	3002      	adds	r0, #2
 80143a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80143a8:	0a9b      	lsrs	r3, r3, #10
 80143aa:	4059      	eors	r1, r3
 80143ac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80143b0:	1fd8      	subs	r0, r3, #7
 80143b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80143b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80143ba:	3002      	adds	r0, #2
 80143bc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80143c0:	4419      	add	r1, r3
 80143c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80143c6:	f1a3 000f 	sub.w	r0, r3, #15
 80143ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80143ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80143d2:	3002      	adds	r0, #2
 80143d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80143d8:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80143dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80143e0:	f1a3 040f 	sub.w	r4, r3, #15
 80143e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80143e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80143ec:	3402      	adds	r4, #2
 80143ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80143f2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80143f6:	4058      	eors	r0, r3
 80143f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80143fc:	f1a3 040f 	sub.w	r4, r3, #15
 8014400:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014408:	3402      	adds	r4, #2
 801440a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801440e:	08db      	lsrs	r3, r3, #3
 8014410:	4043      	eors	r3, r0
 8014412:	4419      	add	r1, r3
 8014414:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014418:	f1a3 0010 	sub.w	r0, r3, #16
 801441c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014424:	3002      	adds	r0, #2
 8014426:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801442a:	18c8      	adds	r0, r1, r3
 801442c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014434:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8014438:	3102      	adds	r1, #2
 801443a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 801443e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014446:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 801444a:	3102      	adds	r1, #2
 801444c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014450:	441a      	add	r2, r3
 8014452:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801445a:	601a      	str	r2, [r3, #0]
 801445c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014464:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8014468:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801446c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014474:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8014478:	ea4f 3373 	mov.w	r3, r3, ror #13
 801447c:	405a      	eors	r2, r3
 801447e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014486:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801448a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801448e:	405a      	eors	r2, r3
 8014490:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014498:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 801449c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80144a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80144a4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80144a8:	4019      	ands	r1, r3
 80144aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80144ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80144b2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
 80144b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80144ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80144be:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 80144c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80144c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80144ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80144ce:	4323      	orrs	r3, r4
 80144d0:	4003      	ands	r3, r0
 80144d2:	430b      	orrs	r3, r1
 80144d4:	441a      	add	r2, r3
 80144d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80144da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80144de:	605a      	str	r2, [r3, #4]
 80144e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80144e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80144e8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80144ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80144f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	441a      	add	r2, r3
 80144f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80144fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014500:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8014504:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801450c:	681a      	ldr	r2, [r3, #0]
 801450e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014516:	685b      	ldr	r3, [r3, #4]
 8014518:	441a      	add	r2, r3
 801451a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801451e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014522:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
          local.A[5], local.A[6], local.A[7], R(i+0), K[i+0]);
        P(local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
 8014526:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801452a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801452e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8014532:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801453a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801453e:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014542:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801454a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801454e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014552:	4059      	eors	r1, r3
 8014554:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801455c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8014560:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014564:	404b      	eors	r3, r1
 8014566:	441a      	add	r2, r3
 8014568:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801456c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014570:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 8014574:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014578:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801457c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8014580:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014588:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 801458c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014594:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014598:	4063      	eors	r3, r4
 801459a:	4003      	ands	r3, r0
 801459c:	404b      	eors	r3, r1
 801459e:	441a      	add	r2, r3
 80145a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80145a4:	3301      	adds	r3, #1
 80145a6:	4965      	ldr	r1, [pc, #404]	; (801473c <mbedtls_internal_sha256_process+0x10e0>)
 80145a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80145ac:	441a      	add	r2, r3
 80145ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80145b2:	1e59      	subs	r1, r3, #1
 80145b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80145b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80145bc:	3102      	adds	r1, #2
 80145be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80145c2:	ea4f 4173 	mov.w	r1, r3, ror #17
 80145c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80145ca:	1e58      	subs	r0, r3, #1
 80145cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80145d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80145d4:	3002      	adds	r0, #2
 80145d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80145da:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80145de:	4059      	eors	r1, r3
 80145e0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80145e4:	1e58      	subs	r0, r3, #1
 80145e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80145ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80145ee:	3002      	adds	r0, #2
 80145f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80145f4:	0a9b      	lsrs	r3, r3, #10
 80145f6:	4059      	eors	r1, r3
 80145f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80145fc:	1f98      	subs	r0, r3, #6
 80145fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014606:	3002      	adds	r0, #2
 8014608:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801460c:	4419      	add	r1, r3
 801460e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014612:	f1a3 000e 	sub.w	r0, r3, #14
 8014616:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801461a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801461e:	3002      	adds	r0, #2
 8014620:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014624:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014628:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801462c:	f1a3 040e 	sub.w	r4, r3, #14
 8014630:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014638:	3402      	adds	r4, #2
 801463a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801463e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014642:	4058      	eors	r0, r3
 8014644:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014648:	f1a3 040e 	sub.w	r4, r3, #14
 801464c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014654:	3402      	adds	r4, #2
 8014656:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801465a:	08db      	lsrs	r3, r3, #3
 801465c:	4043      	eors	r3, r0
 801465e:	18c8      	adds	r0, r1, r3
 8014660:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014664:	f1a3 010f 	sub.w	r1, r3, #15
 8014668:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801466c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014670:	3102      	adds	r1, #2
 8014672:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014676:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801467a:	3301      	adds	r3, #1
 801467c:	1844      	adds	r4, r0, r1
 801467e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8014682:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 8014686:	1c98      	adds	r0, r3, #2
 8014688:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
 801468c:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8014690:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 8014694:	3302      	adds	r3, #2
 8014696:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801469a:	441a      	add	r2, r3
 801469c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80146a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80146a4:	601a      	str	r2, [r3, #0]
 80146a6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80146aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80146ae:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80146b2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80146b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80146ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80146be:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80146c2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80146c6:	405a      	eors	r2, r3
 80146c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80146cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80146d0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80146d4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80146d8:	405a      	eors	r2, r3
 80146da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80146de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80146e2:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 80146e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80146ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80146ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80146f2:	4019      	ands	r1, r3
 80146f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80146f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80146fc:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8014700:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014708:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 801470c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014714:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8014718:	4323      	orrs	r3, r4
 801471a:	4003      	ands	r3, r0
 801471c:	430b      	orrs	r3, r1
 801471e:	441a      	add	r2, r3
 8014720:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014728:	605a      	str	r2, [r3, #4]
 801472a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801472e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014732:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8014736:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801473a:	e001      	b.n	8014740 <mbedtls_internal_sha256_process+0x10e4>
 801473c:	0801ffa0 	.word	0x0801ffa0
 8014740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	441a      	add	r2, r3
 8014748:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801474c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014750:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8014754:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801475c:	681a      	ldr	r2, [r3, #0]
 801475e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014766:	685b      	ldr	r3, [r3, #4]
 8014768:	441a      	add	r2, r3
 801476a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801476e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014772:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
          local.A[4], local.A[5], local.A[6], R(i+1), K[i+1]);
        P(local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
 8014776:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801477a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801477e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8014782:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801478a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801478e:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014792:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801479a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801479e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80147a2:	4059      	eors	r1, r3
 80147a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80147a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80147ac:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80147b0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80147b4:	404b      	eors	r3, r1
 80147b6:	441a      	add	r2, r3
 80147b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80147bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80147c0:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 80147c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80147c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80147cc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
 80147d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80147d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80147d8:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
 80147dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80147e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80147e4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80147e8:	4063      	eors	r3, r4
 80147ea:	4003      	ands	r3, r0
 80147ec:	404b      	eors	r3, r1
 80147ee:	441a      	add	r2, r3
 80147f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80147f4:	3302      	adds	r3, #2
 80147f6:	49f9      	ldr	r1, [pc, #996]	; (8014bdc <mbedtls_internal_sha256_process+0x1580>)
 80147f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80147fc:	441a      	add	r2, r3
 80147fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014806:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 801480a:	3102      	adds	r1, #2
 801480c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014810:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014814:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801481c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8014820:	3002      	adds	r0, #2
 8014822:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014826:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801482a:	4059      	eors	r1, r3
 801482c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014834:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8014838:	3002      	adds	r0, #2
 801483a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801483e:	0a9b      	lsrs	r3, r3, #10
 8014840:	4059      	eors	r1, r3
 8014842:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014846:	1f58      	subs	r0, r3, #5
 8014848:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801484c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014850:	3002      	adds	r0, #2
 8014852:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014856:	4419      	add	r1, r3
 8014858:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801485c:	f1a3 000d 	sub.w	r0, r3, #13
 8014860:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014868:	3002      	adds	r0, #2
 801486a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801486e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014872:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014876:	f1a3 040d 	sub.w	r4, r3, #13
 801487a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801487e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014882:	3402      	adds	r4, #2
 8014884:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014888:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801488c:	4058      	eors	r0, r3
 801488e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014892:	f1a3 040d 	sub.w	r4, r3, #13
 8014896:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801489a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801489e:	3402      	adds	r4, #2
 80148a0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80148a4:	08db      	lsrs	r3, r3, #3
 80148a6:	4043      	eors	r3, r0
 80148a8:	18c8      	adds	r0, r1, r3
 80148aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80148ae:	f1a3 010e 	sub.w	r1, r3, #14
 80148b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80148b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80148ba:	3102      	adds	r1, #2
 80148bc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80148c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80148c4:	3302      	adds	r3, #2
 80148c6:	1844      	adds	r4, r0, r1
 80148c8:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80148cc:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 80148d0:	1c98      	adds	r0, r3, #2
 80148d2:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
 80148d6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80148da:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 80148de:	3302      	adds	r3, #2
 80148e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80148e4:	441a      	add	r2, r3
 80148e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80148ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80148ee:	601a      	str	r2, [r3, #0]
 80148f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80148f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80148f8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80148fc:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014900:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014908:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801490c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014910:	405a      	eors	r2, r3
 8014912:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801491a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801491e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014922:	405a      	eors	r2, r3
 8014924:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801492c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 8014930:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014938:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 801493c:	4019      	ands	r1, r3
 801493e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014946:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801494a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801494e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014952:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8014956:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801495a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801495e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8014962:	4323      	orrs	r3, r4
 8014964:	4003      	ands	r3, r0
 8014966:	430b      	orrs	r3, r1
 8014968:	441a      	add	r2, r3
 801496a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801496e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014972:	605a      	str	r2, [r3, #4]
 8014974:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801497c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8014980:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	441a      	add	r2, r3
 801498c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014994:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8014998:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801499c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80149a0:	681a      	ldr	r2, [r3, #0]
 80149a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80149a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80149aa:	685b      	ldr	r3, [r3, #4]
 80149ac:	441a      	add	r2, r3
 80149ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80149b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80149b6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          local.A[3], local.A[4], local.A[5], R(i+2), K[i+2]);
        P(local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
 80149ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80149be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80149c2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80149c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80149ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80149ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80149d2:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80149d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80149da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80149de:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80149e2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80149e6:	4059      	eors	r1, r3
 80149e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80149ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80149f0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80149f4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80149f8:	404b      	eors	r3, r1
 80149fa:	441a      	add	r2, r3
 80149fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014a04:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 8014a08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014a10:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8014a14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014a1c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 8014a20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014a28:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8014a2c:	4063      	eors	r3, r4
 8014a2e:	4003      	ands	r3, r0
 8014a30:	404b      	eors	r3, r1
 8014a32:	441a      	add	r2, r3
 8014a34:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014a38:	3303      	adds	r3, #3
 8014a3a:	4968      	ldr	r1, [pc, #416]	; (8014bdc <mbedtls_internal_sha256_process+0x1580>)
 8014a3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014a40:	441a      	add	r2, r3
 8014a42:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014a46:	1c59      	adds	r1, r3, #1
 8014a48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014a50:	3102      	adds	r1, #2
 8014a52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014a56:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014a5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014a5e:	1c58      	adds	r0, r3, #1
 8014a60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014a68:	3002      	adds	r0, #2
 8014a6a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014a6e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014a72:	4059      	eors	r1, r3
 8014a74:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014a78:	1c58      	adds	r0, r3, #1
 8014a7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014a82:	3002      	adds	r0, #2
 8014a84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014a88:	0a9b      	lsrs	r3, r3, #10
 8014a8a:	4059      	eors	r1, r3
 8014a8c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014a90:	1f18      	subs	r0, r3, #4
 8014a92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014a9a:	3002      	adds	r0, #2
 8014a9c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014aa0:	4419      	add	r1, r3
 8014aa2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014aa6:	f1a3 000c 	sub.w	r0, r3, #12
 8014aaa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014ab2:	3002      	adds	r0, #2
 8014ab4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014ab8:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014abc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014ac0:	f1a3 040c 	sub.w	r4, r3, #12
 8014ac4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014acc:	3402      	adds	r4, #2
 8014ace:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014ad2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014ad6:	4058      	eors	r0, r3
 8014ad8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014adc:	f1a3 040c 	sub.w	r4, r3, #12
 8014ae0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014ae8:	3402      	adds	r4, #2
 8014aea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014aee:	08db      	lsrs	r3, r3, #3
 8014af0:	4043      	eors	r3, r0
 8014af2:	18c8      	adds	r0, r1, r3
 8014af4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014af8:	f1a3 010d 	sub.w	r1, r3, #13
 8014afc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014b04:	3102      	adds	r1, #2
 8014b06:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014b0a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014b0e:	3303      	adds	r3, #3
 8014b10:	1844      	adds	r4, r0, r1
 8014b12:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8014b16:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 8014b1a:	1c98      	adds	r0, r3, #2
 8014b1c:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
 8014b20:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8014b24:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 8014b28:	3302      	adds	r3, #2
 8014b2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014b2e:	441a      	add	r2, r3
 8014b30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014b38:	601a      	str	r2, [r3, #0]
 8014b3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014b42:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014b46:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014b4a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014b52:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014b56:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014b5a:	405a      	eors	r2, r3
 8014b5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014b64:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014b68:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014b6c:	405a      	eors	r2, r3
 8014b6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014b76:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 8014b7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014b82:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8014b86:	4019      	ands	r1, r3
 8014b88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014b90:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
 8014b94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014b9c:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 8014ba0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014ba4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014ba8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8014bac:	4323      	orrs	r3, r4
 8014bae:	4003      	ands	r3, r0
 8014bb0:	430b      	orrs	r3, r1
 8014bb2:	441a      	add	r2, r3
 8014bb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014bbc:	605a      	str	r2, [r3, #4]
 8014bbe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014bc6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8014bca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	441a      	add	r2, r3
 8014bd6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014bda:	e001      	b.n	8014be0 <mbedtls_internal_sha256_process+0x1584>
 8014bdc:	0801ffa0 	.word	0x0801ffa0
 8014be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014be4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8014be8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014bec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014bf0:	681a      	ldr	r2, [r3, #0]
 8014bf2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014bfa:	685b      	ldr	r3, [r3, #4]
 8014bfc:	441a      	add	r2, r3
 8014bfe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014c06:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          local.A[2], local.A[3], local.A[4], R(i+3), K[i+3]);
        P(local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
 8014c0a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014c12:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8014c16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014c1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8014c22:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014c26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014c2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8014c32:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014c36:	4059      	eors	r1, r3
 8014c38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014c40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8014c44:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014c48:	404b      	eors	r3, r1
 8014c4a:	441a      	add	r2, r3
 8014c4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014c54:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8014c58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014c60:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8014c64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014c6c:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8014c70:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014c78:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8014c7c:	4063      	eors	r3, r4
 8014c7e:	4003      	ands	r3, r0
 8014c80:	404b      	eors	r3, r1
 8014c82:	441a      	add	r2, r3
 8014c84:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014c88:	3304      	adds	r3, #4
 8014c8a:	49f9      	ldr	r1, [pc, #996]	; (8015070 <mbedtls_internal_sha256_process+0x1a14>)
 8014c8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014c90:	441a      	add	r2, r3
 8014c92:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014c96:	1c99      	adds	r1, r3, #2
 8014c98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014ca0:	3102      	adds	r1, #2
 8014ca2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014ca6:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014caa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014cae:	1c98      	adds	r0, r3, #2
 8014cb0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014cb8:	3002      	adds	r0, #2
 8014cba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014cbe:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014cc2:	4059      	eors	r1, r3
 8014cc4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014cc8:	1c98      	adds	r0, r3, #2
 8014cca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014cd2:	3002      	adds	r0, #2
 8014cd4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014cd8:	0a9b      	lsrs	r3, r3, #10
 8014cda:	4059      	eors	r1, r3
 8014cdc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014ce0:	1ed8      	subs	r0, r3, #3
 8014ce2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014cea:	3002      	adds	r0, #2
 8014cec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014cf0:	4419      	add	r1, r3
 8014cf2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014cf6:	f1a3 000b 	sub.w	r0, r3, #11
 8014cfa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014d02:	3002      	adds	r0, #2
 8014d04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014d08:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014d0c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014d10:	f1a3 040b 	sub.w	r4, r3, #11
 8014d14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014d1c:	3402      	adds	r4, #2
 8014d1e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014d22:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014d26:	4058      	eors	r0, r3
 8014d28:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014d2c:	f1a3 040b 	sub.w	r4, r3, #11
 8014d30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014d38:	3402      	adds	r4, #2
 8014d3a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014d3e:	08db      	lsrs	r3, r3, #3
 8014d40:	4043      	eors	r3, r0
 8014d42:	18c8      	adds	r0, r1, r3
 8014d44:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014d48:	f1a3 010c 	sub.w	r1, r3, #12
 8014d4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014d54:	3102      	adds	r1, #2
 8014d56:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014d5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014d5e:	3304      	adds	r3, #4
 8014d60:	1844      	adds	r4, r0, r1
 8014d62:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8014d66:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 8014d6a:	1c98      	adds	r0, r3, #2
 8014d6c:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
 8014d70:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8014d74:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 8014d78:	3302      	adds	r3, #2
 8014d7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014d7e:	441a      	add	r2, r3
 8014d80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014d88:	601a      	str	r2, [r3, #0]
 8014d8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014d92:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8014d96:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014d9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014da2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8014da6:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014daa:	405a      	eors	r2, r3
 8014dac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014db0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014db4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8014db8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014dbc:	405a      	eors	r2, r3
 8014dbe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014dc6:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8014dca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014dd2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014dd6:	4019      	ands	r1, r3
 8014dd8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014de0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
 8014de4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014dec:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8014df0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014df8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014dfc:	4323      	orrs	r3, r4
 8014dfe:	4003      	ands	r3, r0
 8014e00:	430b      	orrs	r3, r1
 8014e02:	441a      	add	r2, r3
 8014e04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014e08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014e0c:	605a      	str	r2, [r3, #4]
 8014e0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014e16:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8014e1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	441a      	add	r2, r3
 8014e26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014e2e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8014e32:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014e3a:	681a      	ldr	r2, [r3, #0]
 8014e3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014e44:	685b      	ldr	r3, [r3, #4]
 8014e46:	441a      	add	r2, r3
 8014e48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014e50:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          local.A[1], local.A[2], local.A[3], R(i+4), K[i+4]);
        P(local.A[3], local.A[4], local.A[5], local.A[6], local.A[7],
 8014e54:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014e5c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8014e60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014e68:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8014e6c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014e70:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014e78:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8014e7c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014e80:	4059      	eors	r1, r3
 8014e82:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014e8a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8014e8e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014e92:	404b      	eors	r3, r1
 8014e94:	441a      	add	r2, r3
 8014e96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014e9e:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8014ea2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014eaa:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
 8014eae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014eb6:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 8014eba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014ec2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8014ec6:	4063      	eors	r3, r4
 8014ec8:	4003      	ands	r3, r0
 8014eca:	404b      	eors	r3, r1
 8014ecc:	441a      	add	r2, r3
 8014ece:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014ed2:	3305      	adds	r3, #5
 8014ed4:	4966      	ldr	r1, [pc, #408]	; (8015070 <mbedtls_internal_sha256_process+0x1a14>)
 8014ed6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014eda:	441a      	add	r2, r3
 8014edc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014ee0:	1cd9      	adds	r1, r3, #3
 8014ee2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014eea:	3102      	adds	r1, #2
 8014eec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014ef0:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014ef4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014ef8:	1cd8      	adds	r0, r3, #3
 8014efa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014f02:	3002      	adds	r0, #2
 8014f04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014f08:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014f0c:	4059      	eors	r1, r3
 8014f0e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014f12:	1cd8      	adds	r0, r3, #3
 8014f14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014f1c:	3002      	adds	r0, #2
 8014f1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014f22:	0a9b      	lsrs	r3, r3, #10
 8014f24:	4059      	eors	r1, r3
 8014f26:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014f2a:	1e98      	subs	r0, r3, #2
 8014f2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014f34:	3002      	adds	r0, #2
 8014f36:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014f3a:	4419      	add	r1, r3
 8014f3c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014f40:	f1a3 000a 	sub.w	r0, r3, #10
 8014f44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014f4c:	3002      	adds	r0, #2
 8014f4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014f52:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014f56:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014f5a:	f1a3 040a 	sub.w	r4, r3, #10
 8014f5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014f66:	3402      	adds	r4, #2
 8014f68:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014f6c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014f70:	4058      	eors	r0, r3
 8014f72:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014f76:	f1a3 040a 	sub.w	r4, r3, #10
 8014f7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014f82:	3402      	adds	r4, #2
 8014f84:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014f88:	08db      	lsrs	r3, r3, #3
 8014f8a:	4043      	eors	r3, r0
 8014f8c:	18c8      	adds	r0, r1, r3
 8014f8e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014f92:	f1a3 010b 	sub.w	r1, r3, #11
 8014f96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014f9e:	3102      	adds	r1, #2
 8014fa0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014fa4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014fa8:	3305      	adds	r3, #5
 8014faa:	1844      	adds	r4, r0, r1
 8014fac:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8014fb0:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 8014fb4:	1c98      	adds	r0, r3, #2
 8014fb6:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
 8014fba:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8014fbe:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 8014fc2:	3302      	adds	r3, #2
 8014fc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014fc8:	441a      	add	r2, r3
 8014fca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014fd2:	601a      	str	r2, [r3, #0]
 8014fd4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014fdc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8014fe0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014fe4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014fec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8014ff0:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014ff4:	405a      	eors	r2, r3
 8014ff6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014ffe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8015002:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8015006:	405a      	eors	r2, r3
 8015008:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801500c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015010:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 8015014:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801501c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8015020:	4019      	ands	r1, r3
 8015022:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801502a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
 801502e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015036:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
 801503a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801503e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015042:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8015046:	4323      	orrs	r3, r4
 8015048:	4003      	ands	r3, r0
 801504a:	430b      	orrs	r3, r1
 801504c:	441a      	add	r2, r3
 801504e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015056:	605a      	str	r2, [r3, #4]
 8015058:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801505c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015060:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8015064:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	e001      	b.n	8015074 <mbedtls_internal_sha256_process+0x1a18>
 8015070:	0801ffa0 	.word	0x0801ffa0
 8015074:	441a      	add	r2, r3
 8015076:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801507a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801507e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8015082:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801508a:	681a      	ldr	r2, [r3, #0]
 801508c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015094:	685b      	ldr	r3, [r3, #4]
 8015096:	441a      	add	r2, r3
 8015098:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801509c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80150a0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          local.A[0], local.A[1], local.A[2], R(i+5), K[i+5]);
        P(local.A[2], local.A[3], local.A[4], local.A[5], local.A[6],
 80150a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80150a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80150ac:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80150b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80150b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80150b8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80150bc:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80150c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80150c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80150c8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80150cc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80150d0:	4059      	eors	r1, r3
 80150d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80150d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80150da:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80150de:	ea4f 6373 	mov.w	r3, r3, ror #25
 80150e2:	404b      	eors	r3, r1
 80150e4:	441a      	add	r2, r3
 80150e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80150ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80150ee:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80150f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80150f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80150fa:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
 80150fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015106:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 801510a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801510e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015112:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8015116:	4063      	eors	r3, r4
 8015118:	4003      	ands	r3, r0
 801511a:	404b      	eors	r3, r1
 801511c:	441a      	add	r2, r3
 801511e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015122:	3306      	adds	r3, #6
 8015124:	49f9      	ldr	r1, [pc, #996]	; (801550c <mbedtls_internal_sha256_process+0x1eb0>)
 8015126:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801512a:	441a      	add	r2, r3
 801512c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015130:	1d19      	adds	r1, r3, #4
 8015132:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801513a:	3102      	adds	r1, #2
 801513c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015140:	ea4f 4173 	mov.w	r1, r3, ror #17
 8015144:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015148:	1d18      	adds	r0, r3, #4
 801514a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801514e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015152:	3002      	adds	r0, #2
 8015154:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015158:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801515c:	4059      	eors	r1, r3
 801515e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015162:	1d18      	adds	r0, r3, #4
 8015164:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801516c:	3002      	adds	r0, #2
 801516e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015172:	0a9b      	lsrs	r3, r3, #10
 8015174:	4059      	eors	r1, r3
 8015176:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801517a:	1e58      	subs	r0, r3, #1
 801517c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015184:	3002      	adds	r0, #2
 8015186:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801518a:	4419      	add	r1, r3
 801518c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015190:	f1a3 0009 	sub.w	r0, r3, #9
 8015194:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015198:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801519c:	3002      	adds	r0, #2
 801519e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80151a2:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80151a6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80151aa:	f1a3 0409 	sub.w	r4, r3, #9
 80151ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80151b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80151b6:	3402      	adds	r4, #2
 80151b8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80151bc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80151c0:	4058      	eors	r0, r3
 80151c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80151c6:	f1a3 0409 	sub.w	r4, r3, #9
 80151ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80151ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80151d2:	3402      	adds	r4, #2
 80151d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80151d8:	08db      	lsrs	r3, r3, #3
 80151da:	4043      	eors	r3, r0
 80151dc:	18c8      	adds	r0, r1, r3
 80151de:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80151e2:	f1a3 010a 	sub.w	r1, r3, #10
 80151e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80151ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80151ee:	3102      	adds	r1, #2
 80151f0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80151f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80151f8:	3306      	adds	r3, #6
 80151fa:	1844      	adds	r4, r0, r1
 80151fc:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8015200:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 8015204:	1c98      	adds	r0, r3, #2
 8015206:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
 801520a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 801520e:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 8015212:	3302      	adds	r3, #2
 8015214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015218:	441a      	add	r2, r3
 801521a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801521e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015222:	601a      	str	r2, [r3, #0]
 8015224:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801522c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8015230:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8015234:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801523c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8015240:	ea4f 3373 	mov.w	r3, r3, ror #13
 8015244:	405a      	eors	r2, r3
 8015246:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801524a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801524e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8015252:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8015256:	405a      	eors	r2, r3
 8015258:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801525c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015260:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8015264:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801526c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8015270:	4019      	ands	r1, r3
 8015272:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801527a:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 801527e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015286:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 801528a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801528e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015292:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8015296:	4323      	orrs	r3, r4
 8015298:	4003      	ands	r3, r0
 801529a:	430b      	orrs	r3, r1
 801529c:	441a      	add	r2, r3
 801529e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80152a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80152a6:	605a      	str	r2, [r3, #4]
 80152a8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80152ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80152b0:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80152b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80152b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	441a      	add	r2, r3
 80152c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80152c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80152c8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 80152cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80152d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80152d4:	681a      	ldr	r2, [r3, #0]
 80152d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80152da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80152de:	685b      	ldr	r3, [r3, #4]
 80152e0:	441a      	add	r2, r3
 80152e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80152e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80152ea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
          local.A[7], local.A[0], local.A[1], R(i+6), K[i+6]);
        P(local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
 80152ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80152f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80152f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80152fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80152fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015302:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8015306:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801530a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801530e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015312:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8015316:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801531a:	4059      	eors	r1, r3
 801531c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015324:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8015328:	ea4f 6373 	mov.w	r3, r3, ror #25
 801532c:	404b      	eors	r3, r1
 801532e:	441a      	add	r2, r3
 8015330:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015338:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 801533c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015344:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
 8015348:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801534c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015350:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8015354:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801535c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8015360:	4063      	eors	r3, r4
 8015362:	4003      	ands	r3, r0
 8015364:	404b      	eors	r3, r1
 8015366:	441a      	add	r2, r3
 8015368:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801536c:	3307      	adds	r3, #7
 801536e:	4967      	ldr	r1, [pc, #412]	; (801550c <mbedtls_internal_sha256_process+0x1eb0>)
 8015370:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015374:	441a      	add	r2, r3
 8015376:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801537a:	1d59      	adds	r1, r3, #5
 801537c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015384:	3102      	adds	r1, #2
 8015386:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801538a:	ea4f 4173 	mov.w	r1, r3, ror #17
 801538e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015392:	1d58      	adds	r0, r3, #5
 8015394:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801539c:	3002      	adds	r0, #2
 801539e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80153a2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80153a6:	4059      	eors	r1, r3
 80153a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80153ac:	1d58      	adds	r0, r3, #5
 80153ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80153b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80153b6:	3002      	adds	r0, #2
 80153b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80153bc:	0a9b      	lsrs	r3, r3, #10
 80153be:	4059      	eors	r1, r3
 80153c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80153c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80153c8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80153cc:	3002      	adds	r0, #2
 80153ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80153d2:	4419      	add	r1, r3
 80153d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80153d8:	f1a3 0008 	sub.w	r0, r3, #8
 80153dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80153e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80153e4:	3002      	adds	r0, #2
 80153e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80153ea:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80153ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80153f2:	f1a3 0408 	sub.w	r4, r3, #8
 80153f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80153fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80153fe:	3402      	adds	r4, #2
 8015400:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015404:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8015408:	4058      	eors	r0, r3
 801540a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801540e:	f1a3 0408 	sub.w	r4, r3, #8
 8015412:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801541a:	3402      	adds	r4, #2
 801541c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015420:	08db      	lsrs	r3, r3, #3
 8015422:	4043      	eors	r3, r0
 8015424:	18c8      	adds	r0, r1, r3
 8015426:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801542a:	f1a3 0109 	sub.w	r1, r3, #9
 801542e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015436:	3102      	adds	r1, #2
 8015438:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801543c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015440:	3307      	adds	r3, #7
 8015442:	1844      	adds	r4, r0, r1
 8015444:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8015448:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 801544c:	1c98      	adds	r0, r3, #2
 801544e:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
 8015452:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8015456:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 801545a:	3302      	adds	r3, #2
 801545c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015460:	441a      	add	r2, r3
 8015462:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801546a:	601a      	str	r2, [r3, #0]
 801546c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015474:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8015478:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801547c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015484:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8015488:	ea4f 3373 	mov.w	r3, r3, ror #13
 801548c:	405a      	eors	r2, r3
 801548e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015496:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801549a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801549e:	405a      	eors	r2, r3
 80154a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80154a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80154a8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80154ac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80154b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80154b4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80154b8:	4019      	ands	r1, r3
 80154ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80154be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80154c2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80154c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80154ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80154ce:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 80154d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80154d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80154da:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80154de:	4323      	orrs	r3, r4
 80154e0:	4003      	ands	r3, r0
 80154e2:	430b      	orrs	r3, r1
 80154e4:	441a      	add	r2, r3
 80154e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80154ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80154ee:	605a      	str	r2, [r3, #4]
 80154f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80154f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80154f8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80154fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	441a      	add	r2, r3
 8015508:	e002      	b.n	8015510 <mbedtls_internal_sha256_process+0x1eb4>
 801550a:	bf00      	nop
 801550c:	0801ffa0 	.word	0x0801ffa0
 8015510:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015518:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 801551c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015524:	681a      	ldr	r2, [r3, #0]
 8015526:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801552a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801552e:	685b      	ldr	r3, [r3, #4]
 8015530:	441a      	add	r2, r3
 8015532:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801553a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    for (i = 16; i < 64; i += 8) {
 801553e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015542:	3308      	adds	r3, #8
 8015544:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8015548:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801554c:	2b3f      	cmp	r3, #63	; 0x3f
 801554e:	f67e aec5 	bls.w	80142dc <mbedtls_internal_sha256_process+0xc80>
          local.A[6], local.A[7], local.A[0], R(i+7), K[i+7]);
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for (i = 0; i < 8; i++) {
 8015552:	2300      	movs	r3, #0
 8015554:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8015558:	e022      	b.n	80155a0 <mbedtls_internal_sha256_process+0x1f44>
        ctx->state[i] += local.A[i];
 801555a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801555e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8015568:	3212      	adds	r2, #18
 801556a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801556e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015576:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 801557a:	3142      	adds	r1, #66	; 0x42
 801557c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015580:	18d1      	adds	r1, r2, r3
 8015582:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8015586:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8015590:	3212      	adds	r2, #18
 8015592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 8; i++) {
 8015596:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801559a:	3301      	adds	r3, #1
 801559c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80155a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80155a4:	2b07      	cmp	r3, #7
 80155a6:	d9d8      	bls.n	801555a <mbedtls_internal_sha256_process+0x1efe>
    }

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize(&local, sizeof(local));
 80155a8:	f107 0310 	add.w	r3, r7, #16
 80155ac:	f44f 7194 	mov.w	r1, #296	; 0x128
 80155b0:	4618      	mov	r0, r3
 80155b2:	f7f9 f9bb 	bl	800e92c <mbedtls_platform_zeroize>

    return 0;
 80155b6:	2300      	movs	r3, #0
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd90      	pop	{r4, r7, pc}
 80155c2:	bf00      	nop

080155c4 <mbedtls_internal_sha256_process_many>:

#if !defined(MBEDTLS_SHA256_USE_ARMV8_A_CRYPTO_ONLY)

static size_t mbedtls_internal_sha256_process_many_c(
    mbedtls_sha256_context *ctx, const uint8_t *data, size_t len)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b086      	sub	sp, #24
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	60f8      	str	r0, [r7, #12]
 80155cc:	60b9      	str	r1, [r7, #8]
 80155ce:	607a      	str	r2, [r7, #4]
    size_t processed = 0;
 80155d0:	2300      	movs	r3, #0
 80155d2:	617b      	str	r3, [r7, #20]

    while (len >= SHA256_BLOCK_SIZE) {
 80155d4:	e011      	b.n	80155fa <mbedtls_internal_sha256_process_many+0x36>
        if (mbedtls_internal_sha256_process_c(ctx, data) != 0) {
 80155d6:	68b9      	ldr	r1, [r7, #8]
 80155d8:	68f8      	ldr	r0, [r7, #12]
 80155da:	f7fe f83f 	bl	801365c <mbedtls_internal_sha256_process>
 80155de:	4603      	mov	r3, r0
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d001      	beq.n	80155e8 <mbedtls_internal_sha256_process_many+0x24>
            return 0;
 80155e4:	2300      	movs	r3, #0
 80155e6:	e00c      	b.n	8015602 <mbedtls_internal_sha256_process_many+0x3e>
        }

        data += SHA256_BLOCK_SIZE;
 80155e8:	68bb      	ldr	r3, [r7, #8]
 80155ea:	3340      	adds	r3, #64	; 0x40
 80155ec:	60bb      	str	r3, [r7, #8]
        len  -= SHA256_BLOCK_SIZE;
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	3b40      	subs	r3, #64	; 0x40
 80155f2:	607b      	str	r3, [r7, #4]

        processed += SHA256_BLOCK_SIZE;
 80155f4:	697b      	ldr	r3, [r7, #20]
 80155f6:	3340      	adds	r3, #64	; 0x40
 80155f8:	617b      	str	r3, [r7, #20]
    while (len >= SHA256_BLOCK_SIZE) {
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	2b3f      	cmp	r3, #63	; 0x3f
 80155fe:	d8ea      	bhi.n	80155d6 <mbedtls_internal_sha256_process_many+0x12>
    }

    return processed;
 8015600:	697b      	ldr	r3, [r7, #20]
}
 8015602:	4618      	mov	r0, r3
 8015604:	3718      	adds	r7, #24
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}

0801560a <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update(mbedtls_sha256_context *ctx,
                          const unsigned char *input,
                          size_t ilen)
{
 801560a:	b580      	push	{r7, lr}
 801560c:	b088      	sub	sp, #32
 801560e:	af00      	add	r7, sp, #0
 8015610:	60f8      	str	r0, [r7, #12]
 8015612:	60b9      	str	r1, [r7, #8]
 8015614:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8015616:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801561a:	61bb      	str	r3, [r7, #24]
    size_t fill;
    uint32_t left;

    if (ilen == 0) {
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d101      	bne.n	8015626 <mbedtls_sha256_update+0x1c>
        return 0;
 8015622:	2300      	movs	r3, #0
 8015624:	e064      	b.n	80156f0 <mbedtls_sha256_update+0xe6>
    }

    left = ctx->total[0] & 0x3F;
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801562a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801562e:	61fb      	str	r3, [r7, #28]
    fill = SHA256_BLOCK_SIZE - left;
 8015630:	69fb      	ldr	r3, [r7, #28]
 8015632:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8015636:	617b      	str	r3, [r7, #20]

    ctx->total[0] += (uint32_t) ilen;
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	441a      	add	r2, r3
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	641a      	str	r2, [r3, #64]	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	641a      	str	r2, [r3, #64]	; 0x40

    if (ctx->total[0] < (uint32_t) ilen) {
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015650:	687a      	ldr	r2, [r7, #4]
 8015652:	429a      	cmp	r2, r3
 8015654:	d904      	bls.n	8015660 <mbedtls_sha256_update+0x56>
        ctx->total[1]++;
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801565a:	1c5a      	adds	r2, r3, #1
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    if (left && ilen >= fill) {
 8015660:	69fb      	ldr	r3, [r7, #28]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d035      	beq.n	80156d2 <mbedtls_sha256_update+0xc8>
 8015666:	687a      	ldr	r2, [r7, #4]
 8015668:	697b      	ldr	r3, [r7, #20]
 801566a:	429a      	cmp	r2, r3
 801566c:	d331      	bcc.n	80156d2 <mbedtls_sha256_update+0xc8>
        memcpy((void *) (ctx->buffer + left), input, fill);
 801566e:	68fa      	ldr	r2, [r7, #12]
 8015670:	69fb      	ldr	r3, [r7, #28]
 8015672:	4413      	add	r3, r2
 8015674:	697a      	ldr	r2, [r7, #20]
 8015676:	68b9      	ldr	r1, [r7, #8]
 8015678:	4618      	mov	r0, r3
 801567a:	f007 fe3d 	bl	801d2f8 <memcpy>

        if ((ret = mbedtls_internal_sha256_process(ctx, ctx->buffer)) != 0) {
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	4619      	mov	r1, r3
 8015682:	68f8      	ldr	r0, [r7, #12]
 8015684:	f7fd ffea 	bl	801365c <mbedtls_internal_sha256_process>
 8015688:	61b8      	str	r0, [r7, #24]
 801568a:	69bb      	ldr	r3, [r7, #24]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d001      	beq.n	8015694 <mbedtls_sha256_update+0x8a>
            return ret;
 8015690:	69bb      	ldr	r3, [r7, #24]
 8015692:	e02d      	b.n	80156f0 <mbedtls_sha256_update+0xe6>
        }

        input += fill;
 8015694:	68ba      	ldr	r2, [r7, #8]
 8015696:	697b      	ldr	r3, [r7, #20]
 8015698:	4413      	add	r3, r2
 801569a:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 801569c:	687a      	ldr	r2, [r7, #4]
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	1ad3      	subs	r3, r2, r3
 80156a2:	607b      	str	r3, [r7, #4]
        left = 0;
 80156a4:	2300      	movs	r3, #0
 80156a6:	61fb      	str	r3, [r7, #28]
    }

    while (ilen >= SHA256_BLOCK_SIZE) {
 80156a8:	e013      	b.n	80156d2 <mbedtls_sha256_update+0xc8>
        size_t processed =
            mbedtls_internal_sha256_process_many(ctx, input, ilen);
 80156aa:	687a      	ldr	r2, [r7, #4]
 80156ac:	68b9      	ldr	r1, [r7, #8]
 80156ae:	68f8      	ldr	r0, [r7, #12]
 80156b0:	f7ff ff88 	bl	80155c4 <mbedtls_internal_sha256_process_many>
 80156b4:	6138      	str	r0, [r7, #16]
        if (processed < SHA256_BLOCK_SIZE) {
 80156b6:	693b      	ldr	r3, [r7, #16]
 80156b8:	2b3f      	cmp	r3, #63	; 0x3f
 80156ba:	d802      	bhi.n	80156c2 <mbedtls_sha256_update+0xb8>
            return MBEDTLS_ERR_ERROR_GENERIC_ERROR;
 80156bc:	f04f 33ff 	mov.w	r3, #4294967295
 80156c0:	e016      	b.n	80156f0 <mbedtls_sha256_update+0xe6>
        }

        input += processed;
 80156c2:	68ba      	ldr	r2, [r7, #8]
 80156c4:	693b      	ldr	r3, [r7, #16]
 80156c6:	4413      	add	r3, r2
 80156c8:	60bb      	str	r3, [r7, #8]
        ilen  -= processed;
 80156ca:	687a      	ldr	r2, [r7, #4]
 80156cc:	693b      	ldr	r3, [r7, #16]
 80156ce:	1ad3      	subs	r3, r2, r3
 80156d0:	607b      	str	r3, [r7, #4]
    while (ilen >= SHA256_BLOCK_SIZE) {
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	2b3f      	cmp	r3, #63	; 0x3f
 80156d6:	d8e8      	bhi.n	80156aa <mbedtls_sha256_update+0xa0>
    }

    if (ilen > 0) {
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d007      	beq.n	80156ee <mbedtls_sha256_update+0xe4>
        memcpy((void *) (ctx->buffer + left), input, ilen);
 80156de:	68fa      	ldr	r2, [r7, #12]
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	4413      	add	r3, r2
 80156e4:	687a      	ldr	r2, [r7, #4]
 80156e6:	68b9      	ldr	r1, [r7, #8]
 80156e8:	4618      	mov	r0, r3
 80156ea:	f007 fe05 	bl	801d2f8 <memcpy>
    }

    return 0;
 80156ee:	2300      	movs	r3, #0
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	3720      	adds	r7, #32
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}

080156f8 <mbedtls_sha256_finish>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish(mbedtls_sha256_context *ctx,
                          unsigned char *output)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b09c      	sub	sp, #112	; 0x70
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8015702:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8015706:	667b      	str	r3, [r7, #100]	; 0x64
    uint32_t used;
    uint32_t high, low;
    int truncated = 0;
 8015708:	2300      	movs	r3, #0
 801570a:	65fb      	str	r3, [r7, #92]	; 0x5c

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015714:	663b      	str	r3, [r7, #96]	; 0x60

    ctx->buffer[used++] = 0x80;
 8015716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015718:	1c5a      	adds	r2, r3, #1
 801571a:	663a      	str	r2, [r7, #96]	; 0x60
 801571c:	687a      	ldr	r2, [r7, #4]
 801571e:	2180      	movs	r1, #128	; 0x80
 8015720:	54d1      	strb	r1, [r2, r3]

    if (used <= 56) {
 8015722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015724:	2b38      	cmp	r3, #56	; 0x38
 8015726:	d80a      	bhi.n	801573e <mbedtls_sha256_finish+0x46>
        /* Enough room for padding + length in current block */
        memset(ctx->buffer + used, 0, 56 - used);
 8015728:	687a      	ldr	r2, [r7, #4]
 801572a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801572c:	18d0      	adds	r0, r2, r3
 801572e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015730:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8015734:	461a      	mov	r2, r3
 8015736:	2100      	movs	r1, #0
 8015738:	f007 fd40 	bl	801d1bc <memset>
 801573c:	e019      	b.n	8015772 <mbedtls_sha256_finish+0x7a>
    } else {
        /* We'll need an extra block */
        memset(ctx->buffer + used, 0, SHA256_BLOCK_SIZE - used);
 801573e:	687a      	ldr	r2, [r7, #4]
 8015740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015742:	18d0      	adds	r0, r2, r3
 8015744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015746:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801574a:	461a      	mov	r2, r3
 801574c:	2100      	movs	r1, #0
 801574e:	f007 fd35 	bl	801d1bc <memset>

        if ((ret = mbedtls_internal_sha256_process(ctx, ctx->buffer)) != 0) {
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	4619      	mov	r1, r3
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	f7fd ff80 	bl	801365c <mbedtls_internal_sha256_process>
 801575c:	6678      	str	r0, [r7, #100]	; 0x64
 801575e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015760:	2b00      	cmp	r3, #0
 8015762:	f040 8097 	bne.w	8015894 <mbedtls_sha256_finish+0x19c>
            goto exit;
        }

        memset(ctx->buffer, 0, 56);
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2238      	movs	r2, #56	; 0x38
 801576a:	2100      	movs	r1, #0
 801576c:	4618      	mov	r0, r3
 801576e:	f007 fd25 	bl	801d1bc <memset>
    }

    /*
     * Add message length
     */
    high = (ctx->total[0] >> 29)
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015776:	0f5a      	lsrs	r2, r3, #29
           | (ctx->total[1] <<  3);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801577c:	00db      	lsls	r3, r3, #3
    high = (ctx->total[0] >> 29)
 801577e:	4313      	orrs	r3, r2
 8015780:	66bb      	str	r3, [r7, #104]	; 0x68
    low  = (ctx->total[0] <<  3);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015786:	00db      	lsls	r3, r3, #3
 8015788:	66fb      	str	r3, [r7, #108]	; 0x6c

    MBEDTLS_PUT_UINT32_BE(high, ctx->buffer, 56);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015792:	ba1b      	rev	r3, r3
 8015794:	65ba      	str	r2, [r7, #88]	; 0x58
 8015796:	60fb      	str	r3, [r7, #12]
 8015798:	68fa      	ldr	r2, [r7, #12]
    memcpy(p, &x, sizeof(x));
 801579a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801579c:	601a      	str	r2, [r3, #0]
}
 801579e:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(low,  ctx->buffer, 60);
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80157a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80157a8:	ba1b      	rev	r3, r3
 80157aa:	657a      	str	r2, [r7, #84]	; 0x54
 80157ac:	613b      	str	r3, [r7, #16]
 80157ae:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 80157b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157b2:	601a      	str	r2, [r3, #0]
}
 80157b4:	bf00      	nop

    if ((ret = mbedtls_internal_sha256_process(ctx, ctx->buffer)) != 0) {
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	4619      	mov	r1, r3
 80157ba:	6878      	ldr	r0, [r7, #4]
 80157bc:	f7fd ff4e 	bl	801365c <mbedtls_internal_sha256_process>
 80157c0:	6678      	str	r0, [r7, #100]	; 0x64
 80157c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d167      	bne.n	8015898 <mbedtls_sha256_finish+0x1a0>
    }

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_BE(ctx->state[0], output,  0);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80157cc:	ba1b      	rev	r3, r3
 80157ce:	683a      	ldr	r2, [r7, #0]
 80157d0:	653a      	str	r2, [r7, #80]	; 0x50
 80157d2:	617b      	str	r3, [r7, #20]
 80157d4:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 80157d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157d8:	601a      	str	r2, [r3, #0]
}
 80157da:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[1], output,  4);
 80157dc:	683b      	ldr	r3, [r7, #0]
 80157de:	1d1a      	adds	r2, r3, #4
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80157e4:	ba1b      	rev	r3, r3
 80157e6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80157e8:	61bb      	str	r3, [r7, #24]
 80157ea:	69ba      	ldr	r2, [r7, #24]
    memcpy(p, &x, sizeof(x));
 80157ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157ee:	601a      	str	r2, [r3, #0]
}
 80157f0:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[2], output,  8);
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	f103 0208 	add.w	r2, r3, #8
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157fc:	ba1b      	rev	r3, r3
 80157fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8015800:	61fb      	str	r3, [r7, #28]
 8015802:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 8015804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015806:	601a      	str	r2, [r3, #0]
}
 8015808:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[3], output, 12);
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	f103 020c 	add.w	r2, r3, #12
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015814:	ba1b      	rev	r3, r3
 8015816:	647a      	str	r2, [r7, #68]	; 0x44
 8015818:	623b      	str	r3, [r7, #32]
 801581a:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 801581c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801581e:	601a      	str	r2, [r3, #0]
}
 8015820:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[4], output, 16);
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	f103 0210 	add.w	r2, r3, #16
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801582c:	ba1b      	rev	r3, r3
 801582e:	643a      	str	r2, [r7, #64]	; 0x40
 8015830:	627b      	str	r3, [r7, #36]	; 0x24
 8015832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 8015834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015836:	601a      	str	r2, [r3, #0]
}
 8015838:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[5], output, 20);
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	f103 0214 	add.w	r2, r3, #20
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015844:	ba1b      	rev	r3, r3
 8015846:	63fa      	str	r2, [r7, #60]	; 0x3c
 8015848:	62bb      	str	r3, [r7, #40]	; 0x28
 801584a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 801584c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801584e:	601a      	str	r2, [r3, #0]
}
 8015850:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[6], output, 24);
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	f103 0218 	add.w	r2, r3, #24
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801585c:	ba1b      	rev	r3, r3
 801585e:	63ba      	str	r2, [r7, #56]	; 0x38
 8015860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    memcpy(p, &x, sizeof(x));
 8015864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015866:	601a      	str	r2, [r3, #0]
}
 8015868:	bf00      	nop

#if defined(MBEDTLS_SHA224_C)
    truncated = ctx->is224;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801586e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif
    if (!truncated) {
 8015870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015872:	2b00      	cmp	r3, #0
 8015874:	d10b      	bne.n	801588e <mbedtls_sha256_finish+0x196>
        MBEDTLS_PUT_UINT32_BE(ctx->state[7], output, 28);
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	f103 021c 	add.w	r2, r3, #28
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015880:	ba1b      	rev	r3, r3
 8015882:	637a      	str	r2, [r7, #52]	; 0x34
 8015884:	633b      	str	r3, [r7, #48]	; 0x30
 8015886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    memcpy(p, &x, sizeof(x));
 8015888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801588a:	601a      	str	r2, [r3, #0]
}
 801588c:	bf00      	nop
    }

    ret = 0;
 801588e:	2300      	movs	r3, #0
 8015890:	667b      	str	r3, [r7, #100]	; 0x64
 8015892:	e002      	b.n	801589a <mbedtls_sha256_finish+0x1a2>
            goto exit;
 8015894:	bf00      	nop
 8015896:	e000      	b.n	801589a <mbedtls_sha256_finish+0x1a2>
        goto exit;
 8015898:	bf00      	nop

exit:
    mbedtls_sha256_free(ctx);
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f7fd fe5c 	bl	8013558 <mbedtls_sha256_free>
    return ret;
 80158a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	3770      	adds	r7, #112	; 0x70
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bd80      	pop	{r7, pc}

080158aa <mbedtls_sha256>:
 */
int mbedtls_sha256(const unsigned char *input,
                   size_t ilen,
                   unsigned char *output,
                   int is224)
{
 80158aa:	b580      	push	{r7, lr}
 80158ac:	b0a0      	sub	sp, #128	; 0x80
 80158ae:	af00      	add	r7, sp, #0
 80158b0:	60f8      	str	r0, [r7, #12]
 80158b2:	60b9      	str	r1, [r7, #8]
 80158b4:	607a      	str	r2, [r7, #4]
 80158b6:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80158b8:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80158bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    mbedtls_sha256_context ctx;

#if defined(MBEDTLS_SHA224_C) && defined(MBEDTLS_SHA256_C)
    if (is224 != 0 && is224 != 1) {
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d005      	beq.n	80158d0 <mbedtls_sha256+0x26>
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	2b01      	cmp	r3, #1
 80158c8:	d002      	beq.n	80158d0 <mbedtls_sha256+0x26>
        return MBEDTLS_ERR_SHA256_BAD_INPUT_DATA;
 80158ca:	f06f 0373 	mvn.w	r3, #115	; 0x73
 80158ce:	e02c      	b.n	801592a <mbedtls_sha256+0x80>
    if (is224 == 0) {
        return MBEDTLS_ERR_SHA256_BAD_INPUT_DATA;
    }
#endif

    mbedtls_sha256_init(&ctx);
 80158d0:	f107 0310 	add.w	r3, r7, #16
 80158d4:	4618      	mov	r0, r3
 80158d6:	f7fd fe32 	bl	801353e <mbedtls_sha256_init>

    if ((ret = mbedtls_sha256_starts(&ctx, is224)) != 0) {
 80158da:	f107 0310 	add.w	r3, r7, #16
 80158de:	6839      	ldr	r1, [r7, #0]
 80158e0:	4618      	mov	r0, r3
 80158e2:	f7fd fe49 	bl	8013578 <mbedtls_sha256_starts>
 80158e6:	67f8      	str	r0, [r7, #124]	; 0x7c
 80158e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d114      	bne.n	8015918 <mbedtls_sha256+0x6e>
        goto exit;
    }

    if ((ret = mbedtls_sha256_update(&ctx, input, ilen)) != 0) {
 80158ee:	f107 0310 	add.w	r3, r7, #16
 80158f2:	68ba      	ldr	r2, [r7, #8]
 80158f4:	68f9      	ldr	r1, [r7, #12]
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7ff fe87 	bl	801560a <mbedtls_sha256_update>
 80158fc:	67f8      	str	r0, [r7, #124]	; 0x7c
 80158fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015900:	2b00      	cmp	r3, #0
 8015902:	d10b      	bne.n	801591c <mbedtls_sha256+0x72>
        goto exit;
    }

    if ((ret = mbedtls_sha256_finish(&ctx, output)) != 0) {
 8015904:	f107 0310 	add.w	r3, r7, #16
 8015908:	6879      	ldr	r1, [r7, #4]
 801590a:	4618      	mov	r0, r3
 801590c:	f7ff fef4 	bl	80156f8 <mbedtls_sha256_finish>
 8015910:	67f8      	str	r0, [r7, #124]	; 0x7c
 8015912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015914:	2b00      	cmp	r3, #0
        goto exit;
    }

exit:
 8015916:	e002      	b.n	801591e <mbedtls_sha256+0x74>
        goto exit;
 8015918:	bf00      	nop
 801591a:	e000      	b.n	801591e <mbedtls_sha256+0x74>
        goto exit;
 801591c:	bf00      	nop
    mbedtls_sha256_free(&ctx);
 801591e:	f107 0310 	add.w	r3, r7, #16
 8015922:	4618      	mov	r0, r3
 8015924:	f7fd fe18 	bl	8013558 <mbedtls_sha256_free>

    return ret;
 8015928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 801592a:	4618      	mov	r0, r3
 801592c:	3780      	adds	r7, #128	; 0x80
 801592e:	46bd      	mov	sp, r7
 8015930:	bd80      	pop	{r7, pc}
	...

08015934 <keccak_f1600>:
#define SQUEEZE(ctx, idx) ((uint8_t) (ctx->state[(idx) >> 3] >> (((idx) & 0x7) << 3)))
#define SWAP(x, y) do { uint64_t tmp = (x); (x) = (y); (y) = tmp; } while (0)

/* The permutation function.  */
static void keccak_f1600(mbedtls_sha3_context *ctx)
{
 8015934:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015938:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
 801593c:	af00      	add	r7, sp, #0
 801593e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8015942:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8015946:	6018      	str	r0, [r3, #0]
    uint64_t lane[5];
    uint64_t *s = ctx->state;
 8015948:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801594c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
    int i;

    for (int round = 0; round < 24; round++) {
 8015956:	2300      	movs	r3, #0
 8015958:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 801595c:	f001 bcae 	b.w	80172bc <keccak_f1600+0x1988>
        uint64_t t;

        /* Theta */
#if MBEDTLS_SHA3_THETA_UNROLL == 0 //no-check-names
        for (i = 0; i < 5; i++) {
 8015960:	2300      	movs	r3, #0
 8015962:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8015966:	e061      	b.n	8015a2c <keccak_f1600+0xf8>
            lane[i] = s[i] ^ s[i + 5] ^ s[i + 10] ^ s[i + 15] ^ s[i + 20];
 8015968:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 801596c:	00da      	lsls	r2, r3, #3
 801596e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015972:	4413      	add	r3, r2
 8015974:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015978:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 801597c:	3305      	adds	r3, #5
 801597e:	00da      	lsls	r2, r3, #3
 8015980:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015984:	4413      	add	r3, r2
 8015986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801598a:	ea80 0402 	eor.w	r4, r0, r2
 801598e:	f8c7 4318 	str.w	r4, [r7, #792]	; 0x318
 8015992:	404b      	eors	r3, r1
 8015994:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8015998:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 801599c:	330a      	adds	r3, #10
 801599e:	00da      	lsls	r2, r3, #3
 80159a0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80159a4:	4413      	add	r3, r2
 80159a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159aa:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	; 0x318
 80159ae:	4621      	mov	r1, r4
 80159b0:	4051      	eors	r1, r2
 80159b2:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 80159b6:	4629      	mov	r1, r5
 80159b8:	404b      	eors	r3, r1
 80159ba:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 80159be:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80159c2:	330f      	adds	r3, #15
 80159c4:	00da      	lsls	r2, r3, #3
 80159c6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80159ca:	4413      	add	r3, r2
 80159cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159d0:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	; 0x310
 80159d4:	4621      	mov	r1, r4
 80159d6:	4051      	eors	r1, r2
 80159d8:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 80159dc:	4629      	mov	r1, r5
 80159de:	404b      	eors	r3, r1
 80159e0:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 80159e4:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80159e8:	3314      	adds	r3, #20
 80159ea:	00da      	lsls	r2, r3, #3
 80159ec:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80159f0:	4413      	add	r3, r2
 80159f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f6:	e9d7 45c2 	ldrd	r4, r5, [r7, #776]	; 0x308
 80159fa:	4621      	mov	r1, r4
 80159fc:	4051      	eors	r1, r2
 80159fe:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
 8015a02:	4629      	mov	r1, r5
 8015a04:	404b      	eors	r3, r1
 8015a06:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8015a0a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8015a0e:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015a12:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015a16:	00db      	lsls	r3, r3, #3
 8015a18:	4413      	add	r3, r2
 8015a1a:	e9d7 12c0 	ldrd	r1, r2, [r7, #768]	; 0x300
 8015a1e:	e9c3 1200 	strd	r1, r2, [r3]
        for (i = 0; i < 5; i++) {
 8015a22:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015a26:	3301      	adds	r3, #1
 8015a28:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8015a2c:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015a30:	2b04      	cmp	r3, #4
 8015a32:	dd99      	ble.n	8015968 <keccak_f1600+0x34>
        }
        for (i = 0; i < 5; i++) {
 8015a34:	2300      	movs	r3, #0
 8015a36:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8015a3a:	e0df      	b.n	8015bfc <keccak_f1600+0x2c8>
            t = lane[(i + 4) % 5] ^ ROTR64(lane[(i + 1) % 5], 63);
 8015a3c:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015a40:	1d19      	adds	r1, r3, #4
 8015a42:	4b73      	ldr	r3, [pc, #460]	; (8015c10 <keccak_f1600+0x2dc>)
 8015a44:	fb83 2301 	smull	r2, r3, r3, r1
 8015a48:	105a      	asrs	r2, r3, #1
 8015a4a:	17cb      	asrs	r3, r1, #31
 8015a4c:	1ad2      	subs	r2, r2, r3
 8015a4e:	4613      	mov	r3, r2
 8015a50:	009b      	lsls	r3, r3, #2
 8015a52:	4413      	add	r3, r2
 8015a54:	1aca      	subs	r2, r1, r3
 8015a56:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8015a5a:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8015a5e:	00d3      	lsls	r3, r2, #3
 8015a60:	440b      	add	r3, r1
 8015a62:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015a66:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015a6a:	1c59      	adds	r1, r3, #1
 8015a6c:	4b68      	ldr	r3, [pc, #416]	; (8015c10 <keccak_f1600+0x2dc>)
 8015a6e:	fb83 2301 	smull	r2, r3, r3, r1
 8015a72:	105a      	asrs	r2, r3, #1
 8015a74:	17cb      	asrs	r3, r1, #31
 8015a76:	1ad2      	subs	r2, r2, r3
 8015a78:	4613      	mov	r3, r2
 8015a7a:	009b      	lsls	r3, r3, #2
 8015a7c:	4413      	add	r3, r2
 8015a7e:	1aca      	subs	r2, r1, r3
 8015a80:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8015a84:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8015a88:	00d3      	lsls	r3, r2, #3
 8015a8a:	440b      	add	r3, r1
 8015a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a90:	0fd0      	lsrs	r0, r2, #31
 8015a92:	0059      	lsls	r1, r3, #1
 8015a94:	4301      	orrs	r1, r0
 8015a96:	f8c7 12fc 	str.w	r1, [r7, #764]	; 0x2fc
 8015a9a:	0fd9      	lsrs	r1, r3, #31
 8015a9c:	0053      	lsls	r3, r2, #1
 8015a9e:	430b      	orrs	r3, r1
 8015aa0:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8015aa4:	e9d7 12be 	ldrd	r1, r2, [r7, #760]	; 0x2f8
 8015aa8:	460b      	mov	r3, r1
 8015aaa:	4063      	eors	r3, r4
 8015aac:	603b      	str	r3, [r7, #0]
 8015aae:	4613      	mov	r3, r2
 8015ab0:	406b      	eors	r3, r5
 8015ab2:	607b      	str	r3, [r7, #4]
 8015ab4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015ab8:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8015abc:	e9c2 3400 	strd	r3, r4, [r2]
            s[i] ^= t; s[i + 5] ^= t; s[i + 10] ^= t; s[i + 15] ^= t; s[i + 20] ^= t;
 8015ac0:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015ac4:	00da      	lsls	r2, r3, #3
 8015ac6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015aca:	4413      	add	r3, r2
 8015acc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015ad0:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015ad4:	00da      	lsls	r2, r3, #3
 8015ad6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015ada:	189c      	adds	r4, r3, r2
 8015adc:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8015ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae4:	ea80 0502 	eor.w	r5, r0, r2
 8015ae8:	f8c7 52f0 	str.w	r5, [r7, #752]	; 0x2f0
 8015aec:	404b      	eors	r3, r1
 8015aee:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8015af2:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8015af6:	e9c4 2300 	strd	r2, r3, [r4]
 8015afa:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015afe:	3305      	adds	r3, #5
 8015b00:	00da      	lsls	r2, r3, #3
 8015b02:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015b06:	4413      	add	r3, r2
 8015b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015b0c:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015b10:	3305      	adds	r3, #5
 8015b12:	00da      	lsls	r2, r3, #3
 8015b14:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015b18:	189c      	adds	r4, r3, r2
 8015b1a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8015b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b22:	ea80 0502 	eor.w	r5, r0, r2
 8015b26:	f8c7 52e8 	str.w	r5, [r7, #744]	; 0x2e8
 8015b2a:	404b      	eors	r3, r1
 8015b2c:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8015b30:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8015b34:	e9c4 2300 	strd	r2, r3, [r4]
 8015b38:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015b3c:	330a      	adds	r3, #10
 8015b3e:	00da      	lsls	r2, r3, #3
 8015b40:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015b44:	4413      	add	r3, r2
 8015b46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015b4a:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015b4e:	330a      	adds	r3, #10
 8015b50:	00da      	lsls	r2, r3, #3
 8015b52:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015b56:	189c      	adds	r4, r3, r2
 8015b58:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8015b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b60:	ea80 0502 	eor.w	r5, r0, r2
 8015b64:	f8c7 52e0 	str.w	r5, [r7, #736]	; 0x2e0
 8015b68:	404b      	eors	r3, r1
 8015b6a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8015b6e:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8015b72:	e9c4 2300 	strd	r2, r3, [r4]
 8015b76:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015b7a:	330f      	adds	r3, #15
 8015b7c:	00da      	lsls	r2, r3, #3
 8015b7e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015b82:	4413      	add	r3, r2
 8015b84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015b88:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015b8c:	330f      	adds	r3, #15
 8015b8e:	00da      	lsls	r2, r3, #3
 8015b90:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015b94:	189c      	adds	r4, r3, r2
 8015b96:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8015b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b9e:	ea80 0502 	eor.w	r5, r0, r2
 8015ba2:	f8c7 52d8 	str.w	r5, [r7, #728]	; 0x2d8
 8015ba6:	404b      	eors	r3, r1
 8015ba8:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8015bac:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8015bb0:	e9c4 2300 	strd	r2, r3, [r4]
 8015bb4:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015bb8:	3314      	adds	r3, #20
 8015bba:	00da      	lsls	r2, r3, #3
 8015bbc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015bc0:	4413      	add	r3, r2
 8015bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015bc6:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015bca:	3314      	adds	r3, #20
 8015bcc:	00da      	lsls	r2, r3, #3
 8015bce:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015bd2:	189c      	adds	r4, r3, r2
 8015bd4:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8015bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bdc:	ea80 0502 	eor.w	r5, r0, r2
 8015be0:	f8c7 52d0 	str.w	r5, [r7, #720]	; 0x2d0
 8015be4:	404b      	eors	r3, r1
 8015be6:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8015bea:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8015bee:	e9c4 2300 	strd	r2, r3, [r4]
        for (i = 0; i < 5; i++) {
 8015bf2:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8015bfc:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015c00:	2b04      	cmp	r3, #4
 8015c02:	f77f af1b 	ble.w	8015a3c <keccak_f1600+0x108>
        t = lane[3] ^ ROTR64(lane[0], 63);
        s[4] ^= t; s[9] ^= t; s[14] ^= t; s[19] ^= t; s[24] ^= t;
#endif

        /* Rho */
        for (i = 1; i < 25; i += 4) {
 8015c06:	2301      	movs	r3, #1
 8015c08:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8015c0c:	e199      	b.n	8015f42 <keccak_f1600+0x60e>
 8015c0e:	bf00      	nop
 8015c10:	66666667 	.word	0x66666667
            uint32_t r = rho[(i - 1) >> 2];
 8015c14:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015c18:	3b01      	subs	r3, #1
 8015c1a:	109a      	asrs	r2, r3, #2
 8015c1c:	4bf6      	ldr	r3, [pc, #984]	; (8015ff8 <keccak_f1600+0x6c4>)
 8015c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c22:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
                uint8_t r8 = (uint8_t) (r >> 24);
                r <<= 8;
                s[j] = ROTR64(s[j], r8);
            }
#else
            s[i + 0] = ROTR64(s[i + 0], MBEDTLS_BYTE_3(r));
 8015c26:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015c2a:	00da      	lsls	r2, r3, #3
 8015c2c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015c30:	4413      	add	r3, r2
 8015c32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c36:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8015c3a:	0e1b      	lsrs	r3, r3, #24
 8015c3c:	b2db      	uxtb	r3, r3
 8015c3e:	f1c3 0440 	rsb	r4, r3, #64	; 0x40
 8015c42:	f1a4 0320 	sub.w	r3, r4, #32
 8015c46:	f1c4 0220 	rsb	r2, r4, #32
 8015c4a:	fa01 f504 	lsl.w	r5, r1, r4
 8015c4e:	f8c7 5364 	str.w	r5, [r7, #868]	; 0x364
 8015c52:	fa00 f303 	lsl.w	r3, r0, r3
 8015c56:	f8d7 5364 	ldr.w	r5, [r7, #868]	; 0x364
 8015c5a:	431d      	orrs	r5, r3
 8015c5c:	f8c7 5364 	str.w	r5, [r7, #868]	; 0x364
 8015c60:	fa20 f202 	lsr.w	r2, r0, r2
 8015c64:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8015c68:	4313      	orrs	r3, r2
 8015c6a:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8015c6e:	fa00 f304 	lsl.w	r3, r0, r4
 8015c72:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8015c76:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015c7a:	00da      	lsls	r2, r3, #3
 8015c7c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015c80:	4413      	add	r3, r2
 8015c82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c86:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8015c8a:	0e1b      	lsrs	r3, r3, #24
 8015c8c:	b2db      	uxtb	r3, r3
 8015c8e:	461c      	mov	r4, r3
 8015c90:	f1c4 0320 	rsb	r3, r4, #32
 8015c94:	f1a4 0220 	sub.w	r2, r4, #32
 8015c98:	fa20 f504 	lsr.w	r5, r0, r4
 8015c9c:	f8c7 5348 	str.w	r5, [r7, #840]	; 0x348
 8015ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8015ca4:	f8d7 5348 	ldr.w	r5, [r7, #840]	; 0x348
 8015ca8:	431d      	orrs	r5, r3
 8015caa:	f8c7 5348 	str.w	r5, [r7, #840]	; 0x348
 8015cae:	fa21 f202 	lsr.w	r2, r1, r2
 8015cb2:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8015cb6:	4313      	orrs	r3, r2
 8015cb8:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8015cbc:	fa21 f304 	lsr.w	r3, r1, r4
 8015cc0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8015cc4:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015cc8:	00da      	lsls	r2, r3, #3
 8015cca:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015cce:	4413      	add	r3, r2
 8015cd0:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8015cd4:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	; 0x348
 8015cd8:	4621      	mov	r1, r4
 8015cda:	430a      	orrs	r2, r1
 8015cdc:	f8c7 22c8 	str.w	r2, [r7, #712]	; 0x2c8
 8015ce0:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8015ce4:	4629      	mov	r1, r5
 8015ce6:	430a      	orrs	r2, r1
 8015ce8:	f8c7 22cc 	str.w	r2, [r7, #716]	; 0x2cc
 8015cec:	e9d7 12b2 	ldrd	r1, r2, [r7, #712]	; 0x2c8
 8015cf0:	e9c3 1200 	strd	r1, r2, [r3]
            s[i + 1] = ROTR64(s[i + 1], MBEDTLS_BYTE_2(r));
 8015cf4:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015cf8:	3301      	adds	r3, #1
 8015cfa:	00da      	lsls	r2, r3, #3
 8015cfc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015d00:	4413      	add	r3, r2
 8015d02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015d06:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8015d0a:	0c1b      	lsrs	r3, r3, #16
 8015d0c:	b2db      	uxtb	r3, r3
 8015d0e:	f1c3 0440 	rsb	r4, r3, #64	; 0x40
 8015d12:	f1a4 0320 	sub.w	r3, r4, #32
 8015d16:	f1c4 0220 	rsb	r2, r4, #32
 8015d1a:	fa01 f504 	lsl.w	r5, r1, r4
 8015d1e:	f8c7 535c 	str.w	r5, [r7, #860]	; 0x35c
 8015d22:	fa00 f303 	lsl.w	r3, r0, r3
 8015d26:	f8d7 535c 	ldr.w	r5, [r7, #860]	; 0x35c
 8015d2a:	431d      	orrs	r5, r3
 8015d2c:	f8c7 535c 	str.w	r5, [r7, #860]	; 0x35c
 8015d30:	fa20 f202 	lsr.w	r2, r0, r2
 8015d34:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8015d38:	4313      	orrs	r3, r2
 8015d3a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8015d3e:	fa00 f304 	lsl.w	r3, r0, r4
 8015d42:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8015d46:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	00da      	lsls	r2, r3, #3
 8015d4e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015d52:	4413      	add	r3, r2
 8015d54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015d58:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8015d5c:	0c1b      	lsrs	r3, r3, #16
 8015d5e:	b2db      	uxtb	r3, r3
 8015d60:	461c      	mov	r4, r3
 8015d62:	f1c4 0320 	rsb	r3, r4, #32
 8015d66:	f1a4 0220 	sub.w	r2, r4, #32
 8015d6a:	fa20 f504 	lsr.w	r5, r0, r4
 8015d6e:	f8c7 5340 	str.w	r5, [r7, #832]	; 0x340
 8015d72:	fa01 f303 	lsl.w	r3, r1, r3
 8015d76:	f8d7 5340 	ldr.w	r5, [r7, #832]	; 0x340
 8015d7a:	431d      	orrs	r5, r3
 8015d7c:	f8c7 5340 	str.w	r5, [r7, #832]	; 0x340
 8015d80:	fa21 f202 	lsr.w	r2, r1, r2
 8015d84:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8015d88:	4313      	orrs	r3, r2
 8015d8a:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8015d8e:	fa21 f304 	lsr.w	r3, r1, r4
 8015d92:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8015d96:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015d9a:	3301      	adds	r3, #1
 8015d9c:	00da      	lsls	r2, r3, #3
 8015d9e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015da2:	4413      	add	r3, r2
 8015da4:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8015da8:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 8015dac:	4621      	mov	r1, r4
 8015dae:	430a      	orrs	r2, r1
 8015db0:	f8c7 22c0 	str.w	r2, [r7, #704]	; 0x2c0
 8015db4:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8015db8:	4629      	mov	r1, r5
 8015dba:	430a      	orrs	r2, r1
 8015dbc:	f8c7 22c4 	str.w	r2, [r7, #708]	; 0x2c4
 8015dc0:	e9d7 12b0 	ldrd	r1, r2, [r7, #704]	; 0x2c0
 8015dc4:	e9c3 1200 	strd	r1, r2, [r3]
            s[i + 2] = ROTR64(s[i + 2], MBEDTLS_BYTE_1(r));
 8015dc8:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015dcc:	3302      	adds	r3, #2
 8015dce:	00da      	lsls	r2, r3, #3
 8015dd0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015dd4:	4413      	add	r3, r2
 8015dd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015dda:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8015dde:	0a1b      	lsrs	r3, r3, #8
 8015de0:	b2db      	uxtb	r3, r3
 8015de2:	f1c3 0440 	rsb	r4, r3, #64	; 0x40
 8015de6:	f1a4 0320 	sub.w	r3, r4, #32
 8015dea:	f1c4 0220 	rsb	r2, r4, #32
 8015dee:	fa01 f504 	lsl.w	r5, r1, r4
 8015df2:	f8c7 5354 	str.w	r5, [r7, #852]	; 0x354
 8015df6:	fa00 f303 	lsl.w	r3, r0, r3
 8015dfa:	f8d7 5354 	ldr.w	r5, [r7, #852]	; 0x354
 8015dfe:	431d      	orrs	r5, r3
 8015e00:	f8c7 5354 	str.w	r5, [r7, #852]	; 0x354
 8015e04:	fa20 f202 	lsr.w	r2, r0, r2
 8015e08:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8015e0c:	4313      	orrs	r3, r2
 8015e0e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8015e12:	fa00 f304 	lsl.w	r3, r0, r4
 8015e16:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8015e1a:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015e1e:	3302      	adds	r3, #2
 8015e20:	00da      	lsls	r2, r3, #3
 8015e22:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015e26:	4413      	add	r3, r2
 8015e28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015e2c:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8015e30:	0a1b      	lsrs	r3, r3, #8
 8015e32:	b2db      	uxtb	r3, r3
 8015e34:	461c      	mov	r4, r3
 8015e36:	f1c4 0320 	rsb	r3, r4, #32
 8015e3a:	f1a4 0220 	sub.w	r2, r4, #32
 8015e3e:	fa20 f504 	lsr.w	r5, r0, r4
 8015e42:	f8c7 5338 	str.w	r5, [r7, #824]	; 0x338
 8015e46:	fa01 f303 	lsl.w	r3, r1, r3
 8015e4a:	f8d7 5338 	ldr.w	r5, [r7, #824]	; 0x338
 8015e4e:	431d      	orrs	r5, r3
 8015e50:	f8c7 5338 	str.w	r5, [r7, #824]	; 0x338
 8015e54:	fa21 f202 	lsr.w	r2, r1, r2
 8015e58:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8015e5c:	4313      	orrs	r3, r2
 8015e5e:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8015e62:	fa21 f304 	lsr.w	r3, r1, r4
 8015e66:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8015e6a:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015e6e:	3302      	adds	r3, #2
 8015e70:	00da      	lsls	r2, r3, #3
 8015e72:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015e76:	4413      	add	r3, r2
 8015e78:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8015e7c:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 8015e80:	4621      	mov	r1, r4
 8015e82:	430a      	orrs	r2, r1
 8015e84:	f8c7 22b8 	str.w	r2, [r7, #696]	; 0x2b8
 8015e88:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8015e8c:	4629      	mov	r1, r5
 8015e8e:	430a      	orrs	r2, r1
 8015e90:	f8c7 22bc 	str.w	r2, [r7, #700]	; 0x2bc
 8015e94:	e9d7 12ae 	ldrd	r1, r2, [r7, #696]	; 0x2b8
 8015e98:	e9c3 1200 	strd	r1, r2, [r3]
            s[i + 3] = ROTR64(s[i + 3], MBEDTLS_BYTE_0(r));
 8015e9c:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015ea0:	3303      	adds	r3, #3
 8015ea2:	00da      	lsls	r2, r3, #3
 8015ea4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015ea8:	4413      	add	r3, r2
 8015eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eae:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8015eb2:	b2c9      	uxtb	r1, r1
 8015eb4:	f1c1 0440 	rsb	r4, r1, #64	; 0x40
 8015eb8:	f1a4 0120 	sub.w	r1, r4, #32
 8015ebc:	f1c4 0020 	rsb	r0, r4, #32
 8015ec0:	fa03 fb04 	lsl.w	fp, r3, r4
 8015ec4:	fa02 f101 	lsl.w	r1, r2, r1
 8015ec8:	ea4b 0b01 	orr.w	fp, fp, r1
 8015ecc:	fa22 f000 	lsr.w	r0, r2, r0
 8015ed0:	ea4b 0b00 	orr.w	fp, fp, r0
 8015ed4:	fa02 fa04 	lsl.w	sl, r2, r4
 8015ed8:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015edc:	3303      	adds	r3, #3
 8015ede:	00da      	lsls	r2, r3, #3
 8015ee0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015ee4:	4413      	add	r3, r2
 8015ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eea:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8015eee:	b2c9      	uxtb	r1, r1
 8015ef0:	460c      	mov	r4, r1
 8015ef2:	f1c4 0120 	rsb	r1, r4, #32
 8015ef6:	f1a4 0020 	sub.w	r0, r4, #32
 8015efa:	fa22 f804 	lsr.w	r8, r2, r4
 8015efe:	fa03 f101 	lsl.w	r1, r3, r1
 8015f02:	ea48 0801 	orr.w	r8, r8, r1
 8015f06:	fa23 f000 	lsr.w	r0, r3, r0
 8015f0a:	ea48 0800 	orr.w	r8, r8, r0
 8015f0e:	fa23 f904 	lsr.w	r9, r3, r4
 8015f12:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015f16:	3303      	adds	r3, #3
 8015f18:	00da      	lsls	r2, r3, #3
 8015f1a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015f1e:	4413      	add	r3, r2
 8015f20:	ea4a 0208 	orr.w	r2, sl, r8
 8015f24:	f8c7 22b0 	str.w	r2, [r7, #688]	; 0x2b0
 8015f28:	ea4b 0209 	orr.w	r2, fp, r9
 8015f2c:	f8c7 22b4 	str.w	r2, [r7, #692]	; 0x2b4
 8015f30:	e9d7 12ac 	ldrd	r1, r2, [r7, #688]	; 0x2b0
 8015f34:	e9c3 1200 	strd	r1, r2, [r3]
        for (i = 1; i < 25; i += 4) {
 8015f38:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015f3c:	3304      	adds	r3, #4
 8015f3e:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8015f42:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015f46:	2b18      	cmp	r3, #24
 8015f48:	f77f ae64 	ble.w	8015c14 <keccak_f1600+0x2e0>
#endif
        }

        /* Pi */
        t = s[1];
 8015f4c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015f50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015f54:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8015f58:	e9c1 2300 	strd	r2, r3, [r1]
                SWAP(s[p & 0xff], t);
                p >>= 8;
            }
        }
#else
        uint32_t p = pi[0];
 8015f5c:	4b27      	ldr	r3, [pc, #156]	; (8015ffc <keccak_f1600+0x6c8>)
 8015f5e:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
        SWAP(s[MBEDTLS_BYTE_0(p)], t); SWAP(s[MBEDTLS_BYTE_1(p)], t);
 8015f62:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8015f66:	b2db      	uxtb	r3, r3
 8015f68:	00da      	lsls	r2, r3, #3
 8015f6a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015f6e:	4413      	add	r3, r2
 8015f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f74:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8015f78:	e9c1 2300 	strd	r2, r3, [r1]
 8015f7c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8015f80:	b2db      	uxtb	r3, r3
 8015f82:	00da      	lsls	r2, r3, #3
 8015f84:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015f88:	1899      	adds	r1, r3, r2
 8015f8a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8015f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f92:	e9c1 2300 	strd	r2, r3, [r1]
 8015f96:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8015f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f9e:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8015fa2:	e9c1 2300 	strd	r2, r3, [r1]
 8015fa6:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8015faa:	0a1b      	lsrs	r3, r3, #8
 8015fac:	b2db      	uxtb	r3, r3
 8015fae:	00da      	lsls	r2, r3, #3
 8015fb0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015fb4:	4413      	add	r3, r2
 8015fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fba:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8015fbe:	e9c1 2300 	strd	r2, r3, [r1]
 8015fc2:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8015fc6:	0a1b      	lsrs	r3, r3, #8
 8015fc8:	b2db      	uxtb	r3, r3
 8015fca:	00da      	lsls	r2, r3, #3
 8015fcc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015fd0:	1899      	adds	r1, r3, r2
 8015fd2:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8015fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fda:	e9c1 2300 	strd	r2, r3, [r1]
 8015fde:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8015fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fe6:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8015fea:	e9c1 2300 	strd	r2, r3, [r1]
        SWAP(s[MBEDTLS_BYTE_2(p)], t); SWAP(s[MBEDTLS_BYTE_3(p)], t);
 8015fee:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8015ff2:	0c1b      	lsrs	r3, r3, #16
 8015ff4:	e004      	b.n	8016000 <keccak_f1600+0x6cc>
 8015ff6:	bf00      	nop
 8015ff8:	080200b8 	.word	0x080200b8
 8015ffc:	110b070a 	.word	0x110b070a
 8016000:	b2db      	uxtb	r3, r3
 8016002:	00da      	lsls	r2, r3, #3
 8016004:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016008:	4413      	add	r3, r2
 801600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801600e:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8016012:	e9c1 2300 	strd	r2, r3, [r1]
 8016016:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 801601a:	0c1b      	lsrs	r3, r3, #16
 801601c:	b2db      	uxtb	r3, r3
 801601e:	00da      	lsls	r2, r3, #3
 8016020:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016024:	1899      	adds	r1, r3, r2
 8016026:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801602e:	e9c1 2300 	strd	r2, r3, [r1]
 8016032:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8016036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801603a:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 801603e:	e9c1 2300 	strd	r2, r3, [r1]
 8016042:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016046:	0e1b      	lsrs	r3, r3, #24
 8016048:	b2db      	uxtb	r3, r3
 801604a:	00da      	lsls	r2, r3, #3
 801604c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016050:	4413      	add	r3, r2
 8016052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016056:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 801605a:	e9c1 2300 	strd	r2, r3, [r1]
 801605e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016062:	0e1b      	lsrs	r3, r3, #24
 8016064:	b2db      	uxtb	r3, r3
 8016066:	00da      	lsls	r2, r3, #3
 8016068:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801606c:	1899      	adds	r1, r3, r2
 801606e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8016072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016076:	e9c1 2300 	strd	r2, r3, [r1]
 801607a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 801607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016082:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8016086:	e9c1 2300 	strd	r2, r3, [r1]
        p = pi[1];
 801608a:	4bee      	ldr	r3, [pc, #952]	; (8016444 <keccak_f1600+0xb10>)
 801608c:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
        SWAP(s[MBEDTLS_BYTE_0(p)], t); SWAP(s[MBEDTLS_BYTE_1(p)], t);
 8016090:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016094:	b2db      	uxtb	r3, r3
 8016096:	00da      	lsls	r2, r3, #3
 8016098:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801609c:	4413      	add	r3, r2
 801609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160a2:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 80160a6:	e9c1 2300 	strd	r2, r3, [r1]
 80160aa:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80160ae:	b2db      	uxtb	r3, r3
 80160b0:	00da      	lsls	r2, r3, #3
 80160b2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80160b6:	1899      	adds	r1, r3, r2
 80160b8:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80160bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160c0:	e9c1 2300 	strd	r2, r3, [r1]
 80160c4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80160c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160cc:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80160d0:	e9c1 2300 	strd	r2, r3, [r1]
 80160d4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80160d8:	0a1b      	lsrs	r3, r3, #8
 80160da:	b2db      	uxtb	r3, r3
 80160dc:	00da      	lsls	r2, r3, #3
 80160de:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80160e2:	4413      	add	r3, r2
 80160e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160e8:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 80160ec:	e9c1 2300 	strd	r2, r3, [r1]
 80160f0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80160f4:	0a1b      	lsrs	r3, r3, #8
 80160f6:	b2db      	uxtb	r3, r3
 80160f8:	00da      	lsls	r2, r3, #3
 80160fa:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80160fe:	1899      	adds	r1, r3, r2
 8016100:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8016104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016108:	e9c1 2300 	strd	r2, r3, [r1]
 801610c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8016110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016114:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8016118:	e9c1 2300 	strd	r2, r3, [r1]
        SWAP(s[MBEDTLS_BYTE_2(p)], t); SWAP(s[MBEDTLS_BYTE_3(p)], t);
 801611c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016120:	0c1b      	lsrs	r3, r3, #16
 8016122:	b2db      	uxtb	r3, r3
 8016124:	00da      	lsls	r2, r3, #3
 8016126:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801612a:	4413      	add	r3, r2
 801612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016130:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8016134:	e9c1 2300 	strd	r2, r3, [r1]
 8016138:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 801613c:	0c1b      	lsrs	r3, r3, #16
 801613e:	b2db      	uxtb	r3, r3
 8016140:	00da      	lsls	r2, r3, #3
 8016142:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016146:	1899      	adds	r1, r3, r2
 8016148:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016150:	e9c1 2300 	strd	r2, r3, [r1]
 8016154:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8016158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801615c:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8016160:	e9c1 2300 	strd	r2, r3, [r1]
 8016164:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016168:	0e1b      	lsrs	r3, r3, #24
 801616a:	b2db      	uxtb	r3, r3
 801616c:	00da      	lsls	r2, r3, #3
 801616e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016172:	4413      	add	r3, r2
 8016174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016178:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 801617c:	e9c1 2300 	strd	r2, r3, [r1]
 8016180:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016184:	0e1b      	lsrs	r3, r3, #24
 8016186:	b2db      	uxtb	r3, r3
 8016188:	00da      	lsls	r2, r3, #3
 801618a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801618e:	1899      	adds	r1, r3, r2
 8016190:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8016194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016198:	e9c1 2300 	strd	r2, r3, [r1]
 801619c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80161a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161a4:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80161a8:	e9c1 2300 	strd	r2, r3, [r1]
        p = pi[2];
 80161ac:	4ba6      	ldr	r3, [pc, #664]	; (8016448 <keccak_f1600+0xb14>)
 80161ae:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
        SWAP(s[MBEDTLS_BYTE_0(p)], t); SWAP(s[MBEDTLS_BYTE_1(p)], t);
 80161b2:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80161b6:	b2db      	uxtb	r3, r3
 80161b8:	00da      	lsls	r2, r3, #3
 80161ba:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80161be:	4413      	add	r3, r2
 80161c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161c4:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80161c8:	e9c1 2300 	strd	r2, r3, [r1]
 80161cc:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80161d0:	b2db      	uxtb	r3, r3
 80161d2:	00da      	lsls	r2, r3, #3
 80161d4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80161d8:	1899      	adds	r1, r3, r2
 80161da:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80161de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e2:	e9c1 2300 	strd	r2, r3, [r1]
 80161e6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80161ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ee:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80161f2:	e9c1 2300 	strd	r2, r3, [r1]
 80161f6:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80161fa:	0a1b      	lsrs	r3, r3, #8
 80161fc:	b2db      	uxtb	r3, r3
 80161fe:	00da      	lsls	r2, r3, #3
 8016200:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016204:	4413      	add	r3, r2
 8016206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801620a:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 801620e:	e9c1 2300 	strd	r2, r3, [r1]
 8016212:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016216:	0a1b      	lsrs	r3, r3, #8
 8016218:	b2db      	uxtb	r3, r3
 801621a:	00da      	lsls	r2, r3, #3
 801621c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016220:	1899      	adds	r1, r3, r2
 8016222:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8016226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801622a:	e9c1 2300 	strd	r2, r3, [r1]
 801622e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8016232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016236:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 801623a:	e9c1 2300 	strd	r2, r3, [r1]
        SWAP(s[MBEDTLS_BYTE_2(p)], t); SWAP(s[MBEDTLS_BYTE_3(p)], t);
 801623e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016242:	0c1b      	lsrs	r3, r3, #16
 8016244:	b2db      	uxtb	r3, r3
 8016246:	00da      	lsls	r2, r3, #3
 8016248:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801624c:	4413      	add	r3, r2
 801624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016252:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8016256:	e9c1 2300 	strd	r2, r3, [r1]
 801625a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 801625e:	0c1b      	lsrs	r3, r3, #16
 8016260:	b2db      	uxtb	r3, r3
 8016262:	00da      	lsls	r2, r3, #3
 8016264:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016268:	1899      	adds	r1, r3, r2
 801626a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016272:	e9c1 2300 	strd	r2, r3, [r1]
 8016276:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 801627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801627e:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8016282:	e9c1 2300 	strd	r2, r3, [r1]
 8016286:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 801628a:	0e1b      	lsrs	r3, r3, #24
 801628c:	b2db      	uxtb	r3, r3
 801628e:	00da      	lsls	r2, r3, #3
 8016290:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016294:	4413      	add	r3, r2
 8016296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801629a:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 801629e:	e9c1 2300 	strd	r2, r3, [r1]
 80162a2:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80162a6:	0e1b      	lsrs	r3, r3, #24
 80162a8:	b2db      	uxtb	r3, r3
 80162aa:	00da      	lsls	r2, r3, #3
 80162ac:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80162b0:	1899      	adds	r1, r3, r2
 80162b2:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80162b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ba:	e9c1 2300 	strd	r2, r3, [r1]
 80162be:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80162c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162c6:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80162ca:	e9c1 2300 	strd	r2, r3, [r1]
        p = pi[3];
 80162ce:	4b5f      	ldr	r3, [pc, #380]	; (801644c <keccak_f1600+0xb18>)
 80162d0:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
        SWAP(s[MBEDTLS_BYTE_0(p)], t); SWAP(s[MBEDTLS_BYTE_1(p)], t);
 80162d4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80162d8:	b2db      	uxtb	r3, r3
 80162da:	00da      	lsls	r2, r3, #3
 80162dc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80162e0:	4413      	add	r3, r2
 80162e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162e6:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
 80162ea:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80162ee:	b2db      	uxtb	r3, r3
 80162f0:	00da      	lsls	r2, r3, #3
 80162f2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80162f6:	1899      	adds	r1, r3, r2
 80162f8:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80162fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016300:	e9c1 2300 	strd	r2, r3, [r1]
 8016304:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 8016308:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 801630c:	e9c1 2300 	strd	r2, r3, [r1]
 8016310:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016314:	0a1b      	lsrs	r3, r3, #8
 8016316:	b2db      	uxtb	r3, r3
 8016318:	00da      	lsls	r2, r3, #3
 801631a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801631e:	4413      	add	r3, r2
 8016320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016324:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
 8016328:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 801632c:	0a1b      	lsrs	r3, r3, #8
 801632e:	b2db      	uxtb	r3, r3
 8016330:	00da      	lsls	r2, r3, #3
 8016332:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016336:	1899      	adds	r1, r3, r2
 8016338:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016340:	e9c1 2300 	strd	r2, r3, [r1]
 8016344:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8016348:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 801634c:	e9c1 2300 	strd	r2, r3, [r1]
        SWAP(s[MBEDTLS_BYTE_2(p)], t); SWAP(s[MBEDTLS_BYTE_3(p)], t);
 8016350:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016354:	0c1b      	lsrs	r3, r3, #16
 8016356:	b2db      	uxtb	r3, r3
 8016358:	00da      	lsls	r2, r3, #3
 801635a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801635e:	4413      	add	r3, r2
 8016360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016364:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
 8016368:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 801636c:	0c1b      	lsrs	r3, r3, #16
 801636e:	b2db      	uxtb	r3, r3
 8016370:	00da      	lsls	r2, r3, #3
 8016372:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016376:	1899      	adds	r1, r3, r2
 8016378:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016380:	e9c1 2300 	strd	r2, r3, [r1]
 8016384:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 8016388:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 801638c:	e9c1 2300 	strd	r2, r3, [r1]
 8016390:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016394:	0e1b      	lsrs	r3, r3, #24
 8016396:	b2db      	uxtb	r3, r3
 8016398:	00da      	lsls	r2, r3, #3
 801639a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801639e:	4413      	add	r3, r2
 80163a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a4:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
 80163a8:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80163ac:	0e1b      	lsrs	r3, r3, #24
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	00da      	lsls	r2, r3, #3
 80163b2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80163b6:	1899      	adds	r1, r3, r2
 80163b8:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80163bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163c0:	e9c1 2300 	strd	r2, r3, [r1]
 80163c4:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 80163c8:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80163cc:	e9c1 2300 	strd	r2, r3, [r1]
        p = pi[4];
 80163d0:	4b1f      	ldr	r3, [pc, #124]	; (8016450 <keccak_f1600+0xb1c>)
 80163d2:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
        SWAP(s[MBEDTLS_BYTE_0(p)], t); SWAP(s[MBEDTLS_BYTE_1(p)], t);
 80163d6:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80163da:	b2db      	uxtb	r3, r3
 80163dc:	00da      	lsls	r2, r3, #3
 80163de:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80163e2:	4413      	add	r3, r2
 80163e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e8:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
 80163ec:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80163f0:	b2db      	uxtb	r3, r3
 80163f2:	00da      	lsls	r2, r3, #3
 80163f4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80163f8:	1899      	adds	r1, r3, r2
 80163fa:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80163fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016402:	e9c1 2300 	strd	r2, r3, [r1]
 8016406:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 801640a:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 801640e:	e9c1 2300 	strd	r2, r3, [r1]
 8016412:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016416:	0a1b      	lsrs	r3, r3, #8
 8016418:	b2db      	uxtb	r3, r3
 801641a:	00da      	lsls	r2, r3, #3
 801641c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016420:	4413      	add	r3, r2
 8016422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016426:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
 801642a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 801642e:	0a1b      	lsrs	r3, r3, #8
 8016430:	b2db      	uxtb	r3, r3
 8016432:	00da      	lsls	r2, r3, #3
 8016434:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016438:	1899      	adds	r1, r3, r2
 801643a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016442:	e007      	b.n	8016454 <keccak_f1600+0xb20>
 8016444:	10050312 	.word	0x10050312
 8016448:	04181508 	.word	0x04181508
 801644c:	0d13170f 	.word	0x0d13170f
 8016450:	0e14020c 	.word	0x0e14020c
 8016454:	e9c1 2300 	strd	r2, r3, [r1]
 8016458:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 801645c:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8016460:	e9c1 2300 	strd	r2, r3, [r1]
        SWAP(s[MBEDTLS_BYTE_2(p)], t); SWAP(s[MBEDTLS_BYTE_3(p)], t);
 8016464:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016468:	0c1b      	lsrs	r3, r3, #16
 801646a:	b2db      	uxtb	r3, r3
 801646c:	00da      	lsls	r2, r3, #3
 801646e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016472:	4413      	add	r3, r2
 8016474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016478:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
 801647c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016480:	0c1b      	lsrs	r3, r3, #16
 8016482:	b2db      	uxtb	r3, r3
 8016484:	00da      	lsls	r2, r3, #3
 8016486:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801648a:	1899      	adds	r1, r3, r2
 801648c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8016490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016494:	e9c1 2300 	strd	r2, r3, [r1]
 8016498:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 801649c:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80164a0:	e9c1 2300 	strd	r2, r3, [r1]
 80164a4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80164a8:	0e1b      	lsrs	r3, r3, #24
 80164aa:	b2db      	uxtb	r3, r3
 80164ac:	00da      	lsls	r2, r3, #3
 80164ae:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80164b2:	4413      	add	r3, r2
 80164b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b8:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
 80164bc:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80164c0:	0e1b      	lsrs	r3, r3, #24
 80164c2:	b2db      	uxtb	r3, r3
 80164c4:	00da      	lsls	r2, r3, #3
 80164c6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80164ca:	1899      	adds	r1, r3, r2
 80164cc:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80164d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d4:	e9c1 2300 	strd	r2, r3, [r1]
 80164d8:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 80164dc:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80164e0:	e9c1 2300 	strd	r2, r3, [r1]
        p = pi[5];
 80164e4:	4bf9      	ldr	r3, [pc, #996]	; (80168cc <keccak_f1600+0xf98>)
 80164e6:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
        SWAP(s[MBEDTLS_BYTE_0(p)], t); SWAP(s[MBEDTLS_BYTE_1(p)], t);
 80164ea:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80164ee:	b2db      	uxtb	r3, r3
 80164f0:	00da      	lsls	r2, r3, #3
 80164f2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80164f6:	4413      	add	r3, r2
 80164f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164fc:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
 8016500:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016504:	b2db      	uxtb	r3, r3
 8016506:	00da      	lsls	r2, r3, #3
 8016508:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801650c:	1899      	adds	r1, r3, r2
 801650e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8016512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016516:	e9c1 2300 	strd	r2, r3, [r1]
 801651a:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 801651e:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8016522:	e9c1 2300 	strd	r2, r3, [r1]
 8016526:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 801652a:	0a1b      	lsrs	r3, r3, #8
 801652c:	b2db      	uxtb	r3, r3
 801652e:	00da      	lsls	r2, r3, #3
 8016530:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016534:	4413      	add	r3, r2
 8016536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801653a:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
 801653e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016542:	0a1b      	lsrs	r3, r3, #8
 8016544:	b2db      	uxtb	r3, r3
 8016546:	00da      	lsls	r2, r3, #3
 8016548:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801654c:	1899      	adds	r1, r3, r2
 801654e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8016552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016556:	e9c1 2300 	strd	r2, r3, [r1]
 801655a:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 801655e:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8016562:	e9c1 2300 	strd	r2, r3, [r1]
        SWAP(s[MBEDTLS_BYTE_2(p)], t); SWAP(s[MBEDTLS_BYTE_3(p)], t);
 8016566:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 801656a:	0c1b      	lsrs	r3, r3, #16
 801656c:	b2db      	uxtb	r3, r3
 801656e:	00da      	lsls	r2, r3, #3
 8016570:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016574:	4413      	add	r3, r2
 8016576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801657a:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
 801657e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8016582:	0c1b      	lsrs	r3, r3, #16
 8016584:	b2db      	uxtb	r3, r3
 8016586:	00da      	lsls	r2, r3, #3
 8016588:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801658c:	1899      	adds	r1, r3, r2
 801658e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8016592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016596:	e9c1 2300 	strd	r2, r3, [r1]
 801659a:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 801659e:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80165a2:	e9c1 2300 	strd	r2, r3, [r1]
 80165a6:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80165aa:	0e1b      	lsrs	r3, r3, #24
 80165ac:	b2db      	uxtb	r3, r3
 80165ae:	00da      	lsls	r2, r3, #3
 80165b0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80165b4:	4413      	add	r3, r2
 80165b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165ba:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
 80165be:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80165c2:	0e1b      	lsrs	r3, r3, #24
 80165c4:	b2db      	uxtb	r3, r3
 80165c6:	00da      	lsls	r2, r3, #3
 80165c8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80165cc:	1899      	adds	r1, r3, r2
 80165ce:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80165d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d6:	e9c1 2300 	strd	r2, r3, [r1]
 80165da:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 80165de:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80165e2:	e9c1 2300 	strd	r2, r3, [r1]
            s[i + 2] ^= (~lane[3]) & lane[4];
            s[i + 3] ^= (~lane[4]) & lane[0];
            s[i + 4] ^= (~lane[0]) & lane[1];
        }
#else
        lane[0] = s[0]; lane[1] = s[1]; lane[2] = s[2]; lane[3] = s[3]; lane[4] = s[4];
 80165e6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80165ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80165ee:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80165f2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80165f6:	e9c3 0100 	strd	r0, r1, [r3]
 80165fa:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80165fe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8016602:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016606:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801660a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801660e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016612:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8016616:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801661a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801661e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8016622:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016626:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801662a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801662e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016632:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8016636:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801663a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 801663e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016642:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016646:	e9c3 0108 	strd	r0, r1, [r3, #32]
        s[0] ^= (~lane[1]) & lane[2];
 801664a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801664e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016652:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016656:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801665a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801665e:	43d4      	mvns	r4, r2
 8016660:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 8016664:	43db      	mvns	r3, r3
 8016666:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 801666a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801666e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016672:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016676:	e9d7 56aa 	ldrd	r5, r6, [r7, #680]	; 0x2a8
 801667a:	462c      	mov	r4, r5
 801667c:	4014      	ands	r4, r2
 801667e:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 8016682:	4634      	mov	r4, r6
 8016684:	4023      	ands	r3, r4
 8016686:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 801668a:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 801668e:	4623      	mov	r3, r4
 8016690:	4043      	eors	r3, r0
 8016692:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8016696:	462b      	mov	r3, r5
 8016698:	404b      	eors	r3, r1
 801669a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801669e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80166a2:	e9d7 12a6 	ldrd	r1, r2, [r7, #664]	; 0x298
 80166a6:	e9c3 1200 	strd	r1, r2, [r3]
        s[1] ^= (~lane[2]) & lane[3];
 80166aa:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80166ae:	3308      	adds	r3, #8
 80166b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80166b4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80166b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80166bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80166c0:	43d4      	mvns	r4, r2
 80166c2:	f8c7 4290 	str.w	r4, [r7, #656]	; 0x290
 80166c6:	43db      	mvns	r3, r3
 80166c8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80166cc:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80166d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80166d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80166d8:	e9d7 56a4 	ldrd	r5, r6, [r7, #656]	; 0x290
 80166dc:	462c      	mov	r4, r5
 80166de:	4014      	ands	r4, r2
 80166e0:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 80166e4:	4634      	mov	r4, r6
 80166e6:	4023      	ands	r3, r4
 80166e8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80166ec:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80166f0:	3308      	adds	r3, #8
 80166f2:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 80166f6:	4622      	mov	r2, r4
 80166f8:	4042      	eors	r2, r0
 80166fa:	f8c7 2280 	str.w	r2, [r7, #640]	; 0x280
 80166fe:	462a      	mov	r2, r5
 8016700:	404a      	eors	r2, r1
 8016702:	f8c7 2284 	str.w	r2, [r7, #644]	; 0x284
 8016706:	e9d7 12a0 	ldrd	r1, r2, [r7, #640]	; 0x280
 801670a:	e9c3 1200 	strd	r1, r2, [r3]
        s[2] ^= (~lane[3]) & lane[4];
 801670e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016712:	3310      	adds	r3, #16
 8016714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016718:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801671c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016720:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016724:	43d4      	mvns	r4, r2
 8016726:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 801672a:	43db      	mvns	r3, r3
 801672c:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8016730:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016734:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016738:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801673c:	e9d7 569e 	ldrd	r5, r6, [r7, #632]	; 0x278
 8016740:	462c      	mov	r4, r5
 8016742:	4014      	ands	r4, r2
 8016744:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 8016748:	4634      	mov	r4, r6
 801674a:	4023      	ands	r3, r4
 801674c:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8016750:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016754:	3310      	adds	r3, #16
 8016756:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 801675a:	4622      	mov	r2, r4
 801675c:	4042      	eors	r2, r0
 801675e:	f8c7 2268 	str.w	r2, [r7, #616]	; 0x268
 8016762:	462a      	mov	r2, r5
 8016764:	404a      	eors	r2, r1
 8016766:	f8c7 226c 	str.w	r2, [r7, #620]	; 0x26c
 801676a:	e9d7 129a 	ldrd	r1, r2, [r7, #616]	; 0x268
 801676e:	e9c3 1200 	strd	r1, r2, [r3]
        s[3] ^= (~lane[4]) & lane[0];
 8016772:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016776:	3318      	adds	r3, #24
 8016778:	e9d3 0100 	ldrd	r0, r1, [r3]
 801677c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016780:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016784:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016788:	43d4      	mvns	r4, r2
 801678a:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 801678e:	43db      	mvns	r3, r3
 8016790:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8016794:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016798:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167a0:	e9d7 5698 	ldrd	r5, r6, [r7, #608]	; 0x260
 80167a4:	462c      	mov	r4, r5
 80167a6:	4014      	ands	r4, r2
 80167a8:	f8c7 4258 	str.w	r4, [r7, #600]	; 0x258
 80167ac:	4634      	mov	r4, r6
 80167ae:	4023      	ands	r3, r4
 80167b0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80167b4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80167b8:	3318      	adds	r3, #24
 80167ba:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 80167be:	4622      	mov	r2, r4
 80167c0:	4042      	eors	r2, r0
 80167c2:	f8c7 2250 	str.w	r2, [r7, #592]	; 0x250
 80167c6:	462a      	mov	r2, r5
 80167c8:	404a      	eors	r2, r1
 80167ca:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 80167ce:	e9d7 1294 	ldrd	r1, r2, [r7, #592]	; 0x250
 80167d2:	e9c3 1200 	strd	r1, r2, [r3]
        s[4] ^= (~lane[0]) & lane[1];
 80167d6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80167da:	3320      	adds	r3, #32
 80167dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80167e0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80167e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80167e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ec:	43d4      	mvns	r4, r2
 80167ee:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 80167f2:	43db      	mvns	r3, r3
 80167f4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80167f8:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80167fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016800:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016804:	e9d7 5692 	ldrd	r5, r6, [r7, #584]	; 0x248
 8016808:	462c      	mov	r4, r5
 801680a:	4014      	ands	r4, r2
 801680c:	f8c7 4240 	str.w	r4, [r7, #576]	; 0x240
 8016810:	4634      	mov	r4, r6
 8016812:	4023      	ands	r3, r4
 8016814:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8016818:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801681c:	3320      	adds	r3, #32
 801681e:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 8016822:	4622      	mov	r2, r4
 8016824:	4042      	eors	r2, r0
 8016826:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 801682a:	462a      	mov	r2, r5
 801682c:	404a      	eors	r2, r1
 801682e:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 8016832:	e9d7 128e 	ldrd	r1, r2, [r7, #568]	; 0x238
 8016836:	e9c3 1200 	strd	r1, r2, [r3]

        lane[0] = s[5]; lane[1] = s[6]; lane[2] = s[7]; lane[3] = s[8]; lane[4] = s[9];
 801683a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801683e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8016842:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016846:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801684a:	e9c3 0100 	strd	r0, r1, [r3]
 801684e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016852:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8016856:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801685a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801685e:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016862:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016866:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801686a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801686e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016872:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8016876:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801687a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 801687e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016882:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016886:	e9c3 0106 	strd	r0, r1, [r3, #24]
 801688a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801688e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8016892:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016896:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801689a:	e9c3 0108 	strd	r0, r1, [r3, #32]
        s[5] ^= (~lane[1]) & lane[2];
 801689e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80168a2:	3328      	adds	r3, #40	; 0x28
 80168a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80168a8:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80168ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80168b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80168b4:	43d4      	mvns	r4, r2
 80168b6:	f8c7 4230 	str.w	r4, [r7, #560]	; 0x230
 80168ba:	43db      	mvns	r3, r3
 80168bc:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 80168c0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80168c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80168c8:	e002      	b.n	80168d0 <keccak_f1600+0xf9c>
 80168ca:	bf00      	nop
 80168cc:	01060916 	.word	0x01060916
 80168d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80168d4:	e9d7 568c 	ldrd	r5, r6, [r7, #560]	; 0x230
 80168d8:	462c      	mov	r4, r5
 80168da:	4014      	ands	r4, r2
 80168dc:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 80168e0:	4634      	mov	r4, r6
 80168e2:	4023      	ands	r3, r4
 80168e4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80168e8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80168ec:	3328      	adds	r3, #40	; 0x28
 80168ee:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 80168f2:	4622      	mov	r2, r4
 80168f4:	4042      	eors	r2, r0
 80168f6:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 80168fa:	462a      	mov	r2, r5
 80168fc:	404a      	eors	r2, r1
 80168fe:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8016902:	e9d7 1288 	ldrd	r1, r2, [r7, #544]	; 0x220
 8016906:	e9c3 1200 	strd	r1, r2, [r3]
        s[6] ^= (~lane[2]) & lane[3];
 801690a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801690e:	3330      	adds	r3, #48	; 0x30
 8016910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016914:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016918:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801691c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016920:	43d4      	mvns	r4, r2
 8016922:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 8016926:	43db      	mvns	r3, r3
 8016928:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 801692c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016930:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016934:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016938:	e9d7 5686 	ldrd	r5, r6, [r7, #536]	; 0x218
 801693c:	462c      	mov	r4, r5
 801693e:	4014      	ands	r4, r2
 8016940:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 8016944:	4634      	mov	r4, r6
 8016946:	4023      	ands	r3, r4
 8016948:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 801694c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016950:	3330      	adds	r3, #48	; 0x30
 8016952:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 8016956:	4622      	mov	r2, r4
 8016958:	4042      	eors	r2, r0
 801695a:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 801695e:	462a      	mov	r2, r5
 8016960:	404a      	eors	r2, r1
 8016962:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8016966:	e9d7 1282 	ldrd	r1, r2, [r7, #520]	; 0x208
 801696a:	e9c3 1200 	strd	r1, r2, [r3]
        s[7] ^= (~lane[3]) & lane[4];
 801696e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016972:	3338      	adds	r3, #56	; 0x38
 8016974:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016978:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801697c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016980:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016984:	43d4      	mvns	r4, r2
 8016986:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 801698a:	43db      	mvns	r3, r3
 801698c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8016990:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016994:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801699c:	e9d7 5680 	ldrd	r5, r6, [r7, #512]	; 0x200
 80169a0:	462c      	mov	r4, r5
 80169a2:	4014      	ands	r4, r2
 80169a4:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 80169a8:	4634      	mov	r4, r6
 80169aa:	4023      	ands	r3, r4
 80169ac:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80169b0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80169b4:	3338      	adds	r3, #56	; 0x38
 80169b6:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 80169ba:	4622      	mov	r2, r4
 80169bc:	4042      	eors	r2, r0
 80169be:	f8c7 21f0 	str.w	r2, [r7, #496]	; 0x1f0
 80169c2:	462a      	mov	r2, r5
 80169c4:	404a      	eors	r2, r1
 80169c6:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80169ca:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 80169ce:	e9c3 1200 	strd	r1, r2, [r3]
        s[8] ^= (~lane[4]) & lane[0];
 80169d2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80169d6:	3340      	adds	r3, #64	; 0x40
 80169d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80169dc:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80169e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80169e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80169e8:	43d4      	mvns	r4, r2
 80169ea:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 80169ee:	43db      	mvns	r3, r3
 80169f0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80169f4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80169f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80169fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a00:	e9d7 567a 	ldrd	r5, r6, [r7, #488]	; 0x1e8
 8016a04:	462c      	mov	r4, r5
 8016a06:	4014      	ands	r4, r2
 8016a08:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 8016a0c:	4634      	mov	r4, r6
 8016a0e:	4023      	ands	r3, r4
 8016a10:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8016a14:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016a18:	3340      	adds	r3, #64	; 0x40
 8016a1a:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8016a1e:	4622      	mov	r2, r4
 8016a20:	4042      	eors	r2, r0
 8016a22:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8016a26:	462a      	mov	r2, r5
 8016a28:	404a      	eors	r2, r1
 8016a2a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8016a2e:	e9d7 1276 	ldrd	r1, r2, [r7, #472]	; 0x1d8
 8016a32:	e9c3 1200 	strd	r1, r2, [r3]
        s[9] ^= (~lane[0]) & lane[1];
 8016a36:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016a3a:	3348      	adds	r3, #72	; 0x48
 8016a3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016a40:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016a44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a4c:	43d4      	mvns	r4, r2
 8016a4e:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 8016a52:	43db      	mvns	r3, r3
 8016a54:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8016a58:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016a5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016a60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016a64:	e9d7 5674 	ldrd	r5, r6, [r7, #464]	; 0x1d0
 8016a68:	462c      	mov	r4, r5
 8016a6a:	4014      	ands	r4, r2
 8016a6c:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 8016a70:	4634      	mov	r4, r6
 8016a72:	4023      	ands	r3, r4
 8016a74:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8016a78:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016a7c:	3348      	adds	r3, #72	; 0x48
 8016a7e:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 8016a82:	4622      	mov	r2, r4
 8016a84:	4042      	eors	r2, r0
 8016a86:	f8c7 21c0 	str.w	r2, [r7, #448]	; 0x1c0
 8016a8a:	462a      	mov	r2, r5
 8016a8c:	404a      	eors	r2, r1
 8016a8e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8016a92:	e9d7 1270 	ldrd	r1, r2, [r7, #448]	; 0x1c0
 8016a96:	e9c3 1200 	strd	r1, r2, [r3]

        lane[0] = s[10]; lane[1] = s[11]; lane[2] = s[12]; lane[3] = s[13]; lane[4] = s[14];
 8016a9a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016a9e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8016aa2:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016aa6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016aaa:	e9c3 0100 	strd	r0, r1, [r3]
 8016aae:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016ab2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8016ab6:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016aba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016abe:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016ac2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016ac6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8016aca:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016ace:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016ad2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8016ad6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016ada:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8016ade:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016ae2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016ae6:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8016aea:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016aee:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8016af2:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016af6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016afa:	e9c3 0108 	strd	r0, r1, [r3, #32]
        s[10] ^= (~lane[1]) & lane[2];
 8016afe:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016b02:	3350      	adds	r3, #80	; 0x50
 8016b04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016b08:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016b0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016b10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016b14:	43d4      	mvns	r4, r2
 8016b16:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8016b1a:	43db      	mvns	r3, r3
 8016b1c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8016b20:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016b24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016b28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016b2c:	e9d7 566e 	ldrd	r5, r6, [r7, #440]	; 0x1b8
 8016b30:	462c      	mov	r4, r5
 8016b32:	4014      	ands	r4, r2
 8016b34:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 8016b38:	4634      	mov	r4, r6
 8016b3a:	4023      	ands	r3, r4
 8016b3c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8016b40:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016b44:	3350      	adds	r3, #80	; 0x50
 8016b46:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 8016b4a:	4622      	mov	r2, r4
 8016b4c:	4042      	eors	r2, r0
 8016b4e:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
 8016b52:	462a      	mov	r2, r5
 8016b54:	404a      	eors	r2, r1
 8016b56:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8016b5a:	e9d7 126a 	ldrd	r1, r2, [r7, #424]	; 0x1a8
 8016b5e:	e9c3 1200 	strd	r1, r2, [r3]
        s[11] ^= (~lane[2]) & lane[3];
 8016b62:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016b66:	3358      	adds	r3, #88	; 0x58
 8016b68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016b6c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016b70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016b74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016b78:	43d4      	mvns	r4, r2
 8016b7a:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 8016b7e:	43db      	mvns	r3, r3
 8016b80:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8016b84:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016b88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016b8c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016b90:	e9d7 5668 	ldrd	r5, r6, [r7, #416]	; 0x1a0
 8016b94:	462c      	mov	r4, r5
 8016b96:	4014      	ands	r4, r2
 8016b98:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 8016b9c:	4634      	mov	r4, r6
 8016b9e:	4023      	ands	r3, r4
 8016ba0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8016ba4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016ba8:	3358      	adds	r3, #88	; 0x58
 8016baa:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 8016bae:	4622      	mov	r2, r4
 8016bb0:	4042      	eors	r2, r0
 8016bb2:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 8016bb6:	462a      	mov	r2, r5
 8016bb8:	404a      	eors	r2, r1
 8016bba:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8016bbe:	e9d7 1264 	ldrd	r1, r2, [r7, #400]	; 0x190
 8016bc2:	e9c3 1200 	strd	r1, r2, [r3]
        s[12] ^= (~lane[3]) & lane[4];
 8016bc6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016bca:	3360      	adds	r3, #96	; 0x60
 8016bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016bd0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016bd4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016bd8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016bdc:	43d4      	mvns	r4, r2
 8016bde:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 8016be2:	43db      	mvns	r3, r3
 8016be4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8016be8:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016bec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016bf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016bf4:	e9d7 5662 	ldrd	r5, r6, [r7, #392]	; 0x188
 8016bf8:	462c      	mov	r4, r5
 8016bfa:	4014      	ands	r4, r2
 8016bfc:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 8016c00:	4634      	mov	r4, r6
 8016c02:	4023      	ands	r3, r4
 8016c04:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8016c08:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016c0c:	3360      	adds	r3, #96	; 0x60
 8016c0e:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8016c12:	4622      	mov	r2, r4
 8016c14:	4042      	eors	r2, r0
 8016c16:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8016c1a:	462a      	mov	r2, r5
 8016c1c:	404a      	eors	r2, r1
 8016c1e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8016c22:	e9d7 125e 	ldrd	r1, r2, [r7, #376]	; 0x178
 8016c26:	e9c3 1200 	strd	r1, r2, [r3]
        s[13] ^= (~lane[4]) & lane[0];
 8016c2a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016c2e:	3368      	adds	r3, #104	; 0x68
 8016c30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016c34:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016c38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016c3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016c40:	43d4      	mvns	r4, r2
 8016c42:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 8016c46:	43db      	mvns	r3, r3
 8016c48:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8016c4c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016c50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c58:	e9d7 565c 	ldrd	r5, r6, [r7, #368]	; 0x170
 8016c5c:	462c      	mov	r4, r5
 8016c5e:	4014      	ands	r4, r2
 8016c60:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8016c64:	4634      	mov	r4, r6
 8016c66:	4023      	ands	r3, r4
 8016c68:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8016c6c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016c70:	3368      	adds	r3, #104	; 0x68
 8016c72:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8016c76:	4622      	mov	r2, r4
 8016c78:	4042      	eors	r2, r0
 8016c7a:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8016c7e:	462a      	mov	r2, r5
 8016c80:	404a      	eors	r2, r1
 8016c82:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8016c86:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	; 0x160
 8016c8a:	e9c3 1200 	strd	r1, r2, [r3]
        s[14] ^= (~lane[0]) & lane[1];
 8016c8e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016c92:	3370      	adds	r3, #112	; 0x70
 8016c94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016c98:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016c9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ca4:	43d4      	mvns	r4, r2
 8016ca6:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 8016caa:	43db      	mvns	r3, r3
 8016cac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8016cb0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016cb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016cb8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016cbc:	e9d7 5656 	ldrd	r5, r6, [r7, #344]	; 0x158
 8016cc0:	462c      	mov	r4, r5
 8016cc2:	4014      	ands	r4, r2
 8016cc4:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8016cc8:	4634      	mov	r4, r6
 8016cca:	4023      	ands	r3, r4
 8016ccc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8016cd0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016cd4:	3370      	adds	r3, #112	; 0x70
 8016cd6:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8016cda:	4622      	mov	r2, r4
 8016cdc:	4042      	eors	r2, r0
 8016cde:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8016ce2:	462a      	mov	r2, r5
 8016ce4:	404a      	eors	r2, r1
 8016ce6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8016cea:	e9d7 1252 	ldrd	r1, r2, [r7, #328]	; 0x148
 8016cee:	e9c3 1200 	strd	r1, r2, [r3]

        lane[0] = s[15]; lane[1] = s[16]; lane[2] = s[17]; lane[3] = s[18]; lane[4] = s[19];
 8016cf2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016cf6:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8016cfa:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016cfe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016d02:	e9c3 0100 	strd	r0, r1, [r3]
 8016d06:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016d0a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8016d0e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016d12:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016d16:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016d1a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016d1e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8016d22:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016d26:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016d2a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8016d2e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016d32:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8016d36:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016d3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016d3e:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8016d42:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016d46:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8016d4a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016d4e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016d52:	e9c3 0108 	strd	r0, r1, [r3, #32]
        s[15] ^= (~lane[1]) & lane[2];
 8016d56:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016d5a:	3378      	adds	r3, #120	; 0x78
 8016d5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016d60:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016d64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016d68:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016d6c:	43d4      	mvns	r4, r2
 8016d6e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8016d72:	43db      	mvns	r3, r3
 8016d74:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8016d78:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016d7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016d80:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016d84:	e9d7 5650 	ldrd	r5, r6, [r7, #320]	; 0x140
 8016d88:	462c      	mov	r4, r5
 8016d8a:	4014      	ands	r4, r2
 8016d8c:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8016d90:	4634      	mov	r4, r6
 8016d92:	4023      	ands	r3, r4
 8016d94:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8016d98:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016d9c:	3378      	adds	r3, #120	; 0x78
 8016d9e:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 8016da2:	4622      	mov	r2, r4
 8016da4:	4042      	eors	r2, r0
 8016da6:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8016daa:	462a      	mov	r2, r5
 8016dac:	404a      	eors	r2, r1
 8016dae:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8016db2:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8016db6:	e9c3 1200 	strd	r1, r2, [r3]
        s[16] ^= (~lane[2]) & lane[3];
 8016dba:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016dbe:	3380      	adds	r3, #128	; 0x80
 8016dc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016dc4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016dc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016dcc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016dd0:	43d4      	mvns	r4, r2
 8016dd2:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8016dd6:	43db      	mvns	r3, r3
 8016dd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8016ddc:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016de0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016de4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016de8:	e9d7 564a 	ldrd	r5, r6, [r7, #296]	; 0x128
 8016dec:	462c      	mov	r4, r5
 8016dee:	4014      	ands	r4, r2
 8016df0:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8016df4:	4634      	mov	r4, r6
 8016df6:	4023      	ands	r3, r4
 8016df8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8016dfc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016e00:	3380      	adds	r3, #128	; 0x80
 8016e02:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8016e06:	4622      	mov	r2, r4
 8016e08:	4042      	eors	r2, r0
 8016e0a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8016e0e:	462a      	mov	r2, r5
 8016e10:	404a      	eors	r2, r1
 8016e12:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8016e16:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8016e1a:	e9c3 1200 	strd	r1, r2, [r3]
        s[17] ^= (~lane[3]) & lane[4];
 8016e1e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016e22:	3388      	adds	r3, #136	; 0x88
 8016e24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016e28:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016e2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016e30:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016e34:	43d4      	mvns	r4, r2
 8016e36:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8016e3a:	43db      	mvns	r3, r3
 8016e3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8016e40:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016e44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016e48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016e4c:	e9d7 5644 	ldrd	r5, r6, [r7, #272]	; 0x110
 8016e50:	462c      	mov	r4, r5
 8016e52:	4014      	ands	r4, r2
 8016e54:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8016e58:	4634      	mov	r4, r6
 8016e5a:	4023      	ands	r3, r4
 8016e5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8016e60:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016e64:	3388      	adds	r3, #136	; 0x88
 8016e66:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8016e6a:	4622      	mov	r2, r4
 8016e6c:	4042      	eors	r2, r0
 8016e6e:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8016e72:	462a      	mov	r2, r5
 8016e74:	404a      	eors	r2, r1
 8016e76:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8016e7a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8016e7e:	e9c3 1200 	strd	r1, r2, [r3]
        s[18] ^= (~lane[4]) & lane[0];
 8016e82:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016e86:	3390      	adds	r3, #144	; 0x90
 8016e88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016e8c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016e90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016e94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016e98:	43d4      	mvns	r4, r2
 8016e9a:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8016e9e:	43db      	mvns	r3, r3
 8016ea0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8016ea4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016ea8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb0:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	; 0xf8
 8016eb4:	462c      	mov	r4, r5
 8016eb6:	4014      	ands	r4, r2
 8016eb8:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8016ebc:	4634      	mov	r4, r6
 8016ebe:	4023      	ands	r3, r4
 8016ec0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8016ec4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016ec8:	3390      	adds	r3, #144	; 0x90
 8016eca:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8016ece:	4622      	mov	r2, r4
 8016ed0:	4042      	eors	r2, r0
 8016ed2:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8016ed6:	462a      	mov	r2, r5
 8016ed8:	404a      	eors	r2, r1
 8016eda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8016ede:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8016ee2:	e9c3 1200 	strd	r1, r2, [r3]
        s[19] ^= (~lane[0]) & lane[1];
 8016ee6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016eea:	3398      	adds	r3, #152	; 0x98
 8016eec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016ef0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016ef4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016efc:	43d4      	mvns	r4, r2
 8016efe:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8016f02:	43db      	mvns	r3, r3
 8016f04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8016f08:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016f0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016f10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016f14:	e9d7 5638 	ldrd	r5, r6, [r7, #224]	; 0xe0
 8016f18:	462c      	mov	r4, r5
 8016f1a:	4014      	ands	r4, r2
 8016f1c:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8016f20:	4634      	mov	r4, r6
 8016f22:	4023      	ands	r3, r4
 8016f24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8016f28:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016f2c:	3398      	adds	r3, #152	; 0x98
 8016f2e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8016f32:	4622      	mov	r2, r4
 8016f34:	4042      	eors	r2, r0
 8016f36:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8016f3a:	462a      	mov	r2, r5
 8016f3c:	404a      	eors	r2, r1
 8016f3e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8016f42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8016f46:	e9c3 1200 	strd	r1, r2, [r3]

        lane[0] = s[20]; lane[1] = s[21]; lane[2] = s[22]; lane[3] = s[23]; lane[4] = s[24];
 8016f4a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016f4e:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8016f52:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016f56:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016f5a:	e9c3 0100 	strd	r0, r1, [r3]
 8016f5e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016f62:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8016f66:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016f6a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016f6e:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016f72:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016f76:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 8016f7a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016f7e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016f82:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8016f86:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016f8a:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 8016f8e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016f92:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016f96:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8016f9a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016f9e:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 8016fa2:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016fa6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016faa:	e9c3 0108 	strd	r0, r1, [r3, #32]
        s[20] ^= (~lane[1]) & lane[2];
 8016fae:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016fb2:	33a0      	adds	r3, #160	; 0xa0
 8016fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016fb8:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016fbc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016fc0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016fc4:	43d4      	mvns	r4, r2
 8016fc6:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8016fca:	43db      	mvns	r3, r3
 8016fcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8016fd0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8016fd4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016fd8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016fdc:	e9d7 5632 	ldrd	r5, r6, [r7, #200]	; 0xc8
 8016fe0:	462c      	mov	r4, r5
 8016fe2:	4014      	ands	r4, r2
 8016fe4:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8016fe8:	4634      	mov	r4, r6
 8016fea:	4023      	ands	r3, r4
 8016fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016ff0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8016ff4:	33a0      	adds	r3, #160	; 0xa0
 8016ff6:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8016ffa:	4622      	mov	r2, r4
 8016ffc:	4042      	eors	r2, r0
 8016ffe:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8017002:	462a      	mov	r2, r5
 8017004:	404a      	eors	r2, r1
 8017006:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801700a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 801700e:	e9c3 1200 	strd	r1, r2, [r3]
        s[21] ^= (~lane[2]) & lane[3];
 8017012:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8017016:	33a8      	adds	r3, #168	; 0xa8
 8017018:	e9d3 0100 	ldrd	r0, r1, [r3]
 801701c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8017020:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017024:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8017028:	43d4      	mvns	r4, r2
 801702a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 801702e:	43db      	mvns	r3, r3
 8017030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017034:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8017038:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801703c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8017040:	e9d7 562c 	ldrd	r5, r6, [r7, #176]	; 0xb0
 8017044:	462c      	mov	r4, r5
 8017046:	4014      	ands	r4, r2
 8017048:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 801704c:	4634      	mov	r4, r6
 801704e:	4023      	ands	r3, r4
 8017050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8017054:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8017058:	33a8      	adds	r3, #168	; 0xa8
 801705a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 801705e:	4622      	mov	r2, r4
 8017060:	4042      	eors	r2, r0
 8017062:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8017066:	462a      	mov	r2, r5
 8017068:	404a      	eors	r2, r1
 801706a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801706e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8017072:	e9c3 1200 	strd	r1, r2, [r3]
        s[22] ^= (~lane[3]) & lane[4];
 8017076:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801707a:	33b0      	adds	r3, #176	; 0xb0
 801707c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017080:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8017084:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017088:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801708c:	43d4      	mvns	r4, r2
 801708e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8017092:	43db      	mvns	r3, r3
 8017094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8017098:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801709c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80170a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80170a4:	e9d7 5626 	ldrd	r5, r6, [r7, #152]	; 0x98
 80170a8:	462c      	mov	r4, r5
 80170aa:	4014      	ands	r4, r2
 80170ac:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80170b0:	4634      	mov	r4, r6
 80170b2:	4023      	ands	r3, r4
 80170b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80170b8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80170bc:	33b0      	adds	r3, #176	; 0xb0
 80170be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80170c2:	4622      	mov	r2, r4
 80170c4:	4042      	eors	r2, r0
 80170c6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80170ca:	462a      	mov	r2, r5
 80170cc:	404a      	eors	r2, r1
 80170ce:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80170d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80170d6:	e9c3 1200 	strd	r1, r2, [r3]
        s[23] ^= (~lane[4]) & lane[0];
 80170da:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80170de:	33b8      	adds	r3, #184	; 0xb8
 80170e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80170e4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80170e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80170ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80170f0:	43d4      	mvns	r4, r2
 80170f2:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80170f6:	43db      	mvns	r3, r3
 80170f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80170fc:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8017100:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017108:	e9d7 5620 	ldrd	r5, r6, [r7, #128]	; 0x80
 801710c:	462c      	mov	r4, r5
 801710e:	4014      	ands	r4, r2
 8017110:	67bc      	str	r4, [r7, #120]	; 0x78
 8017112:	4634      	mov	r4, r6
 8017114:	4023      	ands	r3, r4
 8017116:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017118:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801711c:	33b8      	adds	r3, #184	; 0xb8
 801711e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8017122:	4622      	mov	r2, r4
 8017124:	4042      	eors	r2, r0
 8017126:	673a      	str	r2, [r7, #112]	; 0x70
 8017128:	462a      	mov	r2, r5
 801712a:	404a      	eors	r2, r1
 801712c:	677a      	str	r2, [r7, #116]	; 0x74
 801712e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8017132:	e9c3 1200 	strd	r1, r2, [r3]
        s[24] ^= (~lane[0]) & lane[1];
 8017136:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801713a:	33c0      	adds	r3, #192	; 0xc0
 801713c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017140:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8017144:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801714c:	43d4      	mvns	r4, r2
 801714e:	66bc      	str	r4, [r7, #104]	; 0x68
 8017150:	43db      	mvns	r3, r3
 8017152:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017154:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8017158:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801715c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017160:	e9d7 561a 	ldrd	r5, r6, [r7, #104]	; 0x68
 8017164:	462c      	mov	r4, r5
 8017166:	4014      	ands	r4, r2
 8017168:	663c      	str	r4, [r7, #96]	; 0x60
 801716a:	4634      	mov	r4, r6
 801716c:	4023      	ands	r3, r4
 801716e:	667b      	str	r3, [r7, #100]	; 0x64
 8017170:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8017174:	33c0      	adds	r3, #192	; 0xc0
 8017176:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801717a:	4622      	mov	r2, r4
 801717c:	4042      	eors	r2, r0
 801717e:	65ba      	str	r2, [r7, #88]	; 0x58
 8017180:	462a      	mov	r2, r5
 8017182:	404a      	eors	r2, r1
 8017184:	65fa      	str	r2, [r7, #92]	; 0x5c
 8017186:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801718a:	e9c3 1200 	strd	r1, r2, [r3]
#endif

        /* Iota */
        /* Decompress the round masks (see definition of rc) */
        s[0] ^= ((iota_r_packed[round] & 0x40ull) << 57 |
 801718e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8017192:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017196:	4a50      	ldr	r2, [pc, #320]	; (80172d8 <keccak_f1600+0x19a4>)
 8017198:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 801719c:	4413      	add	r3, r2
 801719e:	781b      	ldrb	r3, [r3, #0]
 80171a0:	b2db      	uxtb	r3, r3
 80171a2:	2200      	movs	r2, #0
 80171a4:	653b      	str	r3, [r7, #80]	; 0x50
 80171a6:	657a      	str	r2, [r7, #84]	; 0x54
 80171a8:	f04f 0200 	mov.w	r2, #0
 80171ac:	f04f 0300 	mov.w	r3, #0
 80171b0:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80171b2:	0663      	lsls	r3, r4, #25
 80171b4:	2200      	movs	r2, #0
 80171b6:	2400      	movs	r4, #0
 80171b8:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 80171bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80171c0:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
                 (iota_r_packed[round] & 0x20ull) << 26 |
 80171c4:	4a44      	ldr	r2, [pc, #272]	; (80172d8 <keccak_f1600+0x19a4>)
 80171c6:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80171ca:	4413      	add	r3, r2
 80171cc:	781b      	ldrb	r3, [r3, #0]
 80171ce:	b2db      	uxtb	r3, r3
 80171d0:	2200      	movs	r2, #0
 80171d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80171d4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80171d6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80171da:	4623      	mov	r3, r4
 80171dc:	099b      	lsrs	r3, r3, #6
 80171de:	647b      	str	r3, [r7, #68]	; 0x44
 80171e0:	4623      	mov	r3, r4
 80171e2:	069b      	lsls	r3, r3, #26
 80171e4:	643b      	str	r3, [r7, #64]	; 0x40
 80171e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80171e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80171ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80171ee:	2300      	movs	r3, #0
 80171f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        s[0] ^= ((iota_r_packed[round] & 0x40ull) << 57 |
 80171f2:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80171f6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80171fa:	4622      	mov	r2, r4
 80171fc:	4313      	orrs	r3, r2
 80171fe:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8017202:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8017206:	462a      	mov	r2, r5
 8017208:	4313      	orrs	r3, r2
 801720a:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
                 (iota_r_packed[round] & 0x10ull) << 11 |
 801720e:	4a32      	ldr	r2, [pc, #200]	; (80172d8 <keccak_f1600+0x19a4>)
 8017210:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8017214:	4413      	add	r3, r2
 8017216:	781b      	ldrb	r3, [r3, #0]
 8017218:	b2db      	uxtb	r3, r3
 801721a:	2200      	movs	r2, #0
 801721c:	633b      	str	r3, [r7, #48]	; 0x30
 801721e:	637a      	str	r2, [r7, #52]	; 0x34
 8017220:	f04f 0200 	mov.w	r2, #0
 8017224:	f04f 0300 	mov.w	r3, #0
 8017228:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 801722c:	4634      	mov	r4, r6
 801722e:	02e3      	lsls	r3, r4, #11
 8017230:	462c      	mov	r4, r5
 8017232:	ea43 5354 	orr.w	r3, r3, r4, lsr #21
 8017236:	462c      	mov	r4, r5
 8017238:	02e2      	lsls	r2, r4, #11
 801723a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 801723e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017240:	2300      	movs	r3, #0
 8017242:	62fb      	str	r3, [r7, #44]	; 0x2c
                 (iota_r_packed[round] & 0x20ull) << 26 |
 8017244:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8017248:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 801724c:	4622      	mov	r2, r4
 801724e:	4313      	orrs	r3, r2
 8017250:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8017254:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8017258:	462a      	mov	r2, r5
 801725a:	4313      	orrs	r3, r2
 801725c:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
                 (iota_r_packed[round] & 0x8f));
 8017260:	4a1d      	ldr	r2, [pc, #116]	; (80172d8 <keccak_f1600+0x19a4>)
 8017262:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8017266:	4413      	add	r3, r2
 8017268:	781b      	ldrb	r3, [r3, #0]
 801726a:	b2db      	uxtb	r3, r3
 801726c:	2200      	movs	r2, #0
 801726e:	623b      	str	r3, [r7, #32]
 8017270:	627a      	str	r2, [r7, #36]	; 0x24
 8017272:	6a3b      	ldr	r3, [r7, #32]
 8017274:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8017278:	61bb      	str	r3, [r7, #24]
 801727a:	2300      	movs	r3, #0
 801727c:	61fb      	str	r3, [r7, #28]
                 (iota_r_packed[round] & 0x10ull) << 11 |
 801727e:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8017282:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8017286:	4622      	mov	r2, r4
 8017288:	4313      	orrs	r3, r2
 801728a:	613b      	str	r3, [r7, #16]
 801728c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8017290:	462a      	mov	r2, r5
 8017292:	4313      	orrs	r3, r2
 8017294:	617b      	str	r3, [r7, #20]
        s[0] ^= ((iota_r_packed[round] & 0x40ull) << 57 |
 8017296:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801729a:	4623      	mov	r3, r4
 801729c:	4043      	eors	r3, r0
 801729e:	60bb      	str	r3, [r7, #8]
 80172a0:	462b      	mov	r3, r5
 80172a2:	404b      	eors	r3, r1
 80172a4:	60fb      	str	r3, [r7, #12]
 80172a6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80172aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80172ae:	e9c3 1200 	strd	r1, r2, [r3]
    for (int round = 0; round < 24; round++) {
 80172b2:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80172b6:	3301      	adds	r3, #1
 80172b8:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 80172bc:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80172c0:	2b17      	cmp	r3, #23
 80172c2:	f77e ab4d 	ble.w	8015960 <keccak_f1600+0x2c>
    }
}
 80172c6:	bf00      	nop
 80172c8:	bf00      	nop
 80172ca:	f507 6790 	add.w	r7, r7, #1152	; 0x480
 80172ce:	46bd      	mov	sp, r7
 80172d0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80172d4:	4770      	bx	lr
 80172d6:	bf00      	nop
 80172d8:	080200a0 	.word	0x080200a0

080172dc <mbedtls_sha3_init>:

void mbedtls_sha3_init(mbedtls_sha3_context *ctx)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b082      	sub	sp, #8
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_sha3_context));
 80172e4:	22d0      	movs	r2, #208	; 0xd0
 80172e6:	2100      	movs	r1, #0
 80172e8:	6878      	ldr	r0, [r7, #4]
 80172ea:	f005 ff67 	bl	801d1bc <memset>
}
 80172ee:	bf00      	nop
 80172f0:	3708      	adds	r7, #8
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}

080172f6 <mbedtls_sha3_free>:

void mbedtls_sha3_free(mbedtls_sha3_context *ctx)
{
 80172f6:	b580      	push	{r7, lr}
 80172f8:	b082      	sub	sp, #8
 80172fa:	af00      	add	r7, sp, #0
 80172fc:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d004      	beq.n	801730e <mbedtls_sha3_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_sha3_context));
 8017304:	21d0      	movs	r1, #208	; 0xd0
 8017306:	6878      	ldr	r0, [r7, #4]
 8017308:	f7f7 fb10 	bl	800e92c <mbedtls_platform_zeroize>
 801730c:	e000      	b.n	8017310 <mbedtls_sha3_free+0x1a>
        return;
 801730e:	bf00      	nop
}
 8017310:	3708      	adds	r7, #8
 8017312:	46bd      	mov	sp, r7
 8017314:	bd80      	pop	{r7, pc}
	...

08017318 <mbedtls_sha3_starts>:

/*
 * SHA-3 context setup
 */
int mbedtls_sha3_starts(mbedtls_sha3_context *ctx, mbedtls_sha3_id id)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b082      	sub	sp, #8
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
 8017320:	460b      	mov	r3, r1
 8017322:	70fb      	strb	r3, [r7, #3]
    switch (id) {
 8017324:	78fb      	ldrb	r3, [r7, #3]
 8017326:	3b01      	subs	r3, #1
 8017328:	2b03      	cmp	r3, #3
 801732a:	d82f      	bhi.n	801738c <mbedtls_sha3_starts+0x74>
 801732c:	a201      	add	r2, pc, #4	; (adr r2, 8017334 <mbedtls_sha3_starts+0x1c>)
 801732e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017332:	bf00      	nop
 8017334:	08017345 	.word	0x08017345
 8017338:	08017357 	.word	0x08017357
 801733c:	08017369 	.word	0x08017369
 8017340:	0801737b 	.word	0x0801737b
        case MBEDTLS_SHA3_224:
            ctx->olen = 224 / 8;
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	221c      	movs	r2, #28
 8017348:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
            ctx->max_block_size = 1152 / 8;
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	2290      	movs	r2, #144	; 0x90
 8017350:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
            break;
 8017354:	e01d      	b.n	8017392 <mbedtls_sha3_starts+0x7a>
        case MBEDTLS_SHA3_256:
            ctx->olen = 256 / 8;
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	2220      	movs	r2, #32
 801735a:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
            ctx->max_block_size = 1088 / 8;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	2288      	movs	r2, #136	; 0x88
 8017362:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
            break;
 8017366:	e014      	b.n	8017392 <mbedtls_sha3_starts+0x7a>
        case MBEDTLS_SHA3_384:
            ctx->olen = 384 / 8;
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	2230      	movs	r2, #48	; 0x30
 801736c:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
            ctx->max_block_size = 832 / 8;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	2268      	movs	r2, #104	; 0x68
 8017374:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
            break;
 8017378:	e00b      	b.n	8017392 <mbedtls_sha3_starts+0x7a>
        case MBEDTLS_SHA3_512:
            ctx->olen = 512 / 8;
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	2240      	movs	r2, #64	; 0x40
 801737e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
            ctx->max_block_size = 576 / 8;
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	2248      	movs	r2, #72	; 0x48
 8017386:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
            break;
 801738a:	e002      	b.n	8017392 <mbedtls_sha3_starts+0x7a>
        default:
            return MBEDTLS_ERR_SHA3_BAD_INPUT_DATA;
 801738c:	f06f 0375 	mvn.w	r3, #117	; 0x75
 8017390:	e00a      	b.n	80173a8 <mbedtls_sha3_starts+0x90>
    }

    memset(ctx->state, 0, sizeof(ctx->state));
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	22c8      	movs	r2, #200	; 0xc8
 8017396:	2100      	movs	r1, #0
 8017398:	4618      	mov	r0, r3
 801739a:	f005 ff0f 	bl	801d1bc <memset>
    ctx->index = 0;
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	2200      	movs	r2, #0
 80173a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    return 0;
 80173a6:	2300      	movs	r3, #0
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	3708      	adds	r7, #8
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}

080173b0 <mbedtls_sha3_update>:
 * SHA-3 process buffer
 */
int mbedtls_sha3_update(mbedtls_sha3_context *ctx,
                        const uint8_t *input,
                        size_t ilen)
{
 80173b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80173b4:	b092      	sub	sp, #72	; 0x48
 80173b6:	af00      	add	r7, sp, #0
 80173b8:	6378      	str	r0, [r7, #52]	; 0x34
 80173ba:	6339      	str	r1, [r7, #48]	; 0x30
 80173bc:	62fa      	str	r2, [r7, #44]	; 0x2c
    if (ilen >= 8) {
 80173be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c0:	2b07      	cmp	r3, #7
 80173c2:	f240 811f 	bls.w	8017604 <mbedtls_sha3_update+0x254>
        // 8-byte align index
        int align_bytes = 8 - (ctx->index % 8);
 80173c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173c8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80173cc:	f003 0307 	and.w	r3, r3, #7
 80173d0:	f1c3 0308 	rsb	r3, r3, #8
 80173d4:	647b      	str	r3, [r7, #68]	; 0x44
        if (align_bytes) {
 80173d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173d8:	2b00      	cmp	r3, #0
 80173da:	f000 80ba 	beq.w	8017552 <mbedtls_sha3_update+0x1a2>
            for (; align_bytes > 0; align_bytes--) {
 80173de:	e046      	b.n	801746e <mbedtls_sha3_update+0xbe>
                ABSORB(ctx, ctx->index, *input++);
 80173e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173e2:	1c53      	adds	r3, r2, #1
 80173e4:	633b      	str	r3, [r7, #48]	; 0x30
 80173e6:	7813      	ldrb	r3, [r2, #0]
 80173e8:	b2db      	uxtb	r3, r3
 80173ea:	2200      	movs	r2, #0
 80173ec:	623b      	str	r3, [r7, #32]
 80173ee:	627a      	str	r2, [r7, #36]	; 0x24
 80173f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80173f6:	00db      	lsls	r3, r3, #3
 80173f8:	f003 0138 	and.w	r1, r3, #56	; 0x38
 80173fc:	f1a1 0320 	sub.w	r3, r1, #32
 8017400:	f1c1 0220 	rsb	r2, r1, #32
 8017404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017406:	fa00 f501 	lsl.w	r5, r0, r1
 801740a:	6a38      	ldr	r0, [r7, #32]
 801740c:	fa00 f303 	lsl.w	r3, r0, r3
 8017410:	431d      	orrs	r5, r3
 8017412:	6a3b      	ldr	r3, [r7, #32]
 8017414:	fa23 f202 	lsr.w	r2, r3, r2
 8017418:	4315      	orrs	r5, r2
 801741a:	6a3b      	ldr	r3, [r7, #32]
 801741c:	fa03 f401 	lsl.w	r4, r3, r1
 8017420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017422:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017426:	08db      	lsrs	r3, r3, #3
 8017428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801742a:	00db      	lsls	r3, r3, #3
 801742c:	4413      	add	r3, r2
 801742e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017434:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017438:	08db      	lsrs	r3, r3, #3
 801743a:	ea84 0200 	eor.w	r2, r4, r0
 801743e:	61ba      	str	r2, [r7, #24]
 8017440:	ea85 0201 	eor.w	r2, r5, r1
 8017444:	61fa      	str	r2, [r7, #28]
 8017446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017448:	00db      	lsls	r3, r3, #3
 801744a:	4413      	add	r3, r2
 801744c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8017450:	e9c3 1200 	strd	r1, r2, [r3]
                ilen--;
 8017454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017456:	3b01      	subs	r3, #1
 8017458:	62fb      	str	r3, [r7, #44]	; 0x2c
                ctx->index++;
 801745a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801745c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017460:	1c5a      	adds	r2, r3, #1
 8017462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017464:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
            for (; align_bytes > 0; align_bytes--) {
 8017468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801746a:	3b01      	subs	r3, #1
 801746c:	647b      	str	r3, [r7, #68]	; 0x44
 801746e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017470:	2b00      	cmp	r3, #0
 8017472:	dcb5      	bgt.n	80173e0 <mbedtls_sha3_update+0x30>
            }
            if ((ctx->index = ctx->index % ctx->max_block_size) == 0) {
 8017474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017476:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801747a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801747c:	f8b2 20ce 	ldrh.w	r2, [r2, #206]	; 0xce
 8017480:	fbb3 f1f2 	udiv	r1, r3, r2
 8017484:	fb01 f202 	mul.w	r2, r1, r2
 8017488:	1a9a      	subs	r2, r3, r2
 801748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801748c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8017490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017492:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017496:	2b00      	cmp	r3, #0
 8017498:	d15b      	bne.n	8017552 <mbedtls_sha3_update+0x1a2>
                keccak_f1600(ctx);
 801749a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801749c:	f7fe fa4a 	bl	8015934 <keccak_f1600>
            }
        }

        // process input in 8-byte chunks
        while (ilen >= 8) {
 80174a0:	e057      	b.n	8017552 <mbedtls_sha3_update+0x1a2>
 80174a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a4:	643b      	str	r3, [r7, #64]	; 0x40
    memcpy(&r, p, sizeof(r));
 80174a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80174aa:	2208      	movs	r2, #8
 80174ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80174ae:	4618      	mov	r0, r3
 80174b0:	f005 ff22 	bl	801d2f8 <memcpy>
    return r;
 80174b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
            ABSORB(ctx, ctx->index, MBEDTLS_GET_UINT64_LE(input, 0));
 80174b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80174ba:	f8d1 10c8 	ldr.w	r1, [r1, #200]	; 0xc8
 80174be:	00c9      	lsls	r1, r1, #3
 80174c0:	f001 0038 	and.w	r0, r1, #56	; 0x38
 80174c4:	f1a0 0420 	sub.w	r4, r0, #32
 80174c8:	f1c0 0120 	rsb	r1, r0, #32
 80174cc:	fa03 fb00 	lsl.w	fp, r3, r0
 80174d0:	fa02 f404 	lsl.w	r4, r2, r4
 80174d4:	ea4b 0b04 	orr.w	fp, fp, r4
 80174d8:	fa22 f101 	lsr.w	r1, r2, r1
 80174dc:	ea4b 0b01 	orr.w	fp, fp, r1
 80174e0:	fa02 fa00 	lsl.w	sl, r2, r0
 80174e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80174ea:	08db      	lsrs	r3, r3, #3
 80174ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174ee:	00db      	lsls	r3, r3, #3
 80174f0:	4413      	add	r3, r2
 80174f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80174f8:	f8d1 10c8 	ldr.w	r1, [r1, #200]	; 0xc8
 80174fc:	08c9      	lsrs	r1, r1, #3
 80174fe:	ea8a 0002 	eor.w	r0, sl, r2
 8017502:	6138      	str	r0, [r7, #16]
 8017504:	ea8b 0303 	eor.w	r3, fp, r3
 8017508:	617b      	str	r3, [r7, #20]
 801750a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801750c:	00cb      	lsls	r3, r1, #3
 801750e:	4413      	add	r3, r2
 8017510:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8017514:	e9c3 1200 	strd	r1, r2, [r3]
            input += 8;
 8017518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801751a:	3308      	adds	r3, #8
 801751c:	633b      	str	r3, [r7, #48]	; 0x30
            ilen -= 8;
 801751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017520:	3b08      	subs	r3, #8
 8017522:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((ctx->index = (ctx->index + 8) % ctx->max_block_size) == 0) {
 8017524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017526:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801752a:	3308      	adds	r3, #8
 801752c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801752e:	f8b2 20ce 	ldrh.w	r2, [r2, #206]	; 0xce
 8017532:	fbb3 f1f2 	udiv	r1, r3, r2
 8017536:	fb01 f202 	mul.w	r2, r1, r2
 801753a:	1a9a      	subs	r2, r3, r2
 801753c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801753e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8017542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017544:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017548:	2b00      	cmp	r3, #0
 801754a:	d102      	bne.n	8017552 <mbedtls_sha3_update+0x1a2>
                keccak_f1600(ctx);
 801754c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801754e:	f7fe f9f1 	bl	8015934 <keccak_f1600>
        while (ilen >= 8) {
 8017552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017554:	2b07      	cmp	r3, #7
 8017556:	d8a4      	bhi.n	80174a2 <mbedtls_sha3_update+0xf2>
            }
        }
    }

    // handle remaining bytes
    while (ilen-- > 0) {
 8017558:	e054      	b.n	8017604 <mbedtls_sha3_update+0x254>
        ABSORB(ctx, ctx->index, *input++);
 801755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801755c:	1c5a      	adds	r2, r3, #1
 801755e:	633a      	str	r2, [r7, #48]	; 0x30
 8017560:	781b      	ldrb	r3, [r3, #0]
 8017562:	b2db      	uxtb	r3, r3
 8017564:	2200      	movs	r2, #0
 8017566:	60bb      	str	r3, [r7, #8]
 8017568:	60fa      	str	r2, [r7, #12]
 801756a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801756c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017570:	00db      	lsls	r3, r3, #3
 8017572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8017576:	f1a3 0120 	sub.w	r1, r3, #32
 801757a:	f1c3 0220 	rsb	r2, r3, #32
 801757e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8017582:	4628      	mov	r0, r5
 8017584:	fa00 f903 	lsl.w	r9, r0, r3
 8017588:	4620      	mov	r0, r4
 801758a:	fa00 f101 	lsl.w	r1, r0, r1
 801758e:	ea49 0901 	orr.w	r9, r9, r1
 8017592:	4621      	mov	r1, r4
 8017594:	fa21 f202 	lsr.w	r2, r1, r2
 8017598:	ea49 0902 	orr.w	r9, r9, r2
 801759c:	4622      	mov	r2, r4
 801759e:	fa02 f803 	lsl.w	r8, r2, r3
 80175a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175a4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80175a8:	08db      	lsrs	r3, r3, #3
 80175aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80175ac:	00db      	lsls	r3, r3, #3
 80175ae:	4413      	add	r3, r2
 80175b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80175b6:	f8d1 10c8 	ldr.w	r1, [r1, #200]	; 0xc8
 80175ba:	08c9      	lsrs	r1, r1, #3
 80175bc:	ea88 0002 	eor.w	r0, r8, r2
 80175c0:	6038      	str	r0, [r7, #0]
 80175c2:	ea89 0303 	eor.w	r3, r9, r3
 80175c6:	607b      	str	r3, [r7, #4]
 80175c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80175ca:	00cb      	lsls	r3, r1, #3
 80175cc:	4413      	add	r3, r2
 80175ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80175d2:	e9c3 1200 	strd	r1, r2, [r3]
        if ((ctx->index = (ctx->index + 1) % ctx->max_block_size) == 0) {
 80175d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175d8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80175dc:	3301      	adds	r3, #1
 80175de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80175e0:	f8b2 20ce 	ldrh.w	r2, [r2, #206]	; 0xce
 80175e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80175e8:	fb01 f202 	mul.w	r2, r1, r2
 80175ec:	1a9a      	subs	r2, r3, r2
 80175ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80175f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d102      	bne.n	8017604 <mbedtls_sha3_update+0x254>
            keccak_f1600(ctx);
 80175fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017600:	f7fe f998 	bl	8015934 <keccak_f1600>
    while (ilen-- > 0) {
 8017604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017606:	1e5a      	subs	r2, r3, #1
 8017608:	62fa      	str	r2, [r7, #44]	; 0x2c
 801760a:	2b00      	cmp	r3, #0
 801760c:	d1a5      	bne.n	801755a <mbedtls_sha3_update+0x1aa>
        }
    }

    return 0;
 801760e:	2300      	movs	r3, #0
}
 8017610:	4618      	mov	r0, r3
 8017612:	3748      	adds	r7, #72	; 0x48
 8017614:	46bd      	mov	sp, r7
 8017616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801761a <mbedtls_sha3_finish>:

int mbedtls_sha3_finish(mbedtls_sha3_context *ctx,
                        uint8_t *output, size_t olen)
{
 801761a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801761e:	b08d      	sub	sp, #52	; 0x34
 8017620:	af00      	add	r7, sp, #0
 8017622:	6278      	str	r0, [r7, #36]	; 0x24
 8017624:	6239      	str	r1, [r7, #32]
 8017626:	61fa      	str	r2, [r7, #28]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8017628:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801762c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Catch SHA-3 families, with fixed output length */
    if (ctx->olen > 0) {
 801762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017630:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8017634:	2b00      	cmp	r3, #0
 8017636:	d00e      	beq.n	8017656 <mbedtls_sha3_finish+0x3c>
        if (ctx->olen > olen) {
 8017638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801763a:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 801763e:	461a      	mov	r2, r3
 8017640:	69fb      	ldr	r3, [r7, #28]
 8017642:	4293      	cmp	r3, r2
 8017644:	d203      	bcs.n	801764e <mbedtls_sha3_finish+0x34>
            ret = MBEDTLS_ERR_SHA3_BAD_INPUT_DATA;
 8017646:	f06f 0375 	mvn.w	r3, #117	; 0x75
 801764a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto exit;
 801764c:	e0bb      	b.n	80177c6 <mbedtls_sha3_finish+0x1ac>
        }
        olen = ctx->olen;
 801764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017650:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8017654:	61fb      	str	r3, [r7, #28]
    }

    ABSORB(ctx, ctx->index, XOR_BYTE);
 8017656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017658:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801765c:	08db      	lsrs	r3, r3, #3
 801765e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017660:	00db      	lsls	r3, r3, #3
 8017662:	4413      	add	r3, r2
 8017664:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017668:	e9c7 0100 	strd	r0, r1, [r7]
 801766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801766e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017672:	00db      	lsls	r3, r3, #3
 8017674:	f003 0638 	and.w	r6, r3, #56	; 0x38
 8017678:	f04f 0206 	mov.w	r2, #6
 801767c:	f04f 0300 	mov.w	r3, #0
 8017680:	f1a6 0120 	sub.w	r1, r6, #32
 8017684:	f1c6 0020 	rsb	r0, r6, #32
 8017688:	fa03 f506 	lsl.w	r5, r3, r6
 801768c:	fa02 f101 	lsl.w	r1, r2, r1
 8017690:	430d      	orrs	r5, r1
 8017692:	fa22 f000 	lsr.w	r0, r2, r0
 8017696:	4305      	orrs	r5, r0
 8017698:	fa02 f406 	lsl.w	r4, r2, r6
 801769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801769e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80176a2:	08db      	lsrs	r3, r3, #3
 80176a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80176a8:	4602      	mov	r2, r0
 80176aa:	4062      	eors	r2, r4
 80176ac:	613a      	str	r2, [r7, #16]
 80176ae:	460a      	mov	r2, r1
 80176b0:	406a      	eors	r2, r5
 80176b2:	617a      	str	r2, [r7, #20]
 80176b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80176b6:	00db      	lsls	r3, r3, #3
 80176b8:	4413      	add	r3, r2
 80176ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80176be:	e9c3 1200 	strd	r1, r2, [r3]
    ABSORB(ctx, ctx->max_block_size - 1, 0x80);
 80176c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176c4:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 80176c8:	3b01      	subs	r3, #1
 80176ca:	10db      	asrs	r3, r3, #3
 80176cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80176ce:	00db      	lsls	r3, r3, #3
 80176d0:	4413      	add	r3, r2
 80176d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80176d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176d8:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 80176dc:	3b01      	subs	r3, #1
 80176de:	00db      	lsls	r3, r3, #3
 80176e0:	f003 0138 	and.w	r1, r3, #56	; 0x38
 80176e4:	f04f 0280 	mov.w	r2, #128	; 0x80
 80176e8:	f04f 0300 	mov.w	r3, #0
 80176ec:	f1a1 0620 	sub.w	r6, r1, #32
 80176f0:	f1c1 0020 	rsb	r0, r1, #32
 80176f4:	fa03 f901 	lsl.w	r9, r3, r1
 80176f8:	fa02 f606 	lsl.w	r6, r2, r6
 80176fc:	ea49 0906 	orr.w	r9, r9, r6
 8017700:	fa22 f000 	lsr.w	r0, r2, r0
 8017704:	ea49 0900 	orr.w	r9, r9, r0
 8017708:	fa02 f801 	lsl.w	r8, r2, r1
 801770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801770e:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8017712:	3b01      	subs	r3, #1
 8017714:	10db      	asrs	r3, r3, #3
 8017716:	ea84 0208 	eor.w	r2, r4, r8
 801771a:	60ba      	str	r2, [r7, #8]
 801771c:	ea85 0209 	eor.w	r2, r5, r9
 8017720:	60fa      	str	r2, [r7, #12]
 8017722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017724:	00db      	lsls	r3, r3, #3
 8017726:	4413      	add	r3, r2
 8017728:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801772c:	e9c3 1200 	strd	r1, r2, [r3]
    keccak_f1600(ctx);
 8017730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017732:	f7fe f8ff 	bl	8015934 <keccak_f1600>
    ctx->index = 0;
 8017736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017738:	2200      	movs	r2, #0
 801773a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    while (olen-- > 0) {
 801773e:	e03b      	b.n	80177b8 <mbedtls_sha3_finish+0x19e>
        *output++ = SQUEEZE(ctx, ctx->index);
 8017740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017742:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017746:	08db      	lsrs	r3, r3, #3
 8017748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801774a:	00db      	lsls	r3, r3, #3
 801774c:	4413      	add	r3, r2
 801774e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017754:	f8d1 10c8 	ldr.w	r1, [r1, #200]	; 0xc8
 8017758:	00c9      	lsls	r1, r1, #3
 801775a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 801775e:	f1c1 0420 	rsb	r4, r1, #32
 8017762:	f1a1 0020 	sub.w	r0, r1, #32
 8017766:	fa22 fa01 	lsr.w	sl, r2, r1
 801776a:	fa03 f404 	lsl.w	r4, r3, r4
 801776e:	ea4a 0a04 	orr.w	sl, sl, r4
 8017772:	fa23 f000 	lsr.w	r0, r3, r0
 8017776:	ea4a 0a00 	orr.w	sl, sl, r0
 801777a:	fa23 fb01 	lsr.w	fp, r3, r1
 801777e:	6a3b      	ldr	r3, [r7, #32]
 8017780:	1c5a      	adds	r2, r3, #1
 8017782:	623a      	str	r2, [r7, #32]
 8017784:	fa5f f28a 	uxtb.w	r2, sl
 8017788:	701a      	strb	r2, [r3, #0]

        if ((ctx->index = (ctx->index + 1) % ctx->max_block_size) == 0) {
 801778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801778c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017790:	3301      	adds	r3, #1
 8017792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017794:	f8b2 20ce 	ldrh.w	r2, [r2, #206]	; 0xce
 8017798:	fbb3 f1f2 	udiv	r1, r3, r2
 801779c:	fb01 f202 	mul.w	r2, r1, r2
 80177a0:	1a9a      	subs	r2, r3, r2
 80177a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80177a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d102      	bne.n	80177b8 <mbedtls_sha3_finish+0x19e>
            keccak_f1600(ctx);
 80177b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177b4:	f7fe f8be 	bl	8015934 <keccak_f1600>
    while (olen-- > 0) {
 80177b8:	69fb      	ldr	r3, [r7, #28]
 80177ba:	1e5a      	subs	r2, r3, #1
 80177bc:	61fa      	str	r2, [r7, #28]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d1be      	bne.n	8017740 <mbedtls_sha3_finish+0x126>
        }
    }

    ret = 0;
 80177c2:	2300      	movs	r3, #0
 80177c4:	62fb      	str	r3, [r7, #44]	; 0x2c

exit:
    mbedtls_sha3_free(ctx);
 80177c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177c8:	f7ff fd95 	bl	80172f6 <mbedtls_sha3_free>
    return ret;
 80177cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80177ce:	4618      	mov	r0, r3
 80177d0:	3734      	adds	r7, #52	; 0x34
 80177d2:	46bd      	mov	sp, r7
 80177d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080177d8 <mbedtls_sha3>:
/*
 * output = SHA-3( input buffer )
 */
int mbedtls_sha3(mbedtls_sha3_id id, const uint8_t *input,
                 size_t ilen, uint8_t *output, size_t olen)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b0ba      	sub	sp, #232	; 0xe8
 80177dc:	af00      	add	r7, sp, #0
 80177de:	60b9      	str	r1, [r7, #8]
 80177e0:	607a      	str	r2, [r7, #4]
 80177e2:	603b      	str	r3, [r7, #0]
 80177e4:	4603      	mov	r3, r0
 80177e6:	73fb      	strb	r3, [r7, #15]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80177e8:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80177ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    mbedtls_sha3_context ctx;

    mbedtls_sha3_init(&ctx);
 80177f0:	f107 0310 	add.w	r3, r7, #16
 80177f4:	4618      	mov	r0, r3
 80177f6:	f7ff fd71 	bl	80172dc <mbedtls_sha3_init>

    /* Sanity checks are performed in every mbedtls_sha3_xxx() */
    if ((ret = mbedtls_sha3_starts(&ctx, id)) != 0) {
 80177fa:	7bfa      	ldrb	r2, [r7, #15]
 80177fc:	f107 0310 	add.w	r3, r7, #16
 8017800:	4611      	mov	r1, r2
 8017802:	4618      	mov	r0, r3
 8017804:	f7ff fd88 	bl	8017318 <mbedtls_sha3_starts>
 8017808:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 801780c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017810:	2b00      	cmp	r3, #0
 8017812:	d11a      	bne.n	801784a <mbedtls_sha3+0x72>
        goto exit;
    }

    if ((ret = mbedtls_sha3_update(&ctx, input, ilen)) != 0) {
 8017814:	f107 0310 	add.w	r3, r7, #16
 8017818:	687a      	ldr	r2, [r7, #4]
 801781a:	68b9      	ldr	r1, [r7, #8]
 801781c:	4618      	mov	r0, r3
 801781e:	f7ff fdc7 	bl	80173b0 <mbedtls_sha3_update>
 8017822:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 8017826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801782a:	2b00      	cmp	r3, #0
 801782c:	d10f      	bne.n	801784e <mbedtls_sha3+0x76>
        goto exit;
    }

    if ((ret = mbedtls_sha3_finish(&ctx, output, olen)) != 0) {
 801782e:	f107 0310 	add.w	r3, r7, #16
 8017832:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8017836:	6839      	ldr	r1, [r7, #0]
 8017838:	4618      	mov	r0, r3
 801783a:	f7ff feee 	bl	801761a <mbedtls_sha3_finish>
 801783e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 8017842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017846:	2b00      	cmp	r3, #0
        goto exit;
    }

exit:
 8017848:	e002      	b.n	8017850 <mbedtls_sha3+0x78>
        goto exit;
 801784a:	bf00      	nop
 801784c:	e000      	b.n	8017850 <mbedtls_sha3+0x78>
        goto exit;
 801784e:	bf00      	nop
    mbedtls_sha3_free(&ctx);
 8017850:	f107 0310 	add.w	r3, r7, #16
 8017854:	4618      	mov	r0, r3
 8017856:	f7ff fd4e 	bl	80172f6 <mbedtls_sha3_free>

    return ret;
 801785a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
}
 801785e:	4618      	mov	r0, r3
 8017860:	37e8      	adds	r7, #232	; 0xe8
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}

08017866 <mbedtls_sha512_init>:
#else
#define sha512_put_uint64_be    MBEDTLS_PUT_UINT64_BE
#endif /* MBEDTLS_SHA512_SMALLER */

void mbedtls_sha512_init(mbedtls_sha512_context *ctx)
{
 8017866:	b580      	push	{r7, lr}
 8017868:	b082      	sub	sp, #8
 801786a:	af00      	add	r7, sp, #0
 801786c:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_sha512_context));
 801786e:	22d8      	movs	r2, #216	; 0xd8
 8017870:	2100      	movs	r1, #0
 8017872:	6878      	ldr	r0, [r7, #4]
 8017874:	f005 fca2 	bl	801d1bc <memset>
}
 8017878:	bf00      	nop
 801787a:	3708      	adds	r7, #8
 801787c:	46bd      	mov	sp, r7
 801787e:	bd80      	pop	{r7, pc}

08017880 <mbedtls_sha512_free>:

void mbedtls_sha512_free(mbedtls_sha512_context *ctx)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b082      	sub	sp, #8
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d004      	beq.n	8017898 <mbedtls_sha512_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_sha512_context));
 801788e:	21d8      	movs	r1, #216	; 0xd8
 8017890:	6878      	ldr	r0, [r7, #4]
 8017892:	f7f7 f84b 	bl	800e92c <mbedtls_platform_zeroize>
 8017896:	e000      	b.n	801789a <mbedtls_sha512_free+0x1a>
        return;
 8017898:	bf00      	nop
}
 801789a:	3708      	adds	r7, #8
 801789c:	46bd      	mov	sp, r7
 801789e:	bd80      	pop	{r7, pc}

080178a0 <mbedtls_sha512_starts>:

/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts(mbedtls_sha512_context *ctx, int is384)
{
 80178a0:	b480      	push	{r7}
 80178a2:	b083      	sub	sp, #12
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	6039      	str	r1, [r7, #0]
#if defined(MBEDTLS_SHA384_C) && defined(MBEDTLS_SHA512_C)
    if (is384 != 0 && is384 != 1) {
 80178aa:	683b      	ldr	r3, [r7, #0]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d005      	beq.n	80178bc <mbedtls_sha512_starts+0x1c>
 80178b0:	683b      	ldr	r3, [r7, #0]
 80178b2:	2b01      	cmp	r3, #1
 80178b4:	d002      	beq.n	80178bc <mbedtls_sha512_starts+0x1c>
        return MBEDTLS_ERR_SHA512_BAD_INPUT_DATA;
 80178b6:	f06f 0374 	mvn.w	r3, #116	; 0x74
 80178ba:	e076      	b.n	80179aa <mbedtls_sha512_starts+0x10a>
    if (is384 == 0) {
        return MBEDTLS_ERR_SHA512_BAD_INPUT_DATA;
    }
#endif

    ctx->total[0] = 0;
 80178bc:	6879      	ldr	r1, [r7, #4]
 80178be:	f04f 0200 	mov.w	r2, #0
 80178c2:	f04f 0300 	mov.w	r3, #0
 80178c6:	e9c1 2300 	strd	r2, r3, [r1]
    ctx->total[1] = 0;
 80178ca:	6879      	ldr	r1, [r7, #4]
 80178cc:	f04f 0200 	mov.w	r2, #0
 80178d0:	f04f 0300 	mov.w	r3, #0
 80178d4:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if (is384 == 0) {
 80178d8:	683b      	ldr	r3, [r7, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d130      	bne.n	8017940 <mbedtls_sha512_starts+0xa0>
#if defined(MBEDTLS_SHA512_C)
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 80178de:	6879      	ldr	r1, [r7, #4]
 80178e0:	a335      	add	r3, pc, #212	; (adr r3, 80179b8 <mbedtls_sha512_starts+0x118>)
 80178e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 80178ea:	6879      	ldr	r1, [r7, #4]
 80178ec:	a334      	add	r3, pc, #208	; (adr r3, 80179c0 <mbedtls_sha512_starts+0x120>)
 80178ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178f2:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 80178f6:	6879      	ldr	r1, [r7, #4]
 80178f8:	a333      	add	r3, pc, #204	; (adr r3, 80179c8 <mbedtls_sha512_starts+0x128>)
 80178fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178fe:	e9c1 2308 	strd	r2, r3, [r1, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 8017902:	6879      	ldr	r1, [r7, #4]
 8017904:	a332      	add	r3, pc, #200	; (adr r3, 80179d0 <mbedtls_sha512_starts+0x130>)
 8017906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801790a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 801790e:	6879      	ldr	r1, [r7, #4]
 8017910:	a331      	add	r3, pc, #196	; (adr r3, 80179d8 <mbedtls_sha512_starts+0x138>)
 8017912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017916:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 801791a:	6879      	ldr	r1, [r7, #4]
 801791c:	a330      	add	r3, pc, #192	; (adr r3, 80179e0 <mbedtls_sha512_starts+0x140>)
 801791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017922:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 8017926:	6879      	ldr	r1, [r7, #4]
 8017928:	a32f      	add	r3, pc, #188	; (adr r3, 80179e8 <mbedtls_sha512_starts+0x148>)
 801792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801792e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 8017932:	6879      	ldr	r1, [r7, #4]
 8017934:	a32e      	add	r3, pc, #184	; (adr r3, 80179f0 <mbedtls_sha512_starts+0x150>)
 8017936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801793a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 801793e:	e02f      	b.n	80179a0 <mbedtls_sha512_starts+0x100>
#endif /* MBEDTLS_SHA512_C */
    } else {
#if defined(MBEDTLS_SHA384_C)
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 8017940:	6879      	ldr	r1, [r7, #4]
 8017942:	a32d      	add	r3, pc, #180	; (adr r3, 80179f8 <mbedtls_sha512_starts+0x158>)
 8017944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017948:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 801794c:	6879      	ldr	r1, [r7, #4]
 801794e:	a32c      	add	r3, pc, #176	; (adr r3, 8017a00 <mbedtls_sha512_starts+0x160>)
 8017950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017954:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 8017958:	6879      	ldr	r1, [r7, #4]
 801795a:	a32b      	add	r3, pc, #172	; (adr r3, 8017a08 <mbedtls_sha512_starts+0x168>)
 801795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017960:	e9c1 2308 	strd	r2, r3, [r1, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 8017964:	6879      	ldr	r1, [r7, #4]
 8017966:	a32a      	add	r3, pc, #168	; (adr r3, 8017a10 <mbedtls_sha512_starts+0x170>)
 8017968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801796c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 8017970:	6879      	ldr	r1, [r7, #4]
 8017972:	a329      	add	r3, pc, #164	; (adr r3, 8017a18 <mbedtls_sha512_starts+0x178>)
 8017974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017978:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 801797c:	6879      	ldr	r1, [r7, #4]
 801797e:	a328      	add	r3, pc, #160	; (adr r3, 8017a20 <mbedtls_sha512_starts+0x180>)
 8017980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017984:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 8017988:	6879      	ldr	r1, [r7, #4]
 801798a:	a327      	add	r3, pc, #156	; (adr r3, 8017a28 <mbedtls_sha512_starts+0x188>)
 801798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017990:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 8017994:	6879      	ldr	r1, [r7, #4]
 8017996:	a326      	add	r3, pc, #152	; (adr r3, 8017a30 <mbedtls_sha512_starts+0x190>)
 8017998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801799c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
#endif /* MBEDTLS_SHA384_C */
    }

#if defined(MBEDTLS_SHA384_C)
    ctx->is384 = is384;
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	683a      	ldr	r2, [r7, #0]
 80179a4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif

    return 0;
 80179a8:	2300      	movs	r3, #0
}
 80179aa:	4618      	mov	r0, r3
 80179ac:	370c      	adds	r7, #12
 80179ae:	46bd      	mov	sp, r7
 80179b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b4:	4770      	bx	lr
 80179b6:	bf00      	nop
 80179b8:	f3bcc908 	.word	0xf3bcc908
 80179bc:	6a09e667 	.word	0x6a09e667
 80179c0:	84caa73b 	.word	0x84caa73b
 80179c4:	bb67ae85 	.word	0xbb67ae85
 80179c8:	fe94f82b 	.word	0xfe94f82b
 80179cc:	3c6ef372 	.word	0x3c6ef372
 80179d0:	5f1d36f1 	.word	0x5f1d36f1
 80179d4:	a54ff53a 	.word	0xa54ff53a
 80179d8:	ade682d1 	.word	0xade682d1
 80179dc:	510e527f 	.word	0x510e527f
 80179e0:	2b3e6c1f 	.word	0x2b3e6c1f
 80179e4:	9b05688c 	.word	0x9b05688c
 80179e8:	fb41bd6b 	.word	0xfb41bd6b
 80179ec:	1f83d9ab 	.word	0x1f83d9ab
 80179f0:	137e2179 	.word	0x137e2179
 80179f4:	5be0cd19 	.word	0x5be0cd19
 80179f8:	c1059ed8 	.word	0xc1059ed8
 80179fc:	cbbb9d5d 	.word	0xcbbb9d5d
 8017a00:	367cd507 	.word	0x367cd507
 8017a04:	629a292a 	.word	0x629a292a
 8017a08:	3070dd17 	.word	0x3070dd17
 8017a0c:	9159015a 	.word	0x9159015a
 8017a10:	f70e5939 	.word	0xf70e5939
 8017a14:	152fecd8 	.word	0x152fecd8
 8017a18:	ffc00b31 	.word	0xffc00b31
 8017a1c:	67332667 	.word	0x67332667
 8017a20:	68581511 	.word	0x68581511
 8017a24:	8eb44a87 	.word	0x8eb44a87
 8017a28:	64f98fa7 	.word	0x64f98fa7
 8017a2c:	db0c2e0d 	.word	0xdb0c2e0d
 8017a30:	befa4fa4 	.word	0xbefa4fa4
 8017a34:	47b5481d 	.word	0x47b5481d

08017a38 <mbedtls_internal_sha512_process>:
 */
static
#endif
int mbedtls_internal_sha512_process_c(mbedtls_sha512_context *ctx,
                                      const unsigned char data[SHA512_BLOCK_SIZE])
{
 8017a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a3c:	f6ad 1d3c 	subw	sp, sp, #2364	; 0x93c
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017a46:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8017a4a:	6018      	str	r0, [r3, #0]
 8017a4c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017a50:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017a54:	6019      	str	r1, [r3, #0]
        local.temp1 = (h) + S3(e) + F1((e), (f), (g)) + (K) + (x);    \
        local.temp2 = S2(a) + F0((a), (b), (c));                      \
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while (0)

    for (i = 0; i < 8; i++) {
 8017a56:	2300      	movs	r3, #0
 8017a58:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8017a5c:	e01b      	b.n	8017a96 <mbedtls_internal_sha512_process+0x5e>
        local.A[i] = ctx->state[i];
 8017a5e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017a62:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8017a66:	681a      	ldr	r2, [r3, #0]
 8017a68:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017a6c:	3302      	adds	r3, #2
 8017a6e:	00db      	lsls	r3, r3, #3
 8017a70:	4413      	add	r3, r2
 8017a72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a76:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017a7a:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017a7e:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017a82:	3352      	adds	r3, #82	; 0x52
 8017a84:	00db      	lsls	r3, r3, #3
 8017a86:	4413      	add	r3, r2
 8017a88:	e9c3 0100 	strd	r0, r1, [r3]
    for (i = 0; i < 8; i++) {
 8017a8c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017a90:	3301      	adds	r3, #1
 8017a92:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8017a96:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017a9a:	2b07      	cmp	r3, #7
 8017a9c:	dddf      	ble.n	8017a5e <mbedtls_internal_sha512_process+0x26>
        local.A[4] = local.A[3]; local.A[3] = local.A[2];
        local.A[2] = local.A[1]; local.A[1] = local.A[0];
        local.A[0] = local.temp1;
    }
#else /* MBEDTLS_SHA512_SMALLER */
    for (i = 0; i < 16; i++) {
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8017aa4:	e02b      	b.n	8017afe <mbedtls_internal_sha512_process+0xc6>
        local.W[i] = MBEDTLS_GET_UINT64_BE(data, i << 3);
 8017aa6:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017aaa:	00db      	lsls	r3, r3, #3
 8017aac:	461a      	mov	r2, r3
 8017aae:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017ab2:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	4413      	add	r3, r2
 8017aba:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    memcpy(&r, p, sizeof(r));
 8017abe:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8017ac2:	2208      	movs	r2, #8
 8017ac4:	f8d7 1930 	ldr.w	r1, [r7, #2352]	; 0x930
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f005 fc15 	bl	801d2f8 <memcpy>
    return r;
 8017ace:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8017ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ad6:	ba11      	rev	r1, r2
 8017ad8:	ba1b      	rev	r3, r3
 8017ada:	461c      	mov	r4, r3
 8017adc:	460d      	mov	r5, r1
 8017ade:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017ae2:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017ae6:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017aea:	3302      	adds	r3, #2
 8017aec:	00db      	lsls	r3, r3, #3
 8017aee:	4413      	add	r3, r2
 8017af0:	e9c3 4500 	strd	r4, r5, [r3]
    for (i = 0; i < 16; i++) {
 8017af4:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017af8:	3301      	adds	r3, #1
 8017afa:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8017afe:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017b02:	2b0f      	cmp	r3, #15
 8017b04:	ddcf      	ble.n	8017aa6 <mbedtls_internal_sha512_process+0x6e>
    }

    for (; i < 80; i++) {
 8017b06:	e108      	b.n	8017d1a <mbedtls_internal_sha512_process+0x2e2>
        local.W[i] = S1(local.W[i -  2]) + local.W[i -  7] +
 8017b08:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017b0c:	1e99      	subs	r1, r3, #2
 8017b0e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017b12:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017b16:	1c8b      	adds	r3, r1, #2
 8017b18:	00db      	lsls	r3, r3, #3
 8017b1a:	4413      	add	r3, r2
 8017b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b20:	0358      	lsls	r0, r3, #13
 8017b22:	0cd1      	lsrs	r1, r2, #19
 8017b24:	4301      	orrs	r1, r0
 8017b26:	f8c7 1648 	str.w	r1, [r7, #1608]	; 0x648
 8017b2a:	0351      	lsls	r1, r2, #13
 8017b2c:	0cdb      	lsrs	r3, r3, #19
 8017b2e:	430b      	orrs	r3, r1
 8017b30:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8017b34:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017b38:	1e99      	subs	r1, r3, #2
 8017b3a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017b3e:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017b42:	1c8b      	adds	r3, r1, #2
 8017b44:	00db      	lsls	r3, r3, #3
 8017b46:	4413      	add	r3, r2
 8017b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b4c:	0f50      	lsrs	r0, r2, #29
 8017b4e:	00d9      	lsls	r1, r3, #3
 8017b50:	4301      	orrs	r1, r0
 8017b52:	f8c7 1644 	str.w	r1, [r7, #1604]	; 0x644
 8017b56:	0f59      	lsrs	r1, r3, #29
 8017b58:	00d3      	lsls	r3, r2, #3
 8017b5a:	430b      	orrs	r3, r1
 8017b5c:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
 8017b60:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8017b64:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017b68:	4623      	mov	r3, r4
 8017b6a:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8017b6e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8017b72:	4602      	mov	r2, r0
 8017b74:	4053      	eors	r3, r2
 8017b76:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
 8017b7a:	462b      	mov	r3, r5
 8017b7c:	460a      	mov	r2, r1
 8017b7e:	4053      	eors	r3, r2
 8017b80:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8017b84:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017b88:	1e99      	subs	r1, r3, #2
 8017b8a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017b8e:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017b92:	1c8b      	adds	r3, r1, #2
 8017b94:	00db      	lsls	r3, r3, #3
 8017b96:	4413      	add	r3, r2
 8017b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b9c:	f04f 0000 	mov.w	r0, #0
 8017ba0:	f04f 0100 	mov.w	r1, #0
 8017ba4:	0990      	lsrs	r0, r2, #6
 8017ba6:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8017baa:	0999      	lsrs	r1, r3, #6
 8017bac:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8017bb0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017bb4:	4623      	mov	r3, r4
 8017bb6:	4043      	eors	r3, r0
 8017bb8:	f8c7 3630 	str.w	r3, [r7, #1584]	; 0x630
 8017bbc:	462b      	mov	r3, r5
 8017bbe:	404b      	eors	r3, r1
 8017bc0:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8017bc4:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017bc8:	1fd9      	subs	r1, r3, #7
 8017bca:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017bce:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017bd2:	1c8b      	adds	r3, r1, #2
 8017bd4:	00db      	lsls	r3, r3, #3
 8017bd6:	4413      	add	r3, r2
 8017bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bdc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8017be0:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017be4:	4621      	mov	r1, r4
 8017be6:	1889      	adds	r1, r1, r2
 8017be8:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 8017bec:	4629      	mov	r1, r5
 8017bee:	eb41 0303 	adc.w	r3, r1, r3
 8017bf2:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
                     S0(local.W[i - 15]) + local.W[i - 16];
 8017bf6:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017bfa:	f1a3 010f 	sub.w	r1, r3, #15
 8017bfe:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017c02:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017c06:	1c8b      	adds	r3, r1, #2
 8017c08:	00db      	lsls	r3, r3, #3
 8017c0a:	4413      	add	r3, r2
 8017c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c10:	07d8      	lsls	r0, r3, #31
 8017c12:	0851      	lsrs	r1, r2, #1
 8017c14:	4301      	orrs	r1, r0
 8017c16:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 8017c1a:	07d1      	lsls	r1, r2, #31
 8017c1c:	085b      	lsrs	r3, r3, #1
 8017c1e:	430b      	orrs	r3, r1
 8017c20:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 8017c24:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017c28:	f1a3 010f 	sub.w	r1, r3, #15
 8017c2c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017c30:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017c34:	1c8b      	adds	r3, r1, #2
 8017c36:	00db      	lsls	r3, r3, #3
 8017c38:	4413      	add	r3, r2
 8017c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c3e:	0618      	lsls	r0, r3, #24
 8017c40:	0a11      	lsrs	r1, r2, #8
 8017c42:	4301      	orrs	r1, r0
 8017c44:	f8c7 1618 	str.w	r1, [r7, #1560]	; 0x618
 8017c48:	0611      	lsls	r1, r2, #24
 8017c4a:	0a1b      	lsrs	r3, r3, #8
 8017c4c:	430b      	orrs	r3, r1
 8017c4e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8017c52:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8017c56:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017c5a:	4623      	mov	r3, r4
 8017c5c:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 8017c60:	e9d2 0100 	ldrd	r0, r1, [r2]
 8017c64:	4602      	mov	r2, r0
 8017c66:	4053      	eors	r3, r2
 8017c68:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
 8017c6c:	462b      	mov	r3, r5
 8017c6e:	460a      	mov	r2, r1
 8017c70:	4053      	eors	r3, r2
 8017c72:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8017c76:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017c7a:	f1a3 010f 	sub.w	r1, r3, #15
 8017c7e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017c82:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017c86:	1c8b      	adds	r3, r1, #2
 8017c88:	00db      	lsls	r3, r3, #3
 8017c8a:	4413      	add	r3, r2
 8017c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c90:	f04f 0000 	mov.w	r0, #0
 8017c94:	f04f 0100 	mov.w	r1, #0
 8017c98:	09d0      	lsrs	r0, r2, #7
 8017c9a:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8017c9e:	09d9      	lsrs	r1, r3, #7
 8017ca0:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8017ca4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017ca8:	4623      	mov	r3, r4
 8017caa:	ea83 0a00 	eor.w	sl, r3, r0
 8017cae:	462b      	mov	r3, r5
 8017cb0:	ea83 0b01 	eor.w	fp, r3, r1
        local.W[i] = S1(local.W[i -  2]) + local.W[i -  7] +
 8017cb4:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8017cb8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8017cbc:	460b      	mov	r3, r1
 8017cbe:	eb13 080a 	adds.w	r8, r3, sl
 8017cc2:	4613      	mov	r3, r2
 8017cc4:	eb43 090b 	adc.w	r9, r3, fp
                     S0(local.W[i - 15]) + local.W[i - 16];
 8017cc8:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017ccc:	f1a3 0110 	sub.w	r1, r3, #16
 8017cd0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017cd4:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017cd8:	1c8b      	adds	r3, r1, #2
 8017cda:	00db      	lsls	r3, r3, #3
 8017cdc:	4413      	add	r3, r2
 8017cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ce2:	eb18 0102 	adds.w	r1, r8, r2
 8017ce6:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 8017cea:	eb49 0303 	adc.w	r3, r9, r3
 8017cee:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
        local.W[i] = S1(local.W[i -  2]) + local.W[i -  7] +
 8017cf2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017cf6:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017cfa:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017cfe:	3302      	adds	r3, #2
 8017d00:	00db      	lsls	r3, r3, #3
 8017d02:	4413      	add	r3, r2
 8017d04:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 8017d08:	e9d2 1200 	ldrd	r1, r2, [r2]
 8017d0c:	e9c3 1200 	strd	r1, r2, [r3]
    for (; i < 80; i++) {
 8017d10:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017d14:	3301      	adds	r3, #1
 8017d16:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8017d1a:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017d1e:	2b4f      	cmp	r3, #79	; 0x4f
 8017d20:	f77f aef2 	ble.w	8017b08 <mbedtls_internal_sha512_process+0xd0>
    }

    i = 0;
 8017d24:	2300      	movs	r3, #0
 8017d26:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    do {
        P(local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
 8017d2a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017d2e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017d32:	e9d3 45b2 	ldrd	r4, r5, [r3, #712]	; 0x2c8
 8017d36:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017d3a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017d3e:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 8017d42:	0498      	lsls	r0, r3, #18
 8017d44:	0b91      	lsrs	r1, r2, #14
 8017d46:	4301      	orrs	r1, r0
 8017d48:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 8017d4c:	0491      	lsls	r1, r2, #18
 8017d4e:	0b9b      	lsrs	r3, r3, #14
 8017d50:	430b      	orrs	r3, r1
 8017d52:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 8017d56:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017d5a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017d5e:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 8017d62:	0398      	lsls	r0, r3, #14
 8017d64:	0c91      	lsrs	r1, r2, #18
 8017d66:	4301      	orrs	r1, r0
 8017d68:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 8017d6c:	0391      	lsls	r1, r2, #14
 8017d6e:	0c9b      	lsrs	r3, r3, #18
 8017d70:	430b      	orrs	r3, r1
 8017d72:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 8017d76:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8017d7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017d7e:	4643      	mov	r3, r8
 8017d80:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 8017d84:	e9d2 0100 	ldrd	r0, r1, [r2]
 8017d88:	4602      	mov	r2, r0
 8017d8a:	4053      	eors	r3, r2
 8017d8c:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 8017d90:	464b      	mov	r3, r9
 8017d92:	460a      	mov	r2, r1
 8017d94:	4053      	eors	r3, r2
 8017d96:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8017d9a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017d9e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017da2:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 8017da6:	0a50      	lsrs	r0, r2, #9
 8017da8:	05d9      	lsls	r1, r3, #23
 8017daa:	4301      	orrs	r1, r0
 8017dac:	f8c7 15ec 	str.w	r1, [r7, #1516]	; 0x5ec
 8017db0:	0a59      	lsrs	r1, r3, #9
 8017db2:	05d3      	lsls	r3, r2, #23
 8017db4:	430b      	orrs	r3, r1
 8017db6:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
 8017dba:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8017dbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017dc2:	4643      	mov	r3, r8
 8017dc4:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8017dc8:	e9d2 0100 	ldrd	r0, r1, [r2]
 8017dcc:	4602      	mov	r2, r0
 8017dce:	4053      	eors	r3, r2
 8017dd0:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8017dd4:	464b      	mov	r3, r9
 8017dd6:	460a      	mov	r2, r1
 8017dd8:	4053      	eors	r3, r2
 8017dda:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 8017dde:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8017de2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8017de6:	460b      	mov	r3, r1
 8017de8:	18e3      	adds	r3, r4, r3
 8017dea:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
 8017dee:	4613      	mov	r3, r2
 8017df0:	eb45 0303 	adc.w	r3, r5, r3
 8017df4:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 8017df8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017dfc:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017e00:	e9d3 89b0 	ldrd	r8, r9, [r3, #704]	; 0x2c0
 8017e04:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017e08:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017e0c:	e9d3 45ac 	ldrd	r4, r5, [r3, #688]	; 0x2b0
 8017e10:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017e14:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017e18:	e9d3 01ae 	ldrd	r0, r1, [r3, #696]	; 0x2b8
 8017e1c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017e20:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017e24:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8017e28:	ea80 0602 	eor.w	r6, r0, r2
 8017e2c:	f8c7 65d0 	str.w	r6, [r7, #1488]	; 0x5d0
 8017e30:	404b      	eors	r3, r1
 8017e32:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8017e36:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8017e3a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8017e3e:	460b      	mov	r3, r1
 8017e40:	4023      	ands	r3, r4
 8017e42:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
 8017e46:	4613      	mov	r3, r2
 8017e48:	402b      	ands	r3, r5
 8017e4a:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8017e4e:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8017e52:	e9d3 1200 	ldrd	r1, r2, [r3]
 8017e56:	460b      	mov	r3, r1
 8017e58:	ea88 0303 	eor.w	r3, r8, r3
 8017e5c:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 8017e60:	4613      	mov	r3, r2
 8017e62:	ea89 0303 	eor.w	r3, r9, r3
 8017e66:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8017e6a:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 8017e6e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017e72:	4623      	mov	r3, r4
 8017e74:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8017e78:	e9d2 0100 	ldrd	r0, r1, [r2]
 8017e7c:	4602      	mov	r2, r0
 8017e7e:	189b      	adds	r3, r3, r2
 8017e80:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8017e84:	462b      	mov	r3, r5
 8017e86:	460a      	mov	r2, r1
 8017e88:	4153      	adcs	r3, r2
 8017e8a:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8017e8e:	4afc      	ldr	r2, [pc, #1008]	; (8018280 <mbedtls_internal_sha512_process+0x848>)
 8017e90:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017e94:	00db      	lsls	r3, r3, #3
 8017e96:	4413      	add	r3, r2
 8017e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e9c:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8017ea0:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017ea4:	4621      	mov	r1, r4
 8017ea6:	1889      	adds	r1, r1, r2
 8017ea8:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 8017eac:	4629      	mov	r1, r5
 8017eae:	eb41 0303 	adc.w	r3, r1, r3
 8017eb2:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8017eb6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017eba:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017ebe:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8017ec2:	3302      	adds	r3, #2
 8017ec4:	00db      	lsls	r3, r3, #3
 8017ec6:	4413      	add	r3, r2
 8017ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ecc:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8017ed0:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017ed4:	4621      	mov	r1, r4
 8017ed6:	1889      	adds	r1, r1, r2
 8017ed8:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 8017edc:	4629      	mov	r1, r5
 8017ede:	eb41 0303 	adc.w	r3, r1, r3
 8017ee2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8017ee6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017eea:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017eee:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 8017ef2:	e9d2 1200 	ldrd	r1, r2, [r2]
 8017ef6:	e9c3 1200 	strd	r1, r2, [r3]
 8017efa:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017efe:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017f02:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	; 0x290
 8017f06:	0118      	lsls	r0, r3, #4
 8017f08:	0f11      	lsrs	r1, r2, #28
 8017f0a:	4301      	orrs	r1, r0
 8017f0c:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 8017f10:	0111      	lsls	r1, r2, #4
 8017f12:	0f1b      	lsrs	r3, r3, #28
 8017f14:	430b      	orrs	r3, r1
 8017f16:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8017f1a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017f1e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017f22:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	; 0x290
 8017f26:	0890      	lsrs	r0, r2, #2
 8017f28:	0799      	lsls	r1, r3, #30
 8017f2a:	4301      	orrs	r1, r0
 8017f2c:	f8c7 159c 	str.w	r1, [r7, #1436]	; 0x59c
 8017f30:	0899      	lsrs	r1, r3, #2
 8017f32:	0793      	lsls	r3, r2, #30
 8017f34:	430b      	orrs	r3, r1
 8017f36:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 8017f3a:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8017f3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017f42:	4623      	mov	r3, r4
 8017f44:	f507 62b3 	add.w	r2, r7, #1432	; 0x598
 8017f48:	e9d2 0100 	ldrd	r0, r1, [r2]
 8017f4c:	4602      	mov	r2, r0
 8017f4e:	4053      	eors	r3, r2
 8017f50:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 8017f54:	462b      	mov	r3, r5
 8017f56:	460a      	mov	r2, r1
 8017f58:	4053      	eors	r3, r2
 8017f5a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8017f5e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017f62:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017f66:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	; 0x290
 8017f6a:	09d0      	lsrs	r0, r2, #7
 8017f6c:	0659      	lsls	r1, r3, #25
 8017f6e:	4301      	orrs	r1, r0
 8017f70:	f8c7 158c 	str.w	r1, [r7, #1420]	; 0x58c
 8017f74:	09d9      	lsrs	r1, r3, #7
 8017f76:	0653      	lsls	r3, r2, #25
 8017f78:	430b      	orrs	r3, r1
 8017f7a:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 8017f7e:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8017f82:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017f86:	4623      	mov	r3, r4
 8017f88:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8017f8c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8017f90:	4602      	mov	r2, r0
 8017f92:	4053      	eors	r3, r2
 8017f94:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 8017f98:	462b      	mov	r3, r5
 8017f9a:	460a      	mov	r2, r1
 8017f9c:	4053      	eors	r3, r2
 8017f9e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8017fa2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017fa6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017faa:	e9d3 01a4 	ldrd	r0, r1, [r3, #656]	; 0x290
 8017fae:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017fb2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017fb6:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 8017fba:	ea00 0402 	and.w	r4, r0, r2
 8017fbe:	f8c7 4578 	str.w	r4, [r7, #1400]	; 0x578
 8017fc2:	400b      	ands	r3, r1
 8017fc4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8017fc8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017fcc:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017fd0:	e9d3 45a8 	ldrd	r4, r5, [r3, #672]	; 0x2a0
 8017fd4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017fd8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017fdc:	e9d3 01a4 	ldrd	r0, r1, [r3, #656]	; 0x290
 8017fe0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8017fe4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017fe8:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 8017fec:	ea40 0602 	orr.w	r6, r0, r2
 8017ff0:	f8c7 6570 	str.w	r6, [r7, #1392]	; 0x570
 8017ff4:	430b      	orrs	r3, r1
 8017ff6:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8017ffa:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8017ffe:	e9d3 1200 	ldrd	r1, r2, [r3]
 8018002:	460b      	mov	r3, r1
 8018004:	4023      	ands	r3, r4
 8018006:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
 801800a:	4613      	mov	r3, r2
 801800c:	402b      	ands	r3, r5
 801800e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8018012:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8018016:	e9d3 4500 	ldrd	r4, r5, [r3]
 801801a:	4623      	mov	r3, r4
 801801c:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 8018020:	e9d2 0100 	ldrd	r0, r1, [r2]
 8018024:	4602      	mov	r2, r0
 8018026:	4313      	orrs	r3, r2
 8018028:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 801802c:	462b      	mov	r3, r5
 801802e:	460a      	mov	r2, r1
 8018030:	4313      	orrs	r3, r2
 8018032:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8018036:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801803a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801803e:	4623      	mov	r3, r4
 8018040:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 8018044:	e9d2 0100 	ldrd	r0, r1, [r2]
 8018048:	4602      	mov	r2, r0
 801804a:	189b      	adds	r3, r3, r2
 801804c:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
 8018050:	462b      	mov	r3, r5
 8018052:	460a      	mov	r2, r1
 8018054:	4153      	adcs	r3, r2
 8018056:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 801805a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801805e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018062:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 8018066:	e9d2 1200 	ldrd	r1, r2, [r2]
 801806a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 801806e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018072:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018076:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	; 0x2a8
 801807a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801807e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018086:	1884      	adds	r4, r0, r2
 8018088:	f8c7 4550 	str.w	r4, [r7, #1360]	; 0x550
 801808c:	eb41 0303 	adc.w	r3, r1, r3
 8018090:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8018094:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018098:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801809c:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 80180a0:	e9d2 1200 	ldrd	r1, r2, [r2]
 80180a4:	e9c3 12aa 	strd	r1, r2, [r3, #680]	; 0x2a8
 80180a8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80180ac:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80180b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80180b4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80180b8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80180bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80180c0:	1884      	adds	r4, r0, r2
 80180c2:	f8c7 4548 	str.w	r4, [r7, #1352]	; 0x548
 80180c6:	eb41 0303 	adc.w	r3, r1, r3
 80180ca:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 80180ce:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80180d2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80180d6:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 80180da:	e9d2 1200 	ldrd	r1, r2, [r2]
 80180de:	e9c3 12b2 	strd	r1, r2, [r3, #712]	; 0x2c8
          local.A[5], local.A[6], local.A[7], local.W[i], K[i]); i++;
 80180e2:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80180e6:	3301      	adds	r3, #1
 80180e8:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
        P(local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
 80180ec:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80180f0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80180f4:	e9d3 45b0 	ldrd	r4, r5, [r3, #704]	; 0x2c0
 80180f8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80180fc:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018100:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 8018104:	0498      	lsls	r0, r3, #18
 8018106:	0b91      	lsrs	r1, r2, #14
 8018108:	4301      	orrs	r1, r0
 801810a:	f8c7 1540 	str.w	r1, [r7, #1344]	; 0x540
 801810e:	0491      	lsls	r1, r2, #18
 8018110:	0b9b      	lsrs	r3, r3, #14
 8018112:	430b      	orrs	r3, r1
 8018114:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8018118:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801811c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018120:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 8018124:	0398      	lsls	r0, r3, #14
 8018126:	0c91      	lsrs	r1, r2, #18
 8018128:	4301      	orrs	r1, r0
 801812a:	f8c7 1538 	str.w	r1, [r7, #1336]	; 0x538
 801812e:	0391      	lsls	r1, r2, #14
 8018130:	0c9b      	lsrs	r3, r3, #18
 8018132:	430b      	orrs	r3, r1
 8018134:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8018138:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 801813c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018140:	4643      	mov	r3, r8
 8018142:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8018146:	e9d2 0100 	ldrd	r0, r1, [r2]
 801814a:	4602      	mov	r2, r0
 801814c:	4053      	eors	r3, r2
 801814e:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 8018152:	464b      	mov	r3, r9
 8018154:	460a      	mov	r2, r1
 8018156:	4053      	eors	r3, r2
 8018158:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 801815c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018160:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018164:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 8018168:	0a50      	lsrs	r0, r2, #9
 801816a:	05d9      	lsls	r1, r3, #23
 801816c:	4301      	orrs	r1, r0
 801816e:	f8c7 152c 	str.w	r1, [r7, #1324]	; 0x52c
 8018172:	0a59      	lsrs	r1, r3, #9
 8018174:	05d3      	lsls	r3, r2, #23
 8018176:	430b      	orrs	r3, r1
 8018178:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 801817c:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8018180:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018184:	4643      	mov	r3, r8
 8018186:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 801818a:	e9d2 0100 	ldrd	r0, r1, [r2]
 801818e:	4602      	mov	r2, r0
 8018190:	4053      	eors	r3, r2
 8018192:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8018196:	464b      	mov	r3, r9
 8018198:	460a      	mov	r2, r1
 801819a:	4053      	eors	r3, r2
 801819c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 80181a0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80181a4:	e9d3 1200 	ldrd	r1, r2, [r3]
 80181a8:	460b      	mov	r3, r1
 80181aa:	18e3      	adds	r3, r4, r3
 80181ac:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 80181b0:	4613      	mov	r3, r2
 80181b2:	eb45 0303 	adc.w	r3, r5, r3
 80181b6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 80181ba:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80181be:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80181c2:	e9d3 89ae 	ldrd	r8, r9, [r3, #696]	; 0x2b8
 80181c6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80181ca:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80181ce:	e9d3 45aa 	ldrd	r4, r5, [r3, #680]	; 0x2a8
 80181d2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80181d6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80181da:	e9d3 01ac 	ldrd	r0, r1, [r3, #688]	; 0x2b0
 80181de:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80181e2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80181e6:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 80181ea:	ea80 0602 	eor.w	r6, r0, r2
 80181ee:	f8c7 6510 	str.w	r6, [r7, #1296]	; 0x510
 80181f2:	404b      	eors	r3, r1
 80181f4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80181f8:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80181fc:	e9d3 1200 	ldrd	r1, r2, [r3]
 8018200:	460b      	mov	r3, r1
 8018202:	4023      	ands	r3, r4
 8018204:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8018208:	4613      	mov	r3, r2
 801820a:	402b      	ands	r3, r5
 801820c:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8018210:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8018214:	e9d3 1200 	ldrd	r1, r2, [r3]
 8018218:	460b      	mov	r3, r1
 801821a:	ea88 0303 	eor.w	r3, r8, r3
 801821e:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8018222:	4613      	mov	r3, r2
 8018224:	ea89 0303 	eor.w	r3, r9, r3
 8018228:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 801822c:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8018230:	e9d3 4500 	ldrd	r4, r5, [r3]
 8018234:	4623      	mov	r3, r4
 8018236:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 801823a:	e9d2 0100 	ldrd	r0, r1, [r2]
 801823e:	4602      	mov	r2, r0
 8018240:	189b      	adds	r3, r3, r2
 8018242:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8018246:	462b      	mov	r3, r5
 8018248:	460a      	mov	r2, r1
 801824a:	4153      	adcs	r3, r2
 801824c:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8018250:	4a0b      	ldr	r2, [pc, #44]	; (8018280 <mbedtls_internal_sha512_process+0x848>)
 8018252:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8018256:	00db      	lsls	r3, r3, #3
 8018258:	4413      	add	r3, r2
 801825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801825e:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8018262:	e9d1 4500 	ldrd	r4, r5, [r1]
 8018266:	4621      	mov	r1, r4
 8018268:	1889      	adds	r1, r1, r2
 801826a:	f8c7 14f0 	str.w	r1, [r7, #1264]	; 0x4f0
 801826e:	4629      	mov	r1, r5
 8018270:	eb41 0303 	adc.w	r3, r1, r3
 8018274:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8018278:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801827c:	e002      	b.n	8018284 <mbedtls_internal_sha512_process+0x84c>
 801827e:	bf00      	nop
 8018280:	080200d0 	.word	0x080200d0
 8018284:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8018288:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 801828c:	3302      	adds	r3, #2
 801828e:	00db      	lsls	r3, r3, #3
 8018290:	4413      	add	r3, r2
 8018292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018296:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 801829a:	e9d1 4500 	ldrd	r4, r5, [r1]
 801829e:	4621      	mov	r1, r4
 80182a0:	1889      	adds	r1, r1, r2
 80182a2:	f8c7 14e8 	str.w	r1, [r7, #1256]	; 0x4e8
 80182a6:	4629      	mov	r1, r5
 80182a8:	eb41 0303 	adc.w	r3, r1, r3
 80182ac:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80182b0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80182b4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80182b8:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 80182bc:	e9d2 1200 	ldrd	r1, r2, [r2]
 80182c0:	e9c3 1200 	strd	r1, r2, [r3]
 80182c4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80182c8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80182cc:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 80182d0:	0118      	lsls	r0, r3, #4
 80182d2:	0f11      	lsrs	r1, r2, #28
 80182d4:	4301      	orrs	r1, r0
 80182d6:	f8c7 14e0 	str.w	r1, [r7, #1248]	; 0x4e0
 80182da:	0111      	lsls	r1, r2, #4
 80182dc:	0f1b      	lsrs	r3, r3, #28
 80182de:	430b      	orrs	r3, r1
 80182e0:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 80182e4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80182e8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80182ec:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 80182f0:	0890      	lsrs	r0, r2, #2
 80182f2:	0799      	lsls	r1, r3, #30
 80182f4:	4301      	orrs	r1, r0
 80182f6:	f8c7 14dc 	str.w	r1, [r7, #1244]	; 0x4dc
 80182fa:	0899      	lsrs	r1, r3, #2
 80182fc:	0793      	lsls	r3, r2, #30
 80182fe:	430b      	orrs	r3, r1
 8018300:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8018304:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8018308:	e9d3 4500 	ldrd	r4, r5, [r3]
 801830c:	4623      	mov	r3, r4
 801830e:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 8018312:	e9d2 0100 	ldrd	r0, r1, [r2]
 8018316:	4602      	mov	r2, r0
 8018318:	4053      	eors	r3, r2
 801831a:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 801831e:	462b      	mov	r3, r5
 8018320:	460a      	mov	r2, r1
 8018322:	4053      	eors	r3, r2
 8018324:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8018328:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801832c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018330:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8018334:	09d0      	lsrs	r0, r2, #7
 8018336:	0659      	lsls	r1, r3, #25
 8018338:	4301      	orrs	r1, r0
 801833a:	f8c7 14cc 	str.w	r1, [r7, #1228]	; 0x4cc
 801833e:	09d9      	lsrs	r1, r3, #7
 8018340:	0653      	lsls	r3, r2, #25
 8018342:	430b      	orrs	r3, r1
 8018344:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8018348:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 801834c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8018350:	4623      	mov	r3, r4
 8018352:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8018356:	e9d2 0100 	ldrd	r0, r1, [r2]
 801835a:	4602      	mov	r2, r0
 801835c:	4053      	eors	r3, r2
 801835e:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8018362:	462b      	mov	r3, r5
 8018364:	460a      	mov	r2, r1
 8018366:	4053      	eors	r3, r2
 8018368:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 801836c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018370:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018374:	e9d3 01b2 	ldrd	r0, r1, [r3, #712]	; 0x2c8
 8018378:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801837c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018380:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	; 0x290
 8018384:	ea00 0402 	and.w	r4, r0, r2
 8018388:	f8c7 44b8 	str.w	r4, [r7, #1208]	; 0x4b8
 801838c:	400b      	ands	r3, r1
 801838e:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8018392:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018396:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801839a:	e9d3 45a6 	ldrd	r4, r5, [r3, #664]	; 0x298
 801839e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80183a2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80183a6:	e9d3 01b2 	ldrd	r0, r1, [r3, #712]	; 0x2c8
 80183aa:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80183ae:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80183b2:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	; 0x290
 80183b6:	ea40 0602 	orr.w	r6, r0, r2
 80183ba:	f8c7 64b0 	str.w	r6, [r7, #1200]	; 0x4b0
 80183be:	430b      	orrs	r3, r1
 80183c0:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 80183c4:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80183c8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80183cc:	460b      	mov	r3, r1
 80183ce:	4023      	ands	r3, r4
 80183d0:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 80183d4:	4613      	mov	r3, r2
 80183d6:	402b      	ands	r3, r5
 80183d8:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 80183dc:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80183e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80183e4:	4623      	mov	r3, r4
 80183e6:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 80183ea:	e9d2 0100 	ldrd	r0, r1, [r2]
 80183ee:	4602      	mov	r2, r0
 80183f0:	4313      	orrs	r3, r2
 80183f2:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 80183f6:	462b      	mov	r3, r5
 80183f8:	460a      	mov	r2, r1
 80183fa:	4313      	orrs	r3, r2
 80183fc:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8018400:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8018404:	e9d3 4500 	ldrd	r4, r5, [r3]
 8018408:	4623      	mov	r3, r4
 801840a:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 801840e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8018412:	4602      	mov	r2, r0
 8018414:	189b      	adds	r3, r3, r2
 8018416:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 801841a:	462b      	mov	r3, r5
 801841c:	460a      	mov	r2, r1
 801841e:	4153      	adcs	r3, r2
 8018420:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8018424:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018428:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801842c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8018430:	e9d2 1200 	ldrd	r1, r2, [r2]
 8018434:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8018438:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801843c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018440:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	; 0x2a0
 8018444:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018448:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018450:	1884      	adds	r4, r0, r2
 8018452:	f8c7 4490 	str.w	r4, [r7, #1168]	; 0x490
 8018456:	eb41 0303 	adc.w	r3, r1, r3
 801845a:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 801845e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018462:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018466:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 801846a:	e9d2 1200 	ldrd	r1, r2, [r2]
 801846e:	e9c3 12a8 	strd	r1, r2, [r3, #672]	; 0x2a0
 8018472:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018476:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801847a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801847e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018482:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018486:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801848a:	1884      	adds	r4, r0, r2
 801848c:	f8c7 4488 	str.w	r4, [r7, #1160]	; 0x488
 8018490:	eb41 0303 	adc.w	r3, r1, r3
 8018494:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 8018498:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801849c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80184a0:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 80184a4:	e9d2 1200 	ldrd	r1, r2, [r2]
 80184a8:	e9c3 12b0 	strd	r1, r2, [r3, #704]	; 0x2c0
          local.A[4], local.A[5], local.A[6], local.W[i], K[i]); i++;
 80184ac:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80184b0:	3301      	adds	r3, #1
 80184b2:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
        P(local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
 80184b6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80184ba:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80184be:	e9d3 45ae 	ldrd	r4, r5, [r3, #696]	; 0x2b8
 80184c2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80184c6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80184ca:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 80184ce:	0498      	lsls	r0, r3, #18
 80184d0:	0b91      	lsrs	r1, r2, #14
 80184d2:	4301      	orrs	r1, r0
 80184d4:	f8c7 1480 	str.w	r1, [r7, #1152]	; 0x480
 80184d8:	0491      	lsls	r1, r2, #18
 80184da:	0b9b      	lsrs	r3, r3, #14
 80184dc:	430b      	orrs	r3, r1
 80184de:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 80184e2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80184e6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80184ea:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 80184ee:	0398      	lsls	r0, r3, #14
 80184f0:	0c91      	lsrs	r1, r2, #18
 80184f2:	4301      	orrs	r1, r0
 80184f4:	f8c7 1478 	str.w	r1, [r7, #1144]	; 0x478
 80184f8:	0391      	lsls	r1, r2, #14
 80184fa:	0c9b      	lsrs	r3, r3, #18
 80184fc:	430b      	orrs	r3, r1
 80184fe:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8018502:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8018506:	e9d3 8900 	ldrd	r8, r9, [r3]
 801850a:	4643      	mov	r3, r8
 801850c:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8018510:	e9d2 0100 	ldrd	r0, r1, [r2]
 8018514:	4602      	mov	r2, r0
 8018516:	4053      	eors	r3, r2
 8018518:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 801851c:	464b      	mov	r3, r9
 801851e:	460a      	mov	r2, r1
 8018520:	4053      	eors	r3, r2
 8018522:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8018526:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801852a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801852e:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8018532:	0a50      	lsrs	r0, r2, #9
 8018534:	05d9      	lsls	r1, r3, #23
 8018536:	4301      	orrs	r1, r0
 8018538:	f8c7 146c 	str.w	r1, [r7, #1132]	; 0x46c
 801853c:	0a59      	lsrs	r1, r3, #9
 801853e:	05d3      	lsls	r3, r2, #23
 8018540:	430b      	orrs	r3, r1
 8018542:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8018546:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801854a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801854e:	4643      	mov	r3, r8
 8018550:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8018554:	e9d2 0100 	ldrd	r0, r1, [r2]
 8018558:	4602      	mov	r2, r0
 801855a:	4053      	eors	r3, r2
 801855c:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8018560:	464b      	mov	r3, r9
 8018562:	460a      	mov	r2, r1
 8018564:	4053      	eors	r3, r2
 8018566:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 801856a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801856e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8018572:	460b      	mov	r3, r1
 8018574:	18e3      	adds	r3, r4, r3
 8018576:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 801857a:	4613      	mov	r3, r2
 801857c:	eb45 0303 	adc.w	r3, r5, r3
 8018580:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8018584:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018588:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801858c:	e9d3 89ac 	ldrd	r8, r9, [r3, #688]	; 0x2b0
 8018590:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018594:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018598:	e9d3 45a8 	ldrd	r4, r5, [r3, #672]	; 0x2a0
 801859c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80185a0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80185a4:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	; 0x2a8
 80185a8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80185ac:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80185b0:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 80185b4:	ea80 0602 	eor.w	r6, r0, r2
 80185b8:	f8c7 6450 	str.w	r6, [r7, #1104]	; 0x450
 80185bc:	404b      	eors	r3, r1
 80185be:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 80185c2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80185c6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80185ca:	460b      	mov	r3, r1
 80185cc:	4023      	ands	r3, r4
 80185ce:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 80185d2:	4613      	mov	r3, r2
 80185d4:	402b      	ands	r3, r5
 80185d6:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 80185da:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80185de:	e9d3 1200 	ldrd	r1, r2, [r3]
 80185e2:	460b      	mov	r3, r1
 80185e4:	ea88 0303 	eor.w	r3, r8, r3
 80185e8:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 80185ec:	4613      	mov	r3, r2
 80185ee:	ea89 0303 	eor.w	r3, r9, r3
 80185f2:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 80185f6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80185fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80185fe:	4623      	mov	r3, r4
 8018600:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8018604:	e9d2 0100 	ldrd	r0, r1, [r2]
 8018608:	4602      	mov	r2, r0
 801860a:	189b      	adds	r3, r3, r2
 801860c:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8018610:	462b      	mov	r3, r5
 8018612:	460a      	mov	r2, r1
 8018614:	4153      	adcs	r3, r2
 8018616:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 801861a:	4afc      	ldr	r2, [pc, #1008]	; (8018a0c <mbedtls_internal_sha512_process+0xfd4>)
 801861c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8018620:	00db      	lsls	r3, r3, #3
 8018622:	4413      	add	r3, r2
 8018624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018628:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 801862c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8018630:	4621      	mov	r1, r4
 8018632:	1889      	adds	r1, r1, r2
 8018634:	f8c7 1430 	str.w	r1, [r7, #1072]	; 0x430
 8018638:	4629      	mov	r1, r5
 801863a:	eb41 0303 	adc.w	r3, r1, r3
 801863e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8018642:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018646:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 801864a:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 801864e:	3302      	adds	r3, #2
 8018650:	00db      	lsls	r3, r3, #3
 8018652:	4413      	add	r3, r2
 8018654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018658:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 801865c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8018660:	4621      	mov	r1, r4
 8018662:	1889      	adds	r1, r1, r2
 8018664:	f8c7 1428 	str.w	r1, [r7, #1064]	; 0x428
 8018668:	4629      	mov	r1, r5
 801866a:	eb41 0303 	adc.w	r3, r1, r3
 801866e:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8018672:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018676:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801867a:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 801867e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8018682:	e9c3 1200 	strd	r1, r2, [r3]
 8018686:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801868a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801868e:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8018692:	0118      	lsls	r0, r3, #4
 8018694:	0f11      	lsrs	r1, r2, #28
 8018696:	4301      	orrs	r1, r0
 8018698:	f8c7 1420 	str.w	r1, [r7, #1056]	; 0x420
 801869c:	0111      	lsls	r1, r2, #4
 801869e:	0f1b      	lsrs	r3, r3, #28
 80186a0:	430b      	orrs	r3, r1
 80186a2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80186a6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80186aa:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80186ae:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 80186b2:	0890      	lsrs	r0, r2, #2
 80186b4:	0799      	lsls	r1, r3, #30
 80186b6:	4301      	orrs	r1, r0
 80186b8:	f8c7 141c 	str.w	r1, [r7, #1052]	; 0x41c
 80186bc:	0899      	lsrs	r1, r3, #2
 80186be:	0793      	lsls	r3, r2, #30
 80186c0:	430b      	orrs	r3, r1
 80186c2:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 80186c6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80186ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80186ce:	4623      	mov	r3, r4
 80186d0:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 80186d4:	e9d2 0100 	ldrd	r0, r1, [r2]
 80186d8:	4602      	mov	r2, r0
 80186da:	4053      	eors	r3, r2
 80186dc:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 80186e0:	462b      	mov	r3, r5
 80186e2:	460a      	mov	r2, r1
 80186e4:	4053      	eors	r3, r2
 80186e6:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80186ea:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80186ee:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80186f2:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 80186f6:	09d0      	lsrs	r0, r2, #7
 80186f8:	0659      	lsls	r1, r3, #25
 80186fa:	4301      	orrs	r1, r0
 80186fc:	f8c7 140c 	str.w	r1, [r7, #1036]	; 0x40c
 8018700:	09d9      	lsrs	r1, r3, #7
 8018702:	0653      	lsls	r3, r2, #25
 8018704:	430b      	orrs	r3, r1
 8018706:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 801870a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801870e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8018712:	4623      	mov	r3, r4
 8018714:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8018718:	e9d2 0100 	ldrd	r0, r1, [r2]
 801871c:	4602      	mov	r2, r0
 801871e:	4053      	eors	r3, r2
 8018720:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8018724:	462b      	mov	r3, r5
 8018726:	460a      	mov	r2, r1
 8018728:	4053      	eors	r3, r2
 801872a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 801872e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018732:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018736:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	; 0x2c0
 801873a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801873e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018742:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8018746:	ea00 0402 	and.w	r4, r0, r2
 801874a:	f8c7 43f8 	str.w	r4, [r7, #1016]	; 0x3f8
 801874e:	400b      	ands	r3, r1
 8018750:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8018754:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018758:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801875c:	e9d3 45a4 	ldrd	r4, r5, [r3, #656]	; 0x290
 8018760:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018764:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018768:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	; 0x2c0
 801876c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018770:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018774:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8018778:	ea40 0602 	orr.w	r6, r0, r2
 801877c:	f8c7 63f0 	str.w	r6, [r7, #1008]	; 0x3f0
 8018780:	430b      	orrs	r3, r1
 8018782:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8018786:	e9d7 12fc 	ldrd	r1, r2, [r7, #1008]	; 0x3f0
 801878a:	460b      	mov	r3, r1
 801878c:	4023      	ands	r3, r4
 801878e:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8018792:	4613      	mov	r3, r2
 8018794:	402b      	ands	r3, r5
 8018796:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 801879a:	e9d7 45fe 	ldrd	r4, r5, [r7, #1016]	; 0x3f8
 801879e:	4623      	mov	r3, r4
 80187a0:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 80187a4:	4602      	mov	r2, r0
 80187a6:	4313      	orrs	r3, r2
 80187a8:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 80187ac:	462b      	mov	r3, r5
 80187ae:	460a      	mov	r2, r1
 80187b0:	4313      	orrs	r3, r2
 80187b2:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 80187b6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80187ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80187be:	4623      	mov	r3, r4
 80187c0:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 80187c4:	4602      	mov	r2, r0
 80187c6:	189b      	adds	r3, r3, r2
 80187c8:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 80187cc:	462b      	mov	r3, r5
 80187ce:	460a      	mov	r2, r1
 80187d0:	4153      	adcs	r3, r2
 80187d2:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 80187d6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80187da:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80187de:	e9d7 12f6 	ldrd	r1, r2, [r7, #984]	; 0x3d8
 80187e2:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80187e6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80187ea:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80187ee:	e9d3 01a6 	ldrd	r0, r1, [r3, #664]	; 0x298
 80187f2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80187f6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80187fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187fe:	1884      	adds	r4, r0, r2
 8018800:	f8c7 43d0 	str.w	r4, [r7, #976]	; 0x3d0
 8018804:	eb41 0303 	adc.w	r3, r1, r3
 8018808:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 801880c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018810:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018814:	e9d7 12f4 	ldrd	r1, r2, [r7, #976]	; 0x3d0
 8018818:	e9c3 12a6 	strd	r1, r2, [r3, #664]	; 0x298
 801881c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018820:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018828:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801882c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018830:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018834:	1884      	adds	r4, r0, r2
 8018836:	f8c7 43c8 	str.w	r4, [r7, #968]	; 0x3c8
 801883a:	eb41 0303 	adc.w	r3, r1, r3
 801883e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8018842:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018846:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801884a:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	; 0x3c8
 801884e:	e9c3 12ae 	strd	r1, r2, [r3, #696]	; 0x2b8
          local.A[3], local.A[4], local.A[5], local.W[i], K[i]); i++;
 8018852:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8018856:	3301      	adds	r3, #1
 8018858:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
        P(local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
 801885c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018860:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018864:	e9d3 45ac 	ldrd	r4, r5, [r3, #688]	; 0x2b0
 8018868:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801886c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018870:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 8018874:	0498      	lsls	r0, r3, #18
 8018876:	0b91      	lsrs	r1, r2, #14
 8018878:	4301      	orrs	r1, r0
 801887a:	f8c7 13c0 	str.w	r1, [r7, #960]	; 0x3c0
 801887e:	0491      	lsls	r1, r2, #18
 8018880:	0b9b      	lsrs	r3, r3, #14
 8018882:	430b      	orrs	r3, r1
 8018884:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8018888:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801888c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018890:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 8018894:	0398      	lsls	r0, r3, #14
 8018896:	0c91      	lsrs	r1, r2, #18
 8018898:	4301      	orrs	r1, r0
 801889a:	f8c7 13b8 	str.w	r1, [r7, #952]	; 0x3b8
 801889e:	0391      	lsls	r1, r2, #14
 80188a0:	0c9b      	lsrs	r3, r3, #18
 80188a2:	430b      	orrs	r3, r1
 80188a4:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80188a8:	e9d7 89f0 	ldrd	r8, r9, [r7, #960]	; 0x3c0
 80188ac:	4643      	mov	r3, r8
 80188ae:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80188b2:	4602      	mov	r2, r0
 80188b4:	4053      	eors	r3, r2
 80188b6:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 80188ba:	464b      	mov	r3, r9
 80188bc:	460a      	mov	r2, r1
 80188be:	4053      	eors	r3, r2
 80188c0:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80188c4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80188c8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80188cc:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 80188d0:	0a50      	lsrs	r0, r2, #9
 80188d2:	05d9      	lsls	r1, r3, #23
 80188d4:	4301      	orrs	r1, r0
 80188d6:	f8c7 13ac 	str.w	r1, [r7, #940]	; 0x3ac
 80188da:	0a59      	lsrs	r1, r3, #9
 80188dc:	05d3      	lsls	r3, r2, #23
 80188de:	430b      	orrs	r3, r1
 80188e0:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 80188e4:	e9d7 89ec 	ldrd	r8, r9, [r7, #944]	; 0x3b0
 80188e8:	4643      	mov	r3, r8
 80188ea:	e9d7 01ea 	ldrd	r0, r1, [r7, #936]	; 0x3a8
 80188ee:	4602      	mov	r2, r0
 80188f0:	4053      	eors	r3, r2
 80188f2:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 80188f6:	464b      	mov	r3, r9
 80188f8:	460a      	mov	r2, r1
 80188fa:	4053      	eors	r3, r2
 80188fc:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8018900:	e9d7 12e8 	ldrd	r1, r2, [r7, #928]	; 0x3a0
 8018904:	460b      	mov	r3, r1
 8018906:	18e3      	adds	r3, r4, r3
 8018908:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 801890c:	4613      	mov	r3, r2
 801890e:	eb45 0303 	adc.w	r3, r5, r3
 8018912:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8018916:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801891a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801891e:	e9d3 89aa 	ldrd	r8, r9, [r3, #680]	; 0x2a8
 8018922:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018926:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801892a:	e9d3 45a6 	ldrd	r4, r5, [r3, #664]	; 0x298
 801892e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018932:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018936:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	; 0x2a0
 801893a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801893e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018942:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 8018946:	ea80 0602 	eor.w	r6, r0, r2
 801894a:	f8c7 6390 	str.w	r6, [r7, #912]	; 0x390
 801894e:	404b      	eors	r3, r1
 8018950:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8018954:	e9d7 12e4 	ldrd	r1, r2, [r7, #912]	; 0x390
 8018958:	460b      	mov	r3, r1
 801895a:	4023      	ands	r3, r4
 801895c:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8018960:	4613      	mov	r3, r2
 8018962:	402b      	ands	r3, r5
 8018964:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8018968:	e9d7 12e2 	ldrd	r1, r2, [r7, #904]	; 0x388
 801896c:	460b      	mov	r3, r1
 801896e:	ea88 0303 	eor.w	r3, r8, r3
 8018972:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8018976:	4613      	mov	r3, r2
 8018978:	ea89 0303 	eor.w	r3, r9, r3
 801897c:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8018980:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 8018984:	4623      	mov	r3, r4
 8018986:	e9d7 01e0 	ldrd	r0, r1, [r7, #896]	; 0x380
 801898a:	4602      	mov	r2, r0
 801898c:	189b      	adds	r3, r3, r2
 801898e:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8018992:	462b      	mov	r3, r5
 8018994:	460a      	mov	r2, r1
 8018996:	4153      	adcs	r3, r2
 8018998:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 801899c:	4a1b      	ldr	r2, [pc, #108]	; (8018a0c <mbedtls_internal_sha512_process+0xfd4>)
 801899e:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80189a2:	00db      	lsls	r3, r3, #3
 80189a4:	4413      	add	r3, r2
 80189a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189aa:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 80189ae:	4621      	mov	r1, r4
 80189b0:	1889      	adds	r1, r1, r2
 80189b2:	f8c7 1370 	str.w	r1, [r7, #880]	; 0x370
 80189b6:	4629      	mov	r1, r5
 80189b8:	eb41 0303 	adc.w	r3, r1, r3
 80189bc:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 80189c0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80189c4:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80189c8:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80189cc:	3302      	adds	r3, #2
 80189ce:	00db      	lsls	r3, r3, #3
 80189d0:	4413      	add	r3, r2
 80189d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189d6:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	; 0x370
 80189da:	4621      	mov	r1, r4
 80189dc:	1889      	adds	r1, r1, r2
 80189de:	f8c7 1368 	str.w	r1, [r7, #872]	; 0x368
 80189e2:	4629      	mov	r1, r5
 80189e4:	eb41 0303 	adc.w	r3, r1, r3
 80189e8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80189ec:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80189f0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80189f4:	e9d7 12da 	ldrd	r1, r2, [r7, #872]	; 0x368
 80189f8:	e9c3 1200 	strd	r1, r2, [r3]
 80189fc:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018a00:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018a04:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8018a08:	0118      	lsls	r0, r3, #4
 8018a0a:	e001      	b.n	8018a10 <mbedtls_internal_sha512_process+0xfd8>
 8018a0c:	080200d0 	.word	0x080200d0
 8018a10:	0f11      	lsrs	r1, r2, #28
 8018a12:	4301      	orrs	r1, r0
 8018a14:	f8c7 1360 	str.w	r1, [r7, #864]	; 0x360
 8018a18:	0111      	lsls	r1, r2, #4
 8018a1a:	0f1b      	lsrs	r3, r3, #28
 8018a1c:	430b      	orrs	r3, r1
 8018a1e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8018a22:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018a26:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018a2a:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8018a2e:	0890      	lsrs	r0, r2, #2
 8018a30:	0799      	lsls	r1, r3, #30
 8018a32:	4301      	orrs	r1, r0
 8018a34:	f8c7 135c 	str.w	r1, [r7, #860]	; 0x35c
 8018a38:	0899      	lsrs	r1, r3, #2
 8018a3a:	0793      	lsls	r3, r2, #30
 8018a3c:	430b      	orrs	r3, r1
 8018a3e:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8018a42:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	; 0x360
 8018a46:	4623      	mov	r3, r4
 8018a48:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	; 0x358
 8018a4c:	4602      	mov	r2, r0
 8018a4e:	4053      	eors	r3, r2
 8018a50:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8018a54:	462b      	mov	r3, r5
 8018a56:	460a      	mov	r2, r1
 8018a58:	4053      	eors	r3, r2
 8018a5a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8018a5e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018a62:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018a66:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8018a6a:	09d0      	lsrs	r0, r2, #7
 8018a6c:	0659      	lsls	r1, r3, #25
 8018a6e:	4301      	orrs	r1, r0
 8018a70:	f8c7 134c 	str.w	r1, [r7, #844]	; 0x34c
 8018a74:	09d9      	lsrs	r1, r3, #7
 8018a76:	0653      	lsls	r3, r2, #25
 8018a78:	430b      	orrs	r3, r1
 8018a7a:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8018a7e:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 8018a82:	4623      	mov	r3, r4
 8018a84:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 8018a88:	4602      	mov	r2, r0
 8018a8a:	4053      	eors	r3, r2
 8018a8c:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8018a90:	462b      	mov	r3, r5
 8018a92:	460a      	mov	r2, r1
 8018a94:	4053      	eors	r3, r2
 8018a96:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8018a9a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018a9e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018aa2:	e9d3 01ae 	ldrd	r0, r1, [r3, #696]	; 0x2b8
 8018aa6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018aaa:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018aae:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8018ab2:	ea00 0402 	and.w	r4, r0, r2
 8018ab6:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 8018aba:	400b      	ands	r3, r1
 8018abc:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8018ac0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018ac4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018ac8:	e9d3 45b2 	ldrd	r4, r5, [r3, #712]	; 0x2c8
 8018acc:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018ad0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018ad4:	e9d3 01ae 	ldrd	r0, r1, [r3, #696]	; 0x2b8
 8018ad8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018adc:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018ae0:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8018ae4:	ea40 0602 	orr.w	r6, r0, r2
 8018ae8:	f8c7 6330 	str.w	r6, [r7, #816]	; 0x330
 8018aec:	430b      	orrs	r3, r1
 8018aee:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8018af2:	e9d7 12cc 	ldrd	r1, r2, [r7, #816]	; 0x330
 8018af6:	460b      	mov	r3, r1
 8018af8:	4023      	ands	r3, r4
 8018afa:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8018afe:	4613      	mov	r3, r2
 8018b00:	402b      	ands	r3, r5
 8018b02:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8018b06:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 8018b0a:	4623      	mov	r3, r4
 8018b0c:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8018b10:	4602      	mov	r2, r0
 8018b12:	4313      	orrs	r3, r2
 8018b14:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8018b18:	462b      	mov	r3, r5
 8018b1a:	460a      	mov	r2, r1
 8018b1c:	4313      	orrs	r3, r2
 8018b1e:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8018b22:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 8018b26:	4623      	mov	r3, r4
 8018b28:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8018b2c:	4602      	mov	r2, r0
 8018b2e:	189b      	adds	r3, r3, r2
 8018b30:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 8018b34:	462b      	mov	r3, r5
 8018b36:	460a      	mov	r2, r1
 8018b38:	4153      	adcs	r3, r2
 8018b3a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8018b3e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018b42:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018b46:	e9d7 12c6 	ldrd	r1, r2, [r7, #792]	; 0x318
 8018b4a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8018b4e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018b52:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018b56:	e9d3 01a4 	ldrd	r0, r1, [r3, #656]	; 0x290
 8018b5a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018b5e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b66:	1884      	adds	r4, r0, r2
 8018b68:	f8c7 4310 	str.w	r4, [r7, #784]	; 0x310
 8018b6c:	eb41 0303 	adc.w	r3, r1, r3
 8018b70:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8018b74:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018b78:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018b7c:	e9d7 12c4 	ldrd	r1, r2, [r7, #784]	; 0x310
 8018b80:	e9c3 12a4 	strd	r1, r2, [r3, #656]	; 0x290
 8018b84:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018b88:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018b8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018b90:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018b94:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018b98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018b9c:	1884      	adds	r4, r0, r2
 8018b9e:	f8c7 4308 	str.w	r4, [r7, #776]	; 0x308
 8018ba2:	eb41 0303 	adc.w	r3, r1, r3
 8018ba6:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8018baa:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018bae:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018bb2:	e9d7 12c2 	ldrd	r1, r2, [r7, #776]	; 0x308
 8018bb6:	e9c3 12ac 	strd	r1, r2, [r3, #688]	; 0x2b0
          local.A[2], local.A[3], local.A[4], local.W[i], K[i]); i++;
 8018bba:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8018bbe:	3301      	adds	r3, #1
 8018bc0:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
        P(local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
 8018bc4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018bc8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018bcc:	e9d3 45aa 	ldrd	r4, r5, [r3, #680]	; 0x2a8
 8018bd0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018bd4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018bd8:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	; 0x290
 8018bdc:	0498      	lsls	r0, r3, #18
 8018bde:	0b91      	lsrs	r1, r2, #14
 8018be0:	4301      	orrs	r1, r0
 8018be2:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
 8018be6:	0491      	lsls	r1, r2, #18
 8018be8:	0b9b      	lsrs	r3, r3, #14
 8018bea:	430b      	orrs	r3, r1
 8018bec:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8018bf0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018bf4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018bf8:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	; 0x290
 8018bfc:	0398      	lsls	r0, r3, #14
 8018bfe:	0c91      	lsrs	r1, r2, #18
 8018c00:	4301      	orrs	r1, r0
 8018c02:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 8018c06:	0391      	lsls	r1, r2, #14
 8018c08:	0c9b      	lsrs	r3, r3, #18
 8018c0a:	430b      	orrs	r3, r1
 8018c0c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8018c10:	e9d7 89c0 	ldrd	r8, r9, [r7, #768]	; 0x300
 8018c14:	4643      	mov	r3, r8
 8018c16:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	; 0x2f8
 8018c1a:	4602      	mov	r2, r0
 8018c1c:	4053      	eors	r3, r2
 8018c1e:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8018c22:	464b      	mov	r3, r9
 8018c24:	460a      	mov	r2, r1
 8018c26:	4053      	eors	r3, r2
 8018c28:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8018c2c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018c30:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018c34:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	; 0x290
 8018c38:	0a50      	lsrs	r0, r2, #9
 8018c3a:	05d9      	lsls	r1, r3, #23
 8018c3c:	4301      	orrs	r1, r0
 8018c3e:	f8c7 12ec 	str.w	r1, [r7, #748]	; 0x2ec
 8018c42:	0a59      	lsrs	r1, r3, #9
 8018c44:	05d3      	lsls	r3, r2, #23
 8018c46:	430b      	orrs	r3, r1
 8018c48:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8018c4c:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	; 0x2f0
 8018c50:	4643      	mov	r3, r8
 8018c52:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	; 0x2e8
 8018c56:	4602      	mov	r2, r0
 8018c58:	4053      	eors	r3, r2
 8018c5a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018c5e:	464b      	mov	r3, r9
 8018c60:	460a      	mov	r2, r1
 8018c62:	4053      	eors	r3, r2
 8018c64:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018c68:	e9d7 12b8 	ldrd	r1, r2, [r7, #736]	; 0x2e0
 8018c6c:	460b      	mov	r3, r1
 8018c6e:	18e3      	adds	r3, r4, r3
 8018c70:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8018c74:	4613      	mov	r3, r2
 8018c76:	eb45 0303 	adc.w	r3, r5, r3
 8018c7a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8018c7e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018c82:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018c86:	e9d3 89a8 	ldrd	r8, r9, [r3, #672]	; 0x2a0
 8018c8a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018c8e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018c92:	e9d3 45a4 	ldrd	r4, r5, [r3, #656]	; 0x290
 8018c96:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018c9a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018c9e:	e9d3 01a6 	ldrd	r0, r1, [r3, #664]	; 0x298
 8018ca2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018ca6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018caa:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8018cae:	ea80 0602 	eor.w	r6, r0, r2
 8018cb2:	f8c7 62d0 	str.w	r6, [r7, #720]	; 0x2d0
 8018cb6:	404b      	eors	r3, r1
 8018cb8:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8018cbc:	e9d7 12b4 	ldrd	r1, r2, [r7, #720]	; 0x2d0
 8018cc0:	460b      	mov	r3, r1
 8018cc2:	4023      	ands	r3, r4
 8018cc4:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8018cc8:	4613      	mov	r3, r2
 8018cca:	402b      	ands	r3, r5
 8018ccc:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8018cd0:	e9d7 12b2 	ldrd	r1, r2, [r7, #712]	; 0x2c8
 8018cd4:	460b      	mov	r3, r1
 8018cd6:	ea88 0303 	eor.w	r3, r8, r3
 8018cda:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8018cde:	4613      	mov	r3, r2
 8018ce0:	ea89 0303 	eor.w	r3, r9, r3
 8018ce4:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8018ce8:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	; 0x2d8
 8018cec:	4623      	mov	r3, r4
 8018cee:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018cf2:	4602      	mov	r2, r0
 8018cf4:	189b      	adds	r3, r3, r2
 8018cf6:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8018cfa:	462b      	mov	r3, r5
 8018cfc:	460a      	mov	r2, r1
 8018cfe:	4153      	adcs	r3, r2
 8018d00:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8018d04:	4afc      	ldr	r2, [pc, #1008]	; (80190f8 <mbedtls_internal_sha512_process+0x16c0>)
 8018d06:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8018d0a:	00db      	lsls	r3, r3, #3
 8018d0c:	4413      	add	r3, r2
 8018d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d12:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	; 0x2b8
 8018d16:	4621      	mov	r1, r4
 8018d18:	1889      	adds	r1, r1, r2
 8018d1a:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8018d1e:	4629      	mov	r1, r5
 8018d20:	eb41 0303 	adc.w	r3, r1, r3
 8018d24:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8018d28:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018d2c:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8018d30:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8018d34:	3302      	adds	r3, #2
 8018d36:	00db      	lsls	r3, r3, #3
 8018d38:	4413      	add	r3, r2
 8018d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d3e:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 8018d42:	4621      	mov	r1, r4
 8018d44:	1889      	adds	r1, r1, r2
 8018d46:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 8018d4a:	4629      	mov	r1, r5
 8018d4c:	eb41 0303 	adc.w	r3, r1, r3
 8018d50:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8018d54:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018d58:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018d5c:	e9d7 12aa 	ldrd	r1, r2, [r7, #680]	; 0x2a8
 8018d60:	e9c3 1200 	strd	r1, r2, [r3]
 8018d64:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018d68:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018d6c:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 8018d70:	0118      	lsls	r0, r3, #4
 8018d72:	0f11      	lsrs	r1, r2, #28
 8018d74:	4301      	orrs	r1, r0
 8018d76:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 8018d7a:	0111      	lsls	r1, r2, #4
 8018d7c:	0f1b      	lsrs	r3, r3, #28
 8018d7e:	430b      	orrs	r3, r1
 8018d80:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8018d84:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018d88:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018d8c:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 8018d90:	0890      	lsrs	r0, r2, #2
 8018d92:	0799      	lsls	r1, r3, #30
 8018d94:	4301      	orrs	r1, r0
 8018d96:	f8c7 129c 	str.w	r1, [r7, #668]	; 0x29c
 8018d9a:	0899      	lsrs	r1, r3, #2
 8018d9c:	0793      	lsls	r3, r2, #30
 8018d9e:	430b      	orrs	r3, r1
 8018da0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8018da4:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 8018da8:	4623      	mov	r3, r4
 8018daa:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	; 0x298
 8018dae:	4602      	mov	r2, r0
 8018db0:	4053      	eors	r3, r2
 8018db2:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8018db6:	462b      	mov	r3, r5
 8018db8:	460a      	mov	r2, r1
 8018dba:	4053      	eors	r3, r2
 8018dbc:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8018dc0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018dc4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018dc8:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 8018dcc:	09d0      	lsrs	r0, r2, #7
 8018dce:	0659      	lsls	r1, r3, #25
 8018dd0:	4301      	orrs	r1, r0
 8018dd2:	f8c7 128c 	str.w	r1, [r7, #652]	; 0x28c
 8018dd6:	09d9      	lsrs	r1, r3, #7
 8018dd8:	0653      	lsls	r3, r2, #25
 8018dda:	430b      	orrs	r3, r1
 8018ddc:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8018de0:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 8018de4:	4623      	mov	r3, r4
 8018de6:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	; 0x288
 8018dea:	4602      	mov	r2, r0
 8018dec:	4053      	eors	r3, r2
 8018dee:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8018df2:	462b      	mov	r3, r5
 8018df4:	460a      	mov	r2, r1
 8018df6:	4053      	eors	r3, r2
 8018df8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8018dfc:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018e00:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018e04:	e9d3 01ac 	ldrd	r0, r1, [r3, #688]	; 0x2b0
 8018e08:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018e0c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018e10:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8018e14:	ea00 0402 	and.w	r4, r0, r2
 8018e18:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 8018e1c:	400b      	ands	r3, r1
 8018e1e:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8018e22:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018e26:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018e2a:	e9d3 45b0 	ldrd	r4, r5, [r3, #704]	; 0x2c0
 8018e2e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018e32:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018e36:	e9d3 01ac 	ldrd	r0, r1, [r3, #688]	; 0x2b0
 8018e3a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018e3e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018e42:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8018e46:	ea40 0602 	orr.w	r6, r0, r2
 8018e4a:	f8c7 6270 	str.w	r6, [r7, #624]	; 0x270
 8018e4e:	430b      	orrs	r3, r1
 8018e50:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8018e54:	e9d7 129c 	ldrd	r1, r2, [r7, #624]	; 0x270
 8018e58:	460b      	mov	r3, r1
 8018e5a:	4023      	ands	r3, r4
 8018e5c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8018e60:	4613      	mov	r3, r2
 8018e62:	402b      	ands	r3, r5
 8018e64:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8018e68:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 8018e6c:	4623      	mov	r3, r4
 8018e6e:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 8018e72:	4602      	mov	r2, r0
 8018e74:	4313      	orrs	r3, r2
 8018e76:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8018e7a:	462b      	mov	r3, r5
 8018e7c:	460a      	mov	r2, r1
 8018e7e:	4313      	orrs	r3, r2
 8018e80:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8018e84:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	; 0x280
 8018e88:	4623      	mov	r3, r4
 8018e8a:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	; 0x260
 8018e8e:	4602      	mov	r2, r0
 8018e90:	189b      	adds	r3, r3, r2
 8018e92:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8018e96:	462b      	mov	r3, r5
 8018e98:	460a      	mov	r2, r1
 8018e9a:	4153      	adcs	r3, r2
 8018e9c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8018ea0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018ea4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018ea8:	e9d7 1296 	ldrd	r1, r2, [r7, #600]	; 0x258
 8018eac:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8018eb0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018eb4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018eb8:	e9d3 01b2 	ldrd	r0, r1, [r3, #712]	; 0x2c8
 8018ebc:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018ec0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ec8:	1884      	adds	r4, r0, r2
 8018eca:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 8018ece:	eb41 0303 	adc.w	r3, r1, r3
 8018ed2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8018ed6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018eda:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018ede:	e9d7 1294 	ldrd	r1, r2, [r7, #592]	; 0x250
 8018ee2:	e9c3 12b2 	strd	r1, r2, [r3, #712]	; 0x2c8
 8018ee6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018eea:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018ef2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018ef6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018efa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018efe:	1884      	adds	r4, r0, r2
 8018f00:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 8018f04:	eb41 0303 	adc.w	r3, r1, r3
 8018f08:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8018f0c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018f10:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018f14:	e9d7 1292 	ldrd	r1, r2, [r7, #584]	; 0x248
 8018f18:	e9c3 12aa 	strd	r1, r2, [r3, #680]	; 0x2a8
          local.A[1], local.A[2], local.A[3], local.W[i], K[i]); i++;
 8018f1c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8018f20:	3301      	adds	r3, #1
 8018f22:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
        P(local.A[3], local.A[4], local.A[5], local.A[6], local.A[7],
 8018f26:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018f2a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018f2e:	e9d3 45a8 	ldrd	r4, r5, [r3, #672]	; 0x2a0
 8018f32:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018f36:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018f3a:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8018f3e:	0498      	lsls	r0, r3, #18
 8018f40:	0b91      	lsrs	r1, r2, #14
 8018f42:	4301      	orrs	r1, r0
 8018f44:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 8018f48:	0491      	lsls	r1, r2, #18
 8018f4a:	0b9b      	lsrs	r3, r3, #14
 8018f4c:	430b      	orrs	r3, r1
 8018f4e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8018f52:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018f56:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018f5a:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8018f5e:	0398      	lsls	r0, r3, #14
 8018f60:	0c91      	lsrs	r1, r2, #18
 8018f62:	4301      	orrs	r1, r0
 8018f64:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8018f68:	0391      	lsls	r1, r2, #14
 8018f6a:	0c9b      	lsrs	r3, r3, #18
 8018f6c:	430b      	orrs	r3, r1
 8018f6e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8018f72:	e9d7 8990 	ldrd	r8, r9, [r7, #576]	; 0x240
 8018f76:	4643      	mov	r3, r8
 8018f78:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	; 0x238
 8018f7c:	4602      	mov	r2, r0
 8018f7e:	4053      	eors	r3, r2
 8018f80:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8018f84:	464b      	mov	r3, r9
 8018f86:	460a      	mov	r2, r1
 8018f88:	4053      	eors	r3, r2
 8018f8a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8018f8e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018f92:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018f96:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8018f9a:	0a50      	lsrs	r0, r2, #9
 8018f9c:	05d9      	lsls	r1, r3, #23
 8018f9e:	4301      	orrs	r1, r0
 8018fa0:	f8c7 122c 	str.w	r1, [r7, #556]	; 0x22c
 8018fa4:	0a59      	lsrs	r1, r3, #9
 8018fa6:	05d3      	lsls	r3, r2, #23
 8018fa8:	430b      	orrs	r3, r1
 8018faa:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8018fae:	e9d7 898c 	ldrd	r8, r9, [r7, #560]	; 0x230
 8018fb2:	4643      	mov	r3, r8
 8018fb4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8018fb8:	4602      	mov	r2, r0
 8018fba:	4053      	eors	r3, r2
 8018fbc:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8018fc0:	464b      	mov	r3, r9
 8018fc2:	460a      	mov	r2, r1
 8018fc4:	4053      	eors	r3, r2
 8018fc6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8018fca:	e9d7 1288 	ldrd	r1, r2, [r7, #544]	; 0x220
 8018fce:	460b      	mov	r3, r1
 8018fd0:	18e3      	adds	r3, r4, r3
 8018fd2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8018fd6:	4613      	mov	r3, r2
 8018fd8:	eb45 0303 	adc.w	r3, r5, r3
 8018fdc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8018fe0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018fe4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018fe8:	e9d3 89a6 	ldrd	r8, r9, [r3, #664]	; 0x298
 8018fec:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018ff0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018ff4:	e9d3 45b2 	ldrd	r4, r5, [r3, #712]	; 0x2c8
 8018ff8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8018ffc:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019000:	e9d3 01a4 	ldrd	r0, r1, [r3, #656]	; 0x290
 8019004:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019008:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801900c:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 8019010:	ea80 0602 	eor.w	r6, r0, r2
 8019014:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
 8019018:	404b      	eors	r3, r1
 801901a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 801901e:	e9d7 1284 	ldrd	r1, r2, [r7, #528]	; 0x210
 8019022:	460b      	mov	r3, r1
 8019024:	4023      	ands	r3, r4
 8019026:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 801902a:	4613      	mov	r3, r2
 801902c:	402b      	ands	r3, r5
 801902e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8019032:	e9d7 1282 	ldrd	r1, r2, [r7, #520]	; 0x208
 8019036:	460b      	mov	r3, r1
 8019038:	ea88 0303 	eor.w	r3, r8, r3
 801903c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8019040:	4613      	mov	r3, r2
 8019042:	ea89 0303 	eor.w	r3, r9, r3
 8019046:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 801904a:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 801904e:	4623      	mov	r3, r4
 8019050:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8019054:	4602      	mov	r2, r0
 8019056:	189b      	adds	r3, r3, r2
 8019058:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801905c:	462b      	mov	r3, r5
 801905e:	460a      	mov	r2, r1
 8019060:	4153      	adcs	r3, r2
 8019062:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8019066:	4a24      	ldr	r2, [pc, #144]	; (80190f8 <mbedtls_internal_sha512_process+0x16c0>)
 8019068:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 801906c:	00db      	lsls	r3, r3, #3
 801906e:	4413      	add	r3, r2
 8019070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019074:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 8019078:	4621      	mov	r1, r4
 801907a:	1889      	adds	r1, r1, r2
 801907c:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8019080:	4629      	mov	r1, r5
 8019082:	eb41 0303 	adc.w	r3, r1, r3
 8019086:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 801908a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801908e:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8019092:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8019096:	3302      	adds	r3, #2
 8019098:	00db      	lsls	r3, r3, #3
 801909a:	4413      	add	r3, r2
 801909c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190a0:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80190a4:	4621      	mov	r1, r4
 80190a6:	1889      	adds	r1, r1, r2
 80190a8:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 80190ac:	4629      	mov	r1, r5
 80190ae:	eb41 0303 	adc.w	r3, r1, r3
 80190b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80190b6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80190ba:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80190be:	e9d7 127a 	ldrd	r1, r2, [r7, #488]	; 0x1e8
 80190c2:	e9c3 1200 	strd	r1, r2, [r3]
 80190c6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80190ca:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80190ce:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 80190d2:	0118      	lsls	r0, r3, #4
 80190d4:	0f11      	lsrs	r1, r2, #28
 80190d6:	4301      	orrs	r1, r0
 80190d8:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 80190dc:	0111      	lsls	r1, r2, #4
 80190de:	0f1b      	lsrs	r3, r3, #28
 80190e0:	430b      	orrs	r3, r1
 80190e2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80190e6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80190ea:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80190ee:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 80190f2:	0890      	lsrs	r0, r2, #2
 80190f4:	e002      	b.n	80190fc <mbedtls_internal_sha512_process+0x16c4>
 80190f6:	bf00      	nop
 80190f8:	080200d0 	.word	0x080200d0
 80190fc:	0799      	lsls	r1, r3, #30
 80190fe:	4301      	orrs	r1, r0
 8019100:	f8c7 11dc 	str.w	r1, [r7, #476]	; 0x1dc
 8019104:	0899      	lsrs	r1, r3, #2
 8019106:	0793      	lsls	r3, r2, #30
 8019108:	430b      	orrs	r3, r1
 801910a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 801910e:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8019112:	4623      	mov	r3, r4
 8019114:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8019118:	4602      	mov	r2, r0
 801911a:	4053      	eors	r3, r2
 801911c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8019120:	462b      	mov	r3, r5
 8019122:	460a      	mov	r2, r1
 8019124:	4053      	eors	r3, r2
 8019126:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 801912a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801912e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019132:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 8019136:	09d0      	lsrs	r0, r2, #7
 8019138:	0659      	lsls	r1, r3, #25
 801913a:	4301      	orrs	r1, r0
 801913c:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 8019140:	09d9      	lsrs	r1, r3, #7
 8019142:	0653      	lsls	r3, r2, #25
 8019144:	430b      	orrs	r3, r1
 8019146:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 801914a:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	; 0x1d0
 801914e:	4623      	mov	r3, r4
 8019150:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8019154:	4602      	mov	r2, r0
 8019156:	4053      	eors	r3, r2
 8019158:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 801915c:	462b      	mov	r3, r5
 801915e:	460a      	mov	r2, r1
 8019160:	4053      	eors	r3, r2
 8019162:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8019166:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801916a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801916e:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	; 0x2a8
 8019172:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019176:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801917a:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 801917e:	ea00 0402 	and.w	r4, r0, r2
 8019182:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8019186:	400b      	ands	r3, r1
 8019188:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 801918c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019190:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019194:	e9d3 45ae 	ldrd	r4, r5, [r3, #696]	; 0x2b8
 8019198:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801919c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80191a0:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	; 0x2a8
 80191a4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80191a8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80191ac:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 80191b0:	ea40 0602 	orr.w	r6, r0, r2
 80191b4:	f8c7 61b0 	str.w	r6, [r7, #432]	; 0x1b0
 80191b8:	430b      	orrs	r3, r1
 80191ba:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80191be:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80191c2:	460b      	mov	r3, r1
 80191c4:	4023      	ands	r3, r4
 80191c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80191ca:	4613      	mov	r3, r2
 80191cc:	402b      	ands	r3, r5
 80191ce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80191d2:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 80191d6:	4623      	mov	r3, r4
 80191d8:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 80191dc:	4602      	mov	r2, r0
 80191de:	4313      	orrs	r3, r2
 80191e0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80191e4:	462b      	mov	r3, r5
 80191e6:	460a      	mov	r2, r1
 80191e8:	4313      	orrs	r3, r2
 80191ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80191ee:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 80191f2:	4623      	mov	r3, r4
 80191f4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80191f8:	4602      	mov	r2, r0
 80191fa:	189b      	adds	r3, r3, r2
 80191fc:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8019200:	462b      	mov	r3, r5
 8019202:	460a      	mov	r2, r1
 8019204:	4153      	adcs	r3, r2
 8019206:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 801920a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801920e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019212:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8019216:	e9c3 1202 	strd	r1, r2, [r3, #8]
 801921a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801921e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019222:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	; 0x2c0
 8019226:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801922a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019232:	1884      	adds	r4, r0, r2
 8019234:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 8019238:	eb41 0303 	adc.w	r3, r1, r3
 801923c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8019240:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019244:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019248:	e9d7 1264 	ldrd	r1, r2, [r7, #400]	; 0x190
 801924c:	e9c3 12b0 	strd	r1, r2, [r3, #704]	; 0x2c0
 8019250:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019254:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019258:	e9d3 0100 	ldrd	r0, r1, [r3]
 801925c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019260:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019264:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8019268:	1884      	adds	r4, r0, r2
 801926a:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 801926e:	eb41 0303 	adc.w	r3, r1, r3
 8019272:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8019276:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801927a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801927e:	e9d7 1262 	ldrd	r1, r2, [r7, #392]	; 0x188
 8019282:	e9c3 12a8 	strd	r1, r2, [r3, #672]	; 0x2a0
          local.A[0], local.A[1], local.A[2], local.W[i], K[i]); i++;
 8019286:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 801928a:	3301      	adds	r3, #1
 801928c:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
        P(local.A[2], local.A[3], local.A[4], local.A[5], local.A[6],
 8019290:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019294:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019298:	e9d3 45a6 	ldrd	r4, r5, [r3, #664]	; 0x298
 801929c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80192a0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80192a4:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 80192a8:	0498      	lsls	r0, r3, #18
 80192aa:	0b91      	lsrs	r1, r2, #14
 80192ac:	4301      	orrs	r1, r0
 80192ae:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 80192b2:	0491      	lsls	r1, r2, #18
 80192b4:	0b9b      	lsrs	r3, r3, #14
 80192b6:	430b      	orrs	r3, r1
 80192b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80192bc:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80192c0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80192c4:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 80192c8:	0398      	lsls	r0, r3, #14
 80192ca:	0c91      	lsrs	r1, r2, #18
 80192cc:	4301      	orrs	r1, r0
 80192ce:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 80192d2:	0391      	lsls	r1, r2, #14
 80192d4:	0c9b      	lsrs	r3, r3, #18
 80192d6:	430b      	orrs	r3, r1
 80192d8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80192dc:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 80192e0:	4643      	mov	r3, r8
 80192e2:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80192e6:	4602      	mov	r2, r0
 80192e8:	4053      	eors	r3, r2
 80192ea:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80192ee:	464b      	mov	r3, r9
 80192f0:	460a      	mov	r2, r1
 80192f2:	4053      	eors	r3, r2
 80192f4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80192f8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80192fc:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019300:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8019304:	0a50      	lsrs	r0, r2, #9
 8019306:	05d9      	lsls	r1, r3, #23
 8019308:	4301      	orrs	r1, r0
 801930a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 801930e:	0a59      	lsrs	r1, r3, #9
 8019310:	05d3      	lsls	r3, r2, #23
 8019312:	430b      	orrs	r3, r1
 8019314:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8019318:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 801931c:	4643      	mov	r3, r8
 801931e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8019322:	4602      	mov	r2, r0
 8019324:	4053      	eors	r3, r2
 8019326:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 801932a:	464b      	mov	r3, r9
 801932c:	460a      	mov	r2, r1
 801932e:	4053      	eors	r3, r2
 8019330:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8019334:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	; 0x160
 8019338:	460b      	mov	r3, r1
 801933a:	18e3      	adds	r3, r4, r3
 801933c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8019340:	4613      	mov	r3, r2
 8019342:	eb45 0303 	adc.w	r3, r5, r3
 8019346:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 801934a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801934e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019352:	e9d3 89a4 	ldrd	r8, r9, [r3, #656]	; 0x290
 8019356:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801935a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801935e:	e9d3 45b0 	ldrd	r4, r5, [r3, #704]	; 0x2c0
 8019362:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019366:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801936a:	e9d3 01b2 	ldrd	r0, r1, [r3, #712]	; 0x2c8
 801936e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019372:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019376:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	; 0x290
 801937a:	ea80 0602 	eor.w	r6, r0, r2
 801937e:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 8019382:	404b      	eors	r3, r1
 8019384:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8019388:	e9d7 1254 	ldrd	r1, r2, [r7, #336]	; 0x150
 801938c:	460b      	mov	r3, r1
 801938e:	4023      	ands	r3, r4
 8019390:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8019394:	4613      	mov	r3, r2
 8019396:	402b      	ands	r3, r5
 8019398:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801939c:	e9d7 1252 	ldrd	r1, r2, [r7, #328]	; 0x148
 80193a0:	460b      	mov	r3, r1
 80193a2:	ea88 0303 	eor.w	r3, r8, r3
 80193a6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80193aa:	4613      	mov	r3, r2
 80193ac:	ea89 0303 	eor.w	r3, r9, r3
 80193b0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80193b4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80193b8:	4623      	mov	r3, r4
 80193ba:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80193be:	4602      	mov	r2, r0
 80193c0:	189b      	adds	r3, r3, r2
 80193c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80193c6:	462b      	mov	r3, r5
 80193c8:	460a      	mov	r2, r1
 80193ca:	4153      	adcs	r3, r2
 80193cc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80193d0:	4af8      	ldr	r2, [pc, #992]	; (80197b4 <mbedtls_internal_sha512_process+0x1d7c>)
 80193d2:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80193d6:	00db      	lsls	r3, r3, #3
 80193d8:	4413      	add	r3, r2
 80193da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193de:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 80193e2:	4621      	mov	r1, r4
 80193e4:	1889      	adds	r1, r1, r2
 80193e6:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80193ea:	4629      	mov	r1, r5
 80193ec:	eb41 0303 	adc.w	r3, r1, r3
 80193f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80193f4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80193f8:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80193fc:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8019400:	3302      	adds	r3, #2
 8019402:	00db      	lsls	r3, r3, #3
 8019404:	4413      	add	r3, r2
 8019406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801940a:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 801940e:	4621      	mov	r1, r4
 8019410:	1889      	adds	r1, r1, r2
 8019412:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8019416:	4629      	mov	r1, r5
 8019418:	eb41 0303 	adc.w	r3, r1, r3
 801941c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8019420:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019424:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019428:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 801942c:	e9c3 1200 	strd	r1, r2, [r3]
 8019430:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019434:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019438:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 801943c:	0118      	lsls	r0, r3, #4
 801943e:	0f11      	lsrs	r1, r2, #28
 8019440:	4301      	orrs	r1, r0
 8019442:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8019446:	0111      	lsls	r1, r2, #4
 8019448:	0f1b      	lsrs	r3, r3, #28
 801944a:	430b      	orrs	r3, r1
 801944c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8019450:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019454:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019458:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 801945c:	0890      	lsrs	r0, r2, #2
 801945e:	0799      	lsls	r1, r3, #30
 8019460:	4301      	orrs	r1, r0
 8019462:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8019466:	0899      	lsrs	r1, r3, #2
 8019468:	0793      	lsls	r3, r2, #30
 801946a:	430b      	orrs	r3, r1
 801946c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8019470:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8019474:	4623      	mov	r3, r4
 8019476:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 801947a:	4602      	mov	r2, r0
 801947c:	4053      	eors	r3, r2
 801947e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8019482:	462b      	mov	r3, r5
 8019484:	460a      	mov	r2, r1
 8019486:	4053      	eors	r3, r2
 8019488:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801948c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019490:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019494:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8019498:	09d0      	lsrs	r0, r2, #7
 801949a:	0659      	lsls	r1, r3, #25
 801949c:	4301      	orrs	r1, r0
 801949e:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 80194a2:	09d9      	lsrs	r1, r3, #7
 80194a4:	0653      	lsls	r3, r2, #25
 80194a6:	430b      	orrs	r3, r1
 80194a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80194ac:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 80194b0:	4623      	mov	r3, r4
 80194b2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 80194b6:	4602      	mov	r2, r0
 80194b8:	4053      	eors	r3, r2
 80194ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80194be:	462b      	mov	r3, r5
 80194c0:	460a      	mov	r2, r1
 80194c2:	4053      	eors	r3, r2
 80194c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80194c8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80194cc:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80194d0:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	; 0x2a0
 80194d4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80194d8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80194dc:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 80194e0:	ea00 0402 	and.w	r4, r0, r2
 80194e4:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 80194e8:	400b      	ands	r3, r1
 80194ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80194ee:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80194f2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80194f6:	e9d3 45ac 	ldrd	r4, r5, [r3, #688]	; 0x2b0
 80194fa:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80194fe:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019502:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	; 0x2a0
 8019506:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801950a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801950e:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 8019512:	ea40 0602 	orr.w	r6, r0, r2
 8019516:	f8c7 60f0 	str.w	r6, [r7, #240]	; 0xf0
 801951a:	430b      	orrs	r3, r1
 801951c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8019520:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8019524:	460b      	mov	r3, r1
 8019526:	4023      	ands	r3, r4
 8019528:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801952c:	4613      	mov	r3, r2
 801952e:	402b      	ands	r3, r5
 8019530:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8019534:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8019538:	4623      	mov	r3, r4
 801953a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801953e:	4602      	mov	r2, r0
 8019540:	4313      	orrs	r3, r2
 8019542:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8019546:	462b      	mov	r3, r5
 8019548:	460a      	mov	r2, r1
 801954a:	4313      	orrs	r3, r2
 801954c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8019550:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8019554:	4623      	mov	r3, r4
 8019556:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801955a:	4602      	mov	r2, r0
 801955c:	189b      	adds	r3, r3, r2
 801955e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8019562:	462b      	mov	r3, r5
 8019564:	460a      	mov	r2, r1
 8019566:	4153      	adcs	r3, r2
 8019568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801956c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019570:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019574:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8019578:	e9c3 1202 	strd	r1, r2, [r3, #8]
 801957c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019580:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019584:	e9d3 01ae 	ldrd	r0, r1, [r3, #696]	; 0x2b8
 8019588:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801958c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019594:	1884      	adds	r4, r0, r2
 8019596:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 801959a:	eb41 0303 	adc.w	r3, r1, r3
 801959e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80195a2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80195a6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80195aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80195ae:	e9c3 12ae 	strd	r1, r2, [r3, #696]	; 0x2b8
 80195b2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80195b6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80195ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80195be:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80195c2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80195c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80195ca:	1884      	adds	r4, r0, r2
 80195cc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80195d0:	eb41 0303 	adc.w	r3, r1, r3
 80195d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80195d8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80195dc:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80195e0:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80195e4:	e9c3 12a6 	strd	r1, r2, [r3, #664]	; 0x298
          local.A[7], local.A[0], local.A[1], local.W[i], K[i]); i++;
 80195e8:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80195ec:	3301      	adds	r3, #1
 80195ee:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
        P(local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
 80195f2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80195f6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80195fa:	e9d3 45a4 	ldrd	r4, r5, [r3, #656]	; 0x290
 80195fe:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019602:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019606:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 801960a:	0498      	lsls	r0, r3, #18
 801960c:	0b91      	lsrs	r1, r2, #14
 801960e:	4301      	orrs	r1, r0
 8019610:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8019614:	0491      	lsls	r1, r2, #18
 8019616:	0b9b      	lsrs	r3, r3, #14
 8019618:	430b      	orrs	r3, r1
 801961a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801961e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019622:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019626:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 801962a:	0398      	lsls	r0, r3, #14
 801962c:	0c91      	lsrs	r1, r2, #18
 801962e:	4301      	orrs	r1, r0
 8019630:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8019634:	0391      	lsls	r1, r2, #14
 8019636:	0c9b      	lsrs	r3, r3, #18
 8019638:	430b      	orrs	r3, r1
 801963a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801963e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8019642:	4643      	mov	r3, r8
 8019644:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8019648:	4602      	mov	r2, r0
 801964a:	4053      	eors	r3, r2
 801964c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8019650:	464b      	mov	r3, r9
 8019652:	460a      	mov	r2, r1
 8019654:	4053      	eors	r3, r2
 8019656:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801965a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801965e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019662:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8019666:	0a50      	lsrs	r0, r2, #9
 8019668:	05d9      	lsls	r1, r3, #23
 801966a:	4301      	orrs	r1, r0
 801966c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8019670:	0a59      	lsrs	r1, r3, #9
 8019672:	05d3      	lsls	r3, r2, #23
 8019674:	430b      	orrs	r3, r1
 8019676:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801967a:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 801967e:	4643      	mov	r3, r8
 8019680:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8019684:	4602      	mov	r2, r0
 8019686:	4053      	eors	r3, r2
 8019688:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801968c:	464b      	mov	r3, r9
 801968e:	460a      	mov	r2, r1
 8019690:	4053      	eors	r3, r2
 8019692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8019696:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801969a:	460b      	mov	r3, r1
 801969c:	18e3      	adds	r3, r4, r3
 801969e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80196a2:	4613      	mov	r3, r2
 80196a4:	eb45 0303 	adc.w	r3, r5, r3
 80196a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80196ac:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80196b0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80196b4:	e9d3 89b2 	ldrd	r8, r9, [r3, #712]	; 0x2c8
 80196b8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80196bc:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80196c0:	e9d3 45ae 	ldrd	r4, r5, [r3, #696]	; 0x2b8
 80196c4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80196c8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80196cc:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	; 0x2c0
 80196d0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80196d4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80196d8:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 80196dc:	ea80 0602 	eor.w	r6, r0, r2
 80196e0:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
 80196e4:	404b      	eors	r3, r1
 80196e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80196ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80196ee:	460b      	mov	r3, r1
 80196f0:	4023      	ands	r3, r4
 80196f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80196f6:	4613      	mov	r3, r2
 80196f8:	402b      	ands	r3, r5
 80196fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80196fe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8019702:	460b      	mov	r3, r1
 8019704:	ea88 0303 	eor.w	r3, r8, r3
 8019708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801970c:	4613      	mov	r3, r2
 801970e:	ea89 0303 	eor.w	r3, r9, r3
 8019712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019716:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 801971a:	4623      	mov	r3, r4
 801971c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8019720:	4602      	mov	r2, r0
 8019722:	189b      	adds	r3, r3, r2
 8019724:	67bb      	str	r3, [r7, #120]	; 0x78
 8019726:	462b      	mov	r3, r5
 8019728:	460a      	mov	r2, r1
 801972a:	4153      	adcs	r3, r2
 801972c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801972e:	4a21      	ldr	r2, [pc, #132]	; (80197b4 <mbedtls_internal_sha512_process+0x1d7c>)
 8019730:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8019734:	00db      	lsls	r3, r3, #3
 8019736:	4413      	add	r3, r2
 8019738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801973c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8019740:	4621      	mov	r1, r4
 8019742:	1889      	adds	r1, r1, r2
 8019744:	6739      	str	r1, [r7, #112]	; 0x70
 8019746:	4629      	mov	r1, r5
 8019748:	eb41 0303 	adc.w	r3, r1, r3
 801974c:	677b      	str	r3, [r7, #116]	; 0x74
 801974e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019752:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8019756:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 801975a:	3302      	adds	r3, #2
 801975c:	00db      	lsls	r3, r3, #3
 801975e:	4413      	add	r3, r2
 8019760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019764:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8019768:	4621      	mov	r1, r4
 801976a:	1889      	adds	r1, r1, r2
 801976c:	66b9      	str	r1, [r7, #104]	; 0x68
 801976e:	4629      	mov	r1, r5
 8019770:	eb41 0303 	adc.w	r3, r1, r3
 8019774:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019776:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801977a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801977e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8019782:	e9c3 1200 	strd	r1, r2, [r3]
 8019786:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801978a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801978e:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 8019792:	0118      	lsls	r0, r3, #4
 8019794:	0f11      	lsrs	r1, r2, #28
 8019796:	4301      	orrs	r1, r0
 8019798:	6639      	str	r1, [r7, #96]	; 0x60
 801979a:	0111      	lsls	r1, r2, #4
 801979c:	0f1b      	lsrs	r3, r3, #28
 801979e:	430b      	orrs	r3, r1
 80197a0:	667b      	str	r3, [r7, #100]	; 0x64
 80197a2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80197a6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80197aa:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 80197ae:	0890      	lsrs	r0, r2, #2
 80197b0:	e002      	b.n	80197b8 <mbedtls_internal_sha512_process+0x1d80>
 80197b2:	bf00      	nop
 80197b4:	080200d0 	.word	0x080200d0
 80197b8:	0799      	lsls	r1, r3, #30
 80197ba:	4301      	orrs	r1, r0
 80197bc:	65f9      	str	r1, [r7, #92]	; 0x5c
 80197be:	0899      	lsrs	r1, r3, #2
 80197c0:	0793      	lsls	r3, r2, #30
 80197c2:	430b      	orrs	r3, r1
 80197c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80197c6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80197ca:	4623      	mov	r3, r4
 80197cc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80197d0:	4602      	mov	r2, r0
 80197d2:	4053      	eors	r3, r2
 80197d4:	653b      	str	r3, [r7, #80]	; 0x50
 80197d6:	462b      	mov	r3, r5
 80197d8:	460a      	mov	r2, r1
 80197da:	4053      	eors	r3, r2
 80197dc:	657b      	str	r3, [r7, #84]	; 0x54
 80197de:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80197e2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80197e6:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 80197ea:	09d0      	lsrs	r0, r2, #7
 80197ec:	0659      	lsls	r1, r3, #25
 80197ee:	4301      	orrs	r1, r0
 80197f0:	64f9      	str	r1, [r7, #76]	; 0x4c
 80197f2:	09d9      	lsrs	r1, r3, #7
 80197f4:	0653      	lsls	r3, r2, #25
 80197f6:	430b      	orrs	r3, r1
 80197f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80197fa:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80197fe:	4623      	mov	r3, r4
 8019800:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8019804:	4602      	mov	r2, r0
 8019806:	4053      	eors	r3, r2
 8019808:	643b      	str	r3, [r7, #64]	; 0x40
 801980a:	462b      	mov	r3, r5
 801980c:	460a      	mov	r2, r1
 801980e:	4053      	eors	r3, r2
 8019810:	647b      	str	r3, [r7, #68]	; 0x44
 8019812:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019816:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801981a:	e9d3 01a6 	ldrd	r0, r1, [r3, #664]	; 0x298
 801981e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019822:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019826:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 801982a:	ea00 0402 	and.w	r4, r0, r2
 801982e:	63bc      	str	r4, [r7, #56]	; 0x38
 8019830:	400b      	ands	r3, r1
 8019832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019834:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019838:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801983c:	e9d3 45aa 	ldrd	r4, r5, [r3, #680]	; 0x2a8
 8019840:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019844:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019848:	e9d3 01a6 	ldrd	r0, r1, [r3, #664]	; 0x298
 801984c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019850:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019854:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8019858:	ea40 0602 	orr.w	r6, r0, r2
 801985c:	633e      	str	r6, [r7, #48]	; 0x30
 801985e:	430b      	orrs	r3, r1
 8019860:	637b      	str	r3, [r7, #52]	; 0x34
 8019862:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8019866:	460b      	mov	r3, r1
 8019868:	4023      	ands	r3, r4
 801986a:	62bb      	str	r3, [r7, #40]	; 0x28
 801986c:	4613      	mov	r3, r2
 801986e:	402b      	ands	r3, r5
 8019870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019872:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8019876:	4623      	mov	r3, r4
 8019878:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801987c:	4602      	mov	r2, r0
 801987e:	4313      	orrs	r3, r2
 8019880:	623b      	str	r3, [r7, #32]
 8019882:	462b      	mov	r3, r5
 8019884:	460a      	mov	r2, r1
 8019886:	4313      	orrs	r3, r2
 8019888:	627b      	str	r3, [r7, #36]	; 0x24
 801988a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801988e:	4623      	mov	r3, r4
 8019890:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8019894:	4602      	mov	r2, r0
 8019896:	189b      	adds	r3, r3, r2
 8019898:	61bb      	str	r3, [r7, #24]
 801989a:	462b      	mov	r3, r5
 801989c:	460a      	mov	r2, r1
 801989e:	4153      	adcs	r3, r2
 80198a0:	61fb      	str	r3, [r7, #28]
 80198a2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80198a6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80198aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80198ae:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80198b2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80198b6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80198ba:	e9d3 01ac 	ldrd	r0, r1, [r3, #688]	; 0x2b0
 80198be:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80198c2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80198c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198ca:	1884      	adds	r4, r0, r2
 80198cc:	613c      	str	r4, [r7, #16]
 80198ce:	eb41 0303 	adc.w	r3, r1, r3
 80198d2:	617b      	str	r3, [r7, #20]
 80198d4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80198d8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80198dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80198e0:	e9c3 12ac 	strd	r1, r2, [r3, #688]	; 0x2b0
 80198e4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80198e8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80198ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80198f0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80198f4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80198f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80198fc:	1884      	adds	r4, r0, r2
 80198fe:	60bc      	str	r4, [r7, #8]
 8019900:	eb41 0303 	adc.w	r3, r1, r3
 8019904:	60fb      	str	r3, [r7, #12]
 8019906:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801990a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801990e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8019912:	e9c3 12a4 	strd	r1, r2, [r3, #656]	; 0x290
          local.A[6], local.A[7], local.A[0], local.W[i], K[i]); i++;
 8019916:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 801991a:	3301      	adds	r3, #1
 801991c:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    } while (i < 80);
 8019920:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8019924:	2b4f      	cmp	r3, #79	; 0x4f
 8019926:	f77e aa00 	ble.w	8017d2a <mbedtls_internal_sha512_process+0x2f2>
#endif /* MBEDTLS_SHA512_SMALLER */

    for (i = 0; i < 8; i++) {
 801992a:	2300      	movs	r3, #0
 801992c:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8019930:	e02e      	b.n	8019990 <mbedtls_internal_sha512_process+0x1f58>
        ctx->state[i] += local.A[i];
 8019932:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8019936:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801993a:	681a      	ldr	r2, [r3, #0]
 801993c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8019940:	3302      	adds	r3, #2
 8019942:	00db      	lsls	r3, r3, #3
 8019944:	4413      	add	r3, r2
 8019946:	e9d3 0100 	ldrd	r0, r1, [r3]
 801994a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801994e:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8019952:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8019956:	3352      	adds	r3, #82	; 0x52
 8019958:	00db      	lsls	r3, r3, #3
 801995a:	4413      	add	r3, r2
 801995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019960:	1884      	adds	r4, r0, r2
 8019962:	603c      	str	r4, [r7, #0]
 8019964:	eb41 0303 	adc.w	r3, r1, r3
 8019968:	607b      	str	r3, [r7, #4]
 801996a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801996e:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8019972:	681a      	ldr	r2, [r3, #0]
 8019974:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8019978:	3302      	adds	r3, #2
 801997a:	00db      	lsls	r3, r3, #3
 801997c:	4413      	add	r3, r2
 801997e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8019982:	e9c3 1200 	strd	r1, r2, [r3]
    for (i = 0; i < 8; i++) {
 8019986:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 801998a:	3301      	adds	r3, #1
 801998c:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8019990:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8019994:	2b07      	cmp	r3, #7
 8019996:	ddcc      	ble.n	8019932 <mbedtls_internal_sha512_process+0x1efa>
    }

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize(&local, sizeof(local));
 8019998:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801999c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80199a0:	4618      	mov	r0, r3
 80199a2:	f7f4 ffc3 	bl	800e92c <mbedtls_platform_zeroize>

    return 0;
 80199a6:	2300      	movs	r3, #0
}
 80199a8:	4618      	mov	r0, r3
 80199aa:	f607 173c 	addw	r7, r7, #2364	; 0x93c
 80199ae:	46bd      	mov	sp, r7
 80199b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080199b4 <mbedtls_internal_sha512_process_many>:

#if !defined(MBEDTLS_SHA512_USE_A64_CRYPTO_ONLY)

static size_t mbedtls_internal_sha512_process_many_c(
    mbedtls_sha512_context *ctx, const uint8_t *data, size_t len)
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b086      	sub	sp, #24
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	60f8      	str	r0, [r7, #12]
 80199bc:	60b9      	str	r1, [r7, #8]
 80199be:	607a      	str	r2, [r7, #4]
    size_t processed = 0;
 80199c0:	2300      	movs	r3, #0
 80199c2:	617b      	str	r3, [r7, #20]

    while (len >= SHA512_BLOCK_SIZE) {
 80199c4:	e011      	b.n	80199ea <mbedtls_internal_sha512_process_many+0x36>
        if (mbedtls_internal_sha512_process_c(ctx, data) != 0) {
 80199c6:	68b9      	ldr	r1, [r7, #8]
 80199c8:	68f8      	ldr	r0, [r7, #12]
 80199ca:	f7fe f835 	bl	8017a38 <mbedtls_internal_sha512_process>
 80199ce:	4603      	mov	r3, r0
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d001      	beq.n	80199d8 <mbedtls_internal_sha512_process_many+0x24>
            return 0;
 80199d4:	2300      	movs	r3, #0
 80199d6:	e00c      	b.n	80199f2 <mbedtls_internal_sha512_process_many+0x3e>
        }

        data += SHA512_BLOCK_SIZE;
 80199d8:	68bb      	ldr	r3, [r7, #8]
 80199da:	3380      	adds	r3, #128	; 0x80
 80199dc:	60bb      	str	r3, [r7, #8]
        len  -= SHA512_BLOCK_SIZE;
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	3b80      	subs	r3, #128	; 0x80
 80199e2:	607b      	str	r3, [r7, #4]

        processed += SHA512_BLOCK_SIZE;
 80199e4:	697b      	ldr	r3, [r7, #20]
 80199e6:	3380      	adds	r3, #128	; 0x80
 80199e8:	617b      	str	r3, [r7, #20]
    while (len >= SHA512_BLOCK_SIZE) {
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	2b7f      	cmp	r3, #127	; 0x7f
 80199ee:	d8ea      	bhi.n	80199c6 <mbedtls_internal_sha512_process_many+0x12>
    }

    return processed;
 80199f0:	697b      	ldr	r3, [r7, #20]
}
 80199f2:	4618      	mov	r0, r3
 80199f4:	3718      	adds	r7, #24
 80199f6:	46bd      	mov	sp, r7
 80199f8:	bd80      	pop	{r7, pc}

080199fa <mbedtls_sha512_update>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update(mbedtls_sha512_context *ctx,
                          const unsigned char *input,
                          size_t ilen)
{
 80199fa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80199fe:	b08a      	sub	sp, #40	; 0x28
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	6178      	str	r0, [r7, #20]
 8019a04:	6139      	str	r1, [r7, #16]
 8019a06:	60fa      	str	r2, [r7, #12]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8019a08:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8019a0c:	623b      	str	r3, [r7, #32]
    size_t fill;
    unsigned int left;

    if (ilen == 0) {
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d101      	bne.n	8019a18 <mbedtls_sha512_update+0x1e>
        return 0;
 8019a14:	2300      	movs	r3, #0
 8019a16:	e07d      	b.n	8019b14 <mbedtls_sha512_update+0x11a>
    }

    left = (unsigned int) (ctx->total[0] & 0x7F);
 8019a18:	697b      	ldr	r3, [r7, #20]
 8019a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a1e:	4613      	mov	r3, r2
 8019a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019a24:	627b      	str	r3, [r7, #36]	; 0x24
    fill = SHA512_BLOCK_SIZE - left;
 8019a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a28:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8019a2c:	61fb      	str	r3, [r7, #28]

    ctx->total[0] += (uint64_t) ilen;
 8019a2e:	697b      	ldr	r3, [r7, #20]
 8019a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a34:	68f9      	ldr	r1, [r7, #12]
 8019a36:	2000      	movs	r0, #0
 8019a38:	4688      	mov	r8, r1
 8019a3a:	4681      	mov	r9, r0
 8019a3c:	eb12 0108 	adds.w	r1, r2, r8
 8019a40:	6039      	str	r1, [r7, #0]
 8019a42:	eb43 0309 	adc.w	r3, r3, r9
 8019a46:	607b      	str	r3, [r7, #4]
 8019a48:	697b      	ldr	r3, [r7, #20]
 8019a4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8019a4e:	e9c3 1200 	strd	r1, r2, [r3]

    if (ctx->total[0] < (uint64_t) ilen) {
 8019a52:	697b      	ldr	r3, [r7, #20]
 8019a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a58:	68f9      	ldr	r1, [r7, #12]
 8019a5a:	2000      	movs	r0, #0
 8019a5c:	460c      	mov	r4, r1
 8019a5e:	4605      	mov	r5, r0
 8019a60:	42a2      	cmp	r2, r4
 8019a62:	41ab      	sbcs	r3, r5
 8019a64:	d209      	bcs.n	8019a7a <mbedtls_sha512_update+0x80>
        ctx->total[1]++;
 8019a66:	697b      	ldr	r3, [r7, #20]
 8019a68:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8019a6c:	f112 0a01 	adds.w	sl, r2, #1
 8019a70:	f143 0b00 	adc.w	fp, r3, #0
 8019a74:	697b      	ldr	r3, [r7, #20]
 8019a76:	e9c3 ab02 	strd	sl, fp, [r3, #8]
    }

    if (left && ilen >= fill) {
 8019a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d038      	beq.n	8019af2 <mbedtls_sha512_update+0xf8>
 8019a80:	68fa      	ldr	r2, [r7, #12]
 8019a82:	69fb      	ldr	r3, [r7, #28]
 8019a84:	429a      	cmp	r2, r3
 8019a86:	d334      	bcc.n	8019af2 <mbedtls_sha512_update+0xf8>
        memcpy((void *) (ctx->buffer + left), input, fill);
 8019a88:	697b      	ldr	r3, [r7, #20]
 8019a8a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8019a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a90:	4413      	add	r3, r2
 8019a92:	69fa      	ldr	r2, [r7, #28]
 8019a94:	6939      	ldr	r1, [r7, #16]
 8019a96:	4618      	mov	r0, r3
 8019a98:	f003 fc2e 	bl	801d2f8 <memcpy>

        if ((ret = mbedtls_internal_sha512_process(ctx, ctx->buffer)) != 0) {
 8019a9c:	697b      	ldr	r3, [r7, #20]
 8019a9e:	3350      	adds	r3, #80	; 0x50
 8019aa0:	4619      	mov	r1, r3
 8019aa2:	6978      	ldr	r0, [r7, #20]
 8019aa4:	f7fd ffc8 	bl	8017a38 <mbedtls_internal_sha512_process>
 8019aa8:	6238      	str	r0, [r7, #32]
 8019aaa:	6a3b      	ldr	r3, [r7, #32]
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d001      	beq.n	8019ab4 <mbedtls_sha512_update+0xba>
            return ret;
 8019ab0:	6a3b      	ldr	r3, [r7, #32]
 8019ab2:	e02f      	b.n	8019b14 <mbedtls_sha512_update+0x11a>
        }

        input += fill;
 8019ab4:	693a      	ldr	r2, [r7, #16]
 8019ab6:	69fb      	ldr	r3, [r7, #28]
 8019ab8:	4413      	add	r3, r2
 8019aba:	613b      	str	r3, [r7, #16]
        ilen  -= fill;
 8019abc:	68fa      	ldr	r2, [r7, #12]
 8019abe:	69fb      	ldr	r3, [r7, #28]
 8019ac0:	1ad3      	subs	r3, r2, r3
 8019ac2:	60fb      	str	r3, [r7, #12]
        left = 0;
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while (ilen >= SHA512_BLOCK_SIZE) {
 8019ac8:	e013      	b.n	8019af2 <mbedtls_sha512_update+0xf8>
        size_t processed =
            mbedtls_internal_sha512_process_many(ctx, input, ilen);
 8019aca:	68fa      	ldr	r2, [r7, #12]
 8019acc:	6939      	ldr	r1, [r7, #16]
 8019ace:	6978      	ldr	r0, [r7, #20]
 8019ad0:	f7ff ff70 	bl	80199b4 <mbedtls_internal_sha512_process_many>
 8019ad4:	61b8      	str	r0, [r7, #24]
        if (processed < SHA512_BLOCK_SIZE) {
 8019ad6:	69bb      	ldr	r3, [r7, #24]
 8019ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8019ada:	d802      	bhi.n	8019ae2 <mbedtls_sha512_update+0xe8>
            return MBEDTLS_ERR_ERROR_GENERIC_ERROR;
 8019adc:	f04f 33ff 	mov.w	r3, #4294967295
 8019ae0:	e018      	b.n	8019b14 <mbedtls_sha512_update+0x11a>
        }

        input += processed;
 8019ae2:	693a      	ldr	r2, [r7, #16]
 8019ae4:	69bb      	ldr	r3, [r7, #24]
 8019ae6:	4413      	add	r3, r2
 8019ae8:	613b      	str	r3, [r7, #16]
        ilen  -= processed;
 8019aea:	68fa      	ldr	r2, [r7, #12]
 8019aec:	69bb      	ldr	r3, [r7, #24]
 8019aee:	1ad3      	subs	r3, r2, r3
 8019af0:	60fb      	str	r3, [r7, #12]
    while (ilen >= SHA512_BLOCK_SIZE) {
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	2b7f      	cmp	r3, #127	; 0x7f
 8019af6:	d8e8      	bhi.n	8019aca <mbedtls_sha512_update+0xd0>
    }

    if (ilen > 0) {
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d009      	beq.n	8019b12 <mbedtls_sha512_update+0x118>
        memcpy((void *) (ctx->buffer + left), input, ilen);
 8019afe:	697b      	ldr	r3, [r7, #20]
 8019b00:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8019b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b06:	4413      	add	r3, r2
 8019b08:	68fa      	ldr	r2, [r7, #12]
 8019b0a:	6939      	ldr	r1, [r7, #16]
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	f003 fbf3 	bl	801d2f8 <memcpy>
    }

    return 0;
 8019b12:	2300      	movs	r3, #0
}
 8019b14:	4618      	mov	r0, r3
 8019b16:	3728      	adds	r7, #40	; 0x28
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08019b1e <mbedtls_sha512_finish>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish(mbedtls_sha512_context *ctx,
                          unsigned char *output)
{
 8019b1e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019b22:	b0a8      	sub	sp, #160	; 0xa0
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	6078      	str	r0, [r7, #4]
 8019b28:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8019b2a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8019b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    unsigned used;
    uint64_t high, low;
    int truncated = 0;
 8019b32:	2300      	movs	r3, #0
 8019b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b3e:	4613      	mov	r3, r2
 8019b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    ctx->buffer[used++] = 0x80;
 8019b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019b4c:	1c5a      	adds	r2, r3, #1
 8019b4e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8019b52:	687a      	ldr	r2, [r7, #4]
 8019b54:	4413      	add	r3, r2
 8019b56:	2280      	movs	r2, #128	; 0x80
 8019b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    if (used <= 112) {
 8019b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019b60:	2b70      	cmp	r3, #112	; 0x70
 8019b62:	d80e      	bhi.n	8019b82 <mbedtls_sha512_finish+0x64>
        /* Enough room for padding + length in current block */
        memset(ctx->buffer + used, 0, 112 - used);
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8019b6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019b6e:	18d0      	adds	r0, r2, r3
 8019b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019b74:	f1c3 0370 	rsb	r3, r3, #112	; 0x70
 8019b78:	461a      	mov	r2, r3
 8019b7a:	2100      	movs	r1, #0
 8019b7c:	f003 fb1e 	bl	801d1bc <memset>
 8019b80:	e021      	b.n	8019bc6 <mbedtls_sha512_finish+0xa8>
    } else {
        /* We'll need an extra block */
        memset(ctx->buffer + used, 0, SHA512_BLOCK_SIZE - used);
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8019b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019b8c:	18d0      	adds	r0, r2, r3
 8019b8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019b92:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8019b96:	461a      	mov	r2, r3
 8019b98:	2100      	movs	r1, #0
 8019b9a:	f003 fb0f 	bl	801d1bc <memset>

        if ((ret = mbedtls_internal_sha512_process(ctx, ctx->buffer)) != 0) {
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	3350      	adds	r3, #80	; 0x50
 8019ba2:	4619      	mov	r1, r3
 8019ba4:	6878      	ldr	r0, [r7, #4]
 8019ba6:	f7fd ff47 	bl	8017a38 <mbedtls_internal_sha512_process>
 8019baa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8019bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	f040 811e 	bne.w	8019df4 <mbedtls_sha512_finish+0x2d6>
            goto exit;
        }

        memset(ctx->buffer, 0, 112);
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	3350      	adds	r3, #80	; 0x50
 8019bbc:	2270      	movs	r2, #112	; 0x70
 8019bbe:	2100      	movs	r1, #0
 8019bc0:	4618      	mov	r0, r3
 8019bc2:	f003 fafb 	bl	801d1bc <memset>
    }

    /*
     * Add message length
     */
    high = (ctx->total[0] >> 61)
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bcc:	f04f 0000 	mov.w	r0, #0
 8019bd0:	f04f 0100 	mov.w	r1, #0
 8019bd4:	0f58      	lsrs	r0, r3, #29
 8019bd6:	2100      	movs	r1, #0
           | (ctx->total[1] <<  3);
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8019bde:	f04f 0200 	mov.w	r2, #0
 8019be2:	f04f 0300 	mov.w	r3, #0
 8019be6:	00eb      	lsls	r3, r5, #3
 8019be8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8019bec:	00e2      	lsls	r2, r4, #3
    high = (ctx->total[0] >> 61)
 8019bee:	ea40 0802 	orr.w	r8, r0, r2
 8019bf2:	ea41 0903 	orr.w	r9, r1, r3
 8019bf6:	e9c7 8924 	strd	r8, r9, [r7, #144]	; 0x90
    low  = (ctx->total[0] <<  3);
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019c00:	f04f 0200 	mov.w	r2, #0
 8019c04:	f04f 0300 	mov.w	r3, #0
 8019c08:	00cb      	lsls	r3, r1, #3
 8019c0a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8019c0e:	00c2      	lsls	r2, r0, #3
 8019c10:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

    sha512_put_uint64_be(high, ctx->buffer, 112);
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	3350      	adds	r3, #80	; 0x50
 8019c18:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8019c1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019c20:	ba18      	rev	r0, r3
 8019c22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019c26:	ba1c      	rev	r4, r3
 8019c28:	4622      	mov	r2, r4
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8019c30:	e9c7 2302 	strd	r2, r3, [r7, #8]
    memcpy(p, &x, sizeof(x));
 8019c34:	f107 0308 	add.w	r3, r7, #8
 8019c38:	2208      	movs	r2, #8
 8019c3a:	4619      	mov	r1, r3
 8019c3c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8019c40:	f003 fb5a 	bl	801d2f8 <memcpy>
}
 8019c44:	bf00      	nop
    sha512_put_uint64_be(low,  ctx->buffer, 120);
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	3350      	adds	r3, #80	; 0x50
 8019c4a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8019c4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019c52:	ba18      	rev	r0, r3
 8019c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019c58:	ba1c      	rev	r4, r3
 8019c5a:	4622      	mov	r2, r4
 8019c5c:	4603      	mov	r3, r0
 8019c5e:	67f9      	str	r1, [r7, #124]	; 0x7c
 8019c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    memcpy(p, &x, sizeof(x));
 8019c64:	f107 0310 	add.w	r3, r7, #16
 8019c68:	2208      	movs	r2, #8
 8019c6a:	4619      	mov	r1, r3
 8019c6c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8019c6e:	f003 fb43 	bl	801d2f8 <memcpy>
}
 8019c72:	bf00      	nop

    if ((ret = mbedtls_internal_sha512_process(ctx, ctx->buffer)) != 0) {
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	3350      	adds	r3, #80	; 0x50
 8019c78:	4619      	mov	r1, r3
 8019c7a:	6878      	ldr	r0, [r7, #4]
 8019c7c:	f7fd fedc 	bl	8017a38 <mbedtls_internal_sha512_process>
 8019c80:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8019c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	f040 80b5 	bne.w	8019df8 <mbedtls_sha512_finish+0x2da>
    }

    /*
     * Output final state
     */
    sha512_put_uint64_be(ctx->state[0], output,  0);
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8019c94:	ba11      	rev	r1, r2
 8019c96:	ba18      	rev	r0, r3
 8019c98:	4602      	mov	r2, r0
 8019c9a:	460b      	mov	r3, r1
 8019c9c:	6839      	ldr	r1, [r7, #0]
 8019c9e:	67b9      	str	r1, [r7, #120]	; 0x78
 8019ca0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    memcpy(p, &x, sizeof(x));
 8019ca4:	f107 0318 	add.w	r3, r7, #24
 8019ca8:	2208      	movs	r2, #8
 8019caa:	4619      	mov	r1, r3
 8019cac:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8019cae:	f003 fb23 	bl	801d2f8 <memcpy>
}
 8019cb2:	bf00      	nop
    sha512_put_uint64_be(ctx->state[1], output,  8);
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	f103 0108 	add.w	r1, r3, #8
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8019cc0:	ba10      	rev	r0, r2
 8019cc2:	ba1c      	rev	r4, r3
 8019cc4:	4622      	mov	r2, r4
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	6779      	str	r1, [r7, #116]	; 0x74
 8019cca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8019cce:	f107 0320 	add.w	r3, r7, #32
 8019cd2:	2208      	movs	r2, #8
 8019cd4:	4619      	mov	r1, r3
 8019cd6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019cd8:	f003 fb0e 	bl	801d2f8 <memcpy>
}
 8019cdc:	bf00      	nop
    sha512_put_uint64_be(ctx->state[2], output, 16);
 8019cde:	683b      	ldr	r3, [r7, #0]
 8019ce0:	f103 0110 	add.w	r1, r3, #16
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019cea:	ba10      	rev	r0, r2
 8019cec:	ba1c      	rev	r4, r3
 8019cee:	4622      	mov	r2, r4
 8019cf0:	4603      	mov	r3, r0
 8019cf2:	6739      	str	r1, [r7, #112]	; 0x70
 8019cf4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 8019cf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019cfc:	2208      	movs	r2, #8
 8019cfe:	4619      	mov	r1, r3
 8019d00:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8019d02:	f003 faf9 	bl	801d2f8 <memcpy>
}
 8019d06:	bf00      	nop
    sha512_put_uint64_be(ctx->state[3], output, 24);
 8019d08:	683b      	ldr	r3, [r7, #0]
 8019d0a:	f103 0118 	add.w	r1, r3, #24
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8019d14:	ba10      	rev	r0, r2
 8019d16:	ba1c      	rev	r4, r3
 8019d18:	4622      	mov	r2, r4
 8019d1a:	4603      	mov	r3, r0
 8019d1c:	66f9      	str	r1, [r7, #108]	; 0x6c
 8019d1e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    memcpy(p, &x, sizeof(x));
 8019d22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019d26:	2208      	movs	r2, #8
 8019d28:	4619      	mov	r1, r3
 8019d2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8019d2c:	f003 fae4 	bl	801d2f8 <memcpy>
}
 8019d30:	bf00      	nop
    sha512_put_uint64_be(ctx->state[4], output, 32);
 8019d32:	683b      	ldr	r3, [r7, #0]
 8019d34:	f103 0120 	add.w	r1, r3, #32
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8019d3e:	ba10      	rev	r0, r2
 8019d40:	ba1c      	rev	r4, r3
 8019d42:	4622      	mov	r2, r4
 8019d44:	4603      	mov	r3, r0
 8019d46:	66b9      	str	r1, [r7, #104]	; 0x68
 8019d48:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    memcpy(p, &x, sizeof(x));
 8019d4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019d50:	2208      	movs	r2, #8
 8019d52:	4619      	mov	r1, r3
 8019d54:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8019d56:	f003 facf 	bl	801d2f8 <memcpy>
}
 8019d5a:	bf00      	nop
    sha512_put_uint64_be(ctx->state[5], output, 40);
 8019d5c:	683b      	ldr	r3, [r7, #0]
 8019d5e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8019d68:	ba10      	rev	r0, r2
 8019d6a:	ba1c      	rev	r4, r3
 8019d6c:	4622      	mov	r2, r4
 8019d6e:	4603      	mov	r3, r0
 8019d70:	6679      	str	r1, [r7, #100]	; 0x64
 8019d72:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    memcpy(p, &x, sizeof(x));
 8019d76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019d7a:	2208      	movs	r2, #8
 8019d7c:	4619      	mov	r1, r3
 8019d7e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8019d80:	f003 faba 	bl	801d2f8 <memcpy>
}
 8019d84:	bf00      	nop

#if defined(MBEDTLS_SHA384_C)
    truncated = ctx->is384;
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8019d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
    if (!truncated) {
 8019d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d129      	bne.n	8019dec <mbedtls_sha512_finish+0x2ce>
        sha512_put_uint64_be(ctx->state[6], output, 48);
 8019d98:	683b      	ldr	r3, [r7, #0]
 8019d9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8019da4:	ba10      	rev	r0, r2
 8019da6:	ba1c      	rev	r4, r3
 8019da8:	4622      	mov	r2, r4
 8019daa:	4603      	mov	r3, r0
 8019dac:	6639      	str	r1, [r7, #96]	; 0x60
 8019dae:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    memcpy(p, &x, sizeof(x));
 8019db2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019db6:	2208      	movs	r2, #8
 8019db8:	4619      	mov	r1, r3
 8019dba:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8019dbc:	f003 fa9c 	bl	801d2f8 <memcpy>
}
 8019dc0:	bf00      	nop
        sha512_put_uint64_be(ctx->state[7], output, 56);
 8019dc2:	683b      	ldr	r3, [r7, #0]
 8019dc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8019dce:	ba10      	rev	r0, r2
 8019dd0:	ba1c      	rev	r4, r3
 8019dd2:	4622      	mov	r2, r4
 8019dd4:	4603      	mov	r3, r0
 8019dd6:	65f9      	str	r1, [r7, #92]	; 0x5c
 8019dd8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    memcpy(p, &x, sizeof(x));
 8019ddc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019de0:	2208      	movs	r2, #8
 8019de2:	4619      	mov	r1, r3
 8019de4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019de6:	f003 fa87 	bl	801d2f8 <memcpy>
}
 8019dea:	bf00      	nop
    }

    ret = 0;
 8019dec:	2300      	movs	r3, #0
 8019dee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019df2:	e002      	b.n	8019dfa <mbedtls_sha512_finish+0x2dc>
            goto exit;
 8019df4:	bf00      	nop
 8019df6:	e000      	b.n	8019dfa <mbedtls_sha512_finish+0x2dc>
        goto exit;
 8019df8:	bf00      	nop

exit:
    mbedtls_sha512_free(ctx);
 8019dfa:	6878      	ldr	r0, [r7, #4]
 8019dfc:	f7fd fd40 	bl	8017880 <mbedtls_sha512_free>
    return ret;
 8019e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8019e04:	4618      	mov	r0, r3
 8019e06:	37a0      	adds	r7, #160	; 0xa0
 8019e08:	46bd      	mov	sp, r7
 8019e0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08019e0e <mbedtls_sha512>:
 */
int mbedtls_sha512(const unsigned char *input,
                   size_t ilen,
                   unsigned char *output,
                   int is384)
{
 8019e0e:	b580      	push	{r7, lr}
 8019e10:	b0bc      	sub	sp, #240	; 0xf0
 8019e12:	af00      	add	r7, sp, #0
 8019e14:	60f8      	str	r0, [r7, #12]
 8019e16:	60b9      	str	r1, [r7, #8]
 8019e18:	607a      	str	r2, [r7, #4]
 8019e1a:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8019e1c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8019e20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    mbedtls_sha512_context ctx;

#if defined(MBEDTLS_SHA384_C) && defined(MBEDTLS_SHA512_C)
    if (is384 != 0 && is384 != 1) {
 8019e24:	683b      	ldr	r3, [r7, #0]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d005      	beq.n	8019e36 <mbedtls_sha512+0x28>
 8019e2a:	683b      	ldr	r3, [r7, #0]
 8019e2c:	2b01      	cmp	r3, #1
 8019e2e:	d002      	beq.n	8019e36 <mbedtls_sha512+0x28>
        return MBEDTLS_ERR_SHA512_BAD_INPUT_DATA;
 8019e30:	f06f 0374 	mvn.w	r3, #116	; 0x74
 8019e34:	e033      	b.n	8019e9e <mbedtls_sha512+0x90>
    if (is384 == 0) {
        return MBEDTLS_ERR_SHA512_BAD_INPUT_DATA;
    }
#endif

    mbedtls_sha512_init(&ctx);
 8019e36:	f107 0310 	add.w	r3, r7, #16
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	f7fd fd13 	bl	8017866 <mbedtls_sha512_init>

    if ((ret = mbedtls_sha512_starts(&ctx, is384)) != 0) {
 8019e40:	f107 0310 	add.w	r3, r7, #16
 8019e44:	6839      	ldr	r1, [r7, #0]
 8019e46:	4618      	mov	r0, r3
 8019e48:	f7fd fd2a 	bl	80178a0 <mbedtls_sha512_starts>
 8019e4c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8019e50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d118      	bne.n	8019e8a <mbedtls_sha512+0x7c>
        goto exit;
    }

    if ((ret = mbedtls_sha512_update(&ctx, input, ilen)) != 0) {
 8019e58:	f107 0310 	add.w	r3, r7, #16
 8019e5c:	68ba      	ldr	r2, [r7, #8]
 8019e5e:	68f9      	ldr	r1, [r7, #12]
 8019e60:	4618      	mov	r0, r3
 8019e62:	f7ff fdca 	bl	80199fa <mbedtls_sha512_update>
 8019e66:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8019e6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d10d      	bne.n	8019e8e <mbedtls_sha512+0x80>
        goto exit;
    }

    if ((ret = mbedtls_sha512_finish(&ctx, output)) != 0) {
 8019e72:	f107 0310 	add.w	r3, r7, #16
 8019e76:	6879      	ldr	r1, [r7, #4]
 8019e78:	4618      	mov	r0, r3
 8019e7a:	f7ff fe50 	bl	8019b1e <mbedtls_sha512_finish>
 8019e7e:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8019e82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8019e86:	2b00      	cmp	r3, #0
        goto exit;
    }

exit:
 8019e88:	e002      	b.n	8019e90 <mbedtls_sha512+0x82>
        goto exit;
 8019e8a:	bf00      	nop
 8019e8c:	e000      	b.n	8019e90 <mbedtls_sha512+0x82>
        goto exit;
 8019e8e:	bf00      	nop
    mbedtls_sha512_free(&ctx);
 8019e90:	f107 0310 	add.w	r3, r7, #16
 8019e94:	4618      	mov	r0, r3
 8019e96:	f7fd fcf3 	bl	8017880 <mbedtls_sha512_free>

    return ret;
 8019e9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
}
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	37f0      	adds	r7, #240	; 0xf0
 8019ea2:	46bd      	mov	sp, r7
 8019ea4:	bd80      	pop	{r7, pc}
	...

08019ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8019ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019ee0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8019eac:	f7e8 fad8 	bl	8002460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8019eb0:	480c      	ldr	r0, [pc, #48]	; (8019ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8019eb2:	490d      	ldr	r1, [pc, #52]	; (8019ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8019eb4:	4a0d      	ldr	r2, [pc, #52]	; (8019eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8019eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019eb8:	e002      	b.n	8019ec0 <LoopCopyDataInit>

08019eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8019ebe:	3304      	adds	r3, #4

08019ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8019ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8019ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8019ec4:	d3f9      	bcc.n	8019eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8019ec6:	4a0a      	ldr	r2, [pc, #40]	; (8019ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8019ec8:	4c0a      	ldr	r4, [pc, #40]	; (8019ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8019eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019ecc:	e001      	b.n	8019ed2 <LoopFillZerobss>

08019ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8019ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8019ed0:	3204      	adds	r2, #4

08019ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8019ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019ed4:	d3fb      	bcc.n	8019ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8019ed6:	f003 f9e7 	bl	801d2a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8019eda:	f7e7 fe37 	bl	8001b4c <main>
  bx  lr    
 8019ede:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8019ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8019ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8019ee8:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8019eec:	08020394 	.word	0x08020394
  ldr r2, =_sbss
 8019ef0:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8019ef4:	2000254c 	.word	0x2000254c

08019ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019ef8:	e7fe      	b.n	8019ef8 <ADC_IRQHandler>
	...

08019efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8019efc:	b580      	push	{r7, lr}
 8019efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8019f00:	4b0e      	ldr	r3, [pc, #56]	; (8019f3c <HAL_Init+0x40>)
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	4a0d      	ldr	r2, [pc, #52]	; (8019f3c <HAL_Init+0x40>)
 8019f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8019f0c:	4b0b      	ldr	r3, [pc, #44]	; (8019f3c <HAL_Init+0x40>)
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	4a0a      	ldr	r2, [pc, #40]	; (8019f3c <HAL_Init+0x40>)
 8019f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8019f18:	4b08      	ldr	r3, [pc, #32]	; (8019f3c <HAL_Init+0x40>)
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	4a07      	ldr	r2, [pc, #28]	; (8019f3c <HAL_Init+0x40>)
 8019f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8019f24:	2003      	movs	r0, #3
 8019f26:	f000 f931 	bl	801a18c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8019f2a:	2000      	movs	r0, #0
 8019f2c:	f000 f808 	bl	8019f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8019f30:	f7e8 f91e 	bl	8002170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8019f34:	2300      	movs	r3, #0
}
 8019f36:	4618      	mov	r0, r3
 8019f38:	bd80      	pop	{r7, pc}
 8019f3a:	bf00      	nop
 8019f3c:	40023c00 	.word	0x40023c00

08019f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b082      	sub	sp, #8
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8019f48:	4b12      	ldr	r3, [pc, #72]	; (8019f94 <HAL_InitTick+0x54>)
 8019f4a:	681a      	ldr	r2, [r3, #0]
 8019f4c:	4b12      	ldr	r3, [pc, #72]	; (8019f98 <HAL_InitTick+0x58>)
 8019f4e:	781b      	ldrb	r3, [r3, #0]
 8019f50:	4619      	mov	r1, r3
 8019f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8019f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019f5e:	4618      	mov	r0, r3
 8019f60:	f000 f93b 	bl	801a1da <HAL_SYSTICK_Config>
 8019f64:	4603      	mov	r3, r0
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d001      	beq.n	8019f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8019f6a:	2301      	movs	r3, #1
 8019f6c:	e00e      	b.n	8019f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	2b0f      	cmp	r3, #15
 8019f72:	d80a      	bhi.n	8019f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8019f74:	2200      	movs	r2, #0
 8019f76:	6879      	ldr	r1, [r7, #4]
 8019f78:	f04f 30ff 	mov.w	r0, #4294967295
 8019f7c:	f000 f911 	bl	801a1a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8019f80:	4a06      	ldr	r2, [pc, #24]	; (8019f9c <HAL_InitTick+0x5c>)
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8019f86:	2300      	movs	r3, #0
 8019f88:	e000      	b.n	8019f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8019f8a:	2301      	movs	r3, #1
}
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	3708      	adds	r7, #8
 8019f90:	46bd      	mov	sp, r7
 8019f92:	bd80      	pop	{r7, pc}
 8019f94:	20000000 	.word	0x20000000
 8019f98:	2000004c 	.word	0x2000004c
 8019f9c:	20000048 	.word	0x20000048

08019fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019fa0:	b480      	push	{r7}
 8019fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8019fa4:	4b06      	ldr	r3, [pc, #24]	; (8019fc0 <HAL_IncTick+0x20>)
 8019fa6:	781b      	ldrb	r3, [r3, #0]
 8019fa8:	461a      	mov	r2, r3
 8019faa:	4b06      	ldr	r3, [pc, #24]	; (8019fc4 <HAL_IncTick+0x24>)
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	4413      	add	r3, r2
 8019fb0:	4a04      	ldr	r2, [pc, #16]	; (8019fc4 <HAL_IncTick+0x24>)
 8019fb2:	6013      	str	r3, [r2, #0]
}
 8019fb4:	bf00      	nop
 8019fb6:	46bd      	mov	sp, r7
 8019fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fbc:	4770      	bx	lr
 8019fbe:	bf00      	nop
 8019fc0:	2000004c 	.word	0x2000004c
 8019fc4:	200023fc 	.word	0x200023fc

08019fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019fc8:	b480      	push	{r7}
 8019fca:	af00      	add	r7, sp, #0
  return uwTick;
 8019fcc:	4b03      	ldr	r3, [pc, #12]	; (8019fdc <HAL_GetTick+0x14>)
 8019fce:	681b      	ldr	r3, [r3, #0]
}
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	46bd      	mov	sp, r7
 8019fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fd8:	4770      	bx	lr
 8019fda:	bf00      	nop
 8019fdc:	200023fc 	.word	0x200023fc

08019fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8019fe0:	b580      	push	{r7, lr}
 8019fe2:	b084      	sub	sp, #16
 8019fe4:	af00      	add	r7, sp, #0
 8019fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019fe8:	f7ff ffee 	bl	8019fc8 <HAL_GetTick>
 8019fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ff8:	d005      	beq.n	801a006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8019ffa:	4b0a      	ldr	r3, [pc, #40]	; (801a024 <HAL_Delay+0x44>)
 8019ffc:	781b      	ldrb	r3, [r3, #0]
 8019ffe:	461a      	mov	r2, r3
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	4413      	add	r3, r2
 801a004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801a006:	bf00      	nop
 801a008:	f7ff ffde 	bl	8019fc8 <HAL_GetTick>
 801a00c:	4602      	mov	r2, r0
 801a00e:	68bb      	ldr	r3, [r7, #8]
 801a010:	1ad3      	subs	r3, r2, r3
 801a012:	68fa      	ldr	r2, [r7, #12]
 801a014:	429a      	cmp	r2, r3
 801a016:	d8f7      	bhi.n	801a008 <HAL_Delay+0x28>
  {
  }
}
 801a018:	bf00      	nop
 801a01a:	bf00      	nop
 801a01c:	3710      	adds	r7, #16
 801a01e:	46bd      	mov	sp, r7
 801a020:	bd80      	pop	{r7, pc}
 801a022:	bf00      	nop
 801a024:	2000004c 	.word	0x2000004c

0801a028 <__NVIC_SetPriorityGrouping>:
{
 801a028:	b480      	push	{r7}
 801a02a:	b085      	sub	sp, #20
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	f003 0307 	and.w	r3, r3, #7
 801a036:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a038:	4b0c      	ldr	r3, [pc, #48]	; (801a06c <__NVIC_SetPriorityGrouping+0x44>)
 801a03a:	68db      	ldr	r3, [r3, #12]
 801a03c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a03e:	68ba      	ldr	r2, [r7, #8]
 801a040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801a044:	4013      	ands	r3, r2
 801a046:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a04c:	68bb      	ldr	r3, [r7, #8]
 801a04e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801a050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801a054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801a05a:	4a04      	ldr	r2, [pc, #16]	; (801a06c <__NVIC_SetPriorityGrouping+0x44>)
 801a05c:	68bb      	ldr	r3, [r7, #8]
 801a05e:	60d3      	str	r3, [r2, #12]
}
 801a060:	bf00      	nop
 801a062:	3714      	adds	r7, #20
 801a064:	46bd      	mov	sp, r7
 801a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a06a:	4770      	bx	lr
 801a06c:	e000ed00 	.word	0xe000ed00

0801a070 <__NVIC_GetPriorityGrouping>:
{
 801a070:	b480      	push	{r7}
 801a072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a074:	4b04      	ldr	r3, [pc, #16]	; (801a088 <__NVIC_GetPriorityGrouping+0x18>)
 801a076:	68db      	ldr	r3, [r3, #12]
 801a078:	0a1b      	lsrs	r3, r3, #8
 801a07a:	f003 0307 	and.w	r3, r3, #7
}
 801a07e:	4618      	mov	r0, r3
 801a080:	46bd      	mov	sp, r7
 801a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a086:	4770      	bx	lr
 801a088:	e000ed00 	.word	0xe000ed00

0801a08c <__NVIC_SetPriority>:
{
 801a08c:	b480      	push	{r7}
 801a08e:	b083      	sub	sp, #12
 801a090:	af00      	add	r7, sp, #0
 801a092:	4603      	mov	r3, r0
 801a094:	6039      	str	r1, [r7, #0]
 801a096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	db0a      	blt.n	801a0b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a0a0:	683b      	ldr	r3, [r7, #0]
 801a0a2:	b2da      	uxtb	r2, r3
 801a0a4:	490c      	ldr	r1, [pc, #48]	; (801a0d8 <__NVIC_SetPriority+0x4c>)
 801a0a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a0aa:	0112      	lsls	r2, r2, #4
 801a0ac:	b2d2      	uxtb	r2, r2
 801a0ae:	440b      	add	r3, r1
 801a0b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801a0b4:	e00a      	b.n	801a0cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a0b6:	683b      	ldr	r3, [r7, #0]
 801a0b8:	b2da      	uxtb	r2, r3
 801a0ba:	4908      	ldr	r1, [pc, #32]	; (801a0dc <__NVIC_SetPriority+0x50>)
 801a0bc:	79fb      	ldrb	r3, [r7, #7]
 801a0be:	f003 030f 	and.w	r3, r3, #15
 801a0c2:	3b04      	subs	r3, #4
 801a0c4:	0112      	lsls	r2, r2, #4
 801a0c6:	b2d2      	uxtb	r2, r2
 801a0c8:	440b      	add	r3, r1
 801a0ca:	761a      	strb	r2, [r3, #24]
}
 801a0cc:	bf00      	nop
 801a0ce:	370c      	adds	r7, #12
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d6:	4770      	bx	lr
 801a0d8:	e000e100 	.word	0xe000e100
 801a0dc:	e000ed00 	.word	0xe000ed00

0801a0e0 <NVIC_EncodePriority>:
{
 801a0e0:	b480      	push	{r7}
 801a0e2:	b089      	sub	sp, #36	; 0x24
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	60f8      	str	r0, [r7, #12]
 801a0e8:	60b9      	str	r1, [r7, #8]
 801a0ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	f003 0307 	and.w	r3, r3, #7
 801a0f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a0f4:	69fb      	ldr	r3, [r7, #28]
 801a0f6:	f1c3 0307 	rsb	r3, r3, #7
 801a0fa:	2b04      	cmp	r3, #4
 801a0fc:	bf28      	it	cs
 801a0fe:	2304      	movcs	r3, #4
 801a100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a102:	69fb      	ldr	r3, [r7, #28]
 801a104:	3304      	adds	r3, #4
 801a106:	2b06      	cmp	r3, #6
 801a108:	d902      	bls.n	801a110 <NVIC_EncodePriority+0x30>
 801a10a:	69fb      	ldr	r3, [r7, #28]
 801a10c:	3b03      	subs	r3, #3
 801a10e:	e000      	b.n	801a112 <NVIC_EncodePriority+0x32>
 801a110:	2300      	movs	r3, #0
 801a112:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a114:	f04f 32ff 	mov.w	r2, #4294967295
 801a118:	69bb      	ldr	r3, [r7, #24]
 801a11a:	fa02 f303 	lsl.w	r3, r2, r3
 801a11e:	43da      	mvns	r2, r3
 801a120:	68bb      	ldr	r3, [r7, #8]
 801a122:	401a      	ands	r2, r3
 801a124:	697b      	ldr	r3, [r7, #20]
 801a126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801a128:	f04f 31ff 	mov.w	r1, #4294967295
 801a12c:	697b      	ldr	r3, [r7, #20]
 801a12e:	fa01 f303 	lsl.w	r3, r1, r3
 801a132:	43d9      	mvns	r1, r3
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a138:	4313      	orrs	r3, r2
}
 801a13a:	4618      	mov	r0, r3
 801a13c:	3724      	adds	r7, #36	; 0x24
 801a13e:	46bd      	mov	sp, r7
 801a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a144:	4770      	bx	lr
	...

0801a148 <SysTick_Config>:
{
 801a148:	b580      	push	{r7, lr}
 801a14a:	b082      	sub	sp, #8
 801a14c:	af00      	add	r7, sp, #0
 801a14e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	3b01      	subs	r3, #1
 801a154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801a158:	d301      	bcc.n	801a15e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 801a15a:	2301      	movs	r3, #1
 801a15c:	e00f      	b.n	801a17e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801a15e:	4a0a      	ldr	r2, [pc, #40]	; (801a188 <SysTick_Config+0x40>)
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	3b01      	subs	r3, #1
 801a164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801a166:	210f      	movs	r1, #15
 801a168:	f04f 30ff 	mov.w	r0, #4294967295
 801a16c:	f7ff ff8e 	bl	801a08c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801a170:	4b05      	ldr	r3, [pc, #20]	; (801a188 <SysTick_Config+0x40>)
 801a172:	2200      	movs	r2, #0
 801a174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801a176:	4b04      	ldr	r3, [pc, #16]	; (801a188 <SysTick_Config+0x40>)
 801a178:	2207      	movs	r2, #7
 801a17a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 801a17c:	2300      	movs	r3, #0
}
 801a17e:	4618      	mov	r0, r3
 801a180:	3708      	adds	r7, #8
 801a182:	46bd      	mov	sp, r7
 801a184:	bd80      	pop	{r7, pc}
 801a186:	bf00      	nop
 801a188:	e000e010 	.word	0xe000e010

0801a18c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a18c:	b580      	push	{r7, lr}
 801a18e:	b082      	sub	sp, #8
 801a190:	af00      	add	r7, sp, #0
 801a192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801a194:	6878      	ldr	r0, [r7, #4]
 801a196:	f7ff ff47 	bl	801a028 <__NVIC_SetPriorityGrouping>
}
 801a19a:	bf00      	nop
 801a19c:	3708      	adds	r7, #8
 801a19e:	46bd      	mov	sp, r7
 801a1a0:	bd80      	pop	{r7, pc}

0801a1a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801a1a2:	b580      	push	{r7, lr}
 801a1a4:	b086      	sub	sp, #24
 801a1a6:	af00      	add	r7, sp, #0
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	60b9      	str	r1, [r7, #8]
 801a1ac:	607a      	str	r2, [r7, #4]
 801a1ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801a1b4:	f7ff ff5c 	bl	801a070 <__NVIC_GetPriorityGrouping>
 801a1b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801a1ba:	687a      	ldr	r2, [r7, #4]
 801a1bc:	68b9      	ldr	r1, [r7, #8]
 801a1be:	6978      	ldr	r0, [r7, #20]
 801a1c0:	f7ff ff8e 	bl	801a0e0 <NVIC_EncodePriority>
 801a1c4:	4602      	mov	r2, r0
 801a1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a1ca:	4611      	mov	r1, r2
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	f7ff ff5d 	bl	801a08c <__NVIC_SetPriority>
}
 801a1d2:	bf00      	nop
 801a1d4:	3718      	adds	r7, #24
 801a1d6:	46bd      	mov	sp, r7
 801a1d8:	bd80      	pop	{r7, pc}

0801a1da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801a1da:	b580      	push	{r7, lr}
 801a1dc:	b082      	sub	sp, #8
 801a1de:	af00      	add	r7, sp, #0
 801a1e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801a1e2:	6878      	ldr	r0, [r7, #4]
 801a1e4:	f7ff ffb0 	bl	801a148 <SysTick_Config>
 801a1e8:	4603      	mov	r3, r0
}
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	3708      	adds	r7, #8
 801a1ee:	46bd      	mov	sp, r7
 801a1f0:	bd80      	pop	{r7, pc}
	...

0801a1f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801a1f4:	b480      	push	{r7}
 801a1f6:	b089      	sub	sp, #36	; 0x24
 801a1f8:	af00      	add	r7, sp, #0
 801a1fa:	6078      	str	r0, [r7, #4]
 801a1fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801a1fe:	2300      	movs	r3, #0
 801a200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801a202:	2300      	movs	r3, #0
 801a204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801a206:	2300      	movs	r3, #0
 801a208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801a20a:	2300      	movs	r3, #0
 801a20c:	61fb      	str	r3, [r7, #28]
 801a20e:	e159      	b.n	801a4c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801a210:	2201      	movs	r2, #1
 801a212:	69fb      	ldr	r3, [r7, #28]
 801a214:	fa02 f303 	lsl.w	r3, r2, r3
 801a218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801a21a:	683b      	ldr	r3, [r7, #0]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	697a      	ldr	r2, [r7, #20]
 801a220:	4013      	ands	r3, r2
 801a222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801a224:	693a      	ldr	r2, [r7, #16]
 801a226:	697b      	ldr	r3, [r7, #20]
 801a228:	429a      	cmp	r2, r3
 801a22a:	f040 8148 	bne.w	801a4be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801a22e:	683b      	ldr	r3, [r7, #0]
 801a230:	685b      	ldr	r3, [r3, #4]
 801a232:	f003 0303 	and.w	r3, r3, #3
 801a236:	2b01      	cmp	r3, #1
 801a238:	d005      	beq.n	801a246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801a23a:	683b      	ldr	r3, [r7, #0]
 801a23c:	685b      	ldr	r3, [r3, #4]
 801a23e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801a242:	2b02      	cmp	r3, #2
 801a244:	d130      	bne.n	801a2a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	689b      	ldr	r3, [r3, #8]
 801a24a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801a24c:	69fb      	ldr	r3, [r7, #28]
 801a24e:	005b      	lsls	r3, r3, #1
 801a250:	2203      	movs	r2, #3
 801a252:	fa02 f303 	lsl.w	r3, r2, r3
 801a256:	43db      	mvns	r3, r3
 801a258:	69ba      	ldr	r2, [r7, #24]
 801a25a:	4013      	ands	r3, r2
 801a25c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801a25e:	683b      	ldr	r3, [r7, #0]
 801a260:	68da      	ldr	r2, [r3, #12]
 801a262:	69fb      	ldr	r3, [r7, #28]
 801a264:	005b      	lsls	r3, r3, #1
 801a266:	fa02 f303 	lsl.w	r3, r2, r3
 801a26a:	69ba      	ldr	r2, [r7, #24]
 801a26c:	4313      	orrs	r3, r2
 801a26e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	69ba      	ldr	r2, [r7, #24]
 801a274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	685b      	ldr	r3, [r3, #4]
 801a27a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801a27c:	2201      	movs	r2, #1
 801a27e:	69fb      	ldr	r3, [r7, #28]
 801a280:	fa02 f303 	lsl.w	r3, r2, r3
 801a284:	43db      	mvns	r3, r3
 801a286:	69ba      	ldr	r2, [r7, #24]
 801a288:	4013      	ands	r3, r2
 801a28a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801a28c:	683b      	ldr	r3, [r7, #0]
 801a28e:	685b      	ldr	r3, [r3, #4]
 801a290:	091b      	lsrs	r3, r3, #4
 801a292:	f003 0201 	and.w	r2, r3, #1
 801a296:	69fb      	ldr	r3, [r7, #28]
 801a298:	fa02 f303 	lsl.w	r3, r2, r3
 801a29c:	69ba      	ldr	r2, [r7, #24]
 801a29e:	4313      	orrs	r3, r2
 801a2a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	69ba      	ldr	r2, [r7, #24]
 801a2a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801a2a8:	683b      	ldr	r3, [r7, #0]
 801a2aa:	685b      	ldr	r3, [r3, #4]
 801a2ac:	f003 0303 	and.w	r3, r3, #3
 801a2b0:	2b03      	cmp	r3, #3
 801a2b2:	d017      	beq.n	801a2e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	68db      	ldr	r3, [r3, #12]
 801a2b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801a2ba:	69fb      	ldr	r3, [r7, #28]
 801a2bc:	005b      	lsls	r3, r3, #1
 801a2be:	2203      	movs	r2, #3
 801a2c0:	fa02 f303 	lsl.w	r3, r2, r3
 801a2c4:	43db      	mvns	r3, r3
 801a2c6:	69ba      	ldr	r2, [r7, #24]
 801a2c8:	4013      	ands	r3, r2
 801a2ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801a2cc:	683b      	ldr	r3, [r7, #0]
 801a2ce:	689a      	ldr	r2, [r3, #8]
 801a2d0:	69fb      	ldr	r3, [r7, #28]
 801a2d2:	005b      	lsls	r3, r3, #1
 801a2d4:	fa02 f303 	lsl.w	r3, r2, r3
 801a2d8:	69ba      	ldr	r2, [r7, #24]
 801a2da:	4313      	orrs	r3, r2
 801a2dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	69ba      	ldr	r2, [r7, #24]
 801a2e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801a2e4:	683b      	ldr	r3, [r7, #0]
 801a2e6:	685b      	ldr	r3, [r3, #4]
 801a2e8:	f003 0303 	and.w	r3, r3, #3
 801a2ec:	2b02      	cmp	r3, #2
 801a2ee:	d123      	bne.n	801a338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801a2f0:	69fb      	ldr	r3, [r7, #28]
 801a2f2:	08da      	lsrs	r2, r3, #3
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	3208      	adds	r2, #8
 801a2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a2fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801a2fe:	69fb      	ldr	r3, [r7, #28]
 801a300:	f003 0307 	and.w	r3, r3, #7
 801a304:	009b      	lsls	r3, r3, #2
 801a306:	220f      	movs	r2, #15
 801a308:	fa02 f303 	lsl.w	r3, r2, r3
 801a30c:	43db      	mvns	r3, r3
 801a30e:	69ba      	ldr	r2, [r7, #24]
 801a310:	4013      	ands	r3, r2
 801a312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801a314:	683b      	ldr	r3, [r7, #0]
 801a316:	691a      	ldr	r2, [r3, #16]
 801a318:	69fb      	ldr	r3, [r7, #28]
 801a31a:	f003 0307 	and.w	r3, r3, #7
 801a31e:	009b      	lsls	r3, r3, #2
 801a320:	fa02 f303 	lsl.w	r3, r2, r3
 801a324:	69ba      	ldr	r2, [r7, #24]
 801a326:	4313      	orrs	r3, r2
 801a328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801a32a:	69fb      	ldr	r3, [r7, #28]
 801a32c:	08da      	lsrs	r2, r3, #3
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	3208      	adds	r2, #8
 801a332:	69b9      	ldr	r1, [r7, #24]
 801a334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801a33e:	69fb      	ldr	r3, [r7, #28]
 801a340:	005b      	lsls	r3, r3, #1
 801a342:	2203      	movs	r2, #3
 801a344:	fa02 f303 	lsl.w	r3, r2, r3
 801a348:	43db      	mvns	r3, r3
 801a34a:	69ba      	ldr	r2, [r7, #24]
 801a34c:	4013      	ands	r3, r2
 801a34e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801a350:	683b      	ldr	r3, [r7, #0]
 801a352:	685b      	ldr	r3, [r3, #4]
 801a354:	f003 0203 	and.w	r2, r3, #3
 801a358:	69fb      	ldr	r3, [r7, #28]
 801a35a:	005b      	lsls	r3, r3, #1
 801a35c:	fa02 f303 	lsl.w	r3, r2, r3
 801a360:	69ba      	ldr	r2, [r7, #24]
 801a362:	4313      	orrs	r3, r2
 801a364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	69ba      	ldr	r2, [r7, #24]
 801a36a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801a36c:	683b      	ldr	r3, [r7, #0]
 801a36e:	685b      	ldr	r3, [r3, #4]
 801a370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801a374:	2b00      	cmp	r3, #0
 801a376:	f000 80a2 	beq.w	801a4be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801a37a:	2300      	movs	r3, #0
 801a37c:	60fb      	str	r3, [r7, #12]
 801a37e:	4b57      	ldr	r3, [pc, #348]	; (801a4dc <HAL_GPIO_Init+0x2e8>)
 801a380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a382:	4a56      	ldr	r2, [pc, #344]	; (801a4dc <HAL_GPIO_Init+0x2e8>)
 801a384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a388:	6453      	str	r3, [r2, #68]	; 0x44
 801a38a:	4b54      	ldr	r3, [pc, #336]	; (801a4dc <HAL_GPIO_Init+0x2e8>)
 801a38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a38e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a392:	60fb      	str	r3, [r7, #12]
 801a394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801a396:	4a52      	ldr	r2, [pc, #328]	; (801a4e0 <HAL_GPIO_Init+0x2ec>)
 801a398:	69fb      	ldr	r3, [r7, #28]
 801a39a:	089b      	lsrs	r3, r3, #2
 801a39c:	3302      	adds	r3, #2
 801a39e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a3a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801a3a4:	69fb      	ldr	r3, [r7, #28]
 801a3a6:	f003 0303 	and.w	r3, r3, #3
 801a3aa:	009b      	lsls	r3, r3, #2
 801a3ac:	220f      	movs	r2, #15
 801a3ae:	fa02 f303 	lsl.w	r3, r2, r3
 801a3b2:	43db      	mvns	r3, r3
 801a3b4:	69ba      	ldr	r2, [r7, #24]
 801a3b6:	4013      	ands	r3, r2
 801a3b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	4a49      	ldr	r2, [pc, #292]	; (801a4e4 <HAL_GPIO_Init+0x2f0>)
 801a3be:	4293      	cmp	r3, r2
 801a3c0:	d019      	beq.n	801a3f6 <HAL_GPIO_Init+0x202>
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	4a48      	ldr	r2, [pc, #288]	; (801a4e8 <HAL_GPIO_Init+0x2f4>)
 801a3c6:	4293      	cmp	r3, r2
 801a3c8:	d013      	beq.n	801a3f2 <HAL_GPIO_Init+0x1fe>
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	4a47      	ldr	r2, [pc, #284]	; (801a4ec <HAL_GPIO_Init+0x2f8>)
 801a3ce:	4293      	cmp	r3, r2
 801a3d0:	d00d      	beq.n	801a3ee <HAL_GPIO_Init+0x1fa>
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	4a46      	ldr	r2, [pc, #280]	; (801a4f0 <HAL_GPIO_Init+0x2fc>)
 801a3d6:	4293      	cmp	r3, r2
 801a3d8:	d007      	beq.n	801a3ea <HAL_GPIO_Init+0x1f6>
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	4a45      	ldr	r2, [pc, #276]	; (801a4f4 <HAL_GPIO_Init+0x300>)
 801a3de:	4293      	cmp	r3, r2
 801a3e0:	d101      	bne.n	801a3e6 <HAL_GPIO_Init+0x1f2>
 801a3e2:	2304      	movs	r3, #4
 801a3e4:	e008      	b.n	801a3f8 <HAL_GPIO_Init+0x204>
 801a3e6:	2307      	movs	r3, #7
 801a3e8:	e006      	b.n	801a3f8 <HAL_GPIO_Init+0x204>
 801a3ea:	2303      	movs	r3, #3
 801a3ec:	e004      	b.n	801a3f8 <HAL_GPIO_Init+0x204>
 801a3ee:	2302      	movs	r3, #2
 801a3f0:	e002      	b.n	801a3f8 <HAL_GPIO_Init+0x204>
 801a3f2:	2301      	movs	r3, #1
 801a3f4:	e000      	b.n	801a3f8 <HAL_GPIO_Init+0x204>
 801a3f6:	2300      	movs	r3, #0
 801a3f8:	69fa      	ldr	r2, [r7, #28]
 801a3fa:	f002 0203 	and.w	r2, r2, #3
 801a3fe:	0092      	lsls	r2, r2, #2
 801a400:	4093      	lsls	r3, r2
 801a402:	69ba      	ldr	r2, [r7, #24]
 801a404:	4313      	orrs	r3, r2
 801a406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801a408:	4935      	ldr	r1, [pc, #212]	; (801a4e0 <HAL_GPIO_Init+0x2ec>)
 801a40a:	69fb      	ldr	r3, [r7, #28]
 801a40c:	089b      	lsrs	r3, r3, #2
 801a40e:	3302      	adds	r3, #2
 801a410:	69ba      	ldr	r2, [r7, #24]
 801a412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801a416:	4b38      	ldr	r3, [pc, #224]	; (801a4f8 <HAL_GPIO_Init+0x304>)
 801a418:	689b      	ldr	r3, [r3, #8]
 801a41a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801a41c:	693b      	ldr	r3, [r7, #16]
 801a41e:	43db      	mvns	r3, r3
 801a420:	69ba      	ldr	r2, [r7, #24]
 801a422:	4013      	ands	r3, r2
 801a424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801a426:	683b      	ldr	r3, [r7, #0]
 801a428:	685b      	ldr	r3, [r3, #4]
 801a42a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d003      	beq.n	801a43a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801a432:	69ba      	ldr	r2, [r7, #24]
 801a434:	693b      	ldr	r3, [r7, #16]
 801a436:	4313      	orrs	r3, r2
 801a438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801a43a:	4a2f      	ldr	r2, [pc, #188]	; (801a4f8 <HAL_GPIO_Init+0x304>)
 801a43c:	69bb      	ldr	r3, [r7, #24]
 801a43e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801a440:	4b2d      	ldr	r3, [pc, #180]	; (801a4f8 <HAL_GPIO_Init+0x304>)
 801a442:	68db      	ldr	r3, [r3, #12]
 801a444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801a446:	693b      	ldr	r3, [r7, #16]
 801a448:	43db      	mvns	r3, r3
 801a44a:	69ba      	ldr	r2, [r7, #24]
 801a44c:	4013      	ands	r3, r2
 801a44e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801a450:	683b      	ldr	r3, [r7, #0]
 801a452:	685b      	ldr	r3, [r3, #4]
 801a454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d003      	beq.n	801a464 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801a45c:	69ba      	ldr	r2, [r7, #24]
 801a45e:	693b      	ldr	r3, [r7, #16]
 801a460:	4313      	orrs	r3, r2
 801a462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801a464:	4a24      	ldr	r2, [pc, #144]	; (801a4f8 <HAL_GPIO_Init+0x304>)
 801a466:	69bb      	ldr	r3, [r7, #24]
 801a468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801a46a:	4b23      	ldr	r3, [pc, #140]	; (801a4f8 <HAL_GPIO_Init+0x304>)
 801a46c:	685b      	ldr	r3, [r3, #4]
 801a46e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801a470:	693b      	ldr	r3, [r7, #16]
 801a472:	43db      	mvns	r3, r3
 801a474:	69ba      	ldr	r2, [r7, #24]
 801a476:	4013      	ands	r3, r2
 801a478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801a47a:	683b      	ldr	r3, [r7, #0]
 801a47c:	685b      	ldr	r3, [r3, #4]
 801a47e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a482:	2b00      	cmp	r3, #0
 801a484:	d003      	beq.n	801a48e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801a486:	69ba      	ldr	r2, [r7, #24]
 801a488:	693b      	ldr	r3, [r7, #16]
 801a48a:	4313      	orrs	r3, r2
 801a48c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801a48e:	4a1a      	ldr	r2, [pc, #104]	; (801a4f8 <HAL_GPIO_Init+0x304>)
 801a490:	69bb      	ldr	r3, [r7, #24]
 801a492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801a494:	4b18      	ldr	r3, [pc, #96]	; (801a4f8 <HAL_GPIO_Init+0x304>)
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801a49a:	693b      	ldr	r3, [r7, #16]
 801a49c:	43db      	mvns	r3, r3
 801a49e:	69ba      	ldr	r2, [r7, #24]
 801a4a0:	4013      	ands	r3, r2
 801a4a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801a4a4:	683b      	ldr	r3, [r7, #0]
 801a4a6:	685b      	ldr	r3, [r3, #4]
 801a4a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	d003      	beq.n	801a4b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801a4b0:	69ba      	ldr	r2, [r7, #24]
 801a4b2:	693b      	ldr	r3, [r7, #16]
 801a4b4:	4313      	orrs	r3, r2
 801a4b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801a4b8:	4a0f      	ldr	r2, [pc, #60]	; (801a4f8 <HAL_GPIO_Init+0x304>)
 801a4ba:	69bb      	ldr	r3, [r7, #24]
 801a4bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801a4be:	69fb      	ldr	r3, [r7, #28]
 801a4c0:	3301      	adds	r3, #1
 801a4c2:	61fb      	str	r3, [r7, #28]
 801a4c4:	69fb      	ldr	r3, [r7, #28]
 801a4c6:	2b0f      	cmp	r3, #15
 801a4c8:	f67f aea2 	bls.w	801a210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801a4cc:	bf00      	nop
 801a4ce:	bf00      	nop
 801a4d0:	3724      	adds	r7, #36	; 0x24
 801a4d2:	46bd      	mov	sp, r7
 801a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d8:	4770      	bx	lr
 801a4da:	bf00      	nop
 801a4dc:	40023800 	.word	0x40023800
 801a4e0:	40013800 	.word	0x40013800
 801a4e4:	40020000 	.word	0x40020000
 801a4e8:	40020400 	.word	0x40020400
 801a4ec:	40020800 	.word	0x40020800
 801a4f0:	40020c00 	.word	0x40020c00
 801a4f4:	40021000 	.word	0x40021000
 801a4f8:	40013c00 	.word	0x40013c00

0801a4fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801a4fc:	b480      	push	{r7}
 801a4fe:	b083      	sub	sp, #12
 801a500:	af00      	add	r7, sp, #0
 801a502:	6078      	str	r0, [r7, #4]
 801a504:	460b      	mov	r3, r1
 801a506:	807b      	strh	r3, [r7, #2]
 801a508:	4613      	mov	r3, r2
 801a50a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801a50c:	787b      	ldrb	r3, [r7, #1]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d003      	beq.n	801a51a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801a512:	887a      	ldrh	r2, [r7, #2]
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801a518:	e003      	b.n	801a522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801a51a:	887b      	ldrh	r3, [r7, #2]
 801a51c:	041a      	lsls	r2, r3, #16
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	619a      	str	r2, [r3, #24]
}
 801a522:	bf00      	nop
 801a524:	370c      	adds	r7, #12
 801a526:	46bd      	mov	sp, r7
 801a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a52c:	4770      	bx	lr
	...

0801a530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801a530:	b580      	push	{r7, lr}
 801a532:	b084      	sub	sp, #16
 801a534:	af00      	add	r7, sp, #0
 801a536:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d101      	bne.n	801a542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801a53e:	2301      	movs	r3, #1
 801a540:	e12b      	b.n	801a79a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a548:	b2db      	uxtb	r3, r3
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d106      	bne.n	801a55c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	2200      	movs	r2, #0
 801a552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801a556:	6878      	ldr	r0, [r7, #4]
 801a558:	f7e7 fe32 	bl	80021c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	2224      	movs	r2, #36	; 0x24
 801a560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	681a      	ldr	r2, [r3, #0]
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	f022 0201 	bic.w	r2, r2, #1
 801a572:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	681a      	ldr	r2, [r3, #0]
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a582:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	681a      	ldr	r2, [r3, #0]
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a592:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801a594:	f001 fc36 	bl	801be04 <HAL_RCC_GetPCLK1Freq>
 801a598:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	685b      	ldr	r3, [r3, #4]
 801a59e:	4a81      	ldr	r2, [pc, #516]	; (801a7a4 <HAL_I2C_Init+0x274>)
 801a5a0:	4293      	cmp	r3, r2
 801a5a2:	d807      	bhi.n	801a5b4 <HAL_I2C_Init+0x84>
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	4a80      	ldr	r2, [pc, #512]	; (801a7a8 <HAL_I2C_Init+0x278>)
 801a5a8:	4293      	cmp	r3, r2
 801a5aa:	bf94      	ite	ls
 801a5ac:	2301      	movls	r3, #1
 801a5ae:	2300      	movhi	r3, #0
 801a5b0:	b2db      	uxtb	r3, r3
 801a5b2:	e006      	b.n	801a5c2 <HAL_I2C_Init+0x92>
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	4a7d      	ldr	r2, [pc, #500]	; (801a7ac <HAL_I2C_Init+0x27c>)
 801a5b8:	4293      	cmp	r3, r2
 801a5ba:	bf94      	ite	ls
 801a5bc:	2301      	movls	r3, #1
 801a5be:	2300      	movhi	r3, #0
 801a5c0:	b2db      	uxtb	r3, r3
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d001      	beq.n	801a5ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801a5c6:	2301      	movs	r3, #1
 801a5c8:	e0e7      	b.n	801a79a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	4a78      	ldr	r2, [pc, #480]	; (801a7b0 <HAL_I2C_Init+0x280>)
 801a5ce:	fba2 2303 	umull	r2, r3, r2, r3
 801a5d2:	0c9b      	lsrs	r3, r3, #18
 801a5d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	685b      	ldr	r3, [r3, #4]
 801a5dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	68ba      	ldr	r2, [r7, #8]
 801a5e6:	430a      	orrs	r2, r1
 801a5e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	6a1b      	ldr	r3, [r3, #32]
 801a5f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	685b      	ldr	r3, [r3, #4]
 801a5f8:	4a6a      	ldr	r2, [pc, #424]	; (801a7a4 <HAL_I2C_Init+0x274>)
 801a5fa:	4293      	cmp	r3, r2
 801a5fc:	d802      	bhi.n	801a604 <HAL_I2C_Init+0xd4>
 801a5fe:	68bb      	ldr	r3, [r7, #8]
 801a600:	3301      	adds	r3, #1
 801a602:	e009      	b.n	801a618 <HAL_I2C_Init+0xe8>
 801a604:	68bb      	ldr	r3, [r7, #8]
 801a606:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801a60a:	fb02 f303 	mul.w	r3, r2, r3
 801a60e:	4a69      	ldr	r2, [pc, #420]	; (801a7b4 <HAL_I2C_Init+0x284>)
 801a610:	fba2 2303 	umull	r2, r3, r2, r3
 801a614:	099b      	lsrs	r3, r3, #6
 801a616:	3301      	adds	r3, #1
 801a618:	687a      	ldr	r2, [r7, #4]
 801a61a:	6812      	ldr	r2, [r2, #0]
 801a61c:	430b      	orrs	r3, r1
 801a61e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	69db      	ldr	r3, [r3, #28]
 801a626:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801a62a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	685b      	ldr	r3, [r3, #4]
 801a632:	495c      	ldr	r1, [pc, #368]	; (801a7a4 <HAL_I2C_Init+0x274>)
 801a634:	428b      	cmp	r3, r1
 801a636:	d819      	bhi.n	801a66c <HAL_I2C_Init+0x13c>
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	1e59      	subs	r1, r3, #1
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	685b      	ldr	r3, [r3, #4]
 801a640:	005b      	lsls	r3, r3, #1
 801a642:	fbb1 f3f3 	udiv	r3, r1, r3
 801a646:	1c59      	adds	r1, r3, #1
 801a648:	f640 73fc 	movw	r3, #4092	; 0xffc
 801a64c:	400b      	ands	r3, r1
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d00a      	beq.n	801a668 <HAL_I2C_Init+0x138>
 801a652:	68fb      	ldr	r3, [r7, #12]
 801a654:	1e59      	subs	r1, r3, #1
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	685b      	ldr	r3, [r3, #4]
 801a65a:	005b      	lsls	r3, r3, #1
 801a65c:	fbb1 f3f3 	udiv	r3, r1, r3
 801a660:	3301      	adds	r3, #1
 801a662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a666:	e051      	b.n	801a70c <HAL_I2C_Init+0x1dc>
 801a668:	2304      	movs	r3, #4
 801a66a:	e04f      	b.n	801a70c <HAL_I2C_Init+0x1dc>
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	689b      	ldr	r3, [r3, #8]
 801a670:	2b00      	cmp	r3, #0
 801a672:	d111      	bne.n	801a698 <HAL_I2C_Init+0x168>
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	1e58      	subs	r0, r3, #1
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	6859      	ldr	r1, [r3, #4]
 801a67c:	460b      	mov	r3, r1
 801a67e:	005b      	lsls	r3, r3, #1
 801a680:	440b      	add	r3, r1
 801a682:	fbb0 f3f3 	udiv	r3, r0, r3
 801a686:	3301      	adds	r3, #1
 801a688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	bf0c      	ite	eq
 801a690:	2301      	moveq	r3, #1
 801a692:	2300      	movne	r3, #0
 801a694:	b2db      	uxtb	r3, r3
 801a696:	e012      	b.n	801a6be <HAL_I2C_Init+0x18e>
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	1e58      	subs	r0, r3, #1
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	6859      	ldr	r1, [r3, #4]
 801a6a0:	460b      	mov	r3, r1
 801a6a2:	009b      	lsls	r3, r3, #2
 801a6a4:	440b      	add	r3, r1
 801a6a6:	0099      	lsls	r1, r3, #2
 801a6a8:	440b      	add	r3, r1
 801a6aa:	fbb0 f3f3 	udiv	r3, r0, r3
 801a6ae:	3301      	adds	r3, #1
 801a6b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	bf0c      	ite	eq
 801a6b8:	2301      	moveq	r3, #1
 801a6ba:	2300      	movne	r3, #0
 801a6bc:	b2db      	uxtb	r3, r3
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d001      	beq.n	801a6c6 <HAL_I2C_Init+0x196>
 801a6c2:	2301      	movs	r3, #1
 801a6c4:	e022      	b.n	801a70c <HAL_I2C_Init+0x1dc>
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	689b      	ldr	r3, [r3, #8]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d10e      	bne.n	801a6ec <HAL_I2C_Init+0x1bc>
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	1e58      	subs	r0, r3, #1
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	6859      	ldr	r1, [r3, #4]
 801a6d6:	460b      	mov	r3, r1
 801a6d8:	005b      	lsls	r3, r3, #1
 801a6da:	440b      	add	r3, r1
 801a6dc:	fbb0 f3f3 	udiv	r3, r0, r3
 801a6e0:	3301      	adds	r3, #1
 801a6e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a6e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a6ea:	e00f      	b.n	801a70c <HAL_I2C_Init+0x1dc>
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	1e58      	subs	r0, r3, #1
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	6859      	ldr	r1, [r3, #4]
 801a6f4:	460b      	mov	r3, r1
 801a6f6:	009b      	lsls	r3, r3, #2
 801a6f8:	440b      	add	r3, r1
 801a6fa:	0099      	lsls	r1, r3, #2
 801a6fc:	440b      	add	r3, r1
 801a6fe:	fbb0 f3f3 	udiv	r3, r0, r3
 801a702:	3301      	adds	r3, #1
 801a704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801a70c:	6879      	ldr	r1, [r7, #4]
 801a70e:	6809      	ldr	r1, [r1, #0]
 801a710:	4313      	orrs	r3, r2
 801a712:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	69da      	ldr	r2, [r3, #28]
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	6a1b      	ldr	r3, [r3, #32]
 801a726:	431a      	orrs	r2, r3
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	430a      	orrs	r2, r1
 801a72e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	689b      	ldr	r3, [r3, #8]
 801a736:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801a73a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801a73e:	687a      	ldr	r2, [r7, #4]
 801a740:	6911      	ldr	r1, [r2, #16]
 801a742:	687a      	ldr	r2, [r7, #4]
 801a744:	68d2      	ldr	r2, [r2, #12]
 801a746:	4311      	orrs	r1, r2
 801a748:	687a      	ldr	r2, [r7, #4]
 801a74a:	6812      	ldr	r2, [r2, #0]
 801a74c:	430b      	orrs	r3, r1
 801a74e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	68db      	ldr	r3, [r3, #12]
 801a756:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	695a      	ldr	r2, [r3, #20]
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	699b      	ldr	r3, [r3, #24]
 801a762:	431a      	orrs	r2, r3
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	430a      	orrs	r2, r1
 801a76a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	681b      	ldr	r3, [r3, #0]
 801a770:	681a      	ldr	r2, [r3, #0]
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	f042 0201 	orr.w	r2, r2, #1
 801a77a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	2200      	movs	r2, #0
 801a780:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	2220      	movs	r2, #32
 801a786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	2200      	movs	r2, #0
 801a78e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	2200      	movs	r2, #0
 801a794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801a798:	2300      	movs	r3, #0
}
 801a79a:	4618      	mov	r0, r3
 801a79c:	3710      	adds	r7, #16
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	bd80      	pop	{r7, pc}
 801a7a2:	bf00      	nop
 801a7a4:	000186a0 	.word	0x000186a0
 801a7a8:	001e847f 	.word	0x001e847f
 801a7ac:	003d08ff 	.word	0x003d08ff
 801a7b0:	431bde83 	.word	0x431bde83
 801a7b4:	10624dd3 	.word	0x10624dd3

0801a7b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a7b8:	b580      	push	{r7, lr}
 801a7ba:	b088      	sub	sp, #32
 801a7bc:	af02      	add	r7, sp, #8
 801a7be:	60f8      	str	r0, [r7, #12]
 801a7c0:	607a      	str	r2, [r7, #4]
 801a7c2:	461a      	mov	r2, r3
 801a7c4:	460b      	mov	r3, r1
 801a7c6:	817b      	strh	r3, [r7, #10]
 801a7c8:	4613      	mov	r3, r2
 801a7ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801a7cc:	f7ff fbfc 	bl	8019fc8 <HAL_GetTick>
 801a7d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a7d2:	68fb      	ldr	r3, [r7, #12]
 801a7d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a7d8:	b2db      	uxtb	r3, r3
 801a7da:	2b20      	cmp	r3, #32
 801a7dc:	f040 80e0 	bne.w	801a9a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801a7e0:	697b      	ldr	r3, [r7, #20]
 801a7e2:	9300      	str	r3, [sp, #0]
 801a7e4:	2319      	movs	r3, #25
 801a7e6:	2201      	movs	r2, #1
 801a7e8:	4970      	ldr	r1, [pc, #448]	; (801a9ac <HAL_I2C_Master_Transmit+0x1f4>)
 801a7ea:	68f8      	ldr	r0, [r7, #12]
 801a7ec:	f000 fc64 	bl	801b0b8 <I2C_WaitOnFlagUntilTimeout>
 801a7f0:	4603      	mov	r3, r0
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d001      	beq.n	801a7fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 801a7f6:	2302      	movs	r3, #2
 801a7f8:	e0d3      	b.n	801a9a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a800:	2b01      	cmp	r3, #1
 801a802:	d101      	bne.n	801a808 <HAL_I2C_Master_Transmit+0x50>
 801a804:	2302      	movs	r3, #2
 801a806:	e0cc      	b.n	801a9a2 <HAL_I2C_Master_Transmit+0x1ea>
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	2201      	movs	r2, #1
 801a80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	f003 0301 	and.w	r3, r3, #1
 801a81a:	2b01      	cmp	r3, #1
 801a81c:	d007      	beq.n	801a82e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	681a      	ldr	r2, [r3, #0]
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	f042 0201 	orr.w	r2, r2, #1
 801a82c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	681a      	ldr	r2, [r3, #0]
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801a83c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801a83e:	68fb      	ldr	r3, [r7, #12]
 801a840:	2221      	movs	r2, #33	; 0x21
 801a842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	2210      	movs	r2, #16
 801a84a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	2200      	movs	r2, #0
 801a852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	687a      	ldr	r2, [r7, #4]
 801a858:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	893a      	ldrh	r2, [r7, #8]
 801a85e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a864:	b29a      	uxth	r2, r3
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	4a50      	ldr	r2, [pc, #320]	; (801a9b0 <HAL_I2C_Master_Transmit+0x1f8>)
 801a86e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801a870:	8979      	ldrh	r1, [r7, #10]
 801a872:	697b      	ldr	r3, [r7, #20]
 801a874:	6a3a      	ldr	r2, [r7, #32]
 801a876:	68f8      	ldr	r0, [r7, #12]
 801a878:	f000 face 	bl	801ae18 <I2C_MasterRequestWrite>
 801a87c:	4603      	mov	r3, r0
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d001      	beq.n	801a886 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 801a882:	2301      	movs	r3, #1
 801a884:	e08d      	b.n	801a9a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801a886:	2300      	movs	r3, #0
 801a888:	613b      	str	r3, [r7, #16]
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	695b      	ldr	r3, [r3, #20]
 801a890:	613b      	str	r3, [r7, #16]
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	699b      	ldr	r3, [r3, #24]
 801a898:	613b      	str	r3, [r7, #16]
 801a89a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 801a89c:	e066      	b.n	801a96c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a89e:	697a      	ldr	r2, [r7, #20]
 801a8a0:	6a39      	ldr	r1, [r7, #32]
 801a8a2:	68f8      	ldr	r0, [r7, #12]
 801a8a4:	f000 fd22 	bl	801b2ec <I2C_WaitOnTXEFlagUntilTimeout>
 801a8a8:	4603      	mov	r3, r0
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d00d      	beq.n	801a8ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8b2:	2b04      	cmp	r3, #4
 801a8b4:	d107      	bne.n	801a8c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	681a      	ldr	r2, [r3, #0]
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a8c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801a8c6:	2301      	movs	r3, #1
 801a8c8:	e06b      	b.n	801a9a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8ce:	781a      	ldrb	r2, [r3, #0]
 801a8d0:	68fb      	ldr	r3, [r7, #12]
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801a8d6:	68fb      	ldr	r3, [r7, #12]
 801a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8da:	1c5a      	adds	r2, r3, #1
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a8e4:	b29b      	uxth	r3, r3
 801a8e6:	3b01      	subs	r3, #1
 801a8e8:	b29a      	uxth	r2, r3
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a8f2:	3b01      	subs	r3, #1
 801a8f4:	b29a      	uxth	r2, r3
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801a8fa:	68fb      	ldr	r3, [r7, #12]
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	695b      	ldr	r3, [r3, #20]
 801a900:	f003 0304 	and.w	r3, r3, #4
 801a904:	2b04      	cmp	r3, #4
 801a906:	d11b      	bne.n	801a940 <HAL_I2C_Master_Transmit+0x188>
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d017      	beq.n	801a940 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a914:	781a      	ldrb	r2, [r3, #0]
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801a91c:	68fb      	ldr	r3, [r7, #12]
 801a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a920:	1c5a      	adds	r2, r3, #1
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 801a926:	68fb      	ldr	r3, [r7, #12]
 801a928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a92a:	b29b      	uxth	r3, r3
 801a92c:	3b01      	subs	r3, #1
 801a92e:	b29a      	uxth	r2, r3
 801a930:	68fb      	ldr	r3, [r7, #12]
 801a932:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a938:	3b01      	subs	r3, #1
 801a93a:	b29a      	uxth	r2, r3
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a940:	697a      	ldr	r2, [r7, #20]
 801a942:	6a39      	ldr	r1, [r7, #32]
 801a944:	68f8      	ldr	r0, [r7, #12]
 801a946:	f000 fd19 	bl	801b37c <I2C_WaitOnBTFFlagUntilTimeout>
 801a94a:	4603      	mov	r3, r0
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d00d      	beq.n	801a96c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a954:	2b04      	cmp	r3, #4
 801a956:	d107      	bne.n	801a968 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	681a      	ldr	r2, [r3, #0]
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a966:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801a968:	2301      	movs	r3, #1
 801a96a:	e01a      	b.n	801a9a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a970:	2b00      	cmp	r3, #0
 801a972:	d194      	bne.n	801a89e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	681a      	ldr	r2, [r3, #0]
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801a984:	68fb      	ldr	r3, [r7, #12]
 801a986:	2220      	movs	r2, #32
 801a988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801a98c:	68fb      	ldr	r3, [r7, #12]
 801a98e:	2200      	movs	r2, #0
 801a990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	2200      	movs	r2, #0
 801a998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801a99c:	2300      	movs	r3, #0
 801a99e:	e000      	b.n	801a9a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801a9a0:	2302      	movs	r3, #2
  }
}
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	3718      	adds	r7, #24
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	bd80      	pop	{r7, pc}
 801a9aa:	bf00      	nop
 801a9ac:	00100002 	.word	0x00100002
 801a9b0:	ffff0000 	.word	0xffff0000

0801a9b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a9b4:	b580      	push	{r7, lr}
 801a9b6:	b08c      	sub	sp, #48	; 0x30
 801a9b8:	af02      	add	r7, sp, #8
 801a9ba:	60f8      	str	r0, [r7, #12]
 801a9bc:	607a      	str	r2, [r7, #4]
 801a9be:	461a      	mov	r2, r3
 801a9c0:	460b      	mov	r3, r1
 801a9c2:	817b      	strh	r3, [r7, #10]
 801a9c4:	4613      	mov	r3, r2
 801a9c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801a9c8:	f7ff fafe 	bl	8019fc8 <HAL_GetTick>
 801a9cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a9d4:	b2db      	uxtb	r3, r3
 801a9d6:	2b20      	cmp	r3, #32
 801a9d8:	f040 8217 	bne.w	801ae0a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9de:	9300      	str	r3, [sp, #0]
 801a9e0:	2319      	movs	r3, #25
 801a9e2:	2201      	movs	r2, #1
 801a9e4:	497c      	ldr	r1, [pc, #496]	; (801abd8 <HAL_I2C_Master_Receive+0x224>)
 801a9e6:	68f8      	ldr	r0, [r7, #12]
 801a9e8:	f000 fb66 	bl	801b0b8 <I2C_WaitOnFlagUntilTimeout>
 801a9ec:	4603      	mov	r3, r0
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d001      	beq.n	801a9f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 801a9f2:	2302      	movs	r3, #2
 801a9f4:	e20a      	b.n	801ae0c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a9fc:	2b01      	cmp	r3, #1
 801a9fe:	d101      	bne.n	801aa04 <HAL_I2C_Master_Receive+0x50>
 801aa00:	2302      	movs	r3, #2
 801aa02:	e203      	b.n	801ae0c <HAL_I2C_Master_Receive+0x458>
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	2201      	movs	r2, #1
 801aa08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	f003 0301 	and.w	r3, r3, #1
 801aa16:	2b01      	cmp	r3, #1
 801aa18:	d007      	beq.n	801aa2a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	681a      	ldr	r2, [r3, #0]
 801aa20:	68fb      	ldr	r3, [r7, #12]
 801aa22:	681b      	ldr	r3, [r3, #0]
 801aa24:	f042 0201 	orr.w	r2, r2, #1
 801aa28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	681a      	ldr	r2, [r3, #0]
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801aa38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 801aa3a:	68fb      	ldr	r3, [r7, #12]
 801aa3c:	2222      	movs	r2, #34	; 0x22
 801aa3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801aa42:	68fb      	ldr	r3, [r7, #12]
 801aa44:	2210      	movs	r2, #16
 801aa46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801aa4a:	68fb      	ldr	r3, [r7, #12]
 801aa4c:	2200      	movs	r2, #0
 801aa4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801aa50:	68fb      	ldr	r3, [r7, #12]
 801aa52:	687a      	ldr	r2, [r7, #4]
 801aa54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	893a      	ldrh	r2, [r7, #8]
 801aa5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801aa60:	b29a      	uxth	r2, r3
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801aa66:	68fb      	ldr	r3, [r7, #12]
 801aa68:	4a5c      	ldr	r2, [pc, #368]	; (801abdc <HAL_I2C_Master_Receive+0x228>)
 801aa6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801aa6c:	8979      	ldrh	r1, [r7, #10]
 801aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aa72:	68f8      	ldr	r0, [r7, #12]
 801aa74:	f000 fa52 	bl	801af1c <I2C_MasterRequestRead>
 801aa78:	4603      	mov	r3, r0
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d001      	beq.n	801aa82 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 801aa7e:	2301      	movs	r3, #1
 801aa80:	e1c4      	b.n	801ae0c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d113      	bne.n	801aab2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801aa8a:	2300      	movs	r3, #0
 801aa8c:	623b      	str	r3, [r7, #32]
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	695b      	ldr	r3, [r3, #20]
 801aa94:	623b      	str	r3, [r7, #32]
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	699b      	ldr	r3, [r3, #24]
 801aa9c:	623b      	str	r3, [r7, #32]
 801aa9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	681a      	ldr	r2, [r3, #0]
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801aaae:	601a      	str	r2, [r3, #0]
 801aab0:	e198      	b.n	801ade4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aab6:	2b01      	cmp	r3, #1
 801aab8:	d11b      	bne.n	801aaf2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	681a      	ldr	r2, [r3, #0]
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	681b      	ldr	r3, [r3, #0]
 801aac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801aac8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801aaca:	2300      	movs	r3, #0
 801aacc:	61fb      	str	r3, [r7, #28]
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	695b      	ldr	r3, [r3, #20]
 801aad4:	61fb      	str	r3, [r7, #28]
 801aad6:	68fb      	ldr	r3, [r7, #12]
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	699b      	ldr	r3, [r3, #24]
 801aadc:	61fb      	str	r3, [r7, #28]
 801aade:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801aae0:	68fb      	ldr	r3, [r7, #12]
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	681a      	ldr	r2, [r3, #0]
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801aaee:	601a      	str	r2, [r3, #0]
 801aaf0:	e178      	b.n	801ade4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 801aaf2:	68fb      	ldr	r3, [r7, #12]
 801aaf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aaf6:	2b02      	cmp	r3, #2
 801aaf8:	d11b      	bne.n	801ab32 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801aafa:	68fb      	ldr	r3, [r7, #12]
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	681a      	ldr	r2, [r3, #0]
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ab08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	681a      	ldr	r2, [r3, #0]
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ab18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ab1a:	2300      	movs	r3, #0
 801ab1c:	61bb      	str	r3, [r7, #24]
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	695b      	ldr	r3, [r3, #20]
 801ab24:	61bb      	str	r3, [r7, #24]
 801ab26:	68fb      	ldr	r3, [r7, #12]
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	699b      	ldr	r3, [r3, #24]
 801ab2c:	61bb      	str	r3, [r7, #24]
 801ab2e:	69bb      	ldr	r3, [r7, #24]
 801ab30:	e158      	b.n	801ade4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ab32:	68fb      	ldr	r3, [r7, #12]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	681a      	ldr	r2, [r3, #0]
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ab40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ab42:	2300      	movs	r3, #0
 801ab44:	617b      	str	r3, [r7, #20]
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	695b      	ldr	r3, [r3, #20]
 801ab4c:	617b      	str	r3, [r7, #20]
 801ab4e:	68fb      	ldr	r3, [r7, #12]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	699b      	ldr	r3, [r3, #24]
 801ab54:	617b      	str	r3, [r7, #20]
 801ab56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 801ab58:	e144      	b.n	801ade4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ab5e:	2b03      	cmp	r3, #3
 801ab60:	f200 80f1 	bhi.w	801ad46 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ab68:	2b01      	cmp	r3, #1
 801ab6a:	d123      	bne.n	801abb4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801ab6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ab70:	68f8      	ldr	r0, [r7, #12]
 801ab72:	f000 fc4b 	bl	801b40c <I2C_WaitOnRXNEFlagUntilTimeout>
 801ab76:	4603      	mov	r3, r0
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d001      	beq.n	801ab80 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 801ab7c:	2301      	movs	r3, #1
 801ab7e:	e145      	b.n	801ae0c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	691a      	ldr	r2, [r3, #16]
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab8a:	b2d2      	uxtb	r2, r2
 801ab8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab92:	1c5a      	adds	r2, r3, #1
 801ab94:	68fb      	ldr	r3, [r7, #12]
 801ab96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801ab98:	68fb      	ldr	r3, [r7, #12]
 801ab9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ab9c:	3b01      	subs	r3, #1
 801ab9e:	b29a      	uxth	r2, r3
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801aba4:	68fb      	ldr	r3, [r7, #12]
 801aba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801aba8:	b29b      	uxth	r3, r3
 801abaa:	3b01      	subs	r3, #1
 801abac:	b29a      	uxth	r2, r3
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 801abb2:	e117      	b.n	801ade4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801abb8:	2b02      	cmp	r3, #2
 801abba:	d14e      	bne.n	801ac5a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801abbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abbe:	9300      	str	r3, [sp, #0]
 801abc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801abc2:	2200      	movs	r2, #0
 801abc4:	4906      	ldr	r1, [pc, #24]	; (801abe0 <HAL_I2C_Master_Receive+0x22c>)
 801abc6:	68f8      	ldr	r0, [r7, #12]
 801abc8:	f000 fa76 	bl	801b0b8 <I2C_WaitOnFlagUntilTimeout>
 801abcc:	4603      	mov	r3, r0
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d008      	beq.n	801abe4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 801abd2:	2301      	movs	r3, #1
 801abd4:	e11a      	b.n	801ae0c <HAL_I2C_Master_Receive+0x458>
 801abd6:	bf00      	nop
 801abd8:	00100002 	.word	0x00100002
 801abdc:	ffff0000 	.word	0xffff0000
 801abe0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	681a      	ldr	r2, [r3, #0]
 801abea:	68fb      	ldr	r3, [r7, #12]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801abf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	691a      	ldr	r2, [r3, #16]
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abfe:	b2d2      	uxtb	r2, r2
 801ac00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac06:	1c5a      	adds	r2, r3, #1
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ac10:	3b01      	subs	r3, #1
 801ac12:	b29a      	uxth	r2, r3
 801ac14:	68fb      	ldr	r3, [r7, #12]
 801ac16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ac1c:	b29b      	uxth	r3, r3
 801ac1e:	3b01      	subs	r3, #1
 801ac20:	b29a      	uxth	r2, r3
 801ac22:	68fb      	ldr	r3, [r7, #12]
 801ac24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	691a      	ldr	r2, [r3, #16]
 801ac2c:	68fb      	ldr	r3, [r7, #12]
 801ac2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac30:	b2d2      	uxtb	r2, r2
 801ac32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac38:	1c5a      	adds	r2, r3, #1
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ac42:	3b01      	subs	r3, #1
 801ac44:	b29a      	uxth	r2, r3
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801ac4a:	68fb      	ldr	r3, [r7, #12]
 801ac4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ac4e:	b29b      	uxth	r3, r3
 801ac50:	3b01      	subs	r3, #1
 801ac52:	b29a      	uxth	r2, r3
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	855a      	strh	r2, [r3, #42]	; 0x2a
 801ac58:	e0c4      	b.n	801ade4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac5c:	9300      	str	r3, [sp, #0]
 801ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac60:	2200      	movs	r2, #0
 801ac62:	496c      	ldr	r1, [pc, #432]	; (801ae14 <HAL_I2C_Master_Receive+0x460>)
 801ac64:	68f8      	ldr	r0, [r7, #12]
 801ac66:	f000 fa27 	bl	801b0b8 <I2C_WaitOnFlagUntilTimeout>
 801ac6a:	4603      	mov	r3, r0
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d001      	beq.n	801ac74 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 801ac70:	2301      	movs	r3, #1
 801ac72:	e0cb      	b.n	801ae0c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	681a      	ldr	r2, [r3, #0]
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ac82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	691a      	ldr	r2, [r3, #16]
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac8e:	b2d2      	uxtb	r2, r2
 801ac90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac96:	1c5a      	adds	r2, r3, #1
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aca0:	3b01      	subs	r3, #1
 801aca2:	b29a      	uxth	r2, r3
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801acac:	b29b      	uxth	r3, r3
 801acae:	3b01      	subs	r3, #1
 801acb0:	b29a      	uxth	r2, r3
 801acb2:	68fb      	ldr	r3, [r7, #12]
 801acb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acb8:	9300      	str	r3, [sp, #0]
 801acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acbc:	2200      	movs	r2, #0
 801acbe:	4955      	ldr	r1, [pc, #340]	; (801ae14 <HAL_I2C_Master_Receive+0x460>)
 801acc0:	68f8      	ldr	r0, [r7, #12]
 801acc2:	f000 f9f9 	bl	801b0b8 <I2C_WaitOnFlagUntilTimeout>
 801acc6:	4603      	mov	r3, r0
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d001      	beq.n	801acd0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 801accc:	2301      	movs	r3, #1
 801acce:	e09d      	b.n	801ae0c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	681a      	ldr	r2, [r3, #0]
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	681b      	ldr	r3, [r3, #0]
 801acda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801acde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	691a      	ldr	r2, [r3, #16]
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acea:	b2d2      	uxtb	r2, r2
 801acec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801acee:	68fb      	ldr	r3, [r7, #12]
 801acf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acf2:	1c5a      	adds	r2, r3, #1
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801acfc:	3b01      	subs	r3, #1
 801acfe:	b29a      	uxth	r2, r3
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ad08:	b29b      	uxth	r3, r3
 801ad0a:	3b01      	subs	r3, #1
 801ad0c:	b29a      	uxth	r2, r3
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ad12:	68fb      	ldr	r3, [r7, #12]
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	691a      	ldr	r2, [r3, #16]
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad1c:	b2d2      	uxtb	r2, r2
 801ad1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad24:	1c5a      	adds	r2, r3, #1
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ad2e:	3b01      	subs	r3, #1
 801ad30:	b29a      	uxth	r2, r3
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ad3a:	b29b      	uxth	r3, r3
 801ad3c:	3b01      	subs	r3, #1
 801ad3e:	b29a      	uxth	r2, r3
 801ad40:	68fb      	ldr	r3, [r7, #12]
 801ad42:	855a      	strh	r2, [r3, #42]	; 0x2a
 801ad44:	e04e      	b.n	801ade4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801ad46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ad4a:	68f8      	ldr	r0, [r7, #12]
 801ad4c:	f000 fb5e 	bl	801b40c <I2C_WaitOnRXNEFlagUntilTimeout>
 801ad50:	4603      	mov	r3, r0
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d001      	beq.n	801ad5a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 801ad56:	2301      	movs	r3, #1
 801ad58:	e058      	b.n	801ae0c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	691a      	ldr	r2, [r3, #16]
 801ad60:	68fb      	ldr	r3, [r7, #12]
 801ad62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad64:	b2d2      	uxtb	r2, r2
 801ad66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad6c:	1c5a      	adds	r2, r3, #1
 801ad6e:	68fb      	ldr	r3, [r7, #12]
 801ad70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ad76:	3b01      	subs	r3, #1
 801ad78:	b29a      	uxth	r2, r3
 801ad7a:	68fb      	ldr	r3, [r7, #12]
 801ad7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ad82:	b29b      	uxth	r3, r3
 801ad84:	3b01      	subs	r3, #1
 801ad86:	b29a      	uxth	r2, r3
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	695b      	ldr	r3, [r3, #20]
 801ad92:	f003 0304 	and.w	r3, r3, #4
 801ad96:	2b04      	cmp	r3, #4
 801ad98:	d124      	bne.n	801ade4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ad9e:	2b03      	cmp	r3, #3
 801ada0:	d107      	bne.n	801adb2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ada2:	68fb      	ldr	r3, [r7, #12]
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	681a      	ldr	r2, [r3, #0]
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801adb0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801adb2:	68fb      	ldr	r3, [r7, #12]
 801adb4:	681b      	ldr	r3, [r3, #0]
 801adb6:	691a      	ldr	r2, [r3, #16]
 801adb8:	68fb      	ldr	r3, [r7, #12]
 801adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801adbc:	b2d2      	uxtb	r2, r2
 801adbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801adc0:	68fb      	ldr	r3, [r7, #12]
 801adc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801adc4:	1c5a      	adds	r2, r3, #1
 801adc6:	68fb      	ldr	r3, [r7, #12]
 801adc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801adce:	3b01      	subs	r3, #1
 801add0:	b29a      	uxth	r2, r3
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801adda:	b29b      	uxth	r3, r3
 801addc:	3b01      	subs	r3, #1
 801adde:	b29a      	uxth	r2, r3
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 801ade4:	68fb      	ldr	r3, [r7, #12]
 801ade6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ade8:	2b00      	cmp	r3, #0
 801adea:	f47f aeb6 	bne.w	801ab5a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	2220      	movs	r2, #32
 801adf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	2200      	movs	r2, #0
 801adfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	2200      	movs	r2, #0
 801ae02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801ae06:	2300      	movs	r3, #0
 801ae08:	e000      	b.n	801ae0c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 801ae0a:	2302      	movs	r3, #2
  }
}
 801ae0c:	4618      	mov	r0, r3
 801ae0e:	3728      	adds	r7, #40	; 0x28
 801ae10:	46bd      	mov	sp, r7
 801ae12:	bd80      	pop	{r7, pc}
 801ae14:	00010004 	.word	0x00010004

0801ae18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b088      	sub	sp, #32
 801ae1c:	af02      	add	r7, sp, #8
 801ae1e:	60f8      	str	r0, [r7, #12]
 801ae20:	607a      	str	r2, [r7, #4]
 801ae22:	603b      	str	r3, [r7, #0]
 801ae24:	460b      	mov	r3, r1
 801ae26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801ae2e:	697b      	ldr	r3, [r7, #20]
 801ae30:	2b08      	cmp	r3, #8
 801ae32:	d006      	beq.n	801ae42 <I2C_MasterRequestWrite+0x2a>
 801ae34:	697b      	ldr	r3, [r7, #20]
 801ae36:	2b01      	cmp	r3, #1
 801ae38:	d003      	beq.n	801ae42 <I2C_MasterRequestWrite+0x2a>
 801ae3a:	697b      	ldr	r3, [r7, #20]
 801ae3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801ae40:	d108      	bne.n	801ae54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801ae42:	68fb      	ldr	r3, [r7, #12]
 801ae44:	681b      	ldr	r3, [r3, #0]
 801ae46:	681a      	ldr	r2, [r3, #0]
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ae50:	601a      	str	r2, [r3, #0]
 801ae52:	e00b      	b.n	801ae6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 801ae54:	68fb      	ldr	r3, [r7, #12]
 801ae56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae58:	2b12      	cmp	r3, #18
 801ae5a:	d107      	bne.n	801ae6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	681a      	ldr	r2, [r3, #0]
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ae6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801ae6c:	683b      	ldr	r3, [r7, #0]
 801ae6e:	9300      	str	r3, [sp, #0]
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	2200      	movs	r2, #0
 801ae74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801ae78:	68f8      	ldr	r0, [r7, #12]
 801ae7a:	f000 f91d 	bl	801b0b8 <I2C_WaitOnFlagUntilTimeout>
 801ae7e:	4603      	mov	r3, r0
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d00d      	beq.n	801aea0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801ae84:	68fb      	ldr	r3, [r7, #12]
 801ae86:	681b      	ldr	r3, [r3, #0]
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ae8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ae92:	d103      	bne.n	801ae9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ae9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801ae9c:	2303      	movs	r3, #3
 801ae9e:	e035      	b.n	801af0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801aea0:	68fb      	ldr	r3, [r7, #12]
 801aea2:	691b      	ldr	r3, [r3, #16]
 801aea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801aea8:	d108      	bne.n	801aebc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801aeaa:	897b      	ldrh	r3, [r7, #10]
 801aeac:	b2db      	uxtb	r3, r3
 801aeae:	461a      	mov	r2, r3
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801aeb8:	611a      	str	r2, [r3, #16]
 801aeba:	e01b      	b.n	801aef4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 801aebc:	897b      	ldrh	r3, [r7, #10]
 801aebe:	11db      	asrs	r3, r3, #7
 801aec0:	b2db      	uxtb	r3, r3
 801aec2:	f003 0306 	and.w	r3, r3, #6
 801aec6:	b2db      	uxtb	r3, r3
 801aec8:	f063 030f 	orn	r3, r3, #15
 801aecc:	b2da      	uxtb	r2, r3
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801aed4:	683b      	ldr	r3, [r7, #0]
 801aed6:	687a      	ldr	r2, [r7, #4]
 801aed8:	490e      	ldr	r1, [pc, #56]	; (801af14 <I2C_MasterRequestWrite+0xfc>)
 801aeda:	68f8      	ldr	r0, [r7, #12]
 801aedc:	f000 f966 	bl	801b1ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801aee0:	4603      	mov	r3, r0
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d001      	beq.n	801aeea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801aee6:	2301      	movs	r3, #1
 801aee8:	e010      	b.n	801af0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801aeea:	897b      	ldrh	r3, [r7, #10]
 801aeec:	b2da      	uxtb	r2, r3
 801aeee:	68fb      	ldr	r3, [r7, #12]
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801aef4:	683b      	ldr	r3, [r7, #0]
 801aef6:	687a      	ldr	r2, [r7, #4]
 801aef8:	4907      	ldr	r1, [pc, #28]	; (801af18 <I2C_MasterRequestWrite+0x100>)
 801aefa:	68f8      	ldr	r0, [r7, #12]
 801aefc:	f000 f956 	bl	801b1ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801af00:	4603      	mov	r3, r0
 801af02:	2b00      	cmp	r3, #0
 801af04:	d001      	beq.n	801af0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801af06:	2301      	movs	r3, #1
 801af08:	e000      	b.n	801af0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 801af0a:	2300      	movs	r3, #0
}
 801af0c:	4618      	mov	r0, r3
 801af0e:	3718      	adds	r7, #24
 801af10:	46bd      	mov	sp, r7
 801af12:	bd80      	pop	{r7, pc}
 801af14:	00010008 	.word	0x00010008
 801af18:	00010002 	.word	0x00010002

0801af1c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	b088      	sub	sp, #32
 801af20:	af02      	add	r7, sp, #8
 801af22:	60f8      	str	r0, [r7, #12]
 801af24:	607a      	str	r2, [r7, #4]
 801af26:	603b      	str	r3, [r7, #0]
 801af28:	460b      	mov	r3, r1
 801af2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801af2c:	68fb      	ldr	r3, [r7, #12]
 801af2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af30:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801af32:	68fb      	ldr	r3, [r7, #12]
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	681a      	ldr	r2, [r3, #0]
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801af40:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801af42:	697b      	ldr	r3, [r7, #20]
 801af44:	2b08      	cmp	r3, #8
 801af46:	d006      	beq.n	801af56 <I2C_MasterRequestRead+0x3a>
 801af48:	697b      	ldr	r3, [r7, #20]
 801af4a:	2b01      	cmp	r3, #1
 801af4c:	d003      	beq.n	801af56 <I2C_MasterRequestRead+0x3a>
 801af4e:	697b      	ldr	r3, [r7, #20]
 801af50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801af54:	d108      	bne.n	801af68 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	681a      	ldr	r2, [r3, #0]
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801af64:	601a      	str	r2, [r3, #0]
 801af66:	e00b      	b.n	801af80 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 801af68:	68fb      	ldr	r3, [r7, #12]
 801af6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af6c:	2b11      	cmp	r3, #17
 801af6e:	d107      	bne.n	801af80 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	681a      	ldr	r2, [r3, #0]
 801af76:	68fb      	ldr	r3, [r7, #12]
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801af7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801af80:	683b      	ldr	r3, [r7, #0]
 801af82:	9300      	str	r3, [sp, #0]
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	2200      	movs	r2, #0
 801af88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801af8c:	68f8      	ldr	r0, [r7, #12]
 801af8e:	f000 f893 	bl	801b0b8 <I2C_WaitOnFlagUntilTimeout>
 801af92:	4603      	mov	r3, r0
 801af94:	2b00      	cmp	r3, #0
 801af96:	d00d      	beq.n	801afb4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801afa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801afa6:	d103      	bne.n	801afb0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 801afae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801afb0:	2303      	movs	r3, #3
 801afb2:	e079      	b.n	801b0a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	691b      	ldr	r3, [r3, #16]
 801afb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801afbc:	d108      	bne.n	801afd0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801afbe:	897b      	ldrh	r3, [r7, #10]
 801afc0:	b2db      	uxtb	r3, r3
 801afc2:	f043 0301 	orr.w	r3, r3, #1
 801afc6:	b2da      	uxtb	r2, r3
 801afc8:	68fb      	ldr	r3, [r7, #12]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	611a      	str	r2, [r3, #16]
 801afce:	e05f      	b.n	801b090 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 801afd0:	897b      	ldrh	r3, [r7, #10]
 801afd2:	11db      	asrs	r3, r3, #7
 801afd4:	b2db      	uxtb	r3, r3
 801afd6:	f003 0306 	and.w	r3, r3, #6
 801afda:	b2db      	uxtb	r3, r3
 801afdc:	f063 030f 	orn	r3, r3, #15
 801afe0:	b2da      	uxtb	r2, r3
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801afe8:	683b      	ldr	r3, [r7, #0]
 801afea:	687a      	ldr	r2, [r7, #4]
 801afec:	4930      	ldr	r1, [pc, #192]	; (801b0b0 <I2C_MasterRequestRead+0x194>)
 801afee:	68f8      	ldr	r0, [r7, #12]
 801aff0:	f000 f8dc 	bl	801b1ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801aff4:	4603      	mov	r3, r0
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d001      	beq.n	801affe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 801affa:	2301      	movs	r3, #1
 801affc:	e054      	b.n	801b0a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801affe:	897b      	ldrh	r3, [r7, #10]
 801b000:	b2da      	uxtb	r2, r3
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801b008:	683b      	ldr	r3, [r7, #0]
 801b00a:	687a      	ldr	r2, [r7, #4]
 801b00c:	4929      	ldr	r1, [pc, #164]	; (801b0b4 <I2C_MasterRequestRead+0x198>)
 801b00e:	68f8      	ldr	r0, [r7, #12]
 801b010:	f000 f8cc 	bl	801b1ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801b014:	4603      	mov	r3, r0
 801b016:	2b00      	cmp	r3, #0
 801b018:	d001      	beq.n	801b01e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 801b01a:	2301      	movs	r3, #1
 801b01c:	e044      	b.n	801b0a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801b01e:	2300      	movs	r3, #0
 801b020:	613b      	str	r3, [r7, #16]
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	695b      	ldr	r3, [r3, #20]
 801b028:	613b      	str	r3, [r7, #16]
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	699b      	ldr	r3, [r3, #24]
 801b030:	613b      	str	r3, [r7, #16]
 801b032:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	681a      	ldr	r2, [r3, #0]
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b042:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801b044:	683b      	ldr	r3, [r7, #0]
 801b046:	9300      	str	r3, [sp, #0]
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	2200      	movs	r2, #0
 801b04c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801b050:	68f8      	ldr	r0, [r7, #12]
 801b052:	f000 f831 	bl	801b0b8 <I2C_WaitOnFlagUntilTimeout>
 801b056:	4603      	mov	r3, r0
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d00d      	beq.n	801b078 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b06a:	d103      	bne.n	801b074 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801b06c:	68fb      	ldr	r3, [r7, #12]
 801b06e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b072:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 801b074:	2303      	movs	r3, #3
 801b076:	e017      	b.n	801b0a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 801b078:	897b      	ldrh	r3, [r7, #10]
 801b07a:	11db      	asrs	r3, r3, #7
 801b07c:	b2db      	uxtb	r3, r3
 801b07e:	f003 0306 	and.w	r3, r3, #6
 801b082:	b2db      	uxtb	r3, r3
 801b084:	f063 030e 	orn	r3, r3, #14
 801b088:	b2da      	uxtb	r2, r3
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801b090:	683b      	ldr	r3, [r7, #0]
 801b092:	687a      	ldr	r2, [r7, #4]
 801b094:	4907      	ldr	r1, [pc, #28]	; (801b0b4 <I2C_MasterRequestRead+0x198>)
 801b096:	68f8      	ldr	r0, [r7, #12]
 801b098:	f000 f888 	bl	801b1ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801b09c:	4603      	mov	r3, r0
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	d001      	beq.n	801b0a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 801b0a2:	2301      	movs	r3, #1
 801b0a4:	e000      	b.n	801b0a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 801b0a6:	2300      	movs	r3, #0
}
 801b0a8:	4618      	mov	r0, r3
 801b0aa:	3718      	adds	r7, #24
 801b0ac:	46bd      	mov	sp, r7
 801b0ae:	bd80      	pop	{r7, pc}
 801b0b0:	00010008 	.word	0x00010008
 801b0b4:	00010002 	.word	0x00010002

0801b0b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801b0b8:	b580      	push	{r7, lr}
 801b0ba:	b084      	sub	sp, #16
 801b0bc:	af00      	add	r7, sp, #0
 801b0be:	60f8      	str	r0, [r7, #12]
 801b0c0:	60b9      	str	r1, [r7, #8]
 801b0c2:	603b      	str	r3, [r7, #0]
 801b0c4:	4613      	mov	r3, r2
 801b0c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801b0c8:	e048      	b.n	801b15c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b0ca:	683b      	ldr	r3, [r7, #0]
 801b0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b0d0:	d044      	beq.n	801b15c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b0d2:	f7fe ff79 	bl	8019fc8 <HAL_GetTick>
 801b0d6:	4602      	mov	r2, r0
 801b0d8:	69bb      	ldr	r3, [r7, #24]
 801b0da:	1ad3      	subs	r3, r2, r3
 801b0dc:	683a      	ldr	r2, [r7, #0]
 801b0de:	429a      	cmp	r2, r3
 801b0e0:	d302      	bcc.n	801b0e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 801b0e2:	683b      	ldr	r3, [r7, #0]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d139      	bne.n	801b15c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801b0e8:	68bb      	ldr	r3, [r7, #8]
 801b0ea:	0c1b      	lsrs	r3, r3, #16
 801b0ec:	b2db      	uxtb	r3, r3
 801b0ee:	2b01      	cmp	r3, #1
 801b0f0:	d10d      	bne.n	801b10e <I2C_WaitOnFlagUntilTimeout+0x56>
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	695b      	ldr	r3, [r3, #20]
 801b0f8:	43da      	mvns	r2, r3
 801b0fa:	68bb      	ldr	r3, [r7, #8]
 801b0fc:	4013      	ands	r3, r2
 801b0fe:	b29b      	uxth	r3, r3
 801b100:	2b00      	cmp	r3, #0
 801b102:	bf0c      	ite	eq
 801b104:	2301      	moveq	r3, #1
 801b106:	2300      	movne	r3, #0
 801b108:	b2db      	uxtb	r3, r3
 801b10a:	461a      	mov	r2, r3
 801b10c:	e00c      	b.n	801b128 <I2C_WaitOnFlagUntilTimeout+0x70>
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	699b      	ldr	r3, [r3, #24]
 801b114:	43da      	mvns	r2, r3
 801b116:	68bb      	ldr	r3, [r7, #8]
 801b118:	4013      	ands	r3, r2
 801b11a:	b29b      	uxth	r3, r3
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	bf0c      	ite	eq
 801b120:	2301      	moveq	r3, #1
 801b122:	2300      	movne	r3, #0
 801b124:	b2db      	uxtb	r3, r3
 801b126:	461a      	mov	r2, r3
 801b128:	79fb      	ldrb	r3, [r7, #7]
 801b12a:	429a      	cmp	r2, r3
 801b12c:	d116      	bne.n	801b15c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	2200      	movs	r2, #0
 801b132:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	2220      	movs	r2, #32
 801b138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	2200      	movs	r2, #0
 801b140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801b144:	68fb      	ldr	r3, [r7, #12]
 801b146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b148:	f043 0220 	orr.w	r2, r3, #32
 801b14c:	68fb      	ldr	r3, [r7, #12]
 801b14e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	2200      	movs	r2, #0
 801b154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 801b158:	2301      	movs	r3, #1
 801b15a:	e023      	b.n	801b1a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801b15c:	68bb      	ldr	r3, [r7, #8]
 801b15e:	0c1b      	lsrs	r3, r3, #16
 801b160:	b2db      	uxtb	r3, r3
 801b162:	2b01      	cmp	r3, #1
 801b164:	d10d      	bne.n	801b182 <I2C_WaitOnFlagUntilTimeout+0xca>
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	695b      	ldr	r3, [r3, #20]
 801b16c:	43da      	mvns	r2, r3
 801b16e:	68bb      	ldr	r3, [r7, #8]
 801b170:	4013      	ands	r3, r2
 801b172:	b29b      	uxth	r3, r3
 801b174:	2b00      	cmp	r3, #0
 801b176:	bf0c      	ite	eq
 801b178:	2301      	moveq	r3, #1
 801b17a:	2300      	movne	r3, #0
 801b17c:	b2db      	uxtb	r3, r3
 801b17e:	461a      	mov	r2, r3
 801b180:	e00c      	b.n	801b19c <I2C_WaitOnFlagUntilTimeout+0xe4>
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	699b      	ldr	r3, [r3, #24]
 801b188:	43da      	mvns	r2, r3
 801b18a:	68bb      	ldr	r3, [r7, #8]
 801b18c:	4013      	ands	r3, r2
 801b18e:	b29b      	uxth	r3, r3
 801b190:	2b00      	cmp	r3, #0
 801b192:	bf0c      	ite	eq
 801b194:	2301      	moveq	r3, #1
 801b196:	2300      	movne	r3, #0
 801b198:	b2db      	uxtb	r3, r3
 801b19a:	461a      	mov	r2, r3
 801b19c:	79fb      	ldrb	r3, [r7, #7]
 801b19e:	429a      	cmp	r2, r3
 801b1a0:	d093      	beq.n	801b0ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801b1a2:	2300      	movs	r3, #0
}
 801b1a4:	4618      	mov	r0, r3
 801b1a6:	3710      	adds	r7, #16
 801b1a8:	46bd      	mov	sp, r7
 801b1aa:	bd80      	pop	{r7, pc}

0801b1ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801b1ac:	b580      	push	{r7, lr}
 801b1ae:	b084      	sub	sp, #16
 801b1b0:	af00      	add	r7, sp, #0
 801b1b2:	60f8      	str	r0, [r7, #12]
 801b1b4:	60b9      	str	r1, [r7, #8]
 801b1b6:	607a      	str	r2, [r7, #4]
 801b1b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801b1ba:	e071      	b.n	801b2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	695b      	ldr	r3, [r3, #20]
 801b1c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b1c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b1ca:	d123      	bne.n	801b214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801b1cc:	68fb      	ldr	r3, [r7, #12]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	681a      	ldr	r2, [r3, #0]
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b1da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801b1e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801b1e6:	68fb      	ldr	r3, [r7, #12]
 801b1e8:	2200      	movs	r2, #0
 801b1ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	2220      	movs	r2, #32
 801b1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801b1f4:	68fb      	ldr	r3, [r7, #12]
 801b1f6:	2200      	movs	r2, #0
 801b1f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801b1fc:	68fb      	ldr	r3, [r7, #12]
 801b1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b200:	f043 0204 	orr.w	r2, r3, #4
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	2200      	movs	r2, #0
 801b20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801b210:	2301      	movs	r3, #1
 801b212:	e067      	b.n	801b2e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b21a:	d041      	beq.n	801b2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b21c:	f7fe fed4 	bl	8019fc8 <HAL_GetTick>
 801b220:	4602      	mov	r2, r0
 801b222:	683b      	ldr	r3, [r7, #0]
 801b224:	1ad3      	subs	r3, r2, r3
 801b226:	687a      	ldr	r2, [r7, #4]
 801b228:	429a      	cmp	r2, r3
 801b22a:	d302      	bcc.n	801b232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d136      	bne.n	801b2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 801b232:	68bb      	ldr	r3, [r7, #8]
 801b234:	0c1b      	lsrs	r3, r3, #16
 801b236:	b2db      	uxtb	r3, r3
 801b238:	2b01      	cmp	r3, #1
 801b23a:	d10c      	bne.n	801b256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 801b23c:	68fb      	ldr	r3, [r7, #12]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	695b      	ldr	r3, [r3, #20]
 801b242:	43da      	mvns	r2, r3
 801b244:	68bb      	ldr	r3, [r7, #8]
 801b246:	4013      	ands	r3, r2
 801b248:	b29b      	uxth	r3, r3
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	bf14      	ite	ne
 801b24e:	2301      	movne	r3, #1
 801b250:	2300      	moveq	r3, #0
 801b252:	b2db      	uxtb	r3, r3
 801b254:	e00b      	b.n	801b26e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 801b256:	68fb      	ldr	r3, [r7, #12]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	699b      	ldr	r3, [r3, #24]
 801b25c:	43da      	mvns	r2, r3
 801b25e:	68bb      	ldr	r3, [r7, #8]
 801b260:	4013      	ands	r3, r2
 801b262:	b29b      	uxth	r3, r3
 801b264:	2b00      	cmp	r3, #0
 801b266:	bf14      	ite	ne
 801b268:	2301      	movne	r3, #1
 801b26a:	2300      	moveq	r3, #0
 801b26c:	b2db      	uxtb	r3, r3
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d016      	beq.n	801b2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	2200      	movs	r2, #0
 801b276:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801b278:	68fb      	ldr	r3, [r7, #12]
 801b27a:	2220      	movs	r2, #32
 801b27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	2200      	movs	r2, #0
 801b284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b28c:	f043 0220 	orr.w	r2, r3, #32
 801b290:	68fb      	ldr	r3, [r7, #12]
 801b292:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	2200      	movs	r2, #0
 801b298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 801b29c:	2301      	movs	r3, #1
 801b29e:	e021      	b.n	801b2e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801b2a0:	68bb      	ldr	r3, [r7, #8]
 801b2a2:	0c1b      	lsrs	r3, r3, #16
 801b2a4:	b2db      	uxtb	r3, r3
 801b2a6:	2b01      	cmp	r3, #1
 801b2a8:	d10c      	bne.n	801b2c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	695b      	ldr	r3, [r3, #20]
 801b2b0:	43da      	mvns	r2, r3
 801b2b2:	68bb      	ldr	r3, [r7, #8]
 801b2b4:	4013      	ands	r3, r2
 801b2b6:	b29b      	uxth	r3, r3
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	bf14      	ite	ne
 801b2bc:	2301      	movne	r3, #1
 801b2be:	2300      	moveq	r3, #0
 801b2c0:	b2db      	uxtb	r3, r3
 801b2c2:	e00b      	b.n	801b2dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 801b2c4:	68fb      	ldr	r3, [r7, #12]
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	699b      	ldr	r3, [r3, #24]
 801b2ca:	43da      	mvns	r2, r3
 801b2cc:	68bb      	ldr	r3, [r7, #8]
 801b2ce:	4013      	ands	r3, r2
 801b2d0:	b29b      	uxth	r3, r3
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	bf14      	ite	ne
 801b2d6:	2301      	movne	r3, #1
 801b2d8:	2300      	moveq	r3, #0
 801b2da:	b2db      	uxtb	r3, r3
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	f47f af6d 	bne.w	801b1bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 801b2e2:	2300      	movs	r3, #0
}
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	3710      	adds	r7, #16
 801b2e8:	46bd      	mov	sp, r7
 801b2ea:	bd80      	pop	{r7, pc}

0801b2ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801b2ec:	b580      	push	{r7, lr}
 801b2ee:	b084      	sub	sp, #16
 801b2f0:	af00      	add	r7, sp, #0
 801b2f2:	60f8      	str	r0, [r7, #12]
 801b2f4:	60b9      	str	r1, [r7, #8]
 801b2f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801b2f8:	e034      	b.n	801b364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801b2fa:	68f8      	ldr	r0, [r7, #12]
 801b2fc:	f000 f8e3 	bl	801b4c6 <I2C_IsAcknowledgeFailed>
 801b300:	4603      	mov	r3, r0
 801b302:	2b00      	cmp	r3, #0
 801b304:	d001      	beq.n	801b30a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801b306:	2301      	movs	r3, #1
 801b308:	e034      	b.n	801b374 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b30a:	68bb      	ldr	r3, [r7, #8]
 801b30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b310:	d028      	beq.n	801b364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b312:	f7fe fe59 	bl	8019fc8 <HAL_GetTick>
 801b316:	4602      	mov	r2, r0
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	1ad3      	subs	r3, r2, r3
 801b31c:	68ba      	ldr	r2, [r7, #8]
 801b31e:	429a      	cmp	r2, r3
 801b320:	d302      	bcc.n	801b328 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801b322:	68bb      	ldr	r3, [r7, #8]
 801b324:	2b00      	cmp	r3, #0
 801b326:	d11d      	bne.n	801b364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	695b      	ldr	r3, [r3, #20]
 801b32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b332:	2b80      	cmp	r3, #128	; 0x80
 801b334:	d016      	beq.n	801b364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	2200      	movs	r2, #0
 801b33a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	2220      	movs	r2, #32
 801b340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	2200      	movs	r2, #0
 801b348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801b34c:	68fb      	ldr	r3, [r7, #12]
 801b34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b350:	f043 0220 	orr.w	r2, r3, #32
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	2200      	movs	r2, #0
 801b35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 801b360:	2301      	movs	r3, #1
 801b362:	e007      	b.n	801b374 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	695b      	ldr	r3, [r3, #20]
 801b36a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b36e:	2b80      	cmp	r3, #128	; 0x80
 801b370:	d1c3      	bne.n	801b2fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801b372:	2300      	movs	r3, #0
}
 801b374:	4618      	mov	r0, r3
 801b376:	3710      	adds	r7, #16
 801b378:	46bd      	mov	sp, r7
 801b37a:	bd80      	pop	{r7, pc}

0801b37c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801b37c:	b580      	push	{r7, lr}
 801b37e:	b084      	sub	sp, #16
 801b380:	af00      	add	r7, sp, #0
 801b382:	60f8      	str	r0, [r7, #12]
 801b384:	60b9      	str	r1, [r7, #8]
 801b386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801b388:	e034      	b.n	801b3f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801b38a:	68f8      	ldr	r0, [r7, #12]
 801b38c:	f000 f89b 	bl	801b4c6 <I2C_IsAcknowledgeFailed>
 801b390:	4603      	mov	r3, r0
 801b392:	2b00      	cmp	r3, #0
 801b394:	d001      	beq.n	801b39a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801b396:	2301      	movs	r3, #1
 801b398:	e034      	b.n	801b404 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b39a:	68bb      	ldr	r3, [r7, #8]
 801b39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b3a0:	d028      	beq.n	801b3f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b3a2:	f7fe fe11 	bl	8019fc8 <HAL_GetTick>
 801b3a6:	4602      	mov	r2, r0
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	1ad3      	subs	r3, r2, r3
 801b3ac:	68ba      	ldr	r2, [r7, #8]
 801b3ae:	429a      	cmp	r2, r3
 801b3b0:	d302      	bcc.n	801b3b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801b3b2:	68bb      	ldr	r3, [r7, #8]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d11d      	bne.n	801b3f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 801b3b8:	68fb      	ldr	r3, [r7, #12]
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	695b      	ldr	r3, [r3, #20]
 801b3be:	f003 0304 	and.w	r3, r3, #4
 801b3c2:	2b04      	cmp	r3, #4
 801b3c4:	d016      	beq.n	801b3f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801b3c6:	68fb      	ldr	r3, [r7, #12]
 801b3c8:	2200      	movs	r2, #0
 801b3ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801b3cc:	68fb      	ldr	r3, [r7, #12]
 801b3ce:	2220      	movs	r2, #32
 801b3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801b3d4:	68fb      	ldr	r3, [r7, #12]
 801b3d6:	2200      	movs	r2, #0
 801b3d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3e0:	f043 0220 	orr.w	r2, r3, #32
 801b3e4:	68fb      	ldr	r3, [r7, #12]
 801b3e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	2200      	movs	r2, #0
 801b3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 801b3f0:	2301      	movs	r3, #1
 801b3f2:	e007      	b.n	801b404 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	695b      	ldr	r3, [r3, #20]
 801b3fa:	f003 0304 	and.w	r3, r3, #4
 801b3fe:	2b04      	cmp	r3, #4
 801b400:	d1c3      	bne.n	801b38a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801b402:	2300      	movs	r3, #0
}
 801b404:	4618      	mov	r0, r3
 801b406:	3710      	adds	r7, #16
 801b408:	46bd      	mov	sp, r7
 801b40a:	bd80      	pop	{r7, pc}

0801b40c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801b40c:	b580      	push	{r7, lr}
 801b40e:	b084      	sub	sp, #16
 801b410:	af00      	add	r7, sp, #0
 801b412:	60f8      	str	r0, [r7, #12]
 801b414:	60b9      	str	r1, [r7, #8]
 801b416:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801b418:	e049      	b.n	801b4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801b41a:	68fb      	ldr	r3, [r7, #12]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	695b      	ldr	r3, [r3, #20]
 801b420:	f003 0310 	and.w	r3, r3, #16
 801b424:	2b10      	cmp	r3, #16
 801b426:	d119      	bne.n	801b45c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b428:	68fb      	ldr	r3, [r7, #12]
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	f06f 0210 	mvn.w	r2, #16
 801b430:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801b432:	68fb      	ldr	r3, [r7, #12]
 801b434:	2200      	movs	r2, #0
 801b436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801b438:	68fb      	ldr	r3, [r7, #12]
 801b43a:	2220      	movs	r2, #32
 801b43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	2200      	movs	r2, #0
 801b444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b44c:	68fb      	ldr	r3, [r7, #12]
 801b44e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801b450:	68fb      	ldr	r3, [r7, #12]
 801b452:	2200      	movs	r2, #0
 801b454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801b458:	2301      	movs	r3, #1
 801b45a:	e030      	b.n	801b4be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b45c:	f7fe fdb4 	bl	8019fc8 <HAL_GetTick>
 801b460:	4602      	mov	r2, r0
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	1ad3      	subs	r3, r2, r3
 801b466:	68ba      	ldr	r2, [r7, #8]
 801b468:	429a      	cmp	r2, r3
 801b46a:	d302      	bcc.n	801b472 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 801b46c:	68bb      	ldr	r3, [r7, #8]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d11d      	bne.n	801b4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 801b472:	68fb      	ldr	r3, [r7, #12]
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	695b      	ldr	r3, [r3, #20]
 801b478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b47c:	2b40      	cmp	r3, #64	; 0x40
 801b47e:	d016      	beq.n	801b4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801b480:	68fb      	ldr	r3, [r7, #12]
 801b482:	2200      	movs	r2, #0
 801b484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801b486:	68fb      	ldr	r3, [r7, #12]
 801b488:	2220      	movs	r2, #32
 801b48a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801b48e:	68fb      	ldr	r3, [r7, #12]
 801b490:	2200      	movs	r2, #0
 801b492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801b496:	68fb      	ldr	r3, [r7, #12]
 801b498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b49a:	f043 0220 	orr.w	r2, r3, #32
 801b49e:	68fb      	ldr	r3, [r7, #12]
 801b4a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	2200      	movs	r2, #0
 801b4a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801b4aa:	2301      	movs	r3, #1
 801b4ac:	e007      	b.n	801b4be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	695b      	ldr	r3, [r3, #20]
 801b4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b4b8:	2b40      	cmp	r3, #64	; 0x40
 801b4ba:	d1ae      	bne.n	801b41a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801b4bc:	2300      	movs	r3, #0
}
 801b4be:	4618      	mov	r0, r3
 801b4c0:	3710      	adds	r7, #16
 801b4c2:	46bd      	mov	sp, r7
 801b4c4:	bd80      	pop	{r7, pc}

0801b4c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801b4c6:	b480      	push	{r7}
 801b4c8:	b083      	sub	sp, #12
 801b4ca:	af00      	add	r7, sp, #0
 801b4cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	695b      	ldr	r3, [r3, #20]
 801b4d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b4d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b4dc:	d11b      	bne.n	801b516 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801b4e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	2200      	movs	r2, #0
 801b4ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	2220      	movs	r2, #32
 801b4f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	2200      	movs	r2, #0
 801b4fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b502:	f043 0204 	orr.w	r2, r3, #4
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	2200      	movs	r2, #0
 801b50e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801b512:	2301      	movs	r3, #1
 801b514:	e000      	b.n	801b518 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801b516:	2300      	movs	r3, #0
}
 801b518:	4618      	mov	r0, r3
 801b51a:	370c      	adds	r7, #12
 801b51c:	46bd      	mov	sp, r7
 801b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b522:	4770      	bx	lr

0801b524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b524:	b580      	push	{r7, lr}
 801b526:	b086      	sub	sp, #24
 801b528:	af00      	add	r7, sp, #0
 801b52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d101      	bne.n	801b536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801b532:	2301      	movs	r3, #1
 801b534:	e267      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	f003 0301 	and.w	r3, r3, #1
 801b53e:	2b00      	cmp	r3, #0
 801b540:	d075      	beq.n	801b62e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 801b542:	4b88      	ldr	r3, [pc, #544]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b544:	689b      	ldr	r3, [r3, #8]
 801b546:	f003 030c 	and.w	r3, r3, #12
 801b54a:	2b04      	cmp	r3, #4
 801b54c:	d00c      	beq.n	801b568 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801b54e:	4b85      	ldr	r3, [pc, #532]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b550:	689b      	ldr	r3, [r3, #8]
 801b552:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 801b556:	2b08      	cmp	r3, #8
 801b558:	d112      	bne.n	801b580 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801b55a:	4b82      	ldr	r3, [pc, #520]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b55c:	685b      	ldr	r3, [r3, #4]
 801b55e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b566:	d10b      	bne.n	801b580 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b568:	4b7e      	ldr	r3, [pc, #504]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b570:	2b00      	cmp	r3, #0
 801b572:	d05b      	beq.n	801b62c <HAL_RCC_OscConfig+0x108>
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	685b      	ldr	r3, [r3, #4]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d157      	bne.n	801b62c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801b57c:	2301      	movs	r3, #1
 801b57e:	e242      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	685b      	ldr	r3, [r3, #4]
 801b584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b588:	d106      	bne.n	801b598 <HAL_RCC_OscConfig+0x74>
 801b58a:	4b76      	ldr	r3, [pc, #472]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b58c:	681b      	ldr	r3, [r3, #0]
 801b58e:	4a75      	ldr	r2, [pc, #468]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b594:	6013      	str	r3, [r2, #0]
 801b596:	e01d      	b.n	801b5d4 <HAL_RCC_OscConfig+0xb0>
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	685b      	ldr	r3, [r3, #4]
 801b59c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801b5a0:	d10c      	bne.n	801b5bc <HAL_RCC_OscConfig+0x98>
 801b5a2:	4b70      	ldr	r3, [pc, #448]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	4a6f      	ldr	r2, [pc, #444]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b5a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b5ac:	6013      	str	r3, [r2, #0]
 801b5ae:	4b6d      	ldr	r3, [pc, #436]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	4a6c      	ldr	r2, [pc, #432]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b5b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b5b8:	6013      	str	r3, [r2, #0]
 801b5ba:	e00b      	b.n	801b5d4 <HAL_RCC_OscConfig+0xb0>
 801b5bc:	4b69      	ldr	r3, [pc, #420]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	4a68      	ldr	r2, [pc, #416]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b5c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b5c6:	6013      	str	r3, [r2, #0]
 801b5c8:	4b66      	ldr	r3, [pc, #408]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	4a65      	ldr	r2, [pc, #404]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b5ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b5d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	685b      	ldr	r3, [r3, #4]
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d013      	beq.n	801b604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b5dc:	f7fe fcf4 	bl	8019fc8 <HAL_GetTick>
 801b5e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b5e2:	e008      	b.n	801b5f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b5e4:	f7fe fcf0 	bl	8019fc8 <HAL_GetTick>
 801b5e8:	4602      	mov	r2, r0
 801b5ea:	693b      	ldr	r3, [r7, #16]
 801b5ec:	1ad3      	subs	r3, r2, r3
 801b5ee:	2b64      	cmp	r3, #100	; 0x64
 801b5f0:	d901      	bls.n	801b5f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801b5f2:	2303      	movs	r3, #3
 801b5f4:	e207      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b5f6:	4b5b      	ldr	r3, [pc, #364]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d0f0      	beq.n	801b5e4 <HAL_RCC_OscConfig+0xc0>
 801b602:	e014      	b.n	801b62e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b604:	f7fe fce0 	bl	8019fc8 <HAL_GetTick>
 801b608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801b60a:	e008      	b.n	801b61e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b60c:	f7fe fcdc 	bl	8019fc8 <HAL_GetTick>
 801b610:	4602      	mov	r2, r0
 801b612:	693b      	ldr	r3, [r7, #16]
 801b614:	1ad3      	subs	r3, r2, r3
 801b616:	2b64      	cmp	r3, #100	; 0x64
 801b618:	d901      	bls.n	801b61e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b61a:	2303      	movs	r3, #3
 801b61c:	e1f3      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801b61e:	4b51      	ldr	r3, [pc, #324]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b626:	2b00      	cmp	r3, #0
 801b628:	d1f0      	bne.n	801b60c <HAL_RCC_OscConfig+0xe8>
 801b62a:	e000      	b.n	801b62e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b62c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	f003 0302 	and.w	r3, r3, #2
 801b636:	2b00      	cmp	r3, #0
 801b638:	d063      	beq.n	801b702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 801b63a:	4b4a      	ldr	r3, [pc, #296]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b63c:	689b      	ldr	r3, [r3, #8]
 801b63e:	f003 030c 	and.w	r3, r3, #12
 801b642:	2b00      	cmp	r3, #0
 801b644:	d00b      	beq.n	801b65e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801b646:	4b47      	ldr	r3, [pc, #284]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b648:	689b      	ldr	r3, [r3, #8]
 801b64a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 801b64e:	2b08      	cmp	r3, #8
 801b650:	d11c      	bne.n	801b68c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801b652:	4b44      	ldr	r3, [pc, #272]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b654:	685b      	ldr	r3, [r3, #4]
 801b656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	d116      	bne.n	801b68c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801b65e:	4b41      	ldr	r3, [pc, #260]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	f003 0302 	and.w	r3, r3, #2
 801b666:	2b00      	cmp	r3, #0
 801b668:	d005      	beq.n	801b676 <HAL_RCC_OscConfig+0x152>
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	68db      	ldr	r3, [r3, #12]
 801b66e:	2b01      	cmp	r3, #1
 801b670:	d001      	beq.n	801b676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801b672:	2301      	movs	r3, #1
 801b674:	e1c7      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b676:	4b3b      	ldr	r3, [pc, #236]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	691b      	ldr	r3, [r3, #16]
 801b682:	00db      	lsls	r3, r3, #3
 801b684:	4937      	ldr	r1, [pc, #220]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b686:	4313      	orrs	r3, r2
 801b688:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801b68a:	e03a      	b.n	801b702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	68db      	ldr	r3, [r3, #12]
 801b690:	2b00      	cmp	r3, #0
 801b692:	d020      	beq.n	801b6d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801b694:	4b34      	ldr	r3, [pc, #208]	; (801b768 <HAL_RCC_OscConfig+0x244>)
 801b696:	2201      	movs	r2, #1
 801b698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b69a:	f7fe fc95 	bl	8019fc8 <HAL_GetTick>
 801b69e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b6a0:	e008      	b.n	801b6b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b6a2:	f7fe fc91 	bl	8019fc8 <HAL_GetTick>
 801b6a6:	4602      	mov	r2, r0
 801b6a8:	693b      	ldr	r3, [r7, #16]
 801b6aa:	1ad3      	subs	r3, r2, r3
 801b6ac:	2b02      	cmp	r3, #2
 801b6ae:	d901      	bls.n	801b6b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801b6b0:	2303      	movs	r3, #3
 801b6b2:	e1a8      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b6b4:	4b2b      	ldr	r3, [pc, #172]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	f003 0302 	and.w	r3, r3, #2
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d0f0      	beq.n	801b6a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b6c0:	4b28      	ldr	r3, [pc, #160]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	691b      	ldr	r3, [r3, #16]
 801b6cc:	00db      	lsls	r3, r3, #3
 801b6ce:	4925      	ldr	r1, [pc, #148]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b6d0:	4313      	orrs	r3, r2
 801b6d2:	600b      	str	r3, [r1, #0]
 801b6d4:	e015      	b.n	801b702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b6d6:	4b24      	ldr	r3, [pc, #144]	; (801b768 <HAL_RCC_OscConfig+0x244>)
 801b6d8:	2200      	movs	r2, #0
 801b6da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b6dc:	f7fe fc74 	bl	8019fc8 <HAL_GetTick>
 801b6e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801b6e2:	e008      	b.n	801b6f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b6e4:	f7fe fc70 	bl	8019fc8 <HAL_GetTick>
 801b6e8:	4602      	mov	r2, r0
 801b6ea:	693b      	ldr	r3, [r7, #16]
 801b6ec:	1ad3      	subs	r3, r2, r3
 801b6ee:	2b02      	cmp	r3, #2
 801b6f0:	d901      	bls.n	801b6f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801b6f2:	2303      	movs	r3, #3
 801b6f4:	e187      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801b6f6:	4b1b      	ldr	r3, [pc, #108]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	f003 0302 	and.w	r3, r3, #2
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d1f0      	bne.n	801b6e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	f003 0308 	and.w	r3, r3, #8
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	d036      	beq.n	801b77c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	695b      	ldr	r3, [r3, #20]
 801b712:	2b00      	cmp	r3, #0
 801b714:	d016      	beq.n	801b744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b716:	4b15      	ldr	r3, [pc, #84]	; (801b76c <HAL_RCC_OscConfig+0x248>)
 801b718:	2201      	movs	r2, #1
 801b71a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b71c:	f7fe fc54 	bl	8019fc8 <HAL_GetTick>
 801b720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801b722:	e008      	b.n	801b736 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b724:	f7fe fc50 	bl	8019fc8 <HAL_GetTick>
 801b728:	4602      	mov	r2, r0
 801b72a:	693b      	ldr	r3, [r7, #16]
 801b72c:	1ad3      	subs	r3, r2, r3
 801b72e:	2b02      	cmp	r3, #2
 801b730:	d901      	bls.n	801b736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801b732:	2303      	movs	r3, #3
 801b734:	e167      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801b736:	4b0b      	ldr	r3, [pc, #44]	; (801b764 <HAL_RCC_OscConfig+0x240>)
 801b738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b73a:	f003 0302 	and.w	r3, r3, #2
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d0f0      	beq.n	801b724 <HAL_RCC_OscConfig+0x200>
 801b742:	e01b      	b.n	801b77c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b744:	4b09      	ldr	r3, [pc, #36]	; (801b76c <HAL_RCC_OscConfig+0x248>)
 801b746:	2200      	movs	r2, #0
 801b748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b74a:	f7fe fc3d 	bl	8019fc8 <HAL_GetTick>
 801b74e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801b750:	e00e      	b.n	801b770 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b752:	f7fe fc39 	bl	8019fc8 <HAL_GetTick>
 801b756:	4602      	mov	r2, r0
 801b758:	693b      	ldr	r3, [r7, #16]
 801b75a:	1ad3      	subs	r3, r2, r3
 801b75c:	2b02      	cmp	r3, #2
 801b75e:	d907      	bls.n	801b770 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801b760:	2303      	movs	r3, #3
 801b762:	e150      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
 801b764:	40023800 	.word	0x40023800
 801b768:	42470000 	.word	0x42470000
 801b76c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801b770:	4b88      	ldr	r3, [pc, #544]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b774:	f003 0302 	and.w	r3, r3, #2
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d1ea      	bne.n	801b752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b77c:	687b      	ldr	r3, [r7, #4]
 801b77e:	681b      	ldr	r3, [r3, #0]
 801b780:	f003 0304 	and.w	r3, r3, #4
 801b784:	2b00      	cmp	r3, #0
 801b786:	f000 8097 	beq.w	801b8b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b78a:	2300      	movs	r3, #0
 801b78c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b78e:	4b81      	ldr	r3, [pc, #516]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b796:	2b00      	cmp	r3, #0
 801b798:	d10f      	bne.n	801b7ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b79a:	2300      	movs	r3, #0
 801b79c:	60bb      	str	r3, [r7, #8]
 801b79e:	4b7d      	ldr	r3, [pc, #500]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7a2:	4a7c      	ldr	r2, [pc, #496]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b7a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b7a8:	6413      	str	r3, [r2, #64]	; 0x40
 801b7aa:	4b7a      	ldr	r3, [pc, #488]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b7b2:	60bb      	str	r3, [r7, #8]
 801b7b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801b7b6:	2301      	movs	r3, #1
 801b7b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b7ba:	4b77      	ldr	r3, [pc, #476]	; (801b998 <HAL_RCC_OscConfig+0x474>)
 801b7bc:	681b      	ldr	r3, [r3, #0]
 801b7be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d118      	bne.n	801b7f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b7c6:	4b74      	ldr	r3, [pc, #464]	; (801b998 <HAL_RCC_OscConfig+0x474>)
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	4a73      	ldr	r2, [pc, #460]	; (801b998 <HAL_RCC_OscConfig+0x474>)
 801b7cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b7d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b7d2:	f7fe fbf9 	bl	8019fc8 <HAL_GetTick>
 801b7d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b7d8:	e008      	b.n	801b7ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b7da:	f7fe fbf5 	bl	8019fc8 <HAL_GetTick>
 801b7de:	4602      	mov	r2, r0
 801b7e0:	693b      	ldr	r3, [r7, #16]
 801b7e2:	1ad3      	subs	r3, r2, r3
 801b7e4:	2b02      	cmp	r3, #2
 801b7e6:	d901      	bls.n	801b7ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801b7e8:	2303      	movs	r3, #3
 801b7ea:	e10c      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b7ec:	4b6a      	ldr	r3, [pc, #424]	; (801b998 <HAL_RCC_OscConfig+0x474>)
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d0f0      	beq.n	801b7da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	689b      	ldr	r3, [r3, #8]
 801b7fc:	2b01      	cmp	r3, #1
 801b7fe:	d106      	bne.n	801b80e <HAL_RCC_OscConfig+0x2ea>
 801b800:	4b64      	ldr	r3, [pc, #400]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b804:	4a63      	ldr	r2, [pc, #396]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b806:	f043 0301 	orr.w	r3, r3, #1
 801b80a:	6713      	str	r3, [r2, #112]	; 0x70
 801b80c:	e01c      	b.n	801b848 <HAL_RCC_OscConfig+0x324>
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	689b      	ldr	r3, [r3, #8]
 801b812:	2b05      	cmp	r3, #5
 801b814:	d10c      	bne.n	801b830 <HAL_RCC_OscConfig+0x30c>
 801b816:	4b5f      	ldr	r3, [pc, #380]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b81a:	4a5e      	ldr	r2, [pc, #376]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b81c:	f043 0304 	orr.w	r3, r3, #4
 801b820:	6713      	str	r3, [r2, #112]	; 0x70
 801b822:	4b5c      	ldr	r3, [pc, #368]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b826:	4a5b      	ldr	r2, [pc, #364]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b828:	f043 0301 	orr.w	r3, r3, #1
 801b82c:	6713      	str	r3, [r2, #112]	; 0x70
 801b82e:	e00b      	b.n	801b848 <HAL_RCC_OscConfig+0x324>
 801b830:	4b58      	ldr	r3, [pc, #352]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b834:	4a57      	ldr	r2, [pc, #348]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b836:	f023 0301 	bic.w	r3, r3, #1
 801b83a:	6713      	str	r3, [r2, #112]	; 0x70
 801b83c:	4b55      	ldr	r3, [pc, #340]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b840:	4a54      	ldr	r2, [pc, #336]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b842:	f023 0304 	bic.w	r3, r3, #4
 801b846:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	689b      	ldr	r3, [r3, #8]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d015      	beq.n	801b87c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b850:	f7fe fbba 	bl	8019fc8 <HAL_GetTick>
 801b854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b856:	e00a      	b.n	801b86e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b858:	f7fe fbb6 	bl	8019fc8 <HAL_GetTick>
 801b85c:	4602      	mov	r2, r0
 801b85e:	693b      	ldr	r3, [r7, #16]
 801b860:	1ad3      	subs	r3, r2, r3
 801b862:	f241 3288 	movw	r2, #5000	; 0x1388
 801b866:	4293      	cmp	r3, r2
 801b868:	d901      	bls.n	801b86e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801b86a:	2303      	movs	r3, #3
 801b86c:	e0cb      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b86e:	4b49      	ldr	r3, [pc, #292]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b872:	f003 0302 	and.w	r3, r3, #2
 801b876:	2b00      	cmp	r3, #0
 801b878:	d0ee      	beq.n	801b858 <HAL_RCC_OscConfig+0x334>
 801b87a:	e014      	b.n	801b8a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b87c:	f7fe fba4 	bl	8019fc8 <HAL_GetTick>
 801b880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801b882:	e00a      	b.n	801b89a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b884:	f7fe fba0 	bl	8019fc8 <HAL_GetTick>
 801b888:	4602      	mov	r2, r0
 801b88a:	693b      	ldr	r3, [r7, #16]
 801b88c:	1ad3      	subs	r3, r2, r3
 801b88e:	f241 3288 	movw	r2, #5000	; 0x1388
 801b892:	4293      	cmp	r3, r2
 801b894:	d901      	bls.n	801b89a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801b896:	2303      	movs	r3, #3
 801b898:	e0b5      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801b89a:	4b3e      	ldr	r3, [pc, #248]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b89e:	f003 0302 	and.w	r3, r3, #2
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d1ee      	bne.n	801b884 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801b8a6:	7dfb      	ldrb	r3, [r7, #23]
 801b8a8:	2b01      	cmp	r3, #1
 801b8aa:	d105      	bne.n	801b8b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b8ac:	4b39      	ldr	r3, [pc, #228]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b8ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b8b0:	4a38      	ldr	r2, [pc, #224]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b8b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801b8b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	699b      	ldr	r3, [r3, #24]
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	f000 80a1 	beq.w	801ba04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801b8c2:	4b34      	ldr	r3, [pc, #208]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b8c4:	689b      	ldr	r3, [r3, #8]
 801b8c6:	f003 030c 	and.w	r3, r3, #12
 801b8ca:	2b08      	cmp	r3, #8
 801b8cc:	d05c      	beq.n	801b988 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	699b      	ldr	r3, [r3, #24]
 801b8d2:	2b02      	cmp	r3, #2
 801b8d4:	d141      	bne.n	801b95a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b8d6:	4b31      	ldr	r3, [pc, #196]	; (801b99c <HAL_RCC_OscConfig+0x478>)
 801b8d8:	2200      	movs	r2, #0
 801b8da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b8dc:	f7fe fb74 	bl	8019fc8 <HAL_GetTick>
 801b8e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b8e2:	e008      	b.n	801b8f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b8e4:	f7fe fb70 	bl	8019fc8 <HAL_GetTick>
 801b8e8:	4602      	mov	r2, r0
 801b8ea:	693b      	ldr	r3, [r7, #16]
 801b8ec:	1ad3      	subs	r3, r2, r3
 801b8ee:	2b02      	cmp	r3, #2
 801b8f0:	d901      	bls.n	801b8f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801b8f2:	2303      	movs	r3, #3
 801b8f4:	e087      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b8f6:	4b27      	ldr	r3, [pc, #156]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d1f0      	bne.n	801b8e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	69da      	ldr	r2, [r3, #28]
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	6a1b      	ldr	r3, [r3, #32]
 801b90a:	431a      	orrs	r2, r3
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b910:	019b      	lsls	r3, r3, #6
 801b912:	431a      	orrs	r2, r3
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b918:	085b      	lsrs	r3, r3, #1
 801b91a:	3b01      	subs	r3, #1
 801b91c:	041b      	lsls	r3, r3, #16
 801b91e:	431a      	orrs	r2, r3
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b924:	061b      	lsls	r3, r3, #24
 801b926:	491b      	ldr	r1, [pc, #108]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b928:	4313      	orrs	r3, r2
 801b92a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b92c:	4b1b      	ldr	r3, [pc, #108]	; (801b99c <HAL_RCC_OscConfig+0x478>)
 801b92e:	2201      	movs	r2, #1
 801b930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b932:	f7fe fb49 	bl	8019fc8 <HAL_GetTick>
 801b936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b938:	e008      	b.n	801b94c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b93a:	f7fe fb45 	bl	8019fc8 <HAL_GetTick>
 801b93e:	4602      	mov	r2, r0
 801b940:	693b      	ldr	r3, [r7, #16]
 801b942:	1ad3      	subs	r3, r2, r3
 801b944:	2b02      	cmp	r3, #2
 801b946:	d901      	bls.n	801b94c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801b948:	2303      	movs	r3, #3
 801b94a:	e05c      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b94c:	4b11      	ldr	r3, [pc, #68]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b954:	2b00      	cmp	r3, #0
 801b956:	d0f0      	beq.n	801b93a <HAL_RCC_OscConfig+0x416>
 801b958:	e054      	b.n	801ba04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b95a:	4b10      	ldr	r3, [pc, #64]	; (801b99c <HAL_RCC_OscConfig+0x478>)
 801b95c:	2200      	movs	r2, #0
 801b95e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b960:	f7fe fb32 	bl	8019fc8 <HAL_GetTick>
 801b964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b966:	e008      	b.n	801b97a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b968:	f7fe fb2e 	bl	8019fc8 <HAL_GetTick>
 801b96c:	4602      	mov	r2, r0
 801b96e:	693b      	ldr	r3, [r7, #16]
 801b970:	1ad3      	subs	r3, r2, r3
 801b972:	2b02      	cmp	r3, #2
 801b974:	d901      	bls.n	801b97a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801b976:	2303      	movs	r3, #3
 801b978:	e045      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b97a:	4b06      	ldr	r3, [pc, #24]	; (801b994 <HAL_RCC_OscConfig+0x470>)
 801b97c:	681b      	ldr	r3, [r3, #0]
 801b97e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b982:	2b00      	cmp	r3, #0
 801b984:	d1f0      	bne.n	801b968 <HAL_RCC_OscConfig+0x444>
 801b986:	e03d      	b.n	801ba04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	699b      	ldr	r3, [r3, #24]
 801b98c:	2b01      	cmp	r3, #1
 801b98e:	d107      	bne.n	801b9a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801b990:	2301      	movs	r3, #1
 801b992:	e038      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
 801b994:	40023800 	.word	0x40023800
 801b998:	40007000 	.word	0x40007000
 801b99c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801b9a0:	4b1b      	ldr	r3, [pc, #108]	; (801ba10 <HAL_RCC_OscConfig+0x4ec>)
 801b9a2:	685b      	ldr	r3, [r3, #4]
 801b9a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	699b      	ldr	r3, [r3, #24]
 801b9aa:	2b01      	cmp	r3, #1
 801b9ac:	d028      	beq.n	801ba00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b9b8:	429a      	cmp	r2, r3
 801b9ba:	d121      	bne.n	801ba00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b9c6:	429a      	cmp	r2, r3
 801b9c8:	d11a      	bne.n	801ba00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801b9ca:	68fa      	ldr	r2, [r7, #12]
 801b9cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801b9d0:	4013      	ands	r3, r2
 801b9d2:	687a      	ldr	r2, [r7, #4]
 801b9d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801b9d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801b9d8:	4293      	cmp	r3, r2
 801b9da:	d111      	bne.n	801ba00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b9e6:	085b      	lsrs	r3, r3, #1
 801b9e8:	3b01      	subs	r3, #1
 801b9ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801b9ec:	429a      	cmp	r2, r3
 801b9ee:	d107      	bne.n	801ba00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801b9fc:	429a      	cmp	r2, r3
 801b9fe:	d001      	beq.n	801ba04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 801ba00:	2301      	movs	r3, #1
 801ba02:	e000      	b.n	801ba06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801ba04:	2300      	movs	r3, #0
}
 801ba06:	4618      	mov	r0, r3
 801ba08:	3718      	adds	r7, #24
 801ba0a:	46bd      	mov	sp, r7
 801ba0c:	bd80      	pop	{r7, pc}
 801ba0e:	bf00      	nop
 801ba10:	40023800 	.word	0x40023800

0801ba14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ba14:	b580      	push	{r7, lr}
 801ba16:	b084      	sub	sp, #16
 801ba18:	af00      	add	r7, sp, #0
 801ba1a:	6078      	str	r0, [r7, #4]
 801ba1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d101      	bne.n	801ba28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ba24:	2301      	movs	r3, #1
 801ba26:	e0cc      	b.n	801bbc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801ba28:	4b68      	ldr	r3, [pc, #416]	; (801bbcc <HAL_RCC_ClockConfig+0x1b8>)
 801ba2a:	681b      	ldr	r3, [r3, #0]
 801ba2c:	f003 0307 	and.w	r3, r3, #7
 801ba30:	683a      	ldr	r2, [r7, #0]
 801ba32:	429a      	cmp	r2, r3
 801ba34:	d90c      	bls.n	801ba50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ba36:	4b65      	ldr	r3, [pc, #404]	; (801bbcc <HAL_RCC_ClockConfig+0x1b8>)
 801ba38:	683a      	ldr	r2, [r7, #0]
 801ba3a:	b2d2      	uxtb	r2, r2
 801ba3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ba3e:	4b63      	ldr	r3, [pc, #396]	; (801bbcc <HAL_RCC_ClockConfig+0x1b8>)
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	f003 0307 	and.w	r3, r3, #7
 801ba46:	683a      	ldr	r2, [r7, #0]
 801ba48:	429a      	cmp	r2, r3
 801ba4a:	d001      	beq.n	801ba50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801ba4c:	2301      	movs	r3, #1
 801ba4e:	e0b8      	b.n	801bbc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	f003 0302 	and.w	r3, r3, #2
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d020      	beq.n	801ba9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	f003 0304 	and.w	r3, r3, #4
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d005      	beq.n	801ba74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801ba68:	4b59      	ldr	r3, [pc, #356]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801ba6a:	689b      	ldr	r3, [r3, #8]
 801ba6c:	4a58      	ldr	r2, [pc, #352]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801ba6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801ba72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	f003 0308 	and.w	r3, r3, #8
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d005      	beq.n	801ba8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801ba80:	4b53      	ldr	r3, [pc, #332]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801ba82:	689b      	ldr	r3, [r3, #8]
 801ba84:	4a52      	ldr	r2, [pc, #328]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801ba86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801ba8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ba8c:	4b50      	ldr	r3, [pc, #320]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801ba8e:	689b      	ldr	r3, [r3, #8]
 801ba90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	689b      	ldr	r3, [r3, #8]
 801ba98:	494d      	ldr	r1, [pc, #308]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801ba9a:	4313      	orrs	r3, r2
 801ba9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	f003 0301 	and.w	r3, r3, #1
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d044      	beq.n	801bb34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	685b      	ldr	r3, [r3, #4]
 801baae:	2b01      	cmp	r3, #1
 801bab0:	d107      	bne.n	801bac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bab2:	4b47      	ldr	r3, [pc, #284]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801baba:	2b00      	cmp	r3, #0
 801babc:	d119      	bne.n	801baf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801babe:	2301      	movs	r3, #1
 801bac0:	e07f      	b.n	801bbc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	685b      	ldr	r3, [r3, #4]
 801bac6:	2b02      	cmp	r3, #2
 801bac8:	d003      	beq.n	801bad2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801bace:	2b03      	cmp	r3, #3
 801bad0:	d107      	bne.n	801bae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bad2:	4b3f      	ldr	r3, [pc, #252]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801bad4:	681b      	ldr	r3, [r3, #0]
 801bad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bada:	2b00      	cmp	r3, #0
 801badc:	d109      	bne.n	801baf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801bade:	2301      	movs	r3, #1
 801bae0:	e06f      	b.n	801bbc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bae2:	4b3b      	ldr	r3, [pc, #236]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	f003 0302 	and.w	r3, r3, #2
 801baea:	2b00      	cmp	r3, #0
 801baec:	d101      	bne.n	801baf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801baee:	2301      	movs	r3, #1
 801baf0:	e067      	b.n	801bbc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801baf2:	4b37      	ldr	r3, [pc, #220]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801baf4:	689b      	ldr	r3, [r3, #8]
 801baf6:	f023 0203 	bic.w	r2, r3, #3
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	685b      	ldr	r3, [r3, #4]
 801bafe:	4934      	ldr	r1, [pc, #208]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801bb00:	4313      	orrs	r3, r2
 801bb02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801bb04:	f7fe fa60 	bl	8019fc8 <HAL_GetTick>
 801bb08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801bb0a:	e00a      	b.n	801bb22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb0c:	f7fe fa5c 	bl	8019fc8 <HAL_GetTick>
 801bb10:	4602      	mov	r2, r0
 801bb12:	68fb      	ldr	r3, [r7, #12]
 801bb14:	1ad3      	subs	r3, r2, r3
 801bb16:	f241 3288 	movw	r2, #5000	; 0x1388
 801bb1a:	4293      	cmp	r3, r2
 801bb1c:	d901      	bls.n	801bb22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801bb1e:	2303      	movs	r3, #3
 801bb20:	e04f      	b.n	801bbc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801bb22:	4b2b      	ldr	r3, [pc, #172]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801bb24:	689b      	ldr	r3, [r3, #8]
 801bb26:	f003 020c 	and.w	r2, r3, #12
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	685b      	ldr	r3, [r3, #4]
 801bb2e:	009b      	lsls	r3, r3, #2
 801bb30:	429a      	cmp	r2, r3
 801bb32:	d1eb      	bne.n	801bb0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801bb34:	4b25      	ldr	r3, [pc, #148]	; (801bbcc <HAL_RCC_ClockConfig+0x1b8>)
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	f003 0307 	and.w	r3, r3, #7
 801bb3c:	683a      	ldr	r2, [r7, #0]
 801bb3e:	429a      	cmp	r2, r3
 801bb40:	d20c      	bcs.n	801bb5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bb42:	4b22      	ldr	r3, [pc, #136]	; (801bbcc <HAL_RCC_ClockConfig+0x1b8>)
 801bb44:	683a      	ldr	r2, [r7, #0]
 801bb46:	b2d2      	uxtb	r2, r2
 801bb48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bb4a:	4b20      	ldr	r3, [pc, #128]	; (801bbcc <HAL_RCC_ClockConfig+0x1b8>)
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	f003 0307 	and.w	r3, r3, #7
 801bb52:	683a      	ldr	r2, [r7, #0]
 801bb54:	429a      	cmp	r2, r3
 801bb56:	d001      	beq.n	801bb5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801bb58:	2301      	movs	r3, #1
 801bb5a:	e032      	b.n	801bbc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	f003 0304 	and.w	r3, r3, #4
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d008      	beq.n	801bb7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801bb68:	4b19      	ldr	r3, [pc, #100]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801bb6a:	689b      	ldr	r3, [r3, #8]
 801bb6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	68db      	ldr	r3, [r3, #12]
 801bb74:	4916      	ldr	r1, [pc, #88]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801bb76:	4313      	orrs	r3, r2
 801bb78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	f003 0308 	and.w	r3, r3, #8
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d009      	beq.n	801bb9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801bb86:	4b12      	ldr	r3, [pc, #72]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801bb88:	689b      	ldr	r3, [r3, #8]
 801bb8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	691b      	ldr	r3, [r3, #16]
 801bb92:	00db      	lsls	r3, r3, #3
 801bb94:	490e      	ldr	r1, [pc, #56]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801bb96:	4313      	orrs	r3, r2
 801bb98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801bb9a:	f000 f821 	bl	801bbe0 <HAL_RCC_GetSysClockFreq>
 801bb9e:	4602      	mov	r2, r0
 801bba0:	4b0b      	ldr	r3, [pc, #44]	; (801bbd0 <HAL_RCC_ClockConfig+0x1bc>)
 801bba2:	689b      	ldr	r3, [r3, #8]
 801bba4:	091b      	lsrs	r3, r3, #4
 801bba6:	f003 030f 	and.w	r3, r3, #15
 801bbaa:	490a      	ldr	r1, [pc, #40]	; (801bbd4 <HAL_RCC_ClockConfig+0x1c0>)
 801bbac:	5ccb      	ldrb	r3, [r1, r3]
 801bbae:	fa22 f303 	lsr.w	r3, r2, r3
 801bbb2:	4a09      	ldr	r2, [pc, #36]	; (801bbd8 <HAL_RCC_ClockConfig+0x1c4>)
 801bbb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 801bbb6:	4b09      	ldr	r3, [pc, #36]	; (801bbdc <HAL_RCC_ClockConfig+0x1c8>)
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	4618      	mov	r0, r3
 801bbbc:	f7fe f9c0 	bl	8019f40 <HAL_InitTick>

  return HAL_OK;
 801bbc0:	2300      	movs	r3, #0
}
 801bbc2:	4618      	mov	r0, r3
 801bbc4:	3710      	adds	r7, #16
 801bbc6:	46bd      	mov	sp, r7
 801bbc8:	bd80      	pop	{r7, pc}
 801bbca:	bf00      	nop
 801bbcc:	40023c00 	.word	0x40023c00
 801bbd0:	40023800 	.word	0x40023800
 801bbd4:	0801e53c 	.word	0x0801e53c
 801bbd8:	20000000 	.word	0x20000000
 801bbdc:	20000048 	.word	0x20000048

0801bbe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bbe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bbe4:	b094      	sub	sp, #80	; 0x50
 801bbe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 801bbe8:	2300      	movs	r3, #0
 801bbea:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 801bbec:	2300      	movs	r3, #0
 801bbee:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 801bbf0:	2300      	movs	r3, #0
 801bbf2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801bbf4:	2300      	movs	r3, #0
 801bbf6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801bbf8:	4b79      	ldr	r3, [pc, #484]	; (801bde0 <HAL_RCC_GetSysClockFreq+0x200>)
 801bbfa:	689b      	ldr	r3, [r3, #8]
 801bbfc:	f003 030c 	and.w	r3, r3, #12
 801bc00:	2b08      	cmp	r3, #8
 801bc02:	d00d      	beq.n	801bc20 <HAL_RCC_GetSysClockFreq+0x40>
 801bc04:	2b08      	cmp	r3, #8
 801bc06:	f200 80e1 	bhi.w	801bdcc <HAL_RCC_GetSysClockFreq+0x1ec>
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d002      	beq.n	801bc14 <HAL_RCC_GetSysClockFreq+0x34>
 801bc0e:	2b04      	cmp	r3, #4
 801bc10:	d003      	beq.n	801bc1a <HAL_RCC_GetSysClockFreq+0x3a>
 801bc12:	e0db      	b.n	801bdcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801bc14:	4b73      	ldr	r3, [pc, #460]	; (801bde4 <HAL_RCC_GetSysClockFreq+0x204>)
 801bc16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801bc18:	e0db      	b.n	801bdd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801bc1a:	4b73      	ldr	r3, [pc, #460]	; (801bde8 <HAL_RCC_GetSysClockFreq+0x208>)
 801bc1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801bc1e:	e0d8      	b.n	801bdd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801bc20:	4b6f      	ldr	r3, [pc, #444]	; (801bde0 <HAL_RCC_GetSysClockFreq+0x200>)
 801bc22:	685b      	ldr	r3, [r3, #4]
 801bc24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bc28:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bc2a:	4b6d      	ldr	r3, [pc, #436]	; (801bde0 <HAL_RCC_GetSysClockFreq+0x200>)
 801bc2c:	685b      	ldr	r3, [r3, #4]
 801bc2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d063      	beq.n	801bcfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bc36:	4b6a      	ldr	r3, [pc, #424]	; (801bde0 <HAL_RCC_GetSysClockFreq+0x200>)
 801bc38:	685b      	ldr	r3, [r3, #4]
 801bc3a:	099b      	lsrs	r3, r3, #6
 801bc3c:	2200      	movs	r2, #0
 801bc3e:	63bb      	str	r3, [r7, #56]	; 0x38
 801bc40:	63fa      	str	r2, [r7, #60]	; 0x3c
 801bc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bc44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bc48:	633b      	str	r3, [r7, #48]	; 0x30
 801bc4a:	2300      	movs	r3, #0
 801bc4c:	637b      	str	r3, [r7, #52]	; 0x34
 801bc4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801bc52:	4622      	mov	r2, r4
 801bc54:	462b      	mov	r3, r5
 801bc56:	f04f 0000 	mov.w	r0, #0
 801bc5a:	f04f 0100 	mov.w	r1, #0
 801bc5e:	0159      	lsls	r1, r3, #5
 801bc60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801bc64:	0150      	lsls	r0, r2, #5
 801bc66:	4602      	mov	r2, r0
 801bc68:	460b      	mov	r3, r1
 801bc6a:	4621      	mov	r1, r4
 801bc6c:	1a51      	subs	r1, r2, r1
 801bc6e:	6139      	str	r1, [r7, #16]
 801bc70:	4629      	mov	r1, r5
 801bc72:	eb63 0301 	sbc.w	r3, r3, r1
 801bc76:	617b      	str	r3, [r7, #20]
 801bc78:	f04f 0200 	mov.w	r2, #0
 801bc7c:	f04f 0300 	mov.w	r3, #0
 801bc80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801bc84:	4659      	mov	r1, fp
 801bc86:	018b      	lsls	r3, r1, #6
 801bc88:	4651      	mov	r1, sl
 801bc8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801bc8e:	4651      	mov	r1, sl
 801bc90:	018a      	lsls	r2, r1, #6
 801bc92:	4651      	mov	r1, sl
 801bc94:	ebb2 0801 	subs.w	r8, r2, r1
 801bc98:	4659      	mov	r1, fp
 801bc9a:	eb63 0901 	sbc.w	r9, r3, r1
 801bc9e:	f04f 0200 	mov.w	r2, #0
 801bca2:	f04f 0300 	mov.w	r3, #0
 801bca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801bcaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801bcae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801bcb2:	4690      	mov	r8, r2
 801bcb4:	4699      	mov	r9, r3
 801bcb6:	4623      	mov	r3, r4
 801bcb8:	eb18 0303 	adds.w	r3, r8, r3
 801bcbc:	60bb      	str	r3, [r7, #8]
 801bcbe:	462b      	mov	r3, r5
 801bcc0:	eb49 0303 	adc.w	r3, r9, r3
 801bcc4:	60fb      	str	r3, [r7, #12]
 801bcc6:	f04f 0200 	mov.w	r2, #0
 801bcca:	f04f 0300 	mov.w	r3, #0
 801bcce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801bcd2:	4629      	mov	r1, r5
 801bcd4:	024b      	lsls	r3, r1, #9
 801bcd6:	4621      	mov	r1, r4
 801bcd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801bcdc:	4621      	mov	r1, r4
 801bcde:	024a      	lsls	r2, r1, #9
 801bce0:	4610      	mov	r0, r2
 801bce2:	4619      	mov	r1, r3
 801bce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bce6:	2200      	movs	r2, #0
 801bce8:	62bb      	str	r3, [r7, #40]	; 0x28
 801bcea:	62fa      	str	r2, [r7, #44]	; 0x2c
 801bcec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801bcf0:	f7e4 face 	bl	8000290 <__aeabi_uldivmod>
 801bcf4:	4602      	mov	r2, r0
 801bcf6:	460b      	mov	r3, r1
 801bcf8:	4613      	mov	r3, r2
 801bcfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 801bcfc:	e058      	b.n	801bdb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bcfe:	4b38      	ldr	r3, [pc, #224]	; (801bde0 <HAL_RCC_GetSysClockFreq+0x200>)
 801bd00:	685b      	ldr	r3, [r3, #4]
 801bd02:	099b      	lsrs	r3, r3, #6
 801bd04:	2200      	movs	r2, #0
 801bd06:	4618      	mov	r0, r3
 801bd08:	4611      	mov	r1, r2
 801bd0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801bd0e:	623b      	str	r3, [r7, #32]
 801bd10:	2300      	movs	r3, #0
 801bd12:	627b      	str	r3, [r7, #36]	; 0x24
 801bd14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801bd18:	4642      	mov	r2, r8
 801bd1a:	464b      	mov	r3, r9
 801bd1c:	f04f 0000 	mov.w	r0, #0
 801bd20:	f04f 0100 	mov.w	r1, #0
 801bd24:	0159      	lsls	r1, r3, #5
 801bd26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801bd2a:	0150      	lsls	r0, r2, #5
 801bd2c:	4602      	mov	r2, r0
 801bd2e:	460b      	mov	r3, r1
 801bd30:	4641      	mov	r1, r8
 801bd32:	ebb2 0a01 	subs.w	sl, r2, r1
 801bd36:	4649      	mov	r1, r9
 801bd38:	eb63 0b01 	sbc.w	fp, r3, r1
 801bd3c:	f04f 0200 	mov.w	r2, #0
 801bd40:	f04f 0300 	mov.w	r3, #0
 801bd44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801bd48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801bd4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801bd50:	ebb2 040a 	subs.w	r4, r2, sl
 801bd54:	eb63 050b 	sbc.w	r5, r3, fp
 801bd58:	f04f 0200 	mov.w	r2, #0
 801bd5c:	f04f 0300 	mov.w	r3, #0
 801bd60:	00eb      	lsls	r3, r5, #3
 801bd62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801bd66:	00e2      	lsls	r2, r4, #3
 801bd68:	4614      	mov	r4, r2
 801bd6a:	461d      	mov	r5, r3
 801bd6c:	4643      	mov	r3, r8
 801bd6e:	18e3      	adds	r3, r4, r3
 801bd70:	603b      	str	r3, [r7, #0]
 801bd72:	464b      	mov	r3, r9
 801bd74:	eb45 0303 	adc.w	r3, r5, r3
 801bd78:	607b      	str	r3, [r7, #4]
 801bd7a:	f04f 0200 	mov.w	r2, #0
 801bd7e:	f04f 0300 	mov.w	r3, #0
 801bd82:	e9d7 4500 	ldrd	r4, r5, [r7]
 801bd86:	4629      	mov	r1, r5
 801bd88:	028b      	lsls	r3, r1, #10
 801bd8a:	4621      	mov	r1, r4
 801bd8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801bd90:	4621      	mov	r1, r4
 801bd92:	028a      	lsls	r2, r1, #10
 801bd94:	4610      	mov	r0, r2
 801bd96:	4619      	mov	r1, r3
 801bd98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bd9a:	2200      	movs	r2, #0
 801bd9c:	61bb      	str	r3, [r7, #24]
 801bd9e:	61fa      	str	r2, [r7, #28]
 801bda0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801bda4:	f7e4 fa74 	bl	8000290 <__aeabi_uldivmod>
 801bda8:	4602      	mov	r2, r0
 801bdaa:	460b      	mov	r3, r1
 801bdac:	4613      	mov	r3, r2
 801bdae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 801bdb0:	4b0b      	ldr	r3, [pc, #44]	; (801bde0 <HAL_RCC_GetSysClockFreq+0x200>)
 801bdb2:	685b      	ldr	r3, [r3, #4]
 801bdb4:	0c1b      	lsrs	r3, r3, #16
 801bdb6:	f003 0303 	and.w	r3, r3, #3
 801bdba:	3301      	adds	r3, #1
 801bdbc:	005b      	lsls	r3, r3, #1
 801bdbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 801bdc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801bdc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bdc4:	fbb2 f3f3 	udiv	r3, r2, r3
 801bdc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801bdca:	e002      	b.n	801bdd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801bdcc:	4b05      	ldr	r3, [pc, #20]	; (801bde4 <HAL_RCC_GetSysClockFreq+0x204>)
 801bdce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801bdd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 801bdd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801bdd4:	4618      	mov	r0, r3
 801bdd6:	3750      	adds	r7, #80	; 0x50
 801bdd8:	46bd      	mov	sp, r7
 801bdda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801bdde:	bf00      	nop
 801bde0:	40023800 	.word	0x40023800
 801bde4:	00f42400 	.word	0x00f42400
 801bde8:	007a1200 	.word	0x007a1200

0801bdec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bdec:	b480      	push	{r7}
 801bdee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801bdf0:	4b03      	ldr	r3, [pc, #12]	; (801be00 <HAL_RCC_GetHCLKFreq+0x14>)
 801bdf2:	681b      	ldr	r3, [r3, #0]
}
 801bdf4:	4618      	mov	r0, r3
 801bdf6:	46bd      	mov	sp, r7
 801bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdfc:	4770      	bx	lr
 801bdfe:	bf00      	nop
 801be00:	20000000 	.word	0x20000000

0801be04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801be04:	b580      	push	{r7, lr}
 801be06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801be08:	f7ff fff0 	bl	801bdec <HAL_RCC_GetHCLKFreq>
 801be0c:	4602      	mov	r2, r0
 801be0e:	4b05      	ldr	r3, [pc, #20]	; (801be24 <HAL_RCC_GetPCLK1Freq+0x20>)
 801be10:	689b      	ldr	r3, [r3, #8]
 801be12:	0a9b      	lsrs	r3, r3, #10
 801be14:	f003 0307 	and.w	r3, r3, #7
 801be18:	4903      	ldr	r1, [pc, #12]	; (801be28 <HAL_RCC_GetPCLK1Freq+0x24>)
 801be1a:	5ccb      	ldrb	r3, [r1, r3]
 801be1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801be20:	4618      	mov	r0, r3
 801be22:	bd80      	pop	{r7, pc}
 801be24:	40023800 	.word	0x40023800
 801be28:	0801e54c 	.word	0x0801e54c

0801be2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801be2c:	b580      	push	{r7, lr}
 801be2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801be30:	f7ff ffdc 	bl	801bdec <HAL_RCC_GetHCLKFreq>
 801be34:	4602      	mov	r2, r0
 801be36:	4b05      	ldr	r3, [pc, #20]	; (801be4c <HAL_RCC_GetPCLK2Freq+0x20>)
 801be38:	689b      	ldr	r3, [r3, #8]
 801be3a:	0b5b      	lsrs	r3, r3, #13
 801be3c:	f003 0307 	and.w	r3, r3, #7
 801be40:	4903      	ldr	r1, [pc, #12]	; (801be50 <HAL_RCC_GetPCLK2Freq+0x24>)
 801be42:	5ccb      	ldrb	r3, [r1, r3]
 801be44:	fa22 f303 	lsr.w	r3, r2, r3
}
 801be48:	4618      	mov	r0, r3
 801be4a:	bd80      	pop	{r7, pc}
 801be4c:	40023800 	.word	0x40023800
 801be50:	0801e54c 	.word	0x0801e54c

0801be54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801be54:	b580      	push	{r7, lr}
 801be56:	b082      	sub	sp, #8
 801be58:	af00      	add	r7, sp, #0
 801be5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d101      	bne.n	801be66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801be62:	2301      	movs	r3, #1
 801be64:	e042      	b.n	801beec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801be6c:	b2db      	uxtb	r3, r3
 801be6e:	2b00      	cmp	r3, #0
 801be70:	d106      	bne.n	801be80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	2200      	movs	r2, #0
 801be76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801be7a:	6878      	ldr	r0, [r7, #4]
 801be7c:	f7e6 f9e8 	bl	8002250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	2224      	movs	r2, #36	; 0x24
 801be84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	68da      	ldr	r2, [r3, #12]
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801be96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801be98:	6878      	ldr	r0, [r7, #4]
 801be9a:	f000 f82b 	bl	801bef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	691a      	ldr	r2, [r3, #16]
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801beac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	695a      	ldr	r2, [r3, #20]
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801bebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	681b      	ldr	r3, [r3, #0]
 801bec2:	68da      	ldr	r2, [r3, #12]
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801becc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	2200      	movs	r2, #0
 801bed2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	2220      	movs	r2, #32
 801bed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	2220      	movs	r2, #32
 801bee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	2200      	movs	r2, #0
 801bee8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801beea:	2300      	movs	r3, #0
}
 801beec:	4618      	mov	r0, r3
 801beee:	3708      	adds	r7, #8
 801bef0:	46bd      	mov	sp, r7
 801bef2:	bd80      	pop	{r7, pc}

0801bef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801bef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bef8:	b0c0      	sub	sp, #256	; 0x100
 801befa:	af00      	add	r7, sp, #0
 801befc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801bf00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf04:	681b      	ldr	r3, [r3, #0]
 801bf06:	691b      	ldr	r3, [r3, #16]
 801bf08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801bf0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf10:	68d9      	ldr	r1, [r3, #12]
 801bf12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf16:	681a      	ldr	r2, [r3, #0]
 801bf18:	ea40 0301 	orr.w	r3, r0, r1
 801bf1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801bf1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf22:	689a      	ldr	r2, [r3, #8]
 801bf24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf28:	691b      	ldr	r3, [r3, #16]
 801bf2a:	431a      	orrs	r2, r3
 801bf2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf30:	695b      	ldr	r3, [r3, #20]
 801bf32:	431a      	orrs	r2, r3
 801bf34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf38:	69db      	ldr	r3, [r3, #28]
 801bf3a:	4313      	orrs	r3, r2
 801bf3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801bf40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	68db      	ldr	r3, [r3, #12]
 801bf48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801bf4c:	f021 010c 	bic.w	r1, r1, #12
 801bf50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf54:	681a      	ldr	r2, [r3, #0]
 801bf56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801bf5a:	430b      	orrs	r3, r1
 801bf5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801bf5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	695b      	ldr	r3, [r3, #20]
 801bf66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801bf6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf6e:	6999      	ldr	r1, [r3, #24]
 801bf70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf74:	681a      	ldr	r2, [r3, #0]
 801bf76:	ea40 0301 	orr.w	r3, r0, r1
 801bf7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801bf7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf80:	681a      	ldr	r2, [r3, #0]
 801bf82:	4b8f      	ldr	r3, [pc, #572]	; (801c1c0 <UART_SetConfig+0x2cc>)
 801bf84:	429a      	cmp	r2, r3
 801bf86:	d005      	beq.n	801bf94 <UART_SetConfig+0xa0>
 801bf88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf8c:	681a      	ldr	r2, [r3, #0]
 801bf8e:	4b8d      	ldr	r3, [pc, #564]	; (801c1c4 <UART_SetConfig+0x2d0>)
 801bf90:	429a      	cmp	r2, r3
 801bf92:	d104      	bne.n	801bf9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801bf94:	f7ff ff4a 	bl	801be2c <HAL_RCC_GetPCLK2Freq>
 801bf98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801bf9c:	e003      	b.n	801bfa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801bf9e:	f7ff ff31 	bl	801be04 <HAL_RCC_GetPCLK1Freq>
 801bfa2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801bfa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bfaa:	69db      	ldr	r3, [r3, #28]
 801bfac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bfb0:	f040 810c 	bne.w	801c1cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801bfb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801bfb8:	2200      	movs	r2, #0
 801bfba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801bfbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801bfc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801bfc6:	4622      	mov	r2, r4
 801bfc8:	462b      	mov	r3, r5
 801bfca:	1891      	adds	r1, r2, r2
 801bfcc:	65b9      	str	r1, [r7, #88]	; 0x58
 801bfce:	415b      	adcs	r3, r3
 801bfd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bfd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801bfd6:	4621      	mov	r1, r4
 801bfd8:	eb12 0801 	adds.w	r8, r2, r1
 801bfdc:	4629      	mov	r1, r5
 801bfde:	eb43 0901 	adc.w	r9, r3, r1
 801bfe2:	f04f 0200 	mov.w	r2, #0
 801bfe6:	f04f 0300 	mov.w	r3, #0
 801bfea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801bfee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801bff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801bff6:	4690      	mov	r8, r2
 801bff8:	4699      	mov	r9, r3
 801bffa:	4623      	mov	r3, r4
 801bffc:	eb18 0303 	adds.w	r3, r8, r3
 801c000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c004:	462b      	mov	r3, r5
 801c006:	eb49 0303 	adc.w	r3, r9, r3
 801c00a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801c00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c012:	685b      	ldr	r3, [r3, #4]
 801c014:	2200      	movs	r2, #0
 801c016:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c01a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c01e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801c022:	460b      	mov	r3, r1
 801c024:	18db      	adds	r3, r3, r3
 801c026:	653b      	str	r3, [r7, #80]	; 0x50
 801c028:	4613      	mov	r3, r2
 801c02a:	eb42 0303 	adc.w	r3, r2, r3
 801c02e:	657b      	str	r3, [r7, #84]	; 0x54
 801c030:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801c034:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c038:	f7e4 f92a 	bl	8000290 <__aeabi_uldivmod>
 801c03c:	4602      	mov	r2, r0
 801c03e:	460b      	mov	r3, r1
 801c040:	4b61      	ldr	r3, [pc, #388]	; (801c1c8 <UART_SetConfig+0x2d4>)
 801c042:	fba3 2302 	umull	r2, r3, r3, r2
 801c046:	095b      	lsrs	r3, r3, #5
 801c048:	011c      	lsls	r4, r3, #4
 801c04a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c04e:	2200      	movs	r2, #0
 801c050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c054:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801c058:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801c05c:	4642      	mov	r2, r8
 801c05e:	464b      	mov	r3, r9
 801c060:	1891      	adds	r1, r2, r2
 801c062:	64b9      	str	r1, [r7, #72]	; 0x48
 801c064:	415b      	adcs	r3, r3
 801c066:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c068:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801c06c:	4641      	mov	r1, r8
 801c06e:	eb12 0a01 	adds.w	sl, r2, r1
 801c072:	4649      	mov	r1, r9
 801c074:	eb43 0b01 	adc.w	fp, r3, r1
 801c078:	f04f 0200 	mov.w	r2, #0
 801c07c:	f04f 0300 	mov.w	r3, #0
 801c080:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801c084:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801c088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c08c:	4692      	mov	sl, r2
 801c08e:	469b      	mov	fp, r3
 801c090:	4643      	mov	r3, r8
 801c092:	eb1a 0303 	adds.w	r3, sl, r3
 801c096:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c09a:	464b      	mov	r3, r9
 801c09c:	eb4b 0303 	adc.w	r3, fp, r3
 801c0a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c0a8:	685b      	ldr	r3, [r3, #4]
 801c0aa:	2200      	movs	r2, #0
 801c0ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c0b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801c0b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801c0b8:	460b      	mov	r3, r1
 801c0ba:	18db      	adds	r3, r3, r3
 801c0bc:	643b      	str	r3, [r7, #64]	; 0x40
 801c0be:	4613      	mov	r3, r2
 801c0c0:	eb42 0303 	adc.w	r3, r2, r3
 801c0c4:	647b      	str	r3, [r7, #68]	; 0x44
 801c0c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c0ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801c0ce:	f7e4 f8df 	bl	8000290 <__aeabi_uldivmod>
 801c0d2:	4602      	mov	r2, r0
 801c0d4:	460b      	mov	r3, r1
 801c0d6:	4611      	mov	r1, r2
 801c0d8:	4b3b      	ldr	r3, [pc, #236]	; (801c1c8 <UART_SetConfig+0x2d4>)
 801c0da:	fba3 2301 	umull	r2, r3, r3, r1
 801c0de:	095b      	lsrs	r3, r3, #5
 801c0e0:	2264      	movs	r2, #100	; 0x64
 801c0e2:	fb02 f303 	mul.w	r3, r2, r3
 801c0e6:	1acb      	subs	r3, r1, r3
 801c0e8:	00db      	lsls	r3, r3, #3
 801c0ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801c0ee:	4b36      	ldr	r3, [pc, #216]	; (801c1c8 <UART_SetConfig+0x2d4>)
 801c0f0:	fba3 2302 	umull	r2, r3, r3, r2
 801c0f4:	095b      	lsrs	r3, r3, #5
 801c0f6:	005b      	lsls	r3, r3, #1
 801c0f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801c0fc:	441c      	add	r4, r3
 801c0fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c102:	2200      	movs	r2, #0
 801c104:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c108:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801c10c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801c110:	4642      	mov	r2, r8
 801c112:	464b      	mov	r3, r9
 801c114:	1891      	adds	r1, r2, r2
 801c116:	63b9      	str	r1, [r7, #56]	; 0x38
 801c118:	415b      	adcs	r3, r3
 801c11a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c11c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801c120:	4641      	mov	r1, r8
 801c122:	1851      	adds	r1, r2, r1
 801c124:	6339      	str	r1, [r7, #48]	; 0x30
 801c126:	4649      	mov	r1, r9
 801c128:	414b      	adcs	r3, r1
 801c12a:	637b      	str	r3, [r7, #52]	; 0x34
 801c12c:	f04f 0200 	mov.w	r2, #0
 801c130:	f04f 0300 	mov.w	r3, #0
 801c134:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801c138:	4659      	mov	r1, fp
 801c13a:	00cb      	lsls	r3, r1, #3
 801c13c:	4651      	mov	r1, sl
 801c13e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801c142:	4651      	mov	r1, sl
 801c144:	00ca      	lsls	r2, r1, #3
 801c146:	4610      	mov	r0, r2
 801c148:	4619      	mov	r1, r3
 801c14a:	4603      	mov	r3, r0
 801c14c:	4642      	mov	r2, r8
 801c14e:	189b      	adds	r3, r3, r2
 801c150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c154:	464b      	mov	r3, r9
 801c156:	460a      	mov	r2, r1
 801c158:	eb42 0303 	adc.w	r3, r2, r3
 801c15c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c164:	685b      	ldr	r3, [r3, #4]
 801c166:	2200      	movs	r2, #0
 801c168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801c16c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801c170:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801c174:	460b      	mov	r3, r1
 801c176:	18db      	adds	r3, r3, r3
 801c178:	62bb      	str	r3, [r7, #40]	; 0x28
 801c17a:	4613      	mov	r3, r2
 801c17c:	eb42 0303 	adc.w	r3, r2, r3
 801c180:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801c186:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801c18a:	f7e4 f881 	bl	8000290 <__aeabi_uldivmod>
 801c18e:	4602      	mov	r2, r0
 801c190:	460b      	mov	r3, r1
 801c192:	4b0d      	ldr	r3, [pc, #52]	; (801c1c8 <UART_SetConfig+0x2d4>)
 801c194:	fba3 1302 	umull	r1, r3, r3, r2
 801c198:	095b      	lsrs	r3, r3, #5
 801c19a:	2164      	movs	r1, #100	; 0x64
 801c19c:	fb01 f303 	mul.w	r3, r1, r3
 801c1a0:	1ad3      	subs	r3, r2, r3
 801c1a2:	00db      	lsls	r3, r3, #3
 801c1a4:	3332      	adds	r3, #50	; 0x32
 801c1a6:	4a08      	ldr	r2, [pc, #32]	; (801c1c8 <UART_SetConfig+0x2d4>)
 801c1a8:	fba2 2303 	umull	r2, r3, r2, r3
 801c1ac:	095b      	lsrs	r3, r3, #5
 801c1ae:	f003 0207 	and.w	r2, r3, #7
 801c1b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c1b6:	681b      	ldr	r3, [r3, #0]
 801c1b8:	4422      	add	r2, r4
 801c1ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801c1bc:	e106      	b.n	801c3cc <UART_SetConfig+0x4d8>
 801c1be:	bf00      	nop
 801c1c0:	40011000 	.word	0x40011000
 801c1c4:	40011400 	.word	0x40011400
 801c1c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801c1cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c1d0:	2200      	movs	r2, #0
 801c1d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801c1d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801c1da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801c1de:	4642      	mov	r2, r8
 801c1e0:	464b      	mov	r3, r9
 801c1e2:	1891      	adds	r1, r2, r2
 801c1e4:	6239      	str	r1, [r7, #32]
 801c1e6:	415b      	adcs	r3, r3
 801c1e8:	627b      	str	r3, [r7, #36]	; 0x24
 801c1ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c1ee:	4641      	mov	r1, r8
 801c1f0:	1854      	adds	r4, r2, r1
 801c1f2:	4649      	mov	r1, r9
 801c1f4:	eb43 0501 	adc.w	r5, r3, r1
 801c1f8:	f04f 0200 	mov.w	r2, #0
 801c1fc:	f04f 0300 	mov.w	r3, #0
 801c200:	00eb      	lsls	r3, r5, #3
 801c202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801c206:	00e2      	lsls	r2, r4, #3
 801c208:	4614      	mov	r4, r2
 801c20a:	461d      	mov	r5, r3
 801c20c:	4643      	mov	r3, r8
 801c20e:	18e3      	adds	r3, r4, r3
 801c210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801c214:	464b      	mov	r3, r9
 801c216:	eb45 0303 	adc.w	r3, r5, r3
 801c21a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801c21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c222:	685b      	ldr	r3, [r3, #4]
 801c224:	2200      	movs	r2, #0
 801c226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c22a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801c22e:	f04f 0200 	mov.w	r2, #0
 801c232:	f04f 0300 	mov.w	r3, #0
 801c236:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801c23a:	4629      	mov	r1, r5
 801c23c:	008b      	lsls	r3, r1, #2
 801c23e:	4621      	mov	r1, r4
 801c240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801c244:	4621      	mov	r1, r4
 801c246:	008a      	lsls	r2, r1, #2
 801c248:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801c24c:	f7e4 f820 	bl	8000290 <__aeabi_uldivmod>
 801c250:	4602      	mov	r2, r0
 801c252:	460b      	mov	r3, r1
 801c254:	4b60      	ldr	r3, [pc, #384]	; (801c3d8 <UART_SetConfig+0x4e4>)
 801c256:	fba3 2302 	umull	r2, r3, r3, r2
 801c25a:	095b      	lsrs	r3, r3, #5
 801c25c:	011c      	lsls	r4, r3, #4
 801c25e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c262:	2200      	movs	r2, #0
 801c264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801c268:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801c26c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801c270:	4642      	mov	r2, r8
 801c272:	464b      	mov	r3, r9
 801c274:	1891      	adds	r1, r2, r2
 801c276:	61b9      	str	r1, [r7, #24]
 801c278:	415b      	adcs	r3, r3
 801c27a:	61fb      	str	r3, [r7, #28]
 801c27c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c280:	4641      	mov	r1, r8
 801c282:	1851      	adds	r1, r2, r1
 801c284:	6139      	str	r1, [r7, #16]
 801c286:	4649      	mov	r1, r9
 801c288:	414b      	adcs	r3, r1
 801c28a:	617b      	str	r3, [r7, #20]
 801c28c:	f04f 0200 	mov.w	r2, #0
 801c290:	f04f 0300 	mov.w	r3, #0
 801c294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801c298:	4659      	mov	r1, fp
 801c29a:	00cb      	lsls	r3, r1, #3
 801c29c:	4651      	mov	r1, sl
 801c29e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801c2a2:	4651      	mov	r1, sl
 801c2a4:	00ca      	lsls	r2, r1, #3
 801c2a6:	4610      	mov	r0, r2
 801c2a8:	4619      	mov	r1, r3
 801c2aa:	4603      	mov	r3, r0
 801c2ac:	4642      	mov	r2, r8
 801c2ae:	189b      	adds	r3, r3, r2
 801c2b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c2b4:	464b      	mov	r3, r9
 801c2b6:	460a      	mov	r2, r1
 801c2b8:	eb42 0303 	adc.w	r3, r2, r3
 801c2bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c2c4:	685b      	ldr	r3, [r3, #4]
 801c2c6:	2200      	movs	r2, #0
 801c2c8:	67bb      	str	r3, [r7, #120]	; 0x78
 801c2ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 801c2cc:	f04f 0200 	mov.w	r2, #0
 801c2d0:	f04f 0300 	mov.w	r3, #0
 801c2d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801c2d8:	4649      	mov	r1, r9
 801c2da:	008b      	lsls	r3, r1, #2
 801c2dc:	4641      	mov	r1, r8
 801c2de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801c2e2:	4641      	mov	r1, r8
 801c2e4:	008a      	lsls	r2, r1, #2
 801c2e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801c2ea:	f7e3 ffd1 	bl	8000290 <__aeabi_uldivmod>
 801c2ee:	4602      	mov	r2, r0
 801c2f0:	460b      	mov	r3, r1
 801c2f2:	4611      	mov	r1, r2
 801c2f4:	4b38      	ldr	r3, [pc, #224]	; (801c3d8 <UART_SetConfig+0x4e4>)
 801c2f6:	fba3 2301 	umull	r2, r3, r3, r1
 801c2fa:	095b      	lsrs	r3, r3, #5
 801c2fc:	2264      	movs	r2, #100	; 0x64
 801c2fe:	fb02 f303 	mul.w	r3, r2, r3
 801c302:	1acb      	subs	r3, r1, r3
 801c304:	011b      	lsls	r3, r3, #4
 801c306:	3332      	adds	r3, #50	; 0x32
 801c308:	4a33      	ldr	r2, [pc, #204]	; (801c3d8 <UART_SetConfig+0x4e4>)
 801c30a:	fba2 2303 	umull	r2, r3, r2, r3
 801c30e:	095b      	lsrs	r3, r3, #5
 801c310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c314:	441c      	add	r4, r3
 801c316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c31a:	2200      	movs	r2, #0
 801c31c:	673b      	str	r3, [r7, #112]	; 0x70
 801c31e:	677a      	str	r2, [r7, #116]	; 0x74
 801c320:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801c324:	4642      	mov	r2, r8
 801c326:	464b      	mov	r3, r9
 801c328:	1891      	adds	r1, r2, r2
 801c32a:	60b9      	str	r1, [r7, #8]
 801c32c:	415b      	adcs	r3, r3
 801c32e:	60fb      	str	r3, [r7, #12]
 801c330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c334:	4641      	mov	r1, r8
 801c336:	1851      	adds	r1, r2, r1
 801c338:	6039      	str	r1, [r7, #0]
 801c33a:	4649      	mov	r1, r9
 801c33c:	414b      	adcs	r3, r1
 801c33e:	607b      	str	r3, [r7, #4]
 801c340:	f04f 0200 	mov.w	r2, #0
 801c344:	f04f 0300 	mov.w	r3, #0
 801c348:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801c34c:	4659      	mov	r1, fp
 801c34e:	00cb      	lsls	r3, r1, #3
 801c350:	4651      	mov	r1, sl
 801c352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801c356:	4651      	mov	r1, sl
 801c358:	00ca      	lsls	r2, r1, #3
 801c35a:	4610      	mov	r0, r2
 801c35c:	4619      	mov	r1, r3
 801c35e:	4603      	mov	r3, r0
 801c360:	4642      	mov	r2, r8
 801c362:	189b      	adds	r3, r3, r2
 801c364:	66bb      	str	r3, [r7, #104]	; 0x68
 801c366:	464b      	mov	r3, r9
 801c368:	460a      	mov	r2, r1
 801c36a:	eb42 0303 	adc.w	r3, r2, r3
 801c36e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c374:	685b      	ldr	r3, [r3, #4]
 801c376:	2200      	movs	r2, #0
 801c378:	663b      	str	r3, [r7, #96]	; 0x60
 801c37a:	667a      	str	r2, [r7, #100]	; 0x64
 801c37c:	f04f 0200 	mov.w	r2, #0
 801c380:	f04f 0300 	mov.w	r3, #0
 801c384:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801c388:	4649      	mov	r1, r9
 801c38a:	008b      	lsls	r3, r1, #2
 801c38c:	4641      	mov	r1, r8
 801c38e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801c392:	4641      	mov	r1, r8
 801c394:	008a      	lsls	r2, r1, #2
 801c396:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801c39a:	f7e3 ff79 	bl	8000290 <__aeabi_uldivmod>
 801c39e:	4602      	mov	r2, r0
 801c3a0:	460b      	mov	r3, r1
 801c3a2:	4b0d      	ldr	r3, [pc, #52]	; (801c3d8 <UART_SetConfig+0x4e4>)
 801c3a4:	fba3 1302 	umull	r1, r3, r3, r2
 801c3a8:	095b      	lsrs	r3, r3, #5
 801c3aa:	2164      	movs	r1, #100	; 0x64
 801c3ac:	fb01 f303 	mul.w	r3, r1, r3
 801c3b0:	1ad3      	subs	r3, r2, r3
 801c3b2:	011b      	lsls	r3, r3, #4
 801c3b4:	3332      	adds	r3, #50	; 0x32
 801c3b6:	4a08      	ldr	r2, [pc, #32]	; (801c3d8 <UART_SetConfig+0x4e4>)
 801c3b8:	fba2 2303 	umull	r2, r3, r2, r3
 801c3bc:	095b      	lsrs	r3, r3, #5
 801c3be:	f003 020f 	and.w	r2, r3, #15
 801c3c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	4422      	add	r2, r4
 801c3ca:	609a      	str	r2, [r3, #8]
}
 801c3cc:	bf00      	nop
 801c3ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801c3d2:	46bd      	mov	sp, r7
 801c3d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c3d8:	51eb851f 	.word	0x51eb851f

0801c3dc <calloc>:
 801c3dc:	4b02      	ldr	r3, [pc, #8]	; (801c3e8 <calloc+0xc>)
 801c3de:	460a      	mov	r2, r1
 801c3e0:	4601      	mov	r1, r0
 801c3e2:	6818      	ldr	r0, [r3, #0]
 801c3e4:	f000 b802 	b.w	801c3ec <_calloc_r>
 801c3e8:	200000a8 	.word	0x200000a8

0801c3ec <_calloc_r>:
 801c3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c3ee:	fba1 2402 	umull	r2, r4, r1, r2
 801c3f2:	b94c      	cbnz	r4, 801c408 <_calloc_r+0x1c>
 801c3f4:	4611      	mov	r1, r2
 801c3f6:	9201      	str	r2, [sp, #4]
 801c3f8:	f000 f83e 	bl	801c478 <_malloc_r>
 801c3fc:	9a01      	ldr	r2, [sp, #4]
 801c3fe:	4605      	mov	r5, r0
 801c400:	b930      	cbnz	r0, 801c410 <_calloc_r+0x24>
 801c402:	4628      	mov	r0, r5
 801c404:	b003      	add	sp, #12
 801c406:	bd30      	pop	{r4, r5, pc}
 801c408:	220c      	movs	r2, #12
 801c40a:	6002      	str	r2, [r0, #0]
 801c40c:	2500      	movs	r5, #0
 801c40e:	e7f8      	b.n	801c402 <_calloc_r+0x16>
 801c410:	4621      	mov	r1, r4
 801c412:	f000 fed3 	bl	801d1bc <memset>
 801c416:	e7f4      	b.n	801c402 <_calloc_r+0x16>

0801c418 <malloc>:
 801c418:	4b02      	ldr	r3, [pc, #8]	; (801c424 <malloc+0xc>)
 801c41a:	4601      	mov	r1, r0
 801c41c:	6818      	ldr	r0, [r3, #0]
 801c41e:	f000 b82b 	b.w	801c478 <_malloc_r>
 801c422:	bf00      	nop
 801c424:	200000a8 	.word	0x200000a8

0801c428 <free>:
 801c428:	4b02      	ldr	r3, [pc, #8]	; (801c434 <free+0xc>)
 801c42a:	4601      	mov	r1, r0
 801c42c:	6818      	ldr	r0, [r3, #0]
 801c42e:	f000 bf71 	b.w	801d314 <_free_r>
 801c432:	bf00      	nop
 801c434:	200000a8 	.word	0x200000a8

0801c438 <sbrk_aligned>:
 801c438:	b570      	push	{r4, r5, r6, lr}
 801c43a:	4e0e      	ldr	r6, [pc, #56]	; (801c474 <sbrk_aligned+0x3c>)
 801c43c:	460c      	mov	r4, r1
 801c43e:	6831      	ldr	r1, [r6, #0]
 801c440:	4605      	mov	r5, r0
 801c442:	b911      	cbnz	r1, 801c44a <sbrk_aligned+0x12>
 801c444:	f000 ff08 	bl	801d258 <_sbrk_r>
 801c448:	6030      	str	r0, [r6, #0]
 801c44a:	4621      	mov	r1, r4
 801c44c:	4628      	mov	r0, r5
 801c44e:	f000 ff03 	bl	801d258 <_sbrk_r>
 801c452:	1c43      	adds	r3, r0, #1
 801c454:	d00a      	beq.n	801c46c <sbrk_aligned+0x34>
 801c456:	1cc4      	adds	r4, r0, #3
 801c458:	f024 0403 	bic.w	r4, r4, #3
 801c45c:	42a0      	cmp	r0, r4
 801c45e:	d007      	beq.n	801c470 <sbrk_aligned+0x38>
 801c460:	1a21      	subs	r1, r4, r0
 801c462:	4628      	mov	r0, r5
 801c464:	f000 fef8 	bl	801d258 <_sbrk_r>
 801c468:	3001      	adds	r0, #1
 801c46a:	d101      	bne.n	801c470 <sbrk_aligned+0x38>
 801c46c:	f04f 34ff 	mov.w	r4, #4294967295
 801c470:	4620      	mov	r0, r4
 801c472:	bd70      	pop	{r4, r5, r6, pc}
 801c474:	20002404 	.word	0x20002404

0801c478 <_malloc_r>:
 801c478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c47c:	1ccd      	adds	r5, r1, #3
 801c47e:	f025 0503 	bic.w	r5, r5, #3
 801c482:	3508      	adds	r5, #8
 801c484:	2d0c      	cmp	r5, #12
 801c486:	bf38      	it	cc
 801c488:	250c      	movcc	r5, #12
 801c48a:	2d00      	cmp	r5, #0
 801c48c:	4607      	mov	r7, r0
 801c48e:	db01      	blt.n	801c494 <_malloc_r+0x1c>
 801c490:	42a9      	cmp	r1, r5
 801c492:	d905      	bls.n	801c4a0 <_malloc_r+0x28>
 801c494:	230c      	movs	r3, #12
 801c496:	603b      	str	r3, [r7, #0]
 801c498:	2600      	movs	r6, #0
 801c49a:	4630      	mov	r0, r6
 801c49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c4a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c574 <_malloc_r+0xfc>
 801c4a4:	f000 f868 	bl	801c578 <__malloc_lock>
 801c4a8:	f8d8 3000 	ldr.w	r3, [r8]
 801c4ac:	461c      	mov	r4, r3
 801c4ae:	bb5c      	cbnz	r4, 801c508 <_malloc_r+0x90>
 801c4b0:	4629      	mov	r1, r5
 801c4b2:	4638      	mov	r0, r7
 801c4b4:	f7ff ffc0 	bl	801c438 <sbrk_aligned>
 801c4b8:	1c43      	adds	r3, r0, #1
 801c4ba:	4604      	mov	r4, r0
 801c4bc:	d155      	bne.n	801c56a <_malloc_r+0xf2>
 801c4be:	f8d8 4000 	ldr.w	r4, [r8]
 801c4c2:	4626      	mov	r6, r4
 801c4c4:	2e00      	cmp	r6, #0
 801c4c6:	d145      	bne.n	801c554 <_malloc_r+0xdc>
 801c4c8:	2c00      	cmp	r4, #0
 801c4ca:	d048      	beq.n	801c55e <_malloc_r+0xe6>
 801c4cc:	6823      	ldr	r3, [r4, #0]
 801c4ce:	4631      	mov	r1, r6
 801c4d0:	4638      	mov	r0, r7
 801c4d2:	eb04 0903 	add.w	r9, r4, r3
 801c4d6:	f000 febf 	bl	801d258 <_sbrk_r>
 801c4da:	4581      	cmp	r9, r0
 801c4dc:	d13f      	bne.n	801c55e <_malloc_r+0xe6>
 801c4de:	6821      	ldr	r1, [r4, #0]
 801c4e0:	1a6d      	subs	r5, r5, r1
 801c4e2:	4629      	mov	r1, r5
 801c4e4:	4638      	mov	r0, r7
 801c4e6:	f7ff ffa7 	bl	801c438 <sbrk_aligned>
 801c4ea:	3001      	adds	r0, #1
 801c4ec:	d037      	beq.n	801c55e <_malloc_r+0xe6>
 801c4ee:	6823      	ldr	r3, [r4, #0]
 801c4f0:	442b      	add	r3, r5
 801c4f2:	6023      	str	r3, [r4, #0]
 801c4f4:	f8d8 3000 	ldr.w	r3, [r8]
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d038      	beq.n	801c56e <_malloc_r+0xf6>
 801c4fc:	685a      	ldr	r2, [r3, #4]
 801c4fe:	42a2      	cmp	r2, r4
 801c500:	d12b      	bne.n	801c55a <_malloc_r+0xe2>
 801c502:	2200      	movs	r2, #0
 801c504:	605a      	str	r2, [r3, #4]
 801c506:	e00f      	b.n	801c528 <_malloc_r+0xb0>
 801c508:	6822      	ldr	r2, [r4, #0]
 801c50a:	1b52      	subs	r2, r2, r5
 801c50c:	d41f      	bmi.n	801c54e <_malloc_r+0xd6>
 801c50e:	2a0b      	cmp	r2, #11
 801c510:	d917      	bls.n	801c542 <_malloc_r+0xca>
 801c512:	1961      	adds	r1, r4, r5
 801c514:	42a3      	cmp	r3, r4
 801c516:	6025      	str	r5, [r4, #0]
 801c518:	bf18      	it	ne
 801c51a:	6059      	strne	r1, [r3, #4]
 801c51c:	6863      	ldr	r3, [r4, #4]
 801c51e:	bf08      	it	eq
 801c520:	f8c8 1000 	streq.w	r1, [r8]
 801c524:	5162      	str	r2, [r4, r5]
 801c526:	604b      	str	r3, [r1, #4]
 801c528:	4638      	mov	r0, r7
 801c52a:	f104 060b 	add.w	r6, r4, #11
 801c52e:	f000 f829 	bl	801c584 <__malloc_unlock>
 801c532:	f026 0607 	bic.w	r6, r6, #7
 801c536:	1d23      	adds	r3, r4, #4
 801c538:	1af2      	subs	r2, r6, r3
 801c53a:	d0ae      	beq.n	801c49a <_malloc_r+0x22>
 801c53c:	1b9b      	subs	r3, r3, r6
 801c53e:	50a3      	str	r3, [r4, r2]
 801c540:	e7ab      	b.n	801c49a <_malloc_r+0x22>
 801c542:	42a3      	cmp	r3, r4
 801c544:	6862      	ldr	r2, [r4, #4]
 801c546:	d1dd      	bne.n	801c504 <_malloc_r+0x8c>
 801c548:	f8c8 2000 	str.w	r2, [r8]
 801c54c:	e7ec      	b.n	801c528 <_malloc_r+0xb0>
 801c54e:	4623      	mov	r3, r4
 801c550:	6864      	ldr	r4, [r4, #4]
 801c552:	e7ac      	b.n	801c4ae <_malloc_r+0x36>
 801c554:	4634      	mov	r4, r6
 801c556:	6876      	ldr	r6, [r6, #4]
 801c558:	e7b4      	b.n	801c4c4 <_malloc_r+0x4c>
 801c55a:	4613      	mov	r3, r2
 801c55c:	e7cc      	b.n	801c4f8 <_malloc_r+0x80>
 801c55e:	230c      	movs	r3, #12
 801c560:	603b      	str	r3, [r7, #0]
 801c562:	4638      	mov	r0, r7
 801c564:	f000 f80e 	bl	801c584 <__malloc_unlock>
 801c568:	e797      	b.n	801c49a <_malloc_r+0x22>
 801c56a:	6025      	str	r5, [r4, #0]
 801c56c:	e7dc      	b.n	801c528 <_malloc_r+0xb0>
 801c56e:	605b      	str	r3, [r3, #4]
 801c570:	deff      	udf	#255	; 0xff
 801c572:	bf00      	nop
 801c574:	20002400 	.word	0x20002400

0801c578 <__malloc_lock>:
 801c578:	4801      	ldr	r0, [pc, #4]	; (801c580 <__malloc_lock+0x8>)
 801c57a:	f000 bebb 	b.w	801d2f4 <__retarget_lock_acquire_recursive>
 801c57e:	bf00      	nop
 801c580:	20002548 	.word	0x20002548

0801c584 <__malloc_unlock>:
 801c584:	4801      	ldr	r0, [pc, #4]	; (801c58c <__malloc_unlock+0x8>)
 801c586:	f000 beb6 	b.w	801d2f6 <__retarget_lock_release_recursive>
 801c58a:	bf00      	nop
 801c58c:	20002548 	.word	0x20002548

0801c590 <_fclose_r>:
 801c590:	b570      	push	{r4, r5, r6, lr}
 801c592:	4606      	mov	r6, r0
 801c594:	460c      	mov	r4, r1
 801c596:	b911      	cbnz	r1, 801c59e <_fclose_r+0xe>
 801c598:	2500      	movs	r5, #0
 801c59a:	4628      	mov	r0, r5
 801c59c:	bd70      	pop	{r4, r5, r6, pc}
 801c59e:	b118      	cbz	r0, 801c5a8 <_fclose_r+0x18>
 801c5a0:	6a03      	ldr	r3, [r0, #32]
 801c5a2:	b90b      	cbnz	r3, 801c5a8 <_fclose_r+0x18>
 801c5a4:	f000 f9e2 	bl	801c96c <__sinit>
 801c5a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c5aa:	07d8      	lsls	r0, r3, #31
 801c5ac:	d405      	bmi.n	801c5ba <_fclose_r+0x2a>
 801c5ae:	89a3      	ldrh	r3, [r4, #12]
 801c5b0:	0599      	lsls	r1, r3, #22
 801c5b2:	d402      	bmi.n	801c5ba <_fclose_r+0x2a>
 801c5b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c5b6:	f000 fe9d 	bl	801d2f4 <__retarget_lock_acquire_recursive>
 801c5ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c5be:	b93b      	cbnz	r3, 801c5d0 <_fclose_r+0x40>
 801c5c0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801c5c2:	f015 0501 	ands.w	r5, r5, #1
 801c5c6:	d1e7      	bne.n	801c598 <_fclose_r+0x8>
 801c5c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c5ca:	f000 fe94 	bl	801d2f6 <__retarget_lock_release_recursive>
 801c5ce:	e7e4      	b.n	801c59a <_fclose_r+0xa>
 801c5d0:	4621      	mov	r1, r4
 801c5d2:	4630      	mov	r0, r6
 801c5d4:	f000 f83c 	bl	801c650 <__sflush_r>
 801c5d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c5da:	4605      	mov	r5, r0
 801c5dc:	b133      	cbz	r3, 801c5ec <_fclose_r+0x5c>
 801c5de:	6a21      	ldr	r1, [r4, #32]
 801c5e0:	4630      	mov	r0, r6
 801c5e2:	4798      	blx	r3
 801c5e4:	2800      	cmp	r0, #0
 801c5e6:	bfb8      	it	lt
 801c5e8:	f04f 35ff 	movlt.w	r5, #4294967295
 801c5ec:	89a3      	ldrh	r3, [r4, #12]
 801c5ee:	061a      	lsls	r2, r3, #24
 801c5f0:	d503      	bpl.n	801c5fa <_fclose_r+0x6a>
 801c5f2:	6921      	ldr	r1, [r4, #16]
 801c5f4:	4630      	mov	r0, r6
 801c5f6:	f000 fe8d 	bl	801d314 <_free_r>
 801c5fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c5fc:	b141      	cbz	r1, 801c610 <_fclose_r+0x80>
 801c5fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c602:	4299      	cmp	r1, r3
 801c604:	d002      	beq.n	801c60c <_fclose_r+0x7c>
 801c606:	4630      	mov	r0, r6
 801c608:	f000 fe84 	bl	801d314 <_free_r>
 801c60c:	2300      	movs	r3, #0
 801c60e:	6363      	str	r3, [r4, #52]	; 0x34
 801c610:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c612:	b121      	cbz	r1, 801c61e <_fclose_r+0x8e>
 801c614:	4630      	mov	r0, r6
 801c616:	f000 fe7d 	bl	801d314 <_free_r>
 801c61a:	2300      	movs	r3, #0
 801c61c:	64a3      	str	r3, [r4, #72]	; 0x48
 801c61e:	f000 f945 	bl	801c8ac <__sfp_lock_acquire>
 801c622:	2300      	movs	r3, #0
 801c624:	81a3      	strh	r3, [r4, #12]
 801c626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c628:	07db      	lsls	r3, r3, #31
 801c62a:	d402      	bmi.n	801c632 <_fclose_r+0xa2>
 801c62c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c62e:	f000 fe62 	bl	801d2f6 <__retarget_lock_release_recursive>
 801c632:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c634:	f000 fe5d 	bl	801d2f2 <__retarget_lock_close_recursive>
 801c638:	f000 f93e 	bl	801c8b8 <__sfp_lock_release>
 801c63c:	e7ad      	b.n	801c59a <_fclose_r+0xa>
	...

0801c640 <fclose>:
 801c640:	4b02      	ldr	r3, [pc, #8]	; (801c64c <fclose+0xc>)
 801c642:	4601      	mov	r1, r0
 801c644:	6818      	ldr	r0, [r3, #0]
 801c646:	f7ff bfa3 	b.w	801c590 <_fclose_r>
 801c64a:	bf00      	nop
 801c64c:	200000a8 	.word	0x200000a8

0801c650 <__sflush_r>:
 801c650:	898a      	ldrh	r2, [r1, #12]
 801c652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c656:	4605      	mov	r5, r0
 801c658:	0710      	lsls	r0, r2, #28
 801c65a:	460c      	mov	r4, r1
 801c65c:	d458      	bmi.n	801c710 <__sflush_r+0xc0>
 801c65e:	684b      	ldr	r3, [r1, #4]
 801c660:	2b00      	cmp	r3, #0
 801c662:	dc05      	bgt.n	801c670 <__sflush_r+0x20>
 801c664:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c666:	2b00      	cmp	r3, #0
 801c668:	dc02      	bgt.n	801c670 <__sflush_r+0x20>
 801c66a:	2000      	movs	r0, #0
 801c66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c672:	2e00      	cmp	r6, #0
 801c674:	d0f9      	beq.n	801c66a <__sflush_r+0x1a>
 801c676:	2300      	movs	r3, #0
 801c678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c67c:	682f      	ldr	r7, [r5, #0]
 801c67e:	6a21      	ldr	r1, [r4, #32]
 801c680:	602b      	str	r3, [r5, #0]
 801c682:	d032      	beq.n	801c6ea <__sflush_r+0x9a>
 801c684:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c686:	89a3      	ldrh	r3, [r4, #12]
 801c688:	075a      	lsls	r2, r3, #29
 801c68a:	d505      	bpl.n	801c698 <__sflush_r+0x48>
 801c68c:	6863      	ldr	r3, [r4, #4]
 801c68e:	1ac0      	subs	r0, r0, r3
 801c690:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c692:	b10b      	cbz	r3, 801c698 <__sflush_r+0x48>
 801c694:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c696:	1ac0      	subs	r0, r0, r3
 801c698:	2300      	movs	r3, #0
 801c69a:	4602      	mov	r2, r0
 801c69c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c69e:	6a21      	ldr	r1, [r4, #32]
 801c6a0:	4628      	mov	r0, r5
 801c6a2:	47b0      	blx	r6
 801c6a4:	1c43      	adds	r3, r0, #1
 801c6a6:	89a3      	ldrh	r3, [r4, #12]
 801c6a8:	d106      	bne.n	801c6b8 <__sflush_r+0x68>
 801c6aa:	6829      	ldr	r1, [r5, #0]
 801c6ac:	291d      	cmp	r1, #29
 801c6ae:	d82b      	bhi.n	801c708 <__sflush_r+0xb8>
 801c6b0:	4a29      	ldr	r2, [pc, #164]	; (801c758 <__sflush_r+0x108>)
 801c6b2:	410a      	asrs	r2, r1
 801c6b4:	07d6      	lsls	r6, r2, #31
 801c6b6:	d427      	bmi.n	801c708 <__sflush_r+0xb8>
 801c6b8:	2200      	movs	r2, #0
 801c6ba:	6062      	str	r2, [r4, #4]
 801c6bc:	04d9      	lsls	r1, r3, #19
 801c6be:	6922      	ldr	r2, [r4, #16]
 801c6c0:	6022      	str	r2, [r4, #0]
 801c6c2:	d504      	bpl.n	801c6ce <__sflush_r+0x7e>
 801c6c4:	1c42      	adds	r2, r0, #1
 801c6c6:	d101      	bne.n	801c6cc <__sflush_r+0x7c>
 801c6c8:	682b      	ldr	r3, [r5, #0]
 801c6ca:	b903      	cbnz	r3, 801c6ce <__sflush_r+0x7e>
 801c6cc:	6560      	str	r0, [r4, #84]	; 0x54
 801c6ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c6d0:	602f      	str	r7, [r5, #0]
 801c6d2:	2900      	cmp	r1, #0
 801c6d4:	d0c9      	beq.n	801c66a <__sflush_r+0x1a>
 801c6d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c6da:	4299      	cmp	r1, r3
 801c6dc:	d002      	beq.n	801c6e4 <__sflush_r+0x94>
 801c6de:	4628      	mov	r0, r5
 801c6e0:	f000 fe18 	bl	801d314 <_free_r>
 801c6e4:	2000      	movs	r0, #0
 801c6e6:	6360      	str	r0, [r4, #52]	; 0x34
 801c6e8:	e7c0      	b.n	801c66c <__sflush_r+0x1c>
 801c6ea:	2301      	movs	r3, #1
 801c6ec:	4628      	mov	r0, r5
 801c6ee:	47b0      	blx	r6
 801c6f0:	1c41      	adds	r1, r0, #1
 801c6f2:	d1c8      	bne.n	801c686 <__sflush_r+0x36>
 801c6f4:	682b      	ldr	r3, [r5, #0]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d0c5      	beq.n	801c686 <__sflush_r+0x36>
 801c6fa:	2b1d      	cmp	r3, #29
 801c6fc:	d001      	beq.n	801c702 <__sflush_r+0xb2>
 801c6fe:	2b16      	cmp	r3, #22
 801c700:	d101      	bne.n	801c706 <__sflush_r+0xb6>
 801c702:	602f      	str	r7, [r5, #0]
 801c704:	e7b1      	b.n	801c66a <__sflush_r+0x1a>
 801c706:	89a3      	ldrh	r3, [r4, #12]
 801c708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c70c:	81a3      	strh	r3, [r4, #12]
 801c70e:	e7ad      	b.n	801c66c <__sflush_r+0x1c>
 801c710:	690f      	ldr	r7, [r1, #16]
 801c712:	2f00      	cmp	r7, #0
 801c714:	d0a9      	beq.n	801c66a <__sflush_r+0x1a>
 801c716:	0793      	lsls	r3, r2, #30
 801c718:	680e      	ldr	r6, [r1, #0]
 801c71a:	bf08      	it	eq
 801c71c:	694b      	ldreq	r3, [r1, #20]
 801c71e:	600f      	str	r7, [r1, #0]
 801c720:	bf18      	it	ne
 801c722:	2300      	movne	r3, #0
 801c724:	eba6 0807 	sub.w	r8, r6, r7
 801c728:	608b      	str	r3, [r1, #8]
 801c72a:	f1b8 0f00 	cmp.w	r8, #0
 801c72e:	dd9c      	ble.n	801c66a <__sflush_r+0x1a>
 801c730:	6a21      	ldr	r1, [r4, #32]
 801c732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c734:	4643      	mov	r3, r8
 801c736:	463a      	mov	r2, r7
 801c738:	4628      	mov	r0, r5
 801c73a:	47b0      	blx	r6
 801c73c:	2800      	cmp	r0, #0
 801c73e:	dc06      	bgt.n	801c74e <__sflush_r+0xfe>
 801c740:	89a3      	ldrh	r3, [r4, #12]
 801c742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c746:	81a3      	strh	r3, [r4, #12]
 801c748:	f04f 30ff 	mov.w	r0, #4294967295
 801c74c:	e78e      	b.n	801c66c <__sflush_r+0x1c>
 801c74e:	4407      	add	r7, r0
 801c750:	eba8 0800 	sub.w	r8, r8, r0
 801c754:	e7e9      	b.n	801c72a <__sflush_r+0xda>
 801c756:	bf00      	nop
 801c758:	dfbffffe 	.word	0xdfbffffe

0801c75c <_fflush_r>:
 801c75c:	b538      	push	{r3, r4, r5, lr}
 801c75e:	690b      	ldr	r3, [r1, #16]
 801c760:	4605      	mov	r5, r0
 801c762:	460c      	mov	r4, r1
 801c764:	b913      	cbnz	r3, 801c76c <_fflush_r+0x10>
 801c766:	2500      	movs	r5, #0
 801c768:	4628      	mov	r0, r5
 801c76a:	bd38      	pop	{r3, r4, r5, pc}
 801c76c:	b118      	cbz	r0, 801c776 <_fflush_r+0x1a>
 801c76e:	6a03      	ldr	r3, [r0, #32]
 801c770:	b90b      	cbnz	r3, 801c776 <_fflush_r+0x1a>
 801c772:	f000 f8fb 	bl	801c96c <__sinit>
 801c776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d0f3      	beq.n	801c766 <_fflush_r+0xa>
 801c77e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c780:	07d0      	lsls	r0, r2, #31
 801c782:	d404      	bmi.n	801c78e <_fflush_r+0x32>
 801c784:	0599      	lsls	r1, r3, #22
 801c786:	d402      	bmi.n	801c78e <_fflush_r+0x32>
 801c788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c78a:	f000 fdb3 	bl	801d2f4 <__retarget_lock_acquire_recursive>
 801c78e:	4628      	mov	r0, r5
 801c790:	4621      	mov	r1, r4
 801c792:	f7ff ff5d 	bl	801c650 <__sflush_r>
 801c796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c798:	07da      	lsls	r2, r3, #31
 801c79a:	4605      	mov	r5, r0
 801c79c:	d4e4      	bmi.n	801c768 <_fflush_r+0xc>
 801c79e:	89a3      	ldrh	r3, [r4, #12]
 801c7a0:	059b      	lsls	r3, r3, #22
 801c7a2:	d4e1      	bmi.n	801c768 <_fflush_r+0xc>
 801c7a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7a6:	f000 fda6 	bl	801d2f6 <__retarget_lock_release_recursive>
 801c7aa:	e7dd      	b.n	801c768 <_fflush_r+0xc>

0801c7ac <std>:
 801c7ac:	2300      	movs	r3, #0
 801c7ae:	b510      	push	{r4, lr}
 801c7b0:	4604      	mov	r4, r0
 801c7b2:	e9c0 3300 	strd	r3, r3, [r0]
 801c7b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c7ba:	6083      	str	r3, [r0, #8]
 801c7bc:	8181      	strh	r1, [r0, #12]
 801c7be:	6643      	str	r3, [r0, #100]	; 0x64
 801c7c0:	81c2      	strh	r2, [r0, #14]
 801c7c2:	6183      	str	r3, [r0, #24]
 801c7c4:	4619      	mov	r1, r3
 801c7c6:	2208      	movs	r2, #8
 801c7c8:	305c      	adds	r0, #92	; 0x5c
 801c7ca:	f000 fcf7 	bl	801d1bc <memset>
 801c7ce:	4b0d      	ldr	r3, [pc, #52]	; (801c804 <std+0x58>)
 801c7d0:	6263      	str	r3, [r4, #36]	; 0x24
 801c7d2:	4b0d      	ldr	r3, [pc, #52]	; (801c808 <std+0x5c>)
 801c7d4:	62a3      	str	r3, [r4, #40]	; 0x28
 801c7d6:	4b0d      	ldr	r3, [pc, #52]	; (801c80c <std+0x60>)
 801c7d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c7da:	4b0d      	ldr	r3, [pc, #52]	; (801c810 <std+0x64>)
 801c7dc:	6323      	str	r3, [r4, #48]	; 0x30
 801c7de:	4b0d      	ldr	r3, [pc, #52]	; (801c814 <std+0x68>)
 801c7e0:	6224      	str	r4, [r4, #32]
 801c7e2:	429c      	cmp	r4, r3
 801c7e4:	d006      	beq.n	801c7f4 <std+0x48>
 801c7e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801c7ea:	4294      	cmp	r4, r2
 801c7ec:	d002      	beq.n	801c7f4 <std+0x48>
 801c7ee:	33d0      	adds	r3, #208	; 0xd0
 801c7f0:	429c      	cmp	r4, r3
 801c7f2:	d105      	bne.n	801c800 <std+0x54>
 801c7f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c7fc:	f000 bd78 	b.w	801d2f0 <__retarget_lock_init_recursive>
 801c800:	bd10      	pop	{r4, pc}
 801c802:	bf00      	nop
 801c804:	0801cecd 	.word	0x0801cecd
 801c808:	0801ceef 	.word	0x0801ceef
 801c80c:	0801cf27 	.word	0x0801cf27
 801c810:	0801cf4b 	.word	0x0801cf4b
 801c814:	20002408 	.word	0x20002408

0801c818 <stdio_exit_handler>:
 801c818:	4a02      	ldr	r2, [pc, #8]	; (801c824 <stdio_exit_handler+0xc>)
 801c81a:	4903      	ldr	r1, [pc, #12]	; (801c828 <stdio_exit_handler+0x10>)
 801c81c:	4803      	ldr	r0, [pc, #12]	; (801c82c <stdio_exit_handler+0x14>)
 801c81e:	f000 b985 	b.w	801cb2c <_fwalk_sglue>
 801c822:	bf00      	nop
 801c824:	20000050 	.word	0x20000050
 801c828:	0801c75d 	.word	0x0801c75d
 801c82c:	2000005c 	.word	0x2000005c

0801c830 <cleanup_stdio>:
 801c830:	6841      	ldr	r1, [r0, #4]
 801c832:	4b0c      	ldr	r3, [pc, #48]	; (801c864 <cleanup_stdio+0x34>)
 801c834:	4299      	cmp	r1, r3
 801c836:	b510      	push	{r4, lr}
 801c838:	4604      	mov	r4, r0
 801c83a:	d001      	beq.n	801c840 <cleanup_stdio+0x10>
 801c83c:	f7ff ff8e 	bl	801c75c <_fflush_r>
 801c840:	68a1      	ldr	r1, [r4, #8]
 801c842:	4b09      	ldr	r3, [pc, #36]	; (801c868 <cleanup_stdio+0x38>)
 801c844:	4299      	cmp	r1, r3
 801c846:	d002      	beq.n	801c84e <cleanup_stdio+0x1e>
 801c848:	4620      	mov	r0, r4
 801c84a:	f7ff ff87 	bl	801c75c <_fflush_r>
 801c84e:	68e1      	ldr	r1, [r4, #12]
 801c850:	4b06      	ldr	r3, [pc, #24]	; (801c86c <cleanup_stdio+0x3c>)
 801c852:	4299      	cmp	r1, r3
 801c854:	d004      	beq.n	801c860 <cleanup_stdio+0x30>
 801c856:	4620      	mov	r0, r4
 801c858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c85c:	f7ff bf7e 	b.w	801c75c <_fflush_r>
 801c860:	bd10      	pop	{r4, pc}
 801c862:	bf00      	nop
 801c864:	20002408 	.word	0x20002408
 801c868:	20002470 	.word	0x20002470
 801c86c:	200024d8 	.word	0x200024d8

0801c870 <global_stdio_init.part.0>:
 801c870:	b510      	push	{r4, lr}
 801c872:	4b0b      	ldr	r3, [pc, #44]	; (801c8a0 <global_stdio_init.part.0+0x30>)
 801c874:	4c0b      	ldr	r4, [pc, #44]	; (801c8a4 <global_stdio_init.part.0+0x34>)
 801c876:	4a0c      	ldr	r2, [pc, #48]	; (801c8a8 <global_stdio_init.part.0+0x38>)
 801c878:	601a      	str	r2, [r3, #0]
 801c87a:	4620      	mov	r0, r4
 801c87c:	2200      	movs	r2, #0
 801c87e:	2104      	movs	r1, #4
 801c880:	f7ff ff94 	bl	801c7ac <std>
 801c884:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801c888:	2201      	movs	r2, #1
 801c88a:	2109      	movs	r1, #9
 801c88c:	f7ff ff8e 	bl	801c7ac <std>
 801c890:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801c894:	2202      	movs	r2, #2
 801c896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c89a:	2112      	movs	r1, #18
 801c89c:	f7ff bf86 	b.w	801c7ac <std>
 801c8a0:	20002540 	.word	0x20002540
 801c8a4:	20002408 	.word	0x20002408
 801c8a8:	0801c819 	.word	0x0801c819

0801c8ac <__sfp_lock_acquire>:
 801c8ac:	4801      	ldr	r0, [pc, #4]	; (801c8b4 <__sfp_lock_acquire+0x8>)
 801c8ae:	f000 bd21 	b.w	801d2f4 <__retarget_lock_acquire_recursive>
 801c8b2:	bf00      	nop
 801c8b4:	20002549 	.word	0x20002549

0801c8b8 <__sfp_lock_release>:
 801c8b8:	4801      	ldr	r0, [pc, #4]	; (801c8c0 <__sfp_lock_release+0x8>)
 801c8ba:	f000 bd1c 	b.w	801d2f6 <__retarget_lock_release_recursive>
 801c8be:	bf00      	nop
 801c8c0:	20002549 	.word	0x20002549

0801c8c4 <__sfp>:
 801c8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8c8:	4607      	mov	r7, r0
 801c8ca:	f7ff ffef 	bl	801c8ac <__sfp_lock_acquire>
 801c8ce:	4b24      	ldr	r3, [pc, #144]	; (801c960 <__sfp+0x9c>)
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	b90b      	cbnz	r3, 801c8d8 <__sfp+0x14>
 801c8d4:	f7ff ffcc 	bl	801c870 <global_stdio_init.part.0>
 801c8d8:	4e22      	ldr	r6, [pc, #136]	; (801c964 <__sfp+0xa0>)
 801c8da:	f04f 0804 	mov.w	r8, #4
 801c8de:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c8e2:	3b01      	subs	r3, #1
 801c8e4:	d50f      	bpl.n	801c906 <__sfp+0x42>
 801c8e6:	6835      	ldr	r5, [r6, #0]
 801c8e8:	2d00      	cmp	r5, #0
 801c8ea:	d137      	bne.n	801c95c <__sfp+0x98>
 801c8ec:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 801c8f0:	4638      	mov	r0, r7
 801c8f2:	f7ff fdc1 	bl	801c478 <_malloc_r>
 801c8f6:	4604      	mov	r4, r0
 801c8f8:	bb30      	cbnz	r0, 801c948 <__sfp+0x84>
 801c8fa:	6030      	str	r0, [r6, #0]
 801c8fc:	f7ff ffdc 	bl	801c8b8 <__sfp_lock_release>
 801c900:	230c      	movs	r3, #12
 801c902:	603b      	str	r3, [r7, #0]
 801c904:	e01b      	b.n	801c93e <__sfp+0x7a>
 801c906:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c90a:	b9dd      	cbnz	r5, 801c944 <__sfp+0x80>
 801c90c:	4b16      	ldr	r3, [pc, #88]	; (801c968 <__sfp+0xa4>)
 801c90e:	60e3      	str	r3, [r4, #12]
 801c910:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c914:	6665      	str	r5, [r4, #100]	; 0x64
 801c916:	f000 fceb 	bl	801d2f0 <__retarget_lock_init_recursive>
 801c91a:	f7ff ffcd 	bl	801c8b8 <__sfp_lock_release>
 801c91e:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c922:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c926:	6025      	str	r5, [r4, #0]
 801c928:	61a5      	str	r5, [r4, #24]
 801c92a:	2208      	movs	r2, #8
 801c92c:	4629      	mov	r1, r5
 801c92e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c932:	f000 fc43 	bl	801d1bc <memset>
 801c936:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c93a:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c93e:	4620      	mov	r0, r4
 801c940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c944:	3468      	adds	r4, #104	; 0x68
 801c946:	e7cc      	b.n	801c8e2 <__sfp+0x1e>
 801c948:	e9c0 5800 	strd	r5, r8, [r0]
 801c94c:	300c      	adds	r0, #12
 801c94e:	60a0      	str	r0, [r4, #8]
 801c950:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 801c954:	4629      	mov	r1, r5
 801c956:	f000 fc31 	bl	801d1bc <memset>
 801c95a:	6034      	str	r4, [r6, #0]
 801c95c:	6836      	ldr	r6, [r6, #0]
 801c95e:	e7be      	b.n	801c8de <__sfp+0x1a>
 801c960:	20002540 	.word	0x20002540
 801c964:	20000050 	.word	0x20000050
 801c968:	ffff0001 	.word	0xffff0001

0801c96c <__sinit>:
 801c96c:	b510      	push	{r4, lr}
 801c96e:	4604      	mov	r4, r0
 801c970:	f7ff ff9c 	bl	801c8ac <__sfp_lock_acquire>
 801c974:	6a23      	ldr	r3, [r4, #32]
 801c976:	b11b      	cbz	r3, 801c980 <__sinit+0x14>
 801c978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c97c:	f7ff bf9c 	b.w	801c8b8 <__sfp_lock_release>
 801c980:	4b04      	ldr	r3, [pc, #16]	; (801c994 <__sinit+0x28>)
 801c982:	6223      	str	r3, [r4, #32]
 801c984:	4b04      	ldr	r3, [pc, #16]	; (801c998 <__sinit+0x2c>)
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	2b00      	cmp	r3, #0
 801c98a:	d1f5      	bne.n	801c978 <__sinit+0xc>
 801c98c:	f7ff ff70 	bl	801c870 <global_stdio_init.part.0>
 801c990:	e7f2      	b.n	801c978 <__sinit+0xc>
 801c992:	bf00      	nop
 801c994:	0801c831 	.word	0x0801c831
 801c998:	20002540 	.word	0x20002540

0801c99c <_fopen_r>:
 801c99c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c99e:	460f      	mov	r7, r1
 801c9a0:	4611      	mov	r1, r2
 801c9a2:	aa01      	add	r2, sp, #4
 801c9a4:	4605      	mov	r5, r0
 801c9a6:	f000 ffd5 	bl	801d954 <__sflags>
 801c9aa:	4606      	mov	r6, r0
 801c9ac:	b918      	cbnz	r0, 801c9b6 <_fopen_r+0x1a>
 801c9ae:	2400      	movs	r4, #0
 801c9b0:	4620      	mov	r0, r4
 801c9b2:	b003      	add	sp, #12
 801c9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9b6:	4628      	mov	r0, r5
 801c9b8:	f7ff ff84 	bl	801c8c4 <__sfp>
 801c9bc:	4604      	mov	r4, r0
 801c9be:	2800      	cmp	r0, #0
 801c9c0:	d0f5      	beq.n	801c9ae <_fopen_r+0x12>
 801c9c2:	4639      	mov	r1, r7
 801c9c4:	9a01      	ldr	r2, [sp, #4]
 801c9c6:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801c9ca:	4628      	mov	r0, r5
 801c9cc:	f000 fc20 	bl	801d210 <_open_r>
 801c9d0:	1e07      	subs	r7, r0, #0
 801c9d2:	da09      	bge.n	801c9e8 <_fopen_r+0x4c>
 801c9d4:	2500      	movs	r5, #0
 801c9d6:	f7ff ff69 	bl	801c8ac <__sfp_lock_acquire>
 801c9da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c9dc:	81a5      	strh	r5, [r4, #12]
 801c9de:	f000 fc88 	bl	801d2f2 <__retarget_lock_close_recursive>
 801c9e2:	f7ff ff69 	bl	801c8b8 <__sfp_lock_release>
 801c9e6:	e7e2      	b.n	801c9ae <_fopen_r+0x12>
 801c9e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c9ea:	07db      	lsls	r3, r3, #31
 801c9ec:	d405      	bmi.n	801c9fa <_fopen_r+0x5e>
 801c9ee:	89a3      	ldrh	r3, [r4, #12]
 801c9f0:	0598      	lsls	r0, r3, #22
 801c9f2:	d402      	bmi.n	801c9fa <_fopen_r+0x5e>
 801c9f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c9f6:	f000 fc7d 	bl	801d2f4 <__retarget_lock_acquire_recursive>
 801c9fa:	4b0e      	ldr	r3, [pc, #56]	; (801ca34 <_fopen_r+0x98>)
 801c9fc:	6263      	str	r3, [r4, #36]	; 0x24
 801c9fe:	4b0e      	ldr	r3, [pc, #56]	; (801ca38 <_fopen_r+0x9c>)
 801ca00:	62a3      	str	r3, [r4, #40]	; 0x28
 801ca02:	4b0e      	ldr	r3, [pc, #56]	; (801ca3c <_fopen_r+0xa0>)
 801ca04:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ca06:	05f1      	lsls	r1, r6, #23
 801ca08:	4b0d      	ldr	r3, [pc, #52]	; (801ca40 <_fopen_r+0xa4>)
 801ca0a:	81e7      	strh	r7, [r4, #14]
 801ca0c:	81a6      	strh	r6, [r4, #12]
 801ca0e:	6224      	str	r4, [r4, #32]
 801ca10:	6323      	str	r3, [r4, #48]	; 0x30
 801ca12:	d505      	bpl.n	801ca20 <_fopen_r+0x84>
 801ca14:	2302      	movs	r3, #2
 801ca16:	2200      	movs	r2, #0
 801ca18:	4621      	mov	r1, r4
 801ca1a:	4628      	mov	r0, r5
 801ca1c:	f000 f884 	bl	801cb28 <_fseek_r>
 801ca20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ca22:	07da      	lsls	r2, r3, #31
 801ca24:	d4c4      	bmi.n	801c9b0 <_fopen_r+0x14>
 801ca26:	89a3      	ldrh	r3, [r4, #12]
 801ca28:	059b      	lsls	r3, r3, #22
 801ca2a:	d4c1      	bmi.n	801c9b0 <_fopen_r+0x14>
 801ca2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca2e:	f000 fc62 	bl	801d2f6 <__retarget_lock_release_recursive>
 801ca32:	e7bd      	b.n	801c9b0 <_fopen_r+0x14>
 801ca34:	0801cecd 	.word	0x0801cecd
 801ca38:	0801ceef 	.word	0x0801ceef
 801ca3c:	0801cf27 	.word	0x0801cf27
 801ca40:	0801cf4b 	.word	0x0801cf4b

0801ca44 <fopen>:
 801ca44:	4b02      	ldr	r3, [pc, #8]	; (801ca50 <fopen+0xc>)
 801ca46:	460a      	mov	r2, r1
 801ca48:	4601      	mov	r1, r0
 801ca4a:	6818      	ldr	r0, [r3, #0]
 801ca4c:	f7ff bfa6 	b.w	801c99c <_fopen_r>
 801ca50:	200000a8 	.word	0x200000a8

0801ca54 <_fread_r>:
 801ca54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca58:	461e      	mov	r6, r3
 801ca5a:	4613      	mov	r3, r2
 801ca5c:	4373      	muls	r3, r6
 801ca5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ca60:	4682      	mov	sl, r0
 801ca62:	4688      	mov	r8, r1
 801ca64:	4691      	mov	r9, r2
 801ca66:	469b      	mov	fp, r3
 801ca68:	d04e      	beq.n	801cb08 <_fread_r+0xb4>
 801ca6a:	b118      	cbz	r0, 801ca74 <_fread_r+0x20>
 801ca6c:	6a03      	ldr	r3, [r0, #32]
 801ca6e:	b90b      	cbnz	r3, 801ca74 <_fread_r+0x20>
 801ca70:	f7ff ff7c 	bl	801c96c <__sinit>
 801ca74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ca76:	07df      	lsls	r7, r3, #31
 801ca78:	d405      	bmi.n	801ca86 <_fread_r+0x32>
 801ca7a:	89a3      	ldrh	r3, [r4, #12]
 801ca7c:	059d      	lsls	r5, r3, #22
 801ca7e:	d402      	bmi.n	801ca86 <_fread_r+0x32>
 801ca80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca82:	f000 fc37 	bl	801d2f4 <__retarget_lock_acquire_recursive>
 801ca86:	6863      	ldr	r3, [r4, #4]
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	da01      	bge.n	801ca90 <_fread_r+0x3c>
 801ca8c:	2300      	movs	r3, #0
 801ca8e:	6063      	str	r3, [r4, #4]
 801ca90:	465f      	mov	r7, fp
 801ca92:	e9d4 1500 	ldrd	r1, r5, [r4]
 801ca96:	42bd      	cmp	r5, r7
 801ca98:	d313      	bcc.n	801cac2 <_fread_r+0x6e>
 801ca9a:	463a      	mov	r2, r7
 801ca9c:	4640      	mov	r0, r8
 801ca9e:	f000 fc2b 	bl	801d2f8 <memcpy>
 801caa2:	6862      	ldr	r2, [r4, #4]
 801caa4:	6821      	ldr	r1, [r4, #0]
 801caa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801caa8:	1bd2      	subs	r2, r2, r7
 801caaa:	6062      	str	r2, [r4, #4]
 801caac:	4439      	add	r1, r7
 801caae:	07da      	lsls	r2, r3, #31
 801cab0:	6021      	str	r1, [r4, #0]
 801cab2:	d423      	bmi.n	801cafc <_fread_r+0xa8>
 801cab4:	89a3      	ldrh	r3, [r4, #12]
 801cab6:	059b      	lsls	r3, r3, #22
 801cab8:	d420      	bmi.n	801cafc <_fread_r+0xa8>
 801caba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cabc:	f000 fc1b 	bl	801d2f6 <__retarget_lock_release_recursive>
 801cac0:	e01c      	b.n	801cafc <_fread_r+0xa8>
 801cac2:	462a      	mov	r2, r5
 801cac4:	4640      	mov	r0, r8
 801cac6:	f000 fc17 	bl	801d2f8 <memcpy>
 801caca:	6823      	ldr	r3, [r4, #0]
 801cacc:	442b      	add	r3, r5
 801cace:	6023      	str	r3, [r4, #0]
 801cad0:	4621      	mov	r1, r4
 801cad2:	1b7b      	subs	r3, r7, r5
 801cad4:	4650      	mov	r0, sl
 801cad6:	9301      	str	r3, [sp, #4]
 801cad8:	f000 f8ca 	bl	801cc70 <__srefill_r>
 801cadc:	44a8      	add	r8, r5
 801cade:	9b01      	ldr	r3, [sp, #4]
 801cae0:	b180      	cbz	r0, 801cb04 <_fread_r+0xb0>
 801cae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cae4:	07d8      	lsls	r0, r3, #31
 801cae6:	d405      	bmi.n	801caf4 <_fread_r+0xa0>
 801cae8:	89a3      	ldrh	r3, [r4, #12]
 801caea:	0599      	lsls	r1, r3, #22
 801caec:	d402      	bmi.n	801caf4 <_fread_r+0xa0>
 801caee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801caf0:	f000 fc01 	bl	801d2f6 <__retarget_lock_release_recursive>
 801caf4:	445d      	add	r5, fp
 801caf6:	1beb      	subs	r3, r5, r7
 801caf8:	fbb3 f6f9 	udiv	r6, r3, r9
 801cafc:	4630      	mov	r0, r6
 801cafe:	b003      	add	sp, #12
 801cb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb04:	461f      	mov	r7, r3
 801cb06:	e7c4      	b.n	801ca92 <_fread_r+0x3e>
 801cb08:	461e      	mov	r6, r3
 801cb0a:	e7f7      	b.n	801cafc <_fread_r+0xa8>

0801cb0c <fread>:
 801cb0c:	b507      	push	{r0, r1, r2, lr}
 801cb0e:	9300      	str	r3, [sp, #0]
 801cb10:	4613      	mov	r3, r2
 801cb12:	460a      	mov	r2, r1
 801cb14:	4601      	mov	r1, r0
 801cb16:	4803      	ldr	r0, [pc, #12]	; (801cb24 <fread+0x18>)
 801cb18:	6800      	ldr	r0, [r0, #0]
 801cb1a:	f7ff ff9b 	bl	801ca54 <_fread_r>
 801cb1e:	b003      	add	sp, #12
 801cb20:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb24:	200000a8 	.word	0x200000a8

0801cb28 <_fseek_r>:
 801cb28:	f000 baa8 	b.w	801d07c <_fseeko_r>

0801cb2c <_fwalk_sglue>:
 801cb2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb30:	4607      	mov	r7, r0
 801cb32:	4688      	mov	r8, r1
 801cb34:	4614      	mov	r4, r2
 801cb36:	2600      	movs	r6, #0
 801cb38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cb3c:	f1b9 0901 	subs.w	r9, r9, #1
 801cb40:	d505      	bpl.n	801cb4e <_fwalk_sglue+0x22>
 801cb42:	6824      	ldr	r4, [r4, #0]
 801cb44:	2c00      	cmp	r4, #0
 801cb46:	d1f7      	bne.n	801cb38 <_fwalk_sglue+0xc>
 801cb48:	4630      	mov	r0, r6
 801cb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb4e:	89ab      	ldrh	r3, [r5, #12]
 801cb50:	2b01      	cmp	r3, #1
 801cb52:	d907      	bls.n	801cb64 <_fwalk_sglue+0x38>
 801cb54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cb58:	3301      	adds	r3, #1
 801cb5a:	d003      	beq.n	801cb64 <_fwalk_sglue+0x38>
 801cb5c:	4629      	mov	r1, r5
 801cb5e:	4638      	mov	r0, r7
 801cb60:	47c0      	blx	r8
 801cb62:	4306      	orrs	r6, r0
 801cb64:	3568      	adds	r5, #104	; 0x68
 801cb66:	e7e9      	b.n	801cb3c <_fwalk_sglue+0x10>

0801cb68 <iprintf>:
 801cb68:	b40f      	push	{r0, r1, r2, r3}
 801cb6a:	b507      	push	{r0, r1, r2, lr}
 801cb6c:	4906      	ldr	r1, [pc, #24]	; (801cb88 <iprintf+0x20>)
 801cb6e:	ab04      	add	r3, sp, #16
 801cb70:	6808      	ldr	r0, [r1, #0]
 801cb72:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb76:	6881      	ldr	r1, [r0, #8]
 801cb78:	9301      	str	r3, [sp, #4]
 801cb7a:	f000 fc41 	bl	801d400 <_vfiprintf_r>
 801cb7e:	b003      	add	sp, #12
 801cb80:	f85d eb04 	ldr.w	lr, [sp], #4
 801cb84:	b004      	add	sp, #16
 801cb86:	4770      	bx	lr
 801cb88:	200000a8 	.word	0x200000a8

0801cb8c <putchar>:
 801cb8c:	4b02      	ldr	r3, [pc, #8]	; (801cb98 <putchar+0xc>)
 801cb8e:	4601      	mov	r1, r0
 801cb90:	6818      	ldr	r0, [r3, #0]
 801cb92:	6882      	ldr	r2, [r0, #8]
 801cb94:	f000 bf76 	b.w	801da84 <_putc_r>
 801cb98:	200000a8 	.word	0x200000a8

0801cb9c <_puts_r>:
 801cb9c:	6a03      	ldr	r3, [r0, #32]
 801cb9e:	b570      	push	{r4, r5, r6, lr}
 801cba0:	6884      	ldr	r4, [r0, #8]
 801cba2:	4605      	mov	r5, r0
 801cba4:	460e      	mov	r6, r1
 801cba6:	b90b      	cbnz	r3, 801cbac <_puts_r+0x10>
 801cba8:	f7ff fee0 	bl	801c96c <__sinit>
 801cbac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cbae:	07db      	lsls	r3, r3, #31
 801cbb0:	d405      	bmi.n	801cbbe <_puts_r+0x22>
 801cbb2:	89a3      	ldrh	r3, [r4, #12]
 801cbb4:	0598      	lsls	r0, r3, #22
 801cbb6:	d402      	bmi.n	801cbbe <_puts_r+0x22>
 801cbb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cbba:	f000 fb9b 	bl	801d2f4 <__retarget_lock_acquire_recursive>
 801cbbe:	89a3      	ldrh	r3, [r4, #12]
 801cbc0:	0719      	lsls	r1, r3, #28
 801cbc2:	d513      	bpl.n	801cbec <_puts_r+0x50>
 801cbc4:	6923      	ldr	r3, [r4, #16]
 801cbc6:	b18b      	cbz	r3, 801cbec <_puts_r+0x50>
 801cbc8:	3e01      	subs	r6, #1
 801cbca:	68a3      	ldr	r3, [r4, #8]
 801cbcc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801cbd0:	3b01      	subs	r3, #1
 801cbd2:	60a3      	str	r3, [r4, #8]
 801cbd4:	b9e9      	cbnz	r1, 801cc12 <_puts_r+0x76>
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	da2e      	bge.n	801cc38 <_puts_r+0x9c>
 801cbda:	4622      	mov	r2, r4
 801cbdc:	210a      	movs	r1, #10
 801cbde:	4628      	mov	r0, r5
 801cbe0:	f000 f9b7 	bl	801cf52 <__swbuf_r>
 801cbe4:	3001      	adds	r0, #1
 801cbe6:	d007      	beq.n	801cbf8 <_puts_r+0x5c>
 801cbe8:	250a      	movs	r5, #10
 801cbea:	e007      	b.n	801cbfc <_puts_r+0x60>
 801cbec:	4621      	mov	r1, r4
 801cbee:	4628      	mov	r0, r5
 801cbf0:	f000 f9ec 	bl	801cfcc <__swsetup_r>
 801cbf4:	2800      	cmp	r0, #0
 801cbf6:	d0e7      	beq.n	801cbc8 <_puts_r+0x2c>
 801cbf8:	f04f 35ff 	mov.w	r5, #4294967295
 801cbfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cbfe:	07da      	lsls	r2, r3, #31
 801cc00:	d405      	bmi.n	801cc0e <_puts_r+0x72>
 801cc02:	89a3      	ldrh	r3, [r4, #12]
 801cc04:	059b      	lsls	r3, r3, #22
 801cc06:	d402      	bmi.n	801cc0e <_puts_r+0x72>
 801cc08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cc0a:	f000 fb74 	bl	801d2f6 <__retarget_lock_release_recursive>
 801cc0e:	4628      	mov	r0, r5
 801cc10:	bd70      	pop	{r4, r5, r6, pc}
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	da04      	bge.n	801cc20 <_puts_r+0x84>
 801cc16:	69a2      	ldr	r2, [r4, #24]
 801cc18:	429a      	cmp	r2, r3
 801cc1a:	dc06      	bgt.n	801cc2a <_puts_r+0x8e>
 801cc1c:	290a      	cmp	r1, #10
 801cc1e:	d004      	beq.n	801cc2a <_puts_r+0x8e>
 801cc20:	6823      	ldr	r3, [r4, #0]
 801cc22:	1c5a      	adds	r2, r3, #1
 801cc24:	6022      	str	r2, [r4, #0]
 801cc26:	7019      	strb	r1, [r3, #0]
 801cc28:	e7cf      	b.n	801cbca <_puts_r+0x2e>
 801cc2a:	4622      	mov	r2, r4
 801cc2c:	4628      	mov	r0, r5
 801cc2e:	f000 f990 	bl	801cf52 <__swbuf_r>
 801cc32:	3001      	adds	r0, #1
 801cc34:	d1c9      	bne.n	801cbca <_puts_r+0x2e>
 801cc36:	e7df      	b.n	801cbf8 <_puts_r+0x5c>
 801cc38:	6823      	ldr	r3, [r4, #0]
 801cc3a:	250a      	movs	r5, #10
 801cc3c:	1c5a      	adds	r2, r3, #1
 801cc3e:	6022      	str	r2, [r4, #0]
 801cc40:	701d      	strb	r5, [r3, #0]
 801cc42:	e7db      	b.n	801cbfc <_puts_r+0x60>

0801cc44 <puts>:
 801cc44:	4b02      	ldr	r3, [pc, #8]	; (801cc50 <puts+0xc>)
 801cc46:	4601      	mov	r1, r0
 801cc48:	6818      	ldr	r0, [r3, #0]
 801cc4a:	f7ff bfa7 	b.w	801cb9c <_puts_r>
 801cc4e:	bf00      	nop
 801cc50:	200000a8 	.word	0x200000a8

0801cc54 <lflush>:
 801cc54:	898b      	ldrh	r3, [r1, #12]
 801cc56:	f003 0309 	and.w	r3, r3, #9
 801cc5a:	2b09      	cmp	r3, #9
 801cc5c:	d103      	bne.n	801cc66 <lflush+0x12>
 801cc5e:	4b03      	ldr	r3, [pc, #12]	; (801cc6c <lflush+0x18>)
 801cc60:	6818      	ldr	r0, [r3, #0]
 801cc62:	f7ff bd7b 	b.w	801c75c <_fflush_r>
 801cc66:	2000      	movs	r0, #0
 801cc68:	4770      	bx	lr
 801cc6a:	bf00      	nop
 801cc6c:	200000a8 	.word	0x200000a8

0801cc70 <__srefill_r>:
 801cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc72:	460c      	mov	r4, r1
 801cc74:	4605      	mov	r5, r0
 801cc76:	b118      	cbz	r0, 801cc80 <__srefill_r+0x10>
 801cc78:	6a03      	ldr	r3, [r0, #32]
 801cc7a:	b90b      	cbnz	r3, 801cc80 <__srefill_r+0x10>
 801cc7c:	f7ff fe76 	bl	801c96c <__sinit>
 801cc80:	2300      	movs	r3, #0
 801cc82:	6063      	str	r3, [r4, #4]
 801cc84:	89a3      	ldrh	r3, [r4, #12]
 801cc86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cc8a:	069e      	lsls	r6, r3, #26
 801cc8c:	d502      	bpl.n	801cc94 <__srefill_r+0x24>
 801cc8e:	f04f 30ff 	mov.w	r0, #4294967295
 801cc92:	e05c      	b.n	801cd4e <__srefill_r+0xde>
 801cc94:	0758      	lsls	r0, r3, #29
 801cc96:	d448      	bmi.n	801cd2a <__srefill_r+0xba>
 801cc98:	06d9      	lsls	r1, r3, #27
 801cc9a:	d405      	bmi.n	801cca8 <__srefill_r+0x38>
 801cc9c:	2309      	movs	r3, #9
 801cc9e:	602b      	str	r3, [r5, #0]
 801cca0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cca4:	81a3      	strh	r3, [r4, #12]
 801cca6:	e7f2      	b.n	801cc8e <__srefill_r+0x1e>
 801cca8:	071a      	lsls	r2, r3, #28
 801ccaa:	d50b      	bpl.n	801ccc4 <__srefill_r+0x54>
 801ccac:	4621      	mov	r1, r4
 801ccae:	4628      	mov	r0, r5
 801ccb0:	f7ff fd54 	bl	801c75c <_fflush_r>
 801ccb4:	2800      	cmp	r0, #0
 801ccb6:	d1ea      	bne.n	801cc8e <__srefill_r+0x1e>
 801ccb8:	89a3      	ldrh	r3, [r4, #12]
 801ccba:	60a0      	str	r0, [r4, #8]
 801ccbc:	f023 0308 	bic.w	r3, r3, #8
 801ccc0:	81a3      	strh	r3, [r4, #12]
 801ccc2:	61a0      	str	r0, [r4, #24]
 801ccc4:	89a3      	ldrh	r3, [r4, #12]
 801ccc6:	f043 0304 	orr.w	r3, r3, #4
 801ccca:	81a3      	strh	r3, [r4, #12]
 801cccc:	6923      	ldr	r3, [r4, #16]
 801ccce:	b91b      	cbnz	r3, 801ccd8 <__srefill_r+0x68>
 801ccd0:	4621      	mov	r1, r4
 801ccd2:	4628      	mov	r0, r5
 801ccd4:	f000 fe9a 	bl	801da0c <__smakebuf_r>
 801ccd8:	89a6      	ldrh	r6, [r4, #12]
 801ccda:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 801ccde:	07b3      	lsls	r3, r6, #30
 801cce0:	d00f      	beq.n	801cd02 <__srefill_r+0x92>
 801cce2:	2301      	movs	r3, #1
 801cce4:	4a1b      	ldr	r2, [pc, #108]	; (801cd54 <__srefill_r+0xe4>)
 801cce6:	491c      	ldr	r1, [pc, #112]	; (801cd58 <__srefill_r+0xe8>)
 801cce8:	481c      	ldr	r0, [pc, #112]	; (801cd5c <__srefill_r+0xec>)
 801ccea:	81a3      	strh	r3, [r4, #12]
 801ccec:	f006 0609 	and.w	r6, r6, #9
 801ccf0:	f7ff ff1c 	bl	801cb2c <_fwalk_sglue>
 801ccf4:	2e09      	cmp	r6, #9
 801ccf6:	81a7      	strh	r7, [r4, #12]
 801ccf8:	d103      	bne.n	801cd02 <__srefill_r+0x92>
 801ccfa:	4621      	mov	r1, r4
 801ccfc:	4628      	mov	r0, r5
 801ccfe:	f7ff fca7 	bl	801c650 <__sflush_r>
 801cd02:	6922      	ldr	r2, [r4, #16]
 801cd04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801cd06:	6963      	ldr	r3, [r4, #20]
 801cd08:	6a21      	ldr	r1, [r4, #32]
 801cd0a:	6022      	str	r2, [r4, #0]
 801cd0c:	4628      	mov	r0, r5
 801cd0e:	47b0      	blx	r6
 801cd10:	2800      	cmp	r0, #0
 801cd12:	6060      	str	r0, [r4, #4]
 801cd14:	dc1c      	bgt.n	801cd50 <__srefill_r+0xe0>
 801cd16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd1a:	bf17      	itett	ne
 801cd1c:	2200      	movne	r2, #0
 801cd1e:	f043 0320 	orreq.w	r3, r3, #32
 801cd22:	6062      	strne	r2, [r4, #4]
 801cd24:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 801cd28:	e7bc      	b.n	801cca4 <__srefill_r+0x34>
 801cd2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cd2c:	2900      	cmp	r1, #0
 801cd2e:	d0cd      	beq.n	801cccc <__srefill_r+0x5c>
 801cd30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cd34:	4299      	cmp	r1, r3
 801cd36:	d002      	beq.n	801cd3e <__srefill_r+0xce>
 801cd38:	4628      	mov	r0, r5
 801cd3a:	f000 faeb 	bl	801d314 <_free_r>
 801cd3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cd40:	6063      	str	r3, [r4, #4]
 801cd42:	2000      	movs	r0, #0
 801cd44:	6360      	str	r0, [r4, #52]	; 0x34
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d0c0      	beq.n	801cccc <__srefill_r+0x5c>
 801cd4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801cd4c:	6023      	str	r3, [r4, #0]
 801cd4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd50:	2000      	movs	r0, #0
 801cd52:	e7fc      	b.n	801cd4e <__srefill_r+0xde>
 801cd54:	20000050 	.word	0x20000050
 801cd58:	0801cc55 	.word	0x0801cc55
 801cd5c:	2000005c 	.word	0x2000005c

0801cd60 <setbuf>:
 801cd60:	fab1 f281 	clz	r2, r1
 801cd64:	0952      	lsrs	r2, r2, #5
 801cd66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cd6a:	0052      	lsls	r2, r2, #1
 801cd6c:	f000 b800 	b.w	801cd70 <setvbuf>

0801cd70 <setvbuf>:
 801cd70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cd74:	461d      	mov	r5, r3
 801cd76:	4b54      	ldr	r3, [pc, #336]	; (801cec8 <setvbuf+0x158>)
 801cd78:	681f      	ldr	r7, [r3, #0]
 801cd7a:	4604      	mov	r4, r0
 801cd7c:	460e      	mov	r6, r1
 801cd7e:	4690      	mov	r8, r2
 801cd80:	b127      	cbz	r7, 801cd8c <setvbuf+0x1c>
 801cd82:	6a3b      	ldr	r3, [r7, #32]
 801cd84:	b913      	cbnz	r3, 801cd8c <setvbuf+0x1c>
 801cd86:	4638      	mov	r0, r7
 801cd88:	f7ff fdf0 	bl	801c96c <__sinit>
 801cd8c:	f1b8 0f02 	cmp.w	r8, #2
 801cd90:	d006      	beq.n	801cda0 <setvbuf+0x30>
 801cd92:	f1b8 0f01 	cmp.w	r8, #1
 801cd96:	f200 8094 	bhi.w	801cec2 <setvbuf+0x152>
 801cd9a:	2d00      	cmp	r5, #0
 801cd9c:	f2c0 8091 	blt.w	801cec2 <setvbuf+0x152>
 801cda0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cda2:	07da      	lsls	r2, r3, #31
 801cda4:	d405      	bmi.n	801cdb2 <setvbuf+0x42>
 801cda6:	89a3      	ldrh	r3, [r4, #12]
 801cda8:	059b      	lsls	r3, r3, #22
 801cdaa:	d402      	bmi.n	801cdb2 <setvbuf+0x42>
 801cdac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cdae:	f000 faa1 	bl	801d2f4 <__retarget_lock_acquire_recursive>
 801cdb2:	4621      	mov	r1, r4
 801cdb4:	4638      	mov	r0, r7
 801cdb6:	f7ff fcd1 	bl	801c75c <_fflush_r>
 801cdba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cdbc:	b141      	cbz	r1, 801cdd0 <setvbuf+0x60>
 801cdbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cdc2:	4299      	cmp	r1, r3
 801cdc4:	d002      	beq.n	801cdcc <setvbuf+0x5c>
 801cdc6:	4638      	mov	r0, r7
 801cdc8:	f000 faa4 	bl	801d314 <_free_r>
 801cdcc:	2300      	movs	r3, #0
 801cdce:	6363      	str	r3, [r4, #52]	; 0x34
 801cdd0:	2300      	movs	r3, #0
 801cdd2:	61a3      	str	r3, [r4, #24]
 801cdd4:	6063      	str	r3, [r4, #4]
 801cdd6:	89a3      	ldrh	r3, [r4, #12]
 801cdd8:	0618      	lsls	r0, r3, #24
 801cdda:	d503      	bpl.n	801cde4 <setvbuf+0x74>
 801cddc:	6921      	ldr	r1, [r4, #16]
 801cdde:	4638      	mov	r0, r7
 801cde0:	f000 fa98 	bl	801d314 <_free_r>
 801cde4:	89a3      	ldrh	r3, [r4, #12]
 801cde6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801cdea:	f023 0303 	bic.w	r3, r3, #3
 801cdee:	f1b8 0f02 	cmp.w	r8, #2
 801cdf2:	81a3      	strh	r3, [r4, #12]
 801cdf4:	d05f      	beq.n	801ceb6 <setvbuf+0x146>
 801cdf6:	ab01      	add	r3, sp, #4
 801cdf8:	466a      	mov	r2, sp
 801cdfa:	4621      	mov	r1, r4
 801cdfc:	4638      	mov	r0, r7
 801cdfe:	f000 fddf 	bl	801d9c0 <__swhatbuf_r>
 801ce02:	89a3      	ldrh	r3, [r4, #12]
 801ce04:	4318      	orrs	r0, r3
 801ce06:	81a0      	strh	r0, [r4, #12]
 801ce08:	bb2d      	cbnz	r5, 801ce56 <setvbuf+0xe6>
 801ce0a:	9d00      	ldr	r5, [sp, #0]
 801ce0c:	4628      	mov	r0, r5
 801ce0e:	f7ff fb03 	bl	801c418 <malloc>
 801ce12:	4606      	mov	r6, r0
 801ce14:	2800      	cmp	r0, #0
 801ce16:	d150      	bne.n	801ceba <setvbuf+0x14a>
 801ce18:	f8dd 9000 	ldr.w	r9, [sp]
 801ce1c:	45a9      	cmp	r9, r5
 801ce1e:	d13e      	bne.n	801ce9e <setvbuf+0x12e>
 801ce20:	f04f 35ff 	mov.w	r5, #4294967295
 801ce24:	2200      	movs	r2, #0
 801ce26:	60a2      	str	r2, [r4, #8]
 801ce28:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801ce2c:	6022      	str	r2, [r4, #0]
 801ce2e:	6122      	str	r2, [r4, #16]
 801ce30:	2201      	movs	r2, #1
 801ce32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce36:	6162      	str	r2, [r4, #20]
 801ce38:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ce3a:	f043 0302 	orr.w	r3, r3, #2
 801ce3e:	07d1      	lsls	r1, r2, #31
 801ce40:	81a3      	strh	r3, [r4, #12]
 801ce42:	d404      	bmi.n	801ce4e <setvbuf+0xde>
 801ce44:	059b      	lsls	r3, r3, #22
 801ce46:	d402      	bmi.n	801ce4e <setvbuf+0xde>
 801ce48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ce4a:	f000 fa54 	bl	801d2f6 <__retarget_lock_release_recursive>
 801ce4e:	4628      	mov	r0, r5
 801ce50:	b003      	add	sp, #12
 801ce52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce56:	2e00      	cmp	r6, #0
 801ce58:	d0d8      	beq.n	801ce0c <setvbuf+0x9c>
 801ce5a:	6a3b      	ldr	r3, [r7, #32]
 801ce5c:	b913      	cbnz	r3, 801ce64 <setvbuf+0xf4>
 801ce5e:	4638      	mov	r0, r7
 801ce60:	f7ff fd84 	bl	801c96c <__sinit>
 801ce64:	f1b8 0f01 	cmp.w	r8, #1
 801ce68:	bf08      	it	eq
 801ce6a:	89a3      	ldrheq	r3, [r4, #12]
 801ce6c:	6026      	str	r6, [r4, #0]
 801ce6e:	bf04      	itt	eq
 801ce70:	f043 0301 	orreq.w	r3, r3, #1
 801ce74:	81a3      	strheq	r3, [r4, #12]
 801ce76:	89a3      	ldrh	r3, [r4, #12]
 801ce78:	f013 0208 	ands.w	r2, r3, #8
 801ce7c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801ce80:	d01d      	beq.n	801cebe <setvbuf+0x14e>
 801ce82:	07da      	lsls	r2, r3, #31
 801ce84:	bf41      	itttt	mi
 801ce86:	2200      	movmi	r2, #0
 801ce88:	426d      	negmi	r5, r5
 801ce8a:	60a2      	strmi	r2, [r4, #8]
 801ce8c:	61a5      	strmi	r5, [r4, #24]
 801ce8e:	bf58      	it	pl
 801ce90:	60a5      	strpl	r5, [r4, #8]
 801ce92:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801ce94:	f015 0501 	ands.w	r5, r5, #1
 801ce98:	d0d4      	beq.n	801ce44 <setvbuf+0xd4>
 801ce9a:	2500      	movs	r5, #0
 801ce9c:	e7d7      	b.n	801ce4e <setvbuf+0xde>
 801ce9e:	4648      	mov	r0, r9
 801cea0:	f7ff faba 	bl	801c418 <malloc>
 801cea4:	4606      	mov	r6, r0
 801cea6:	2800      	cmp	r0, #0
 801cea8:	d0ba      	beq.n	801ce20 <setvbuf+0xb0>
 801ceaa:	89a3      	ldrh	r3, [r4, #12]
 801ceac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ceb0:	81a3      	strh	r3, [r4, #12]
 801ceb2:	464d      	mov	r5, r9
 801ceb4:	e7d1      	b.n	801ce5a <setvbuf+0xea>
 801ceb6:	2500      	movs	r5, #0
 801ceb8:	e7b4      	b.n	801ce24 <setvbuf+0xb4>
 801ceba:	46a9      	mov	r9, r5
 801cebc:	e7f5      	b.n	801ceaa <setvbuf+0x13a>
 801cebe:	60a2      	str	r2, [r4, #8]
 801cec0:	e7e7      	b.n	801ce92 <setvbuf+0x122>
 801cec2:	f04f 35ff 	mov.w	r5, #4294967295
 801cec6:	e7c2      	b.n	801ce4e <setvbuf+0xde>
 801cec8:	200000a8 	.word	0x200000a8

0801cecc <__sread>:
 801cecc:	b510      	push	{r4, lr}
 801cece:	460c      	mov	r4, r1
 801ced0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ced4:	f000 f9ae 	bl	801d234 <_read_r>
 801ced8:	2800      	cmp	r0, #0
 801ceda:	bfab      	itete	ge
 801cedc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cede:	89a3      	ldrhlt	r3, [r4, #12]
 801cee0:	181b      	addge	r3, r3, r0
 801cee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cee6:	bfac      	ite	ge
 801cee8:	6563      	strge	r3, [r4, #84]	; 0x54
 801ceea:	81a3      	strhlt	r3, [r4, #12]
 801ceec:	bd10      	pop	{r4, pc}

0801ceee <__swrite>:
 801ceee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cef2:	461f      	mov	r7, r3
 801cef4:	898b      	ldrh	r3, [r1, #12]
 801cef6:	05db      	lsls	r3, r3, #23
 801cef8:	4605      	mov	r5, r0
 801cefa:	460c      	mov	r4, r1
 801cefc:	4616      	mov	r6, r2
 801cefe:	d505      	bpl.n	801cf0c <__swrite+0x1e>
 801cf00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf04:	2302      	movs	r3, #2
 801cf06:	2200      	movs	r2, #0
 801cf08:	f000 f970 	bl	801d1ec <_lseek_r>
 801cf0c:	89a3      	ldrh	r3, [r4, #12]
 801cf0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cf16:	81a3      	strh	r3, [r4, #12]
 801cf18:	4632      	mov	r2, r6
 801cf1a:	463b      	mov	r3, r7
 801cf1c:	4628      	mov	r0, r5
 801cf1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf22:	f000 b9a9 	b.w	801d278 <_write_r>

0801cf26 <__sseek>:
 801cf26:	b510      	push	{r4, lr}
 801cf28:	460c      	mov	r4, r1
 801cf2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf2e:	f000 f95d 	bl	801d1ec <_lseek_r>
 801cf32:	1c43      	adds	r3, r0, #1
 801cf34:	89a3      	ldrh	r3, [r4, #12]
 801cf36:	bf15      	itete	ne
 801cf38:	6560      	strne	r0, [r4, #84]	; 0x54
 801cf3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cf3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cf42:	81a3      	strheq	r3, [r4, #12]
 801cf44:	bf18      	it	ne
 801cf46:	81a3      	strhne	r3, [r4, #12]
 801cf48:	bd10      	pop	{r4, pc}

0801cf4a <__sclose>:
 801cf4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf4e:	f000 b93d 	b.w	801d1cc <_close_r>

0801cf52 <__swbuf_r>:
 801cf52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf54:	460e      	mov	r6, r1
 801cf56:	4614      	mov	r4, r2
 801cf58:	4605      	mov	r5, r0
 801cf5a:	b118      	cbz	r0, 801cf64 <__swbuf_r+0x12>
 801cf5c:	6a03      	ldr	r3, [r0, #32]
 801cf5e:	b90b      	cbnz	r3, 801cf64 <__swbuf_r+0x12>
 801cf60:	f7ff fd04 	bl	801c96c <__sinit>
 801cf64:	69a3      	ldr	r3, [r4, #24]
 801cf66:	60a3      	str	r3, [r4, #8]
 801cf68:	89a3      	ldrh	r3, [r4, #12]
 801cf6a:	071a      	lsls	r2, r3, #28
 801cf6c:	d525      	bpl.n	801cfba <__swbuf_r+0x68>
 801cf6e:	6923      	ldr	r3, [r4, #16]
 801cf70:	b31b      	cbz	r3, 801cfba <__swbuf_r+0x68>
 801cf72:	6823      	ldr	r3, [r4, #0]
 801cf74:	6922      	ldr	r2, [r4, #16]
 801cf76:	1a98      	subs	r0, r3, r2
 801cf78:	6963      	ldr	r3, [r4, #20]
 801cf7a:	b2f6      	uxtb	r6, r6
 801cf7c:	4283      	cmp	r3, r0
 801cf7e:	4637      	mov	r7, r6
 801cf80:	dc04      	bgt.n	801cf8c <__swbuf_r+0x3a>
 801cf82:	4621      	mov	r1, r4
 801cf84:	4628      	mov	r0, r5
 801cf86:	f7ff fbe9 	bl	801c75c <_fflush_r>
 801cf8a:	b9e0      	cbnz	r0, 801cfc6 <__swbuf_r+0x74>
 801cf8c:	68a3      	ldr	r3, [r4, #8]
 801cf8e:	3b01      	subs	r3, #1
 801cf90:	60a3      	str	r3, [r4, #8]
 801cf92:	6823      	ldr	r3, [r4, #0]
 801cf94:	1c5a      	adds	r2, r3, #1
 801cf96:	6022      	str	r2, [r4, #0]
 801cf98:	701e      	strb	r6, [r3, #0]
 801cf9a:	6962      	ldr	r2, [r4, #20]
 801cf9c:	1c43      	adds	r3, r0, #1
 801cf9e:	429a      	cmp	r2, r3
 801cfa0:	d004      	beq.n	801cfac <__swbuf_r+0x5a>
 801cfa2:	89a3      	ldrh	r3, [r4, #12]
 801cfa4:	07db      	lsls	r3, r3, #31
 801cfa6:	d506      	bpl.n	801cfb6 <__swbuf_r+0x64>
 801cfa8:	2e0a      	cmp	r6, #10
 801cfaa:	d104      	bne.n	801cfb6 <__swbuf_r+0x64>
 801cfac:	4621      	mov	r1, r4
 801cfae:	4628      	mov	r0, r5
 801cfb0:	f7ff fbd4 	bl	801c75c <_fflush_r>
 801cfb4:	b938      	cbnz	r0, 801cfc6 <__swbuf_r+0x74>
 801cfb6:	4638      	mov	r0, r7
 801cfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfba:	4621      	mov	r1, r4
 801cfbc:	4628      	mov	r0, r5
 801cfbe:	f000 f805 	bl	801cfcc <__swsetup_r>
 801cfc2:	2800      	cmp	r0, #0
 801cfc4:	d0d5      	beq.n	801cf72 <__swbuf_r+0x20>
 801cfc6:	f04f 37ff 	mov.w	r7, #4294967295
 801cfca:	e7f4      	b.n	801cfb6 <__swbuf_r+0x64>

0801cfcc <__swsetup_r>:
 801cfcc:	b538      	push	{r3, r4, r5, lr}
 801cfce:	4b2a      	ldr	r3, [pc, #168]	; (801d078 <__swsetup_r+0xac>)
 801cfd0:	4605      	mov	r5, r0
 801cfd2:	6818      	ldr	r0, [r3, #0]
 801cfd4:	460c      	mov	r4, r1
 801cfd6:	b118      	cbz	r0, 801cfe0 <__swsetup_r+0x14>
 801cfd8:	6a03      	ldr	r3, [r0, #32]
 801cfda:	b90b      	cbnz	r3, 801cfe0 <__swsetup_r+0x14>
 801cfdc:	f7ff fcc6 	bl	801c96c <__sinit>
 801cfe0:	89a3      	ldrh	r3, [r4, #12]
 801cfe2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cfe6:	0718      	lsls	r0, r3, #28
 801cfe8:	d422      	bmi.n	801d030 <__swsetup_r+0x64>
 801cfea:	06d9      	lsls	r1, r3, #27
 801cfec:	d407      	bmi.n	801cffe <__swsetup_r+0x32>
 801cfee:	2309      	movs	r3, #9
 801cff0:	602b      	str	r3, [r5, #0]
 801cff2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cff6:	81a3      	strh	r3, [r4, #12]
 801cff8:	f04f 30ff 	mov.w	r0, #4294967295
 801cffc:	e034      	b.n	801d068 <__swsetup_r+0x9c>
 801cffe:	0758      	lsls	r0, r3, #29
 801d000:	d512      	bpl.n	801d028 <__swsetup_r+0x5c>
 801d002:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d004:	b141      	cbz	r1, 801d018 <__swsetup_r+0x4c>
 801d006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d00a:	4299      	cmp	r1, r3
 801d00c:	d002      	beq.n	801d014 <__swsetup_r+0x48>
 801d00e:	4628      	mov	r0, r5
 801d010:	f000 f980 	bl	801d314 <_free_r>
 801d014:	2300      	movs	r3, #0
 801d016:	6363      	str	r3, [r4, #52]	; 0x34
 801d018:	89a3      	ldrh	r3, [r4, #12]
 801d01a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d01e:	81a3      	strh	r3, [r4, #12]
 801d020:	2300      	movs	r3, #0
 801d022:	6063      	str	r3, [r4, #4]
 801d024:	6923      	ldr	r3, [r4, #16]
 801d026:	6023      	str	r3, [r4, #0]
 801d028:	89a3      	ldrh	r3, [r4, #12]
 801d02a:	f043 0308 	orr.w	r3, r3, #8
 801d02e:	81a3      	strh	r3, [r4, #12]
 801d030:	6923      	ldr	r3, [r4, #16]
 801d032:	b94b      	cbnz	r3, 801d048 <__swsetup_r+0x7c>
 801d034:	89a3      	ldrh	r3, [r4, #12]
 801d036:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d03a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d03e:	d003      	beq.n	801d048 <__swsetup_r+0x7c>
 801d040:	4621      	mov	r1, r4
 801d042:	4628      	mov	r0, r5
 801d044:	f000 fce2 	bl	801da0c <__smakebuf_r>
 801d048:	89a0      	ldrh	r0, [r4, #12]
 801d04a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d04e:	f010 0301 	ands.w	r3, r0, #1
 801d052:	d00a      	beq.n	801d06a <__swsetup_r+0x9e>
 801d054:	2300      	movs	r3, #0
 801d056:	60a3      	str	r3, [r4, #8]
 801d058:	6963      	ldr	r3, [r4, #20]
 801d05a:	425b      	negs	r3, r3
 801d05c:	61a3      	str	r3, [r4, #24]
 801d05e:	6923      	ldr	r3, [r4, #16]
 801d060:	b943      	cbnz	r3, 801d074 <__swsetup_r+0xa8>
 801d062:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d066:	d1c4      	bne.n	801cff2 <__swsetup_r+0x26>
 801d068:	bd38      	pop	{r3, r4, r5, pc}
 801d06a:	0781      	lsls	r1, r0, #30
 801d06c:	bf58      	it	pl
 801d06e:	6963      	ldrpl	r3, [r4, #20]
 801d070:	60a3      	str	r3, [r4, #8]
 801d072:	e7f4      	b.n	801d05e <__swsetup_r+0x92>
 801d074:	2000      	movs	r0, #0
 801d076:	e7f7      	b.n	801d068 <__swsetup_r+0x9c>
 801d078:	200000a8 	.word	0x200000a8

0801d07c <_fseeko_r>:
 801d07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d080:	460c      	mov	r4, r1
 801d082:	4617      	mov	r7, r2
 801d084:	461d      	mov	r5, r3
 801d086:	4606      	mov	r6, r0
 801d088:	b118      	cbz	r0, 801d092 <_fseeko_r+0x16>
 801d08a:	6a03      	ldr	r3, [r0, #32]
 801d08c:	b90b      	cbnz	r3, 801d092 <_fseeko_r+0x16>
 801d08e:	f7ff fc6d 	bl	801c96c <__sinit>
 801d092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d094:	07d9      	lsls	r1, r3, #31
 801d096:	d405      	bmi.n	801d0a4 <_fseeko_r+0x28>
 801d098:	89a3      	ldrh	r3, [r4, #12]
 801d09a:	059a      	lsls	r2, r3, #22
 801d09c:	d402      	bmi.n	801d0a4 <_fseeko_r+0x28>
 801d09e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d0a0:	f000 f928 	bl	801d2f4 <__retarget_lock_acquire_recursive>
 801d0a4:	89a3      	ldrh	r3, [r4, #12]
 801d0a6:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801d0aa:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801d0ae:	d103      	bne.n	801d0b8 <_fseeko_r+0x3c>
 801d0b0:	4621      	mov	r1, r4
 801d0b2:	4630      	mov	r0, r6
 801d0b4:	f7ff fb52 	bl	801c75c <_fflush_r>
 801d0b8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801d0bc:	f1b8 0f00 	cmp.w	r8, #0
 801d0c0:	d109      	bne.n	801d0d6 <_fseeko_r+0x5a>
 801d0c2:	231d      	movs	r3, #29
 801d0c4:	6033      	str	r3, [r6, #0]
 801d0c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d0c8:	07d9      	lsls	r1, r3, #31
 801d0ca:	d56e      	bpl.n	801d1aa <_fseeko_r+0x12e>
 801d0cc:	f04f 35ff 	mov.w	r5, #4294967295
 801d0d0:	4628      	mov	r0, r5
 801d0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0d6:	2d01      	cmp	r5, #1
 801d0d8:	d036      	beq.n	801d148 <_fseeko_r+0xcc>
 801d0da:	f035 0302 	bics.w	r3, r5, #2
 801d0de:	d162      	bne.n	801d1a6 <_fseeko_r+0x12a>
 801d0e0:	6923      	ldr	r3, [r4, #16]
 801d0e2:	b91b      	cbnz	r3, 801d0ec <_fseeko_r+0x70>
 801d0e4:	4621      	mov	r1, r4
 801d0e6:	4630      	mov	r0, r6
 801d0e8:	f000 fc90 	bl	801da0c <__smakebuf_r>
 801d0ec:	4621      	mov	r1, r4
 801d0ee:	4630      	mov	r0, r6
 801d0f0:	f7ff fb34 	bl	801c75c <_fflush_r>
 801d0f4:	2800      	cmp	r0, #0
 801d0f6:	d1e6      	bne.n	801d0c6 <_fseeko_r+0x4a>
 801d0f8:	6a21      	ldr	r1, [r4, #32]
 801d0fa:	462b      	mov	r3, r5
 801d0fc:	463a      	mov	r2, r7
 801d0fe:	4630      	mov	r0, r6
 801d100:	47c0      	blx	r8
 801d102:	3001      	adds	r0, #1
 801d104:	d0df      	beq.n	801d0c6 <_fseeko_r+0x4a>
 801d106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d108:	b141      	cbz	r1, 801d11c <_fseeko_r+0xa0>
 801d10a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d10e:	4299      	cmp	r1, r3
 801d110:	d002      	beq.n	801d118 <_fseeko_r+0x9c>
 801d112:	4630      	mov	r0, r6
 801d114:	f000 f8fe 	bl	801d314 <_free_r>
 801d118:	2300      	movs	r3, #0
 801d11a:	6363      	str	r3, [r4, #52]	; 0x34
 801d11c:	6923      	ldr	r3, [r4, #16]
 801d11e:	6023      	str	r3, [r4, #0]
 801d120:	89a3      	ldrh	r3, [r4, #12]
 801d122:	2600      	movs	r6, #0
 801d124:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801d128:	6066      	str	r6, [r4, #4]
 801d12a:	81a3      	strh	r3, [r4, #12]
 801d12c:	2208      	movs	r2, #8
 801d12e:	4631      	mov	r1, r6
 801d130:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d134:	f000 f842 	bl	801d1bc <memset>
 801d138:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801d13a:	f015 0501 	ands.w	r5, r5, #1
 801d13e:	d13b      	bne.n	801d1b8 <_fseeko_r+0x13c>
 801d140:	89a3      	ldrh	r3, [r4, #12]
 801d142:	059b      	lsls	r3, r3, #22
 801d144:	d4c4      	bmi.n	801d0d0 <_fseeko_r+0x54>
 801d146:	e021      	b.n	801d18c <_fseeko_r+0x110>
 801d148:	4621      	mov	r1, r4
 801d14a:	4630      	mov	r0, r6
 801d14c:	f7ff fb06 	bl	801c75c <_fflush_r>
 801d150:	89a2      	ldrh	r2, [r4, #12]
 801d152:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d156:	d00c      	beq.n	801d172 <_fseeko_r+0xf6>
 801d158:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801d15a:	89a3      	ldrh	r3, [r4, #12]
 801d15c:	075a      	lsls	r2, r3, #29
 801d15e:	d519      	bpl.n	801d194 <_fseeko_r+0x118>
 801d160:	6863      	ldr	r3, [r4, #4]
 801d162:	1aed      	subs	r5, r5, r3
 801d164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d166:	b10b      	cbz	r3, 801d16c <_fseeko_r+0xf0>
 801d168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d16a:	1aed      	subs	r5, r5, r3
 801d16c:	442f      	add	r7, r5
 801d16e:	2500      	movs	r5, #0
 801d170:	e7b6      	b.n	801d0e0 <_fseeko_r+0x64>
 801d172:	462b      	mov	r3, r5
 801d174:	6a21      	ldr	r1, [r4, #32]
 801d176:	4630      	mov	r0, r6
 801d178:	47c0      	blx	r8
 801d17a:	1c43      	adds	r3, r0, #1
 801d17c:	4605      	mov	r5, r0
 801d17e:	d1ec      	bne.n	801d15a <_fseeko_r+0xde>
 801d180:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d182:	07d8      	lsls	r0, r3, #31
 801d184:	d4a2      	bmi.n	801d0cc <_fseeko_r+0x50>
 801d186:	89a3      	ldrh	r3, [r4, #12]
 801d188:	0599      	lsls	r1, r3, #22
 801d18a:	d49f      	bmi.n	801d0cc <_fseeko_r+0x50>
 801d18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d18e:	f000 f8b2 	bl	801d2f6 <__retarget_lock_release_recursive>
 801d192:	e79d      	b.n	801d0d0 <_fseeko_r+0x54>
 801d194:	0718      	lsls	r0, r3, #28
 801d196:	d5e9      	bpl.n	801d16c <_fseeko_r+0xf0>
 801d198:	6823      	ldr	r3, [r4, #0]
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d0e6      	beq.n	801d16c <_fseeko_r+0xf0>
 801d19e:	6922      	ldr	r2, [r4, #16]
 801d1a0:	1a9b      	subs	r3, r3, r2
 801d1a2:	441d      	add	r5, r3
 801d1a4:	e7e2      	b.n	801d16c <_fseeko_r+0xf0>
 801d1a6:	2316      	movs	r3, #22
 801d1a8:	e78c      	b.n	801d0c4 <_fseeko_r+0x48>
 801d1aa:	89a3      	ldrh	r3, [r4, #12]
 801d1ac:	059a      	lsls	r2, r3, #22
 801d1ae:	d48d      	bmi.n	801d0cc <_fseeko_r+0x50>
 801d1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d1b2:	f000 f8a0 	bl	801d2f6 <__retarget_lock_release_recursive>
 801d1b6:	e789      	b.n	801d0cc <_fseeko_r+0x50>
 801d1b8:	4635      	mov	r5, r6
 801d1ba:	e789      	b.n	801d0d0 <_fseeko_r+0x54>

0801d1bc <memset>:
 801d1bc:	4402      	add	r2, r0
 801d1be:	4603      	mov	r3, r0
 801d1c0:	4293      	cmp	r3, r2
 801d1c2:	d100      	bne.n	801d1c6 <memset+0xa>
 801d1c4:	4770      	bx	lr
 801d1c6:	f803 1b01 	strb.w	r1, [r3], #1
 801d1ca:	e7f9      	b.n	801d1c0 <memset+0x4>

0801d1cc <_close_r>:
 801d1cc:	b538      	push	{r3, r4, r5, lr}
 801d1ce:	4d06      	ldr	r5, [pc, #24]	; (801d1e8 <_close_r+0x1c>)
 801d1d0:	2300      	movs	r3, #0
 801d1d2:	4604      	mov	r4, r0
 801d1d4:	4608      	mov	r0, r1
 801d1d6:	602b      	str	r3, [r5, #0]
 801d1d8:	f7e5 f8c9 	bl	800236e <_close>
 801d1dc:	1c43      	adds	r3, r0, #1
 801d1de:	d102      	bne.n	801d1e6 <_close_r+0x1a>
 801d1e0:	682b      	ldr	r3, [r5, #0]
 801d1e2:	b103      	cbz	r3, 801d1e6 <_close_r+0x1a>
 801d1e4:	6023      	str	r3, [r4, #0]
 801d1e6:	bd38      	pop	{r3, r4, r5, pc}
 801d1e8:	20002544 	.word	0x20002544

0801d1ec <_lseek_r>:
 801d1ec:	b538      	push	{r3, r4, r5, lr}
 801d1ee:	4d07      	ldr	r5, [pc, #28]	; (801d20c <_lseek_r+0x20>)
 801d1f0:	4604      	mov	r4, r0
 801d1f2:	4608      	mov	r0, r1
 801d1f4:	4611      	mov	r1, r2
 801d1f6:	2200      	movs	r2, #0
 801d1f8:	602a      	str	r2, [r5, #0]
 801d1fa:	461a      	mov	r2, r3
 801d1fc:	f7e5 f8de 	bl	80023bc <_lseek>
 801d200:	1c43      	adds	r3, r0, #1
 801d202:	d102      	bne.n	801d20a <_lseek_r+0x1e>
 801d204:	682b      	ldr	r3, [r5, #0]
 801d206:	b103      	cbz	r3, 801d20a <_lseek_r+0x1e>
 801d208:	6023      	str	r3, [r4, #0]
 801d20a:	bd38      	pop	{r3, r4, r5, pc}
 801d20c:	20002544 	.word	0x20002544

0801d210 <_open_r>:
 801d210:	b538      	push	{r3, r4, r5, lr}
 801d212:	4d07      	ldr	r5, [pc, #28]	; (801d230 <_open_r+0x20>)
 801d214:	4604      	mov	r4, r0
 801d216:	4608      	mov	r0, r1
 801d218:	4611      	mov	r1, r2
 801d21a:	2200      	movs	r2, #0
 801d21c:	602a      	str	r2, [r5, #0]
 801d21e:	461a      	mov	r2, r3
 801d220:	f7e5 f8d9 	bl	80023d6 <_open>
 801d224:	1c43      	adds	r3, r0, #1
 801d226:	d102      	bne.n	801d22e <_open_r+0x1e>
 801d228:	682b      	ldr	r3, [r5, #0]
 801d22a:	b103      	cbz	r3, 801d22e <_open_r+0x1e>
 801d22c:	6023      	str	r3, [r4, #0]
 801d22e:	bd38      	pop	{r3, r4, r5, pc}
 801d230:	20002544 	.word	0x20002544

0801d234 <_read_r>:
 801d234:	b538      	push	{r3, r4, r5, lr}
 801d236:	4d07      	ldr	r5, [pc, #28]	; (801d254 <_read_r+0x20>)
 801d238:	4604      	mov	r4, r0
 801d23a:	4608      	mov	r0, r1
 801d23c:	4611      	mov	r1, r2
 801d23e:	2200      	movs	r2, #0
 801d240:	602a      	str	r2, [r5, #0]
 801d242:	461a      	mov	r2, r3
 801d244:	f7e5 f876 	bl	8002334 <_read>
 801d248:	1c43      	adds	r3, r0, #1
 801d24a:	d102      	bne.n	801d252 <_read_r+0x1e>
 801d24c:	682b      	ldr	r3, [r5, #0]
 801d24e:	b103      	cbz	r3, 801d252 <_read_r+0x1e>
 801d250:	6023      	str	r3, [r4, #0]
 801d252:	bd38      	pop	{r3, r4, r5, pc}
 801d254:	20002544 	.word	0x20002544

0801d258 <_sbrk_r>:
 801d258:	b538      	push	{r3, r4, r5, lr}
 801d25a:	4d06      	ldr	r5, [pc, #24]	; (801d274 <_sbrk_r+0x1c>)
 801d25c:	2300      	movs	r3, #0
 801d25e:	4604      	mov	r4, r0
 801d260:	4608      	mov	r0, r1
 801d262:	602b      	str	r3, [r5, #0]
 801d264:	f7e5 f8c6 	bl	80023f4 <_sbrk>
 801d268:	1c43      	adds	r3, r0, #1
 801d26a:	d102      	bne.n	801d272 <_sbrk_r+0x1a>
 801d26c:	682b      	ldr	r3, [r5, #0]
 801d26e:	b103      	cbz	r3, 801d272 <_sbrk_r+0x1a>
 801d270:	6023      	str	r3, [r4, #0]
 801d272:	bd38      	pop	{r3, r4, r5, pc}
 801d274:	20002544 	.word	0x20002544

0801d278 <_write_r>:
 801d278:	b538      	push	{r3, r4, r5, lr}
 801d27a:	4d07      	ldr	r5, [pc, #28]	; (801d298 <_write_r+0x20>)
 801d27c:	4604      	mov	r4, r0
 801d27e:	4608      	mov	r0, r1
 801d280:	4611      	mov	r1, r2
 801d282:	2200      	movs	r2, #0
 801d284:	602a      	str	r2, [r5, #0]
 801d286:	461a      	mov	r2, r3
 801d288:	f7e4 fe4c 	bl	8001f24 <_write>
 801d28c:	1c43      	adds	r3, r0, #1
 801d28e:	d102      	bne.n	801d296 <_write_r+0x1e>
 801d290:	682b      	ldr	r3, [r5, #0]
 801d292:	b103      	cbz	r3, 801d296 <_write_r+0x1e>
 801d294:	6023      	str	r3, [r4, #0]
 801d296:	bd38      	pop	{r3, r4, r5, pc}
 801d298:	20002544 	.word	0x20002544

0801d29c <__errno>:
 801d29c:	4b01      	ldr	r3, [pc, #4]	; (801d2a4 <__errno+0x8>)
 801d29e:	6818      	ldr	r0, [r3, #0]
 801d2a0:	4770      	bx	lr
 801d2a2:	bf00      	nop
 801d2a4:	200000a8 	.word	0x200000a8

0801d2a8 <__libc_init_array>:
 801d2a8:	b570      	push	{r4, r5, r6, lr}
 801d2aa:	4d0d      	ldr	r5, [pc, #52]	; (801d2e0 <__libc_init_array+0x38>)
 801d2ac:	4c0d      	ldr	r4, [pc, #52]	; (801d2e4 <__libc_init_array+0x3c>)
 801d2ae:	1b64      	subs	r4, r4, r5
 801d2b0:	10a4      	asrs	r4, r4, #2
 801d2b2:	2600      	movs	r6, #0
 801d2b4:	42a6      	cmp	r6, r4
 801d2b6:	d109      	bne.n	801d2cc <__libc_init_array+0x24>
 801d2b8:	4d0b      	ldr	r5, [pc, #44]	; (801d2e8 <__libc_init_array+0x40>)
 801d2ba:	4c0c      	ldr	r4, [pc, #48]	; (801d2ec <__libc_init_array+0x44>)
 801d2bc:	f000 fc38 	bl	801db30 <_init>
 801d2c0:	1b64      	subs	r4, r4, r5
 801d2c2:	10a4      	asrs	r4, r4, #2
 801d2c4:	2600      	movs	r6, #0
 801d2c6:	42a6      	cmp	r6, r4
 801d2c8:	d105      	bne.n	801d2d6 <__libc_init_array+0x2e>
 801d2ca:	bd70      	pop	{r4, r5, r6, pc}
 801d2cc:	f855 3b04 	ldr.w	r3, [r5], #4
 801d2d0:	4798      	blx	r3
 801d2d2:	3601      	adds	r6, #1
 801d2d4:	e7ee      	b.n	801d2b4 <__libc_init_array+0xc>
 801d2d6:	f855 3b04 	ldr.w	r3, [r5], #4
 801d2da:	4798      	blx	r3
 801d2dc:	3601      	adds	r6, #1
 801d2de:	e7f2      	b.n	801d2c6 <__libc_init_array+0x1e>
 801d2e0:	0802038c 	.word	0x0802038c
 801d2e4:	0802038c 	.word	0x0802038c
 801d2e8:	0802038c 	.word	0x0802038c
 801d2ec:	08020390 	.word	0x08020390

0801d2f0 <__retarget_lock_init_recursive>:
 801d2f0:	4770      	bx	lr

0801d2f2 <__retarget_lock_close_recursive>:
 801d2f2:	4770      	bx	lr

0801d2f4 <__retarget_lock_acquire_recursive>:
 801d2f4:	4770      	bx	lr

0801d2f6 <__retarget_lock_release_recursive>:
 801d2f6:	4770      	bx	lr

0801d2f8 <memcpy>:
 801d2f8:	440a      	add	r2, r1
 801d2fa:	4291      	cmp	r1, r2
 801d2fc:	f100 33ff 	add.w	r3, r0, #4294967295
 801d300:	d100      	bne.n	801d304 <memcpy+0xc>
 801d302:	4770      	bx	lr
 801d304:	b510      	push	{r4, lr}
 801d306:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d30a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d30e:	4291      	cmp	r1, r2
 801d310:	d1f9      	bne.n	801d306 <memcpy+0xe>
 801d312:	bd10      	pop	{r4, pc}

0801d314 <_free_r>:
 801d314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d316:	2900      	cmp	r1, #0
 801d318:	d044      	beq.n	801d3a4 <_free_r+0x90>
 801d31a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d31e:	9001      	str	r0, [sp, #4]
 801d320:	2b00      	cmp	r3, #0
 801d322:	f1a1 0404 	sub.w	r4, r1, #4
 801d326:	bfb8      	it	lt
 801d328:	18e4      	addlt	r4, r4, r3
 801d32a:	f7ff f925 	bl	801c578 <__malloc_lock>
 801d32e:	4a1e      	ldr	r2, [pc, #120]	; (801d3a8 <_free_r+0x94>)
 801d330:	9801      	ldr	r0, [sp, #4]
 801d332:	6813      	ldr	r3, [r2, #0]
 801d334:	b933      	cbnz	r3, 801d344 <_free_r+0x30>
 801d336:	6063      	str	r3, [r4, #4]
 801d338:	6014      	str	r4, [r2, #0]
 801d33a:	b003      	add	sp, #12
 801d33c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d340:	f7ff b920 	b.w	801c584 <__malloc_unlock>
 801d344:	42a3      	cmp	r3, r4
 801d346:	d908      	bls.n	801d35a <_free_r+0x46>
 801d348:	6825      	ldr	r5, [r4, #0]
 801d34a:	1961      	adds	r1, r4, r5
 801d34c:	428b      	cmp	r3, r1
 801d34e:	bf01      	itttt	eq
 801d350:	6819      	ldreq	r1, [r3, #0]
 801d352:	685b      	ldreq	r3, [r3, #4]
 801d354:	1949      	addeq	r1, r1, r5
 801d356:	6021      	streq	r1, [r4, #0]
 801d358:	e7ed      	b.n	801d336 <_free_r+0x22>
 801d35a:	461a      	mov	r2, r3
 801d35c:	685b      	ldr	r3, [r3, #4]
 801d35e:	b10b      	cbz	r3, 801d364 <_free_r+0x50>
 801d360:	42a3      	cmp	r3, r4
 801d362:	d9fa      	bls.n	801d35a <_free_r+0x46>
 801d364:	6811      	ldr	r1, [r2, #0]
 801d366:	1855      	adds	r5, r2, r1
 801d368:	42a5      	cmp	r5, r4
 801d36a:	d10b      	bne.n	801d384 <_free_r+0x70>
 801d36c:	6824      	ldr	r4, [r4, #0]
 801d36e:	4421      	add	r1, r4
 801d370:	1854      	adds	r4, r2, r1
 801d372:	42a3      	cmp	r3, r4
 801d374:	6011      	str	r1, [r2, #0]
 801d376:	d1e0      	bne.n	801d33a <_free_r+0x26>
 801d378:	681c      	ldr	r4, [r3, #0]
 801d37a:	685b      	ldr	r3, [r3, #4]
 801d37c:	6053      	str	r3, [r2, #4]
 801d37e:	440c      	add	r4, r1
 801d380:	6014      	str	r4, [r2, #0]
 801d382:	e7da      	b.n	801d33a <_free_r+0x26>
 801d384:	d902      	bls.n	801d38c <_free_r+0x78>
 801d386:	230c      	movs	r3, #12
 801d388:	6003      	str	r3, [r0, #0]
 801d38a:	e7d6      	b.n	801d33a <_free_r+0x26>
 801d38c:	6825      	ldr	r5, [r4, #0]
 801d38e:	1961      	adds	r1, r4, r5
 801d390:	428b      	cmp	r3, r1
 801d392:	bf04      	itt	eq
 801d394:	6819      	ldreq	r1, [r3, #0]
 801d396:	685b      	ldreq	r3, [r3, #4]
 801d398:	6063      	str	r3, [r4, #4]
 801d39a:	bf04      	itt	eq
 801d39c:	1949      	addeq	r1, r1, r5
 801d39e:	6021      	streq	r1, [r4, #0]
 801d3a0:	6054      	str	r4, [r2, #4]
 801d3a2:	e7ca      	b.n	801d33a <_free_r+0x26>
 801d3a4:	b003      	add	sp, #12
 801d3a6:	bd30      	pop	{r4, r5, pc}
 801d3a8:	20002400 	.word	0x20002400

0801d3ac <__sfputc_r>:
 801d3ac:	6893      	ldr	r3, [r2, #8]
 801d3ae:	3b01      	subs	r3, #1
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	b410      	push	{r4}
 801d3b4:	6093      	str	r3, [r2, #8]
 801d3b6:	da08      	bge.n	801d3ca <__sfputc_r+0x1e>
 801d3b8:	6994      	ldr	r4, [r2, #24]
 801d3ba:	42a3      	cmp	r3, r4
 801d3bc:	db01      	blt.n	801d3c2 <__sfputc_r+0x16>
 801d3be:	290a      	cmp	r1, #10
 801d3c0:	d103      	bne.n	801d3ca <__sfputc_r+0x1e>
 801d3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d3c6:	f7ff bdc4 	b.w	801cf52 <__swbuf_r>
 801d3ca:	6813      	ldr	r3, [r2, #0]
 801d3cc:	1c58      	adds	r0, r3, #1
 801d3ce:	6010      	str	r0, [r2, #0]
 801d3d0:	7019      	strb	r1, [r3, #0]
 801d3d2:	4608      	mov	r0, r1
 801d3d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d3d8:	4770      	bx	lr

0801d3da <__sfputs_r>:
 801d3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3dc:	4606      	mov	r6, r0
 801d3de:	460f      	mov	r7, r1
 801d3e0:	4614      	mov	r4, r2
 801d3e2:	18d5      	adds	r5, r2, r3
 801d3e4:	42ac      	cmp	r4, r5
 801d3e6:	d101      	bne.n	801d3ec <__sfputs_r+0x12>
 801d3e8:	2000      	movs	r0, #0
 801d3ea:	e007      	b.n	801d3fc <__sfputs_r+0x22>
 801d3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d3f0:	463a      	mov	r2, r7
 801d3f2:	4630      	mov	r0, r6
 801d3f4:	f7ff ffda 	bl	801d3ac <__sfputc_r>
 801d3f8:	1c43      	adds	r3, r0, #1
 801d3fa:	d1f3      	bne.n	801d3e4 <__sfputs_r+0xa>
 801d3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d400 <_vfiprintf_r>:
 801d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d404:	460d      	mov	r5, r1
 801d406:	b09d      	sub	sp, #116	; 0x74
 801d408:	4614      	mov	r4, r2
 801d40a:	4698      	mov	r8, r3
 801d40c:	4606      	mov	r6, r0
 801d40e:	b118      	cbz	r0, 801d418 <_vfiprintf_r+0x18>
 801d410:	6a03      	ldr	r3, [r0, #32]
 801d412:	b90b      	cbnz	r3, 801d418 <_vfiprintf_r+0x18>
 801d414:	f7ff faaa 	bl	801c96c <__sinit>
 801d418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d41a:	07d9      	lsls	r1, r3, #31
 801d41c:	d405      	bmi.n	801d42a <_vfiprintf_r+0x2a>
 801d41e:	89ab      	ldrh	r3, [r5, #12]
 801d420:	059a      	lsls	r2, r3, #22
 801d422:	d402      	bmi.n	801d42a <_vfiprintf_r+0x2a>
 801d424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d426:	f7ff ff65 	bl	801d2f4 <__retarget_lock_acquire_recursive>
 801d42a:	89ab      	ldrh	r3, [r5, #12]
 801d42c:	071b      	lsls	r3, r3, #28
 801d42e:	d501      	bpl.n	801d434 <_vfiprintf_r+0x34>
 801d430:	692b      	ldr	r3, [r5, #16]
 801d432:	b99b      	cbnz	r3, 801d45c <_vfiprintf_r+0x5c>
 801d434:	4629      	mov	r1, r5
 801d436:	4630      	mov	r0, r6
 801d438:	f7ff fdc8 	bl	801cfcc <__swsetup_r>
 801d43c:	b170      	cbz	r0, 801d45c <_vfiprintf_r+0x5c>
 801d43e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d440:	07dc      	lsls	r4, r3, #31
 801d442:	d504      	bpl.n	801d44e <_vfiprintf_r+0x4e>
 801d444:	f04f 30ff 	mov.w	r0, #4294967295
 801d448:	b01d      	add	sp, #116	; 0x74
 801d44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d44e:	89ab      	ldrh	r3, [r5, #12]
 801d450:	0598      	lsls	r0, r3, #22
 801d452:	d4f7      	bmi.n	801d444 <_vfiprintf_r+0x44>
 801d454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d456:	f7ff ff4e 	bl	801d2f6 <__retarget_lock_release_recursive>
 801d45a:	e7f3      	b.n	801d444 <_vfiprintf_r+0x44>
 801d45c:	2300      	movs	r3, #0
 801d45e:	9309      	str	r3, [sp, #36]	; 0x24
 801d460:	2320      	movs	r3, #32
 801d462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d466:	f8cd 800c 	str.w	r8, [sp, #12]
 801d46a:	2330      	movs	r3, #48	; 0x30
 801d46c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d620 <_vfiprintf_r+0x220>
 801d470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d474:	f04f 0901 	mov.w	r9, #1
 801d478:	4623      	mov	r3, r4
 801d47a:	469a      	mov	sl, r3
 801d47c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d480:	b10a      	cbz	r2, 801d486 <_vfiprintf_r+0x86>
 801d482:	2a25      	cmp	r2, #37	; 0x25
 801d484:	d1f9      	bne.n	801d47a <_vfiprintf_r+0x7a>
 801d486:	ebba 0b04 	subs.w	fp, sl, r4
 801d48a:	d00b      	beq.n	801d4a4 <_vfiprintf_r+0xa4>
 801d48c:	465b      	mov	r3, fp
 801d48e:	4622      	mov	r2, r4
 801d490:	4629      	mov	r1, r5
 801d492:	4630      	mov	r0, r6
 801d494:	f7ff ffa1 	bl	801d3da <__sfputs_r>
 801d498:	3001      	adds	r0, #1
 801d49a:	f000 80a9 	beq.w	801d5f0 <_vfiprintf_r+0x1f0>
 801d49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d4a0:	445a      	add	r2, fp
 801d4a2:	9209      	str	r2, [sp, #36]	; 0x24
 801d4a4:	f89a 3000 	ldrb.w	r3, [sl]
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	f000 80a1 	beq.w	801d5f0 <_vfiprintf_r+0x1f0>
 801d4ae:	2300      	movs	r3, #0
 801d4b0:	f04f 32ff 	mov.w	r2, #4294967295
 801d4b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d4b8:	f10a 0a01 	add.w	sl, sl, #1
 801d4bc:	9304      	str	r3, [sp, #16]
 801d4be:	9307      	str	r3, [sp, #28]
 801d4c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d4c4:	931a      	str	r3, [sp, #104]	; 0x68
 801d4c6:	4654      	mov	r4, sl
 801d4c8:	2205      	movs	r2, #5
 801d4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d4ce:	4854      	ldr	r0, [pc, #336]	; (801d620 <_vfiprintf_r+0x220>)
 801d4d0:	f7e2 fe86 	bl	80001e0 <memchr>
 801d4d4:	9a04      	ldr	r2, [sp, #16]
 801d4d6:	b9d8      	cbnz	r0, 801d510 <_vfiprintf_r+0x110>
 801d4d8:	06d1      	lsls	r1, r2, #27
 801d4da:	bf44      	itt	mi
 801d4dc:	2320      	movmi	r3, #32
 801d4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d4e2:	0713      	lsls	r3, r2, #28
 801d4e4:	bf44      	itt	mi
 801d4e6:	232b      	movmi	r3, #43	; 0x2b
 801d4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d4ec:	f89a 3000 	ldrb.w	r3, [sl]
 801d4f0:	2b2a      	cmp	r3, #42	; 0x2a
 801d4f2:	d015      	beq.n	801d520 <_vfiprintf_r+0x120>
 801d4f4:	9a07      	ldr	r2, [sp, #28]
 801d4f6:	4654      	mov	r4, sl
 801d4f8:	2000      	movs	r0, #0
 801d4fa:	f04f 0c0a 	mov.w	ip, #10
 801d4fe:	4621      	mov	r1, r4
 801d500:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d504:	3b30      	subs	r3, #48	; 0x30
 801d506:	2b09      	cmp	r3, #9
 801d508:	d94d      	bls.n	801d5a6 <_vfiprintf_r+0x1a6>
 801d50a:	b1b0      	cbz	r0, 801d53a <_vfiprintf_r+0x13a>
 801d50c:	9207      	str	r2, [sp, #28]
 801d50e:	e014      	b.n	801d53a <_vfiprintf_r+0x13a>
 801d510:	eba0 0308 	sub.w	r3, r0, r8
 801d514:	fa09 f303 	lsl.w	r3, r9, r3
 801d518:	4313      	orrs	r3, r2
 801d51a:	9304      	str	r3, [sp, #16]
 801d51c:	46a2      	mov	sl, r4
 801d51e:	e7d2      	b.n	801d4c6 <_vfiprintf_r+0xc6>
 801d520:	9b03      	ldr	r3, [sp, #12]
 801d522:	1d19      	adds	r1, r3, #4
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	9103      	str	r1, [sp, #12]
 801d528:	2b00      	cmp	r3, #0
 801d52a:	bfbb      	ittet	lt
 801d52c:	425b      	neglt	r3, r3
 801d52e:	f042 0202 	orrlt.w	r2, r2, #2
 801d532:	9307      	strge	r3, [sp, #28]
 801d534:	9307      	strlt	r3, [sp, #28]
 801d536:	bfb8      	it	lt
 801d538:	9204      	strlt	r2, [sp, #16]
 801d53a:	7823      	ldrb	r3, [r4, #0]
 801d53c:	2b2e      	cmp	r3, #46	; 0x2e
 801d53e:	d10c      	bne.n	801d55a <_vfiprintf_r+0x15a>
 801d540:	7863      	ldrb	r3, [r4, #1]
 801d542:	2b2a      	cmp	r3, #42	; 0x2a
 801d544:	d134      	bne.n	801d5b0 <_vfiprintf_r+0x1b0>
 801d546:	9b03      	ldr	r3, [sp, #12]
 801d548:	1d1a      	adds	r2, r3, #4
 801d54a:	681b      	ldr	r3, [r3, #0]
 801d54c:	9203      	str	r2, [sp, #12]
 801d54e:	2b00      	cmp	r3, #0
 801d550:	bfb8      	it	lt
 801d552:	f04f 33ff 	movlt.w	r3, #4294967295
 801d556:	3402      	adds	r4, #2
 801d558:	9305      	str	r3, [sp, #20]
 801d55a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d630 <_vfiprintf_r+0x230>
 801d55e:	7821      	ldrb	r1, [r4, #0]
 801d560:	2203      	movs	r2, #3
 801d562:	4650      	mov	r0, sl
 801d564:	f7e2 fe3c 	bl	80001e0 <memchr>
 801d568:	b138      	cbz	r0, 801d57a <_vfiprintf_r+0x17a>
 801d56a:	9b04      	ldr	r3, [sp, #16]
 801d56c:	eba0 000a 	sub.w	r0, r0, sl
 801d570:	2240      	movs	r2, #64	; 0x40
 801d572:	4082      	lsls	r2, r0
 801d574:	4313      	orrs	r3, r2
 801d576:	3401      	adds	r4, #1
 801d578:	9304      	str	r3, [sp, #16]
 801d57a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d57e:	4829      	ldr	r0, [pc, #164]	; (801d624 <_vfiprintf_r+0x224>)
 801d580:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d584:	2206      	movs	r2, #6
 801d586:	f7e2 fe2b 	bl	80001e0 <memchr>
 801d58a:	2800      	cmp	r0, #0
 801d58c:	d03f      	beq.n	801d60e <_vfiprintf_r+0x20e>
 801d58e:	4b26      	ldr	r3, [pc, #152]	; (801d628 <_vfiprintf_r+0x228>)
 801d590:	bb1b      	cbnz	r3, 801d5da <_vfiprintf_r+0x1da>
 801d592:	9b03      	ldr	r3, [sp, #12]
 801d594:	3307      	adds	r3, #7
 801d596:	f023 0307 	bic.w	r3, r3, #7
 801d59a:	3308      	adds	r3, #8
 801d59c:	9303      	str	r3, [sp, #12]
 801d59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5a0:	443b      	add	r3, r7
 801d5a2:	9309      	str	r3, [sp, #36]	; 0x24
 801d5a4:	e768      	b.n	801d478 <_vfiprintf_r+0x78>
 801d5a6:	fb0c 3202 	mla	r2, ip, r2, r3
 801d5aa:	460c      	mov	r4, r1
 801d5ac:	2001      	movs	r0, #1
 801d5ae:	e7a6      	b.n	801d4fe <_vfiprintf_r+0xfe>
 801d5b0:	2300      	movs	r3, #0
 801d5b2:	3401      	adds	r4, #1
 801d5b4:	9305      	str	r3, [sp, #20]
 801d5b6:	4619      	mov	r1, r3
 801d5b8:	f04f 0c0a 	mov.w	ip, #10
 801d5bc:	4620      	mov	r0, r4
 801d5be:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d5c2:	3a30      	subs	r2, #48	; 0x30
 801d5c4:	2a09      	cmp	r2, #9
 801d5c6:	d903      	bls.n	801d5d0 <_vfiprintf_r+0x1d0>
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	d0c6      	beq.n	801d55a <_vfiprintf_r+0x15a>
 801d5cc:	9105      	str	r1, [sp, #20]
 801d5ce:	e7c4      	b.n	801d55a <_vfiprintf_r+0x15a>
 801d5d0:	fb0c 2101 	mla	r1, ip, r1, r2
 801d5d4:	4604      	mov	r4, r0
 801d5d6:	2301      	movs	r3, #1
 801d5d8:	e7f0      	b.n	801d5bc <_vfiprintf_r+0x1bc>
 801d5da:	ab03      	add	r3, sp, #12
 801d5dc:	9300      	str	r3, [sp, #0]
 801d5de:	462a      	mov	r2, r5
 801d5e0:	4b12      	ldr	r3, [pc, #72]	; (801d62c <_vfiprintf_r+0x22c>)
 801d5e2:	a904      	add	r1, sp, #16
 801d5e4:	4630      	mov	r0, r6
 801d5e6:	f3af 8000 	nop.w
 801d5ea:	4607      	mov	r7, r0
 801d5ec:	1c78      	adds	r0, r7, #1
 801d5ee:	d1d6      	bne.n	801d59e <_vfiprintf_r+0x19e>
 801d5f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d5f2:	07d9      	lsls	r1, r3, #31
 801d5f4:	d405      	bmi.n	801d602 <_vfiprintf_r+0x202>
 801d5f6:	89ab      	ldrh	r3, [r5, #12]
 801d5f8:	059a      	lsls	r2, r3, #22
 801d5fa:	d402      	bmi.n	801d602 <_vfiprintf_r+0x202>
 801d5fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d5fe:	f7ff fe7a 	bl	801d2f6 <__retarget_lock_release_recursive>
 801d602:	89ab      	ldrh	r3, [r5, #12]
 801d604:	065b      	lsls	r3, r3, #25
 801d606:	f53f af1d 	bmi.w	801d444 <_vfiprintf_r+0x44>
 801d60a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d60c:	e71c      	b.n	801d448 <_vfiprintf_r+0x48>
 801d60e:	ab03      	add	r3, sp, #12
 801d610:	9300      	str	r3, [sp, #0]
 801d612:	462a      	mov	r2, r5
 801d614:	4b05      	ldr	r3, [pc, #20]	; (801d62c <_vfiprintf_r+0x22c>)
 801d616:	a904      	add	r1, sp, #16
 801d618:	4630      	mov	r0, r6
 801d61a:	f000 f879 	bl	801d710 <_printf_i>
 801d61e:	e7e4      	b.n	801d5ea <_vfiprintf_r+0x1ea>
 801d620:	08020350 	.word	0x08020350
 801d624:	0802035a 	.word	0x0802035a
 801d628:	00000000 	.word	0x00000000
 801d62c:	0801d3db 	.word	0x0801d3db
 801d630:	08020356 	.word	0x08020356

0801d634 <_printf_common>:
 801d634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d638:	4616      	mov	r6, r2
 801d63a:	4699      	mov	r9, r3
 801d63c:	688a      	ldr	r2, [r1, #8]
 801d63e:	690b      	ldr	r3, [r1, #16]
 801d640:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d644:	4293      	cmp	r3, r2
 801d646:	bfb8      	it	lt
 801d648:	4613      	movlt	r3, r2
 801d64a:	6033      	str	r3, [r6, #0]
 801d64c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d650:	4607      	mov	r7, r0
 801d652:	460c      	mov	r4, r1
 801d654:	b10a      	cbz	r2, 801d65a <_printf_common+0x26>
 801d656:	3301      	adds	r3, #1
 801d658:	6033      	str	r3, [r6, #0]
 801d65a:	6823      	ldr	r3, [r4, #0]
 801d65c:	0699      	lsls	r1, r3, #26
 801d65e:	bf42      	ittt	mi
 801d660:	6833      	ldrmi	r3, [r6, #0]
 801d662:	3302      	addmi	r3, #2
 801d664:	6033      	strmi	r3, [r6, #0]
 801d666:	6825      	ldr	r5, [r4, #0]
 801d668:	f015 0506 	ands.w	r5, r5, #6
 801d66c:	d106      	bne.n	801d67c <_printf_common+0x48>
 801d66e:	f104 0a19 	add.w	sl, r4, #25
 801d672:	68e3      	ldr	r3, [r4, #12]
 801d674:	6832      	ldr	r2, [r6, #0]
 801d676:	1a9b      	subs	r3, r3, r2
 801d678:	42ab      	cmp	r3, r5
 801d67a:	dc26      	bgt.n	801d6ca <_printf_common+0x96>
 801d67c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d680:	1e13      	subs	r3, r2, #0
 801d682:	6822      	ldr	r2, [r4, #0]
 801d684:	bf18      	it	ne
 801d686:	2301      	movne	r3, #1
 801d688:	0692      	lsls	r2, r2, #26
 801d68a:	d42b      	bmi.n	801d6e4 <_printf_common+0xb0>
 801d68c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d690:	4649      	mov	r1, r9
 801d692:	4638      	mov	r0, r7
 801d694:	47c0      	blx	r8
 801d696:	3001      	adds	r0, #1
 801d698:	d01e      	beq.n	801d6d8 <_printf_common+0xa4>
 801d69a:	6823      	ldr	r3, [r4, #0]
 801d69c:	6922      	ldr	r2, [r4, #16]
 801d69e:	f003 0306 	and.w	r3, r3, #6
 801d6a2:	2b04      	cmp	r3, #4
 801d6a4:	bf02      	ittt	eq
 801d6a6:	68e5      	ldreq	r5, [r4, #12]
 801d6a8:	6833      	ldreq	r3, [r6, #0]
 801d6aa:	1aed      	subeq	r5, r5, r3
 801d6ac:	68a3      	ldr	r3, [r4, #8]
 801d6ae:	bf0c      	ite	eq
 801d6b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d6b4:	2500      	movne	r5, #0
 801d6b6:	4293      	cmp	r3, r2
 801d6b8:	bfc4      	itt	gt
 801d6ba:	1a9b      	subgt	r3, r3, r2
 801d6bc:	18ed      	addgt	r5, r5, r3
 801d6be:	2600      	movs	r6, #0
 801d6c0:	341a      	adds	r4, #26
 801d6c2:	42b5      	cmp	r5, r6
 801d6c4:	d11a      	bne.n	801d6fc <_printf_common+0xc8>
 801d6c6:	2000      	movs	r0, #0
 801d6c8:	e008      	b.n	801d6dc <_printf_common+0xa8>
 801d6ca:	2301      	movs	r3, #1
 801d6cc:	4652      	mov	r2, sl
 801d6ce:	4649      	mov	r1, r9
 801d6d0:	4638      	mov	r0, r7
 801d6d2:	47c0      	blx	r8
 801d6d4:	3001      	adds	r0, #1
 801d6d6:	d103      	bne.n	801d6e0 <_printf_common+0xac>
 801d6d8:	f04f 30ff 	mov.w	r0, #4294967295
 801d6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6e0:	3501      	adds	r5, #1
 801d6e2:	e7c6      	b.n	801d672 <_printf_common+0x3e>
 801d6e4:	18e1      	adds	r1, r4, r3
 801d6e6:	1c5a      	adds	r2, r3, #1
 801d6e8:	2030      	movs	r0, #48	; 0x30
 801d6ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d6ee:	4422      	add	r2, r4
 801d6f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d6f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d6f8:	3302      	adds	r3, #2
 801d6fa:	e7c7      	b.n	801d68c <_printf_common+0x58>
 801d6fc:	2301      	movs	r3, #1
 801d6fe:	4622      	mov	r2, r4
 801d700:	4649      	mov	r1, r9
 801d702:	4638      	mov	r0, r7
 801d704:	47c0      	blx	r8
 801d706:	3001      	adds	r0, #1
 801d708:	d0e6      	beq.n	801d6d8 <_printf_common+0xa4>
 801d70a:	3601      	adds	r6, #1
 801d70c:	e7d9      	b.n	801d6c2 <_printf_common+0x8e>
	...

0801d710 <_printf_i>:
 801d710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d714:	7e0f      	ldrb	r7, [r1, #24]
 801d716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d718:	2f78      	cmp	r7, #120	; 0x78
 801d71a:	4691      	mov	r9, r2
 801d71c:	4680      	mov	r8, r0
 801d71e:	460c      	mov	r4, r1
 801d720:	469a      	mov	sl, r3
 801d722:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d726:	d807      	bhi.n	801d738 <_printf_i+0x28>
 801d728:	2f62      	cmp	r7, #98	; 0x62
 801d72a:	d80a      	bhi.n	801d742 <_printf_i+0x32>
 801d72c:	2f00      	cmp	r7, #0
 801d72e:	f000 80d4 	beq.w	801d8da <_printf_i+0x1ca>
 801d732:	2f58      	cmp	r7, #88	; 0x58
 801d734:	f000 80c0 	beq.w	801d8b8 <_printf_i+0x1a8>
 801d738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d73c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d740:	e03a      	b.n	801d7b8 <_printf_i+0xa8>
 801d742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d746:	2b15      	cmp	r3, #21
 801d748:	d8f6      	bhi.n	801d738 <_printf_i+0x28>
 801d74a:	a101      	add	r1, pc, #4	; (adr r1, 801d750 <_printf_i+0x40>)
 801d74c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d750:	0801d7a9 	.word	0x0801d7a9
 801d754:	0801d7bd 	.word	0x0801d7bd
 801d758:	0801d739 	.word	0x0801d739
 801d75c:	0801d739 	.word	0x0801d739
 801d760:	0801d739 	.word	0x0801d739
 801d764:	0801d739 	.word	0x0801d739
 801d768:	0801d7bd 	.word	0x0801d7bd
 801d76c:	0801d739 	.word	0x0801d739
 801d770:	0801d739 	.word	0x0801d739
 801d774:	0801d739 	.word	0x0801d739
 801d778:	0801d739 	.word	0x0801d739
 801d77c:	0801d8c1 	.word	0x0801d8c1
 801d780:	0801d7e9 	.word	0x0801d7e9
 801d784:	0801d87b 	.word	0x0801d87b
 801d788:	0801d739 	.word	0x0801d739
 801d78c:	0801d739 	.word	0x0801d739
 801d790:	0801d8e3 	.word	0x0801d8e3
 801d794:	0801d739 	.word	0x0801d739
 801d798:	0801d7e9 	.word	0x0801d7e9
 801d79c:	0801d739 	.word	0x0801d739
 801d7a0:	0801d739 	.word	0x0801d739
 801d7a4:	0801d883 	.word	0x0801d883
 801d7a8:	682b      	ldr	r3, [r5, #0]
 801d7aa:	1d1a      	adds	r2, r3, #4
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	602a      	str	r2, [r5, #0]
 801d7b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d7b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d7b8:	2301      	movs	r3, #1
 801d7ba:	e09f      	b.n	801d8fc <_printf_i+0x1ec>
 801d7bc:	6820      	ldr	r0, [r4, #0]
 801d7be:	682b      	ldr	r3, [r5, #0]
 801d7c0:	0607      	lsls	r7, r0, #24
 801d7c2:	f103 0104 	add.w	r1, r3, #4
 801d7c6:	6029      	str	r1, [r5, #0]
 801d7c8:	d501      	bpl.n	801d7ce <_printf_i+0xbe>
 801d7ca:	681e      	ldr	r6, [r3, #0]
 801d7cc:	e003      	b.n	801d7d6 <_printf_i+0xc6>
 801d7ce:	0646      	lsls	r6, r0, #25
 801d7d0:	d5fb      	bpl.n	801d7ca <_printf_i+0xba>
 801d7d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d7d6:	2e00      	cmp	r6, #0
 801d7d8:	da03      	bge.n	801d7e2 <_printf_i+0xd2>
 801d7da:	232d      	movs	r3, #45	; 0x2d
 801d7dc:	4276      	negs	r6, r6
 801d7de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d7e2:	485a      	ldr	r0, [pc, #360]	; (801d94c <_printf_i+0x23c>)
 801d7e4:	230a      	movs	r3, #10
 801d7e6:	e012      	b.n	801d80e <_printf_i+0xfe>
 801d7e8:	682b      	ldr	r3, [r5, #0]
 801d7ea:	6820      	ldr	r0, [r4, #0]
 801d7ec:	1d19      	adds	r1, r3, #4
 801d7ee:	6029      	str	r1, [r5, #0]
 801d7f0:	0605      	lsls	r5, r0, #24
 801d7f2:	d501      	bpl.n	801d7f8 <_printf_i+0xe8>
 801d7f4:	681e      	ldr	r6, [r3, #0]
 801d7f6:	e002      	b.n	801d7fe <_printf_i+0xee>
 801d7f8:	0641      	lsls	r1, r0, #25
 801d7fa:	d5fb      	bpl.n	801d7f4 <_printf_i+0xe4>
 801d7fc:	881e      	ldrh	r6, [r3, #0]
 801d7fe:	4853      	ldr	r0, [pc, #332]	; (801d94c <_printf_i+0x23c>)
 801d800:	2f6f      	cmp	r7, #111	; 0x6f
 801d802:	bf0c      	ite	eq
 801d804:	2308      	moveq	r3, #8
 801d806:	230a      	movne	r3, #10
 801d808:	2100      	movs	r1, #0
 801d80a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d80e:	6865      	ldr	r5, [r4, #4]
 801d810:	60a5      	str	r5, [r4, #8]
 801d812:	2d00      	cmp	r5, #0
 801d814:	bfa2      	ittt	ge
 801d816:	6821      	ldrge	r1, [r4, #0]
 801d818:	f021 0104 	bicge.w	r1, r1, #4
 801d81c:	6021      	strge	r1, [r4, #0]
 801d81e:	b90e      	cbnz	r6, 801d824 <_printf_i+0x114>
 801d820:	2d00      	cmp	r5, #0
 801d822:	d04b      	beq.n	801d8bc <_printf_i+0x1ac>
 801d824:	4615      	mov	r5, r2
 801d826:	fbb6 f1f3 	udiv	r1, r6, r3
 801d82a:	fb03 6711 	mls	r7, r3, r1, r6
 801d82e:	5dc7      	ldrb	r7, [r0, r7]
 801d830:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d834:	4637      	mov	r7, r6
 801d836:	42bb      	cmp	r3, r7
 801d838:	460e      	mov	r6, r1
 801d83a:	d9f4      	bls.n	801d826 <_printf_i+0x116>
 801d83c:	2b08      	cmp	r3, #8
 801d83e:	d10b      	bne.n	801d858 <_printf_i+0x148>
 801d840:	6823      	ldr	r3, [r4, #0]
 801d842:	07de      	lsls	r6, r3, #31
 801d844:	d508      	bpl.n	801d858 <_printf_i+0x148>
 801d846:	6923      	ldr	r3, [r4, #16]
 801d848:	6861      	ldr	r1, [r4, #4]
 801d84a:	4299      	cmp	r1, r3
 801d84c:	bfde      	ittt	le
 801d84e:	2330      	movle	r3, #48	; 0x30
 801d850:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d854:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d858:	1b52      	subs	r2, r2, r5
 801d85a:	6122      	str	r2, [r4, #16]
 801d85c:	f8cd a000 	str.w	sl, [sp]
 801d860:	464b      	mov	r3, r9
 801d862:	aa03      	add	r2, sp, #12
 801d864:	4621      	mov	r1, r4
 801d866:	4640      	mov	r0, r8
 801d868:	f7ff fee4 	bl	801d634 <_printf_common>
 801d86c:	3001      	adds	r0, #1
 801d86e:	d14a      	bne.n	801d906 <_printf_i+0x1f6>
 801d870:	f04f 30ff 	mov.w	r0, #4294967295
 801d874:	b004      	add	sp, #16
 801d876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d87a:	6823      	ldr	r3, [r4, #0]
 801d87c:	f043 0320 	orr.w	r3, r3, #32
 801d880:	6023      	str	r3, [r4, #0]
 801d882:	4833      	ldr	r0, [pc, #204]	; (801d950 <_printf_i+0x240>)
 801d884:	2778      	movs	r7, #120	; 0x78
 801d886:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d88a:	6823      	ldr	r3, [r4, #0]
 801d88c:	6829      	ldr	r1, [r5, #0]
 801d88e:	061f      	lsls	r7, r3, #24
 801d890:	f851 6b04 	ldr.w	r6, [r1], #4
 801d894:	d402      	bmi.n	801d89c <_printf_i+0x18c>
 801d896:	065f      	lsls	r7, r3, #25
 801d898:	bf48      	it	mi
 801d89a:	b2b6      	uxthmi	r6, r6
 801d89c:	07df      	lsls	r7, r3, #31
 801d89e:	bf48      	it	mi
 801d8a0:	f043 0320 	orrmi.w	r3, r3, #32
 801d8a4:	6029      	str	r1, [r5, #0]
 801d8a6:	bf48      	it	mi
 801d8a8:	6023      	strmi	r3, [r4, #0]
 801d8aa:	b91e      	cbnz	r6, 801d8b4 <_printf_i+0x1a4>
 801d8ac:	6823      	ldr	r3, [r4, #0]
 801d8ae:	f023 0320 	bic.w	r3, r3, #32
 801d8b2:	6023      	str	r3, [r4, #0]
 801d8b4:	2310      	movs	r3, #16
 801d8b6:	e7a7      	b.n	801d808 <_printf_i+0xf8>
 801d8b8:	4824      	ldr	r0, [pc, #144]	; (801d94c <_printf_i+0x23c>)
 801d8ba:	e7e4      	b.n	801d886 <_printf_i+0x176>
 801d8bc:	4615      	mov	r5, r2
 801d8be:	e7bd      	b.n	801d83c <_printf_i+0x12c>
 801d8c0:	682b      	ldr	r3, [r5, #0]
 801d8c2:	6826      	ldr	r6, [r4, #0]
 801d8c4:	6961      	ldr	r1, [r4, #20]
 801d8c6:	1d18      	adds	r0, r3, #4
 801d8c8:	6028      	str	r0, [r5, #0]
 801d8ca:	0635      	lsls	r5, r6, #24
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	d501      	bpl.n	801d8d4 <_printf_i+0x1c4>
 801d8d0:	6019      	str	r1, [r3, #0]
 801d8d2:	e002      	b.n	801d8da <_printf_i+0x1ca>
 801d8d4:	0670      	lsls	r0, r6, #25
 801d8d6:	d5fb      	bpl.n	801d8d0 <_printf_i+0x1c0>
 801d8d8:	8019      	strh	r1, [r3, #0]
 801d8da:	2300      	movs	r3, #0
 801d8dc:	6123      	str	r3, [r4, #16]
 801d8de:	4615      	mov	r5, r2
 801d8e0:	e7bc      	b.n	801d85c <_printf_i+0x14c>
 801d8e2:	682b      	ldr	r3, [r5, #0]
 801d8e4:	1d1a      	adds	r2, r3, #4
 801d8e6:	602a      	str	r2, [r5, #0]
 801d8e8:	681d      	ldr	r5, [r3, #0]
 801d8ea:	6862      	ldr	r2, [r4, #4]
 801d8ec:	2100      	movs	r1, #0
 801d8ee:	4628      	mov	r0, r5
 801d8f0:	f7e2 fc76 	bl	80001e0 <memchr>
 801d8f4:	b108      	cbz	r0, 801d8fa <_printf_i+0x1ea>
 801d8f6:	1b40      	subs	r0, r0, r5
 801d8f8:	6060      	str	r0, [r4, #4]
 801d8fa:	6863      	ldr	r3, [r4, #4]
 801d8fc:	6123      	str	r3, [r4, #16]
 801d8fe:	2300      	movs	r3, #0
 801d900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d904:	e7aa      	b.n	801d85c <_printf_i+0x14c>
 801d906:	6923      	ldr	r3, [r4, #16]
 801d908:	462a      	mov	r2, r5
 801d90a:	4649      	mov	r1, r9
 801d90c:	4640      	mov	r0, r8
 801d90e:	47d0      	blx	sl
 801d910:	3001      	adds	r0, #1
 801d912:	d0ad      	beq.n	801d870 <_printf_i+0x160>
 801d914:	6823      	ldr	r3, [r4, #0]
 801d916:	079b      	lsls	r3, r3, #30
 801d918:	d413      	bmi.n	801d942 <_printf_i+0x232>
 801d91a:	68e0      	ldr	r0, [r4, #12]
 801d91c:	9b03      	ldr	r3, [sp, #12]
 801d91e:	4298      	cmp	r0, r3
 801d920:	bfb8      	it	lt
 801d922:	4618      	movlt	r0, r3
 801d924:	e7a6      	b.n	801d874 <_printf_i+0x164>
 801d926:	2301      	movs	r3, #1
 801d928:	4632      	mov	r2, r6
 801d92a:	4649      	mov	r1, r9
 801d92c:	4640      	mov	r0, r8
 801d92e:	47d0      	blx	sl
 801d930:	3001      	adds	r0, #1
 801d932:	d09d      	beq.n	801d870 <_printf_i+0x160>
 801d934:	3501      	adds	r5, #1
 801d936:	68e3      	ldr	r3, [r4, #12]
 801d938:	9903      	ldr	r1, [sp, #12]
 801d93a:	1a5b      	subs	r3, r3, r1
 801d93c:	42ab      	cmp	r3, r5
 801d93e:	dcf2      	bgt.n	801d926 <_printf_i+0x216>
 801d940:	e7eb      	b.n	801d91a <_printf_i+0x20a>
 801d942:	2500      	movs	r5, #0
 801d944:	f104 0619 	add.w	r6, r4, #25
 801d948:	e7f5      	b.n	801d936 <_printf_i+0x226>
 801d94a:	bf00      	nop
 801d94c:	08020361 	.word	0x08020361
 801d950:	08020372 	.word	0x08020372

0801d954 <__sflags>:
 801d954:	780b      	ldrb	r3, [r1, #0]
 801d956:	2b72      	cmp	r3, #114	; 0x72
 801d958:	b530      	push	{r4, r5, lr}
 801d95a:	d022      	beq.n	801d9a2 <__sflags+0x4e>
 801d95c:	2b77      	cmp	r3, #119	; 0x77
 801d95e:	d024      	beq.n	801d9aa <__sflags+0x56>
 801d960:	2b61      	cmp	r3, #97	; 0x61
 801d962:	d027      	beq.n	801d9b4 <__sflags+0x60>
 801d964:	2316      	movs	r3, #22
 801d966:	6003      	str	r3, [r0, #0]
 801d968:	2000      	movs	r0, #0
 801d96a:	bd30      	pop	{r4, r5, pc}
 801d96c:	2d62      	cmp	r5, #98	; 0x62
 801d96e:	d012      	beq.n	801d996 <__sflags+0x42>
 801d970:	2d78      	cmp	r5, #120	; 0x78
 801d972:	d013      	beq.n	801d99c <__sflags+0x48>
 801d974:	2d2b      	cmp	r5, #43	; 0x2b
 801d976:	d107      	bne.n	801d988 <__sflags+0x34>
 801d978:	f020 001c 	bic.w	r0, r0, #28
 801d97c:	f023 0303 	bic.w	r3, r3, #3
 801d980:	f040 0010 	orr.w	r0, r0, #16
 801d984:	f043 0302 	orr.w	r3, r3, #2
 801d988:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801d98c:	2d00      	cmp	r5, #0
 801d98e:	d1ed      	bne.n	801d96c <__sflags+0x18>
 801d990:	4323      	orrs	r3, r4
 801d992:	6013      	str	r3, [r2, #0]
 801d994:	e7e9      	b.n	801d96a <__sflags+0x16>
 801d996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d99a:	e7f5      	b.n	801d988 <__sflags+0x34>
 801d99c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801d9a0:	e7f2      	b.n	801d988 <__sflags+0x34>
 801d9a2:	2400      	movs	r4, #0
 801d9a4:	4623      	mov	r3, r4
 801d9a6:	2004      	movs	r0, #4
 801d9a8:	e7ee      	b.n	801d988 <__sflags+0x34>
 801d9aa:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801d9ae:	2301      	movs	r3, #1
 801d9b0:	2008      	movs	r0, #8
 801d9b2:	e7e9      	b.n	801d988 <__sflags+0x34>
 801d9b4:	f44f 7402 	mov.w	r4, #520	; 0x208
 801d9b8:	2301      	movs	r3, #1
 801d9ba:	f44f 7084 	mov.w	r0, #264	; 0x108
 801d9be:	e7e3      	b.n	801d988 <__sflags+0x34>

0801d9c0 <__swhatbuf_r>:
 801d9c0:	b570      	push	{r4, r5, r6, lr}
 801d9c2:	460c      	mov	r4, r1
 801d9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9c8:	2900      	cmp	r1, #0
 801d9ca:	b096      	sub	sp, #88	; 0x58
 801d9cc:	4615      	mov	r5, r2
 801d9ce:	461e      	mov	r6, r3
 801d9d0:	da0d      	bge.n	801d9ee <__swhatbuf_r+0x2e>
 801d9d2:	89a3      	ldrh	r3, [r4, #12]
 801d9d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801d9d8:	f04f 0100 	mov.w	r1, #0
 801d9dc:	bf0c      	ite	eq
 801d9de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801d9e2:	2340      	movne	r3, #64	; 0x40
 801d9e4:	2000      	movs	r0, #0
 801d9e6:	6031      	str	r1, [r6, #0]
 801d9e8:	602b      	str	r3, [r5, #0]
 801d9ea:	b016      	add	sp, #88	; 0x58
 801d9ec:	bd70      	pop	{r4, r5, r6, pc}
 801d9ee:	466a      	mov	r2, sp
 801d9f0:	f000 f87c 	bl	801daec <_fstat_r>
 801d9f4:	2800      	cmp	r0, #0
 801d9f6:	dbec      	blt.n	801d9d2 <__swhatbuf_r+0x12>
 801d9f8:	9901      	ldr	r1, [sp, #4]
 801d9fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801d9fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801da02:	4259      	negs	r1, r3
 801da04:	4159      	adcs	r1, r3
 801da06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801da0a:	e7eb      	b.n	801d9e4 <__swhatbuf_r+0x24>

0801da0c <__smakebuf_r>:
 801da0c:	898b      	ldrh	r3, [r1, #12]
 801da0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801da10:	079d      	lsls	r5, r3, #30
 801da12:	4606      	mov	r6, r0
 801da14:	460c      	mov	r4, r1
 801da16:	d507      	bpl.n	801da28 <__smakebuf_r+0x1c>
 801da18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801da1c:	6023      	str	r3, [r4, #0]
 801da1e:	6123      	str	r3, [r4, #16]
 801da20:	2301      	movs	r3, #1
 801da22:	6163      	str	r3, [r4, #20]
 801da24:	b002      	add	sp, #8
 801da26:	bd70      	pop	{r4, r5, r6, pc}
 801da28:	ab01      	add	r3, sp, #4
 801da2a:	466a      	mov	r2, sp
 801da2c:	f7ff ffc8 	bl	801d9c0 <__swhatbuf_r>
 801da30:	9900      	ldr	r1, [sp, #0]
 801da32:	4605      	mov	r5, r0
 801da34:	4630      	mov	r0, r6
 801da36:	f7fe fd1f 	bl	801c478 <_malloc_r>
 801da3a:	b948      	cbnz	r0, 801da50 <__smakebuf_r+0x44>
 801da3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da40:	059a      	lsls	r2, r3, #22
 801da42:	d4ef      	bmi.n	801da24 <__smakebuf_r+0x18>
 801da44:	f023 0303 	bic.w	r3, r3, #3
 801da48:	f043 0302 	orr.w	r3, r3, #2
 801da4c:	81a3      	strh	r3, [r4, #12]
 801da4e:	e7e3      	b.n	801da18 <__smakebuf_r+0xc>
 801da50:	89a3      	ldrh	r3, [r4, #12]
 801da52:	6020      	str	r0, [r4, #0]
 801da54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801da58:	81a3      	strh	r3, [r4, #12]
 801da5a:	9b00      	ldr	r3, [sp, #0]
 801da5c:	6163      	str	r3, [r4, #20]
 801da5e:	9b01      	ldr	r3, [sp, #4]
 801da60:	6120      	str	r0, [r4, #16]
 801da62:	b15b      	cbz	r3, 801da7c <__smakebuf_r+0x70>
 801da64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801da68:	4630      	mov	r0, r6
 801da6a:	f000 f851 	bl	801db10 <_isatty_r>
 801da6e:	b128      	cbz	r0, 801da7c <__smakebuf_r+0x70>
 801da70:	89a3      	ldrh	r3, [r4, #12]
 801da72:	f023 0303 	bic.w	r3, r3, #3
 801da76:	f043 0301 	orr.w	r3, r3, #1
 801da7a:	81a3      	strh	r3, [r4, #12]
 801da7c:	89a3      	ldrh	r3, [r4, #12]
 801da7e:	431d      	orrs	r5, r3
 801da80:	81a5      	strh	r5, [r4, #12]
 801da82:	e7cf      	b.n	801da24 <__smakebuf_r+0x18>

0801da84 <_putc_r>:
 801da84:	b570      	push	{r4, r5, r6, lr}
 801da86:	460d      	mov	r5, r1
 801da88:	4614      	mov	r4, r2
 801da8a:	4606      	mov	r6, r0
 801da8c:	b118      	cbz	r0, 801da96 <_putc_r+0x12>
 801da8e:	6a03      	ldr	r3, [r0, #32]
 801da90:	b90b      	cbnz	r3, 801da96 <_putc_r+0x12>
 801da92:	f7fe ff6b 	bl	801c96c <__sinit>
 801da96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801da98:	07d8      	lsls	r0, r3, #31
 801da9a:	d405      	bmi.n	801daa8 <_putc_r+0x24>
 801da9c:	89a3      	ldrh	r3, [r4, #12]
 801da9e:	0599      	lsls	r1, r3, #22
 801daa0:	d402      	bmi.n	801daa8 <_putc_r+0x24>
 801daa2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801daa4:	f7ff fc26 	bl	801d2f4 <__retarget_lock_acquire_recursive>
 801daa8:	68a3      	ldr	r3, [r4, #8]
 801daaa:	3b01      	subs	r3, #1
 801daac:	2b00      	cmp	r3, #0
 801daae:	60a3      	str	r3, [r4, #8]
 801dab0:	da05      	bge.n	801dabe <_putc_r+0x3a>
 801dab2:	69a2      	ldr	r2, [r4, #24]
 801dab4:	4293      	cmp	r3, r2
 801dab6:	db12      	blt.n	801dade <_putc_r+0x5a>
 801dab8:	b2eb      	uxtb	r3, r5
 801daba:	2b0a      	cmp	r3, #10
 801dabc:	d00f      	beq.n	801dade <_putc_r+0x5a>
 801dabe:	6823      	ldr	r3, [r4, #0]
 801dac0:	1c5a      	adds	r2, r3, #1
 801dac2:	6022      	str	r2, [r4, #0]
 801dac4:	701d      	strb	r5, [r3, #0]
 801dac6:	b2ed      	uxtb	r5, r5
 801dac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801daca:	07da      	lsls	r2, r3, #31
 801dacc:	d405      	bmi.n	801dada <_putc_r+0x56>
 801dace:	89a3      	ldrh	r3, [r4, #12]
 801dad0:	059b      	lsls	r3, r3, #22
 801dad2:	d402      	bmi.n	801dada <_putc_r+0x56>
 801dad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dad6:	f7ff fc0e 	bl	801d2f6 <__retarget_lock_release_recursive>
 801dada:	4628      	mov	r0, r5
 801dadc:	bd70      	pop	{r4, r5, r6, pc}
 801dade:	4629      	mov	r1, r5
 801dae0:	4622      	mov	r2, r4
 801dae2:	4630      	mov	r0, r6
 801dae4:	f7ff fa35 	bl	801cf52 <__swbuf_r>
 801dae8:	4605      	mov	r5, r0
 801daea:	e7ed      	b.n	801dac8 <_putc_r+0x44>

0801daec <_fstat_r>:
 801daec:	b538      	push	{r3, r4, r5, lr}
 801daee:	4d07      	ldr	r5, [pc, #28]	; (801db0c <_fstat_r+0x20>)
 801daf0:	2300      	movs	r3, #0
 801daf2:	4604      	mov	r4, r0
 801daf4:	4608      	mov	r0, r1
 801daf6:	4611      	mov	r1, r2
 801daf8:	602b      	str	r3, [r5, #0]
 801dafa:	f7e4 fc44 	bl	8002386 <_fstat>
 801dafe:	1c43      	adds	r3, r0, #1
 801db00:	d102      	bne.n	801db08 <_fstat_r+0x1c>
 801db02:	682b      	ldr	r3, [r5, #0]
 801db04:	b103      	cbz	r3, 801db08 <_fstat_r+0x1c>
 801db06:	6023      	str	r3, [r4, #0]
 801db08:	bd38      	pop	{r3, r4, r5, pc}
 801db0a:	bf00      	nop
 801db0c:	20002544 	.word	0x20002544

0801db10 <_isatty_r>:
 801db10:	b538      	push	{r3, r4, r5, lr}
 801db12:	4d06      	ldr	r5, [pc, #24]	; (801db2c <_isatty_r+0x1c>)
 801db14:	2300      	movs	r3, #0
 801db16:	4604      	mov	r4, r0
 801db18:	4608      	mov	r0, r1
 801db1a:	602b      	str	r3, [r5, #0]
 801db1c:	f7e4 fc43 	bl	80023a6 <_isatty>
 801db20:	1c43      	adds	r3, r0, #1
 801db22:	d102      	bne.n	801db2a <_isatty_r+0x1a>
 801db24:	682b      	ldr	r3, [r5, #0]
 801db26:	b103      	cbz	r3, 801db2a <_isatty_r+0x1a>
 801db28:	6023      	str	r3, [r4, #0]
 801db2a:	bd38      	pop	{r3, r4, r5, pc}
 801db2c:	20002544 	.word	0x20002544

0801db30 <_init>:
 801db30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db32:	bf00      	nop
 801db34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db36:	bc08      	pop	{r3}
 801db38:	469e      	mov	lr, r3
 801db3a:	4770      	bx	lr

0801db3c <_fini>:
 801db3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db3e:	bf00      	nop
 801db40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db42:	bc08      	pop	{r3}
 801db44:	469e      	mov	lr, r3
 801db46:	4770      	bx	lr
