
CINNFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011410  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000241c  080115b0  080115b0  000215b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080139cc  080139cc  000300ac  2**0
                  CONTENTS
  4 .ARM          00000008  080139cc  080139cc  000239cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080139d4  080139d4  000300ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080139d4  080139d4  000239d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080139d8  080139d8  000239d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080139dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002480  200000ac  08013a88  000300ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000252c  08013a88  0003252c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e5a3  00000000  00000000  0003011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c4f  00000000  00000000  0004e6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c8  00000000  00000000  00053318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011dd  00000000  00000000  000548e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e339  00000000  00000000  00055abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021c05  00000000  00000000  00073df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0c2f  00000000  00000000  000959fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006658  00000000  00000000  0013662c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0013cc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011598 	.word	0x08011598

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	08011598 	.word	0x08011598

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b0c8      	sub	sp, #288	; 0x120
 8000580:	af00      	add	r7, sp, #0
 8000582:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000586:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800058a:	6018      	str	r0, [r3, #0]
 800058c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000590:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000594:	6019      	str	r1, [r3, #0]
 8000596:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800059a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800059e:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 80005a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005a4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	2bff      	cmp	r3, #255	; 0xff
 80005ac:	d806      	bhi.n	80005bc <PN532_WriteFrame+0x40>
 80005ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005b2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	e0aa      	b.n	8000718 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 80005c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 80005d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005dc:	2200      	movs	r2, #0
 80005de:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 80005e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005e8:	22ff      	movs	r2, #255	; 0xff
 80005ea:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80005f2:	e010      	b.n	8000616 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 80005f4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80005f8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80005fc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000600:	5cd2      	ldrb	r2, [r2, r3]
 8000602:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000606:	4413      	add	r3, r2
 8000608:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 800060c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000610:	3301      	adds	r3, #1
 8000612:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8000616:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800061a:	2b02      	cmp	r3, #2
 800061c:	d9ea      	bls.n	80005f4 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 800061e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000622:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	b2da      	uxtb	r2, r3
 800062a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800062e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000632:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8000634:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000638:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	425b      	negs	r3, r3
 8000642:	b2da      	uxtb	r2, r3
 8000644:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000648:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800064c:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000654:	e023      	b.n	800069e <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8000656:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800065a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800065e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000662:	6812      	ldr	r2, [r2, #0]
 8000664:	441a      	add	r2, r3
 8000666:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800066a:	3305      	adds	r3, #5
 800066c:	7811      	ldrb	r1, [r2, #0]
 800066e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000672:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000676:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000678:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800067c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000680:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000684:	6812      	ldr	r2, [r2, #0]
 8000686:	4413      	add	r3, r2
 8000688:	781a      	ldrb	r2, [r3, #0]
 800068a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800068e:	4413      	add	r3, r2
 8000690:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000694:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000698:	3301      	adds	r3, #1
 800069a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800069e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80006a8:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 80006ac:	8812      	ldrh	r2, [r2, #0]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d8d1      	bhi.n	8000656 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 80006b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006b6:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	3305      	adds	r3, #5
 80006be:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80006c2:	43d2      	mvns	r2, r2
 80006c4:	b2d1      	uxtb	r1, r2
 80006c6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80006ca:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80006ce:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 80006d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006d4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	3306      	adds	r3, #6
 80006dc:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80006e0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80006e4:	2100      	movs	r1, #0
 80006e6:	54d1      	strb	r1, [r2, r3]
     if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 80006e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80006f8:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 80006fc:	8812      	ldrh	r2, [r2, #0]
 80006fe:	3207      	adds	r2, #7
 8000700:	b291      	uxth	r1, r2
 8000702:	f107 0214 	add.w	r2, r7, #20
 8000706:	4610      	mov	r0, r2
 8000708:	4798      	blx	r3
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	e000      	b.n	8000718 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b0c8      	sub	sp, #288	; 0x120
 8000728:	af00      	add	r7, sp, #0
 800072a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800072e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000732:	6018      	str	r0, [r3, #0]
 8000734:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000738:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800073c:	6019      	str	r1, [r3, #0]
 800073e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000742:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000746:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 800074e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000752:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800075e:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 8000762:	8812      	ldrh	r2, [r2, #0]
 8000764:	3207      	adds	r2, #7
 8000766:	b291      	uxth	r1, r2
 8000768:	f107 0214 	add.w	r2, r7, #20
 800076c:	4610      	mov	r0, r2
 800076e:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 8000776:	e019      	b.n	80007ac <PN532_ReadFrame+0x88>
        offset += 1;
 8000778:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800077c:	3301      	adds	r3, #1
 800077e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 8000782:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000786:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	1dda      	adds	r2, r3, #7
 800078e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000792:	429a      	cmp	r2, r3
 8000794:	da0a      	bge.n	80007ac <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8000796:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800079a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	485b      	ldr	r0, [pc, #364]	; (8000910 <PN532_ReadFrame+0x1ec>)
 80007a4:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	e0ab      	b.n	8000904 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 80007ac:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007b0:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80007b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80007b8:	5cd3      	ldrb	r3, [r2, r3]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0dc      	beq.n	8000778 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 80007be:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007c2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80007c6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80007ca:	5cd3      	ldrb	r3, [r2, r3]
 80007cc:	2bff      	cmp	r3, #255	; 0xff
 80007ce:	d00a      	beq.n	80007e6 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 80007d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	484c      	ldr	r0, [pc, #304]	; (8000910 <PN532_ReadFrame+0x1ec>)
 80007de:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	e08e      	b.n	8000904 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 80007e6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007ea:	3301      	adds	r3, #1
 80007ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 80007f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007f4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	1dda      	adds	r2, r3, #7
 80007fc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000800:	429a      	cmp	r2, r3
 8000802:	da0a      	bge.n	800081a <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8000804:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000808:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	4840      	ldr	r0, [pc, #256]	; (8000914 <PN532_ReadFrame+0x1f0>)
 8000812:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	e074      	b.n	8000904 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 800081a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800081e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000822:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000826:	5cd3      	ldrb	r3, [r2, r3]
 8000828:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 800082c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000830:	3301      	adds	r3, #1
 8000832:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000836:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800083a:	5cd2      	ldrb	r2, [r2, r3]
 800083c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000840:	4413      	add	r3, r2
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00a      	beq.n	800085e <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8000848:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800084c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4830      	ldr	r0, [pc, #192]	; (8000918 <PN532_ReadFrame+0x1f4>)
 8000856:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	e052      	b.n	8000904 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 800085e:	2300      	movs	r3, #0
 8000860:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000864:	e014      	b.n	8000890 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000866:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800086a:	1c9a      	adds	r2, r3, #2
 800086c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000870:	4413      	add	r3, r2
 8000872:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000876:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800087a:	5cd2      	ldrb	r2, [r2, r3]
 800087c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000880:	4413      	add	r3, r2
 8000882:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000886:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800088a:	3301      	adds	r3, #1
 800088c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000890:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 8000894:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000898:	429a      	cmp	r2, r3
 800089a:	d2e4      	bcs.n	8000866 <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 800089c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d00a      	beq.n	80008ba <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 80008a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <PN532_ReadFrame+0x1f8>)
 80008b2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	e024      	b.n	8000904 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80008c0:	e018      	b.n	80008f4 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 80008c2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80008c6:	1c9a      	adds	r2, r3, #2
 80008c8:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80008cc:	441a      	add	r2, r3
 80008ce:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80008d2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80008d6:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 80008da:	6809      	ldr	r1, [r1, #0]
 80008dc:	440b      	add	r3, r1
 80008de:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80008e2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80008e6:	5c8a      	ldrb	r2, [r1, r2]
 80008e8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 80008ea:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80008ee:	3301      	adds	r3, #1
 80008f0:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80008f4:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 80008f8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d3e0      	bcc.n	80008c2 <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8000900:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 8000904:	4618      	mov	r0, r3
 8000906:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	080115b0 	.word	0x080115b0
 8000914:	080115e4 	.word	0x080115e4
 8000918:	08011600 	.word	0x08011600
 800091c:	08011630 	.word	0x08011630

08000920 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b0c7      	sub	sp, #284	; 0x11c
 8000924:	af00      	add	r7, sp, #0
 8000926:	f507 748c 	add.w	r4, r7, #280	; 0x118
 800092a:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 800092e:	6020      	str	r0, [r4, #0]
 8000930:	4608      	mov	r0, r1
 8000932:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000936:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800093a:	600a      	str	r2, [r1, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000942:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000946:	4602      	mov	r2, r0
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800094e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000952:	460a      	mov	r2, r1
 8000954:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000956:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800095a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800095e:	22d4      	movs	r2, #212	; 0xd4
 8000960:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000962:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800096a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800096e:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800097c:	e012      	b.n	80009a4 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 800097e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000982:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000986:	441a      	add	r2, r3
 8000988:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800098c:	3302      	adds	r3, #2
 800098e:	7811      	ldrb	r1, [r2, #0]
 8000990:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000994:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000998:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 800099a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800099e:	3301      	adds	r3, #1
 80009a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80009a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d8e5      	bhi.n	800097e <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 80009b2:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 80009b6:	3302      	adds	r3, #2
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	f107 0110 	add.w	r1, r7, #16
 80009be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	f7ff fdd8 	bl	800057c <PN532_WriteFrame>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d011      	beq.n	80009f6 <PN532_CallFunction+0xd6>
        pn532->wakeup();
 80009d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	691b      	ldr	r3, [r3, #16]
 80009de:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 80009e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	485b      	ldr	r0, [pc, #364]	; (8000b5c <PN532_CallFunction+0x23c>)
 80009ee:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
 80009f4:	e0ac      	b.n	8000b50 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 80009f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000a06:	4798      	blx	r3
 8000a08:	4603      	mov	r3, r0
 8000a0a:	f083 0301 	eor.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
 8000a18:	e09a      	b.n	8000b50 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8000a1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f107 0210 	add.w	r2, r7, #16
 8000a2a:	2106      	movs	r1, #6
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000a36:	e01c      	b.n	8000a72 <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8000a38:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a3c:	4a48      	ldr	r2, [pc, #288]	; (8000b60 <PN532_CallFunction+0x240>)
 8000a3e:	5cd2      	ldrb	r2, [r2, r3]
 8000a40:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a44:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000a48:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8000a4c:	5ccb      	ldrb	r3, [r1, r3]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d00a      	beq.n	8000a68 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8000a52:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	4841      	ldr	r0, [pc, #260]	; (8000b64 <PN532_CallFunction+0x244>)
 8000a60:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	e073      	b.n	8000b50 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000a68:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000a72:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a76:	2b05      	cmp	r3, #5
 8000a78:	d9de      	bls.n	8000a38 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000a7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000a8a:	4798      	blx	r3
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f083 0301 	eor.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	e058      	b.n	8000b50 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000a9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000aa2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	f107 0110 	add.w	r1, r7, #16
 8000ab0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ab4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	f7ff fe33 	bl	8000724 <PN532_ReadFrame>
 8000abe:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000ac2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2bd5      	cmp	r3, #213	; 0xd5
 8000ace:	d10d      	bne.n	8000aec <PN532_CallFunction+0x1cc>
 8000ad0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ad8:	785b      	ldrb	r3, [r3, #1]
 8000ada:	461a      	mov	r2, r3
 8000adc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ae0:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d00a      	beq.n	8000b02 <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8000aec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000af0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	481b      	ldr	r0, [pc, #108]	; (8000b68 <PN532_CallFunction+0x248>)
 8000afa:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
 8000b00:	e026      	b.n	8000b50 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000b02:	2300      	movs	r3, #0
 8000b04:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000b08:	e015      	b.n	8000b36 <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8000b0a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000b0e:	1c9a      	adds	r2, r3, #2
 8000b10:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000b14:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000b18:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8000b1c:	6809      	ldr	r1, [r1, #0]
 8000b1e:	440b      	add	r3, r1
 8000b20:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000b24:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8000b28:	5c8a      	ldrb	r2, [r1, r2]
 8000b2a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000b2c:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000b30:	3301      	adds	r3, #1
 8000b32:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000b36:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000b40:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000b44:	8812      	ldrh	r2, [r2, #0]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d8df      	bhi.n	8000b0a <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000b4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b4e:	3b02      	subs	r3, #2
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd90      	pop	{r4, r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	08011664 	.word	0x08011664
 8000b60:	08011eec 	.word	0x08011eec
 8000b64:	08011678 	.word	0x08011678
 8000b68:	080116a4 	.word	0x080116a4

08000b6c <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af04      	add	r7, sp, #16
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000b76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b7a:	9302      	str	r3, [sp, #8]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	2300      	movs	r3, #0
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2304      	movs	r3, #4
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	2102      	movs	r1, #2
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fec8 	bl	8000920 <PN532_CallFunction>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b96:	d106      	bne.n	8000ba6 <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <PN532_GetFirmwareVersion+0x44>)
 8000b9e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	e000      	b.n	8000ba8 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	080116cc 	.word	0x080116cc

08000bb4 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af04      	add	r7, sp, #16
 8000bba:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <PN532_SamConfiguration+0x40>)
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	6812      	ldr	r2, [r2, #0]
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	8019      	strh	r1, [r3, #0]
 8000bc8:	3302      	adds	r3, #2
 8000bca:	0c12      	lsrs	r2, r2, #16
 8000bcc:	701a      	strb	r2, [r3, #0]
    //uint8_t params[] = {0x4A, 0x01, 0x00};
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2300      	movs	r3, #0
 8000be0:	2200      	movs	r2, #0
 8000be2:	2114      	movs	r1, #20
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fe9b 	bl	8000920 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	080116e8 	.word	0x080116e8

08000bf8 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b090      	sub	sp, #64	; 0x40
 8000bfc:	af04      	add	r7, sp, #16
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	4613      	mov	r3, r2
 8000c06:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000c14:	f107 0210 	add.w	r2, r7, #16
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2313      	movs	r3, #19
 8000c28:	214a      	movs	r1, #74	; 0x4a
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff fe78 	bl	8000920 <PN532_CallFunction>
 8000c30:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	da02      	bge.n	8000c3e <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	e02e      	b.n	8000c9c <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000c3e:	7c3b      	ldrb	r3, [r7, #16]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d006      	beq.n	8000c52 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <PN532_ReadPassiveTarget+0xac>)
 8000c4a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	e024      	b.n	8000c9c <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8000c52:	7d7b      	ldrb	r3, [r7, #21]
 8000c54:	2b07      	cmp	r3, #7
 8000c56:	d906      	bls.n	8000c66 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <PN532_ReadPassiveTarget+0xb0>)
 8000c5e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	e01a      	b.n	8000c9c <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c6c:	e010      	b.n	8000c90 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8000c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c72:	1d9a      	adds	r2, r3, #6
 8000c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	440b      	add	r3, r1
 8000c7c:	3230      	adds	r2, #48	; 0x30
 8000c7e:	443a      	add	r2, r7
 8000c80:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000c84:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c90:	7d7b      	ldrb	r3, [r7, #21]
 8000c92:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3e9      	bcc.n	8000c6e <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000c9a:	7d7b      	ldrb	r3, [r7, #21]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3730      	adds	r7, #48	; 0x30
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	080116ec 	.word	0x080116ec
 8000ca8:	0801170c 	.word	0x0801170c

08000cac <calculate_sha1>:

static uint8_t mrz_key[KEY_SIZE];
static BACKeys session_keys;

// Fonctions utilitaires pour le protocole BAC
static void calculate_sha1(const uint8_t* data, size_t length, uint8_t* hash) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b09c      	sub	sp, #112	; 0x70
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
    // Implémentation de SHA-1
    mbedtls_sha1_context ctx;
    mbedtls_sha1_init(&ctx);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f00b f9c2 	bl	800c046 <mbedtls_sha1_init>
    mbedtls_sha1_starts(&ctx);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f00b f9da 	bl	800c080 <mbedtls_sha1_starts>
    mbedtls_sha1_update(&ctx, data, length);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	68f9      	ldr	r1, [r7, #12]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f00c ffd3 	bl	800dc80 <mbedtls_sha1_update>
    mbedtls_sha1_finish(&ctx, hash);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f00d f845 	bl	800dd70 <mbedtls_sha1_finish>
    mbedtls_sha1_free(&ctx);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00b f9b8 	bl	800c060 <mbedtls_sha1_free>
}
 8000cf0:	bf00      	nop
 8000cf2:	3770      	adds	r7, #112	; 0x70
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <calculate_3des>:

static void calculate_3des(uint8_t* input, uint8_t* output, uint8_t* key, int mode) {
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b0e5      	sub	sp, #404	; 0x194
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 8000d02:	f5a4 74c2 	sub.w	r4, r4, #388	; 0x184
 8000d06:	6020      	str	r0, [r4, #0]
 8000d08:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8000d0c:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
 8000d10:	6001      	str	r1, [r0, #0]
 8000d12:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8000d16:	f5a1 71c6 	sub.w	r1, r1, #396	; 0x18c
 8000d1a:	600a      	str	r2, [r1, #0]
 8000d1c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8000d20:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8000d24:	6013      	str	r3, [r2, #0]
    // Implémentation du 3DES
    mbedtls_des3_context ctx;
    mbedtls_des3_init(&ctx);
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f008 fa3f 	bl	80091ae <mbedtls_des3_init>

    if (mode == MBEDTLS_DES_ENCRYPT) {
 8000d30:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d34:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d118      	bne.n	8000d70 <calculate_3des+0x78>
        mbedtls_des3_set3key_enc(&ctx, key);
 8000d3e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d42:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000d46:	f107 0210 	add.w	r2, r7, #16
 8000d4a:	6819      	ldr	r1, [r3, #0]
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	f008 fdd7 	bl	8009900 <mbedtls_des3_set3key_enc>
        mbedtls_des3_crypt_ecb(&ctx, input, output);
 8000d52:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d56:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8000d5a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d5e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000d62:	f107 0010 	add.w	r0, r7, #16
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	6819      	ldr	r1, [r3, #0]
 8000d6a:	f009 f8b3 	bl	8009ed4 <mbedtls_des3_crypt_ecb>
 8000d6e:	e017      	b.n	8000da0 <calculate_3des+0xa8>
    } else {
        mbedtls_des3_set3key_dec(&ctx, key);
 8000d70:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d74:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000d78:	f107 0210 	add.w	r2, r7, #16
 8000d7c:	6819      	ldr	r1, [r3, #0]
 8000d7e:	4610      	mov	r0, r2
 8000d80:	f008 fde6 	bl	8009950 <mbedtls_des3_set3key_dec>
        mbedtls_des3_crypt_ecb(&ctx, input, output);
 8000d84:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d88:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8000d8c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d90:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000d94:	f107 0010 	add.w	r0, r7, #16
 8000d98:	6812      	ldr	r2, [r2, #0]
 8000d9a:	6819      	ldr	r1, [r3, #0]
 8000d9c:	f009 f89a 	bl	8009ed4 <mbedtls_des3_crypt_ecb>
    }

    mbedtls_des3_free(&ctx);
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4618      	mov	r0, r3
 8000da6:	f008 fa10 	bl	80091ca <mbedtls_des3_free>
}
 8000daa:	bf00      	nop
 8000dac:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd90      	pop	{r4, r7, pc}

08000db4 <calculate_mrz_key>:

// Fonction pour calculer la clé MRZ
static void calculate_mrz_key(const char* CIN_num, const char* birth_date, const char* expiry_date) {
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b091      	sub	sp, #68	; 0x44
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
    uint8_t mrz_info[MRZ_SIZE];
    uint8_t hash[20];

    memcpy(mrz_info, CIN_num, 10);
 8000dc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc4:	220a      	movs	r2, #10
 8000dc6:	68f9      	ldr	r1, [r7, #12]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f00f ff82 	bl	8010cd2 <memcpy>
	memcpy(mrz_info + 9, birth_date, 6);
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	3309      	adds	r3, #9
 8000dd4:	2206      	movs	r2, #6
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f00f ff7a 	bl	8010cd2 <memcpy>
	memcpy(mrz_info + 15, expiry_date, 6);
 8000dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de2:	330f      	adds	r3, #15
 8000de4:	2206      	movs	r2, #6
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f00f ff72 	bl	8010cd2 <memcpy>

    // Calculer le SHA-1
    calculate_sha1(mrz_info, MRZ_SIZE, hash);
 8000dee:	f107 0214 	add.w	r2, r7, #20
 8000df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df6:	2118      	movs	r1, #24
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff57 	bl	8000cac <calculate_sha1>

    // Prendre les 16 premiers octets pour la clé
    memcpy(mrz_key, hash, KEY_SIZE);
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <calculate_mrz_key+0x60>)
 8000e00:	461c      	mov	r4, r3
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000e0c:	bf00      	nop
 8000e0e:	3744      	adds	r7, #68	; 0x44
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	200000c8 	.word	0x200000c8

08000e18 <derive_session_keys>:

// Fonction pour dériver les clés de session
static void derive_session_keys(uint8_t* k_seed) {
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b093      	sub	sp, #76	; 0x4c
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    uint8_t hash[20];
    uint8_t enc_data[20] = {0};
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
    uint8_t mac_data[20] = {0};
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]

    // Dérivation pour Ksenc
    enc_data[0] = 0x00;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f887 3020 	strb.w	r3, [r7, #32]
    enc_data[1] = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    enc_data[2] = 0x00;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    enc_data[3] = 0x01;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    memcpy(enc_data + 4, k_seed, 16);
 8000e5c:	f107 0320 	add.w	r3, r7, #32
 8000e60:	3304      	adds	r3, #4
 8000e62:	2210      	movs	r2, #16
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f00f ff33 	bl	8010cd2 <memcpy>
    calculate_sha1(enc_data, 20, hash);
 8000e6c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	2114      	movs	r1, #20
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff18 	bl	8000cac <calculate_sha1>
    memcpy(session_keys.Ksenc, hash, 16);
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <derive_session_keys+0xbc>)
 8000e7e:	461c      	mov	r4, r3
 8000e80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Dérivation pour Ksmac
    mac_data[0] = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	733b      	strb	r3, [r7, #12]
    mac_data[1] = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	737b      	strb	r3, [r7, #13]
    mac_data[2] = 0x00;
 8000e92:	2300      	movs	r3, #0
 8000e94:	73bb      	strb	r3, [r7, #14]
    mac_data[3] = 0x02;
 8000e96:	2302      	movs	r3, #2
 8000e98:	73fb      	strb	r3, [r7, #15]
    memcpy(mac_data + 4, k_seed, 16);
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f00f ff14 	bl	8010cd2 <memcpy>
    calculate_sha1(mac_data, 20, hash);
 8000eaa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	2114      	movs	r1, #20
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fef9 	bl	8000cac <calculate_sha1>
    memcpy(session_keys.Ksmac, hash, 16);
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <derive_session_keys+0xbc>)
 8000ebc:	f103 0410 	add.w	r4, r3, #16
 8000ec0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ec4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000eca:	bf00      	nop
 8000ecc:	374c      	adds	r7, #76	; 0x4c
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd90      	pop	{r4, r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000d8 	.word	0x200000d8

08000ed8 <perform_bac>:


int perform_bac(PN532* pn532) {
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b0b8      	sub	sp, #224	; 0xe0
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	6078      	str	r0, [r7, #4]
    uint8_t rnd_icc[8], rnd_ifd[8], k_ifd[16];
    uint8_t encrypted_challenge[32];
    uint8_t response[8];
    uint8_t cmd_data[40];

    for(int i = 0; i < 8; i++) {
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000ee6:	e014      	b.n	8000f12 <perform_bac+0x3a>
        rnd_ifd[i] = rand() % 256;
 8000ee8:	f00f fb6c 	bl	80105c4 <rand>
 8000eec:	4603      	mov	r3, r0
 8000eee:	425a      	negs	r2, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	bf58      	it	pl
 8000ef6:	4253      	negpl	r3, r2
 8000ef8:	b2d9      	uxtb	r1, r3
 8000efa:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8000efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f02:	4413      	add	r3, r2
 8000f04:	460a      	mov	r2, r1
 8000f06:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 8; i++) {
 8000f08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000f12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f16:	2b07      	cmp	r3, #7
 8000f18:	dde6      	ble.n	8000ee8 <perform_bac+0x10>
    }


    uint8_t get_challenge[] = {0x00, 0x84, 0x00, 0x00, 0x08}; //0x84 | PN532_COMMAND_INDATAEXCHANGE
 8000f1a:	4a50      	ldr	r2, [pc, #320]	; (800105c <perform_bac+0x184>)
 8000f1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f24:	6018      	str	r0, [r3, #0]
 8000f26:	3304      	adds	r3, #4
 8000f28:	7019      	strb	r1, [r3, #0]
    if (PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, response, sizeof(response), get_challenge, sizeof(get_challenge), PN532_DEFAULT_TIMEOUT) <= 0) {
 8000f2a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	2305      	movs	r3, #5
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2308      	movs	r3, #8
 8000f40:	2140      	movs	r1, #64	; 0x40
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff fcec 	bl	8000920 <PN532_CallFunction>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	dc01      	bgt.n	8000f52 <perform_bac+0x7a>
        return 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e07f      	b.n	8001052 <perform_bac+0x17a>
    }
    memcpy(rnd_icc, response, 8);
 8000f52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f56:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000f5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f5e:	e883 0003 	stmia.w	r3, {r0, r1}

    memcpy(cmd_data, rnd_ifd, 8);
 8000f62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f66:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8000f6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f6e:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(cmd_data + 8, rnd_icc, 8);
 8000f72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f76:	3308      	adds	r3, #8
 8000f78:	461a      	mov	r2, r3
 8000f7a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f7e:	cb03      	ldmia	r3!, {r0, r1}
 8000f80:	6010      	str	r0, [r2, #0]
 8000f82:	6051      	str	r1, [r2, #4]
    memcpy(cmd_data + 16, k_ifd, 16);
 8000f84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f88:	3310      	adds	r3, #16
 8000f8a:	461d      	mov	r5, r3
 8000f8c:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f92:	6028      	str	r0, [r5, #0]
 8000f94:	6069      	str	r1, [r5, #4]
 8000f96:	60aa      	str	r2, [r5, #8]
 8000f98:	60eb      	str	r3, [r5, #12]

    calculate_3des(cmd_data, encrypted_challenge, mrz_key, MBEDTLS_DES_ENCRYPT);
 8000f9a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000f9e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	4a2e      	ldr	r2, [pc, #184]	; (8001060 <perform_bac+0x188>)
 8000fa6:	f7ff fea7 	bl	8000cf8 <calculate_3des>

    uint8_t auth_cmd[40] = {0x00, 0x82, 0x00, 0x00, 0x28};
 8000faa:	4a2e      	ldr	r2, [pc, #184]	; (8001064 <perform_bac+0x18c>)
 8000fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb0:	6810      	ldr	r0, [r2, #0]
 8000fb2:	6018      	str	r0, [r3, #0]
 8000fb4:	8892      	ldrh	r2, [r2, #4]
 8000fb6:	809a      	strh	r2, [r3, #4]
 8000fb8:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8000fbc:	2222      	movs	r2, #34	; 0x22
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00f fdfb 	bl	8010bbc <memset>
    memcpy(auth_cmd + 5, encrypted_challenge, 32);
 8000fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fca:	3305      	adds	r3, #5
 8000fcc:	461d      	mov	r5, r3
 8000fce:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd4:	6028      	str	r0, [r5, #0]
 8000fd6:	6069      	str	r1, [r5, #4]
 8000fd8:	60aa      	str	r2, [r5, #8]
 8000fda:	60eb      	str	r3, [r5, #12]
 8000fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fde:	6128      	str	r0, [r5, #16]
 8000fe0:	6169      	str	r1, [r5, #20]
 8000fe2:	61aa      	str	r2, [r5, #24]
 8000fe4:	61eb      	str	r3, [r5, #28]
    if (PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, response, sizeof(response), auth_cmd, sizeof(auth_cmd), PN532_DEFAULT_TIMEOUT) <= 0) {
 8000fe6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2328      	movs	r3, #40	; 0x28
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	2140      	movs	r1, #64	; 0x40
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fc8e 	bl	8000920 <PN532_CallFunction>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	dc01      	bgt.n	800100e <perform_bac+0x136>
        return 0;
 800100a:	2300      	movs	r3, #0
 800100c:	e021      	b.n	8001052 <perform_bac+0x17a>
    }

    uint8_t k_seed[32];
    memcpy(k_seed, rnd_ifd, 8);
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800101a:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(k_seed + 8, rnd_icc, 8);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	3308      	adds	r3, #8
 8001024:	461a      	mov	r2, r3
 8001026:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800102a:	cb03      	ldmia	r3!, {r0, r1}
 800102c:	6010      	str	r0, [r2, #0]
 800102e:	6051      	str	r1, [r2, #4]
    memcpy(k_seed + 16, k_ifd, 16);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	3310      	adds	r3, #16
 8001036:	461d      	mov	r5, r3
 8001038:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800103c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103e:	6028      	str	r0, [r5, #0]
 8001040:	6069      	str	r1, [r5, #4]
 8001042:	60aa      	str	r2, [r5, #8]
 8001044:	60eb      	str	r3, [r5, #12]
    derive_session_keys(k_seed);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fee4 	bl	8000e18 <derive_session_keys>

    return 1;
 8001050:	2301      	movs	r3, #1
}
 8001052:	4618      	mov	r0, r3
 8001054:	37d0      	adds	r7, #208	; 0xd0
 8001056:	46bd      	mov	sp, r7
 8001058:	bdb0      	pop	{r4, r5, r7, pc}
 800105a:	bf00      	nop
 800105c:	08011734 	.word	0x08011734
 8001060:	200000c8 	.word	0x200000c8
 8001064:	0801173c 	.word	0x0801173c

08001068 <CIN_data>:


int CIN_data(PN532* pn532, uint8_t* data_buffer, size_t* data_length) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b0ec      	sub	sp, #432	; 0x1b0
 800106c:	af04      	add	r7, sp, #16
 800106e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001072:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001076:	6018      	str	r0, [r3, #0]
 8001078:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800107c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001080:	6019      	str	r1, [r3, #0]
 8001082:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001086:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800108a:	601a      	str	r2, [r3, #0]
    uint8_t cmd[5] = {0x00, 0xB0, 0x00, 0x00, 0x00};  // READ BINARY
 800108c:	4a27      	ldr	r2, [pc, #156]	; (800112c <CIN_data+0xc4>)
 800108e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001096:	6018      	str	r0, [r3, #0]
 8001098:	3304      	adds	r3, #4
 800109a:	7019      	strb	r1, [r3, #0]
    int resp_len;

    uint8_t protected_cmd[MAX_FRAME_SIZE];
    size_t protected_len;

    if (!apply_secure_messaging(cmd, sizeof(cmd), protected_cmd, &protected_len)) {
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	f107 0214 	add.w	r2, r7, #20
 80010a4:	f507 70ca 	add.w	r0, r7, #404	; 0x194
 80010a8:	2105      	movs	r1, #5
 80010aa:	f000 f8e9 	bl	8001280 <apply_secure_messaging>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <CIN_data+0x50>
        return 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e034      	b.n	8001122 <CIN_data+0xba>
    }

    resp_len = PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, response, sizeof(response), protected_cmd, protected_len, PN532_DEFAULT_TIMEOUT);
 80010b8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80010c8:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 80010cc:	f5a1 70ca 	sub.w	r0, r1, #404	; 0x194
 80010d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010d4:	9102      	str	r1, [sp, #8]
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	2140      	movs	r1, #64	; 0x40
 80010e2:	6800      	ldr	r0, [r0, #0]
 80010e4:	f7ff fc1c 	bl	8000920 <PN532_CallFunction>
 80010e8:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
    if (resp_len <= 0) {
 80010ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	dc01      	bgt.n	80010f8 <CIN_data+0x90>
        return 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e014      	b.n	8001122 <CIN_data+0xba>
    }
    // resp_len / 128
    if (!decrypt_secure_messaging(response, 128, data_buffer, data_length)) {
 80010f8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010fc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001100:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001104:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8001108:	f507 708a 	add.w	r0, r7, #276	; 0x114
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	f000 f95d 	bl	80013d0 <decrypt_secure_messaging>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <CIN_data+0xb8>
        return 0;
 800111c:	2300      	movs	r3, #0
 800111e:	e000      	b.n	8001122 <CIN_data+0xba>
    }

    return 1;
 8001120:	2301      	movs	r3, #1
}
 8001122:	4618      	mov	r0, r3
 8001124:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	08011744 	.word	0x08011744

08001130 <read_identity_card>:


int read_identity_card(PN532* pn532, const char* CIN_num, const char* birth_date, const char* expiry_date) {
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b0c9      	sub	sp, #292	; 0x124
 8001134:	af00      	add	r7, sp, #0
 8001136:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800113a:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 800113e:	6020      	str	r0, [r4, #0]
 8001140:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8001144:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8001148:	6001      	str	r1, [r0, #0]
 800114a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800114e:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8001152:	600a      	str	r2, [r1, #0]
 8001154:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001158:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800115c:	6013      	str	r3, [r2, #0]
    uint8_t data_buffer[MAX_FRAME_SIZE];
    size_t data_length;

    calculate_mrz_key(CIN_num, birth_date, expiry_date);
 800115e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001162:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8001166:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800116a:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 800116e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001172:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	6809      	ldr	r1, [r1, #0]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	f7ff fe1a 	bl	8000db4 <calculate_mrz_key>

    if (!perform_bac(pn532)) {
 8001180:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001184:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	f7ff fea5 	bl	8000ed8 <perform_bac>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d104      	bne.n	800119e <read_identity_card+0x6e>
        printf("Echec de l'authentification BAC\n");
 8001194:	4834      	ldr	r0, [pc, #208]	; (8001268 <read_identity_card+0x138>)
 8001196:	f00f fc31 	bl	80109fc <puts>
        return 0;
 800119a:	2300      	movs	r3, #0
 800119c:	e05e      	b.n	800125c <read_identity_card+0x12c>
    }

    if (!CIN_data(pn532, data_buffer, &data_length)) {
 800119e:	f107 0214 	add.w	r2, r7, #20
 80011a2:	f107 0118 	add.w	r1, r7, #24
 80011a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	f7ff ff5a 	bl	8001068 <CIN_data>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d104      	bne.n	80011c4 <read_identity_card+0x94>
        printf("Echec de la lecture des donnees\n");
 80011ba:	482c      	ldr	r0, [pc, #176]	; (800126c <read_identity_card+0x13c>)
 80011bc:	f00f fc1e 	bl	80109fc <puts>
        return 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	e04b      	b.n	800125c <read_identity_card+0x12c>
    }

    printf("Donnees lues avec succes (%d octets)\n", data_length);
 80011c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4827      	ldr	r0, [pc, #156]	; (8001270 <read_identity_card+0x140>)
 80011d2:	f00f fba5 	bl	8010920 <iprintf>
    for (size_t i = 0; i < data_length; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80011dc:	e010      	b.n	8001200 <read_identity_card+0xd0>
        printf("%02X ", data_buffer[i]);
 80011de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80011e2:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80011e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4619      	mov	r1, r3
 80011f0:	4820      	ldr	r0, [pc, #128]	; (8001274 <read_identity_card+0x144>)
 80011f2:	f00f fb95 	bl	8010920 <iprintf>
    for (size_t i = 0; i < data_length; i++) {
 80011f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80011fa:	3301      	adds	r3, #1
 80011fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001200:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001204:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800120e:	429a      	cmp	r2, r3
 8001210:	d3e5      	bcc.n	80011de <read_identity_card+0xae>
    }
    printf("\n");
 8001212:	200a      	movs	r0, #10
 8001214:	f00f fb96 	bl	8010944 <putchar>
    printf("Donnes character \n");
 8001218:	4817      	ldr	r0, [pc, #92]	; (8001278 <read_identity_card+0x148>)
 800121a:	f00f fbef 	bl	80109fc <puts>
	for (size_t i = 0; i < data_length; i++) {
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001224:	e010      	b.n	8001248 <read_identity_card+0x118>
		printf("%c ", data_buffer[i]);
 8001226:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800122a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800122e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001232:	4413      	add	r3, r2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	4619      	mov	r1, r3
 8001238:	4810      	ldr	r0, [pc, #64]	; (800127c <read_identity_card+0x14c>)
 800123a:	f00f fb71 	bl	8010920 <iprintf>
	for (size_t i = 0; i < data_length; i++) {
 800123e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001242:	3301      	adds	r3, #1
 8001244:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001248:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800124c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001256:	429a      	cmp	r2, r3
 8001258:	d3e5      	bcc.n	8001226 <read_identity_card+0xf6>
	}

    return 1;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8001262:	46bd      	mov	sp, r7
 8001264:	bd90      	pop	{r4, r7, pc}
 8001266:	bf00      	nop
 8001268:	0801174c 	.word	0x0801174c
 800126c:	0801176c 	.word	0x0801176c
 8001270:	0801178c 	.word	0x0801178c
 8001274:	080117b4 	.word	0x080117b4
 8001278:	080117bc 	.word	0x080117bc
 800127c:	080117d0 	.word	0x080117d0

08001280 <apply_secure_messaging>:

// Fonction pour appliquer la messagerie sécurisée
int apply_secure_messaging(uint8_t* cmd, size_t cmd_len, uint8_t* protected_cmd, size_t* protected_len) {
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b0da      	sub	sp, #360	; 0x168
 8001284:	af00      	add	r7, sp, #0
 8001286:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 800128a:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
 800128e:	6020      	str	r0, [r4, #0]
 8001290:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 8001294:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 8001298:	6001      	str	r1, [r0, #0]
 800129a:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 800129e:	f5a1 71b2 	sub.w	r1, r1, #356	; 0x164
 80012a2:	600a      	str	r2, [r1, #0]
 80012a4:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80012a8:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 80012ac:	6013      	str	r3, [r2, #0]
    uint8_t mac[16];
    uint8_t padded_cmd[MAX_FRAME_SIZE];
    size_t padded_len = ((cmd_len + 7) / 8) * 8; // Padding to multiple of 8 bytes
 80012ae:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80012b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3307      	adds	r3, #7
 80012ba:	f023 0307 	bic.w	r3, r3, #7
 80012be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    memcpy(padded_cmd, cmd, cmd_len);
 80012c2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80012c6:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 80012ca:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80012ce:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80012d2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	6819      	ldr	r1, [r3, #0]
 80012da:	f00f fcfa 	bl	8010cd2 <memcpy>
    memset(padded_cmd + cmd_len, 0x00, padded_len - cmd_len);
 80012de:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80012e2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80012e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	18d0      	adds	r0, r2, r3
 80012ee:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80012f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80012f6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	2100      	movs	r1, #0
 8001302:	f00f fc5b 	bl	8010bbc <memset>

    mbedtls_cipher_context_t ctx;
    mbedtls_cipher_init(&ctx);
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	4618      	mov	r0, r3
 800130c:	f006 fa6c 	bl	80077e8 <mbedtls_cipher_init>
    mbedtls_cipher_setup(&ctx, mbedtls_cipher_info_from_type(MBEDTLS_CIPHER_AES_128_CBC)); //  MBEDTLS_CIPHER_AES_128_CMAC
 8001310:	2005      	movs	r0, #5
 8001312:	f006 fa0f 	bl	8007734 <mbedtls_cipher_info_from_type>
 8001316:	4602      	mov	r2, r0
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f006 fa98 	bl	8007854 <mbedtls_cipher_setup>
    mbedtls_cipher_cmac_starts(&ctx, session_keys.Ksmac, 128);
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	4928      	ldr	r1, [pc, #160]	; (80013cc <apply_secure_messaging+0x14c>)
 800132c:	4618      	mov	r0, r3
 800132e:	f007 fbc1 	bl	8008ab4 <mbedtls_cipher_cmac_starts>
    mbedtls_cipher_cmac_update(&ctx, padded_cmd, padded_len);
 8001332:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800133e:	4618      	mov	r0, r3
 8001340:	f007 fc04 	bl	8008b4c <mbedtls_cipher_cmac_update>
    mbedtls_cipher_cmac_finish(&ctx, mac);
 8001344:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f007 fd56 	bl	8008e00 <mbedtls_cipher_cmac_finish>
    mbedtls_cipher_free(&ctx);
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	4618      	mov	r0, r3
 800135a:	f006 fa52 	bl	8007802 <mbedtls_cipher_free>

    memcpy(protected_cmd, cmd, cmd_len);
 800135e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001362:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8001366:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800136a:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 800136e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001372:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	6809      	ldr	r1, [r1, #0]
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	f00f fca9 	bl	8010cd2 <memcpy>
    memcpy(protected_cmd + cmd_len, mac, 16);
 8001380:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001384:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8001388:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800138c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4413      	add	r3, r2
 8001396:	461d      	mov	r5, r3
 8001398:	f507 74aa 	add.w	r4, r7, #340	; 0x154
 800139c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139e:	6028      	str	r0, [r5, #0]
 80013a0:	6069      	str	r1, [r5, #4]
 80013a2:	60aa      	str	r2, [r5, #8]
 80013a4:	60eb      	str	r3, [r5, #12]
    *protected_len = cmd_len + 16;
 80013a6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80013aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f103 0210 	add.w	r2, r3, #16
 80013b4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80013b8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	601a      	str	r2, [r3, #0]
    return 1;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bdb0      	pop	{r4, r5, r7, pc}
 80013cc:	200000e8 	.word	0x200000e8

080013d0 <decrypt_secure_messaging>:


int decrypt_secure_messaging(uint8_t* encrypted_data, size_t encrypted_len, uint8_t* decrypted_data, size_t* decrypted_len) {
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b0d1      	sub	sp, #324	; 0x144
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	f507 749c 	add.w	r4, r7, #312	; 0x138
 80013da:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 80013de:	6020      	str	r0, [r4, #0]
 80013e0:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80013e4:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 80013e8:	6001      	str	r1, [r0, #0]
 80013ea:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80013ee:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 80013f2:	600a      	str	r2, [r1, #0]
 80013f4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80013f8:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80013fc:	6013      	str	r3, [r2, #0]
    uint8_t iv[16] = {0}; // Initialisation du vecteur
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001404:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
    mbedtls_aes_context aes_ctx;

    mbedtls_aes_init(&aes_ctx);
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4618      	mov	r0, r3
 8001416:	f000 ff83 	bl	8002320 <mbedtls_aes_init>
    mbedtls_aes_setkey_dec(&aes_ctx, session_keys.Ksenc, 128);
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	491e      	ldr	r1, [pc, #120]	; (800149c <decrypt_secure_messaging+0xcc>)
 8001422:	4618      	mov	r0, r3
 8001424:	f001 f9b4 	bl	8002790 <mbedtls_aes_setkey_dec>

    if (mbedtls_aes_crypt_cbc(&aes_ctx, MBEDTLS_AES_DECRYPT, encrypted_len, iv, encrypted_data, decrypted_data) != 0) {
 8001428:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800142c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001430:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8001434:	f107 0010 	add.w	r0, r7, #16
 8001438:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800143c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001448:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	460b      	mov	r3, r1
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	2100      	movs	r1, #0
 8001456:	f002 f955 	bl	8003704 <mbedtls_aes_crypt_cbc>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <decrypt_secure_messaging+0x9e>
    	mbedtls_aes_free(&aes_ctx);
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4618      	mov	r0, r3
 8001466:	f000 ff69 	bl	800233c <mbedtls_aes_free>
        return 0;
 800146a:	2300      	movs	r3, #0
 800146c:	e010      	b.n	8001490 <decrypt_secure_messaging+0xc0>
    }

    mbedtls_aes_free(&aes_ctx);
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	4618      	mov	r0, r3
 8001474:	f000 ff62 	bl	800233c <mbedtls_aes_free>
    *decrypted_len = encrypted_len;
 8001478:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800147c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001486:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	601a      	str	r2, [r3, #0]

    return 1;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8001496:	46bd      	mov	sp, r7
 8001498:	bd90      	pop	{r4, r7, pc}
 800149a:	bf00      	nop
 800149c:	200000d8 	.word	0x200000d8

080014a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d013      	beq.n	80014e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80014c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00b      	beq.n	80014e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014c8:	e000      	b.n	80014cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80014ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f9      	beq.n	80014ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0c8      	sub	sp, #288	; 0x120
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t buff[255];
  uint8_t uid[MIFARE_UID_MAX_LENGTH];
  int32_t uid_len = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  /* USER CODE END 1 */
  uint8_t indx = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001502:	f00c fd15 	bl	800df30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001506:	f000 f8af 	bl	8001668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150a:	f000 f96f 	bl	80017ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800150e:	f000 f943 	bl	8001798 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001512:	f000 f913 	bl	800173c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	const char* CIN_num = "OPI5GORE<";
 8001516:	4b46      	ldr	r3, [pc, #280]	; (8001630 <main+0x140>)
 8001518:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	const char* birth_date = "000920";     // Format YYMMDD
 800151c:	4b45      	ldr	r3, [pc, #276]	; (8001634 <main+0x144>)
 800151e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	const char* expiry_date = "310913";    // Format YYMMDD
 8001522:	4b45      	ldr	r3, [pc, #276]	; (8001638 <main+0x148>)
 8001524:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Start \n");
 8001528:	4844      	ldr	r0, [pc, #272]	; (800163c <main+0x14c>)
 800152a:	f00f fa67 	bl	80109fc <puts>

  PN532_I2C_Init(&pn532);
 800152e:	4844      	ldr	r0, [pc, #272]	; (8001640 <main+0x150>)
 8001530:	f000 fac6 	bl	8001ac0 <PN532_I2C_Init>
  PN532_GetFirmwareVersion(&pn532, buff);
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4619      	mov	r1, r3
 800153a:	4841      	ldr	r0, [pc, #260]	; (8001640 <main+0x150>)
 800153c:	f7ff fb16 	bl	8000b6c <PN532_GetFirmwareVersion>
  if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK) {
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4619      	mov	r1, r3
 8001546:	483e      	ldr	r0, [pc, #248]	; (8001640 <main+0x150>)
 8001548:	f7ff fb10 	bl	8000b6c <PN532_GetFirmwareVersion>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d115      	bne.n	800157e <main+0x8e>
     printf("Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
 8001552:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001556:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800155a:	785b      	ldrb	r3, [r3, #1]
 800155c:	4619      	mov	r1, r3
 800155e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001562:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001566:	789b      	ldrb	r3, [r3, #2]
 8001568:	461a      	mov	r2, r3
 800156a:	4836      	ldr	r0, [pc, #216]	; (8001644 <main+0x154>)
 800156c:	f00f f9d8 	bl	8010920 <iprintf>
  }
  else {
     while(1);
  }
  PN532_SamConfiguration(&pn532);
 8001570:	4833      	ldr	r0, [pc, #204]	; (8001640 <main+0x150>)
 8001572:	f7ff fb1f 	bl	8000bb4 <PN532_SamConfiguration>
  printf("Waiting for RFID/NFC card...\r\n");
 8001576:	4834      	ldr	r0, [pc, #208]	; (8001648 <main+0x158>)
 8001578:	f00f fa40 	bl	80109fc <puts>
 800157c:	e000      	b.n	8001580 <main+0x90>
     while(1);
 800157e:	e7fe      	b.n	800157e <main+0x8e>
  while (1)
  {
    /* USER CODE END WHILE */
	uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8001580:	4639      	mov	r1, r7
 8001582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001586:	2200      	movs	r2, #0
 8001588:	482d      	ldr	r0, [pc, #180]	; (8001640 <main+0x150>)
 800158a:	f7ff fb35 	bl	8000bf8 <PN532_ReadPassiveTarget>
 800158e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	if (uid_len == PN532_STATUS_ERROR) {
 8001592:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159a:	d103      	bne.n	80015a4 <main+0xb4>
	  	printf("Don't found card \n");
 800159c:	482b      	ldr	r0, [pc, #172]	; (800164c <main+0x15c>)
 800159e:	f00f fa2d 	bl	80109fc <puts>
 80015a2:	e022      	b.n	80015ea <main+0xfa>
	} else {
		indx = 1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	    printf("Found card with UID: ");
 80015aa:	4829      	ldr	r0, [pc, #164]	; (8001650 <main+0x160>)
 80015ac:	f00f f9b8 	bl	8010920 <iprintf>
	    for (uint8_t i = 0; i < uid_len; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80015b6:	e00f      	b.n	80015d8 <main+0xe8>
	  	    printf("%02x ", uid[i]);
 80015b8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80015bc:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80015c0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80015c4:	5cd3      	ldrb	r3, [r2, r3]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4822      	ldr	r0, [pc, #136]	; (8001654 <main+0x164>)
 80015ca:	f00f f9a9 	bl	8010920 <iprintf>
	    for (uint8_t i = 0; i < uid_len; i++) {
 80015ce:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80015d2:	3301      	adds	r3, #1
 80015d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80015d8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80015dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dce9      	bgt.n	80015b8 <main+0xc8>
	    }
	  	printf("\r\n");
 80015e4:	481c      	ldr	r0, [pc, #112]	; (8001658 <main+0x168>)
 80015e6:	f00f fa09 	bl	80109fc <puts>
	  	   //break;
	}
	if(indx == 1){
 80015ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d1c6      	bne.n	8001580 <main+0x90>
		printf("read data ... \n");
 80015f2:	481a      	ldr	r0, [pc, #104]	; (800165c <main+0x16c>)
 80015f4:	f00f fa02 	bl	80109fc <puts>
		// Tentative de lecture de la carte
		if (read_identity_card(&pn532, CIN_num, birth_date, expiry_date) == 1) {
 80015f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015fc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001600:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001604:	480e      	ldr	r0, [pc, #56]	; (8001640 <main+0x150>)
 8001606:	f7ff fd93 	bl	8001130 <read_identity_card>
 800160a:	4603      	mov	r3, r0
 800160c:	2b01      	cmp	r3, #1
 800160e:	d103      	bne.n	8001618 <main+0x128>
			printf("lecture reussie !\n");
 8001610:	4813      	ldr	r0, [pc, #76]	; (8001660 <main+0x170>)
 8001612:	f00f f9f3 	bl	80109fc <puts>
 8001616:	e002      	b.n	800161e <main+0x12e>
		} else {
			printf("echec de lecture\n");
 8001618:	4812      	ldr	r0, [pc, #72]	; (8001664 <main+0x174>)
 800161a:	f00f f9ef 	bl	80109fc <puts>
		}

		HAL_Delay(1000);
 800161e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001622:	f00c fcf7 	bl	800e014 <HAL_Delay>
		indx = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 800162c:	e7a8      	b.n	8001580 <main+0x90>
 800162e:	bf00      	nop
 8001630:	080117d4 	.word	0x080117d4
 8001634:	080117e0 	.word	0x080117e0
 8001638:	080117e8 	.word	0x080117e8
 800163c:	080117f0 	.word	0x080117f0
 8001640:	200000f8 	.word	0x200000f8
 8001644:	080117f8 	.word	0x080117f8
 8001648:	08011824 	.word	0x08011824
 800164c:	08011844 	.word	0x08011844
 8001650:	08011858 	.word	0x08011858
 8001654:	08011870 	.word	0x08011870
 8001658:	08011878 	.word	0x08011878
 800165c:	0801187c 	.word	0x0801187c
 8001660:	0801188c 	.word	0x0801188c
 8001664:	080118a0 	.word	0x080118a0

08001668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b094      	sub	sp, #80	; 0x50
 800166c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166e:	f107 0320 	add.w	r3, r7, #32
 8001672:	2230      	movs	r2, #48	; 0x30
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f00f faa0 	bl	8010bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	4b28      	ldr	r3, [pc, #160]	; (8001734 <SystemClock_Config+0xcc>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	4a27      	ldr	r2, [pc, #156]	; (8001734 <SystemClock_Config+0xcc>)
 8001696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169a:	6413      	str	r3, [r2, #64]	; 0x40
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <SystemClock_Config+0xcc>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <SystemClock_Config+0xd0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a21      	ldr	r2, [pc, #132]	; (8001738 <SystemClock_Config+0xd0>)
 80016b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <SystemClock_Config+0xd0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c4:	2302      	movs	r3, #2
 80016c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c8:	2301      	movs	r3, #1
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016cc:	2310      	movs	r3, #16
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d0:	2302      	movs	r3, #2
 80016d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016d8:	2310      	movs	r3, #16
 80016da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80016e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016e2:	2304      	movs	r3, #4
 80016e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016e6:	2304      	movs	r3, #4
 80016e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ea:	f107 0320 	add.w	r3, r7, #32
 80016ee:	4618      	mov	r0, r3
 80016f0:	f00d ff32 	bl	800f558 <HAL_RCC_OscConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016fa:	f000 f901 	bl	8001900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fe:	230f      	movs	r3, #15
 8001700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001702:	2302      	movs	r3, #2
 8001704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800170a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2102      	movs	r1, #2
 800171a:	4618      	mov	r0, r3
 800171c:	f00e f994 	bl	800fa48 <HAL_RCC_ClockConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001726:	f000 f8eb 	bl	8001900 <Error_Handler>
  }
}
 800172a:	bf00      	nop
 800172c:	3750      	adds	r7, #80	; 0x50
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40007000 	.word	0x40007000

0800173c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_I2C1_Init+0x50>)
 8001742:	4a13      	ldr	r2, [pc, #76]	; (8001790 <MX_I2C1_Init+0x54>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_I2C1_Init+0x50>)
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <MX_I2C1_Init+0x58>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_I2C1_Init+0x50>)
 800175a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800175e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <MX_I2C1_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_I2C1_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <MX_I2C1_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_I2C1_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_I2C1_Init+0x50>)
 800177a:	f00c fef3 	bl	800e564 <HAL_I2C_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001784:	f000 f8bc 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000110 	.word	0x20000110
 8001790:	40005400 	.word	0x40005400
 8001794:	000186a0 	.word	0x000186a0

08001798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <MX_USART2_UART_Init+0x50>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017d0:	f00e fb5a 	bl	800fe88 <HAL_UART_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017da:	f000 f891 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000164 	.word	0x20000164
 80017e8:	40004400 	.word	0x40004400

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <MX_GPIO_Init+0xd0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a2c      	ldr	r2, [pc, #176]	; (80018bc <MX_GPIO_Init+0xd0>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <MX_GPIO_Init+0xd0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b26      	ldr	r3, [pc, #152]	; (80018bc <MX_GPIO_Init+0xd0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a25      	ldr	r2, [pc, #148]	; (80018bc <MX_GPIO_Init+0xd0>)
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <MX_GPIO_Init+0xd0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <MX_GPIO_Init+0xd0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a1e      	ldr	r2, [pc, #120]	; (80018bc <MX_GPIO_Init+0xd0>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <MX_GPIO_Init+0xd0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_GPIO_Init+0xd0>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <MX_GPIO_Init+0xd0>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <MX_GPIO_Init+0xd0>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_Led_GPIO_Port, G_Led_Pin, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	2120      	movs	r1, #32
 8001876:	4812      	ldr	r0, [pc, #72]	; (80018c0 <MX_GPIO_Init+0xd4>)
 8001878:	f00c fe5a 	bl	800e530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800187c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001882:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	480c      	ldr	r0, [pc, #48]	; (80018c4 <MX_GPIO_Init+0xd8>)
 8001894:	f00c fcc8 	bl	800e228 <HAL_GPIO_Init>

  /*Configure GPIO pin : G_Led_Pin */
  GPIO_InitStruct.Pin = G_Led_Pin;
 8001898:	2320      	movs	r3, #32
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_Led_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_GPIO_Init+0xd4>)
 80018b0:	f00c fcba 	bl	800e228 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b4:	bf00      	nop
 80018b6:	3728      	adds	r7, #40	; 0x28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020800 	.word	0x40020800

080018c8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e009      	b.n	80018ee <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar((*ptr++));
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	60ba      	str	r2, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fddc 	bl	80014a0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	3301      	adds	r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	dbf1      	blt.n	80018da <_write+0x12>
  }
  return len;
 80018f6:	687b      	ldr	r3, [r7, #4]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001904:	b672      	cpsid	i
}
 8001906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001908:	e7fe      	b.n	8001908 <Error_Handler+0x8>

0800190a <PN532_Reset>:

extern I2C_HandleTypeDef hi2c1;


/*************Reset and Log implements*****************/
int PN532_Reset(void) {
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
    HAL_Delay(100);
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_RESET);
    HAL_Delay(500);
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
    HAL_Delay(100);*/
    return PN532_STATUS_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <PN532_Log>:

void PN532_Log(const char* log) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4803      	ldr	r0, [pc, #12]	; (8001934 <PN532_Log+0x18>)
 8001928:	f00e fffa 	bl	8010920 <iprintf>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	080118b4 	.word	0x080118b4

08001938 <i2c_read>:
    PN532_SPI_Init(pn532);
}


/********************I2C************************/
void i2c_read(uint8_t* data, uint16_t count) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af02      	add	r7, sp, #8
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Receive(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	220a      	movs	r2, #10
 8001948:	9200      	str	r2, [sp, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	2148      	movs	r1, #72	; 0x48
 800194e:	4803      	ldr	r0, [pc, #12]	; (800195c <i2c_read+0x24>)
 8001950:	f00d f84a 	bl	800e9e8 <HAL_I2C_Master_Receive>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000110 	.word	0x20000110

08001960 <i2c_write>:

void i2c_write(uint8_t* data, uint16_t count) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af02      	add	r7, sp, #8
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	220a      	movs	r2, #10
 8001970:	9200      	str	r2, [sp, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	2148      	movs	r1, #72	; 0x48
 8001976:	4803      	ldr	r0, [pc, #12]	; (8001984 <i2c_write+0x24>)
 8001978:	f00c ff38 	bl	800e7ec <HAL_I2C_Master_Transmit>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000110 	.word	0x20000110

08001988 <PN532_I2C_ReadData>:

int PN532_I2C_ReadData(uint8_t* data, uint16_t count) {
 8001988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800198c:	b087      	sub	sp, #28
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	807b      	strh	r3, [r7, #2]
 8001996:	466b      	mov	r3, sp
 8001998:	461e      	mov	r6, r3
    uint8_t status[] = {0x00};
 800199a:	2300      	movs	r3, #0
 800199c:	723b      	strb	r3, [r7, #8]
    uint8_t frame[count + 1];
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	1c59      	adds	r1, r3, #1
 80019a2:	1e4b      	subs	r3, r1, #1
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	460a      	mov	r2, r1
 80019a8:	2300      	movs	r3, #0
 80019aa:	4690      	mov	r8, r2
 80019ac:	4699      	mov	r9, r3
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019c2:	460a      	mov	r2, r1
 80019c4:	2300      	movs	r3, #0
 80019c6:	4614      	mov	r4, r2
 80019c8:	461d      	mov	r5, r3
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	00eb      	lsls	r3, r5, #3
 80019d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019d8:	00e2      	lsls	r2, r4, #3
 80019da:	460b      	mov	r3, r1
 80019dc:	3307      	adds	r3, #7
 80019de:	08db      	lsrs	r3, r3, #3
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	ebad 0d03 	sub.w	sp, sp, r3
 80019e6:	466b      	mov	r3, sp
 80019e8:	3300      	adds	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
    i2c_read(status, sizeof(status));
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	2101      	movs	r1, #1
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ffa0 	bl	8001938 <i2c_read>
    if (status[0] != PN532_I2C_READY) {
 80019f8:	7a3b      	ldrb	r3, [r7, #8]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d002      	beq.n	8001a04 <PN532_I2C_ReadData+0x7c>
        return PN532_STATUS_ERROR;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	e01a      	b.n	8001a3a <PN532_I2C_ReadData+0xb2>
    }
    i2c_read(frame, count + 1);
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	3301      	adds	r3, #1
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f7ff ff93 	bl	8001938 <i2c_read>
    for (uint8_t i = 0; i < count; i++) {
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
 8001a16:	e00a      	b.n	8001a2e <PN532_I2C_ReadData+0xa6>
        data[i] = frame[i + 1];
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	440b      	add	r3, r1
 8001a22:	68f9      	ldr	r1, [r7, #12]
 8001a24:	5c8a      	ldrb	r2, [r1, r2]
 8001a26:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	75fb      	strb	r3, [r7, #23]
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d8ef      	bhi.n	8001a18 <PN532_I2C_ReadData+0x90>
    }
    return PN532_STATUS_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	46b5      	mov	sp, r6
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a46 <PN532_I2C_WriteData>:

int PN532_I2C_WriteData(uint8_t *data, uint16_t count) {
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	807b      	strh	r3, [r7, #2]
    i2c_write(data, count);
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	4619      	mov	r1, r3
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff82 	bl	8001960 <i2c_write>
    return PN532_STATUS_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <PN532_I2C_WaitReady>:

bool PN532_I2C_WaitReady(uint32_t timeout) {
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {0x00};
 8001a6e:	2300      	movs	r3, #0
 8001a70:	723b      	strb	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8001a72:	f00c fac3 	bl	800dffc <HAL_GetTick>
 8001a76:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8001a78:	e00d      	b.n	8001a96 <PN532_I2C_WaitReady+0x30>
        i2c_read(status, sizeof(status));
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff59 	bl	8001938 <i2c_read>
        if (status[0] == PN532_I2C_READY) {
 8001a86:	7a3b      	ldrb	r3, [r7, #8]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <PN532_I2C_WaitReady+0x2a>
            return true;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e00b      	b.n	8001aa8 <PN532_I2C_WaitReady+0x42>
        } else {
            HAL_Delay(5);
 8001a90:	2005      	movs	r0, #5
 8001a92:	f00c fabf 	bl	800e014 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8001a96:	f00c fab1 	bl	800dffc <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d8e9      	bhi.n	8001a7a <PN532_I2C_WaitReady+0x14>
        }
    }
    return false;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <PN532_I2C_Wakeup>:

int PN532_I2C_Wakeup(void) {
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
    HAL_Delay(100);
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_RESET);
    HAL_Delay(100);
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_SET);
    HAL_Delay(500);*/
    return PN532_STATUS_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <PN532_I2C_Init>:

void PN532_I2C_Init(PN532* pn532) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <PN532_I2C_Init+0x3c>)
 8001acc:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_I2C_ReadData;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <PN532_I2C_Init+0x40>)
 8001ad2:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_I2C_WriteData;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <PN532_I2C_Init+0x44>)
 8001ad8:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_I2C_WaitReady;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <PN532_I2C_Init+0x48>)
 8001ade:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_I2C_Wakeup;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <PN532_I2C_Init+0x4c>)
 8001ae4:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <PN532_I2C_Init+0x50>)
 8001aea:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	4798      	blx	r3
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	0800190b 	.word	0x0800190b
 8001b00:	08001989 	.word	0x08001989
 8001b04:	08001a47 	.word	0x08001a47
 8001b08:	08001a67 	.word	0x08001a67
 8001b0c:	08001ab1 	.word	0x08001ab1
 8001b10:	0800191d 	.word	0x0800191d

08001b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b52:	2007      	movs	r0, #7
 8001b54:	f00c fb34 	bl	800e1c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_I2C_MspInit+0x84>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d12c      	bne.n	8001be0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_I2C_MspInit+0x88>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a17      	ldr	r2, [pc, #92]	; (8001bec <HAL_I2C_MspInit+0x88>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_I2C_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ba2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba8:	2312      	movs	r3, #18
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <HAL_I2C_MspInit+0x8c>)
 8001bc0:	f00c fb32 	bl	800e228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_I2C_MspInit+0x88>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_I2C_MspInit+0x88>)
 8001bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_I2C_MspInit+0x88>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	; 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40005400 	.word	0x40005400
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020400 	.word	0x40020400

08001bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_UART_MspInit+0x84>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d12b      	bne.n	8001c6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_UART_MspInit+0x88>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <HAL_UART_MspInit+0x88>)
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_UART_MspInit+0x88>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_UART_MspInit+0x88>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a10      	ldr	r2, [pc, #64]	; (8001c7c <HAL_UART_MspInit+0x88>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_UART_MspInit+0x88>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c4e:	230c      	movs	r3, #12
 8001c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c5e:	2307      	movs	r3, #7
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <HAL_UART_MspInit+0x8c>)
 8001c6a:	f00c fadd 	bl	800e228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c6e:	bf00      	nop
 8001c70:	3728      	adds	r7, #40	; 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40004400 	.word	0x40004400
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020000 	.word	0x40020000

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <MemManage_Handler+0x4>

08001c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd0:	f00c f980 	bl	800dfd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return 1;
 8001cdc:	2301      	movs	r3, #1
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_kill>:

int _kill(int pid, int sig)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cf2:	f00e ffc1 	bl	8010c78 <__errno>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2216      	movs	r2, #22
 8001cfa:	601a      	str	r2, [r3, #0]
  return -1;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_exit>:

void _exit (int status)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ffe7 	bl	8001ce8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d1a:	e7fe      	b.n	8001d1a <_exit+0x12>

08001d1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e00a      	b.n	8001d44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d2e:	f3af 8000 	nop.w
 8001d32:	4601      	mov	r1, r0
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	60ba      	str	r2, [r7, #8]
 8001d3a:	b2ca      	uxtb	r2, r1
 8001d3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dbf0      	blt.n	8001d2e <_read+0x12>
  }

  return len;
 8001d4c:	687b      	ldr	r3, [r7, #4]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_isatty>:

int _isatty(int file)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <_sbrk+0x5c>)
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <_sbrk+0x60>)
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <_sbrk+0x64>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <_sbrk+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d207      	bcs.n	8001e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df0:	f00e ff42 	bl	8010c78 <__errno>
 8001df4:	4603      	mov	r3, r0
 8001df6:	220c      	movs	r2, #12
 8001df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	e009      	b.n	8001e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <_sbrk+0x64>)
 8001e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20020000 	.word	0x20020000
 8001e20:	00000400 	.word	0x00000400
 8001e24:	200001ac 	.word	0x200001ac
 8001e28:	20002530 	.word	0x20002530

08001e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <SystemInit+0x20>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <SystemInit+0x20>)
 8001e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <mbedtls_ctr_increment_counter>:
 *                      This is quite performance-sensitive for AES-CTR and CTR-DRBG.
 *
 * \param n             A 16-byte value to be incremented.
 */
static inline void mbedtls_ctr_increment_counter(uint8_t n[16])
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
    // The 32-bit version seems to perform about the same as a 64-bit version
    // on 64-bit architectures, so no need to define a 64-bit version.
    for (int i = 3;; i--) {
 8001e58:	2303      	movs	r3, #3
 8001e5a:	61fb      	str	r3, [r7, #28]
        uint32_t x = MBEDTLS_GET_UINT32_BE(n, i << 2);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	461a      	mov	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	681b      	ldr	r3, [r3, #0]
    r = *p32;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint32_unaligned_t *p32 = (mbedtls_uint32_unaligned_t *) p;
    r = p32->x;
#else
    memcpy(&r, p, sizeof(r));
 8001e6c:	60bb      	str	r3, [r7, #8]
#endif
    return r;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	ba1b      	rev	r3, r3
 8001e72:	61bb      	str	r3, [r7, #24]
        x += 1;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	3301      	adds	r3, #1
 8001e78:	61bb      	str	r3, [r7, #24]
        MBEDTLS_PUT_UINT32_BE(x, n, i << 2);
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	441a      	add	r2, r3
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	ba1b      	rev	r3, r3
 8001e88:	613a      	str	r2, [r7, #16]
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
    *p32 = x;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint32_unaligned_t *p32 = (mbedtls_uint32_unaligned_t *) p;
    p32->x = x;
#else
    memcpy(p, &x, sizeof(x));
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	601a      	str	r2, [r3, #0]
#endif
}
 8001e92:	bf00      	nop
        if (x != 0 || i == 0) {
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <mbedtls_ctr_increment_counter+0x58>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <mbedtls_ctr_increment_counter+0x58>
    for (int i = 3;; i--) {
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	e7d9      	b.n	8001e5c <mbedtls_ctr_increment_counter+0xc>
            break;
        }
    }
}
 8001ea8:	bf00      	nop
 8001eaa:	3724      	adds	r7, #36	; 0x24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <aes_gen_tables>:
#define MUL(x, y) (((x) && (y)) ? pow[(log[(x)]+log[(y)]) % 255] : 0)

MBEDTLS_MAYBE_UNUSED static int aes_init_done = 0;

MBEDTLS_MAYBE_UNUSED static void aes_gen_tables(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8001eba:	af00      	add	r7, sp, #0
    uint8_t log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for (i = 0, x = 1; i < 256; i++) {
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8001ec8:	e02b      	b.n	8001f22 <aes_gen_tables+0x6e>
        pow[i] = x;
 8001eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ece:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001ed2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8001edc:	701a      	strb	r2, [r3, #0]
        log[x] = (uint8_t) i;
 8001ede:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8001ee2:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8001ee6:	b2d1      	uxtb	r1, r2
 8001ee8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eec:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8001ef0:	54d1      	strb	r1, [r2, r3]
        x ^= XTIME(x);
 8001ef2:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	b25b      	sxtb	r3, r3
 8001efa:	f997 2203 	ldrsb.w	r2, [r7, #515]	; 0x203
 8001efe:	2a00      	cmp	r2, #0
 8001f00:	da01      	bge.n	8001f06 <aes_gen_tables+0x52>
 8001f02:	221b      	movs	r2, #27
 8001f04:	e000      	b.n	8001f08 <aes_gen_tables+0x54>
 8001f06:	2200      	movs	r2, #0
 8001f08:	4053      	eors	r3, r2
 8001f0a:	b25a      	sxtb	r2, r3
 8001f0c:	f997 3203 	ldrsb.w	r3, [r7, #515]	; 0x203
 8001f10:	4053      	eors	r3, r2
 8001f12:	b25b      	sxtb	r3, r3
 8001f14:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
    for (i = 0, x = 1; i < 256; i++) {
 8001f18:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001f22:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001f26:	2bff      	cmp	r3, #255	; 0xff
 8001f28:	ddcf      	ble.n	8001eca <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for (i = 0, x = 1; i < 10; i++) {
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001f30:	2301      	movs	r3, #1
 8001f32:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8001f36:	e01a      	b.n	8001f6e <aes_gen_tables+0xba>
        round_constants[i] = x;
 8001f38:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8001f3c:	49cd      	ldr	r1, [pc, #820]	; (8002274 <aes_gen_tables+0x3c0>)
 8001f3e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = XTIME(x);
 8001f46:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	b25b      	sxtb	r3, r3
 8001f4e:	f997 2203 	ldrsb.w	r2, [r7, #515]	; 0x203
 8001f52:	2a00      	cmp	r2, #0
 8001f54:	da01      	bge.n	8001f5a <aes_gen_tables+0xa6>
 8001f56:	221b      	movs	r2, #27
 8001f58:	e000      	b.n	8001f5c <aes_gen_tables+0xa8>
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	4053      	eors	r3, r2
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
    for (i = 0, x = 1; i < 10; i++) {
 8001f64:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001f6e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	dde0      	ble.n	8001f38 <aes_gen_tables+0x84>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8001f76:	4bc0      	ldr	r3, [pc, #768]	; (8002278 <aes_gen_tables+0x3c4>)
 8001f78:	2263      	movs	r2, #99	; 0x63
 8001f7a:	701a      	strb	r2, [r3, #0]
#if defined(MBEDTLS_AES_NEED_REVERSE_TABLES)
    RSb[0x63] = 0x00;
 8001f7c:	4bbf      	ldr	r3, [pc, #764]	; (800227c <aes_gen_tables+0x3c8>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
#endif

    for (i = 1; i < 256; i++) {
 8001f84:	2301      	movs	r3, #1
 8001f86:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001f8a:	e07a      	b.n	8002082 <aes_gen_tables+0x1ce>
        x = pow[255 - log[i]];
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8001f94:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001f98:	4413      	add	r3, r2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001fa0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fa4:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8001fa8:	5cd3      	ldrb	r3, [r2, r3]
 8001faa:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203

        y  = x; y = (y << 1) | (y >> 7);
 8001fae:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8001fb2:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
 8001fb6:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	b25a      	sxtb	r2, r3
 8001fbe:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8001fc2:	09db      	lsrs	r3, r3, #7
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b25b      	sxtb	r3, r3
 8001fcc:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        x ^= y; y = (y << 1) | (y >> 7);
 8001fd0:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8001fd4:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8001fd8:	4053      	eors	r3, r2
 8001fda:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8001fde:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	b25a      	sxtb	r2, r3
 8001fe6:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8001fea:	09db      	lsrs	r3, r3, #7
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	b25b      	sxtb	r3, r3
 8001ff4:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        x ^= y; y = (y << 1) | (y >> 7);
 8001ff8:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8001ffc:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8002000:	4053      	eors	r3, r2
 8002002:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8002006:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	b25a      	sxtb	r2, r3
 800200e:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8002012:	09db      	lsrs	r3, r3, #7
 8002014:	b2db      	uxtb	r3, r3
 8002016:	b25b      	sxtb	r3, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	b25b      	sxtb	r3, r3
 800201c:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        x ^= y; y = (y << 1) | (y >> 7);
 8002020:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8002024:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8002028:	4053      	eors	r3, r2
 800202a:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 800202e:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	b25a      	sxtb	r2, r3
 8002036:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 800203a:	09db      	lsrs	r3, r3, #7
 800203c:	b2db      	uxtb	r3, r3
 800203e:	b25b      	sxtb	r3, r3
 8002040:	4313      	orrs	r3, r2
 8002042:	b25b      	sxtb	r3, r3
 8002044:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        x ^= y ^ 0x63;
 8002048:	f897 2202 	ldrb.w	r2, [r7, #514]	; 0x202
 800204c:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002050:	4053      	eors	r3, r2
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f083 0363 	eor.w	r3, r3, #99	; 0x63
 8002058:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203

        FSb[i] = x;
 800205c:	4a86      	ldr	r2, [pc, #536]	; (8002278 <aes_gen_tables+0x3c4>)
 800205e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002062:	4413      	add	r3, r2
 8002064:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8002068:	701a      	strb	r2, [r3, #0]
#if defined(MBEDTLS_AES_NEED_REVERSE_TABLES)
        RSb[x] = (unsigned char) i;
 800206a:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 800206e:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8002072:	b2d1      	uxtb	r1, r2
 8002074:	4a81      	ldr	r2, [pc, #516]	; (800227c <aes_gen_tables+0x3c8>)
 8002076:	54d1      	strb	r1, [r2, r3]
    for (i = 1; i < 256; i++) {
 8002078:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800207c:	3301      	adds	r3, #1
 800207e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002082:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002086:	2bff      	cmp	r3, #255	; 0xff
 8002088:	dd80      	ble.n	8001f8c <aes_gen_tables+0xd8>
    }

    /*
     * generate the forward and reverse tables
     */
    for (i = 0; i < 256; i++) {
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002090:	e131      	b.n	80022f6 <aes_gen_tables+0x442>
        x = FSb[i];
 8002092:	4a79      	ldr	r2, [pc, #484]	; (8002278 <aes_gen_tables+0x3c4>)
 8002094:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002098:	4413      	add	r3, r2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
        y = XTIME(x);
 80020a0:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	b25b      	sxtb	r3, r3
 80020a8:	f997 2203 	ldrsb.w	r2, [r7, #515]	; 0x203
 80020ac:	2a00      	cmp	r2, #0
 80020ae:	da01      	bge.n	80020b4 <aes_gen_tables+0x200>
 80020b0:	221b      	movs	r2, #27
 80020b2:	e000      	b.n	80020b6 <aes_gen_tables+0x202>
 80020b4:	2200      	movs	r2, #0
 80020b6:	4053      	eors	r3, r2
 80020b8:	b25b      	sxtb	r3, r3
 80020ba:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
        z = y ^ x;
 80020be:	f897 2202 	ldrb.w	r2, [r7, #514]	; 0x202
 80020c2:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80020c6:	4053      	eors	r3, r2
 80020c8:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201

        FT0[i] = ((uint32_t) y) ^
 80020cc:	f897 2202 	ldrb.w	r2, [r7, #514]	; 0x202
                 ((uint32_t) x <<  8) ^
 80020d0:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80020d4:	021b      	lsls	r3, r3, #8
        FT0[i] = ((uint32_t) y) ^
 80020d6:	405a      	eors	r2, r3
                 ((uint32_t) x << 16) ^
 80020d8:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80020dc:	041b      	lsls	r3, r3, #16
                 ((uint32_t) x <<  8) ^
 80020de:	405a      	eors	r2, r3
                 ((uint32_t) z << 24);
 80020e0:	f897 3201 	ldrb.w	r3, [r7, #513]	; 0x201
 80020e4:	061b      	lsls	r3, r3, #24
                 ((uint32_t) x << 16) ^
 80020e6:	405a      	eors	r2, r3
        FT0[i] = ((uint32_t) y) ^
 80020e8:	4965      	ldr	r1, [pc, #404]	; (8002280 <aes_gen_tables+0x3cc>)
 80020ea:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8(FT0[i]);
 80020f2:	4a63      	ldr	r2, [pc, #396]	; (8002280 <aes_gen_tables+0x3cc>)
 80020f4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	ea4f 6233 	mov.w	r2, r3, ror #24
 8002100:	4960      	ldr	r1, [pc, #384]	; (8002284 <aes_gen_tables+0x3d0>)
 8002102:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8(FT1[i]);
 800210a:	4a5e      	ldr	r2, [pc, #376]	; (8002284 <aes_gen_tables+0x3d0>)
 800210c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002114:	ea4f 6233 	mov.w	r2, r3, ror #24
 8002118:	495b      	ldr	r1, [pc, #364]	; (8002288 <aes_gen_tables+0x3d4>)
 800211a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8(FT2[i]);
 8002122:	4a59      	ldr	r2, [pc, #356]	; (8002288 <aes_gen_tables+0x3d4>)
 8002124:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	ea4f 6233 	mov.w	r2, r3, ror #24
 8002130:	4956      	ldr	r1, [pc, #344]	; (800228c <aes_gen_tables+0x3d8>)
 8002132:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

#if defined(MBEDTLS_AES_NEED_REVERSE_TABLES)
        x = RSb[i];
 800213a:	4a50      	ldr	r2, [pc, #320]	; (800227c <aes_gen_tables+0x3c8>)
 800213c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002140:	4413      	add	r3, r2
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203

        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^
 8002148:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01f      	beq.n	8002190 <aes_gen_tables+0x2dc>
 8002150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002154:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002158:	7b9b      	ldrb	r3, [r3, #14]
 800215a:	4619      	mov	r1, r3
 800215c:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002160:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002164:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8002168:	5cd3      	ldrb	r3, [r2, r3]
 800216a:	18ca      	adds	r2, r1, r3
 800216c:	4b48      	ldr	r3, [pc, #288]	; (8002290 <aes_gen_tables+0x3dc>)
 800216e:	fb83 1302 	smull	r1, r3, r3, r2
 8002172:	4413      	add	r3, r2
 8002174:	11d9      	asrs	r1, r3, #7
 8002176:	17d3      	asrs	r3, r2, #31
 8002178:	1ac9      	subs	r1, r1, r3
 800217a:	460b      	mov	r3, r1
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	1a5b      	subs	r3, r3, r1
 8002180:	1ad1      	subs	r1, r2, r3
 8002182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800218a:	5c5b      	ldrb	r3, [r3, r1]
 800218c:	4618      	mov	r0, r3
 800218e:	e000      	b.n	8002192 <aes_gen_tables+0x2de>
 8002190:	2000      	movs	r0, #0
                 ((uint32_t) MUL(0x09, x) <<  8) ^
 8002192:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01f      	beq.n	80021da <aes_gen_tables+0x326>
 800219a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80021a2:	7a5b      	ldrb	r3, [r3, #9]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80021aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021ae:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	18ca      	adds	r2, r1, r3
 80021b6:	4b36      	ldr	r3, [pc, #216]	; (8002290 <aes_gen_tables+0x3dc>)
 80021b8:	fb83 1302 	smull	r1, r3, r3, r2
 80021bc:	4413      	add	r3, r2
 80021be:	11d9      	asrs	r1, r3, #7
 80021c0:	17d3      	asrs	r3, r2, #31
 80021c2:	1ac9      	subs	r1, r1, r3
 80021c4:	460b      	mov	r3, r1
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	1a5b      	subs	r3, r3, r1
 80021ca:	1ad1      	subs	r1, r2, r3
 80021cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021d4:	5c5b      	ldrb	r3, [r3, r1]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	e000      	b.n	80021dc <aes_gen_tables+0x328>
 80021da:	2300      	movs	r3, #0
        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^
 80021dc:	4058      	eors	r0, r3
                 ((uint32_t) MUL(0x0D, x) << 16) ^
 80021de:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d01f      	beq.n	8002226 <aes_gen_tables+0x372>
 80021e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ea:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80021ee:	7b5b      	ldrb	r3, [r3, #13]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80021f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021fa:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80021fe:	5cd3      	ldrb	r3, [r2, r3]
 8002200:	18ca      	adds	r2, r1, r3
 8002202:	4b23      	ldr	r3, [pc, #140]	; (8002290 <aes_gen_tables+0x3dc>)
 8002204:	fb83 1302 	smull	r1, r3, r3, r2
 8002208:	4413      	add	r3, r2
 800220a:	11d9      	asrs	r1, r3, #7
 800220c:	17d3      	asrs	r3, r2, #31
 800220e:	1ac9      	subs	r1, r1, r3
 8002210:	460b      	mov	r3, r1
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	1a5b      	subs	r3, r3, r1
 8002216:	1ad1      	subs	r1, r2, r3
 8002218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002220:	5c5b      	ldrb	r3, [r3, r1]
 8002222:	041b      	lsls	r3, r3, #16
 8002224:	e000      	b.n	8002228 <aes_gen_tables+0x374>
 8002226:	2300      	movs	r3, #0
                 ((uint32_t) MUL(0x09, x) <<  8) ^
 8002228:	4058      	eors	r0, r3
                 ((uint32_t) MUL(0x0B, x) << 24);
 800222a:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 800222e:	2b00      	cmp	r3, #0
 8002230:	d030      	beq.n	8002294 <aes_gen_tables+0x3e0>
 8002232:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002236:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800223a:	7adb      	ldrb	r3, [r3, #11]
 800223c:	4619      	mov	r1, r3
 800223e:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8002242:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002246:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	18ca      	adds	r2, r1, r3
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <aes_gen_tables+0x3dc>)
 8002250:	fb83 1302 	smull	r1, r3, r3, r2
 8002254:	4413      	add	r3, r2
 8002256:	11d9      	asrs	r1, r3, #7
 8002258:	17d3      	asrs	r3, r2, #31
 800225a:	1ac9      	subs	r1, r1, r3
 800225c:	460b      	mov	r3, r1
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	1a5b      	subs	r3, r3, r1
 8002262:	1ad1      	subs	r1, r2, r3
 8002264:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800226c:	5c5b      	ldrb	r3, [r3, r1]
 800226e:	061b      	lsls	r3, r3, #24
 8002270:	e011      	b.n	8002296 <aes_gen_tables+0x3e2>
 8002272:	bf00      	nop
 8002274:	200023b0 	.word	0x200023b0
 8002278:	200001b0 	.word	0x200001b0
 800227c:	200012b0 	.word	0x200012b0
 8002280:	200002b0 	.word	0x200002b0
 8002284:	200006b0 	.word	0x200006b0
 8002288:	20000ab0 	.word	0x20000ab0
 800228c:	20000eb0 	.word	0x20000eb0
 8002290:	80808081 	.word	0x80808081
 8002294:	2300      	movs	r3, #0
                 ((uint32_t) MUL(0x0D, x) << 16) ^
 8002296:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^
 800229a:	491d      	ldr	r1, [pc, #116]	; (8002310 <aes_gen_tables+0x45c>)
 800229c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80022a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8(RT0[i]);
 80022a4:	4a1a      	ldr	r2, [pc, #104]	; (8002310 <aes_gen_tables+0x45c>)
 80022a6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	ea4f 6233 	mov.w	r2, r3, ror #24
 80022b2:	4918      	ldr	r1, [pc, #96]	; (8002314 <aes_gen_tables+0x460>)
 80022b4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80022b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8(RT1[i]);
 80022bc:	4a15      	ldr	r2, [pc, #84]	; (8002314 <aes_gen_tables+0x460>)
 80022be:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80022c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c6:	ea4f 6233 	mov.w	r2, r3, ror #24
 80022ca:	4913      	ldr	r1, [pc, #76]	; (8002318 <aes_gen_tables+0x464>)
 80022cc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80022d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8(RT2[i]);
 80022d4:	4a10      	ldr	r2, [pc, #64]	; (8002318 <aes_gen_tables+0x464>)
 80022d6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80022da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022de:	ea4f 6233 	mov.w	r2, r3, ror #24
 80022e2:	490e      	ldr	r1, [pc, #56]	; (800231c <aes_gen_tables+0x468>)
 80022e4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80022e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (i = 0; i < 256; i++) {
 80022ec:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80022f0:	3301      	adds	r3, #1
 80022f2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80022f6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80022fa:	2bff      	cmp	r3, #255	; 0xff
 80022fc:	f77f aec9 	ble.w	8002092 <aes_gen_tables+0x1de>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
#endif /* MBEDTLS_AES_NEED_REVERSE_TABLES */
    }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	200013b0 	.word	0x200013b0
 8002314:	200017b0 	.word	0x200017b0
 8002318:	20001bb0 	.word	0x20001bb0
 800231c:	20001fb0 	.word	0x20001fb0

08002320 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init(mbedtls_aes_context *ctx)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_aes_context));
 8002328:	f44f 728c 	mov.w	r2, #280	; 0x118
 800232c:	2100      	movs	r1, #0
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f00e fc44 	bl	8010bbc <memset>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <mbedtls_aes_free>:

void mbedtls_aes_free(mbedtls_aes_context *ctx)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <mbedtls_aes_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_aes_context));
 800234a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f009 f9b2 	bl	800b6b8 <mbedtls_platform_zeroize>
 8002354:	e000      	b.n	8002358 <mbedtls_aes_free+0x1c>
        return;
 8002356:	bf00      	nop
}
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <mbedtls_aes_xts_init>:

#if defined(MBEDTLS_CIPHER_MODE_XTS)
void mbedtls_aes_xts_init(mbedtls_aes_xts_context *ctx)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
    mbedtls_aes_init(&ctx->crypt);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ffd9 	bl	8002320 <mbedtls_aes_init>
    mbedtls_aes_init(&ctx->tweak);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ffd3 	bl	8002320 <mbedtls_aes_init>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <mbedtls_aes_xts_free>:

void mbedtls_aes_xts_free(mbedtls_aes_xts_context *ctx)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <mbedtls_aes_xts_free+0x24>
        return;
    }

    mbedtls_aes_free(&ctx->crypt);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ffd2 	bl	800233c <mbedtls_aes_free>
    mbedtls_aes_free(&ctx->tweak);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ffcc 	bl	800233c <mbedtls_aes_free>
 80023a4:	e000      	b.n	80023a8 <mbedtls_aes_xts_free+0x26>
        return;
 80023a6:	bf00      	nop
}
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <mbedtls_aes_rk_offset>:
    (defined(MBEDTLS_AESNI_C) && MBEDTLS_AESNI_HAVE_CODE == 2)
#define MAY_NEED_TO_ALIGN
#endif

MBEDTLS_MAYBE_UNUSED static unsigned mbedtls_aes_rk_offset(uint32_t *buf)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
    }
#else /* MAY_NEED_TO_ALIGN */
    (void) buf;
#endif /* MAY_NEED_TO_ALIGN */

    return 0;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc(mbedtls_aes_context *ctx, const unsigned char *key,
                           unsigned int keybits)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08c      	sub	sp, #48	; 0x30
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    switch (keybits) {
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d6:	d012      	beq.n	80023fe <mbedtls_aes_setkey_enc+0x3a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023de:	d812      	bhi.n	8002406 <mbedtls_aes_setkey_enc+0x42>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b80      	cmp	r3, #128	; 0x80
 80023e4:	d003      	beq.n	80023ee <mbedtls_aes_setkey_enc+0x2a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2bc0      	cmp	r3, #192	; 0xc0
 80023ea:	d004      	beq.n	80023f6 <mbedtls_aes_setkey_enc+0x32>
 80023ec:	e00b      	b.n	8002406 <mbedtls_aes_setkey_enc+0x42>
        case 128: ctx->nr = 10; break;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	220a      	movs	r2, #10
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e00a      	b.n	800240c <mbedtls_aes_setkey_enc+0x48>
#if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
        case 192: ctx->nr = 12; break;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	220c      	movs	r2, #12
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e006      	b.n	800240c <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	220e      	movs	r2, #14
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e002      	b.n	800240c <mbedtls_aes_setkey_enc+0x48>
#endif /* !MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH */
        default: return MBEDTLS_ERR_AES_INVALID_KEY_LENGTH;
 8002406:	f06f 031f 	mvn.w	r3, #31
 800240a:	e1b9      	b.n	8002780 <mbedtls_aes_setkey_enc+0x3bc>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if (aes_init_done == 0) {
 800240c:	4b86      	ldr	r3, [pc, #536]	; (8002628 <mbedtls_aes_setkey_enc+0x264>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d104      	bne.n	800241e <mbedtls_aes_setkey_enc+0x5a>
        aes_gen_tables();
 8002414:	f7ff fd4e 	bl	8001eb4 <aes_gen_tables>
        aes_init_done = 1;
 8002418:	4b83      	ldr	r3, [pc, #524]	; (8002628 <mbedtls_aes_setkey_enc+0x264>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]
    }
#endif

    ctx->rk_offset = mbedtls_aes_rk_offset(ctx->buf);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3308      	adds	r3, #8
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ffc3 	bl	80023ae <mbedtls_aes_rk_offset>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	605a      	str	r2, [r3, #4]
    RK = ctx->buf + ctx->rk_offset;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f103 0208 	add.w	r2, r3, #8
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
        return mbedtls_aesce_setkey_enc((unsigned char *) RK, key, keybits);
    }
#endif

#if !defined(MBEDTLS_AES_USE_HARDWARE_ONLY)
    for (unsigned int i = 0; i < (keybits >> 5); i++) {
 800243e:	2300      	movs	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
 8002442:	e010      	b.n	8002466 <mbedtls_aes_setkey_enc+0xa2>
        RK[i] = MBEDTLS_GET_UINT32_LE(key, i << 2);
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	441a      	add	r2, r3
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002452:	440b      	add	r3, r1
 8002454:	61ba      	str	r2, [r7, #24]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	6812      	ldr	r2, [r2, #0]
    memcpy(&r, p, sizeof(r));
 800245a:	617a      	str	r2, [r7, #20]
    return r;
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	601a      	str	r2, [r3, #0]
    for (unsigned int i = 0; i < (keybits >> 5); i++) {
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	3301      	adds	r3, #1
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800246c:	429a      	cmp	r2, r3
 800246e:	d3e9      	bcc.n	8002444 <mbedtls_aes_setkey_enc+0x80>
    }

    switch (ctx->nr) {
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b0e      	cmp	r3, #14
 8002476:	f000 80d4 	beq.w	8002622 <mbedtls_aes_setkey_enc+0x25e>
 800247a:	2b0e      	cmp	r3, #14
 800247c:	f300 817f 	bgt.w	800277e <mbedtls_aes_setkey_enc+0x3ba>
 8002480:	2b0a      	cmp	r3, #10
 8002482:	d002      	beq.n	800248a <mbedtls_aes_setkey_enc+0xc6>
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d05c      	beq.n	8002542 <mbedtls_aes_setkey_enc+0x17e>
 8002488:	e179      	b.n	800277e <mbedtls_aes_setkey_enc+0x3ba>
        case 10:

            for (unsigned int i = 0; i < 10; i++, RK += 4) {
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
 800248e:	e054      	b.n	800253a <mbedtls_aes_setkey_enc+0x176>
                RK[4]  = RK[0] ^ round_constants[i] ^
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4965      	ldr	r1, [pc, #404]	; (800262c <mbedtls_aes_setkey_enc+0x268>)
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800249c:	4053      	eors	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[3])]) ^
 800249e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a0:	320c      	adds	r2, #12
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	0a12      	lsrs	r2, r2, #8
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	4611      	mov	r1, r2
 80024aa:	4a61      	ldr	r2, [pc, #388]	; (8002630 <mbedtls_aes_setkey_enc+0x26c>)
 80024ac:	5c52      	ldrb	r2, [r2, r1]
                RK[4]  = RK[0] ^ round_constants[i] ^
 80024ae:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[3])] <<  8) ^
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	330c      	adds	r3, #12
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	4619      	mov	r1, r3
 80024bc:	4b5c      	ldr	r3, [pc, #368]	; (8002630 <mbedtls_aes_setkey_enc+0x26c>)
 80024be:	5c5b      	ldrb	r3, [r3, r1]
 80024c0:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[3])]) ^
 80024c2:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	330c      	adds	r3, #12
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	0e1b      	lsrs	r3, r3, #24
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	4619      	mov	r1, r3
 80024d0:	4b57      	ldr	r3, [pc, #348]	; (8002630 <mbedtls_aes_setkey_enc+0x26c>)
 80024d2:	5c5b      	ldrb	r3, [r3, r1]
 80024d4:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[3])] <<  8) ^
 80024d6:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[3])] << 24);
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	330c      	adds	r3, #12
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b52      	ldr	r3, [pc, #328]	; (8002630 <mbedtls_aes_setkey_enc+0x26c>)
 80024e6:	5c9b      	ldrb	r3, [r3, r2]
 80024e8:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ round_constants[i] ^
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	3310      	adds	r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 80024ee:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ round_constants[i] ^
 80024f0:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f4:	3304      	adds	r3, #4
 80024f6:	6819      	ldr	r1, [r3, #0]
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	3310      	adds	r3, #16
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002500:	3314      	adds	r3, #20
 8002502:	404a      	eors	r2, r1
 8002504:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	3308      	adds	r3, #8
 800250a:	6819      	ldr	r1, [r3, #0]
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	3314      	adds	r3, #20
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	3318      	adds	r3, #24
 8002516:	404a      	eors	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	330c      	adds	r3, #12
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002522:	3318      	adds	r3, #24
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002528:	331c      	adds	r3, #28
 800252a:	404a      	eors	r2, r1
 800252c:	601a      	str	r2, [r3, #0]
            for (unsigned int i = 0; i < 10; i++, RK += 4) {
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	3301      	adds	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	3310      	adds	r3, #16
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	2b09      	cmp	r3, #9
 800253e:	d9a7      	bls.n	8002490 <mbedtls_aes_setkey_enc+0xcc>
            }
            break;
 8002540:	e11d      	b.n	800277e <mbedtls_aes_setkey_enc+0x3ba>

#if !defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)
        case 12:

            for (unsigned int i = 0; i < 8; i++, RK += 6) {
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]
 8002546:	e068      	b.n	800261a <mbedtls_aes_setkey_enc+0x256>
                RK[6]  = RK[0] ^ round_constants[i] ^
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4937      	ldr	r1, [pc, #220]	; (800262c <mbedtls_aes_setkey_enc+0x268>)
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002554:	4053      	eors	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[5])]) ^
 8002556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002558:	3214      	adds	r2, #20
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	0a12      	lsrs	r2, r2, #8
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	4611      	mov	r1, r2
 8002562:	4a33      	ldr	r2, [pc, #204]	; (8002630 <mbedtls_aes_setkey_enc+0x26c>)
 8002564:	5c52      	ldrb	r2, [r2, r1]
                RK[6]  = RK[0] ^ round_constants[i] ^
 8002566:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[5])] <<  8) ^
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	3314      	adds	r3, #20
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0c1b      	lsrs	r3, r3, #16
 8002570:	b2db      	uxtb	r3, r3
 8002572:	4619      	mov	r1, r3
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <mbedtls_aes_setkey_enc+0x26c>)
 8002576:	5c5b      	ldrb	r3, [r3, r1]
 8002578:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[5])]) ^
 800257a:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 800257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257e:	3314      	adds	r3, #20
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	0e1b      	lsrs	r3, r3, #24
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4619      	mov	r1, r3
 8002588:	4b29      	ldr	r3, [pc, #164]	; (8002630 <mbedtls_aes_setkey_enc+0x26c>)
 800258a:	5c5b      	ldrb	r3, [r3, r1]
 800258c:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[5])] <<  8) ^
 800258e:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[5])] << 24);
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	3314      	adds	r3, #20
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <mbedtls_aes_setkey_enc+0x26c>)
 800259e:	5c9b      	ldrb	r3, [r3, r2]
 80025a0:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ round_constants[i] ^
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	3318      	adds	r3, #24
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 80025a6:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ round_constants[i] ^
 80025a8:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	3304      	adds	r3, #4
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b2:	3318      	adds	r3, #24
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	331c      	adds	r3, #28
 80025ba:	404a      	eors	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	3308      	adds	r3, #8
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c6:	331c      	adds	r3, #28
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	3320      	adds	r3, #32
 80025ce:	404a      	eors	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	330c      	adds	r3, #12
 80025d6:	6819      	ldr	r1, [r3, #0]
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	3320      	adds	r3, #32
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	3324      	adds	r3, #36	; 0x24
 80025e2:	404a      	eors	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	3310      	adds	r3, #16
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	3324      	adds	r3, #36	; 0x24
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	3328      	adds	r3, #40	; 0x28
 80025f6:	404a      	eors	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	3314      	adds	r3, #20
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002602:	3328      	adds	r3, #40	; 0x28
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	332c      	adds	r3, #44	; 0x2c
 800260a:	404a      	eors	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
            for (unsigned int i = 0; i < 8; i++, RK += 6) {
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	3301      	adds	r3, #1
 8002612:	623b      	str	r3, [r7, #32]
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	3318      	adds	r3, #24
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	2b07      	cmp	r3, #7
 800261e:	d993      	bls.n	8002548 <mbedtls_aes_setkey_enc+0x184>
            }
            break;
 8002620:	e0ad      	b.n	800277e <mbedtls_aes_setkey_enc+0x3ba>

        case 14:

            for (unsigned int i = 0; i < 7; i++, RK += 8) {
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	e0a5      	b.n	8002774 <mbedtls_aes_setkey_enc+0x3b0>
 8002628:	200023d8 	.word	0x200023d8
 800262c:	200023b0 	.word	0x200023b0
 8002630:	200001b0 	.word	0x200001b0
                RK[8]  = RK[0] ^ round_constants[i] ^
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4953      	ldr	r1, [pc, #332]	; (8002788 <mbedtls_aes_setkey_enc+0x3c4>)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002640:	4053      	eors	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[7])]) ^
 8002642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002644:	321c      	adds	r2, #28
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	0a12      	lsrs	r2, r2, #8
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	4611      	mov	r1, r2
 800264e:	4a4f      	ldr	r2, [pc, #316]	; (800278c <mbedtls_aes_setkey_enc+0x3c8>)
 8002650:	5c52      	ldrb	r2, [r2, r1]
                RK[8]  = RK[0] ^ round_constants[i] ^
 8002652:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[7])] <<  8) ^
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002656:	331c      	adds	r3, #28
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0c1b      	lsrs	r3, r3, #16
 800265c:	b2db      	uxtb	r3, r3
 800265e:	4619      	mov	r1, r3
 8002660:	4b4a      	ldr	r3, [pc, #296]	; (800278c <mbedtls_aes_setkey_enc+0x3c8>)
 8002662:	5c5b      	ldrb	r3, [r3, r1]
 8002664:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[7])]) ^
 8002666:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	331c      	adds	r3, #28
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0e1b      	lsrs	r3, r3, #24
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4619      	mov	r1, r3
 8002674:	4b45      	ldr	r3, [pc, #276]	; (800278c <mbedtls_aes_setkey_enc+0x3c8>)
 8002676:	5c5b      	ldrb	r3, [r3, r1]
 8002678:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[7])] <<  8) ^
 800267a:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[7])] << 24);
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	331c      	adds	r3, #28
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	4b40      	ldr	r3, [pc, #256]	; (800278c <mbedtls_aes_setkey_enc+0x3c8>)
 800268a:	5c9b      	ldrb	r3, [r3, r2]
 800268c:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ round_constants[i] ^
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	3320      	adds	r3, #32
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 8002692:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ round_constants[i] ^
 8002694:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	3304      	adds	r3, #4
 800269a:	6819      	ldr	r1, [r3, #0]
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	3320      	adds	r3, #32
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	3324      	adds	r3, #36	; 0x24
 80026a6:	404a      	eors	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	3308      	adds	r3, #8
 80026ae:	6819      	ldr	r1, [r3, #0]
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	3324      	adds	r3, #36	; 0x24
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	3328      	adds	r3, #40	; 0x28
 80026ba:	404a      	eors	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	330c      	adds	r3, #12
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	3328      	adds	r3, #40	; 0x28
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	332c      	adds	r3, #44	; 0x2c
 80026ce:	404a      	eors	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	3310      	adds	r3, #16
 80026d6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[11])]) ^
 80026d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026da:	322c      	adds	r2, #44	; 0x2c
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	4611      	mov	r1, r2
 80026e2:	4a2a      	ldr	r2, [pc, #168]	; (800278c <mbedtls_aes_setkey_enc+0x3c8>)
 80026e4:	5c52      	ldrb	r2, [r2, r1]
                RK[12] = RK[4] ^
 80026e6:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[11])] <<  8) ^
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	332c      	adds	r3, #44	; 0x2c
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	4619      	mov	r1, r3
 80026f4:	4b25      	ldr	r3, [pc, #148]	; (800278c <mbedtls_aes_setkey_enc+0x3c8>)
 80026f6:	5c5b      	ldrb	r3, [r3, r1]
 80026f8:	021b      	lsls	r3, r3, #8
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[11])]) ^
 80026fa:	405a      	eors	r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	332c      	adds	r3, #44	; 0x2c
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	0c1b      	lsrs	r3, r3, #16
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4619      	mov	r1, r3
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <mbedtls_aes_setkey_enc+0x3c8>)
 800270a:	5c5b      	ldrb	r3, [r3, r1]
 800270c:	041b      	lsls	r3, r3, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[11])] <<  8) ^
 800270e:	ea82 0103 	eor.w	r1, r2, r3
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[11])] << 24);
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	332c      	adds	r3, #44	; 0x2c
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0e1b      	lsrs	r3, r3, #24
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <mbedtls_aes_setkey_enc+0x3c8>)
 8002720:	5c9b      	ldrb	r3, [r3, r2]
 8002722:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	3330      	adds	r3, #48	; 0x30
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^
 8002728:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 800272a:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 800272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272e:	3314      	adds	r3, #20
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	3330      	adds	r3, #48	; 0x30
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	3334      	adds	r3, #52	; 0x34
 800273c:	404a      	eors	r2, r1
 800273e:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	3318      	adds	r3, #24
 8002744:	6819      	ldr	r1, [r3, #0]
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	3334      	adds	r3, #52	; 0x34
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	3338      	adds	r3, #56	; 0x38
 8002750:	404a      	eors	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8002754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002756:	331c      	adds	r3, #28
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	3338      	adds	r3, #56	; 0x38
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002762:	333c      	adds	r3, #60	; 0x3c
 8002764:	404a      	eors	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
            for (unsigned int i = 0; i < 7; i++, RK += 8) {
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	3301      	adds	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002770:	3320      	adds	r3, #32
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b06      	cmp	r3, #6
 8002778:	f67f af5c 	bls.w	8002634 <mbedtls_aes_setkey_enc+0x270>
            }
            break;
 800277c:	bf00      	nop
#endif /* !MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH */
    }

    return 0;
 800277e:	2300      	movs	r3, #0
#endif /* !MBEDTLS_AES_USE_HARDWARE_ONLY */
}
 8002780:	4618      	mov	r0, r3
 8002782:	3730      	adds	r7, #48	; 0x30
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200023b0 	.word	0x200023b0
 800278c:	200001b0 	.word	0x200001b0

08002790 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT) && !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
int mbedtls_aes_setkey_dec(mbedtls_aes_context *ctx, const unsigned char *key,
                           unsigned int keybits)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b0d0      	sub	sp, #320	; 0x140
 8002794:	af00      	add	r7, sp, #0
 8002796:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800279a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800279e:	6018      	str	r0, [r3, #0]
 80027a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80027a4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80027a8:	6019      	str	r1, [r3, #0]
 80027aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80027ae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80027b2:	601a      	str	r2, [r3, #0]
    int ret;
    mbedtls_aes_context cty;
    uint32_t *RK;


    mbedtls_aes_init(&cty);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fdb1 	bl	8002320 <mbedtls_aes_init>

    ctx->rk_offset = mbedtls_aes_rk_offset(ctx->buf);
 80027be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80027c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3308      	adds	r3, #8
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fdef 	bl	80023ae <mbedtls_aes_rk_offset>
 80027d0:	4602      	mov	r2, r0
 80027d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80027d6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
    RK = ctx->buf + ctx->rk_offset;
 80027de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80027e2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f103 0208 	add.w	r2, r3, #8
 80027ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80027f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Also checks keybits */
    if ((ret = mbedtls_aes_setkey_enc(&cty, key, keybits)) != 0) {
 8002800:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002804:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8002808:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800280c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002810:	f107 0014 	add.w	r0, r7, #20
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	6819      	ldr	r1, [r3, #0]
 8002818:	f7ff fdd4 	bl	80023c4 <mbedtls_aes_setkey_enc>
 800281c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 8002820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002824:	2b00      	cmp	r3, #0
 8002826:	f040 80e7 	bne.w	80029f8 <mbedtls_aes_setkey_dec+0x268>
        goto exit;
    }

    ctx->nr = cty.nr;
 800282a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800282e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002838:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	601a      	str	r2, [r3, #0]
        goto exit;
    }
#endif

#if !defined(MBEDTLS_AES_USE_HARDWARE_ONLY)
    SK = cty.buf + cty.rk_offset + cty.nr * 4;
 8002840:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800284e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	f107 0214 	add.w	r2, r7, #20
 800285e:	3208      	adds	r2, #8
 8002860:	4413      	add	r3, r2
 8002862:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    *RK++ = *SK++;
 8002866:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800286a:	1d13      	adds	r3, r2, #4
 800286c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002870:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002874:	1d19      	adds	r1, r3, #4
 8002876:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800287e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002882:	1d13      	adds	r3, r2, #4
 8002884:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002888:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800288c:	1d19      	adds	r1, r3, #4
 800288e:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8002896:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800289a:	1d13      	adds	r3, r2, #4
 800289c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80028a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028a4:	1d19      	adds	r1, r3, #4
 80028a6:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80028ae:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80028b2:	1d13      	adds	r3, r2, #4
 80028b4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80028b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028bc:	1d19      	adds	r1, r3, #4
 80028be:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	601a      	str	r2, [r3, #0]
    SK -= 8;
 80028c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80028ca:	3b20      	subs	r3, #32
 80028cc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    for (int i = ctx->nr - 1; i > 0; i--, SK -= 8) {
 80028d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80028d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3b01      	subs	r3, #1
 80028de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80028e2:	e054      	b.n	800298e <mbedtls_aes_setkey_dec+0x1fe>
        for (int j = 0; j < 4; j++, SK++) {
 80028e4:	2300      	movs	r3, #0
 80028e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80028ea:	e042      	b.n	8002972 <mbedtls_aes_setkey_dec+0x1e2>
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 80028ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <mbedtls_aes_setkey_dec+0x284>)
 80028f8:	5c9b      	ldrb	r3, [r3, r2]
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <mbedtls_aes_setkey_dec+0x288>)
 80028fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1(FSb[MBEDTLS_BYTE_1(*SK)]) ^
 8002902:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4619      	mov	r1, r3
 800290e:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <mbedtls_aes_setkey_dec+0x284>)
 8002910:	5c5b      	ldrb	r3, [r3, r1]
 8002912:	4619      	mov	r1, r3
 8002914:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <mbedtls_aes_setkey_dec+0x28c>)
 8002916:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 800291a:	405a      	eors	r2, r3
                    AES_RT2(FSb[MBEDTLS_BYTE_2(*SK)]) ^
 800291c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0c1b      	lsrs	r3, r3, #16
 8002924:	b2db      	uxtb	r3, r3
 8002926:	4619      	mov	r1, r3
 8002928:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <mbedtls_aes_setkey_dec+0x284>)
 800292a:	5c5b      	ldrb	r3, [r3, r1]
 800292c:	4619      	mov	r1, r3
 800292e:	4b3c      	ldr	r3, [pc, #240]	; (8002a20 <mbedtls_aes_setkey_dec+0x290>)
 8002930:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1(FSb[MBEDTLS_BYTE_1(*SK)]) ^
 8002934:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3(FSb[MBEDTLS_BYTE_3(*SK)]);
 8002938:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	0e1b      	lsrs	r3, r3, #24
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <mbedtls_aes_setkey_dec+0x284>)
 8002946:	5c9b      	ldrb	r3, [r3, r2]
 8002948:	461a      	mov	r2, r3
 800294a:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <mbedtls_aes_setkey_dec+0x294>)
 800294c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 8002950:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002954:	1d18      	adds	r0, r3, #4
 8002956:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
                    AES_RT2(FSb[MBEDTLS_BYTE_2(*SK)]) ^
 800295a:	404a      	eors	r2, r1
            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^
 800295c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 4; j++, SK++) {
 800295e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002962:	3301      	adds	r3, #1
 8002964:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002968:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800296c:	3304      	adds	r3, #4
 800296e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002972:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002976:	2b03      	cmp	r3, #3
 8002978:	ddb8      	ble.n	80028ec <mbedtls_aes_setkey_dec+0x15c>
    for (int i = ctx->nr - 1; i > 0; i--, SK -= 8) {
 800297a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800297e:	3b01      	subs	r3, #1
 8002980:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002984:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002988:	3b20      	subs	r3, #32
 800298a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800298e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002992:	2b00      	cmp	r3, #0
 8002994:	dca6      	bgt.n	80028e4 <mbedtls_aes_setkey_dec+0x154>
        }
    }

    *RK++ = *SK++;
 8002996:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800299a:	1d13      	adds	r3, r2, #4
 800299c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80029a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80029a4:	1d19      	adds	r1, r3, #4
 80029a6:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80029ae:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80029b2:	1d13      	adds	r3, r2, #4
 80029b4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80029b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80029bc:	1d19      	adds	r1, r3, #4
 80029be:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80029c6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80029ca:	1d13      	adds	r3, r2, #4
 80029cc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80029d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80029d4:	1d19      	adds	r1, r3, #4
 80029d6:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80029de:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80029e2:	1d13      	adds	r3, r2, #4
 80029e4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80029e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80029ec:	1d19      	adds	r1, r3, #4
 80029ee:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e000      	b.n	80029fa <mbedtls_aes_setkey_dec+0x26a>
        goto exit;
 80029f8:	bf00      	nop
#endif /* !MBEDTLS_AES_USE_HARDWARE_ONLY */
exit:
    mbedtls_aes_free(&cty);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fc9c 	bl	800233c <mbedtls_aes_free>

    return ret;
 8002a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200001b0 	.word	0x200001b0
 8002a18:	200013b0 	.word	0x200013b0
 8002a1c:	200017b0 	.word	0x200017b0
 8002a20:	20001bb0 	.word	0x20001bb0
 8002a24:	20001fb0 	.word	0x20001fb0

08002a28 <mbedtls_aes_xts_decode_keys>:
                                       unsigned int keybits,
                                       const unsigned char **key1,
                                       unsigned int *key1bits,
                                       const unsigned char **key2,
                                       unsigned int *key2bits)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
    const unsigned int half_keybits = keybits / 2;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
    const unsigned int half_keybytes = half_keybits / 8;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	08db      	lsrs	r3, r3, #3
 8002a40:	613b      	str	r3, [r7, #16]

    switch (keybits) {
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a48:	d006      	beq.n	8002a58 <mbedtls_aes_xts_decode_keys+0x30>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a50:	d004      	beq.n	8002a5c <mbedtls_aes_xts_decode_keys+0x34>
        case 256: break;
        case 512: break;
        default: return MBEDTLS_ERR_AES_INVALID_KEY_LENGTH;
 8002a52:	f06f 031f 	mvn.w	r3, #31
 8002a56:	e011      	b.n	8002a7c <mbedtls_aes_xts_decode_keys+0x54>
        case 256: break;
 8002a58:	bf00      	nop
 8002a5a:	e000      	b.n	8002a5e <mbedtls_aes_xts_decode_keys+0x36>
        case 512: break;
 8002a5c:	bf00      	nop
    }

    *key1bits = half_keybits;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	601a      	str	r2, [r3, #0]
    *key2bits = half_keybits;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	601a      	str	r2, [r3, #0]
    *key1 = &key[0];
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	601a      	str	r2, [r3, #0]
    *key2 = &key[half_keybytes];
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	441a      	add	r2, r3
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	601a      	str	r2, [r3, #0]

    return 0;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <mbedtls_aes_xts_setkey_enc>:

int mbedtls_aes_xts_setkey_enc(mbedtls_aes_xts_context *ctx,
                               const unsigned char *key,
                               unsigned int keybits)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08c      	sub	sp, #48	; 0x30
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8002a94:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *key1, *key2;
    unsigned int key1bits, key2bits;

    ret = mbedtls_aes_xts_decode_keys(key, keybits, &key1, &key1bits,
 8002a9a:	f107 0118 	add.w	r1, r7, #24
 8002a9e:	f107 0220 	add.w	r2, r7, #32
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	68b8      	ldr	r0, [r7, #8]
 8002ab4:	f7ff ffb8 	bl	8002a28 <mbedtls_aes_xts_decode_keys>
 8002ab8:	6278      	str	r0, [r7, #36]	; 0x24
                                      &key2, &key2bits);
    if (ret != 0) {
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <mbedtls_aes_xts_setkey_enc+0x3c>
        return ret;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	e014      	b.n	8002aee <mbedtls_aes_xts_setkey_enc+0x66>
    }

    /* Set the tweak key. Always set tweak key for the encryption mode. */
    ret = mbedtls_aes_setkey_enc(&ctx->tweak, key2, key2bits);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002aca:	69f9      	ldr	r1, [r7, #28]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fc78 	bl	80023c4 <mbedtls_aes_setkey_enc>
 8002ad4:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret != 0) {
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <mbedtls_aes_xts_setkey_enc+0x58>
        return ret;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	e006      	b.n	8002aee <mbedtls_aes_xts_setkey_enc+0x66>
    }

    /* Set crypt key for encryption. */
    return mbedtls_aes_setkey_enc(&ctx->crypt, key1, key1bits);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a39      	ldr	r1, [r7, #32]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fc6c 	bl	80023c4 <mbedtls_aes_setkey_enc>
 8002aec:	4603      	mov	r3, r0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3728      	adds	r7, #40	; 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <mbedtls_aes_xts_setkey_dec>:

int mbedtls_aes_xts_setkey_dec(mbedtls_aes_xts_context *ctx,
                               const unsigned char *key,
                               unsigned int keybits)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b08c      	sub	sp, #48	; 0x30
 8002afa:	af02      	add	r7, sp, #8
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8002b02:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *key1, *key2;
    unsigned int key1bits, key2bits;

    ret = mbedtls_aes_xts_decode_keys(key, keybits, &key1, &key1bits,
 8002b08:	f107 0118 	add.w	r1, r7, #24
 8002b0c:	f107 0220 	add.w	r2, r7, #32
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	f107 031c 	add.w	r3, r7, #28
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	68b8      	ldr	r0, [r7, #8]
 8002b22:	f7ff ff81 	bl	8002a28 <mbedtls_aes_xts_decode_keys>
 8002b26:	6278      	str	r0, [r7, #36]	; 0x24
                                      &key2, &key2bits);
    if (ret != 0) {
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <mbedtls_aes_xts_setkey_dec+0x3c>
        return ret;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	e014      	b.n	8002b5c <mbedtls_aes_xts_setkey_dec+0x66>
    }

    /* Set the tweak key. Always set tweak key for encryption. */
    ret = mbedtls_aes_setkey_enc(&ctx->tweak, key2, key2bits);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002b38:	69f9      	ldr	r1, [r7, #28]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fc41 	bl	80023c4 <mbedtls_aes_setkey_enc>
 8002b42:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret != 0) {
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <mbedtls_aes_xts_setkey_dec+0x58>
        return ret;
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	e006      	b.n	8002b5c <mbedtls_aes_xts_setkey_dec+0x66>
    }

    /* Set crypt key for decryption. */
    return mbedtls_aes_setkey_dec(&ctx->crypt, key1, key1bits);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a39      	ldr	r1, [r7, #32]
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fe1b 	bl	8002790 <mbedtls_aes_setkey_dec>
 8002b5a:	4603      	mov	r3, r0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3728      	adds	r7, #40	; 0x28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt(mbedtls_aes_context *ctx,
                                 const unsigned char input[16],
                                 unsigned char output[16])
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b09e      	sub	sp, #120	; 0x78
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->buf + ctx->rk_offset;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f103 0208 	add.w	r2, r3, #8
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	677b      	str	r3, [r7, #116]	; 0x74
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	663b      	str	r3, [r7, #96]	; 0x60
 8002b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b86:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8002b88:	61fb      	str	r3, [r7, #28]
    return r;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
    struct {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE(input,  0); t.X[0] ^= *RK++;
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b90:	1d1a      	adds	r2, r3, #4
 8002b92:	677a      	str	r2, [r7, #116]	; 0x74
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	4053      	eors	r3, r2
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
    t.X[1] = MBEDTLS_GET_UINT32_LE(input,  4); t.X[1] ^= *RK++;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	667b      	str	r3, [r7, #100]	; 0x64
 8002ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8002ba6:	61bb      	str	r3, [r7, #24]
    return r;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
 8002bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bae:	1d1a      	adds	r2, r3, #4
 8002bb0:	677a      	str	r2, [r7, #116]	; 0x74
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb6:	4053      	eors	r3, r2
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
    t.X[2] = MBEDTLS_GET_UINT32_LE(input,  8); t.X[2] ^= *RK++;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3308      	adds	r3, #8
 8002bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8002bc4:	617b      	str	r3, [r7, #20]
    return r;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bcc:	1d1a      	adds	r2, r3, #4
 8002bce:	677a      	str	r2, [r7, #116]	; 0x74
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	4053      	eors	r3, r2
 8002bd6:	63bb      	str	r3, [r7, #56]	; 0x38
    t.X[3] = MBEDTLS_GET_UINT32_LE(input, 12); t.X[3] ^= *RK++;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	330c      	adds	r3, #12
 8002bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8002be2:	613b      	str	r3, [r7, #16]
    return r;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bea:	1d1a      	adds	r2, r3, #4
 8002bec:	677a      	str	r2, [r7, #116]	; 0x74
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf2:	4053      	eors	r3, r2
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	105b      	asrs	r3, r3, #1
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	673b      	str	r3, [r7, #112]	; 0x70
 8002c00:	e122      	b.n	8002e48 <mbedtls_internal_aes_encrypt+0x2e4>
        AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8002c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c04:	1d1a      	adds	r2, r3, #4
 8002c06:	677a      	str	r2, [r7, #116]	; 0x74
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4bb0      	ldr	r3, [pc, #704]	; (8002ed4 <mbedtls_internal_aes_encrypt+0x370>)
 8002c12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c16:	405a      	eors	r2, r3
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4bad      	ldr	r3, [pc, #692]	; (8002ed8 <mbedtls_internal_aes_encrypt+0x374>)
 8002c22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c26:	405a      	eors	r2, r3
 8002c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2a:	0c1b      	lsrs	r3, r3, #16
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4baa      	ldr	r3, [pc, #680]	; (8002edc <mbedtls_internal_aes_encrypt+0x378>)
 8002c32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c36:	405a      	eors	r2, r3
 8002c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3a:	0e1b      	lsrs	r3, r3, #24
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4ba7      	ldr	r3, [pc, #668]	; (8002ee0 <mbedtls_internal_aes_encrypt+0x37c>)
 8002c42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c46:	4053      	eors	r3, r2
 8002c48:	643b      	str	r3, [r7, #64]	; 0x40
 8002c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c4c:	1d1a      	adds	r2, r3, #4
 8002c4e:	677a      	str	r2, [r7, #116]	; 0x74
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	4619      	mov	r1, r3
 8002c58:	4b9e      	ldr	r3, [pc, #632]	; (8002ed4 <mbedtls_internal_aes_encrypt+0x370>)
 8002c5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c5e:	405a      	eors	r2, r3
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	4619      	mov	r1, r3
 8002c68:	4b9b      	ldr	r3, [pc, #620]	; (8002ed8 <mbedtls_internal_aes_encrypt+0x374>)
 8002c6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c6e:	405a      	eors	r2, r3
 8002c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c72:	0c1b      	lsrs	r3, r3, #16
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	4619      	mov	r1, r3
 8002c78:	4b98      	ldr	r3, [pc, #608]	; (8002edc <mbedtls_internal_aes_encrypt+0x378>)
 8002c7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c7e:	405a      	eors	r2, r3
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	0e1b      	lsrs	r3, r3, #24
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	4619      	mov	r1, r3
 8002c88:	4b95      	ldr	r3, [pc, #596]	; (8002ee0 <mbedtls_internal_aes_encrypt+0x37c>)
 8002c8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c8e:	4053      	eors	r3, r2
 8002c90:	647b      	str	r3, [r7, #68]	; 0x44
 8002c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c94:	1d1a      	adds	r2, r3, #4
 8002c96:	677a      	str	r2, [r7, #116]	; 0x74
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4b8c      	ldr	r3, [pc, #560]	; (8002ed4 <mbedtls_internal_aes_encrypt+0x370>)
 8002ca2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ca6:	405a      	eors	r2, r3
 8002ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4b89      	ldr	r3, [pc, #548]	; (8002ed8 <mbedtls_internal_aes_encrypt+0x374>)
 8002cb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cb6:	405a      	eors	r2, r3
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4b86      	ldr	r3, [pc, #536]	; (8002edc <mbedtls_internal_aes_encrypt+0x378>)
 8002cc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cc6:	405a      	eors	r2, r3
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cca:	0e1b      	lsrs	r3, r3, #24
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4b83      	ldr	r3, [pc, #524]	; (8002ee0 <mbedtls_internal_aes_encrypt+0x37c>)
 8002cd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cd6:	4053      	eors	r3, r2
 8002cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cdc:	1d1a      	adds	r2, r3, #4
 8002cde:	677a      	str	r2, [r7, #116]	; 0x74
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4b7a      	ldr	r3, [pc, #488]	; (8002ed4 <mbedtls_internal_aes_encrypt+0x370>)
 8002cea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cee:	405a      	eors	r2, r3
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4b77      	ldr	r3, [pc, #476]	; (8002ed8 <mbedtls_internal_aes_encrypt+0x374>)
 8002cfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cfe:	405a      	eors	r2, r3
 8002d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	4619      	mov	r1, r3
 8002d08:	4b74      	ldr	r3, [pc, #464]	; (8002edc <mbedtls_internal_aes_encrypt+0x378>)
 8002d0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d0e:	405a      	eors	r2, r3
 8002d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d12:	0e1b      	lsrs	r3, r3, #24
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	4619      	mov	r1, r3
 8002d18:	4b71      	ldr	r3, [pc, #452]	; (8002ee0 <mbedtls_internal_aes_encrypt+0x37c>)
 8002d1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d1e:	4053      	eors	r3, r2
 8002d20:	64fb      	str	r3, [r7, #76]	; 0x4c
        AES_FROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 8002d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d24:	1d1a      	adds	r2, r3, #4
 8002d26:	677a      	str	r2, [r7, #116]	; 0x74
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <mbedtls_internal_aes_encrypt+0x370>)
 8002d32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d36:	405a      	eors	r2, r3
 8002d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d3a:	0a1b      	lsrs	r3, r3, #8
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4b65      	ldr	r3, [pc, #404]	; (8002ed8 <mbedtls_internal_aes_encrypt+0x374>)
 8002d42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d46:	405a      	eors	r2, r3
 8002d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4a:	0c1b      	lsrs	r3, r3, #16
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4b62      	ldr	r3, [pc, #392]	; (8002edc <mbedtls_internal_aes_encrypt+0x378>)
 8002d52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d56:	405a      	eors	r2, r3
 8002d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5a:	0e1b      	lsrs	r3, r3, #24
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4b5f      	ldr	r3, [pc, #380]	; (8002ee0 <mbedtls_internal_aes_encrypt+0x37c>)
 8002d62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d66:	4053      	eors	r3, r2
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30
 8002d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d6c:	1d1a      	adds	r2, r3, #4
 8002d6e:	677a      	str	r2, [r7, #116]	; 0x74
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	4619      	mov	r1, r3
 8002d78:	4b56      	ldr	r3, [pc, #344]	; (8002ed4 <mbedtls_internal_aes_encrypt+0x370>)
 8002d7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d7e:	405a      	eors	r2, r3
 8002d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	4619      	mov	r1, r3
 8002d88:	4b53      	ldr	r3, [pc, #332]	; (8002ed8 <mbedtls_internal_aes_encrypt+0x374>)
 8002d8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d8e:	405a      	eors	r2, r3
 8002d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d92:	0c1b      	lsrs	r3, r3, #16
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	4619      	mov	r1, r3
 8002d98:	4b50      	ldr	r3, [pc, #320]	; (8002edc <mbedtls_internal_aes_encrypt+0x378>)
 8002d9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d9e:	405a      	eors	r2, r3
 8002da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da2:	0e1b      	lsrs	r3, r3, #24
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4619      	mov	r1, r3
 8002da8:	4b4d      	ldr	r3, [pc, #308]	; (8002ee0 <mbedtls_internal_aes_encrypt+0x37c>)
 8002daa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002dae:	4053      	eors	r3, r2
 8002db0:	637b      	str	r3, [r7, #52]	; 0x34
 8002db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db4:	1d1a      	adds	r2, r3, #4
 8002db6:	677a      	str	r2, [r7, #116]	; 0x74
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4b44      	ldr	r3, [pc, #272]	; (8002ed4 <mbedtls_internal_aes_encrypt+0x370>)
 8002dc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002dc6:	405a      	eors	r2, r3
 8002dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <mbedtls_internal_aes_encrypt+0x374>)
 8002dd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002dd6:	405a      	eors	r2, r3
 8002dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dda:	0c1b      	lsrs	r3, r3, #16
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	4619      	mov	r1, r3
 8002de0:	4b3e      	ldr	r3, [pc, #248]	; (8002edc <mbedtls_internal_aes_encrypt+0x378>)
 8002de2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002de6:	405a      	eors	r2, r3
 8002de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dea:	0e1b      	lsrs	r3, r3, #24
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	4619      	mov	r1, r3
 8002df0:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <mbedtls_internal_aes_encrypt+0x37c>)
 8002df2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002df6:	4053      	eors	r3, r2
 8002df8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dfc:	1d1a      	adds	r2, r3, #4
 8002dfe:	677a      	str	r2, [r7, #116]	; 0x74
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	4619      	mov	r1, r3
 8002e08:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <mbedtls_internal_aes_encrypt+0x370>)
 8002e0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e0e:	405a      	eors	r2, r3
 8002e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e12:	0a1b      	lsrs	r3, r3, #8
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	4619      	mov	r1, r3
 8002e18:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <mbedtls_internal_aes_encrypt+0x374>)
 8002e1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e1e:	405a      	eors	r2, r3
 8002e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e22:	0c1b      	lsrs	r3, r3, #16
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	4619      	mov	r1, r3
 8002e28:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <mbedtls_internal_aes_encrypt+0x378>)
 8002e2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e2e:	405a      	eors	r2, r3
 8002e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e32:	0e1b      	lsrs	r3, r3, #24
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	4619      	mov	r1, r3
 8002e38:	4b29      	ldr	r3, [pc, #164]	; (8002ee0 <mbedtls_internal_aes_encrypt+0x37c>)
 8002e3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e3e:	4053      	eors	r3, r2
 8002e40:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 8002e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e44:	3b01      	subs	r3, #1
 8002e46:	673b      	str	r3, [r7, #112]	; 0x70
 8002e48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f73f aed9 	bgt.w	8002c02 <mbedtls_internal_aes_encrypt+0x9e>
    }

    AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8002e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e52:	1d1a      	adds	r2, r3, #4
 8002e54:	677a      	str	r2, [r7, #116]	; 0x74
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <mbedtls_internal_aes_encrypt+0x370>)
 8002e60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e64:	405a      	eors	r2, r3
 8002e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <mbedtls_internal_aes_encrypt+0x374>)
 8002e70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e74:	405a      	eors	r2, r3
 8002e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4b17      	ldr	r3, [pc, #92]	; (8002edc <mbedtls_internal_aes_encrypt+0x378>)
 8002e80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e84:	405a      	eors	r2, r3
 8002e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e88:	0e1b      	lsrs	r3, r3, #24
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <mbedtls_internal_aes_encrypt+0x37c>)
 8002e90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e94:	4053      	eors	r3, r2
 8002e96:	643b      	str	r3, [r7, #64]	; 0x40
 8002e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e9a:	1d1a      	adds	r2, r3, #4
 8002e9c:	677a      	str	r2, [r7, #116]	; 0x74
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <mbedtls_internal_aes_encrypt+0x370>)
 8002ea8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002eac:	405a      	eors	r2, r3
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <mbedtls_internal_aes_encrypt+0x374>)
 8002eb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ebc:	405a      	eors	r2, r3
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <mbedtls_internal_aes_encrypt+0x378>)
 8002ec8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ecc:	405a      	eors	r2, r3
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	e008      	b.n	8002ee4 <mbedtls_internal_aes_encrypt+0x380>
 8002ed2:	bf00      	nop
 8002ed4:	200002b0 	.word	0x200002b0
 8002ed8:	200006b0 	.word	0x200006b0
 8002edc:	20000ab0 	.word	0x20000ab0
 8002ee0:	20000eb0 	.word	0x20000eb0
 8002ee4:	0e1b      	lsrs	r3, r3, #24
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4b84      	ldr	r3, [pc, #528]	; (80030fc <mbedtls_internal_aes_encrypt+0x598>)
 8002eec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ef0:	4053      	eors	r3, r2
 8002ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef6:	1d1a      	adds	r2, r3, #4
 8002ef8:	677a      	str	r2, [r7, #116]	; 0x74
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	4619      	mov	r1, r3
 8002f02:	4b7f      	ldr	r3, [pc, #508]	; (8003100 <mbedtls_internal_aes_encrypt+0x59c>)
 8002f04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f08:	405a      	eors	r2, r3
 8002f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	4619      	mov	r1, r3
 8002f12:	4b7c      	ldr	r3, [pc, #496]	; (8003104 <mbedtls_internal_aes_encrypt+0x5a0>)
 8002f14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f18:	405a      	eors	r2, r3
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4619      	mov	r1, r3
 8002f22:	4b79      	ldr	r3, [pc, #484]	; (8003108 <mbedtls_internal_aes_encrypt+0x5a4>)
 8002f24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f28:	405a      	eors	r2, r3
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2c:	0e1b      	lsrs	r3, r3, #24
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	4619      	mov	r1, r3
 8002f32:	4b72      	ldr	r3, [pc, #456]	; (80030fc <mbedtls_internal_aes_encrypt+0x598>)
 8002f34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f38:	4053      	eors	r3, r2
 8002f3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f3e:	1d1a      	adds	r2, r3, #4
 8002f40:	677a      	str	r2, [r7, #116]	; 0x74
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4b6d      	ldr	r3, [pc, #436]	; (8003100 <mbedtls_internal_aes_encrypt+0x59c>)
 8002f4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f50:	405a      	eors	r2, r3
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4b6a      	ldr	r3, [pc, #424]	; (8003104 <mbedtls_internal_aes_encrypt+0x5a0>)
 8002f5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f60:	405a      	eors	r2, r3
 8002f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4b67      	ldr	r3, [pc, #412]	; (8003108 <mbedtls_internal_aes_encrypt+0x5a4>)
 8002f6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f70:	405a      	eors	r2, r3
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f74:	0e1b      	lsrs	r3, r3, #24
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4b60      	ldr	r3, [pc, #384]	; (80030fc <mbedtls_internal_aes_encrypt+0x598>)
 8002f7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f80:	4053      	eors	r3, r2
 8002f82:	64fb      	str	r3, [r7, #76]	; 0x4c

    t.X[0] = *RK++ ^ \
 8002f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f86:	1d1a      	adds	r2, r3, #4
 8002f88:	677a      	str	r2, [r7, #116]	; 0x74
 8002f8a:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 8002f8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	4611      	mov	r1, r2
 8002f92:	4a5e      	ldr	r2, [pc, #376]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 8002f94:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 8002f96:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 8002f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4b5a      	ldr	r3, [pc, #360]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 8002fa2:	5c5b      	ldrb	r3, [r3, r1]
 8002fa4:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 8002fa6:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8002fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4b56      	ldr	r3, [pc, #344]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 8002fb2:	5c5b      	ldrb	r3, [r3, r1]
 8002fb4:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 8002fb6:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[3])] << 24);
 8002fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fba:	0e1b      	lsrs	r3, r3, #24
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4b52      	ldr	r3, [pc, #328]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 8002fc2:	5c5b      	ldrb	r3, [r3, r1]
 8002fc4:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8002fc6:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8002fc8:	633b      	str	r3, [r7, #48]	; 0x30

    t.X[1] = *RK++ ^ \
 8002fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fcc:	1d1a      	adds	r2, r3, #4
 8002fce:	677a      	str	r2, [r7, #116]	; 0x74
 8002fd0:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 8002fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4a4c      	ldr	r2, [pc, #304]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 8002fda:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8002fdc:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8002fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe0:	0a1b      	lsrs	r3, r3, #8
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4b49      	ldr	r3, [pc, #292]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 8002fe8:	5c5b      	ldrb	r3, [r3, r1]
 8002fea:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 8002fec:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 8002fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4b45      	ldr	r3, [pc, #276]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 8002ff8:	5c5b      	ldrb	r3, [r3, r1]
 8002ffa:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8002ffc:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[0])] << 24);
 8002ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003000:	0e1b      	lsrs	r3, r3, #24
 8003002:	b2db      	uxtb	r3, r3
 8003004:	4619      	mov	r1, r3
 8003006:	4b41      	ldr	r3, [pc, #260]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 8003008:	5c5b      	ldrb	r3, [r3, r1]
 800300a:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 800300c:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 800300e:	637b      	str	r3, [r7, #52]	; 0x34

    t.X[2] = *RK++ ^ \
 8003010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003012:	1d1a      	adds	r2, r3, #4
 8003014:	677a      	str	r2, [r7, #116]	; 0x74
 8003016:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 8003018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	4611      	mov	r1, r2
 800301e:	4a3b      	ldr	r2, [pc, #236]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 8003020:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8003022:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8003024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	b2db      	uxtb	r3, r3
 800302a:	4619      	mov	r1, r3
 800302c:	4b37      	ldr	r3, [pc, #220]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 800302e:	5c5b      	ldrb	r3, [r3, r1]
 8003030:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 8003032:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8003034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003036:	0c1b      	lsrs	r3, r3, #16
 8003038:	b2db      	uxtb	r3, r3
 800303a:	4619      	mov	r1, r3
 800303c:	4b33      	ldr	r3, [pc, #204]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 800303e:	5c5b      	ldrb	r3, [r3, r1]
 8003040:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8003042:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[1])] << 24);
 8003044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003046:	0e1b      	lsrs	r3, r3, #24
 8003048:	b2db      	uxtb	r3, r3
 800304a:	4619      	mov	r1, r3
 800304c:	4b2f      	ldr	r3, [pc, #188]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 800304e:	5c5b      	ldrb	r3, [r3, r1]
 8003050:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8003052:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8003054:	63bb      	str	r3, [r7, #56]	; 0x38

    t.X[3] = *RK++ ^ \
 8003056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003058:	1d1a      	adds	r2, r3, #4
 800305a:	677a      	str	r2, [r7, #116]	; 0x74
 800305c:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 800305e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	4611      	mov	r1, r2
 8003064:	4a29      	ldr	r2, [pc, #164]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 8003066:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 8003068:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 800306a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306c:	0a1b      	lsrs	r3, r3, #8
 800306e:	b2db      	uxtb	r3, r3
 8003070:	4619      	mov	r1, r3
 8003072:	4b26      	ldr	r3, [pc, #152]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 8003074:	5c5b      	ldrb	r3, [r3, r1]
 8003076:	021b      	lsls	r3, r3, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 8003078:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 800307a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	b2db      	uxtb	r3, r3
 8003080:	4619      	mov	r1, r3
 8003082:	4b22      	ldr	r3, [pc, #136]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 8003084:	5c5b      	ldrb	r3, [r3, r1]
 8003086:	041b      	lsls	r3, r3, #16
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 8003088:	405a      	eors	r2, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[2])] << 24);
 800308a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800308c:	0e1b      	lsrs	r3, r3, #24
 800308e:	b2db      	uxtb	r3, r3
 8003090:	4619      	mov	r1, r3
 8003092:	4b1e      	ldr	r3, [pc, #120]	; (800310c <mbedtls_internal_aes_encrypt+0x5a8>)
 8003094:	5c5b      	ldrb	r3, [r3, r1]
 8003096:	061b      	lsls	r3, r3, #24
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 8003098:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 800309a:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT32_LE(t.X[0], output,  0);
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030a2:	623b      	str	r3, [r7, #32]
 80030a4:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 80030a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a8:	601a      	str	r2, [r3, #0]
}
 80030aa:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[1], output,  4);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1d1a      	adds	r2, r3, #4
 80030b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
 80030b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 80030b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ba:	601a      	str	r2, [r3, #0]
}
 80030bc:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[2], output,  8);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f103 0208 	add.w	r2, r3, #8
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	657a      	str	r2, [r7, #84]	; 0x54
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 80030cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ce:	601a      	str	r2, [r3, #0]
}
 80030d0:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[3], output, 12);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f103 020c 	add.w	r2, r3, #12
 80030d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030da:	653a      	str	r2, [r7, #80]	; 0x50
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    memcpy(p, &x, sizeof(x));
 80030e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e2:	601a      	str	r2, [r3, #0]
}
 80030e4:	bf00      	nop

    mbedtls_platform_zeroize(&t, sizeof(t));
 80030e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030ea:	2120      	movs	r1, #32
 80030ec:	4618      	mov	r0, r3
 80030ee:	f008 fae3 	bl	800b6b8 <mbedtls_platform_zeroize>

    return 0;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3778      	adds	r7, #120	; 0x78
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000eb0 	.word	0x20000eb0
 8003100:	200002b0 	.word	0x200002b0
 8003104:	200006b0 	.word	0x200006b0
 8003108:	20000ab0 	.word	0x20000ab0
 800310c:	200001b0 	.word	0x200001b0

08003110 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT) && !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
int mbedtls_internal_aes_decrypt(mbedtls_aes_context *ctx,
                                 const unsigned char input[16],
                                 unsigned char output[16])
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b09e      	sub	sp, #120	; 0x78
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->buf + ctx->rk_offset;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f103 0208 	add.w	r2, r3, #8
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	677b      	str	r3, [r7, #116]	; 0x74
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	663b      	str	r3, [r7, #96]	; 0x60
 8003130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003132:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003134:	61fb      	str	r3, [r7, #28]
    return r;
 8003136:	69fb      	ldr	r3, [r7, #28]
    struct {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE(input,  0); t.X[0] ^= *RK++;
 8003138:	633b      	str	r3, [r7, #48]	; 0x30
 800313a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313c:	1d1a      	adds	r2, r3, #4
 800313e:	677a      	str	r2, [r7, #116]	; 0x74
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	4053      	eors	r3, r2
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
    t.X[1] = MBEDTLS_GET_UINT32_LE(input,  4); t.X[1] ^= *RK++;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	3304      	adds	r3, #4
 800314c:	667b      	str	r3, [r7, #100]	; 0x64
 800314e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003150:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003152:	61bb      	str	r3, [r7, #24]
    return r;
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	637b      	str	r3, [r7, #52]	; 0x34
 8003158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800315a:	1d1a      	adds	r2, r3, #4
 800315c:	677a      	str	r2, [r7, #116]	; 0x74
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003162:	4053      	eors	r3, r2
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
    t.X[2] = MBEDTLS_GET_UINT32_LE(input,  8); t.X[2] ^= *RK++;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3308      	adds	r3, #8
 800316a:	66bb      	str	r3, [r7, #104]	; 0x68
 800316c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800316e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003170:	617b      	str	r3, [r7, #20]
    return r;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	63bb      	str	r3, [r7, #56]	; 0x38
 8003176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003178:	1d1a      	adds	r2, r3, #4
 800317a:	677a      	str	r2, [r7, #116]	; 0x74
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	4053      	eors	r3, r2
 8003182:	63bb      	str	r3, [r7, #56]	; 0x38
    t.X[3] = MBEDTLS_GET_UINT32_LE(input, 12); t.X[3] ^= *RK++;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	330c      	adds	r3, #12
 8003188:	66fb      	str	r3, [r7, #108]	; 0x6c
 800318a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800318e:	613b      	str	r3, [r7, #16]
    return r;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003196:	1d1a      	adds	r2, r3, #4
 8003198:	677a      	str	r2, [r7, #116]	; 0x74
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319e:	4053      	eors	r3, r2
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	105b      	asrs	r3, r3, #1
 80031a8:	3b01      	subs	r3, #1
 80031aa:	673b      	str	r3, [r7, #112]	; 0x70
 80031ac:	e122      	b.n	80033f4 <mbedtls_internal_aes_decrypt+0x2e4>
        AES_RROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 80031ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031b0:	1d1a      	adds	r2, r3, #4
 80031b2:	677a      	str	r2, [r7, #116]	; 0x74
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	4619      	mov	r1, r3
 80031bc:	4bb0      	ldr	r3, [pc, #704]	; (8003480 <mbedtls_internal_aes_decrypt+0x370>)
 80031be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031c2:	405a      	eors	r2, r3
 80031c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	4619      	mov	r1, r3
 80031cc:	4bad      	ldr	r3, [pc, #692]	; (8003484 <mbedtls_internal_aes_decrypt+0x374>)
 80031ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031d2:	405a      	eors	r2, r3
 80031d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d6:	0c1b      	lsrs	r3, r3, #16
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	4619      	mov	r1, r3
 80031dc:	4baa      	ldr	r3, [pc, #680]	; (8003488 <mbedtls_internal_aes_decrypt+0x378>)
 80031de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031e2:	405a      	eors	r2, r3
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	0e1b      	lsrs	r3, r3, #24
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	4619      	mov	r1, r3
 80031ec:	4ba7      	ldr	r3, [pc, #668]	; (800348c <mbedtls_internal_aes_decrypt+0x37c>)
 80031ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031f2:	4053      	eors	r3, r2
 80031f4:	643b      	str	r3, [r7, #64]	; 0x40
 80031f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031f8:	1d1a      	adds	r2, r3, #4
 80031fa:	677a      	str	r2, [r7, #116]	; 0x74
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003200:	b2db      	uxtb	r3, r3
 8003202:	4619      	mov	r1, r3
 8003204:	4b9e      	ldr	r3, [pc, #632]	; (8003480 <mbedtls_internal_aes_decrypt+0x370>)
 8003206:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800320a:	405a      	eors	r2, r3
 800320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4619      	mov	r1, r3
 8003214:	4b9b      	ldr	r3, [pc, #620]	; (8003484 <mbedtls_internal_aes_decrypt+0x374>)
 8003216:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800321a:	405a      	eors	r2, r3
 800321c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321e:	0c1b      	lsrs	r3, r3, #16
 8003220:	b2db      	uxtb	r3, r3
 8003222:	4619      	mov	r1, r3
 8003224:	4b98      	ldr	r3, [pc, #608]	; (8003488 <mbedtls_internal_aes_decrypt+0x378>)
 8003226:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800322a:	405a      	eors	r2, r3
 800322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322e:	0e1b      	lsrs	r3, r3, #24
 8003230:	b2db      	uxtb	r3, r3
 8003232:	4619      	mov	r1, r3
 8003234:	4b95      	ldr	r3, [pc, #596]	; (800348c <mbedtls_internal_aes_decrypt+0x37c>)
 8003236:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800323a:	4053      	eors	r3, r2
 800323c:	647b      	str	r3, [r7, #68]	; 0x44
 800323e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003240:	1d1a      	adds	r2, r3, #4
 8003242:	677a      	str	r2, [r7, #116]	; 0x74
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	b2db      	uxtb	r3, r3
 800324a:	4619      	mov	r1, r3
 800324c:	4b8c      	ldr	r3, [pc, #560]	; (8003480 <mbedtls_internal_aes_decrypt+0x370>)
 800324e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003252:	405a      	eors	r2, r3
 8003254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003256:	0a1b      	lsrs	r3, r3, #8
 8003258:	b2db      	uxtb	r3, r3
 800325a:	4619      	mov	r1, r3
 800325c:	4b89      	ldr	r3, [pc, #548]	; (8003484 <mbedtls_internal_aes_decrypt+0x374>)
 800325e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003262:	405a      	eors	r2, r3
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	b2db      	uxtb	r3, r3
 800326a:	4619      	mov	r1, r3
 800326c:	4b86      	ldr	r3, [pc, #536]	; (8003488 <mbedtls_internal_aes_decrypt+0x378>)
 800326e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003272:	405a      	eors	r2, r3
 8003274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003276:	0e1b      	lsrs	r3, r3, #24
 8003278:	b2db      	uxtb	r3, r3
 800327a:	4619      	mov	r1, r3
 800327c:	4b83      	ldr	r3, [pc, #524]	; (800348c <mbedtls_internal_aes_decrypt+0x37c>)
 800327e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003282:	4053      	eors	r3, r2
 8003284:	64bb      	str	r3, [r7, #72]	; 0x48
 8003286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003288:	1d1a      	adds	r2, r3, #4
 800328a:	677a      	str	r2, [r7, #116]	; 0x74
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003290:	b2db      	uxtb	r3, r3
 8003292:	4619      	mov	r1, r3
 8003294:	4b7a      	ldr	r3, [pc, #488]	; (8003480 <mbedtls_internal_aes_decrypt+0x370>)
 8003296:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800329a:	405a      	eors	r2, r3
 800329c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	4619      	mov	r1, r3
 80032a4:	4b77      	ldr	r3, [pc, #476]	; (8003484 <mbedtls_internal_aes_decrypt+0x374>)
 80032a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032aa:	405a      	eors	r2, r3
 80032ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ae:	0c1b      	lsrs	r3, r3, #16
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	4619      	mov	r1, r3
 80032b4:	4b74      	ldr	r3, [pc, #464]	; (8003488 <mbedtls_internal_aes_decrypt+0x378>)
 80032b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032ba:	405a      	eors	r2, r3
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	0e1b      	lsrs	r3, r3, #24
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	4619      	mov	r1, r3
 80032c4:	4b71      	ldr	r3, [pc, #452]	; (800348c <mbedtls_internal_aes_decrypt+0x37c>)
 80032c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032ca:	4053      	eors	r3, r2
 80032cc:	64fb      	str	r3, [r7, #76]	; 0x4c
        AES_RROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 80032ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d0:	1d1a      	adds	r2, r3, #4
 80032d2:	677a      	str	r2, [r7, #116]	; 0x74
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	4619      	mov	r1, r3
 80032dc:	4b68      	ldr	r3, [pc, #416]	; (8003480 <mbedtls_internal_aes_decrypt+0x370>)
 80032de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032e2:	405a      	eors	r2, r3
 80032e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	4619      	mov	r1, r3
 80032ec:	4b65      	ldr	r3, [pc, #404]	; (8003484 <mbedtls_internal_aes_decrypt+0x374>)
 80032ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032f2:	405a      	eors	r2, r3
 80032f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f6:	0c1b      	lsrs	r3, r3, #16
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	4619      	mov	r1, r3
 80032fc:	4b62      	ldr	r3, [pc, #392]	; (8003488 <mbedtls_internal_aes_decrypt+0x378>)
 80032fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003302:	405a      	eors	r2, r3
 8003304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003306:	0e1b      	lsrs	r3, r3, #24
 8003308:	b2db      	uxtb	r3, r3
 800330a:	4619      	mov	r1, r3
 800330c:	4b5f      	ldr	r3, [pc, #380]	; (800348c <mbedtls_internal_aes_decrypt+0x37c>)
 800330e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003312:	4053      	eors	r3, r2
 8003314:	633b      	str	r3, [r7, #48]	; 0x30
 8003316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003318:	1d1a      	adds	r2, r3, #4
 800331a:	677a      	str	r2, [r7, #116]	; 0x74
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003320:	b2db      	uxtb	r3, r3
 8003322:	4619      	mov	r1, r3
 8003324:	4b56      	ldr	r3, [pc, #344]	; (8003480 <mbedtls_internal_aes_decrypt+0x370>)
 8003326:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800332a:	405a      	eors	r2, r3
 800332c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	b2db      	uxtb	r3, r3
 8003332:	4619      	mov	r1, r3
 8003334:	4b53      	ldr	r3, [pc, #332]	; (8003484 <mbedtls_internal_aes_decrypt+0x374>)
 8003336:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800333a:	405a      	eors	r2, r3
 800333c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800333e:	0c1b      	lsrs	r3, r3, #16
 8003340:	b2db      	uxtb	r3, r3
 8003342:	4619      	mov	r1, r3
 8003344:	4b50      	ldr	r3, [pc, #320]	; (8003488 <mbedtls_internal_aes_decrypt+0x378>)
 8003346:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800334a:	405a      	eors	r2, r3
 800334c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800334e:	0e1b      	lsrs	r3, r3, #24
 8003350:	b2db      	uxtb	r3, r3
 8003352:	4619      	mov	r1, r3
 8003354:	4b4d      	ldr	r3, [pc, #308]	; (800348c <mbedtls_internal_aes_decrypt+0x37c>)
 8003356:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800335a:	4053      	eors	r3, r2
 800335c:	637b      	str	r3, [r7, #52]	; 0x34
 800335e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003360:	1d1a      	adds	r2, r3, #4
 8003362:	677a      	str	r2, [r7, #116]	; 0x74
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003368:	b2db      	uxtb	r3, r3
 800336a:	4619      	mov	r1, r3
 800336c:	4b44      	ldr	r3, [pc, #272]	; (8003480 <mbedtls_internal_aes_decrypt+0x370>)
 800336e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003372:	405a      	eors	r2, r3
 8003374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	b2db      	uxtb	r3, r3
 800337a:	4619      	mov	r1, r3
 800337c:	4b41      	ldr	r3, [pc, #260]	; (8003484 <mbedtls_internal_aes_decrypt+0x374>)
 800337e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003382:	405a      	eors	r2, r3
 8003384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003386:	0c1b      	lsrs	r3, r3, #16
 8003388:	b2db      	uxtb	r3, r3
 800338a:	4619      	mov	r1, r3
 800338c:	4b3e      	ldr	r3, [pc, #248]	; (8003488 <mbedtls_internal_aes_decrypt+0x378>)
 800338e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003392:	405a      	eors	r2, r3
 8003394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003396:	0e1b      	lsrs	r3, r3, #24
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	4b3b      	ldr	r3, [pc, #236]	; (800348c <mbedtls_internal_aes_decrypt+0x37c>)
 800339e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033a2:	4053      	eors	r3, r2
 80033a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80033a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a8:	1d1a      	adds	r2, r3, #4
 80033aa:	677a      	str	r2, [r7, #116]	; 0x74
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	4619      	mov	r1, r3
 80033b4:	4b32      	ldr	r3, [pc, #200]	; (8003480 <mbedtls_internal_aes_decrypt+0x370>)
 80033b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033ba:	405a      	eors	r2, r3
 80033bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	4619      	mov	r1, r3
 80033c4:	4b2f      	ldr	r3, [pc, #188]	; (8003484 <mbedtls_internal_aes_decrypt+0x374>)
 80033c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033ca:	405a      	eors	r2, r3
 80033cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ce:	0c1b      	lsrs	r3, r3, #16
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	4619      	mov	r1, r3
 80033d4:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <mbedtls_internal_aes_decrypt+0x378>)
 80033d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033da:	405a      	eors	r2, r3
 80033dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033de:	0e1b      	lsrs	r3, r3, #24
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	4619      	mov	r1, r3
 80033e4:	4b29      	ldr	r3, [pc, #164]	; (800348c <mbedtls_internal_aes_decrypt+0x37c>)
 80033e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033ea:	4053      	eors	r3, r2
 80033ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 80033ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f0:	3b01      	subs	r3, #1
 80033f2:	673b      	str	r3, [r7, #112]	; 0x70
 80033f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f73f aed9 	bgt.w	80031ae <mbedtls_internal_aes_decrypt+0x9e>
    }

    AES_RROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 80033fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033fe:	1d1a      	adds	r2, r3, #4
 8003400:	677a      	str	r2, [r7, #116]	; 0x74
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	b2db      	uxtb	r3, r3
 8003408:	4619      	mov	r1, r3
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <mbedtls_internal_aes_decrypt+0x370>)
 800340c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003410:	405a      	eors	r2, r3
 8003412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	b2db      	uxtb	r3, r3
 8003418:	4619      	mov	r1, r3
 800341a:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <mbedtls_internal_aes_decrypt+0x374>)
 800341c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003420:	405a      	eors	r2, r3
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	b2db      	uxtb	r3, r3
 8003428:	4619      	mov	r1, r3
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <mbedtls_internal_aes_decrypt+0x378>)
 800342c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003430:	405a      	eors	r2, r3
 8003432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003434:	0e1b      	lsrs	r3, r3, #24
 8003436:	b2db      	uxtb	r3, r3
 8003438:	4619      	mov	r1, r3
 800343a:	4b14      	ldr	r3, [pc, #80]	; (800348c <mbedtls_internal_aes_decrypt+0x37c>)
 800343c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003440:	4053      	eors	r3, r2
 8003442:	643b      	str	r3, [r7, #64]	; 0x40
 8003444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003446:	1d1a      	adds	r2, r3, #4
 8003448:	677a      	str	r2, [r7, #116]	; 0x74
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344e:	b2db      	uxtb	r3, r3
 8003450:	4619      	mov	r1, r3
 8003452:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <mbedtls_internal_aes_decrypt+0x370>)
 8003454:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003458:	405a      	eors	r2, r3
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	0a1b      	lsrs	r3, r3, #8
 800345e:	b2db      	uxtb	r3, r3
 8003460:	4619      	mov	r1, r3
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <mbedtls_internal_aes_decrypt+0x374>)
 8003464:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003468:	405a      	eors	r2, r3
 800346a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	b2db      	uxtb	r3, r3
 8003470:	4619      	mov	r1, r3
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <mbedtls_internal_aes_decrypt+0x378>)
 8003474:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003478:	405a      	eors	r2, r3
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	e008      	b.n	8003490 <mbedtls_internal_aes_decrypt+0x380>
 800347e:	bf00      	nop
 8003480:	200013b0 	.word	0x200013b0
 8003484:	200017b0 	.word	0x200017b0
 8003488:	20001bb0 	.word	0x20001bb0
 800348c:	20001fb0 	.word	0x20001fb0
 8003490:	0e1b      	lsrs	r3, r3, #24
 8003492:	b2db      	uxtb	r3, r3
 8003494:	4619      	mov	r1, r3
 8003496:	4b84      	ldr	r3, [pc, #528]	; (80036a8 <mbedtls_internal_aes_decrypt+0x598>)
 8003498:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800349c:	4053      	eors	r3, r2
 800349e:	647b      	str	r3, [r7, #68]	; 0x44
 80034a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a2:	1d1a      	adds	r2, r3, #4
 80034a4:	677a      	str	r2, [r7, #116]	; 0x74
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	4619      	mov	r1, r3
 80034ae:	4b7f      	ldr	r3, [pc, #508]	; (80036ac <mbedtls_internal_aes_decrypt+0x59c>)
 80034b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034b4:	405a      	eors	r2, r3
 80034b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	4619      	mov	r1, r3
 80034be:	4b7c      	ldr	r3, [pc, #496]	; (80036b0 <mbedtls_internal_aes_decrypt+0x5a0>)
 80034c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034c4:	405a      	eors	r2, r3
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	4619      	mov	r1, r3
 80034ce:	4b79      	ldr	r3, [pc, #484]	; (80036b4 <mbedtls_internal_aes_decrypt+0x5a4>)
 80034d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034d4:	405a      	eors	r2, r3
 80034d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d8:	0e1b      	lsrs	r3, r3, #24
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	4619      	mov	r1, r3
 80034de:	4b72      	ldr	r3, [pc, #456]	; (80036a8 <mbedtls_internal_aes_decrypt+0x598>)
 80034e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034e4:	4053      	eors	r3, r2
 80034e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80034e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ea:	1d1a      	adds	r2, r3, #4
 80034ec:	677a      	str	r2, [r7, #116]	; 0x74
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	4619      	mov	r1, r3
 80034f6:	4b6d      	ldr	r3, [pc, #436]	; (80036ac <mbedtls_internal_aes_decrypt+0x59c>)
 80034f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034fc:	405a      	eors	r2, r3
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <mbedtls_internal_aes_decrypt+0x5a0>)
 8003508:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800350c:	405a      	eors	r2, r3
 800350e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	b2db      	uxtb	r3, r3
 8003514:	4619      	mov	r1, r3
 8003516:	4b67      	ldr	r3, [pc, #412]	; (80036b4 <mbedtls_internal_aes_decrypt+0x5a4>)
 8003518:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800351c:	405a      	eors	r2, r3
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	0e1b      	lsrs	r3, r3, #24
 8003522:	b2db      	uxtb	r3, r3
 8003524:	4619      	mov	r1, r3
 8003526:	4b60      	ldr	r3, [pc, #384]	; (80036a8 <mbedtls_internal_aes_decrypt+0x598>)
 8003528:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800352c:	4053      	eors	r3, r2
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c

    t.X[0] = *RK++ ^ \
 8003530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003532:	1d1a      	adds	r2, r3, #4
 8003534:	677a      	str	r2, [r7, #116]	; 0x74
 8003536:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 8003538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	4611      	mov	r1, r2
 800353e:	4a5e      	ldr	r2, [pc, #376]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 8003540:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 8003542:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8003544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	b2db      	uxtb	r3, r3
 800354a:	4619      	mov	r1, r3
 800354c:	4b5a      	ldr	r3, [pc, #360]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 800354e:	5c5b      	ldrb	r3, [r3, r1]
 8003550:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 8003552:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8003554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003556:	0c1b      	lsrs	r3, r3, #16
 8003558:	b2db      	uxtb	r3, r3
 800355a:	4619      	mov	r1, r3
 800355c:	4b56      	ldr	r3, [pc, #344]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 800355e:	5c5b      	ldrb	r3, [r3, r1]
 8003560:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8003562:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[1])] << 24);
 8003564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003566:	0e1b      	lsrs	r3, r3, #24
 8003568:	b2db      	uxtb	r3, r3
 800356a:	4619      	mov	r1, r3
 800356c:	4b52      	ldr	r3, [pc, #328]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 800356e:	5c5b      	ldrb	r3, [r3, r1]
 8003570:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8003572:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8003574:	633b      	str	r3, [r7, #48]	; 0x30

    t.X[1] = *RK++ ^ \
 8003576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003578:	1d1a      	adds	r2, r3, #4
 800357a:	677a      	str	r2, [r7, #116]	; 0x74
 800357c:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 800357e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	4611      	mov	r1, r2
 8003584:	4a4c      	ldr	r2, [pc, #304]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 8003586:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8003588:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 800358a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	b2db      	uxtb	r3, r3
 8003590:	4619      	mov	r1, r3
 8003592:	4b49      	ldr	r3, [pc, #292]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 8003594:	5c5b      	ldrb	r3, [r3, r1]
 8003596:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 8003598:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 800359a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	4619      	mov	r1, r3
 80035a2:	4b45      	ldr	r3, [pc, #276]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 80035a4:	5c5b      	ldrb	r3, [r3, r1]
 80035a6:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 80035a8:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[2])] << 24);
 80035aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ac:	0e1b      	lsrs	r3, r3, #24
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	4619      	mov	r1, r3
 80035b2:	4b41      	ldr	r3, [pc, #260]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 80035b4:	5c5b      	ldrb	r3, [r3, r1]
 80035b6:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 80035b8:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 80035ba:	637b      	str	r3, [r7, #52]	; 0x34

    t.X[2] = *RK++ ^ \
 80035bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	677a      	str	r2, [r7, #116]	; 0x74
 80035c2:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 80035c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	4611      	mov	r1, r2
 80035ca:	4a3b      	ldr	r2, [pc, #236]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 80035cc:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 80035ce:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 80035d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	4619      	mov	r1, r3
 80035d8:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 80035da:	5c5b      	ldrb	r3, [r3, r1]
 80035dc:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 80035de:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 80035e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	4619      	mov	r1, r3
 80035e8:	4b33      	ldr	r3, [pc, #204]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 80035ea:	5c5b      	ldrb	r3, [r3, r1]
 80035ec:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 80035ee:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[3])] << 24);
 80035f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f2:	0e1b      	lsrs	r3, r3, #24
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	4619      	mov	r1, r3
 80035f8:	4b2f      	ldr	r3, [pc, #188]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 80035fa:	5c5b      	ldrb	r3, [r3, r1]
 80035fc:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 80035fe:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8003600:	63bb      	str	r3, [r7, #56]	; 0x38

    t.X[3] = *RK++ ^ \
 8003602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003604:	1d1a      	adds	r2, r3, #4
 8003606:	677a      	str	r2, [r7, #116]	; 0x74
 8003608:	681b      	ldr	r3, [r3, #0]
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 800360a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	4611      	mov	r1, r2
 8003610:	4a29      	ldr	r2, [pc, #164]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 8003612:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 8003614:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8003616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003618:	0a1b      	lsrs	r3, r3, #8
 800361a:	b2db      	uxtb	r3, r3
 800361c:	4619      	mov	r1, r3
 800361e:	4b26      	ldr	r3, [pc, #152]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 8003620:	5c5b      	ldrb	r3, [r3, r1]
 8003622:	021b      	lsls	r3, r3, #8
             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 8003624:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 8003626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	b2db      	uxtb	r3, r3
 800362c:	4619      	mov	r1, r3
 800362e:	4b22      	ldr	r3, [pc, #136]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 8003630:	5c5b      	ldrb	r3, [r3, r1]
 8003632:	041b      	lsls	r3, r3, #16
             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 8003634:	405a      	eors	r2, r3
             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[0])] << 24);
 8003636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003638:	0e1b      	lsrs	r3, r3, #24
 800363a:	b2db      	uxtb	r3, r3
 800363c:	4619      	mov	r1, r3
 800363e:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <mbedtls_internal_aes_decrypt+0x5a8>)
 8003640:	5c5b      	ldrb	r3, [r3, r1]
 8003642:	061b      	lsls	r3, r3, #24
             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 8003644:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 8003646:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT32_LE(t.X[0], output,  0);
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800364e:	623b      	str	r3, [r7, #32]
 8003650:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8003652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003654:	601a      	str	r2, [r3, #0]
}
 8003656:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[1], output,  4);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	1d1a      	adds	r2, r3, #4
 800365c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 8003664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003666:	601a      	str	r2, [r3, #0]
}
 8003668:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[2], output,  8);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f103 0208 	add.w	r2, r3, #8
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	657a      	str	r2, [r7, #84]	; 0x54
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
 8003676:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 8003678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367a:	601a      	str	r2, [r3, #0]
}
 800367c:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(t.X[3], output, 12);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f103 020c 	add.w	r2, r3, #12
 8003684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003686:	653a      	str	r2, [r7, #80]	; 0x50
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800368a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    memcpy(p, &x, sizeof(x));
 800368c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368e:	601a      	str	r2, [r3, #0]
}
 8003690:	bf00      	nop

    mbedtls_platform_zeroize(&t, sizeof(t));
 8003692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003696:	2120      	movs	r1, #32
 8003698:	4618      	mov	r0, r3
 800369a:	f008 f80d 	bl	800b6b8 <mbedtls_platform_zeroize>

    return 0;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3778      	adds	r7, #120	; 0x78
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20001fb0 	.word	0x20001fb0
 80036ac:	200013b0 	.word	0x200013b0
 80036b0:	200017b0 	.word	0x200017b0
 80036b4:	20001bb0 	.word	0x20001bb0
 80036b8:	200012b0 	.word	0x200012b0

080036bc <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb(mbedtls_aes_context *ctx,
                          int mode,
                          const unsigned char input[16],
                          unsigned char output[16])
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d005      	beq.n	80036dc <mbedtls_aes_crypt_ecb+0x20>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <mbedtls_aes_crypt_ecb+0x20>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 80036d6:	f06f 0320 	mvn.w	r3, #32
 80036da:	e00f      	b.n	80036fc <mbedtls_aes_crypt_ecb+0x40>
    }
#endif

#if !defined(MBEDTLS_AES_USE_HARDWARE_ONLY)
#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
    if (mode == MBEDTLS_AES_DECRYPT) {
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <mbedtls_aes_crypt_ecb+0x34>
        return mbedtls_internal_aes_decrypt(ctx, input, output);
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff fd12 	bl	8003110 <mbedtls_internal_aes_decrypt>
 80036ec:	4603      	mov	r3, r0
 80036ee:	e005      	b.n	80036fc <mbedtls_aes_crypt_ecb+0x40>
    } else
#endif
    {
        return mbedtls_internal_aes_encrypt(ctx, input, output);
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff fa35 	bl	8002b64 <mbedtls_internal_aes_encrypt>
 80036fa:	4603      	mov	r3, r0
    }
#endif /* !MBEDTLS_AES_USE_HARDWARE_ONLY */
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <mbedtls_aes_crypt_cbc>:
                          int mode,
                          size_t length,
                          unsigned char iv[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 8003704:	b5b0      	push	{r4, r5, r7, lr}
 8003706:	b0a2      	sub	sp, #136	; 0x88
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8003712:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8003716:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    unsigned char temp[16];

    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d005      	beq.n	800372c <mbedtls_aes_crypt_cbc+0x28>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <mbedtls_aes_crypt_cbc+0x28>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8003726:	f06f 0320 	mvn.w	r3, #32
 800372a:	e108      	b.n	800393e <mbedtls_aes_crypt_cbc+0x23a>
    }

    /* Nothing to do if length is zero. */
    if (length == 0) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <mbedtls_aes_crypt_cbc+0x32>
        return 0;
 8003732:	2300      	movs	r3, #0
 8003734:	e103      	b.n	800393e <mbedtls_aes_crypt_cbc+0x23a>
    }

    if (length % 16) {
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <mbedtls_aes_crypt_cbc+0x42>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8003740:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8003744:	e0fb      	b.n	800393e <mbedtls_aes_crypt_cbc+0x23a>
        // unaccelerated mode
        //
    }
#endif

    const unsigned char *ivp = iv;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    if (mode == MBEDTLS_AES_DECRYPT) {
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f040 80e3 	bne.w	800391a <mbedtls_aes_crypt_cbc+0x216>
        while (length > 0) {
 8003754:	e075      	b.n	8003842 <mbedtls_aes_crypt_cbc+0x13e>
            memcpy(temp, input, 16);
 8003756:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800375a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	6859      	ldr	r1, [r3, #4]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            ret = mbedtls_aes_crypt_ecb(ctx, mode, input, output);
 8003768:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800376c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff ffa2 	bl	80036bc <mbedtls_aes_crypt_ecb>
 8003778:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            if (ret != 0) {
 800377c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003780:	2b00      	cmp	r3, #0
 8003782:	f040 80d7 	bne.w	8003934 <mbedtls_aes_crypt_cbc+0x230>
 8003786:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800378a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800378c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003790:	67bb      	str	r3, [r7, #120]	; 0x78
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	677b      	str	r3, [r7, #116]	; 0x74
 8003796:	2310      	movs	r3, #16
 8003798:	673b      	str	r3, [r7, #112]	; 0x70
static inline void mbedtls_xor_no_simd(unsigned char *r,
                                       const unsigned char *a,
                                       const unsigned char *b,
                                       size_t n)
{
    size_t i = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (n % 8 == 0) {
        return;
    }
#endif
#else
    for (; (i + 4) <= n; i += 4) {
 800379e:	e01e      	b.n	80037de <mbedtls_aes_crypt_cbc+0xda>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80037a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a4:	4413      	add	r3, r2
 80037a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80037a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037aa:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80037ac:	61bb      	str	r3, [r7, #24]
    return r;
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80037b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b4:	440b      	add	r3, r1
 80037b6:	667b      	str	r3, [r7, #100]	; 0x64
 80037b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ba:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80037bc:	617b      	str	r3, [r7, #20]
    return r;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4053      	eors	r3, r2
 80037c2:	663b      	str	r3, [r7, #96]	; 0x60
        mbedtls_put_unaligned_uint32(r + i, x);
 80037c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80037c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c8:	4413      	add	r3, r2
 80037ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 80037d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d4:	601a      	str	r2, [r3, #0]
}
 80037d6:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80037d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037da:	3304      	adds	r3, #4
 80037dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e0:	3304      	adds	r3, #4
 80037e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d2db      	bcs.n	80037a0 <mbedtls_aes_crypt_cbc+0x9c>
        return;
    }
#endif
#endif
#endif
    for (; i < n; i++) {
 80037e8:	e010      	b.n	800380c <mbedtls_aes_crypt_cbc+0x108>
        r[i] = a[i] ^ b[i];
 80037ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ee:	4413      	add	r3, r2
 80037f0:	7819      	ldrb	r1, [r3, #0]
 80037f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f6:	4413      	add	r3, r2
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80037fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fe:	4403      	add	r3, r0
 8003800:	404a      	eors	r2, r1
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8003806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003808:	3301      	adds	r3, #1
 800380a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800380c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800380e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003810:	429a      	cmp	r2, r3
 8003812:	d8ea      	bhi.n	80037ea <mbedtls_aes_crypt_cbc+0xe6>
    }
}
 8003814:	bf00      	nop
            /* Avoid using the NEON implementation of mbedtls_xor. Because of the dependency on
             * the result for the next block in CBC, and the cost of transferring that data from
             * NEON registers, NEON is slower on aarch64. */
            mbedtls_xor_no_simd(output, output, iv, 16);

            memcpy(iv, temp, 16);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	461d      	mov	r5, r3
 800381a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800381e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003820:	6028      	str	r0, [r5, #0]
 8003822:	6069      	str	r1, [r5, #4]
 8003824:	60aa      	str	r2, [r5, #8]
 8003826:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8003828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800382c:	3310      	adds	r3, #16
 800382e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            output += 16;
 8003832:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003836:	3310      	adds	r3, #16
 8003838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            length -= 16;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3b10      	subs	r3, #16
 8003840:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d186      	bne.n	8003756 <mbedtls_aes_crypt_cbc+0x52>
 8003848:	e070      	b.n	800392c <mbedtls_aes_crypt_cbc+0x228>
 800384a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800384e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003854:	657b      	str	r3, [r7, #84]	; 0x54
 8003856:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800385a:	653b      	str	r3, [r7, #80]	; 0x50
 800385c:	2310      	movs	r3, #16
 800385e:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t i = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	64bb      	str	r3, [r7, #72]	; 0x48
    for (; (i + 4) <= n; i += 4) {
 8003864:	e01e      	b.n	80038a4 <mbedtls_aes_crypt_cbc+0x1a0>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8003866:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386a:	4413      	add	r3, r2
 800386c:	647b      	str	r3, [r7, #68]	; 0x44
 800386e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003870:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8003874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003876:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800387a:	440b      	add	r3, r1
 800387c:	643b      	str	r3, [r7, #64]	; 0x40
 800387e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003880:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8003882:	623b      	str	r3, [r7, #32]
    return r;
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	4053      	eors	r3, r2
 8003888:	63fb      	str	r3, [r7, #60]	; 0x3c
        mbedtls_put_unaligned_uint32(r + i, x);
 800388a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800388c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388e:	4413      	add	r3, r2
 8003890:	63bb      	str	r3, [r7, #56]	; 0x38
 8003892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 8003898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389a:	601a      	str	r2, [r3, #0]
}
 800389c:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800389e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a0:	3304      	adds	r3, #4
 80038a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a6:	3304      	adds	r3, #4
 80038a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d2db      	bcs.n	8003866 <mbedtls_aes_crypt_cbc+0x162>
    for (; i < n; i++) {
 80038ae:	e010      	b.n	80038d2 <mbedtls_aes_crypt_cbc+0x1ce>
        r[i] = a[i] ^ b[i];
 80038b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b4:	4413      	add	r3, r2
 80038b6:	7819      	ldrb	r1, [r3, #0]
 80038b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038bc:	4413      	add	r3, r2
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80038c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c4:	4403      	add	r3, r0
 80038c6:	404a      	eors	r2, r1
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80038cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ce:	3301      	adds	r3, #1
 80038d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80038d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d8ea      	bhi.n	80038b0 <mbedtls_aes_crypt_cbc+0x1ac>
}
 80038da:	bf00      	nop
        }
    } else {
        while (length > 0) {
            mbedtls_xor_no_simd(output, input, ivp, 16);

            ret = mbedtls_aes_crypt_ecb(ctx, mode, output, output);
 80038dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038e0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f7ff fee8 	bl	80036bc <mbedtls_aes_crypt_ecb>
 80038ec:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            if (ret != 0) {
 80038f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d11f      	bne.n	8003938 <mbedtls_aes_crypt_cbc+0x234>
                goto exit;
            }
            ivp = output;
 80038f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            input  += 16;
 8003900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003904:	3310      	adds	r3, #16
 8003906:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            output += 16;
 800390a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800390e:	3310      	adds	r3, #16
 8003910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            length -= 16;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3b10      	subs	r3, #16
 8003918:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d194      	bne.n	800384a <mbedtls_aes_crypt_cbc+0x146>
        }
        memcpy(iv, ivp, 16);
 8003920:	2210      	movs	r2, #16
 8003922:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003926:	6838      	ldr	r0, [r7, #0]
 8003928:	f00d f9d3 	bl	8010cd2 <memcpy>
    }
    ret = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003932:	e002      	b.n	800393a <mbedtls_aes_crypt_cbc+0x236>
                goto exit;
 8003934:	bf00      	nop
 8003936:	e000      	b.n	800393a <mbedtls_aes_crypt_cbc+0x236>
                goto exit;
 8003938:	bf00      	nop

exit:
    return ret;
 800393a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
}
 800393e:	4618      	mov	r0, r3
 8003940:	3788      	adds	r7, #136	; 0x88
 8003942:	46bd      	mov	sp, r7
 8003944:	bdb0      	pop	{r4, r5, r7, pc}

08003946 <mbedtls_gf128mul_x_ble>:
#if defined(MBEDTLS_AESCE_C) || defined(MBEDTLS_AESNI_C)
MBEDTLS_OPTIMIZE_FOR_PERFORMANCE
#endif
static inline void mbedtls_gf128mul_x_ble(unsigned char r[16],
                                          const unsigned char x[16])
{
 8003946:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800394a:	b09a      	sub	sp, #104	; 0x68
 800394c:	af00      	add	r7, sp, #0
 800394e:	6178      	str	r0, [r7, #20]
 8003950:	6139      	str	r1, [r7, #16]
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	643b      	str	r3, [r7, #64]	; 0x40
    r = *p64;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint64_unaligned_t *p64 = (mbedtls_uint64_unaligned_t *) p;
    r = p64->x;
#else
    memcpy(&r, p, sizeof(r));
 8003956:	f107 0320 	add.w	r3, r7, #32
 800395a:	2208      	movs	r2, #8
 800395c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800395e:	4618      	mov	r0, r3
 8003960:	f00d f9b7 	bl	8010cd2 <memcpy>
#endif
    return r;
 8003964:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    uint64_t a, b, ra, rb;

    a = MBEDTLS_GET_UINT64_LE(x, 0);
 8003968:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    b = MBEDTLS_GET_UINT64_LE(x, 8);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	3308      	adds	r3, #8
 8003970:	647b      	str	r3, [r7, #68]	; 0x44
    memcpy(&r, p, sizeof(r));
 8003972:	f107 0318 	add.w	r3, r7, #24
 8003976:	2208      	movs	r2, #8
 8003978:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800397a:	4618      	mov	r0, r3
 800397c:	f00d f9a9 	bl	8010cd2 <memcpy>
    return r;
 8003980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003984:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    ra = (a << 1)  ^ 0x0087 >> (8 - ((b >> 63) << 3));
 8003988:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800398c:	1894      	adds	r4, r2, r2
 800398e:	eb43 0503 	adc.w	r5, r3, r3
 8003992:	4620      	mov	r0, r4
 8003994:	4629      	mov	r1, r5
 8003996:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	0fea      	lsrs	r2, r5, #31
 80039a4:	2300      	movs	r3, #0
 80039a6:	4613      	mov	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	f1c3 0308 	rsb	r3, r3, #8
 80039ae:	2287      	movs	r2, #135	; 0x87
 80039b0:	fa42 f303 	asr.w	r3, r2, r3
 80039b4:	17da      	asrs	r2, r3, #31
 80039b6:	4698      	mov	r8, r3
 80039b8:	4691      	mov	r9, r2
 80039ba:	ea80 0308 	eor.w	r3, r0, r8
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	ea81 0309 	eor.w	r3, r1, r9
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80039ca:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    rb = (a >> 63) | (b << 1);
 80039ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80039d2:	f04f 0000 	mov.w	r0, #0
 80039d6:	f04f 0100 	mov.w	r1, #0
 80039da:	0fd8      	lsrs	r0, r3, #31
 80039dc:	2100      	movs	r1, #0
 80039de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039e2:	1894      	adds	r4, r2, r2
 80039e4:	603c      	str	r4, [r7, #0]
 80039e6:	415b      	adcs	r3, r3
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ee:	ea40 0a02 	orr.w	sl, r0, r2
 80039f2:	ea41 0b03 	orr.w	fp, r1, r3
 80039f6:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039fe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a02:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    *p64 = x;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint64_unaligned_t *p64 = (mbedtls_uint64_unaligned_t *) p;
    p64->x = x;
#else
    memcpy(p, &x, sizeof(x));
 8003a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003a10:	f00d f95f 	bl	8010cd2 <memcpy>
#endif
}
 8003a14:	bf00      	nop

    MBEDTLS_PUT_UINT64_LE(ra, r, 0);
    MBEDTLS_PUT_UINT64_LE(rb, r, 8);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a20:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    memcpy(p, &x, sizeof(x));
 8003a24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a28:	2208      	movs	r2, #8
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a2e:	f00d f950 	bl	8010cd2 <memcpy>
}
 8003a32:	bf00      	nop
}
 8003a34:	bf00      	nop
 8003a36:	3768      	adds	r7, #104	; 0x68
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a3e <mbedtls_aes_crypt_xts>:
                          int mode,
                          size_t length,
                          const unsigned char data_unit[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 8003a3e:	b590      	push	{r4, r7, lr}
 8003a40:	b0d3      	sub	sp, #332	; 0x14c
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 8003a48:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 8003a4c:	6020      	str	r0, [r4, #0]
 8003a4e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8003a52:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 8003a56:	6001      	str	r1, [r0, #0]
 8003a58:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8003a5c:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 8003a60:	600a      	str	r2, [r1, #0]
 8003a62:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003a66:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8003a6a:	6013      	str	r3, [r2, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8003a6c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8003a70:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    size_t blocks = length / 16;
 8003a74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003a78:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    size_t leftover = length % 16;
 8003a84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003a88:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    unsigned char tweak[16];
    unsigned char prev_tweak[16];
    unsigned char tmp[16];

    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 8003a96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003a9a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d009      	beq.n	8003ab8 <mbedtls_aes_crypt_xts+0x7a>
 8003aa4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003aa8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <mbedtls_aes_crypt_xts+0x7a>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8003ab2:	f06f 0320 	mvn.w	r3, #32
 8003ab6:	e380      	b.n	80041ba <mbedtls_aes_crypt_xts+0x77c>
    }

    /* Data units must be at least 16 bytes long. */
    if (length < 16) {
 8003ab8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003abc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b0f      	cmp	r3, #15
 8003ac4:	d802      	bhi.n	8003acc <mbedtls_aes_crypt_xts+0x8e>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8003ac6:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8003aca:	e376      	b.n	80041ba <mbedtls_aes_crypt_xts+0x77c>
    }

    /* NIST SP 800-38E disallows data units larger than 2**20 blocks. */
    if (length > (1 << 20) * 16) {
 8003acc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003ad0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ada:	d902      	bls.n	8003ae2 <mbedtls_aes_crypt_xts+0xa4>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8003adc:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8003ae0:	e36b      	b.n	80041ba <mbedtls_aes_crypt_xts+0x77c>
    }

    /* Compute the tweak. */
    ret = mbedtls_aes_crypt_ecb(&ctx->tweak, MBEDTLS_AES_ENCRYPT,
 8003ae2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003ae6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f503 708c 	add.w	r0, r3, #280	; 0x118
 8003af0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003af4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003af8:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	2101      	movs	r1, #1
 8003b00:	f7ff fddc 	bl	80036bc <mbedtls_aes_crypt_ecb>
 8003b04:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
                                data_unit, tweak);
    if (ret != 0) {
 8003b08:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8168 	beq.w	8003de2 <mbedtls_aes_crypt_xts+0x3a4>
        return ret;
 8003b12:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003b16:	e350      	b.n	80041ba <mbedtls_aes_crypt_xts+0x77c>
    }

    while (blocks--) {
        if (MBEDTLS_UNLIKELY(leftover && (mode == MBEDTLS_AES_DECRYPT) && blocks == 0)) {
 8003b18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00d      	beq.n	8003b46 <mbedtls_aes_crypt_xts+0x108>
 8003b2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003b2e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <mbedtls_aes_crypt_xts+0x108>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <mbedtls_aes_crypt_xts+0x10a>
 8003b46:	2300      	movs	r3, #0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d017      	beq.n	8003b7c <mbedtls_aes_crypt_xts+0x13e>
 8003b4c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00e      	beq.n	8003b7c <mbedtls_aes_crypt_xts+0x13e>
            /* We are on the last block in a decrypt operation that has
             * leftover bytes, so we need to use the next tweak for this block,
             * and this tweak for the leftover bytes. Save the current tweak for
             * the leftovers and then update the current tweak for use on this,
             * the last full block. */
            memcpy(prev_tweak, tweak, sizeof(tweak));
 8003b5e:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8003b62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            mbedtls_gf128mul_x_ble(tweak, tweak);
 8003b6c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003b70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fee5 	bl	8003946 <mbedtls_gf128mul_x_ble>
 8003b7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003b84:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003b88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b94:	2310      	movs	r3, #16
 8003b96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    size_t i = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for (; (i + 4) <= n; i += 4) {
 8003ba0:	e048      	b.n	8003c34 <mbedtls_aes_crypt_xts+0x1f6>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8003ba2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003ba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003baa:	4413      	add	r3, r2
 8003bac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003bb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8003bb8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003bbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bc0:	601a      	str	r2, [r3, #0]
    return r;
 8003bc2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003bc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8003bd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bd4:	440b      	add	r3, r1
 8003bd6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 8003be2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003be6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003bea:	6019      	str	r1, [r3, #0]
    return r;
 8003bec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003bf0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4053      	eors	r3, r2
 8003bf8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        mbedtls_put_unaligned_uint32(r + i, x);
 8003bfc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003c00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c04:	4413      	add	r3, r2
 8003c06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003c0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003c0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c12:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003c1c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c20:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8003c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c26:	601a      	str	r2, [r3, #0]
}
 8003c28:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8003c2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c2e:	3304      	adds	r3, #4
 8003c30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c38:	3304      	adds	r3, #4
 8003c3a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d2af      	bcs.n	8003ba2 <mbedtls_aes_crypt_xts+0x164>
    for (; i < n; i++) {
 8003c42:	e018      	b.n	8003c76 <mbedtls_aes_crypt_xts+0x238>
        r[i] = a[i] ^ b[i];
 8003c44:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c4c:	4413      	add	r3, r2
 8003c4e:	7819      	ldrb	r1, [r3, #0]
 8003c50:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003c54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c58:	4413      	add	r3, r2
 8003c5a:	781a      	ldrb	r2, [r3, #0]
 8003c5c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8003c60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c64:	4403      	add	r3, r0
 8003c66:	404a      	eors	r2, r1
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8003c6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c70:	3301      	adds	r3, #1
 8003c72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c76:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d8e0      	bhi.n	8003c44 <mbedtls_aes_crypt_xts+0x206>
}
 8003c82:	bf00      	nop
        }

        mbedtls_xor(tmp, input, tweak, 16);

        ret = mbedtls_aes_crypt_ecb(&ctx->crypt, mode, tmp, tmp);
 8003c84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003c88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c92:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003c96:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8003c9a:	f5a1 71a0 	sub.w	r1, r1, #320	; 0x140
 8003c9e:	6809      	ldr	r1, [r1, #0]
 8003ca0:	f7ff fd0c 	bl	80036bc <mbedtls_aes_crypt_ecb>
 8003ca4:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
        if (ret != 0) {
 8003ca8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <mbedtls_aes_crypt_xts+0x278>
            return ret;
 8003cb0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003cb4:	e281      	b.n	80041ba <mbedtls_aes_crypt_xts+0x77c>
 8003cb6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003cba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003cbe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003cc6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003cca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003cce:	2310      	movs	r3, #16
 8003cd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    size_t i = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (; (i + 4) <= n; i += 4) {
 8003cda:	e048      	b.n	8003d6e <mbedtls_aes_crypt_xts+0x330>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8003cdc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003ce0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8003cf2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003cf6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003cfa:	601a      	str	r2, [r3, #0]
    return r;
 8003cfc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003d00:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8003d0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d0e:	440b      	add	r3, r1
 8003d10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 8003d1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003d20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d24:	6019      	str	r1, [r3, #0]
    return r;
 8003d26:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4053      	eors	r3, r2
 8003d32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        mbedtls_put_unaligned_uint32(r + i, x);
 8003d36:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003d3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d3e:	4413      	add	r3, r2
 8003d40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d4c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d5a:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8003d5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d60:	601a      	str	r2, [r3, #0]
}
 8003d62:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8003d64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d68:	3304      	adds	r3, #4
 8003d6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d72:	3304      	adds	r3, #4
 8003d74:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d2af      	bcs.n	8003cdc <mbedtls_aes_crypt_xts+0x29e>
    for (; i < n; i++) {
 8003d7c:	e018      	b.n	8003db0 <mbedtls_aes_crypt_xts+0x372>
        r[i] = a[i] ^ b[i];
 8003d7e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d86:	4413      	add	r3, r2
 8003d88:	7819      	ldrb	r1, [r3, #0]
 8003d8a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d92:	4413      	add	r3, r2
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8003d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d9e:	4403      	add	r3, r0
 8003da0:	404a      	eors	r2, r1
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8003da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003daa:	3301      	adds	r3, #1
 8003dac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003db0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8003db4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d8e0      	bhi.n	8003d7e <mbedtls_aes_crypt_xts+0x340>
}
 8003dbc:	bf00      	nop
        }

        mbedtls_xor(output, tmp, tweak, 16);

        /* Update the tweak for the next block. */
        mbedtls_gf128mul_x_ble(tweak, tweak);
 8003dbe:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003dc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fdbc 	bl	8003946 <mbedtls_gf128mul_x_ble>

        output += 16;
 8003dce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003dd2:	3310      	adds	r3, #16
 8003dd4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        input += 16;
 8003dd8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003ddc:	3310      	adds	r3, #16
 8003dde:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    while (blocks--) {
 8003de2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003de6:	1e5a      	subs	r2, r3, #1
 8003de8:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f47f ae93 	bne.w	8003b18 <mbedtls_aes_crypt_xts+0xda>
    }

    if (leftover) {
 8003df2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 81de 	beq.w	80041b8 <mbedtls_aes_crypt_xts+0x77a>
        /* If we are on the leftover bytes in a decrypt operation, we need to
         * use the previous tweak for these bytes (as saved in prev_tweak). */
        unsigned char *t = mode == MBEDTLS_AES_DECRYPT ? prev_tweak : tweak;
 8003dfc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003e00:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <mbedtls_aes_crypt_xts+0x3d2>
 8003e0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003e0e:	e001      	b.n	8003e14 <mbedtls_aes_crypt_xts+0x3d6>
 8003e10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        /* We are now on the final part of the data unit, which doesn't divide
         * evenly by 16. It's time for ciphertext stealing. */
        size_t i;
        unsigned char *prev_output = output - 16;
 8003e18:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003e1c:	3b10      	subs	r3, #16
 8003e1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

        /* Copy ciphertext bytes from the previous block to our output for each
         * byte of ciphertext we won't steal. */
        for (i = 0; i < leftover; i++) {
 8003e22:	2300      	movs	r3, #0
 8003e24:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003e28:	e010      	b.n	8003e4c <mbedtls_aes_crypt_xts+0x40e>
            output[i] = prev_output[i];
 8003e2a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003e2e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003e32:	441a      	add	r2, r3
 8003e34:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8003e38:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003e3c:	440b      	add	r3, r1
 8003e3e:	7812      	ldrb	r2, [r2, #0]
 8003e40:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < leftover; i++) {
 8003e42:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003e46:	3301      	adds	r3, #1
 8003e48:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003e4c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8003e50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d3e8      	bcc.n	8003e2a <mbedtls_aes_crypt_xts+0x3ec>
 8003e58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e60:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003e64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003e68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    size_t i = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    for (; (i + 4) <= n; i += 4) {
 8003e7e:	e048      	b.n	8003f12 <mbedtls_aes_crypt_xts+0x4d4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8003e80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e88:	4413      	add	r3, r2
 8003e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8003e96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003e9a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003e9e:	601a      	str	r2, [r3, #0]
    return r;
 8003ea0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003ea4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8003eae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003eb2:	440b      	add	r3, r1
 8003eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003eb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 8003ec0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003ec4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ec8:	6019      	str	r1, [r3, #0]
    return r;
 8003eca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003ece:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4053      	eors	r3, r2
 8003ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        mbedtls_put_unaligned_uint32(r + i, x);
 8003eda:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ede:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ee8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ef0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003efa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003efe:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8003f00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f04:	601a      	str	r2, [r3, #0]
}
 8003f06:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8003f08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f16:	3304      	adds	r3, #4
 8003f18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d2af      	bcs.n	8003e80 <mbedtls_aes_crypt_xts+0x442>
    for (; i < n; i++) {
 8003f20:	e018      	b.n	8003f54 <mbedtls_aes_crypt_xts+0x516>
        r[i] = a[i] ^ b[i];
 8003f22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f2a:	4413      	add	r3, r2
 8003f2c:	7819      	ldrb	r1, [r3, #0]
 8003f2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f36:	4413      	add	r3, r2
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003f3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f42:	4403      	add	r3, r0
 8003f44:	404a      	eors	r2, r1
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8003f4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f4e:	3301      	adds	r3, #1
 8003f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f54:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d8e0      	bhi.n	8003f22 <mbedtls_aes_crypt_xts+0x4e4>
}
 8003f60:	bf00      	nop
        /* Copy the remainder of the input for this final round. */
        mbedtls_xor(tmp, input, t, leftover);

        /* Copy ciphertext bytes from the previous block for input in this
         * round. */
        mbedtls_xor(tmp + i, prev_output + i, t + i, 16 - i);
 8003f62:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003f66:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003f6a:	18d0      	adds	r0, r2, r3
 8003f6c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003f70:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003f74:	18d1      	adds	r1, r2, r3
 8003f76:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003f7a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003f7e:	441a      	add	r2, r3
 8003f80:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003f84:	f1c3 0310 	rsb	r3, r3, #16
 8003f88:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 8003f8c:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8003f90:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    size_t i = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    for (; (i + 4) <= n; i += 4) {
 8003f9e:	e048      	b.n	8004032 <mbedtls_aes_crypt_xts+0x5f4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8003fa0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003fa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fa8:	4413      	add	r3, r2
 8003faa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 8003fb6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fbe:	601a      	str	r2, [r3, #0]
    return r;
 8003fc0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8003fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fd2:	440b      	add	r3, r1
 8003fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 8003fe0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003fe4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003fe8:	6019      	str	r1, [r3, #0]
    return r;
 8003fea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003fee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4053      	eors	r3, r2
 8003ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        mbedtls_put_unaligned_uint32(r + i, x);
 8003ffa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004002:	4413      	add	r3, r2
 8004004:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004008:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800400c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004010:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800401a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800401e:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8004020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004024:	601a      	str	r2, [r3, #0]
}
 8004026:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8004028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800402c:	3304      	adds	r3, #4
 800402e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004036:	3304      	adds	r3, #4
 8004038:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800403c:	429a      	cmp	r2, r3
 800403e:	d2af      	bcs.n	8003fa0 <mbedtls_aes_crypt_xts+0x562>
    for (; i < n; i++) {
 8004040:	e018      	b.n	8004074 <mbedtls_aes_crypt_xts+0x636>
        r[i] = a[i] ^ b[i];
 8004042:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800404a:	4413      	add	r3, r2
 800404c:	7819      	ldrb	r1, [r3, #0]
 800404e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004056:	4413      	add	r3, r2
 8004058:	781a      	ldrb	r2, [r3, #0]
 800405a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800405e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004062:	4403      	add	r3, r0
 8004064:	404a      	eors	r2, r1
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800406a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800406e:	3301      	adds	r3, #1
 8004070:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004074:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8004078:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800407c:	429a      	cmp	r2, r3
 800407e:	d8e0      	bhi.n	8004042 <mbedtls_aes_crypt_xts+0x604>
}
 8004080:	bf00      	nop

        ret = mbedtls_aes_crypt_ecb(&ctx->crypt, mode, tmp, tmp);
 8004082:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004086:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004090:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004094:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8004098:	f5a1 71a0 	sub.w	r1, r1, #320	; 0x140
 800409c:	6809      	ldr	r1, [r1, #0]
 800409e:	f7ff fb0d 	bl	80036bc <mbedtls_aes_crypt_ecb>
 80040a2:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
        if (ret != 0) {
 80040a6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <mbedtls_aes_crypt_xts+0x676>
            return ret;
 80040ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80040b2:	e082      	b.n	80041ba <mbedtls_aes_crypt_xts+0x77c>
 80040b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80040b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80040c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040cc:	2310      	movs	r3, #16
 80040ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    size_t i = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    for (; (i + 4) <= n; i += 4) {
 80040d8:	e046      	b.n	8004168 <mbedtls_aes_crypt_xts+0x72a>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80040da:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80040de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040e2:	4413      	add	r3, r2
 80040e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 80040f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80040f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040f8:	601a      	str	r2, [r3, #0]
    return r;
 80040fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80040fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004108:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800410c:	440b      	add	r3, r1
 800410e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4619      	mov	r1, r3
    memcpy(&r, p, sizeof(r));
 800411a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800411e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004122:	6019      	str	r1, [r3, #0]
    return r;
 8004124:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004128:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4053      	eors	r3, r2
 8004130:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        mbedtls_put_unaligned_uint32(r + i, x);
 8004134:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004138:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800413c:	4413      	add	r3, r2
 800413e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004140:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004144:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004148:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004152:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004156:	681a      	ldr	r2, [r3, #0]
    memcpy(p, &x, sizeof(x));
 8004158:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800415a:	601a      	str	r2, [r3, #0]
}
 800415c:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800415e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004162:	3304      	adds	r3, #4
 8004164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800416c:	3304      	adds	r3, #4
 800416e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004172:	429a      	cmp	r2, r3
 8004174:	d2b1      	bcs.n	80040da <mbedtls_aes_crypt_xts+0x69c>
    for (; i < n; i++) {
 8004176:	e018      	b.n	80041aa <mbedtls_aes_crypt_xts+0x76c>
        r[i] = a[i] ^ b[i];
 8004178:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800417c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004180:	4413      	add	r3, r2
 8004182:	7819      	ldrb	r1, [r3, #0]
 8004184:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800418c:	4413      	add	r3, r2
 800418e:	781a      	ldrb	r2, [r3, #0]
 8004190:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004194:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004198:	4403      	add	r3, r0
 800419a:	404a      	eors	r2, r1
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80041a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041a4:	3301      	adds	r3, #1
 80041a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80041aa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80041ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d8e0      	bhi.n	8004178 <mbedtls_aes_crypt_xts+0x73a>
}
 80041b6:	bf00      	nop
        /* Write the result back to the previous block, overriding the previous
         * output we copied. */
        mbedtls_xor(prev_output, tmp, t, 16);
    }

    return 0;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd90      	pop	{r4, r7, pc}

080041c4 <mbedtls_aes_crypt_cfb128>:
                             size_t length,
                             size_t *iv_off,
                             unsigned char iv[16],
                             const unsigned char *input,
                             unsigned char *output)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
    int c;
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80041d2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80041d6:	61fb      	str	r3, [r7, #28]
    size_t n;

    if (mode != MBEDTLS_AES_ENCRYPT && mode != MBEDTLS_AES_DECRYPT) {
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d005      	beq.n	80041ea <mbedtls_aes_crypt_cfb128+0x26>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <mbedtls_aes_crypt_cfb128+0x26>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 80041e4:	f06f 0320 	mvn.w	r3, #32
 80041e8:	e071      	b.n	80042ce <mbedtls_aes_crypt_cfb128+0x10a>
    }

    n = *iv_off;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	61bb      	str	r3, [r7, #24]

    if (n > 15) {
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b0f      	cmp	r3, #15
 80041f4:	d902      	bls.n	80041fc <mbedtls_aes_crypt_cfb128+0x38>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 80041f6:	f06f 0320 	mvn.w	r3, #32
 80041fa:	e068      	b.n	80042ce <mbedtls_aes_crypt_cfb128+0x10a>
    }

    if (mode == MBEDTLS_AES_DECRYPT) {
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d156      	bne.n	80042b0 <mbedtls_aes_crypt_cfb128+0xec>
        while (length--) {
 8004202:	e02a      	b.n	800425a <mbedtls_aes_crypt_cfb128+0x96>
            if (n == 0) {
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <mbedtls_aes_crypt_cfb128+0x5a>
                ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800420e:	2101      	movs	r1, #1
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7ff fa53 	bl	80036bc <mbedtls_aes_crypt_ecb>
 8004216:	61f8      	str	r0, [r7, #28]
                if (ret != 0) {
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d153      	bne.n	80042c6 <mbedtls_aes_crypt_cfb128+0x102>
                    goto exit;
                }
            }

            c = *input++;
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	617b      	str	r3, [r7, #20]
            *output++ = (unsigned char) (c ^ iv[n]);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	b25a      	sxtb	r2, r3
 800422c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	440b      	add	r3, r1
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	b25b      	sxtb	r3, r3
 8004236:	4053      	eors	r3, r2
 8004238:	b259      	sxtb	r1, r3
 800423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	633a      	str	r2, [r7, #48]	; 0x30
 8004240:	b2ca      	uxtb	r2, r1
 8004242:	701a      	strb	r2, [r3, #0]
            iv[n] = (unsigned char) c;
 8004244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	4413      	add	r3, r2
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]

            n = (n + 1) & 0x0F;
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	3301      	adds	r3, #1
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	61bb      	str	r3, [r7, #24]
        while (length--) {
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	1e5a      	subs	r2, r3, #1
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1cf      	bne.n	8004204 <mbedtls_aes_crypt_cfb128+0x40>
 8004264:	e029      	b.n	80042ba <mbedtls_aes_crypt_cfb128+0xf6>
        }
    } else {
        while (length--) {
            if (n == 0) {
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <mbedtls_aes_crypt_cfb128+0xbc>
                ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004270:	2101      	movs	r1, #1
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff fa22 	bl	80036bc <mbedtls_aes_crypt_ecb>
 8004278:	61f8      	str	r0, [r7, #28]
                if (ret != 0) {
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d124      	bne.n	80042ca <mbedtls_aes_crypt_cfb128+0x106>
                    goto exit;
                }
            }

            iv[n] = *output++ = (unsigned char) (iv[n] ^ *input++);
 8004280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	4413      	add	r3, r2
 8004286:	7819      	ldrb	r1, [r3, #0]
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800428e:	781a      	ldrb	r2, [r3, #0]
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	1c58      	adds	r0, r3, #1
 8004294:	6338      	str	r0, [r7, #48]	; 0x30
 8004296:	404a      	eors	r2, r1
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	440a      	add	r2, r1
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	7013      	strb	r3, [r2, #0]

            n = (n + 1) & 0x0F;
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	3301      	adds	r3, #1
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	61bb      	str	r3, [r7, #24]
        while (length--) {
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	1e5a      	subs	r2, r3, #1
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1d5      	bne.n	8004266 <mbedtls_aes_crypt_cfb128+0xa2>
        }
    }

    *iv_off = n;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	601a      	str	r2, [r3, #0]
    ret = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	e002      	b.n	80042cc <mbedtls_aes_crypt_cfb128+0x108>
                    goto exit;
 80042c6:	bf00      	nop
 80042c8:	e000      	b.n	80042cc <mbedtls_aes_crypt_cfb128+0x108>
                    goto exit;
 80042ca:	bf00      	nop

exit:
    return ret;
 80042cc:	69fb      	ldr	r3, [r7, #28]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <mbedtls_aes_crypt_ofb>:
                          size_t length,
                          size_t *iv_off,
                          unsigned char iv[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b086      	sub	sp, #24
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
 80042e2:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
    size_t n;

    n = *iv_off;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	613b      	str	r3, [r7, #16]

    if (n > 15) {
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b0f      	cmp	r3, #15
 80042f2:	d922      	bls.n	800433a <mbedtls_aes_crypt_ofb+0x64>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 80042f4:	f06f 0320 	mvn.w	r3, #32
 80042f8:	e02a      	b.n	8004350 <mbedtls_aes_crypt_ofb+0x7a>
    }

    while (length--) {
        if (n == 0) {
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <mbedtls_aes_crypt_ofb+0x3e>
            ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	2101      	movs	r1, #1
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7ff f9d8 	bl	80036bc <mbedtls_aes_crypt_ecb>
 800430c:	6178      	str	r0, [r7, #20]
            if (ret != 0) {
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d11b      	bne.n	800434c <mbedtls_aes_crypt_ofb+0x76>
                goto exit;
            }
        }
        *output++ =  *input++ ^ iv[n];
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	623a      	str	r2, [r7, #32]
 800431a:	7819      	ldrb	r1, [r3, #0]
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4413      	add	r3, r2
 8004322:	781a      	ldrb	r2, [r3, #0]
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	1c58      	adds	r0, r3, #1
 8004328:	6278      	str	r0, [r7, #36]	; 0x24
 800432a:	404a      	eors	r2, r1
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]

        n = (n + 1) & 0x0F;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3301      	adds	r3, #1
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	613b      	str	r3, [r7, #16]
    while (length--) {
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	1e5a      	subs	r2, r3, #1
 800433e:	60ba      	str	r2, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1da      	bne.n	80042fa <mbedtls_aes_crypt_ofb+0x24>
    }

    *iv_off = n;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	e000      	b.n	800434e <mbedtls_aes_crypt_ofb+0x78>
                goto exit;
 800434c:	bf00      	nop

exit:
    return ret;
 800434e:	697b      	ldr	r3, [r7, #20]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <mbedtls_aes_crypt_ctr>:
                          size_t *nc_off,
                          unsigned char nonce_counter[16],
                          unsigned char stream_block[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b094      	sub	sp, #80	; 0x50
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8004366:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800436a:	64fb      	str	r3, [r7, #76]	; 0x4c

    size_t offset = *nc_off;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	64bb      	str	r3, [r7, #72]	; 0x48

    if (offset > 0x0F) {
 8004372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004374:	2b0f      	cmp	r3, #15
 8004376:	d902      	bls.n	800437e <mbedtls_aes_crypt_ctr+0x26>
        return MBEDTLS_ERR_AES_BAD_INPUT_DATA;
 8004378:	f06f 0320 	mvn.w	r3, #32
 800437c:	e086      	b.n	800448c <mbedtls_aes_crypt_ctr+0x134>
    }

    for (size_t i = 0; i < length;) {
 800437e:	2300      	movs	r3, #0
 8004380:	647b      	str	r3, [r7, #68]	; 0x44
 8004382:	e072      	b.n	800446a <mbedtls_aes_crypt_ctr+0x112>
        size_t n = 16;
 8004384:	2310      	movs	r3, #16
 8004386:	643b      	str	r3, [r7, #64]	; 0x40
        if (offset == 0) {
 8004388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10d      	bne.n	80043aa <mbedtls_aes_crypt_ctr+0x52>
            ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block);
 800438e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	2101      	movs	r1, #1
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff f991 	bl	80036bc <mbedtls_aes_crypt_ecb>
 800439a:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != 0) {
 800439c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d172      	bne.n	8004488 <mbedtls_aes_crypt_ctr+0x130>
                goto exit;
            }
            mbedtls_ctr_increment_counter(nonce_counter);
 80043a2:	6838      	ldr	r0, [r7, #0]
 80043a4:	f7fd fd54 	bl	8001e50 <mbedtls_ctr_increment_counter>
 80043a8:	e003      	b.n	80043b2 <mbedtls_aes_crypt_ctr+0x5a>
        } else {
            n -= offset;
 80043aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	643b      	str	r3, [r7, #64]	; 0x40
        }

        if (n > (length - i)) {
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d903      	bls.n	80043c6 <mbedtls_aes_crypt_ctr+0x6e>
            n = (length - i);
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	643b      	str	r3, [r7, #64]	; 0x40
        }
        mbedtls_xor(&output[i], &input[i], &stream_block[offset], n);
 80043c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ca:	18d1      	adds	r1, r2, r3
 80043cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043d0:	441a      	add	r2, r3
 80043d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80043d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d6:	4403      	add	r3, r0
 80043d8:	63f9      	str	r1, [r7, #60]	; 0x3c
 80043da:	63ba      	str	r2, [r7, #56]	; 0x38
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
 80043de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e0:	633b      	str	r3, [r7, #48]	; 0x30
    size_t i = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (; (i + 4) <= n; i += 4) {
 80043e6:	e01e      	b.n	8004426 <mbedtls_aes_crypt_ctr+0xce>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80043e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	4413      	add	r3, r2
 80043ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80043f4:	61bb      	str	r3, [r7, #24]
    return r;
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	440b      	add	r3, r1
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004404:	617b      	str	r3, [r7, #20]
    return r;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	4053      	eors	r3, r2
 800440a:	623b      	str	r3, [r7, #32]
        mbedtls_put_unaligned_uint32(r + i, x);
 800440c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	4413      	add	r3, r2
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	601a      	str	r2, [r3, #0]
}
 800441e:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	3304      	adds	r3, #4
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	3304      	adds	r3, #4
 800442a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442c:	429a      	cmp	r2, r3
 800442e:	d2db      	bcs.n	80043e8 <mbedtls_aes_crypt_ctr+0x90>
    for (; i < n; i++) {
 8004430:	e010      	b.n	8004454 <mbedtls_aes_crypt_ctr+0xfc>
        r[i] = a[i] ^ b[i];
 8004432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004436:	4413      	add	r3, r2
 8004438:	7819      	ldrb	r1, [r3, #0]
 800443a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443e:	4413      	add	r3, r2
 8004440:	781a      	ldrb	r2, [r3, #0]
 8004442:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	4403      	add	r3, r0
 8004448:	404a      	eors	r2, r1
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004450:	3301      	adds	r3, #1
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	429a      	cmp	r2, r3
 800445a:	d8ea      	bhi.n	8004432 <mbedtls_aes_crypt_ctr+0xda>
}
 800445c:	bf00      	nop
        // offset might be non-zero for the last block, but in that case, we don't use it again
        offset = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	64bb      	str	r3, [r7, #72]	; 0x48
        i += n;
 8004462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004466:	4413      	add	r3, r2
 8004468:	647b      	str	r3, [r7, #68]	; 0x44
    for (size_t i = 0; i < length;) {
 800446a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	d388      	bcc.n	8004384 <mbedtls_aes_crypt_ctr+0x2c>
    }

    // capture offset for future resumption
    *nc_off = (*nc_off + length) % 16;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4413      	add	r3, r2
 800447a:	f003 020f 	and.w	r2, r3, #15
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	601a      	str	r2, [r3, #0]

    ret = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004486:	e000      	b.n	800448a <mbedtls_aes_crypt_ctr+0x132>
                goto exit;
 8004488:	bf00      	nop

exit:
    return ret;
 800448a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800448c:	4618      	mov	r0, r3
 800448e:	3750      	adds	r7, #80	; 0x50
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <aria_p1>:
/* armcc5 --gnu defines __GNUC__ but doesn't support GNU's extended asm */
#if defined(__GNUC__) && \
    (!defined(__ARMCC_VERSION) || __ARMCC_VERSION >= 6000000) && \
    __ARM_ARCH >= 6
static inline uint32_t aria_p1(uint32_t x)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
    uint32_t r;
    __asm("rev16 %0, %1" : "=l" (r) : "l" (x));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	ba5b      	rev16	r3, r3
 80044a0:	60fb      	str	r3, [r7, #12]
    return r;
 80044a2:	68fb      	ldr	r3, [r7, #12]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <aria_a>:
 * half of App. B.1 in [1] in terms of 4-byte operators P1, P2, P3 and P4.
 * The implementation below uses only P1 and P2 as they are sufficient.
 */
static inline void aria_a(uint32_t *a, uint32_t *b,
                          uint32_t *c, uint32_t *d)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
    uint32_t ta, tb, tc;
    ta  =  *b;                      // 4567
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	61fb      	str	r3, [r7, #28]
    *b  =  *a;                      // 0123
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	601a      	str	r2, [r3, #0]
    *a  =  ARIA_P2(ta);             // 6745
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	ea4f 4233 	mov.w	r2, r3, ror #16
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	601a      	str	r2, [r3, #0]
    tb  =  ARIA_P2(*d);             // efcd
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	ea4f 4333 	mov.w	r3, r3, ror #16
 80044de:	61bb      	str	r3, [r7, #24]
    *d  =  ARIA_P1(*c);             // 98ba
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff ffd5 	bl	8004494 <aria_p1>
 80044ea:	4602      	mov	r2, r0
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	601a      	str	r2, [r3, #0]
    *c  =  ARIA_P1(tb);             // fedc
 80044f0:	69b8      	ldr	r0, [r7, #24]
 80044f2:	f7ff ffcf 	bl	8004494 <aria_p1>
 80044f6:	4602      	mov	r2, r0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]
    ta  ^= *d;                      // 4567+98ba
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	4053      	eors	r3, r2
 8004504:	61fb      	str	r3, [r7, #28]
    tc  =  ARIA_P2(*b);             // 2301
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	ea4f 4333 	mov.w	r3, r3, ror #16
 800450e:	617b      	str	r3, [r7, #20]
    ta  =  ARIA_P1(ta) ^ tc ^ *c;   // 2301+5476+89ab+fedc
 8004510:	69f8      	ldr	r0, [r7, #28]
 8004512:	f7ff ffbf 	bl	8004494 <aria_p1>
 8004516:	4602      	mov	r2, r0
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	405a      	eors	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4053      	eors	r3, r2
 8004522:	61fb      	str	r3, [r7, #28]
    tb  ^= ARIA_P2(*d);             // ba98+efcd
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	ea4f 4333 	mov.w	r3, r3, ror #16
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4053      	eors	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
    tc  ^= ARIA_P1(*a);             // 2301+7654
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ffac 	bl	8004494 <aria_p1>
 800453c:	4602      	mov	r2, r0
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	4053      	eors	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
    *b  ^= ta ^ tb;                 // 0123+2301+5476+89ab+ba98+efcd+fedc OUT
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	69f9      	ldr	r1, [r7, #28]
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	404b      	eors	r3, r1
 800454e:	405a      	eors	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	601a      	str	r2, [r3, #0]
    tb  =  ARIA_P2(tb) ^ ta;        // 2301+5476+89ab+98ba+cdef+fedc
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	ea4f 4333 	mov.w	r3, r3, ror #16
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	4053      	eors	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
    *a  ^= ARIA_P1(tb);             // 3210+4567+6745+89ab+98ba+dcfe+efcd OUT
 8004560:	69b8      	ldr	r0, [r7, #24]
 8004562:	f7ff ff97 	bl	8004494 <aria_p1>
 8004566:	4602      	mov	r2, r0
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	405a      	eors	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	601a      	str	r2, [r3, #0]
    ta  =  ARIA_P2(ta);             // 0123+7654+ab89+dcfe
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004578:	61fb      	str	r3, [r7, #28]
    *d  ^= ARIA_P1(ta) ^ tc;        // 1032+2301+6745+7654+98ba+ba98+cdef OUT
 800457a:	69f8      	ldr	r0, [r7, #28]
 800457c:	f7ff ff8a 	bl	8004494 <aria_p1>
 8004580:	4602      	mov	r2, r0
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	405a      	eors	r2, r3
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	405a      	eors	r2, r3
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	601a      	str	r2, [r3, #0]
    tc  =  ARIA_P2(tc);             // 0123+5476
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004596:	617b      	str	r3, [r7, #20]
    *c  ^= ARIA_P1(tc) ^ ta;        // 0123+1032+4567+7654+ab89+dcfe+fedc OUT
 8004598:	6978      	ldr	r0, [r7, #20]
 800459a:	f7ff ff7b 	bl	8004494 <aria_p1>
 800459e:	4602      	mov	r2, r0
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	405a      	eors	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	405a      	eors	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	601a      	str	r2, [r3, #0]
}
 80045ae:	bf00      	nop
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <aria_sl>:
 */
static inline void aria_sl(uint32_t *a, uint32_t *b,
                           uint32_t *c, uint32_t *d,
                           const uint8_t sa[256], const uint8_t sb[256],
                           const uint8_t sc[256], const uint8_t sd[256])
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	603b      	str	r3, [r7, #0]
    *a = ((uint32_t) sa[MBEDTLS_BYTE_0(*a)]) ^
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	461a      	mov	r2, r3
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	4413      	add	r3, r2
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*a)]) <<  8) ^
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	0a1b      	lsrs	r3, r3, #8
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	4619      	mov	r1, r3
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	440b      	add	r3, r1
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	021b      	lsls	r3, r3, #8
    *a = ((uint32_t) sa[MBEDTLS_BYTE_0(*a)]) ^
 80045e6:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*a)]) << 16) ^
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	4619      	mov	r1, r3
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	440b      	add	r3, r1
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*a)]) <<  8) ^
 80045fa:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*a)]) << 24);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0e1b      	lsrs	r3, r3, #24
 8004602:	b2db      	uxtb	r3, r3
 8004604:	4619      	mov	r1, r3
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	440b      	add	r3, r1
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*a)]) << 16) ^
 800460e:	405a      	eors	r2, r3
    *a = ((uint32_t) sa[MBEDTLS_BYTE_0(*a)]) ^
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	601a      	str	r2, [r3, #0]
    *b = ((uint32_t) sa[MBEDTLS_BYTE_0(*b)]) ^
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	461a      	mov	r2, r3
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	4413      	add	r3, r2
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*b)]) <<  8) ^
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	0a1b      	lsrs	r3, r3, #8
 800462a:	b2db      	uxtb	r3, r3
 800462c:	4619      	mov	r1, r3
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	440b      	add	r3, r1
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	021b      	lsls	r3, r3, #8
    *b = ((uint32_t) sa[MBEDTLS_BYTE_0(*b)]) ^
 8004636:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*b)]) << 16) ^
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	b2db      	uxtb	r3, r3
 8004640:	4619      	mov	r1, r3
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	440b      	add	r3, r1
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*b)]) <<  8) ^
 800464a:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*b)]) << 24);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	0e1b      	lsrs	r3, r3, #24
 8004652:	b2db      	uxtb	r3, r3
 8004654:	4619      	mov	r1, r3
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	440b      	add	r3, r1
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*b)]) << 16) ^
 800465e:	405a      	eors	r2, r3
    *b = ((uint32_t) sa[MBEDTLS_BYTE_0(*b)]) ^
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	601a      	str	r2, [r3, #0]
    *c = ((uint32_t) sa[MBEDTLS_BYTE_0(*c)]) ^
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	4413      	add	r3, r2
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*c)]) <<  8) ^
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	0a1b      	lsrs	r3, r3, #8
 800467a:	b2db      	uxtb	r3, r3
 800467c:	4619      	mov	r1, r3
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	440b      	add	r3, r1
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	021b      	lsls	r3, r3, #8
    *c = ((uint32_t) sa[MBEDTLS_BYTE_0(*c)]) ^
 8004686:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*c)]) << 16) ^
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	b2db      	uxtb	r3, r3
 8004690:	4619      	mov	r1, r3
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	440b      	add	r3, r1
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*c)]) <<  8) ^
 800469a:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*c)]) << 24);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	0e1b      	lsrs	r3, r3, #24
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	4619      	mov	r1, r3
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	440b      	add	r3, r1
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*c)]) << 16) ^
 80046ae:	405a      	eors	r2, r3
    *c = ((uint32_t) sa[MBEDTLS_BYTE_0(*c)]) ^
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	601a      	str	r2, [r3, #0]
    *d = ((uint32_t) sa[MBEDTLS_BYTE_0(*d)]) ^
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	4413      	add	r3, r2
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
         (((uint32_t) sb[MBEDTLS_BYTE_1(*d)]) <<  8) ^
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	0a1b      	lsrs	r3, r3, #8
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	4619      	mov	r1, r3
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	440b      	add	r3, r1
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	021b      	lsls	r3, r3, #8
    *d = ((uint32_t) sa[MBEDTLS_BYTE_0(*d)]) ^
 80046d6:	405a      	eors	r2, r3
         (((uint32_t) sc[MBEDTLS_BYTE_2(*d)]) << 16) ^
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0c1b      	lsrs	r3, r3, #16
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	4619      	mov	r1, r3
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	440b      	add	r3, r1
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[MBEDTLS_BYTE_1(*d)]) <<  8) ^
 80046ea:	405a      	eors	r2, r3
         (((uint32_t) sd[MBEDTLS_BYTE_3(*d)]) << 24);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	0e1b      	lsrs	r3, r3, #24
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	4619      	mov	r1, r3
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	440b      	add	r3, r1
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[MBEDTLS_BYTE_2(*d)]) << 16) ^
 80046fe:	405a      	eors	r2, r3
    *d = ((uint32_t) sa[MBEDTLS_BYTE_0(*d)]) ^
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	601a      	str	r2, [r3, #0]
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <aria_fo_xor>:
/*
 * Helper for key schedule: r = FO( p, k ) ^ x
 */
static void aria_fo_xor(uint32_t r[4], const uint32_t p[4],
                        const uint32_t k[4], const uint32_t x[4])
{
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b08d      	sub	sp, #52	; 0x34
 8004714:	af04      	add	r7, sp, #16
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
    uint32_t a, b, c, d;

    a = p[0] ^ k[0];
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4053      	eors	r3, r2
 8004728:	61fb      	str	r3, [r7, #28]
    b = p[1] ^ k[1];
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	3304      	adds	r3, #4
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3304      	adds	r3, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4053      	eors	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
    c = p[2] ^ k[2];
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3308      	adds	r3, #8
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3308      	adds	r3, #8
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4053      	eors	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
    d = p[3] ^ k[3];
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	330c      	adds	r3, #12
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	330c      	adds	r3, #12
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4053      	eors	r3, r2
 8004758:	613b      	str	r3, [r7, #16]

    aria_sl(&a, &b, &c, &d, aria_sb1, aria_sb2, aria_is1, aria_is2);
 800475a:	f107 0310 	add.w	r3, r7, #16
 800475e:	f107 0214 	add.w	r2, r7, #20
 8004762:	f107 0118 	add.w	r1, r7, #24
 8004766:	f107 001c 	add.w	r0, r7, #28
 800476a:	4c1b      	ldr	r4, [pc, #108]	; (80047d8 <aria_fo_xor+0xc8>)
 800476c:	9403      	str	r4, [sp, #12]
 800476e:	4c1b      	ldr	r4, [pc, #108]	; (80047dc <aria_fo_xor+0xcc>)
 8004770:	9402      	str	r4, [sp, #8]
 8004772:	4c1b      	ldr	r4, [pc, #108]	; (80047e0 <aria_fo_xor+0xd0>)
 8004774:	9401      	str	r4, [sp, #4]
 8004776:	4c1b      	ldr	r4, [pc, #108]	; (80047e4 <aria_fo_xor+0xd4>)
 8004778:	9400      	str	r4, [sp, #0]
 800477a:	f7ff ff1c 	bl	80045b6 <aria_sl>
    aria_a(&a, &b, &c, &d);
 800477e:	f107 0310 	add.w	r3, r7, #16
 8004782:	f107 0214 	add.w	r2, r7, #20
 8004786:	f107 0118 	add.w	r1, r7, #24
 800478a:	f107 001c 	add.w	r0, r7, #28
 800478e:	f7ff fe8f 	bl	80044b0 <aria_a>

    r[0] = a ^ x[0];
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	405a      	eors	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	601a      	str	r2, [r3, #0]
    r[1] = b ^ x[1];
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	3304      	adds	r3, #4
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3304      	adds	r3, #4
 80047aa:	404a      	eors	r2, r1
 80047ac:	601a      	str	r2, [r3, #0]
    r[2] = c ^ x[2];
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	3308      	adds	r3, #8
 80047b2:	6819      	ldr	r1, [r3, #0]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3308      	adds	r3, #8
 80047ba:	404a      	eors	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]
    r[3] = d ^ x[3];
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	330c      	adds	r3, #12
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	330c      	adds	r3, #12
 80047ca:	404a      	eors	r2, r1
 80047cc:	601a      	str	r2, [r3, #0]
}
 80047ce:	bf00      	nop
 80047d0:	3724      	adds	r7, #36	; 0x24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd90      	pop	{r4, r7, pc}
 80047d6:	bf00      	nop
 80047d8:	0801220c 	.word	0x0801220c
 80047dc:	0801210c 	.word	0x0801210c
 80047e0:	0801200c 	.word	0x0801200c
 80047e4:	08011f0c 	.word	0x08011f0c

080047e8 <aria_fe_xor>:
/*
 * Helper for key schedule: r = FE( p, k ) ^ x
 */
static void aria_fe_xor(uint32_t r[4], const uint32_t p[4],
                        const uint32_t k[4], const uint32_t x[4])
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b08d      	sub	sp, #52	; 0x34
 80047ec:	af04      	add	r7, sp, #16
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
    uint32_t a, b, c, d;

    a = p[0] ^ k[0];
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4053      	eors	r3, r2
 8004800:	61fb      	str	r3, [r7, #28]
    b = p[1] ^ k[1];
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3304      	adds	r3, #4
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4053      	eors	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
    c = p[2] ^ k[2];
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	3308      	adds	r3, #8
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3308      	adds	r3, #8
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4053      	eors	r3, r2
 8004820:	617b      	str	r3, [r7, #20]
    d = p[3] ^ k[3];
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	330c      	adds	r3, #12
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	330c      	adds	r3, #12
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4053      	eors	r3, r2
 8004830:	613b      	str	r3, [r7, #16]

    aria_sl(&a, &b, &c, &d, aria_is1, aria_is2, aria_sb1, aria_sb2);
 8004832:	f107 0310 	add.w	r3, r7, #16
 8004836:	f107 0214 	add.w	r2, r7, #20
 800483a:	f107 0118 	add.w	r1, r7, #24
 800483e:	f107 001c 	add.w	r0, r7, #28
 8004842:	4c1b      	ldr	r4, [pc, #108]	; (80048b0 <aria_fe_xor+0xc8>)
 8004844:	9403      	str	r4, [sp, #12]
 8004846:	4c1b      	ldr	r4, [pc, #108]	; (80048b4 <aria_fe_xor+0xcc>)
 8004848:	9402      	str	r4, [sp, #8]
 800484a:	4c1b      	ldr	r4, [pc, #108]	; (80048b8 <aria_fe_xor+0xd0>)
 800484c:	9401      	str	r4, [sp, #4]
 800484e:	4c1b      	ldr	r4, [pc, #108]	; (80048bc <aria_fe_xor+0xd4>)
 8004850:	9400      	str	r4, [sp, #0]
 8004852:	f7ff feb0 	bl	80045b6 <aria_sl>
    aria_a(&a, &b, &c, &d);
 8004856:	f107 0310 	add.w	r3, r7, #16
 800485a:	f107 0214 	add.w	r2, r7, #20
 800485e:	f107 0118 	add.w	r1, r7, #24
 8004862:	f107 001c 	add.w	r0, r7, #28
 8004866:	f7ff fe23 	bl	80044b0 <aria_a>

    r[0] = a ^ x[0];
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	405a      	eors	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	601a      	str	r2, [r3, #0]
    r[1] = b ^ x[1];
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	3304      	adds	r3, #4
 800487a:	6819      	ldr	r1, [r3, #0]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3304      	adds	r3, #4
 8004882:	404a      	eors	r2, r1
 8004884:	601a      	str	r2, [r3, #0]
    r[2] = c ^ x[2];
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	3308      	adds	r3, #8
 800488a:	6819      	ldr	r1, [r3, #0]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3308      	adds	r3, #8
 8004892:	404a      	eors	r2, r1
 8004894:	601a      	str	r2, [r3, #0]
    r[3] = d ^ x[3];
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	6819      	ldr	r1, [r3, #0]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	330c      	adds	r3, #12
 80048a2:	404a      	eors	r2, r1
 80048a4:	601a      	str	r2, [r3, #0]
}
 80048a6:	bf00      	nop
 80048a8:	3724      	adds	r7, #36	; 0x24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd90      	pop	{r4, r7, pc}
 80048ae:	bf00      	nop
 80048b0:	0801200c 	.word	0x0801200c
 80048b4:	08011f0c 	.word	0x08011f0c
 80048b8:	0801220c 	.word	0x0801220c
 80048bc:	0801210c 	.word	0x0801210c

080048c0 <aria_rot128>:
 * MBEDTLS_GET_UINT32_LE / MBEDTLS_PUT_UINT32_LE ) so we need to reverse
 * bytes here.
 */
static void aria_rot128(uint32_t r[4], const uint32_t a[4],
                        const uint32_t b[4], uint8_t n)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b089      	sub	sp, #36	; 0x24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	70fb      	strb	r3, [r7, #3]
    uint8_t i, j;
    uint32_t t, u;

    const uint8_t n1 = n % 32;              // bit offset
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	75fb      	strb	r3, [r7, #23]
    const uint8_t n2 = n1 ? 32 - n1 : 0;    // reverse bit offset
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d004      	beq.n	80048e6 <aria_rot128+0x26>
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
 80048de:	f1c3 0320 	rsb	r3, r3, #32
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	e000      	b.n	80048e8 <aria_rot128+0x28>
 80048e6:	2300      	movs	r3, #0
 80048e8:	75bb      	strb	r3, [r7, #22]

    j = (n / 32) % 4;                       // initial word offset
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	77bb      	strb	r3, [r7, #30]
    t = ARIA_P3(b[j]);                      // big endian
 80048f6:	7fbb      	ldrb	r3, [r7, #30]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	ba1b      	rev	r3, r3
 8004902:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < 4; i++) {
 8004904:	2300      	movs	r3, #0
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e030      	b.n	800496c <aria_rot128+0xac>
        j = (j + 1) % 4;                    // get next word, big endian
 800490a:	7fbb      	ldrb	r3, [r7, #30]
 800490c:	3301      	adds	r3, #1
 800490e:	425a      	negs	r2, r3
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	f002 0203 	and.w	r2, r2, #3
 8004918:	bf58      	it	pl
 800491a:	4253      	negpl	r3, r2
 800491c:	77bb      	strb	r3, [r7, #30]
        u = ARIA_P3(b[j]);
 800491e:	7fbb      	ldrb	r3, [r7, #30]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	ba1b      	rev	r3, r3
 800492a:	613b      	str	r3, [r7, #16]
        t <<= n1;                           // rotate
 800492c:	7dfb      	ldrb	r3, [r7, #23]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	61bb      	str	r3, [r7, #24]
        t |= u >> n2;
 8004936:	7dbb      	ldrb	r3, [r7, #22]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	fa22 f303 	lsr.w	r3, r2, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4313      	orrs	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        t = ARIA_P3(t);                     // back to little endian
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	ba1b      	rev	r3, r3
 8004948:	61bb      	str	r3, [r7, #24]
        r[i] = a[i] ^ t;                    // store
 800494a:	7ffb      	ldrb	r3, [r7, #31]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	4413      	add	r3, r2
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	7ffb      	ldrb	r3, [r7, #31]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	404a      	eors	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
        t = u;                              // move to next word
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < 4; i++) {
 8004966:	7ffb      	ldrb	r3, [r7, #31]
 8004968:	3301      	adds	r3, #1
 800496a:	77fb      	strb	r3, [r7, #31]
 800496c:	7ffb      	ldrb	r3, [r7, #31]
 800496e:	2b03      	cmp	r3, #3
 8004970:	d9cb      	bls.n	800490a <aria_rot128+0x4a>
    }
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	3724      	adds	r7, #36	; 0x24
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <mbedtls_aria_setkey_enc>:
/*
 * Set encryption key
 */
int mbedtls_aria_setkey_enc(mbedtls_aria_context *ctx,
                            const unsigned char *key, unsigned int keybits)
{
 8004980:	b5b0      	push	{r4, r5, r7, lr}
 8004982:	b0b2      	sub	sp, #200	; 0xc8
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
    /* round constant masks */
    const uint32_t rc[3][4] =
 800498c:	4ba5      	ldr	r3, [pc, #660]	; (8004c24 <mbedtls_aria_setkey_enc+0x2a4>)
 800498e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8004992:	461d      	mov	r5, r3
 8004994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800499a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800499c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80049a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };

    int i;
    uint32_t w[4][4], *w2;

    if (keybits != 128 && keybits != 192 && keybits != 256) {
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b80      	cmp	r3, #128	; 0x80
 80049a8:	d009      	beq.n	80049be <mbedtls_aria_setkey_enc+0x3e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2bc0      	cmp	r3, #192	; 0xc0
 80049ae:	d006      	beq.n	80049be <mbedtls_aria_setkey_enc+0x3e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b6:	d002      	beq.n	80049be <mbedtls_aria_setkey_enc+0x3e>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 80049b8:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 80049bc:	e12d      	b.n	8004c1a <mbedtls_aria_setkey_enc+0x29a>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80049c8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80049ca:	61fb      	str	r3, [r7, #28]
    return r;
 80049cc:	69fb      	ldr	r3, [r7, #28]
    }

    /* Copy key to W0 (and potential remainder to W1) */
    w[0][0] = MBEDTLS_GET_UINT32_LE(key,  0);
 80049ce:	633b      	str	r3, [r7, #48]	; 0x30
    w[0][1] = MBEDTLS_GET_UINT32_LE(key,  4);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	3304      	adds	r3, #4
 80049d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049dc:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80049de:	61bb      	str	r3, [r7, #24]
    return r;
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	637b      	str	r3, [r7, #52]	; 0x34
    w[0][2] = MBEDTLS_GET_UINT32_LE(key,  8);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	3308      	adds	r3, #8
 80049e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049f0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80049f2:	617b      	str	r3, [r7, #20]
    return r;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	63bb      	str	r3, [r7, #56]	; 0x38
    w[0][3] = MBEDTLS_GET_UINT32_LE(key, 12);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	330c      	adds	r3, #12
 80049fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a04:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004a06:	613b      	str	r3, [r7, #16]
    return r;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c

    memset(w[1], 0, 16);
 8004a0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a10:	3310      	adds	r3, #16
 8004a12:	2210      	movs	r2, #16
 8004a14:	2100      	movs	r1, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f00c f8d0 	bl	8010bbc <memset>
    if (keybits >= 192) {
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2bbf      	cmp	r3, #191	; 0xbf
 8004a20:	d913      	bls.n	8004a4a <mbedtls_aria_setkey_enc+0xca>
        w[1][0] = MBEDTLS_GET_UINT32_LE(key, 16);    // 192 bit key
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	3310      	adds	r3, #16
 8004a26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a2e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	643b      	str	r3, [r7, #64]	; 0x40
        w[1][1] = MBEDTLS_GET_UINT32_LE(key, 20);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	3314      	adds	r3, #20
 8004a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a42:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004a44:	623b      	str	r3, [r7, #32]
    return r;
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if (keybits == 256) {
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a50:	d113      	bne.n	8004a7a <mbedtls_aria_setkey_enc+0xfa>
        w[1][2] = MBEDTLS_GET_UINT32_LE(key, 24);    // 256 bit key
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	3318      	adds	r3, #24
 8004a56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a5e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	64bb      	str	r3, [r7, #72]	; 0x48
        w[1][3] = MBEDTLS_GET_UINT32_LE(key, 28);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	331c      	adds	r3, #28
 8004a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a72:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    i = (keybits - 128) >> 6;               // index: 0, 1, 2
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3b80      	subs	r3, #128	; 0x80
 8004a7e:	099b      	lsrs	r3, r3, #6
 8004a80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    ctx->nr = 12 + 2 * i;                   // no. rounds: 12, 14, 16
 8004a84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a88:	3306      	adds	r3, #6
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	701a      	strb	r2, [r3, #0]

    aria_fo_xor(w[1], w[0], rc[i], w[1]);   // W1 = FO(W0, CK1) ^ KR
 8004a94:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	441a      	add	r2, r3
 8004aa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004aa4:	f103 0410 	add.w	r4, r3, #16
 8004aa8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ab0:	f103 0010 	add.w	r0, r3, #16
 8004ab4:	4623      	mov	r3, r4
 8004ab6:	f7ff fe2b 	bl	8004710 <aria_fo_xor>
    i = i < 2 ? i + 1 : 0;
 8004aba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	dc03      	bgt.n	8004aca <mbedtls_aria_setkey_enc+0x14a>
 8004ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	e000      	b.n	8004acc <mbedtls_aria_setkey_enc+0x14c>
 8004aca:	2300      	movs	r3, #0
 8004acc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    aria_fe_xor(w[2], w[1], rc[i], w[0]);   // W2 = FE(W1, CK2) ^ W0
 8004ad0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	441a      	add	r2, r3
 8004adc:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004ae0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ae4:	f103 0110 	add.w	r1, r3, #16
 8004ae8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004aec:	f103 0020 	add.w	r0, r3, #32
 8004af0:	4623      	mov	r3, r4
 8004af2:	f7ff fe79 	bl	80047e8 <aria_fe_xor>
    i = i < 2 ? i + 1 : 0;
 8004af6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	dc03      	bgt.n	8004b06 <mbedtls_aria_setkey_enc+0x186>
 8004afe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b02:	3301      	adds	r3, #1
 8004b04:	e000      	b.n	8004b08 <mbedtls_aria_setkey_enc+0x188>
 8004b06:	2300      	movs	r3, #0
 8004b08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    aria_fo_xor(w[3], w[2], rc[i], w[1]);   // W3 = FO(W2, CK3) ^ W1
 8004b0c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	441a      	add	r2, r3
 8004b18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b1c:	f103 0410 	add.w	r4, r3, #16
 8004b20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b24:	f103 0120 	add.w	r1, r3, #32
 8004b28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b2c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004b30:	4623      	mov	r3, r4
 8004b32:	f7ff fded 	bl	8004710 <aria_fo_xor>

    for (i = 0; i < 4; i++) {               // create round keys
 8004b36:	2300      	movs	r3, #0
 8004b38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b3c:	e056      	b.n	8004bec <mbedtls_aria_setkey_enc+0x26c>
        w2 = w[(i + 1) & 3];
 8004b3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b42:	3301      	adds	r3, #1
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	4413      	add	r3, r2
 8004b50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        aria_rot128(ctx->rk[i], w[i], w2, 128 - 19);
 8004b54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	1d18      	adds	r0, r3, #4
 8004b60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	18d1      	adds	r1, r2, r3
 8004b6c:	236d      	movs	r3, #109	; 0x6d
 8004b6e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b72:	f7ff fea5 	bl	80048c0 <aria_rot128>
        aria_rot128(ctx->rk[i +  4], w[i], w2, 128 - 31);
 8004b76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	1d18      	adds	r0, r3, #4
 8004b84:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	18d1      	adds	r1, r2, r3
 8004b90:	2361      	movs	r3, #97	; 0x61
 8004b92:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b96:	f7ff fe93 	bl	80048c0 <aria_rot128>
        aria_rot128(ctx->rk[i +  8], w[i], w2,       61);
 8004b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b9e:	3308      	adds	r3, #8
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	1d18      	adds	r0, r3, #4
 8004ba8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004bac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	18d1      	adds	r1, r2, r3
 8004bb4:	233d      	movs	r3, #61	; 0x3d
 8004bb6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bba:	f7ff fe81 	bl	80048c0 <aria_rot128>
        aria_rot128(ctx->rk[i + 12], w[i], w2,       31);
 8004bbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4413      	add	r3, r2
 8004bca:	1d18      	adds	r0, r3, #4
 8004bcc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	18d1      	adds	r1, r2, r3
 8004bd8:	231f      	movs	r3, #31
 8004bda:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bde:	f7ff fe6f 	bl	80048c0 <aria_rot128>
    for (i = 0; i < 4; i++) {               // create round keys
 8004be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004be6:	3301      	adds	r3, #1
 8004be8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	dda4      	ble.n	8004b3e <mbedtls_aria_setkey_enc+0x1be>
    }
    aria_rot128(ctx->rk[16], w[0], w[1], 19);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8004bfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bfe:	f103 0210 	add.w	r2, r3, #16
 8004c02:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004c06:	2313      	movs	r3, #19
 8004c08:	f7ff fe5a 	bl	80048c0 <aria_rot128>

    /* w holds enough info to reconstruct the round keys */
    mbedtls_platform_zeroize(w, sizeof(w));
 8004c0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c10:	2140      	movs	r1, #64	; 0x40
 8004c12:	4618      	mov	r0, r3
 8004c14:	f006 fd50 	bl	800b6b8 <mbedtls_platform_zeroize>

    return 0;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	37c8      	adds	r7, #200	; 0xc8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bdb0      	pop	{r4, r5, r7, pc}
 8004c22:	bf00      	nop
 8004c24:	080118bc 	.word	0x080118bc

08004c28 <mbedtls_aria_setkey_dec>:
 * Set decryption key
 */
#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
int mbedtls_aria_setkey_dec(mbedtls_aria_context *ctx,
                            const unsigned char *key, unsigned int keybits)
{
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b08b      	sub	sp, #44	; 0x2c
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
    int i, j, k, ret;

    ret = mbedtls_aria_setkey_enc(ctx, key, keybits);
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff fea1 	bl	8004980 <mbedtls_aria_setkey_enc>
 8004c3e:	61b8      	str	r0, [r7, #24]
    if (ret != 0) {
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <mbedtls_aria_setkey_dec+0x22>
        return ret;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	e061      	b.n	8004d0e <mbedtls_aria_setkey_dec+0xe6>
    }

    /* flip the order of round keys */
    for (i = 0, j = ctx->nr; i < j; i++, j--) {
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	623b      	str	r3, [r7, #32]
 8004c54:	e030      	b.n	8004cb8 <mbedtls_aria_setkey_dec+0x90>
        for (k = 0; k < 4; k++) {
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	e024      	b.n	8004ca6 <mbedtls_aria_setkey_dec+0x7e>
            uint32_t t = ctx->rk[i][k];
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	0099      	lsls	r1, r3, #2
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	440b      	add	r3, r1
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	617b      	str	r3, [r7, #20]
            ctx->rk[i][k] = ctx->rk[j][k];
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	0099      	lsls	r1, r3, #2
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	440b      	add	r3, r1
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	68f9      	ldr	r1, [r7, #12]
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	0098      	lsls	r0, r3, #2
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4403      	add	r3, r0
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	605a      	str	r2, [r3, #4]
            ctx->rk[j][k] = t;
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	0099      	lsls	r1, r3, #2
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	440b      	add	r3, r1
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	605a      	str	r2, [r3, #4]
        for (k = 0; k < 4; k++) {
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	ddd7      	ble.n	8004c5c <mbedtls_aria_setkey_dec+0x34>
    for (i = 0, j = ctx->nr; i < j; i++, j--) {
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	3301      	adds	r3, #1
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	623b      	str	r3, [r7, #32]
 8004cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	dbca      	blt.n	8004c56 <mbedtls_aria_setkey_dec+0x2e>
        }
    }

    /* apply affine transform to middle keys */
    for (i = 1; i < ctx->nr; i++) {
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc4:	e01c      	b.n	8004d00 <mbedtls_aria_setkey_dec+0xd8>
        aria_a(&ctx->rk[i][0], &ctx->rk[i][1],
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4413      	add	r3, r2
 8004cce:	1d18      	adds	r0, r3, #4
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4413      	add	r3, r2
 8004cda:	1d19      	adds	r1, r3, #4
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	1d1c      	adds	r4, r3, #4
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	330c      	adds	r3, #12
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	f7ff fbdb 	bl	80044b0 <aria_a>
    for (i = 1; i < ctx->nr; i++) {
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	dbdc      	blt.n	8004cc6 <mbedtls_aria_setkey_dec+0x9e>
               &ctx->rk[i][2], &ctx->rk[i][3]);
    }

    return 0;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	372c      	adds	r7, #44	; 0x2c
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd90      	pop	{r4, r7, pc}
	...

08004d18 <mbedtls_aria_crypt_ecb>:
 * Encrypt a block
 */
int mbedtls_aria_crypt_ecb(mbedtls_aria_context *ctx,
                           const unsigned char input[MBEDTLS_ARIA_BLOCKSIZE],
                           unsigned char output[MBEDTLS_ARIA_BLOCKSIZE])
{
 8004d18:	b590      	push	{r4, r7, lr}
 8004d1a:	b09f      	sub	sp, #124	; 0x7c
 8004d1c:	af04      	add	r7, sp, #16
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	657b      	str	r3, [r7, #84]	; 0x54
 8004d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d2a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004d2c:	623b      	str	r3, [r7, #32]
    return r;
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
    int i;

    uint32_t a, b, c, d;

    a = MBEDTLS_GET_UINT32_LE(input,  0);
 8004d30:	643b      	str	r3, [r7, #64]	; 0x40
    b = MBEDTLS_GET_UINT32_LE(input,  4);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	3304      	adds	r3, #4
 8004d36:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d3a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004d3c:	61fb      	str	r3, [r7, #28]
    return r;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	63fb      	str	r3, [r7, #60]	; 0x3c
    c = MBEDTLS_GET_UINT32_LE(input,  8);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	3308      	adds	r3, #8
 8004d46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d4a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004d4c:	61bb      	str	r3, [r7, #24]
    return r;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	63bb      	str	r3, [r7, #56]	; 0x38
    d = MBEDTLS_GET_UINT32_LE(input, 12);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	330c      	adds	r3, #12
 8004d56:	663b      	str	r3, [r7, #96]	; 0x60
 8004d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d5a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004d5c:	617b      	str	r3, [r7, #20]
    return r;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	637b      	str	r3, [r7, #52]	; 0x34

    i = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	667b      	str	r3, [r7, #100]	; 0x64
    while (1) {
        a ^= ctx->rk[i][0];
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3304      	adds	r3, #4
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d74:	4053      	eors	r3, r2
 8004d76:	643b      	str	r3, [r7, #64]	; 0x40
        b ^= ctx->rk[i][1];
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	4413      	add	r3, r2
 8004d80:	3308      	adds	r3, #8
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d86:	4053      	eors	r3, r2
 8004d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        c ^= ctx->rk[i][2];
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	4413      	add	r3, r2
 8004d92:	330c      	adds	r3, #12
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	4053      	eors	r3, r2
 8004d9a:	63bb      	str	r3, [r7, #56]	; 0x38
        d ^= ctx->rk[i][3];
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	4413      	add	r3, r2
 8004da4:	3310      	adds	r3, #16
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004daa:	4053      	eors	r3, r2
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
        i++;
 8004dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004db0:	3301      	adds	r3, #1
 8004db2:	667b      	str	r3, [r7, #100]	; 0x64

        aria_sl(&a, &b, &c, &d, aria_sb1, aria_sb2, aria_is1, aria_is2);
 8004db4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004db8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004dbc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004dc0:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8004dc4:	4c56      	ldr	r4, [pc, #344]	; (8004f20 <mbedtls_aria_crypt_ecb+0x208>)
 8004dc6:	9403      	str	r4, [sp, #12]
 8004dc8:	4c56      	ldr	r4, [pc, #344]	; (8004f24 <mbedtls_aria_crypt_ecb+0x20c>)
 8004dca:	9402      	str	r4, [sp, #8]
 8004dcc:	4c56      	ldr	r4, [pc, #344]	; (8004f28 <mbedtls_aria_crypt_ecb+0x210>)
 8004dce:	9401      	str	r4, [sp, #4]
 8004dd0:	4c56      	ldr	r4, [pc, #344]	; (8004f2c <mbedtls_aria_crypt_ecb+0x214>)
 8004dd2:	9400      	str	r4, [sp, #0]
 8004dd4:	f7ff fbef 	bl	80045b6 <aria_sl>
        aria_a(&a, &b, &c, &d);
 8004dd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ddc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004de0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004de4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8004de8:	f7ff fb62 	bl	80044b0 <aria_a>

        a ^= ctx->rk[i][0];
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	4413      	add	r3, r2
 8004df4:	3304      	adds	r3, #4
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dfa:	4053      	eors	r3, r2
 8004dfc:	643b      	str	r3, [r7, #64]	; 0x40
        b ^= ctx->rk[i][1];
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	4413      	add	r3, r2
 8004e06:	3308      	adds	r3, #8
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0c:	4053      	eors	r3, r2
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        c ^= ctx->rk[i][2];
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	4413      	add	r3, r2
 8004e18:	330c      	adds	r3, #12
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	4053      	eors	r3, r2
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
        d ^= ctx->rk[i][3];
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	4413      	add	r3, r2
 8004e2a:	3310      	adds	r3, #16
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e30:	4053      	eors	r3, r2
 8004e32:	637b      	str	r3, [r7, #52]	; 0x34
        i++;
 8004e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e36:	3301      	adds	r3, #1
 8004e38:	667b      	str	r3, [r7, #100]	; 0x64

        aria_sl(&a, &b, &c, &d, aria_is1, aria_is2, aria_sb1, aria_sb2);
 8004e3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e3e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004e42:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004e46:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8004e4a:	4c37      	ldr	r4, [pc, #220]	; (8004f28 <mbedtls_aria_crypt_ecb+0x210>)
 8004e4c:	9403      	str	r4, [sp, #12]
 8004e4e:	4c37      	ldr	r4, [pc, #220]	; (8004f2c <mbedtls_aria_crypt_ecb+0x214>)
 8004e50:	9402      	str	r4, [sp, #8]
 8004e52:	4c33      	ldr	r4, [pc, #204]	; (8004f20 <mbedtls_aria_crypt_ecb+0x208>)
 8004e54:	9401      	str	r4, [sp, #4]
 8004e56:	4c33      	ldr	r4, [pc, #204]	; (8004f24 <mbedtls_aria_crypt_ecb+0x20c>)
 8004e58:	9400      	str	r4, [sp, #0]
 8004e5a:	f7ff fbac 	bl	80045b6 <aria_sl>
        if (i >= ctx->nr) {
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e66:	4293      	cmp	r3, r2
 8004e68:	da0a      	bge.n	8004e80 <mbedtls_aria_crypt_ecb+0x168>
            break;
        }
        aria_a(&a, &b, &c, &d);
 8004e6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004e72:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004e76:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8004e7a:	f7ff fb19 	bl	80044b0 <aria_a>
        a ^= ctx->rk[i][0];
 8004e7e:	e772      	b.n	8004d66 <mbedtls_aria_crypt_ecb+0x4e>
            break;
 8004e80:	bf00      	nop
    }

    /* final key mixing */
    a ^= ctx->rk[i][0];
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	4413      	add	r3, r2
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e90:	4053      	eors	r3, r2
 8004e92:	643b      	str	r3, [r7, #64]	; 0x40
    b ^= ctx->rk[i][1];
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea2:	4053      	eors	r3, r2
 8004ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
    c ^= ctx->rk[i][2];
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	4413      	add	r3, r2
 8004eae:	330c      	adds	r3, #12
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	4053      	eors	r3, r2
 8004eb6:	63bb      	str	r3, [r7, #56]	; 0x38
    d ^= ctx->rk[i][3];
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3310      	adds	r3, #16
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec6:	4053      	eors	r3, r2
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34

    MBEDTLS_PUT_UINT32_LE(a, output,  0);
 8004eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	653a      	str	r2, [r7, #80]	; 0x50
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 8004ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed6:	601a      	str	r2, [r3, #0]
}
 8004ed8:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(b, output,  4);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	1d1a      	adds	r2, r3, #4
 8004ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 8004ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee8:	601a      	str	r2, [r3, #0]
}
 8004eea:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(c, output,  8);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f103 0208 	add.w	r2, r3, #8
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    memcpy(p, &x, sizeof(x));
 8004efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004efc:	601a      	str	r2, [r3, #0]
}
 8004efe:	bf00      	nop
    MBEDTLS_PUT_UINT32_LE(d, output, 12);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f103 020c 	add.w	r2, r3, #12
 8004f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f08:	647a      	str	r2, [r7, #68]	; 0x44
 8004f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    memcpy(p, &x, sizeof(x));
 8004f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f10:	601a      	str	r2, [r3, #0]
}
 8004f12:	bf00      	nop

    return 0;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	376c      	adds	r7, #108	; 0x6c
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd90      	pop	{r4, r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	0801220c 	.word	0x0801220c
 8004f24:	0801210c 	.word	0x0801210c
 8004f28:	0801200c 	.word	0x0801200c
 8004f2c:	08011f0c 	.word	0x08011f0c

08004f30 <mbedtls_aria_init>:

/* Initialize context */
void mbedtls_aria_init(mbedtls_aria_context *ctx)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_aria_context));
 8004f38:	f44f 728a 	mov.w	r2, #276	; 0x114
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f00b fe3c 	bl	8010bbc <memset>
}
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <mbedtls_aria_free>:

/* Clear context */
void mbedtls_aria_free(mbedtls_aria_context *ctx)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <mbedtls_aria_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_aria_context));
 8004f5a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f006 fbaa 	bl	800b6b8 <mbedtls_platform_zeroize>
 8004f64:	e000      	b.n	8004f68 <mbedtls_aria_free+0x1c>
        return;
 8004f66:	bf00      	nop
}
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <mbedtls_aria_crypt_cbc>:
                           int mode,
                           size_t length,
                           unsigned char iv[MBEDTLS_ARIA_BLOCKSIZE],
                           const unsigned char *input,
                           unsigned char *output)
{
 8004f6e:	b5b0      	push	{r4, r5, r7, lr}
 8004f70:	b0a0      	sub	sp, #128	; 0x80
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	603b      	str	r3, [r7, #0]
    unsigned char temp[MBEDTLS_ARIA_BLOCKSIZE];

    if ((mode != MBEDTLS_ARIA_ENCRYPT) && (mode != MBEDTLS_ARIA_DECRYPT)) {
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d005      	beq.n	8004f8e <mbedtls_aria_crypt_cbc+0x20>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <mbedtls_aria_crypt_cbc+0x20>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 8004f88:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 8004f8c:	e0e4      	b.n	8005158 <mbedtls_aria_crypt_cbc+0x1ea>
    }

    if (length % MBEDTLS_ARIA_BLOCKSIZE) {
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <mbedtls_aria_crypt_cbc+0x30>
        return MBEDTLS_ERR_ARIA_INVALID_INPUT_LENGTH;
 8004f98:	f06f 035d 	mvn.w	r3, #93	; 0x5d
 8004f9c:	e0dc      	b.n	8005158 <mbedtls_aria_crypt_cbc+0x1ea>
    }

    if (mode == MBEDTLS_ARIA_DECRYPT) {
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f040 80d5 	bne.w	8005150 <mbedtls_aria_crypt_cbc+0x1e2>
        while (length > 0) {
 8004fa6:	e06d      	b.n	8005084 <mbedtls_aria_crypt_cbc+0x116>
            memcpy(temp, input, MBEDTLS_ARIA_BLOCKSIZE);
 8004fa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	6859      	ldr	r1, [r3, #4]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aria_crypt_ecb(ctx, input, output);
 8004fba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004fbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7ff fea8 	bl	8004d18 <mbedtls_aria_crypt_ecb>
 8004fc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	677b      	str	r3, [r7, #116]	; 0x74
 8004fd8:	2310      	movs	r3, #16
 8004fda:	673b      	str	r3, [r7, #112]	; 0x70
    size_t i = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (; (i + 4) <= n; i += 4) {
 8004fe0:	e01e      	b.n	8005020 <mbedtls_aria_crypt_cbc+0xb2>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8004fe2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe6:	4413      	add	r3, r2
 8004fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fec:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004fee:	61bb      	str	r3, [r7, #24]
    return r;
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff6:	440b      	add	r3, r1
 8004ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8004ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ffc:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8004ffe:	617b      	str	r3, [r7, #20]
    return r;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4053      	eors	r3, r2
 8005004:	663b      	str	r3, [r7, #96]	; 0x60
        mbedtls_put_unaligned_uint32(r + i, x);
 8005006:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500a:	4413      	add	r3, r2
 800500c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800500e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 8005014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005016:	601a      	str	r2, [r3, #0]
}
 8005018:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800501a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501c:	3304      	adds	r3, #4
 800501e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005022:	3304      	adds	r3, #4
 8005024:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005026:	429a      	cmp	r2, r3
 8005028:	d2db      	bcs.n	8004fe2 <mbedtls_aria_crypt_cbc+0x74>
    for (; i < n; i++) {
 800502a:	e010      	b.n	800504e <mbedtls_aria_crypt_cbc+0xe0>
        r[i] = a[i] ^ b[i];
 800502c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800502e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005030:	4413      	add	r3, r2
 8005032:	7819      	ldrb	r1, [r3, #0]
 8005034:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005038:	4413      	add	r3, r2
 800503a:	781a      	ldrb	r2, [r3, #0]
 800503c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800503e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005040:	4403      	add	r3, r0
 8005042:	404a      	eors	r2, r1
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8005048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504a:	3301      	adds	r3, #1
 800504c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800504e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005052:	429a      	cmp	r2, r3
 8005054:	d8ea      	bhi.n	800502c <mbedtls_aria_crypt_cbc+0xbe>
}
 8005056:	bf00      	nop

            mbedtls_xor(output, output, iv, MBEDTLS_ARIA_BLOCKSIZE);

            memcpy(iv, temp, MBEDTLS_ARIA_BLOCKSIZE);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	461d      	mov	r5, r3
 800505c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005062:	6028      	str	r0, [r5, #0]
 8005064:	6069      	str	r1, [r5, #4]
 8005066:	60aa      	str	r2, [r5, #8]
 8005068:	60eb      	str	r3, [r5, #12]

            input  += MBEDTLS_ARIA_BLOCKSIZE;
 800506a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800506e:	3310      	adds	r3, #16
 8005070:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            output += MBEDTLS_ARIA_BLOCKSIZE;
 8005074:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005078:	3310      	adds	r3, #16
 800507a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            length -= MBEDTLS_ARIA_BLOCKSIZE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3b10      	subs	r3, #16
 8005082:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d18e      	bne.n	8004fa8 <mbedtls_aria_crypt_cbc+0x3a>
 800508a:	e064      	b.n	8005156 <mbedtls_aria_crypt_cbc+0x1e8>
 800508c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005090:	65bb      	str	r3, [r7, #88]	; 0x58
 8005092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005096:	657b      	str	r3, [r7, #84]	; 0x54
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	653b      	str	r3, [r7, #80]	; 0x50
 800509c:	2310      	movs	r3, #16
 800509e:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t i = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	64bb      	str	r3, [r7, #72]	; 0x48
    for (; (i + 4) <= n; i += 4) {
 80050a4:	e01e      	b.n	80050e4 <mbedtls_aria_crypt_cbc+0x176>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80050a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050aa:	4413      	add	r3, r2
 80050ac:	647b      	str	r3, [r7, #68]	; 0x44
 80050ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 80050b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ba:	440b      	add	r3, r1
 80050bc:	643b      	str	r3, [r7, #64]	; 0x40
 80050be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80050c2:	623b      	str	r3, [r7, #32]
    return r;
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	4053      	eors	r3, r2
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        mbedtls_put_unaligned_uint32(r + i, x);
 80050ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ce:	4413      	add	r3, r2
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	601a      	str	r2, [r3, #0]
}
 80050dc:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80050de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e0:	3304      	adds	r3, #4
 80050e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e6:	3304      	adds	r3, #4
 80050e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d2db      	bcs.n	80050a6 <mbedtls_aria_crypt_cbc+0x138>
    for (; i < n; i++) {
 80050ee:	e010      	b.n	8005112 <mbedtls_aria_crypt_cbc+0x1a4>
        r[i] = a[i] ^ b[i];
 80050f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f4:	4413      	add	r3, r2
 80050f6:	7819      	ldrb	r1, [r3, #0]
 80050f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fc:	4413      	add	r3, r2
 80050fe:	781a      	ldrb	r2, [r3, #0]
 8005100:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005104:	4403      	add	r3, r0
 8005106:	404a      	eors	r2, r1
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800510c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800510e:	3301      	adds	r3, #1
 8005110:	64bb      	str	r3, [r7, #72]	; 0x48
 8005112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005116:	429a      	cmp	r2, r3
 8005118:	d8ea      	bhi.n	80050f0 <mbedtls_aria_crypt_cbc+0x182>
}
 800511a:	bf00      	nop
        }
    } else {
        while (length > 0) {
            mbedtls_xor(output, input, iv, MBEDTLS_ARIA_BLOCKSIZE);

            mbedtls_aria_crypt_ecb(ctx, output, output);
 800511c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005120:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff fdf7 	bl	8004d18 <mbedtls_aria_crypt_ecb>
            memcpy(iv, output, MBEDTLS_ARIA_BLOCKSIZE);
 800512a:	2210      	movs	r2, #16
 800512c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8005130:	6838      	ldr	r0, [r7, #0]
 8005132:	f00b fdce 	bl	8010cd2 <memcpy>

            input  += MBEDTLS_ARIA_BLOCKSIZE;
 8005136:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800513a:	3310      	adds	r3, #16
 800513c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            output += MBEDTLS_ARIA_BLOCKSIZE;
 8005140:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005144:	3310      	adds	r3, #16
 8005146:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            length -= MBEDTLS_ARIA_BLOCKSIZE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3b10      	subs	r3, #16
 800514e:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d19a      	bne.n	800508c <mbedtls_aria_crypt_cbc+0x11e>
        }
    }

    return 0;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3780      	adds	r7, #128	; 0x80
 800515c:	46bd      	mov	sp, r7
 800515e:	bdb0      	pop	{r4, r5, r7, pc}

08005160 <mbedtls_aria_crypt_cfb128>:
                              size_t length,
                              size_t *iv_off,
                              unsigned char iv[MBEDTLS_ARIA_BLOCKSIZE],
                              const unsigned char *input,
                              unsigned char *output)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
    unsigned char c;
    size_t n;

    if ((mode != MBEDTLS_ARIA_ENCRYPT) && (mode != MBEDTLS_ARIA_DECRYPT)) {
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d005      	beq.n	8005180 <mbedtls_aria_crypt_cfb128+0x20>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <mbedtls_aria_crypt_cfb128+0x20>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 800517a:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 800517e:	e05d      	b.n	800523c <mbedtls_aria_crypt_cfb128+0xdc>
    }

    n = *iv_off;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	617b      	str	r3, [r7, #20]

    /* An overly large value of n can lead to an unlimited
     * buffer overflow. */
    if (n >= MBEDTLS_ARIA_BLOCKSIZE) {
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b0f      	cmp	r3, #15
 800518a:	d902      	bls.n	8005192 <mbedtls_aria_crypt_cfb128+0x32>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 800518c:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 8005190:	e054      	b.n	800523c <mbedtls_aria_crypt_cfb128+0xdc>
    }

    if (mode == MBEDTLS_ARIA_DECRYPT) {
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d148      	bne.n	800522a <mbedtls_aria_crypt_cfb128+0xca>
        while (length--) {
 8005198:	e021      	b.n	80051de <mbedtls_aria_crypt_cfb128+0x7e>
            if (n == 0) {
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d104      	bne.n	80051aa <mbedtls_aria_crypt_cfb128+0x4a>
                mbedtls_aria_crypt_ecb(ctx, iv, iv);
 80051a0:	6a3a      	ldr	r2, [r7, #32]
 80051a2:	6a39      	ldr	r1, [r7, #32]
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f7ff fdb7 	bl	8004d18 <mbedtls_aria_crypt_ecb>
            }

            c = *input++;
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	627a      	str	r2, [r7, #36]	; 0x24
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	74fb      	strb	r3, [r7, #19]
            *output++ = c ^ iv[n];
 80051b4:	6a3a      	ldr	r2, [r7, #32]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	4413      	add	r3, r2
 80051ba:	7819      	ldrb	r1, [r3, #0]
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	62ba      	str	r2, [r7, #40]	; 0x28
 80051c2:	7cfa      	ldrb	r2, [r7, #19]
 80051c4:	404a      	eors	r2, r1
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
            iv[n] = c;
 80051ca:	6a3a      	ldr	r2, [r7, #32]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	4413      	add	r3, r2
 80051d0:	7cfa      	ldrb	r2, [r7, #19]
 80051d2:	701a      	strb	r2, [r3, #0]

            n = (n + 1) & 0x0F;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	3301      	adds	r3, #1
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	617b      	str	r3, [r7, #20]
        while (length--) {
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	1e5a      	subs	r2, r3, #1
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1d8      	bne.n	800519a <mbedtls_aria_crypt_cfb128+0x3a>
 80051e8:	e024      	b.n	8005234 <mbedtls_aria_crypt_cfb128+0xd4>
        }
    } else {
        while (length--) {
            if (n == 0) {
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <mbedtls_aria_crypt_cfb128+0x9a>
                mbedtls_aria_crypt_ecb(ctx, iv, iv);
 80051f0:	6a3a      	ldr	r2, [r7, #32]
 80051f2:	6a39      	ldr	r1, [r7, #32]
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f7ff fd8f 	bl	8004d18 <mbedtls_aria_crypt_ecb>
            }

            iv[n] = *output++ = (unsigned char) (iv[n] ^ *input++);
 80051fa:	6a3a      	ldr	r2, [r7, #32]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	4413      	add	r3, r2
 8005200:	7819      	ldrb	r1, [r3, #0]
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	627a      	str	r2, [r7, #36]	; 0x24
 8005208:	781a      	ldrb	r2, [r3, #0]
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	1c58      	adds	r0, r3, #1
 800520e:	62b8      	str	r0, [r7, #40]	; 0x28
 8005210:	404a      	eors	r2, r1
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	6a39      	ldr	r1, [r7, #32]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	440a      	add	r2, r1
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	7013      	strb	r3, [r2, #0]

            n = (n + 1) & 0x0F;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	3301      	adds	r3, #1
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	617b      	str	r3, [r7, #20]
        while (length--) {
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	1e5a      	subs	r2, r3, #1
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1da      	bne.n	80051ea <mbedtls_aria_crypt_cfb128+0x8a>
        }
    }

    *iv_off = n;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	601a      	str	r2, [r3, #0]

    return 0;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <mbedtls_aria_crypt_ctr>:
                           size_t *nc_off,
                           unsigned char nonce_counter[MBEDTLS_ARIA_BLOCKSIZE],
                           unsigned char stream_block[MBEDTLS_ARIA_BLOCKSIZE],
                           const unsigned char *input,
                           unsigned char *output)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
    int c, i;
    size_t n;

    n = *nc_off;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	61bb      	str	r3, [r7, #24]
    /* An overly large value of n can lead to an unlimited
     * buffer overflow. */
    if (n >= MBEDTLS_ARIA_BLOCKSIZE) {
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b0f      	cmp	r3, #15
 800525c:	d938      	bls.n	80052d0 <mbedtls_aria_crypt_ctr+0x8c>
        return MBEDTLS_ERR_ARIA_BAD_INPUT_DATA;
 800525e:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 8005262:	e03e      	b.n	80052e2 <mbedtls_aria_crypt_ctr+0x9e>
    }

    while (length--) {
        if (n == 0) {
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d11a      	bne.n	80052a0 <mbedtls_aria_crypt_ctr+0x5c>
            mbedtls_aria_crypt_ecb(ctx, nonce_counter,
 800526a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800526c:	6839      	ldr	r1, [r7, #0]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff fd52 	bl	8004d18 <mbedtls_aria_crypt_ecb>
                                   stream_block);

            for (i = MBEDTLS_ARIA_BLOCKSIZE; i > 0; i--) {
 8005274:	2310      	movs	r3, #16
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	e00d      	b.n	8005296 <mbedtls_aria_crypt_ctr+0x52>
                if (++nonce_counter[i - 1] != 0) {
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	3b01      	subs	r3, #1
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	4413      	add	r3, r2
 8005282:	781a      	ldrb	r2, [r3, #0]
 8005284:	3201      	adds	r2, #1
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d106      	bne.n	800529e <mbedtls_aria_crypt_ctr+0x5a>
            for (i = MBEDTLS_ARIA_BLOCKSIZE; i > 0; i--) {
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	3b01      	subs	r3, #1
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	2b00      	cmp	r3, #0
 800529a:	dcee      	bgt.n	800527a <mbedtls_aria_crypt_ctr+0x36>
 800529c:	e000      	b.n	80052a0 <mbedtls_aria_crypt_ctr+0x5c>
                    break;
 800529e:	bf00      	nop
                }
            }
        }
        c = *input++;
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char) (c ^ stream_block[n]);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	b25a      	sxtb	r2, r3
 80052ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	440b      	add	r3, r1
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	b25b      	sxtb	r3, r3
 80052b8:	4053      	eors	r3, r2
 80052ba:	b259      	sxtb	r1, r3
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	633a      	str	r2, [r7, #48]	; 0x30
 80052c2:	b2ca      	uxtb	r2, r1
 80052c4:	701a      	strb	r2, [r3, #0]

        n = (n + 1) & 0x0F;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	3301      	adds	r3, #1
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	61bb      	str	r3, [r7, #24]
    while (length--) {
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	1e5a      	subs	r2, r3, #1
 80052d4:	60ba      	str	r2, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1c4      	bne.n	8005264 <mbedtls_aria_crypt_ctr+0x20>
    }

    *nc_off = n;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	601a      	str	r2, [r3, #0]

    return 0;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3720      	adds	r7, #32
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <camellia_feistel>:
        }                                                   \
    }

static void camellia_feistel(const uint32_t x[2], const uint32_t k[2],
                             uint32_t z[2])
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
    uint32_t I0, I1;
    I0 = x[0] ^ k[0];
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4053      	eors	r3, r2
 8005302:	617b      	str	r3, [r7, #20]
    I1 = x[1] ^ k[1];
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3304      	adds	r3, #4
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	3304      	adds	r3, #4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4053      	eors	r3, r2
 8005312:	613b      	str	r3, [r7, #16]

    I0 = ((uint32_t) SBOX1(MBEDTLS_BYTE_3(I0)) << 24) |
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	0e1b      	lsrs	r3, r3, #24
 8005318:	b2db      	uxtb	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	4b31      	ldr	r3, [pc, #196]	; (80053e4 <camellia_feistel+0xf8>)
 800531e:	5c9b      	ldrb	r3, [r3, r2]
 8005320:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX2(MBEDTLS_BYTE_2(I0)) << 16) |
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	0c1b      	lsrs	r3, r3, #16
 8005326:	b2db      	uxtb	r3, r3
 8005328:	4619      	mov	r1, r3
 800532a:	4b2f      	ldr	r3, [pc, #188]	; (80053e8 <camellia_feistel+0xfc>)
 800532c:	5c5b      	ldrb	r3, [r3, r1]
 800532e:	041b      	lsls	r3, r3, #16
    I0 = ((uint32_t) SBOX1(MBEDTLS_BYTE_3(I0)) << 24) |
 8005330:	431a      	orrs	r2, r3
         ((uint32_t) SBOX3(MBEDTLS_BYTE_1(I0)) <<  8) |
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	0a1b      	lsrs	r3, r3, #8
 8005336:	b2db      	uxtb	r3, r3
 8005338:	4619      	mov	r1, r3
 800533a:	4b2c      	ldr	r3, [pc, #176]	; (80053ec <camellia_feistel+0x100>)
 800533c:	5c5b      	ldrb	r3, [r3, r1]
 800533e:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX2(MBEDTLS_BYTE_2(I0)) << 16) |
 8005340:	4313      	orrs	r3, r2
         ((uint32_t) SBOX4(MBEDTLS_BYTE_0(I0)));
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	4611      	mov	r1, r2
 8005348:	4a29      	ldr	r2, [pc, #164]	; (80053f0 <camellia_feistel+0x104>)
 800534a:	5c52      	ldrb	r2, [r2, r1]
    I0 = ((uint32_t) SBOX1(MBEDTLS_BYTE_3(I0)) << 24) |
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
    I1 = ((uint32_t) SBOX2(MBEDTLS_BYTE_3(I1)) << 24) |
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	0e1b      	lsrs	r3, r3, #24
 8005354:	b2db      	uxtb	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	4b23      	ldr	r3, [pc, #140]	; (80053e8 <camellia_feistel+0xfc>)
 800535a:	5c9b      	ldrb	r3, [r3, r2]
 800535c:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX3(MBEDTLS_BYTE_2(I1)) << 16) |
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	0c1b      	lsrs	r3, r3, #16
 8005362:	b2db      	uxtb	r3, r3
 8005364:	4619      	mov	r1, r3
 8005366:	4b21      	ldr	r3, [pc, #132]	; (80053ec <camellia_feistel+0x100>)
 8005368:	5c5b      	ldrb	r3, [r3, r1]
 800536a:	041b      	lsls	r3, r3, #16
    I1 = ((uint32_t) SBOX2(MBEDTLS_BYTE_3(I1)) << 24) |
 800536c:	431a      	orrs	r2, r3
         ((uint32_t) SBOX4(MBEDTLS_BYTE_1(I1)) <<  8) |
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	0a1b      	lsrs	r3, r3, #8
 8005372:	b2db      	uxtb	r3, r3
 8005374:	4619      	mov	r1, r3
 8005376:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <camellia_feistel+0x104>)
 8005378:	5c5b      	ldrb	r3, [r3, r1]
 800537a:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX3(MBEDTLS_BYTE_2(I1)) << 16) |
 800537c:	4313      	orrs	r3, r2
         ((uint32_t) SBOX1(MBEDTLS_BYTE_0(I1)));
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	4611      	mov	r1, r2
 8005384:	4a17      	ldr	r2, [pc, #92]	; (80053e4 <camellia_feistel+0xf8>)
 8005386:	5c52      	ldrb	r2, [r2, r1]
    I1 = ((uint32_t) SBOX2(MBEDTLS_BYTE_3(I1)) << 24) |
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]

    I0 ^= (I1 << 8) | (I1 >> 24);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	ea4f 6333 	mov.w	r3, r3, ror #24
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4053      	eors	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 << 16) | (I0 >> 16);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	ea4f 4333 	mov.w	r3, r3, ror #16
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4053      	eors	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
    I0 ^= (I1 >> 8) | (I1 << 24);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4053      	eors	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 >> 8) | (I0 << 24);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4053      	eors	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]

    z[0] ^= I1;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	405a      	eors	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	601a      	str	r2, [r3, #0]
    z[1] ^= I0;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3304      	adds	r3, #4
 80053cc:	6819      	ldr	r1, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3304      	adds	r3, #4
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	404a      	eors	r2, r1
 80053d6:	601a      	str	r2, [r3, #0]
}
 80053d8:	bf00      	nop
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	0801233c 	.word	0x0801233c
 80053e8:	0801243c 	.word	0x0801243c
 80053ec:	0801253c 	.word	0x0801253c
 80053f0:	0801263c 	.word	0x0801263c

080053f4 <mbedtls_camellia_init>:

void mbedtls_camellia_init(mbedtls_camellia_context *ctx)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_camellia_context));
 80053fc:	f44f 728a 	mov.w	r2, #276	; 0x114
 8005400:	2100      	movs	r1, #0
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f00b fbda 	bl	8010bbc <memset>
}
 8005408:	bf00      	nop
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <mbedtls_camellia_free>:

void mbedtls_camellia_free(mbedtls_camellia_context *ctx)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <mbedtls_camellia_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_camellia_context));
 800541e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f006 f948 	bl	800b6b8 <mbedtls_platform_zeroize>
 8005428:	e000      	b.n	800542c <mbedtls_camellia_free+0x1c>
        return;
 800542a:	bf00      	nop
}
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <mbedtls_camellia_setkey_enc>:
 * Camellia key schedule (encryption)
 */
int mbedtls_camellia_setkey_enc(mbedtls_camellia_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b0ce      	sub	sp, #312	; 0x138
 8005438:	af00      	add	r7, sp, #0
 800543a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800543e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005442:	6018      	str	r0, [r3, #0]
 8005444:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544c:	6019      	str	r1, [r3, #0]
 800544e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005452:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005456:	601a      	str	r2, [r3, #0]
    unsigned char t[64];
    uint32_t SIGMA[6][2];
    uint32_t KC[16];
    uint32_t TK[20];

    RK = ctx->rk;
 8005458:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800545c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3304      	adds	r3, #4
 8005464:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    memset(t, 0, 64);
 8005468:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800546c:	2240      	movs	r2, #64	; 0x40
 800546e:	2100      	movs	r1, #0
 8005470:	4618      	mov	r0, r3
 8005472:	f00b fba3 	bl	8010bbc <memset>
    memset(RK, 0, sizeof(ctx->rk));
 8005476:	f44f 7288 	mov.w	r2, #272	; 0x110
 800547a:	2100      	movs	r1, #0
 800547c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005480:	f00b fb9c 	bl	8010bbc <memset>

    switch (keybits) {
 8005484:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005488:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005492:	d021      	beq.n	80054d8 <mbedtls_camellia_setkey_enc+0xa4>
 8005494:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005498:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a2:	d824      	bhi.n	80054ee <mbedtls_camellia_setkey_enc+0xba>
 80054a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80054a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b80      	cmp	r3, #128	; 0x80
 80054b0:	d007      	beq.n	80054c2 <mbedtls_camellia_setkey_enc+0x8e>
 80054b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80054b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2bc0      	cmp	r3, #192	; 0xc0
 80054be:	d00b      	beq.n	80054d8 <mbedtls_camellia_setkey_enc+0xa4>
 80054c0:	e015      	b.n	80054ee <mbedtls_camellia_setkey_enc+0xba>
        case 128: ctx->nr = 3; idx = 0; break;
 80054c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80054c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2203      	movs	r2, #3
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	2300      	movs	r3, #0
 80054d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80054d6:	e00e      	b.n	80054f6 <mbedtls_camellia_setkey_enc+0xc2>
        case 192:
        case 256: ctx->nr = 4; idx = 1; break;
 80054d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80054dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2204      	movs	r2, #4
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	2301      	movs	r3, #1
 80054e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80054ec:	e003      	b.n	80054f6 <mbedtls_camellia_setkey_enc+0xc2>
        default: return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 80054ee:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80054f2:	f000 be01 	b.w	80060f8 <mbedtls_camellia_setkey_enc+0xcc4>
    }

    for (i = 0; i < keybits / 8; ++i) {
 80054f6:	2300      	movs	r3, #0
 80054f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80054fc:	e014      	b.n	8005528 <mbedtls_camellia_setkey_enc+0xf4>
        t[i] = key[i];
 80054fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800550c:	4413      	add	r3, r2
 800550e:	7819      	ldrb	r1, [r3, #0]
 8005510:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8005514:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005518:	4413      	add	r3, r2
 800551a:	460a      	mov	r2, r1
 800551c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < keybits / 8; ++i) {
 800551e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005522:	3301      	adds	r3, #1
 8005524:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005528:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800552c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	08db      	lsrs	r3, r3, #3
 8005534:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005538:	429a      	cmp	r2, r3
 800553a:	d3e0      	bcc.n	80054fe <mbedtls_camellia_setkey_enc+0xca>
    }

    if (keybits == 192) {
 800553c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005540:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2bc0      	cmp	r3, #192	; 0xc0
 8005548:	d11e      	bne.n	8005588 <mbedtls_camellia_setkey_enc+0x154>
        for (i = 0; i < 8; i++) {
 800554a:	2300      	movs	r3, #0
 800554c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005550:	e016      	b.n	8005580 <mbedtls_camellia_setkey_enc+0x14c>
            t[24 + i] = ~t[16 + i];
 8005552:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005556:	3310      	adds	r3, #16
 8005558:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800555c:	443b      	add	r3, r7
 800555e:	f813 2c58 	ldrb.w	r2, [r3, #-88]
 8005562:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005566:	3318      	adds	r3, #24
 8005568:	43d2      	mvns	r2, r2
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005570:	443b      	add	r3, r7
 8005572:	f803 2c58 	strb.w	r2, [r3, #-88]
        for (i = 0; i < 8; i++) {
 8005576:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800557a:	3301      	adds	r3, #1
 800557c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005580:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005584:	2b07      	cmp	r3, #7
 8005586:	d9e4      	bls.n	8005552 <mbedtls_camellia_setkey_enc+0x11e>
    }

    /*
     * Prepare SIGMA values
     */
    for (i = 0; i < 6; i++) {
 8005588:	2300      	movs	r3, #0
 800558a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800558e:	e041      	b.n	8005614 <mbedtls_camellia_setkey_enc+0x1e0>
        SIGMA[i][0] = MBEDTLS_GET_UINT32_BE(SIGMA_CHARS[i], 0);
 8005590:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4aac      	ldr	r2, [pc, #688]	; (8005848 <mbedtls_camellia_setkey_enc+0x414>)
 8005598:	4413      	add	r3, r2
 800559a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800559e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 80055a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80055ae:	601a      	str	r2, [r3, #0]
    return r;
 80055b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	ba1a      	rev	r2, r3
 80055bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80055c6:	443b      	add	r3, r7
 80055c8:	f843 2c88 	str.w	r2, [r3, #-136]
        SIGMA[i][1] = MBEDTLS_GET_UINT32_BE(SIGMA_CHARS[i], 4);
 80055cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	4a9d      	ldr	r2, [pc, #628]	; (8005848 <mbedtls_camellia_setkey_enc+0x414>)
 80055d4:	4413      	add	r3, r2
 80055d6:	3304      	adds	r3, #4
 80055d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80055dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 80055e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80055ec:	601a      	str	r2, [r3, #0]
    return r;
 80055ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055f2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	ba1a      	rev	r2, r3
 80055fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005604:	443b      	add	r3, r7
 8005606:	f843 2c84 	str.w	r2, [r3, #-132]
    for (i = 0; i < 6; i++) {
 800560a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800560e:	3301      	adds	r3, #1
 8005610:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005614:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005618:	2b05      	cmp	r3, #5
 800561a:	d9b9      	bls.n	8005590 <mbedtls_camellia_setkey_enc+0x15c>

    /*
     * Key storage in KC
     * Order: KL, KR, KA, KB
     */
    memset(KC, 0, sizeof(KC));
 800561c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005620:	2240      	movs	r2, #64	; 0x40
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f00b fac9 	bl	8010bbc <memset>

    /* Store KL, KR */
    for (i = 0; i < 8; i++) {
 800562a:	2300      	movs	r3, #0
 800562c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005630:	e023      	b.n	800567a <mbedtls_camellia_setkey_enc+0x246>
        KC[i] = MBEDTLS_GET_UINT32_BE(t, i * 4);
 8005632:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800563c:	4413      	add	r3, r2
 800563e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005642:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
    memcpy(&r, p, sizeof(r));
 800564a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800564e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005652:	601a      	str	r2, [r3, #0]
    return r;
 8005654:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005658:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	ba1a      	rev	r2, r3
 8005660:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800566a:	443b      	add	r3, r7
 800566c:	f843 2cc8 	str.w	r2, [r3, #-200]
    for (i = 0; i < 8; i++) {
 8005670:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005674:	3301      	adds	r3, #1
 8005676:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800567a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800567e:	2b07      	cmp	r3, #7
 8005680:	d9d7      	bls.n	8005632 <mbedtls_camellia_setkey_enc+0x1fe>
    }

    /* Generate KA */
    for (i = 0; i < 4; ++i) {
 8005682:	2300      	movs	r3, #0
 8005684:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005688:	e01f      	b.n	80056ca <mbedtls_camellia_setkey_enc+0x296>
        KC[8 + i] = KC[i] ^ KC[4 + i];
 800568a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005694:	443b      	add	r3, r7
 8005696:	f853 1cc8 	ldr.w	r1, [r3, #-200]
 800569a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800569e:	3304      	adds	r3, #4
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80056a6:	443b      	add	r3, r7
 80056a8:	f853 2cc8 	ldr.w	r2, [r3, #-200]
 80056ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80056b0:	3308      	adds	r3, #8
 80056b2:	404a      	eors	r2, r1
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80056ba:	443b      	add	r3, r7
 80056bc:	f843 2cc8 	str.w	r2, [r3, #-200]
    for (i = 0; i < 4; ++i) {
 80056c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80056c4:	3301      	adds	r3, #1
 80056c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80056ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d9db      	bls.n	800568a <mbedtls_camellia_setkey_enc+0x256>
    }

    camellia_feistel(KC + 8, SIGMA[0], KC + 10);
 80056d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80056d6:	3320      	adds	r3, #32
 80056d8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80056dc:	3228      	adds	r2, #40	; 0x28
 80056de:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fe02 	bl	80052ec <camellia_feistel>
    camellia_feistel(KC + 10, SIGMA[1], KC + 8);
 80056e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80056ec:	3328      	adds	r3, #40	; 0x28
 80056ee:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80056f2:	3220      	adds	r2, #32
 80056f4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80056f8:	3108      	adds	r1, #8
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff fdf6 	bl	80052ec <camellia_feistel>

    for (i = 0; i < 4; ++i) {
 8005700:	2300      	movs	r3, #0
 8005702:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005706:	e01f      	b.n	8005748 <mbedtls_camellia_setkey_enc+0x314>
        KC[8 + i] ^= KC[i];
 8005708:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800570c:	3308      	adds	r3, #8
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005714:	443b      	add	r3, r7
 8005716:	f853 1cc8 	ldr.w	r1, [r3, #-200]
 800571a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005724:	443b      	add	r3, r7
 8005726:	f853 2cc8 	ldr.w	r2, [r3, #-200]
 800572a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800572e:	3308      	adds	r3, #8
 8005730:	404a      	eors	r2, r1
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005738:	443b      	add	r3, r7
 800573a:	f843 2cc8 	str.w	r2, [r3, #-200]
    for (i = 0; i < 4; ++i) {
 800573e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005742:	3301      	adds	r3, #1
 8005744:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005748:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800574c:	2b03      	cmp	r3, #3
 800574e:	d9db      	bls.n	8005708 <mbedtls_camellia_setkey_enc+0x2d4>
    }

    camellia_feistel(KC + 8, SIGMA[2], KC + 10);
 8005750:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005754:	3320      	adds	r3, #32
 8005756:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800575a:	3228      	adds	r2, #40	; 0x28
 800575c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8005760:	3110      	adds	r1, #16
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff fdc2 	bl	80052ec <camellia_feistel>
    camellia_feistel(KC + 10, SIGMA[3], KC + 8);
 8005768:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800576c:	3328      	adds	r3, #40	; 0x28
 800576e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005772:	3220      	adds	r2, #32
 8005774:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8005778:	3118      	adds	r1, #24
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff fdb6 	bl	80052ec <camellia_feistel>

    if (keybits > 128) {
 8005780:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005784:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b80      	cmp	r3, #128	; 0x80
 800578c:	d940      	bls.n	8005810 <mbedtls_camellia_setkey_enc+0x3dc>
        /* Generate KB */
        for (i = 0; i < 4; ++i) {
 800578e:	2300      	movs	r3, #0
 8005790:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005794:	e020      	b.n	80057d8 <mbedtls_camellia_setkey_enc+0x3a4>
            KC[12 + i] = KC[4 + i] ^ KC[8 + i];
 8005796:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800579a:	3304      	adds	r3, #4
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80057a2:	443b      	add	r3, r7
 80057a4:	f853 1cc8 	ldr.w	r1, [r3, #-200]
 80057a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80057ac:	3308      	adds	r3, #8
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80057b4:	443b      	add	r3, r7
 80057b6:	f853 2cc8 	ldr.w	r2, [r3, #-200]
 80057ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80057be:	330c      	adds	r3, #12
 80057c0:	404a      	eors	r2, r1
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80057c8:	443b      	add	r3, r7
 80057ca:	f843 2cc8 	str.w	r2, [r3, #-200]
        for (i = 0; i < 4; ++i) {
 80057ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80057d2:	3301      	adds	r3, #1
 80057d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80057d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d9da      	bls.n	8005796 <mbedtls_camellia_setkey_enc+0x362>
        }

        camellia_feistel(KC + 12, SIGMA[4], KC + 14);
 80057e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80057e4:	3330      	adds	r3, #48	; 0x30
 80057e6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80057ea:	3238      	adds	r2, #56	; 0x38
 80057ec:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80057f0:	3120      	adds	r1, #32
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fd7a 	bl	80052ec <camellia_feistel>
        camellia_feistel(KC + 14, SIGMA[5], KC + 12);
 80057f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80057fc:	3338      	adds	r3, #56	; 0x38
 80057fe:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005802:	3230      	adds	r2, #48	; 0x30
 8005804:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8005808:	3128      	adds	r1, #40	; 0x28
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fd6e 	bl	80052ec <camellia_feistel>
    /*
     * Generating subkeys
     */

    /* Manipulating KL */
    SHIFT_AND_PLACE(idx, 0);
 8005810:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005812:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005816:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800581e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005822:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005826:	605a      	str	r2, [r3, #4]
 8005828:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800582a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800582e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005836:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800583a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	2301      	movs	r3, #1
 8005842:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005846:	e0aa      	b.n	800599e <mbedtls_camellia_setkey_enc+0x56a>
 8005848:	0801230c 	.word	0x0801230c
 800584c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005850:	3b01      	subs	r3, #1
 8005852:	49de      	ldr	r1, [pc, #888]	; (8005bcc <mbedtls_camellia_setkey_enc+0x798>)
 8005854:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005858:	0112      	lsls	r2, r2, #4
 800585a:	440a      	add	r2, r1
 800585c:	4413      	add	r3, r2
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 8097 	beq.w	8005994 <mbedtls_camellia_setkey_enc+0x560>
 8005866:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800586a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800586e:	6819      	ldr	r1, [r3, #0]
 8005870:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005874:	4613      	mov	r3, r2
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	1a9b      	subs	r3, r3, r2
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	4099      	lsls	r1, r3
 8005880:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005884:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005888:	6858      	ldr	r0, [r3, #4]
 800588a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800588e:	4613      	mov	r3, r2
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	1a9b      	subs	r3, r3, r2
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	f1c3 0320 	rsb	r3, r3, #32
 800589c:	fa20 f203 	lsr.w	r2, r0, r3
 80058a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	f107 0020 	add.w	r0, r7, #32
 80058aa:	4403      	add	r3, r0
 80058ac:	404a      	eors	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80058b8:	6859      	ldr	r1, [r3, #4]
 80058ba:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80058be:	4613      	mov	r3, r2
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	f003 031f 	and.w	r3, r3, #31
 80058c8:	4099      	lsls	r1, r3
 80058ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80058d2:	6898      	ldr	r0, [r3, #8]
 80058d4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80058d8:	4613      	mov	r3, r2
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	f1c3 0320 	rsb	r3, r3, #32
 80058e6:	fa20 f203 	lsr.w	r2, r0, r3
 80058ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	3304      	adds	r3, #4
 80058f2:	f107 0020 	add.w	r0, r7, #32
 80058f6:	4403      	add	r3, r0
 80058f8:	404a      	eors	r2, r1
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005900:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005904:	6899      	ldr	r1, [r3, #8]
 8005906:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800590a:	4613      	mov	r3, r2
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	1a9b      	subs	r3, r3, r2
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	4099      	lsls	r1, r3
 8005916:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800591a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800591e:	68d8      	ldr	r0, [r3, #12]
 8005920:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005924:	4613      	mov	r3, r2
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	1a9b      	subs	r3, r3, r2
 800592a:	f003 031f 	and.w	r3, r3, #31
 800592e:	f1c3 0320 	rsb	r3, r3, #32
 8005932:	fa20 f203 	lsr.w	r2, r0, r3
 8005936:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	3308      	adds	r3, #8
 800593e:	f107 0020 	add.w	r0, r7, #32
 8005942:	4403      	add	r3, r0
 8005944:	404a      	eors	r2, r1
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800594c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005950:	68d9      	ldr	r1, [r3, #12]
 8005952:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005956:	4613      	mov	r3, r2
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	4099      	lsls	r1, r3
 8005962:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005966:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005970:	4613      	mov	r3, r2
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	f003 031f 	and.w	r3, r3, #31
 800597a:	f1c3 0320 	rsb	r3, r3, #32
 800597e:	fa20 f203 	lsr.w	r2, r0, r3
 8005982:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	330c      	adds	r3, #12
 800598a:	f107 0020 	add.w	r0, r7, #32
 800598e:	4403      	add	r3, r0
 8005990:	404a      	eors	r2, r1
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005998:	3301      	adds	r3, #1
 800599a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800599e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	f67f af52 	bls.w	800584c <mbedtls_camellia_setkey_enc+0x418>
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80059ae:	e02e      	b.n	8005a0e <mbedtls_camellia_setkey_enc+0x5da>
 80059b0:	4987      	ldr	r1, [pc, #540]	; (8005bd0 <mbedtls_camellia_setkey_enc+0x79c>)
 80059b2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	18ca      	adds	r2, r1, r3
 80059c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80059c4:	4413      	add	r3, r2
 80059c6:	f993 3000 	ldrsb.w	r3, [r3]
 80059ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ce:	d019      	beq.n	8005a04 <mbedtls_camellia_setkey_enc+0x5d0>
 80059d0:	497f      	ldr	r1, [pc, #508]	; (8005bd0 <mbedtls_camellia_setkey_enc+0x79c>)
 80059d2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	18ca      	adds	r2, r1, r3
 80059e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80059e4:	4413      	add	r3, r2
 80059e6:	f993 3000 	ldrsb.w	r3, [r3]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80059f0:	4413      	add	r3, r2
 80059f2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80059f6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80059fa:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80059fe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a08:	3301      	adds	r3, #1
 8005a0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005a0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a12:	2b13      	cmp	r3, #19
 8005a14:	d9cc      	bls.n	80059b0 <mbedtls_camellia_setkey_enc+0x57c>

    /* Manipulating KR */
    if (keybits > 128) {
 8005a16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a1a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b80      	cmp	r3, #128	; 0x80
 8005a22:	f240 810c 	bls.w	8005c3e <mbedtls_camellia_setkey_enc+0x80a>
        SHIFT_AND_PLACE(idx, 1);
 8005a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a2e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005a38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005a46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a4a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a4e:	609a      	str	r2, [r3, #8]
 8005a50:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005a54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a5c:	60da      	str	r2, [r3, #12]
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005a64:	e0a9      	b.n	8005bba <mbedtls_camellia_setkey_enc+0x786>
 8005a66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	4957      	ldr	r1, [pc, #348]	; (8005bcc <mbedtls_camellia_setkey_enc+0x798>)
 8005a6e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005a72:	0112      	lsls	r2, r2, #4
 8005a74:	440a      	add	r2, r1
 8005a76:	4413      	add	r3, r2
 8005a78:	3304      	adds	r3, #4
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 8097 	beq.w	8005bb0 <mbedtls_camellia_setkey_enc+0x77c>
 8005a82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a86:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a8a:	6819      	ldr	r1, [r3, #0]
 8005a8c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005a90:	4613      	mov	r3, r2
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	f003 031f 	and.w	r3, r3, #31
 8005a9a:	4099      	lsls	r1, r3
 8005a9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005aa0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005aa4:	6858      	ldr	r0, [r3, #4]
 8005aa6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005aaa:	4613      	mov	r3, r2
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	f003 031f 	and.w	r3, r3, #31
 8005ab4:	f1c3 0320 	rsb	r3, r3, #32
 8005ab8:	fa20 f203 	lsr.w	r2, r0, r3
 8005abc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	f107 0020 	add.w	r0, r7, #32
 8005ac6:	4403      	add	r3, r0
 8005ac8:	404a      	eors	r2, r1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ad0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ad4:	6859      	ldr	r1, [r3, #4]
 8005ad6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005ada:	4613      	mov	r3, r2
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	f003 031f 	and.w	r3, r3, #31
 8005ae4:	4099      	lsls	r1, r3
 8005ae6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005aea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005aee:	6898      	ldr	r0, [r3, #8]
 8005af0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005af4:	4613      	mov	r3, r2
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	f003 031f 	and.w	r3, r3, #31
 8005afe:	f1c3 0320 	rsb	r3, r3, #32
 8005b02:	fa20 f203 	lsr.w	r2, r0, r3
 8005b06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	f107 0020 	add.w	r0, r7, #32
 8005b12:	4403      	add	r3, r0
 8005b14:	404a      	eors	r2, r1
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005b20:	6899      	ldr	r1, [r3, #8]
 8005b22:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005b26:	4613      	mov	r3, r2
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	1a9b      	subs	r3, r3, r2
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	4099      	lsls	r1, r3
 8005b32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b36:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005b3a:	68d8      	ldr	r0, [r3, #12]
 8005b3c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005b40:	4613      	mov	r3, r2
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	f1c3 0320 	rsb	r3, r3, #32
 8005b4e:	fa20 f203 	lsr.w	r2, r0, r3
 8005b52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	3308      	adds	r3, #8
 8005b5a:	f107 0020 	add.w	r0, r7, #32
 8005b5e:	4403      	add	r3, r0
 8005b60:	404a      	eors	r2, r1
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005b6c:	68d9      	ldr	r1, [r3, #12]
 8005b6e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005b72:	4613      	mov	r3, r2
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	4099      	lsls	r1, r3
 8005b7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	1a9b      	subs	r3, r3, r2
 8005b92:	f003 031f 	and.w	r3, r3, #31
 8005b96:	f1c3 0320 	rsb	r3, r3, #32
 8005b9a:	fa20 f203 	lsr.w	r2, r0, r3
 8005b9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	f107 0020 	add.w	r0, r7, #32
 8005baa:	4403      	add	r3, r0
 8005bac:	404a      	eors	r2, r1
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005bba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	f67f af51 	bls.w	8005a66 <mbedtls_camellia_setkey_enc+0x632>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005bca:	e034      	b.n	8005c36 <mbedtls_camellia_setkey_enc+0x802>
 8005bcc:	0801273c 	.word	0x0801273c
 8005bd0:	0801275c 	.word	0x0801275c
 8005bd4:	49b2      	ldr	r1, [pc, #712]	; (8005ea0 <mbedtls_camellia_setkey_enc+0xa6c>)
 8005bd6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	18ca      	adds	r2, r1, r3
 8005be4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005be8:	4413      	add	r3, r2
 8005bea:	3314      	adds	r3, #20
 8005bec:	f993 3000 	ldrsb.w	r3, [r3]
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d01a      	beq.n	8005c2c <mbedtls_camellia_setkey_enc+0x7f8>
 8005bf6:	49aa      	ldr	r1, [pc, #680]	; (8005ea0 <mbedtls_camellia_setkey_enc+0xa6c>)
 8005bf8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	18ca      	adds	r2, r1, r3
 8005c06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	f993 3000 	ldrsb.w	r3, [r3]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005c18:	4413      	add	r3, r2
 8005c1a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005c1e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005c22:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8005c26:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c30:	3301      	adds	r3, #1
 8005c32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005c36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c3a:	2b13      	cmp	r3, #19
 8005c3c:	d9ca      	bls.n	8005bd4 <mbedtls_camellia_setkey_enc+0x7a0>
    }

    /* Manipulating KA */
    SHIFT_AND_PLACE(idx, 2);
 8005c3e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005c42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c58:	605a      	str	r2, [r3, #4]
 8005c5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005c5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c66:	609a      	str	r2, [r3, #8]
 8005c68:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005c6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c74:	60da      	str	r2, [r3, #12]
 8005c76:	2301      	movs	r3, #1
 8005c78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005c7c:	e0a9      	b.n	8005dd2 <mbedtls_camellia_setkey_enc+0x99e>
 8005c7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c82:	3b01      	subs	r3, #1
 8005c84:	4987      	ldr	r1, [pc, #540]	; (8005ea4 <mbedtls_camellia_setkey_enc+0xa70>)
 8005c86:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005c8a:	0112      	lsls	r2, r2, #4
 8005c8c:	440a      	add	r2, r1
 8005c8e:	4413      	add	r3, r2
 8005c90:	3308      	adds	r3, #8
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 8097 	beq.w	8005dc8 <mbedtls_camellia_setkey_enc+0x994>
 8005c9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c9e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005ca8:	4613      	mov	r3, r2
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	1a9b      	subs	r3, r3, r2
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	4099      	lsls	r1, r3
 8005cb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005cb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005cbc:	6858      	ldr	r0, [r3, #4]
 8005cbe:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	1a9b      	subs	r3, r3, r2
 8005cc8:	f003 031f 	and.w	r3, r3, #31
 8005ccc:	f1c3 0320 	rsb	r3, r3, #32
 8005cd0:	fa20 f203 	lsr.w	r2, r0, r3
 8005cd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	f107 0020 	add.w	r0, r7, #32
 8005cde:	4403      	add	r3, r0
 8005ce0:	404a      	eors	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ce8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005cec:	6859      	ldr	r1, [r3, #4]
 8005cee:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	1a9b      	subs	r3, r3, r2
 8005cf8:	f003 031f 	and.w	r3, r3, #31
 8005cfc:	4099      	lsls	r1, r3
 8005cfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d02:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005d06:	6898      	ldr	r0, [r3, #8]
 8005d08:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	1a9b      	subs	r3, r3, r2
 8005d12:	f003 031f 	and.w	r3, r3, #31
 8005d16:	f1c3 0320 	rsb	r3, r3, #32
 8005d1a:	fa20 f203 	lsr.w	r2, r0, r3
 8005d1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	3304      	adds	r3, #4
 8005d26:	f107 0020 	add.w	r0, r7, #32
 8005d2a:	4403      	add	r3, r0
 8005d2c:	404a      	eors	r2, r1
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005d38:	6899      	ldr	r1, [r3, #8]
 8005d3a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005d3e:	4613      	mov	r3, r2
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	4099      	lsls	r1, r3
 8005d4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005d52:	68d8      	ldr	r0, [r3, #12]
 8005d54:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005d58:	4613      	mov	r3, r2
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	1a9b      	subs	r3, r3, r2
 8005d5e:	f003 031f 	and.w	r3, r3, #31
 8005d62:	f1c3 0320 	rsb	r3, r3, #32
 8005d66:	fa20 f203 	lsr.w	r2, r0, r3
 8005d6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	3308      	adds	r3, #8
 8005d72:	f107 0020 	add.w	r0, r7, #32
 8005d76:	4403      	add	r3, r0
 8005d78:	404a      	eors	r2, r1
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005d84:	68d9      	ldr	r1, [r3, #12]
 8005d86:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	4099      	lsls	r1, r3
 8005d96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d9a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005da4:	4613      	mov	r3, r2
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	f1c3 0320 	rsb	r3, r3, #32
 8005db2:	fa20 f203 	lsr.w	r2, r0, r3
 8005db6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	f107 0020 	add.w	r0, r7, #32
 8005dc2:	4403      	add	r3, r0
 8005dc4:	404a      	eors	r2, r1
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005dcc:	3301      	adds	r3, #1
 8005dce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005dd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	f67f af51 	bls.w	8005c7e <mbedtls_camellia_setkey_enc+0x84a>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005de2:	e030      	b.n	8005e46 <mbedtls_camellia_setkey_enc+0xa12>
 8005de4:	492e      	ldr	r1, [pc, #184]	; (8005ea0 <mbedtls_camellia_setkey_enc+0xa6c>)
 8005de6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	18ca      	adds	r2, r1, r3
 8005df4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005df8:	4413      	add	r3, r2
 8005dfa:	3328      	adds	r3, #40	; 0x28
 8005dfc:	f993 3000 	ldrsb.w	r3, [r3]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d01a      	beq.n	8005e3c <mbedtls_camellia_setkey_enc+0xa08>
 8005e06:	4926      	ldr	r1, [pc, #152]	; (8005ea0 <mbedtls_camellia_setkey_enc+0xa6c>)
 8005e08:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	18ca      	adds	r2, r1, r3
 8005e16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3328      	adds	r3, #40	; 0x28
 8005e1e:	f993 3000 	ldrsb.w	r3, [r3]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005e28:	4413      	add	r3, r2
 8005e2a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e2e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005e32:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8005e36:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005e40:	3301      	adds	r3, #1
 8005e42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005e46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005e4a:	2b13      	cmp	r3, #19
 8005e4c:	d9ca      	bls.n	8005de4 <mbedtls_camellia_setkey_enc+0x9b0>

    /* Manipulating KB */
    if (keybits > 128) {
 8005e4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b80      	cmp	r3, #128	; 0x80
 8005e5a:	f240 810d 	bls.w	8006078 <mbedtls_camellia_setkey_enc+0xc44>
        SHIFT_AND_PLACE(idx, 3);
 8005e5e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005e62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005e70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e78:	605a      	str	r2, [r3, #4]
 8005e7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e86:	609a      	str	r2, [r3, #8]
 8005e88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e94:	60da      	str	r2, [r3, #12]
 8005e96:	2301      	movs	r3, #1
 8005e98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005e9c:	e0ae      	b.n	8005ffc <mbedtls_camellia_setkey_enc+0xbc8>
 8005e9e:	bf00      	nop
 8005ea0:	0801275c 	.word	0x0801275c
 8005ea4:	0801273c 	.word	0x0801273c
 8005ea8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005eac:	3b01      	subs	r3, #1
 8005eae:	4995      	ldr	r1, [pc, #596]	; (8006104 <mbedtls_camellia_setkey_enc+0xcd0>)
 8005eb0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005eb4:	0112      	lsls	r2, r2, #4
 8005eb6:	440a      	add	r2, r1
 8005eb8:	4413      	add	r3, r2
 8005eba:	330c      	adds	r3, #12
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8097 	beq.w	8005ff2 <mbedtls_camellia_setkey_enc+0xbbe>
 8005ec4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ec8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ecc:	6819      	ldr	r1, [r3, #0]
 8005ece:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	4099      	lsls	r1, r3
 8005ede:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ee2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ee6:	6858      	ldr	r0, [r3, #4]
 8005ee8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005eec:	4613      	mov	r3, r2
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	1a9b      	subs	r3, r3, r2
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	f1c3 0320 	rsb	r3, r3, #32
 8005efa:	fa20 f203 	lsr.w	r2, r0, r3
 8005efe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f02:	011b      	lsls	r3, r3, #4
 8005f04:	f107 0020 	add.w	r0, r7, #32
 8005f08:	4403      	add	r3, r0
 8005f0a:	404a      	eors	r2, r1
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f12:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005f16:	6859      	ldr	r1, [r3, #4]
 8005f18:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	4099      	lsls	r1, r3
 8005f28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005f30:	6898      	ldr	r0, [r3, #8]
 8005f32:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005f36:	4613      	mov	r3, r2
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	1a9b      	subs	r3, r3, r2
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	f1c3 0320 	rsb	r3, r3, #32
 8005f44:	fa20 f203 	lsr.w	r2, r0, r3
 8005f48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	3304      	adds	r3, #4
 8005f50:	f107 0020 	add.w	r0, r7, #32
 8005f54:	4403      	add	r3, r0
 8005f56:	404a      	eors	r2, r1
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f5e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005f62:	6899      	ldr	r1, [r3, #8]
 8005f64:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005f68:	4613      	mov	r3, r2
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	1a9b      	subs	r3, r3, r2
 8005f6e:	f003 031f 	and.w	r3, r3, #31
 8005f72:	4099      	lsls	r1, r3
 8005f74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005f78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005f7c:	68d8      	ldr	r0, [r3, #12]
 8005f7e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005f82:	4613      	mov	r3, r2
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	f1c3 0320 	rsb	r3, r3, #32
 8005f90:	fa20 f203 	lsr.w	r2, r0, r3
 8005f94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	f107 0020 	add.w	r0, r7, #32
 8005fa0:	4403      	add	r3, r0
 8005fa2:	404a      	eors	r2, r1
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005faa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005fae:	68d9      	ldr	r1, [r3, #12]
 8005fb0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	1a9b      	subs	r3, r3, r2
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	4099      	lsls	r1, r3
 8005fc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005fc4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005fce:	4613      	mov	r3, r2
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	f1c3 0320 	rsb	r3, r3, #32
 8005fdc:	fa20 f203 	lsr.w	r2, r0, r3
 8005fe0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	f107 0020 	add.w	r0, r7, #32
 8005fec:	4403      	add	r3, r0
 8005fee:	404a      	eors	r2, r1
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005ffc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006000:	2b04      	cmp	r3, #4
 8006002:	f67f af51 	bls.w	8005ea8 <mbedtls_camellia_setkey_enc+0xa74>
 8006006:	2300      	movs	r3, #0
 8006008:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800600c:	e030      	b.n	8006070 <mbedtls_camellia_setkey_enc+0xc3c>
 800600e:	493e      	ldr	r1, [pc, #248]	; (8006108 <mbedtls_camellia_setkey_enc+0xcd4>)
 8006010:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	18ca      	adds	r2, r1, r3
 800601e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006022:	4413      	add	r3, r2
 8006024:	333c      	adds	r3, #60	; 0x3c
 8006026:	f993 3000 	ldrsb.w	r3, [r3]
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602e:	d01a      	beq.n	8006066 <mbedtls_camellia_setkey_enc+0xc32>
 8006030:	4935      	ldr	r1, [pc, #212]	; (8006108 <mbedtls_camellia_setkey_enc+0xcd4>)
 8006032:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	18ca      	adds	r2, r1, r3
 8006040:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006044:	4413      	add	r3, r2
 8006046:	333c      	adds	r3, #60	; 0x3c
 8006048:	f993 3000 	ldrsb.w	r3, [r3]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006052:	4413      	add	r3, r2
 8006054:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006058:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800605c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8006060:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800606a:	3301      	adds	r3, #1
 800606c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006070:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006074:	2b13      	cmp	r3, #19
 8006076:	d9ca      	bls.n	800600e <mbedtls_camellia_setkey_enc+0xbda>
    }

    /* Do transpositions */
    for (i = 0; i < 20; i++) {
 8006078:	2300      	movs	r3, #0
 800607a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800607e:	e036      	b.n	80060ee <mbedtls_camellia_setkey_enc+0xcba>
        if (transposes[idx][i] != -1) {
 8006080:	4922      	ldr	r1, [pc, #136]	; (800610c <mbedtls_camellia_setkey_enc+0xcd8>)
 8006082:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	18ca      	adds	r2, r1, r3
 8006090:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006094:	4413      	add	r3, r2
 8006096:	f993 3000 	ldrsb.w	r3, [r3]
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d021      	beq.n	80060e4 <mbedtls_camellia_setkey_enc+0xcb0>
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 80060a0:	491a      	ldr	r1, [pc, #104]	; (800610c <mbedtls_camellia_setkey_enc+0xcd8>)
 80060a2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	18ca      	adds	r2, r1, r3
 80060b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060b4:	4413      	add	r3, r2
 80060b6:	f993 3000 	ldrsb.w	r3, [r3]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80060c0:	18d1      	adds	r1, r2, r3
 80060c2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80060c6:	4613      	mov	r3, r2
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	4413      	add	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	461a      	mov	r2, r3
 80060d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060d4:	4413      	add	r3, r2
 80060d6:	3320      	adds	r3, #32
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80060de:	4413      	add	r3, r2
 80060e0:	680a      	ldr	r2, [r1, #0]
 80060e2:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 20; i++) {
 80060e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060e8:	3301      	adds	r3, #1
 80060ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80060ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060f2:	2b13      	cmp	r3, #19
 80060f4:	d9c4      	bls.n	8006080 <mbedtls_camellia_setkey_enc+0xc4c>
        }
    }

    return 0;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	0801273c 	.word	0x0801273c
 8006108:	0801275c 	.word	0x0801275c
 800610c:	080127fc 	.word	0x080127fc

08006110 <mbedtls_camellia_setkey_dec>:
 */
#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
int mbedtls_camellia_setkey_dec(mbedtls_camellia_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b0ce      	sub	sp, #312	; 0x138
 8006114:	af00      	add	r7, sp, #0
 8006116:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800611a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800611e:	6018      	str	r0, [r3, #0]
 8006120:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006128:	6019      	str	r1, [r3, #0]
 800612a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800612e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006132:	601a      	str	r2, [r3, #0]
    size_t i;
    mbedtls_camellia_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_camellia_init(&cty);
 8006134:	f107 0310 	add.w	r3, r7, #16
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff f95b 	bl	80053f4 <mbedtls_camellia_init>

    /* Also checks keybits */
    if ((ret = mbedtls_camellia_setkey_enc(&cty, key, keybits)) != 0) {
 800613e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006142:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8006146:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800614a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614e:	f107 0010 	add.w	r0, r7, #16
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	6819      	ldr	r1, [r3, #0]
 8006156:	f7ff f96d 	bl	8005434 <mbedtls_camellia_setkey_enc>
 800615a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 800615e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 80c3 	bne.w	80062ee <mbedtls_camellia_setkey_dec+0x1de>
        goto exit;
    }

    ctx->nr = cty.nr;
 8006168:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800616c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006176:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	601a      	str	r2, [r3, #0]
    idx = (ctx->nr == 4);
 800617e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b04      	cmp	r3, #4
 800618c:	bf0c      	ite	eq
 800618e:	2301      	moveq	r3, #1
 8006190:	2300      	movne	r3, #0
 8006192:	b2db      	uxtb	r3, r3
 8006194:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    RK = ctx->rk;
 8006198:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800619c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3304      	adds	r3, #4
 80061a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    SK = cty.rk + 24 * 2 + 8 * idx * 2;
 80061a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	3318      	adds	r3, #24
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	f107 0210 	add.w	r2, r7, #16
 80061b6:	3204      	adds	r2, #4
 80061b8:	4413      	add	r3, r2
 80061ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    *RK++ = *SK++;
 80061be:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80061c2:	1d13      	adds	r3, r2, #4
 80061c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80061c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80061cc:	1d19      	adds	r1, r3, #4
 80061ce:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80061d6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80061da:	1d13      	adds	r3, r2, #4
 80061dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80061e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80061e4:	1d19      	adds	r1, r3, #4
 80061e6:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80061ee:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80061f2:	1d13      	adds	r3, r2, #4
 80061f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80061f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80061fc:	1d19      	adds	r1, r3, #4
 80061fe:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8006206:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800620a:	1d13      	adds	r3, r2, #4
 800620c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006210:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006214:	1d19      	adds	r1, r3, #4
 8006216:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	601a      	str	r2, [r3, #0]

    for (i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4) {
 800621e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	3316      	adds	r3, #22
 8006226:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800622a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800622e:	3b18      	subs	r3, #24
 8006230:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006234:	e021      	b.n	800627a <mbedtls_camellia_setkey_dec+0x16a>
        *RK++ = *SK++;
 8006236:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800623a:	1d13      	adds	r3, r2, #4
 800623c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006240:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006244:	1d19      	adds	r1, r3, #4
 8006246:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	601a      	str	r2, [r3, #0]
        *RK++ = *SK++;
 800624e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006252:	1d13      	adds	r3, r2, #4
 8006254:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006258:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800625c:	1d19      	adds	r1, r3, #4
 800625e:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	601a      	str	r2, [r3, #0]
    for (i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4) {
 8006266:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800626a:	3b01      	subs	r3, #1
 800626c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8006270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006274:	3b10      	subs	r3, #16
 8006276:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800627a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1d9      	bne.n	8006236 <mbedtls_camellia_setkey_dec+0x126>
    }

    SK -= 2;
 8006282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006286:	3b08      	subs	r3, #8
 8006288:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    *RK++ = *SK++;
 800628c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006290:	1d13      	adds	r3, r2, #4
 8006292:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006296:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800629a:	1d19      	adds	r1, r3, #4
 800629c:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80062a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80062a8:	1d13      	adds	r3, r2, #4
 80062aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80062ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062b2:	1d19      	adds	r1, r3, #4
 80062b4:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80062b8:	6812      	ldr	r2, [r2, #0]
 80062ba:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80062bc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80062c0:	1d13      	adds	r3, r2, #4
 80062c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80062c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062ca:	1d19      	adds	r1, r3, #4
 80062cc:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80062d4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80062d8:	1d13      	adds	r3, r2, #4
 80062da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80062de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062e2:	1d19      	adds	r1, r3, #4
 80062e4:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	e000      	b.n	80062f0 <mbedtls_camellia_setkey_dec+0x1e0>
        goto exit;
 80062ee:	bf00      	nop

exit:
    mbedtls_camellia_free(&cty);
 80062f0:	f107 0310 	add.w	r3, r7, #16
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff f88b 	bl	8005410 <mbedtls_camellia_free>

    return ret;
 80062fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
}
 80062fe:	4618      	mov	r0, r3
 8006300:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <mbedtls_camellia_crypt_ecb>:
 */
int mbedtls_camellia_crypt_ecb(mbedtls_camellia_context *ctx,
                               int mode,
                               const unsigned char input[16],
                               unsigned char output[16])
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b09a      	sub	sp, #104	; 0x68
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	603b      	str	r3, [r7, #0]
    int NR;
    uint32_t *RK, X[4];
    if (mode != MBEDTLS_CAMELLIA_ENCRYPT && mode != MBEDTLS_CAMELLIA_DECRYPT) {
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d005      	beq.n	8006328 <mbedtls_camellia_crypt_ecb+0x20>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <mbedtls_camellia_crypt_ecb+0x20>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8006322:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006326:	e104      	b.n	8006532 <mbedtls_camellia_crypt_ecb+0x22a>
    }

    ((void) mode);

    NR = ctx->nr;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	667b      	str	r3, [r7, #100]	; 0x64
    RK = ctx->rk;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3304      	adds	r3, #4
 8006332:	663b      	str	r3, [r7, #96]	; 0x60
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	653b      	str	r3, [r7, #80]	; 0x50
 8006338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800633c:	61fb      	str	r3, [r7, #28]
    return r;
 800633e:	69fb      	ldr	r3, [r7, #28]

    X[0] = MBEDTLS_GET_UINT32_BE(input,  0);
 8006340:	ba1b      	rev	r3, r3
 8006342:	633b      	str	r3, [r7, #48]	; 0x30
    X[1] = MBEDTLS_GET_UINT32_BE(input,  4);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3304      	adds	r3, #4
 8006348:	657b      	str	r3, [r7, #84]	; 0x54
 800634a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800634c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800634e:	61bb      	str	r3, [r7, #24]
    return r;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	ba1b      	rev	r3, r3
 8006354:	637b      	str	r3, [r7, #52]	; 0x34
    X[2] = MBEDTLS_GET_UINT32_BE(input,  8);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3308      	adds	r3, #8
 800635a:	65bb      	str	r3, [r7, #88]	; 0x58
 800635c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800635e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006360:	617b      	str	r3, [r7, #20]
    return r;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	ba1b      	rev	r3, r3
 8006366:	63bb      	str	r3, [r7, #56]	; 0x38
    X[3] = MBEDTLS_GET_UINT32_BE(input, 12);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	330c      	adds	r3, #12
 800636c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800636e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006370:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006372:	613b      	str	r3, [r7, #16]
    return r;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	ba1b      	rev	r3, r3
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c

    X[0] ^= *RK++;
 800637a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800637c:	1d1a      	adds	r2, r3, #4
 800637e:	663a      	str	r2, [r7, #96]	; 0x60
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	4053      	eors	r3, r2
 8006386:	633b      	str	r3, [r7, #48]	; 0x30
    X[1] ^= *RK++;
 8006388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800638a:	1d1a      	adds	r2, r3, #4
 800638c:	663a      	str	r2, [r7, #96]	; 0x60
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	4053      	eors	r3, r2
 8006394:	637b      	str	r3, [r7, #52]	; 0x34
    X[2] ^= *RK++;
 8006396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006398:	1d1a      	adds	r2, r3, #4
 800639a:	663a      	str	r2, [r7, #96]	; 0x60
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	4053      	eors	r3, r2
 80063a2:	63bb      	str	r3, [r7, #56]	; 0x38
    X[3] ^= *RK++;
 80063a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063a6:	1d1a      	adds	r2, r3, #4
 80063a8:	663a      	str	r2, [r7, #96]	; 0x60
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ae:	4053      	eors	r3, r2
 80063b0:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (NR) {
 80063b2:	e075      	b.n	80064a0 <mbedtls_camellia_crypt_ecb+0x198>
        --NR;
 80063b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063b6:	3b01      	subs	r3, #1
 80063b8:	667b      	str	r3, [r7, #100]	; 0x64
        camellia_feistel(X, RK, X + 2);
 80063ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063be:	3308      	adds	r3, #8
 80063c0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80063c4:	461a      	mov	r2, r3
 80063c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80063c8:	f7fe ff90 	bl	80052ec <camellia_feistel>
        RK += 2;
 80063cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063ce:	3308      	adds	r3, #8
 80063d0:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X + 2, RK, X);
 80063d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063d6:	3308      	adds	r3, #8
 80063d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80063dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe ff84 	bl	80052ec <camellia_feistel>
        RK += 2;
 80063e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063e6:	3308      	adds	r3, #8
 80063e8:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X, RK, X + 2);
 80063ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063ee:	3308      	adds	r3, #8
 80063f0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80063f4:	461a      	mov	r2, r3
 80063f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80063f8:	f7fe ff78 	bl	80052ec <camellia_feistel>
        RK += 2;
 80063fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063fe:	3308      	adds	r3, #8
 8006400:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X + 2, RK, X);
 8006402:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006406:	3308      	adds	r3, #8
 8006408:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800640c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe ff6c 	bl	80052ec <camellia_feistel>
        RK += 2;
 8006414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006416:	3308      	adds	r3, #8
 8006418:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X, RK, X + 2);
 800641a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800641e:	3308      	adds	r3, #8
 8006420:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8006424:	461a      	mov	r2, r3
 8006426:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006428:	f7fe ff60 	bl	80052ec <camellia_feistel>
        RK += 2;
 800642c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800642e:	3308      	adds	r3, #8
 8006430:	663b      	str	r3, [r7, #96]	; 0x60
        camellia_feistel(X + 2, RK, X);
 8006432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006436:	3308      	adds	r3, #8
 8006438:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800643c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe ff54 	bl	80052ec <camellia_feistel>
        RK += 2;
 8006444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006446:	3308      	adds	r3, #8
 8006448:	663b      	str	r3, [r7, #96]	; 0x60

        if (NR) {
 800644a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800644c:	2b00      	cmp	r3, #0
 800644e:	d027      	beq.n	80064a0 <mbedtls_camellia_crypt_ecb+0x198>
            FL(X[0], X[1], RK[0], RK[1]);
 8006450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4013      	ands	r3, r2
 8006458:	ea4f 72f3 	mov.w	r2, r3, ror #31
 800645c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645e:	4053      	eors	r3, r2
 8006460:	637b      	str	r3, [r7, #52]	; 0x34
 8006462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006466:	3304      	adds	r3, #4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	431a      	orrs	r2, r3
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	4053      	eors	r3, r2
 8006470:	633b      	str	r3, [r7, #48]	; 0x30
            RK += 2;
 8006472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006474:	3308      	adds	r3, #8
 8006476:	663b      	str	r3, [r7, #96]	; 0x60
            FLInv(X[2], X[3], RK[0], RK[1]);
 8006478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800647a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800647c:	3304      	adds	r3, #4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	431a      	orrs	r2, r3
 8006482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006484:	4053      	eors	r3, r2
 8006486:	63bb      	str	r3, [r7, #56]	; 0x38
 8006488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800648a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4013      	ands	r3, r2
 8006490:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8006494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006496:	4053      	eors	r3, r2
 8006498:	63fb      	str	r3, [r7, #60]	; 0x3c
            RK += 2;
 800649a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800649c:	3308      	adds	r3, #8
 800649e:	663b      	str	r3, [r7, #96]	; 0x60
    while (NR) {
 80064a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d186      	bne.n	80063b4 <mbedtls_camellia_crypt_ecb+0xac>
        }
    }

    X[2] ^= *RK++;
 80064a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064a8:	1d1a      	adds	r2, r3, #4
 80064aa:	663a      	str	r2, [r7, #96]	; 0x60
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	4053      	eors	r3, r2
 80064b2:	63bb      	str	r3, [r7, #56]	; 0x38
    X[3] ^= *RK++;
 80064b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064b6:	1d1a      	adds	r2, r3, #4
 80064b8:	663a      	str	r2, [r7, #96]	; 0x60
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064be:	4053      	eors	r3, r2
 80064c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    X[0] ^= *RK++;
 80064c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064c4:	1d1a      	adds	r2, r3, #4
 80064c6:	663a      	str	r2, [r7, #96]	; 0x60
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	4053      	eors	r3, r2
 80064ce:	633b      	str	r3, [r7, #48]	; 0x30
    X[1] ^= *RK++;
 80064d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064d2:	1d1a      	adds	r2, r3, #4
 80064d4:	663a      	str	r2, [r7, #96]	; 0x60
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064da:	4053      	eors	r3, r2
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34

    MBEDTLS_PUT_UINT32_BE(X[2], output,  0);
 80064de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e0:	ba1b      	rev	r3, r3
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80064e6:	623b      	str	r3, [r7, #32]
 80064e8:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 80064ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ec:	601a      	str	r2, [r3, #0]
}
 80064ee:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X[3], output,  4);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	1d1a      	adds	r2, r3, #4
 80064f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f6:	ba1b      	rev	r3, r3
 80064f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
 80064fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    memcpy(p, &x, sizeof(x));
 80064fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006500:	601a      	str	r2, [r3, #0]
}
 8006502:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X[0], output,  8);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	f103 0208 	add.w	r2, r3, #8
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	ba1b      	rev	r3, r3
 800650e:	647a      	str	r2, [r7, #68]	; 0x44
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
 8006512:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 8006514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006516:	601a      	str	r2, [r3, #0]
}
 8006518:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X[1], output, 12);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	f103 020c 	add.w	r2, r3, #12
 8006520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006522:	ba1b      	rev	r3, r3
 8006524:	643a      	str	r2, [r7, #64]	; 0x40
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    memcpy(p, &x, sizeof(x));
 800652a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800652c:	601a      	str	r2, [r3, #0]
}
 800652e:	bf00      	nop

    return 0;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3768      	adds	r7, #104	; 0x68
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <mbedtls_camellia_crypt_cbc>:
                               int mode,
                               size_t length,
                               unsigned char iv[16],
                               const unsigned char *input,
                               unsigned char *output)
{
 800653a:	b5b0      	push	{r4, r5, r7, lr}
 800653c:	b0a0      	sub	sp, #128	; 0x80
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	607a      	str	r2, [r7, #4]
 8006546:	603b      	str	r3, [r7, #0]
    unsigned char temp[16];
    if (mode != MBEDTLS_CAMELLIA_ENCRYPT && mode != MBEDTLS_CAMELLIA_DECRYPT) {
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d005      	beq.n	800655a <mbedtls_camellia_crypt_cbc+0x20>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <mbedtls_camellia_crypt_cbc+0x20>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 8006554:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006558:	e0e6      	b.n	8006728 <mbedtls_camellia_crypt_cbc+0x1ee>
    }

    if (length % 16) {
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f003 030f 	and.w	r3, r3, #15
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <mbedtls_camellia_crypt_cbc+0x30>
        return MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH;
 8006564:	f06f 0325 	mvn.w	r3, #37	; 0x25
 8006568:	e0de      	b.n	8006728 <mbedtls_camellia_crypt_cbc+0x1ee>
    }

    if (mode == MBEDTLS_CAMELLIA_DECRYPT) {
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	f040 80d7 	bne.w	8006720 <mbedtls_camellia_crypt_cbc+0x1e6>
        while (length > 0) {
 8006572:	e06e      	b.n	8006652 <mbedtls_camellia_crypt_cbc+0x118>
            memcpy(temp, input, 16);
 8006574:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006578:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	6859      	ldr	r1, [r3, #4]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_camellia_crypt_ecb(ctx, mode, input, output);
 8006586:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800658a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f7ff feb9 	bl	8006308 <mbedtls_camellia_crypt_ecb>
 8006596:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800659a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800659c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80065a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	677b      	str	r3, [r7, #116]	; 0x74
 80065a6:	2310      	movs	r3, #16
 80065a8:	673b      	str	r3, [r7, #112]	; 0x70
    size_t i = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (; (i + 4) <= n; i += 4) {
 80065ae:	e01e      	b.n	80065ee <mbedtls_camellia_crypt_cbc+0xb4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 80065b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b4:	4413      	add	r3, r2
 80065b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80065b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065ba:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80065bc:	61bb      	str	r3, [r7, #24]
    return r;
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80065c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c4:	440b      	add	r3, r1
 80065c6:	667b      	str	r3, [r7, #100]	; 0x64
 80065c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ca:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80065cc:	617b      	str	r3, [r7, #20]
    return r;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	4053      	eors	r3, r2
 80065d2:	663b      	str	r3, [r7, #96]	; 0x60
        mbedtls_put_unaligned_uint32(r + i, x);
 80065d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80065d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d8:	4413      	add	r3, r2
 80065da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 80065e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065e4:	601a      	str	r2, [r3, #0]
}
 80065e6:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80065e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ea:	3304      	adds	r3, #4
 80065ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f0:	3304      	adds	r3, #4
 80065f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d2db      	bcs.n	80065b0 <mbedtls_camellia_crypt_cbc+0x76>
    for (; i < n; i++) {
 80065f8:	e010      	b.n	800661c <mbedtls_camellia_crypt_cbc+0xe2>
        r[i] = a[i] ^ b[i];
 80065fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fe:	4413      	add	r3, r2
 8006600:	7819      	ldrb	r1, [r3, #0]
 8006602:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006606:	4413      	add	r3, r2
 8006608:	781a      	ldrb	r2, [r3, #0]
 800660a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800660c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660e:	4403      	add	r3, r0
 8006610:	404a      	eors	r2, r1
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8006616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006618:	3301      	adds	r3, #1
 800661a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800661c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800661e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006620:	429a      	cmp	r2, r3
 8006622:	d8ea      	bhi.n	80065fa <mbedtls_camellia_crypt_cbc+0xc0>
}
 8006624:	bf00      	nop

            mbedtls_xor(output, output, iv, 16);

            memcpy(iv, temp, 16);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	461d      	mov	r5, r3
 800662a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800662e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006630:	6028      	str	r0, [r5, #0]
 8006632:	6069      	str	r1, [r5, #4]
 8006634:	60aa      	str	r2, [r5, #8]
 8006636:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8006638:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800663c:	3310      	adds	r3, #16
 800663e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            output += 16;
 8006642:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006646:	3310      	adds	r3, #16
 8006648:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            length -= 16;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3b10      	subs	r3, #16
 8006650:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d18d      	bne.n	8006574 <mbedtls_camellia_crypt_cbc+0x3a>
 8006658:	e065      	b.n	8006726 <mbedtls_camellia_crypt_cbc+0x1ec>
 800665a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800665e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006664:	657b      	str	r3, [r7, #84]	; 0x54
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	653b      	str	r3, [r7, #80]	; 0x50
 800666a:	2310      	movs	r3, #16
 800666c:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t i = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	64bb      	str	r3, [r7, #72]	; 0x48
    for (; (i + 4) <= n; i += 4) {
 8006672:	e01e      	b.n	80066b2 <mbedtls_camellia_crypt_cbc+0x178>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8006674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006678:	4413      	add	r3, r2
 800667a:	647b      	str	r3, [r7, #68]	; 0x44
 800667c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800667e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8006682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006684:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006688:	440b      	add	r3, r1
 800668a:	643b      	str	r3, [r7, #64]	; 0x40
 800668c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800668e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006690:	623b      	str	r3, [r7, #32]
    return r;
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	4053      	eors	r3, r2
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
        mbedtls_put_unaligned_uint32(r + i, x);
 8006698:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800669a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800669c:	4413      	add	r3, r2
 800669e:	63bb      	str	r3, [r7, #56]	; 0x38
 80066a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a2:	61fb      	str	r3, [r7, #28]
 80066a4:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	601a      	str	r2, [r3, #0]
}
 80066aa:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80066ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ae:	3304      	adds	r3, #4
 80066b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80066b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b4:	3304      	adds	r3, #4
 80066b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d2db      	bcs.n	8006674 <mbedtls_camellia_crypt_cbc+0x13a>
    for (; i < n; i++) {
 80066bc:	e010      	b.n	80066e0 <mbedtls_camellia_crypt_cbc+0x1a6>
        r[i] = a[i] ^ b[i];
 80066be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c2:	4413      	add	r3, r2
 80066c4:	7819      	ldrb	r1, [r3, #0]
 80066c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ca:	4413      	add	r3, r2
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80066d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d2:	4403      	add	r3, r0
 80066d4:	404a      	eors	r2, r1
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80066da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066dc:	3301      	adds	r3, #1
 80066de:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d8ea      	bhi.n	80066be <mbedtls_camellia_crypt_cbc+0x184>
}
 80066e8:	bf00      	nop
        }
    } else {
        while (length > 0) {
            mbedtls_xor(output, input, iv, 16);

            mbedtls_camellia_crypt_ecb(ctx, mode, output, output);
 80066ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80066ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f7ff fe07 	bl	8006308 <mbedtls_camellia_crypt_ecb>
            memcpy(iv, output, 16);
 80066fa:	2210      	movs	r2, #16
 80066fc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006700:	6838      	ldr	r0, [r7, #0]
 8006702:	f00a fae6 	bl	8010cd2 <memcpy>

            input  += 16;
 8006706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800670a:	3310      	adds	r3, #16
 800670c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            output += 16;
 8006710:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006714:	3310      	adds	r3, #16
 8006716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            length -= 16;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3b10      	subs	r3, #16
 800671e:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d199      	bne.n	800665a <mbedtls_camellia_crypt_cbc+0x120>
        }
    }

    return 0;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3780      	adds	r7, #128	; 0x80
 800672c:	46bd      	mov	sp, r7
 800672e:	bdb0      	pop	{r4, r5, r7, pc}

08006730 <mbedtls_camellia_crypt_cfb128>:
                                  size_t length,
                                  size_t *iv_off,
                                  unsigned char iv[16],
                                  const unsigned char *input,
                                  unsigned char *output)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	603b      	str	r3, [r7, #0]
    int c;
    size_t n;
    if (mode != MBEDTLS_CAMELLIA_ENCRYPT && mode != MBEDTLS_CAMELLIA_DECRYPT) {
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d005      	beq.n	8006750 <mbedtls_camellia_crypt_cfb128+0x20>
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <mbedtls_camellia_crypt_cfb128+0x20>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 800674a:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800674e:	e063      	b.n	8006818 <mbedtls_camellia_crypt_cfb128+0xe8>
    }

    n = *iv_off;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	617b      	str	r3, [r7, #20]
    if (n >= 16) {
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b0f      	cmp	r3, #15
 800675a:	d902      	bls.n	8006762 <mbedtls_camellia_crypt_cfb128+0x32>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 800675c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006760:	e05a      	b.n	8006818 <mbedtls_camellia_crypt_cfb128+0xe8>
    }

    if (mode == MBEDTLS_CAMELLIA_DECRYPT) {
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d14e      	bne.n	8006806 <mbedtls_camellia_crypt_cfb128+0xd6>
        while (length--) {
 8006768:	e026      	b.n	80067b8 <mbedtls_camellia_crypt_cfb128+0x88>
            if (n == 0) {
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d105      	bne.n	800677c <mbedtls_camellia_crypt_cfb128+0x4c>
                mbedtls_camellia_crypt_ecb(ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv);
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	6a3a      	ldr	r2, [r7, #32]
 8006774:	2101      	movs	r1, #1
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff fdc6 	bl	8006308 <mbedtls_camellia_crypt_ecb>
            }

            c = *input++;
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	627a      	str	r2, [r7, #36]	; 0x24
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	613b      	str	r3, [r7, #16]
            *output++ = (unsigned char) (c ^ iv[n]);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	b25a      	sxtb	r2, r3
 800678a:	6a39      	ldr	r1, [r7, #32]
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	440b      	add	r3, r1
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	b25b      	sxtb	r3, r3
 8006794:	4053      	eors	r3, r2
 8006796:	b259      	sxtb	r1, r3
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	62ba      	str	r2, [r7, #40]	; 0x28
 800679e:	b2ca      	uxtb	r2, r1
 80067a0:	701a      	strb	r2, [r3, #0]
            iv[n] = (unsigned char) c;
 80067a2:	6a3a      	ldr	r2, [r7, #32]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	4413      	add	r3, r2
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	701a      	strb	r2, [r3, #0]

            n = (n + 1) & 0x0F;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	3301      	adds	r3, #1
 80067b2:	f003 030f 	and.w	r3, r3, #15
 80067b6:	617b      	str	r3, [r7, #20]
        while (length--) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	1e5a      	subs	r2, r3, #1
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1d3      	bne.n	800676a <mbedtls_camellia_crypt_cfb128+0x3a>
 80067c2:	e025      	b.n	8006810 <mbedtls_camellia_crypt_cfb128+0xe0>
        }
    } else {
        while (length--) {
            if (n == 0) {
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d105      	bne.n	80067d6 <mbedtls_camellia_crypt_cfb128+0xa6>
                mbedtls_camellia_crypt_ecb(ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv);
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	6a3a      	ldr	r2, [r7, #32]
 80067ce:	2101      	movs	r1, #1
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f7ff fd99 	bl	8006308 <mbedtls_camellia_crypt_ecb>
            }

            iv[n] = *output++ = (unsigned char) (iv[n] ^ *input++);
 80067d6:	6a3a      	ldr	r2, [r7, #32]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	4413      	add	r3, r2
 80067dc:	7819      	ldrb	r1, [r3, #0]
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	627a      	str	r2, [r7, #36]	; 0x24
 80067e4:	781a      	ldrb	r2, [r3, #0]
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	1c58      	adds	r0, r3, #1
 80067ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80067ec:	404a      	eors	r2, r1
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	6a39      	ldr	r1, [r7, #32]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	440a      	add	r2, r1
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	7013      	strb	r3, [r2, #0]

            n = (n + 1) & 0x0F;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	3301      	adds	r3, #1
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	617b      	str	r3, [r7, #20]
        while (length--) {
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	1e5a      	subs	r2, r3, #1
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1d9      	bne.n	80067c4 <mbedtls_camellia_crypt_cfb128+0x94>
        }
    }

    *iv_off = n;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	601a      	str	r2, [r3, #0]

    return 0;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <mbedtls_camellia_crypt_ctr>:
                               size_t *nc_off,
                               unsigned char nonce_counter[16],
                               unsigned char stream_block[16],
                               const unsigned char *input,
                               unsigned char *output)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
    int c, i;
    size_t n;

    n = *nc_off;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	61bb      	str	r3, [r7, #24]
    if (n >= 16) {
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	2b0f      	cmp	r3, #15
 8006838:	d939      	bls.n	80068ae <mbedtls_camellia_crypt_ctr+0x8e>
        return MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA;
 800683a:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800683e:	e03f      	b.n	80068c0 <mbedtls_camellia_crypt_ctr+0xa0>
    }

    while (length--) {
        if (n == 0) {
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d11b      	bne.n	800687e <mbedtls_camellia_crypt_ctr+0x5e>
            mbedtls_camellia_crypt_ecb(ctx, MBEDTLS_CAMELLIA_ENCRYPT, nonce_counter,
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	2101      	movs	r1, #1
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff fd5b 	bl	8006308 <mbedtls_camellia_crypt_ecb>
                                       stream_block);

            for (i = 16; i > 0; i--) {
 8006852:	2310      	movs	r3, #16
 8006854:	61fb      	str	r3, [r7, #28]
 8006856:	e00d      	b.n	8006874 <mbedtls_camellia_crypt_ctr+0x54>
                if (++nonce_counter[i - 1] != 0) {
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	3b01      	subs	r3, #1
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	4413      	add	r3, r2
 8006860:	781a      	ldrb	r2, [r3, #0]
 8006862:	3201      	adds	r2, #1
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <mbedtls_camellia_crypt_ctr+0x5c>
            for (i = 16; i > 0; i--) {
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	3b01      	subs	r3, #1
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	dcee      	bgt.n	8006858 <mbedtls_camellia_crypt_ctr+0x38>
 800687a:	e000      	b.n	800687e <mbedtls_camellia_crypt_ctr+0x5e>
                    break;
 800687c:	bf00      	nop
                }
            }
        }
        c = *input++;
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char) (c ^ stream_block[n]);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	b25a      	sxtb	r2, r3
 800688c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	440b      	add	r3, r1
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	b25b      	sxtb	r3, r3
 8006896:	4053      	eors	r3, r2
 8006898:	b259      	sxtb	r1, r3
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	633a      	str	r2, [r7, #48]	; 0x30
 80068a0:	b2ca      	uxtb	r2, r1
 80068a2:	701a      	strb	r2, [r3, #0]

        n = (n + 1) & 0x0F;
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	3301      	adds	r3, #1
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	61bb      	str	r3, [r7, #24]
    while (length--) {
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	1e5a      	subs	r2, r3, #1
 80068b2:	60ba      	str	r2, [r7, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1c3      	bne.n	8006840 <mbedtls_camellia_crypt_ctr+0x20>
    }

    *nc_off = n;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	601a      	str	r2, [r3, #0]

    return 0;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3720      	adds	r7, #32
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <mbedtls_cipher_info_get_block_size>:
 * \return       \c 1 if the cipher is a stream cipher.
 * \return       \c 0 if \p info is \c NULL.
 */
static inline size_t mbedtls_cipher_info_get_block_size(
    const mbedtls_cipher_info_t *info)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <mbedtls_cipher_info_get_block_size+0x12>
        return 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e004      	b.n	80068e4 <mbedtls_cipher_info_get_block_size+0x1c>
    }

    return (size_t) (info->MBEDTLS_PRIVATE(block_size));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	791b      	ldrb	r3, [r3, #4]
 80068de:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80068e2:	b2db      	uxtb	r3, r3
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <mbedtls_ccm_init>:

/*
 * Initialize context
 */
void mbedtls_ccm_init(mbedtls_ccm_context *ctx)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_ccm_context));
 80068f8:	2280      	movs	r2, #128	; 0x80
 80068fa:	2100      	movs	r1, #0
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f00a f95d 	bl	8010bbc <memset>
}
 8006902:	bf00      	nop
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <mbedtls_ccm_setkey>:

int mbedtls_ccm_setkey(mbedtls_ccm_context *ctx,
                       mbedtls_cipher_id_t cipher,
                       const unsigned char *key,
                       unsigned int keybits)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b086      	sub	sp, #24
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	603b      	str	r3, [r7, #0]
 8006916:	460b      	mov	r3, r1
 8006918:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800691a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800691e:	617b      	str	r3, [r7, #20]
        return MBEDTLS_ERR_CCM_BAD_INPUT;
    }
#else
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values(cipher, keybits,
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	7afb      	ldrb	r3, [r7, #11]
 8006924:	2201      	movs	r2, #1
 8006926:	4618      	mov	r0, r3
 8006928:	f000 ff24 	bl	8007774 <mbedtls_cipher_info_from_values>
 800692c:	6138      	str	r0, [r7, #16]
                                                  MBEDTLS_MODE_ECB);
    if (cipher_info == NULL) {
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d102      	bne.n	800693a <mbedtls_ccm_setkey+0x30>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 8006934:	f06f 030c 	mvn.w	r3, #12
 8006938:	e028      	b.n	800698c <mbedtls_ccm_setkey+0x82>
    }

    if (mbedtls_cipher_info_get_block_size(cipher_info) != 16) {
 800693a:	6938      	ldr	r0, [r7, #16]
 800693c:	f7ff ffc4 	bl	80068c8 <mbedtls_cipher_info_get_block_size>
 8006940:	4603      	mov	r3, r0
 8006942:	2b10      	cmp	r3, #16
 8006944:	d002      	beq.n	800694c <mbedtls_ccm_setkey+0x42>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 8006946:	f06f 030c 	mvn.w	r3, #12
 800694a:	e01f      	b.n	800698c <mbedtls_ccm_setkey+0x82>
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3338      	adds	r3, #56	; 0x38
 8006950:	4618      	mov	r0, r3
 8006952:	f000 ff56 	bl	8007802 <mbedtls_cipher_free>

    if ((ret = mbedtls_cipher_setup(&ctx->cipher_ctx, cipher_info)) != 0) {
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3338      	adds	r3, #56	; 0x38
 800695a:	6939      	ldr	r1, [r7, #16]
 800695c:	4618      	mov	r0, r3
 800695e:	f000 ff79 	bl	8007854 <mbedtls_cipher_setup>
 8006962:	6178      	str	r0, [r7, #20]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <mbedtls_ccm_setkey+0x64>
        return ret;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	e00e      	b.n	800698c <mbedtls_ccm_setkey+0x82>
    }

    if ((ret = mbedtls_cipher_setkey(&ctx->cipher_ctx, key, keybits,
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	2301      	movs	r3, #1
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	f000 ff9d 	bl	80078b8 <mbedtls_cipher_setkey>
 800697e:	6178      	str	r0, [r7, #20]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <mbedtls_ccm_setkey+0x80>
                                     MBEDTLS_ENCRYPT)) != 0) {
        return ret;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	e000      	b.n	800698c <mbedtls_ccm_setkey+0x82>
    }
#endif

    return ret;
 800698a:	697b      	ldr	r3, [r7, #20]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <mbedtls_ccm_free>:

/*
 * Free context
 */
void mbedtls_ccm_free(mbedtls_ccm_context *ctx)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <mbedtls_ccm_free+0x22>
        return;
    }
#if defined(MBEDTLS_BLOCK_CIPHER_C)
    mbedtls_block_cipher_free(&ctx->block_cipher_ctx);
#else
    mbedtls_cipher_free(&ctx->cipher_ctx);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3338      	adds	r3, #56	; 0x38
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 ff2b 	bl	8007802 <mbedtls_cipher_free>
#endif
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_ccm_context));
 80069ac:	2180      	movs	r1, #128	; 0x80
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f004 fe82 	bl	800b6b8 <mbedtls_platform_zeroize>
 80069b4:	e000      	b.n	80069b8 <mbedtls_ccm_free+0x24>
        return;
 80069b6:	bf00      	nop
}
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <mbedtls_ccm_crypt>:
 */
static int mbedtls_ccm_crypt(mbedtls_ccm_context *ctx,
                             size_t offset, size_t use_len,
                             const unsigned char *input,
                             unsigned char *output)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b098      	sub	sp, #96	; 0x60
 80069c2:	af02      	add	r7, sp, #8
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
 80069ca:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80069cc:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80069d0:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char tmp_buf[16] = { 0 };
 80069d2:	2300      	movs	r3, #0
 80069d4:	623b      	str	r3, [r7, #32]
 80069d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	605a      	str	r2, [r3, #4]
 80069e0:	609a      	str	r2, [r3, #8]

#if defined(MBEDTLS_BLOCK_CIPHER_C)
    ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, ctx->ctr, tmp_buf);
#else
    size_t olen = 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	61fb      	str	r3, [r7, #28]
    ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->ctr, 16, tmp_buf, &olen);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f103 0110 	add.w	r1, r3, #16
 80069f2:	f107 0220 	add.w	r2, r7, #32
 80069f6:	f107 031c 	add.w	r3, r7, #28
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	2210      	movs	r2, #16
 8006a00:	f000 ffd2 	bl	80079a8 <mbedtls_cipher_update>
 8006a04:	6578      	str	r0, [r7, #84]	; 0x54
#endif
    if (ret != 0) {
 8006a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00d      	beq.n	8006a28 <mbedtls_ccm_crypt+0x6a>
        ctx->state |= CCM_STATE__ERROR;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a10:	f043 0210 	orr.w	r2, r3, #16
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	67da      	str	r2, [r3, #124]	; 0x7c
        mbedtls_platform_zeroize(tmp_buf, sizeof(tmp_buf));
 8006a18:	f107 0320 	add.w	r3, r7, #32
 8006a1c:	2110      	movs	r1, #16
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f004 fe4a 	bl	800b6b8 <mbedtls_platform_zeroize>
        return ret;
 8006a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a26:	e04f      	b.n	8006ac8 <mbedtls_ccm_crypt+0x10a>
    }

    mbedtls_xor(output, input, tmp_buf + offset, use_len);
 8006a28:	f107 0220 	add.w	r2, r7, #32
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4413      	add	r3, r2
 8006a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a32:	653a      	str	r2, [r7, #80]	; 0x50
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	643b      	str	r3, [r7, #64]	; 0x40
    for (; (i + 4) <= n; i += 4) {
 8006a42:	e01e      	b.n	8006a82 <mbedtls_ccm_crypt+0xc4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8006a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a48:	4413      	add	r3, r2
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006a50:	61bb      	str	r3, [r7, #24]
    return r;
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a58:	440b      	add	r3, r1
 8006a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006a60:	617b      	str	r3, [r7, #20]
    return r;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	4053      	eors	r3, r2
 8006a66:	637b      	str	r3, [r7, #52]	; 0x34
        mbedtls_put_unaligned_uint32(r + i, x);
 8006a68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a6c:	4413      	add	r3, r2
 8006a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	601a      	str	r2, [r3, #0]
}
 8006a7a:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8006a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a7e:	3304      	adds	r3, #4
 8006a80:	643b      	str	r3, [r7, #64]	; 0x40
 8006a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a84:	3304      	adds	r3, #4
 8006a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d2db      	bcs.n	8006a44 <mbedtls_ccm_crypt+0x86>
    for (; i < n; i++) {
 8006a8c:	e010      	b.n	8006ab0 <mbedtls_ccm_crypt+0xf2>
        r[i] = a[i] ^ b[i];
 8006a8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a92:	4413      	add	r3, r2
 8006a94:	7819      	ldrb	r1, [r3, #0]
 8006a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9a:	4413      	add	r3, r2
 8006a9c:	781a      	ldrb	r2, [r3, #0]
 8006a9e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa2:	4403      	add	r3, r0
 8006aa4:	404a      	eors	r2, r1
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8006aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aac:	3301      	adds	r3, #1
 8006aae:	643b      	str	r3, [r7, #64]	; 0x40
 8006ab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d8ea      	bhi.n	8006a8e <mbedtls_ccm_crypt+0xd0>
}
 8006ab8:	bf00      	nop

    mbedtls_platform_zeroize(tmp_buf, sizeof(tmp_buf));
 8006aba:	f107 0320 	add.w	r3, r7, #32
 8006abe:	2110      	movs	r1, #16
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f004 fdf9 	bl	800b6b8 <mbedtls_platform_zeroize>
    return ret;
 8006ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3758      	adds	r7, #88	; 0x58
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <mbedtls_ccm_update>:

int mbedtls_ccm_update(mbedtls_ccm_context *ctx,
                       const unsigned char *input, size_t input_len,
                       unsigned char *output, size_t output_size,
                       size_t *output_len)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b0a8      	sub	sp, #160	; 0xa0
 8006ad4:	af02      	add	r7, sp, #8
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8006ade:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8006ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    size_t olen;
#endif

    unsigned char local_output[16];

    if (ctx->state & CCM_STATE__ERROR) {
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aea:	f003 0310 	and.w	r3, r3, #16
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <mbedtls_ccm_update+0x28>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 8006af2:	f06f 030c 	mvn.w	r3, #12
 8006af6:	e1b1      	b.n	8006e5c <mbedtls_ccm_update+0x38c>
    }

    /* Check against plaintext length only if performing operation with
     * authentication
     */
    if (ctx->tag_len != 0 && ctx->processed + input_len > ctx->plaintext_len) {
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00a      	beq.n	8006b16 <mbedtls_ccm_update+0x46>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	441a      	add	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d902      	bls.n	8006b16 <mbedtls_ccm_update+0x46>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 8006b10:	f06f 030c 	mvn.w	r3, #12
 8006b14:	e1a2      	b.n	8006e5c <mbedtls_ccm_update+0x38c>
    }

    if (output_size < input_len) {
 8006b16:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d202      	bcs.n	8006b26 <mbedtls_ccm_update+0x56>
        return MBEDTLS_ERR_CCM_BAD_INPUT;
 8006b20:	f06f 030c 	mvn.w	r3, #12
 8006b24:	e19a      	b.n	8006e5c <mbedtls_ccm_update+0x38c>
    }
    *output_len = input_len;
 8006b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	601a      	str	r2, [r3, #0]

    ret = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    while (input_len > 0) {
 8006b34:	e182      	b.n	8006e3c <mbedtls_ccm_update+0x36c>
        offset = ctx->processed % 16;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        use_len = 16 - offset;
 8006b42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b46:	f1c3 0310 	rsb	r3, r3, #16
 8006b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        if (use_len > input_len) {
 8006b4e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d902      	bls.n	8006b5e <mbedtls_ccm_update+0x8e>
            use_len = input_len;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        ctx->processed += use_len;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b66:	441a      	add	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	62da      	str	r2, [r3, #44]	; 0x2c

        if (ctx->mode == MBEDTLS_CCM_ENCRYPT || \
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d004      	beq.n	8006b7e <mbedtls_ccm_update+0xae>
            ctx->mode == MBEDTLS_CCM_STAR_ENCRYPT) {
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (ctx->mode == MBEDTLS_CCM_ENCRYPT || \
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	f040 808a 	bne.w	8006c92 <mbedtls_ccm_update+0x1c2>
            mbedtls_xor(ctx->y + offset, ctx->y + offset, input, use_len);
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b84:	441a      	add	r2, r3
 8006b86:	68f9      	ldr	r1, [r7, #12]
 8006b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b8c:	440b      	add	r3, r1
 8006b8e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006b92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b9e:	67bb      	str	r3, [r7, #120]	; 0x78
    size_t i = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	677b      	str	r3, [r7, #116]	; 0x74
    for (; (i + 4) <= n; i += 4) {
 8006ba4:	e020      	b.n	8006be8 <mbedtls_ccm_update+0x118>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8006ba6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bac:	4413      	add	r3, r2
 8006bae:	673b      	str	r3, [r7, #112]	; 0x70
 8006bb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bb2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006bb4:	61fb      	str	r3, [r7, #28]
    return r;
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bbc:	440b      	add	r3, r1
 8006bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006bc4:	61bb      	str	r3, [r7, #24]
    return r;
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	4053      	eors	r3, r2
 8006bca:	66bb      	str	r3, [r7, #104]	; 0x68
        mbedtls_put_unaligned_uint32(r + i, x);
 8006bcc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd2:	4413      	add	r3, r2
 8006bd4:	667b      	str	r3, [r7, #100]	; 0x64
 8006bd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8006bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bde:	601a      	str	r2, [r3, #0]
}
 8006be0:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8006be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006be4:	3304      	adds	r3, #4
 8006be6:	677b      	str	r3, [r7, #116]	; 0x74
 8006be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bea:	3304      	adds	r3, #4
 8006bec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d2d9      	bcs.n	8006ba6 <mbedtls_ccm_update+0xd6>
    for (; i < n; i++) {
 8006bf2:	e012      	b.n	8006c1a <mbedtls_ccm_update+0x14a>
        r[i] = a[i] ^ b[i];
 8006bf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bfa:	4413      	add	r3, r2
 8006bfc:	7819      	ldrb	r1, [r3, #0]
 8006bfe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c02:	4413      	add	r3, r2
 8006c04:	781a      	ldrb	r2, [r3, #0]
 8006c06:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8006c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c0c:	4403      	add	r3, r0
 8006c0e:	404a      	eors	r2, r1
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8006c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c16:	3301      	adds	r3, #1
 8006c18:	677b      	str	r3, [r7, #116]	; 0x74
 8006c1a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d8e8      	bhi.n	8006bf4 <mbedtls_ccm_update+0x124>
}
 8006c22:	bf00      	nop

            if (use_len + offset == 16 || ctx->processed == ctx->plaintext_len) {
 8006c24:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c2c:	4413      	add	r3, r2
 8006c2e:	2b10      	cmp	r3, #16
 8006c30:	d005      	beq.n	8006c3e <mbedtls_ccm_update+0x16e>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d118      	bne.n	8006c70 <mbedtls_ccm_update+0x1a0>
#if defined(MBEDTLS_BLOCK_CIPHER_C)
                ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, ctx->y, ctx->y);
#else
                ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16, ctx->y, &olen);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006c44:	68f9      	ldr	r1, [r7, #12]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	2210      	movs	r2, #16
 8006c52:	f000 fea9 	bl	80079a8 <mbedtls_cipher_update>
 8006c56:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
#endif
                if (ret != 0) {
 8006c5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d006      	beq.n	8006c70 <mbedtls_ccm_update+0x1a0>
                    ctx->state |= CCM_STATE__ERROR;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c66:	f043 0210 	orr.w	r2, r3, #16
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	67da      	str	r2, [r3, #124]	; 0x7c
                    goto exit;
 8006c6e:	e0ed      	b.n	8006e4c <mbedtls_ccm_update+0x37c>
                }
            }

            ret = mbedtls_ccm_crypt(ctx, offset, use_len, input, output);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006c7a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff fe9d 	bl	80069be <mbedtls_ccm_crypt>
 8006c84:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret != 0) {
 8006c88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f040 80da 	bne.w	8006e46 <mbedtls_ccm_update+0x376>
                goto exit;
            }
        }

        if (ctx->mode == MBEDTLS_CCM_DECRYPT || \
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d004      	beq.n	8006ca4 <mbedtls_ccm_update+0x1d4>
            ctx->mode == MBEDTLS_CCM_STAR_DECRYPT) {
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (ctx->mode == MBEDTLS_CCM_DECRYPT || \
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	f040 808e 	bne.w	8006dc0 <mbedtls_ccm_update+0x2f0>
             * it will contain what we wrote to it. Therefore, we should avoid using
             * it as input to any operations.
             * Write decrypted data to local_output to avoid using output variable as
             * input in the XOR operation for Y.
             */
            ret = mbedtls_ccm_crypt(ctx, offset, use_len, input, local_output);
 8006ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006cb0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7ff fe82 	bl	80069be <mbedtls_ccm_crypt>
 8006cba:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret != 0) {
 8006cbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 80c1 	bne.w	8006e4a <mbedtls_ccm_update+0x37a>
                goto exit;
            }

            mbedtls_xor(ctx->y + offset, ctx->y + offset, local_output, use_len);
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cce:	441a      	add	r2, r3
 8006cd0:	68f9      	ldr	r1, [r7, #12]
 8006cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cd6:	440b      	add	r3, r1
 8006cd8:	663a      	str	r2, [r7, #96]	; 0x60
 8006cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ce0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ce6:	657b      	str	r3, [r7, #84]	; 0x54
    size_t i = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	653b      	str	r3, [r7, #80]	; 0x50
    for (; (i + 4) <= n; i += 4) {
 8006cec:	e01e      	b.n	8006d2c <mbedtls_ccm_update+0x25c>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8006cee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf2:	4413      	add	r3, r2
 8006cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8006cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cfe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d02:	440b      	add	r3, r1
 8006d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d08:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	4053      	eors	r3, r2
 8006d10:	647b      	str	r3, [r7, #68]	; 0x44
        mbedtls_put_unaligned_uint32(r + i, x);
 8006d12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d16:	4413      	add	r3, r2
 8006d18:	643b      	str	r3, [r7, #64]	; 0x40
 8006d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1c:	623b      	str	r3, [r7, #32]
 8006d1e:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8006d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d22:	601a      	str	r2, [r3, #0]
}
 8006d24:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8006d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d28:	3304      	adds	r3, #4
 8006d2a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d2e:	3304      	adds	r3, #4
 8006d30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d2db      	bcs.n	8006cee <mbedtls_ccm_update+0x21e>
    for (; i < n; i++) {
 8006d36:	e010      	b.n	8006d5a <mbedtls_ccm_update+0x28a>
        r[i] = a[i] ^ b[i];
 8006d38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d3c:	4413      	add	r3, r2
 8006d3e:	7819      	ldrb	r1, [r3, #0]
 8006d40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d44:	4413      	add	r3, r2
 8006d46:	781a      	ldrb	r2, [r3, #0]
 8006d48:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d4c:	4403      	add	r3, r0
 8006d4e:	404a      	eors	r2, r1
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8006d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d56:	3301      	adds	r3, #1
 8006d58:	653b      	str	r3, [r7, #80]	; 0x50
 8006d5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d8ea      	bhi.n	8006d38 <mbedtls_ccm_update+0x268>
}
 8006d62:	bf00      	nop

            memcpy(output, local_output, use_len);
 8006d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d68:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6838      	ldr	r0, [r7, #0]
 8006d70:	f009 ffaf 	bl	8010cd2 <memcpy>

            if (use_len + offset == 16 || ctx->processed == ctx->plaintext_len) {
 8006d74:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d7c:	4413      	add	r3, r2
 8006d7e:	2b10      	cmp	r3, #16
 8006d80:	d005      	beq.n	8006d8e <mbedtls_ccm_update+0x2be>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d118      	bne.n	8006dc0 <mbedtls_ccm_update+0x2f0>
#if defined(MBEDTLS_BLOCK_CIPHER_C)
                ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, ctx->y, ctx->y);
#else
                ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16, ctx->y, &olen);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006d94:	68f9      	ldr	r1, [r7, #12]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	2210      	movs	r2, #16
 8006da2:	f000 fe01 	bl	80079a8 <mbedtls_cipher_update>
 8006da6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
#endif
                if (ret != 0) {
 8006daa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d006      	beq.n	8006dc0 <mbedtls_ccm_update+0x2f0>
                    ctx->state |= CCM_STATE__ERROR;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006db6:	f043 0210 	orr.w	r2, r3, #16
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	67da      	str	r2, [r3, #124]	; 0x7c
                    goto exit;
 8006dbe:	e045      	b.n	8006e4c <mbedtls_ccm_update+0x37c>
                }
            }
        }

        if (use_len + offset == 16 || ctx->processed == ctx->plaintext_len) {
 8006dc0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dc8:	4413      	add	r3, r2
 8006dca:	2b10      	cmp	r3, #16
 8006dcc:	d005      	beq.n	8006dda <mbedtls_ccm_update+0x30a>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d121      	bne.n	8006e1e <mbedtls_ccm_update+0x34e>
            for (i = 0; i < ctx->q; i++) {
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8006de0:	e015      	b.n	8006e0e <mbedtls_ccm_update+0x33e>
                if (++(ctx->ctr)[15-i] != 0) {
 8006de2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8006de6:	f1c3 030f 	rsb	r3, r3, #15
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	441a      	add	r2, r3
 8006dee:	7c12      	ldrb	r2, [r2, #16]
 8006df0:	3201      	adds	r2, #1
 8006df2:	b2d1      	uxtb	r1, r2
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	441a      	add	r2, r3
 8006df8:	7411      	strb	r1, [r2, #16]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	7c1b      	ldrb	r3, [r3, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10b      	bne.n	8006e1c <mbedtls_ccm_update+0x34c>
            for (i = 0; i < ctx->q; i++) {
 8006e04:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8006e08:	3301      	adds	r3, #1
 8006e0a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8006e0e:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d3e3      	bcc.n	8006de2 <mbedtls_ccm_update+0x312>
 8006e1a:	e000      	b.n	8006e1e <mbedtls_ccm_update+0x34e>
                    break;
 8006e1c:	bf00      	nop
                }
            }
        }

        input_len -= use_len;
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	607b      	str	r3, [r7, #4]
        input += use_len;
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e2e:	4413      	add	r3, r2
 8006e30:	60bb      	str	r3, [r7, #8]
        output += use_len;
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e38:	4413      	add	r3, r2
 8006e3a:	603b      	str	r3, [r7, #0]
    while (input_len > 0) {
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f47f ae79 	bne.w	8006b36 <mbedtls_ccm_update+0x66>
    }

exit:
 8006e44:	e002      	b.n	8006e4c <mbedtls_ccm_update+0x37c>
                goto exit;
 8006e46:	bf00      	nop
 8006e48:	e000      	b.n	8006e4c <mbedtls_ccm_update+0x37c>
                goto exit;
 8006e4a:	bf00      	nop
    mbedtls_platform_zeroize(local_output, 16);
 8006e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e50:	2110      	movs	r1, #16
 8006e52:	4618      	mov	r0, r3
 8006e54:	f004 fc30 	bl	800b6b8 <mbedtls_platform_zeroize>

    return ret;
 8006e58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3798      	adds	r7, #152	; 0x98
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <chacha20_quarter_round>:
static inline void chacha20_quarter_round(uint32_t state[16],
                                          size_t a,
                                          size_t b,
                                          size_t c,
                                          size_t d)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
    /* a += b; d ^= a; d <<<= 16; */
    state[a] += state[b];
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	6819      	ldr	r1, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	4403      	add	r3, r0
 8006e8e:	440a      	add	r2, r1
 8006e90:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	6819      	ldr	r1, [r3, #0]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	4403      	add	r3, r0
 8006eae:	404a      	eors	r2, r1
 8006eb0:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32(state[d], 16);
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	68f9      	ldr	r1, [r7, #12]
 8006ec2:	440b      	add	r3, r1
 8006ec4:	ea4f 4232 	mov.w	r2, r2, ror #16
 8006ec8:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 12 */
    state[c] += state[d];
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	6819      	ldr	r1, [r3, #0]
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	4403      	add	r3, r0
 8006ee6:	440a      	add	r2, r1
 8006ee8:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	6819      	ldr	r1, [r3, #0]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4413      	add	r3, r2
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	4403      	add	r3, r0
 8006f06:	404a      	eors	r2, r1
 8006f08:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32(state[b], 12);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	68f9      	ldr	r1, [r7, #12]
 8006f1a:	440b      	add	r3, r1
 8006f1c:	ea4f 5232 	mov.w	r2, r2, ror #20
 8006f20:	601a      	str	r2, [r3, #0]

    /* a += b; d ^= a; d <<<= 8; */
    state[a] += state[b];
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	6819      	ldr	r1, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4413      	add	r3, r2
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	4403      	add	r3, r0
 8006f3e:	440a      	add	r2, r1
 8006f40:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	6819      	ldr	r1, [r3, #0]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	4403      	add	r3, r0
 8006f5e:	404a      	eors	r2, r1
 8006f60:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32(state[d], 8);
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4413      	add	r3, r2
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	68f9      	ldr	r1, [r7, #12]
 8006f72:	440b      	add	r3, r1
 8006f74:	ea4f 6232 	mov.w	r2, r2, ror #24
 8006f78:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 7; */
    state[c] += state[d];
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4413      	add	r3, r2
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	4403      	add	r3, r0
 8006f96:	440a      	add	r2, r1
 8006f98:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	6819      	ldr	r1, [r3, #0]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	4403      	add	r3, r0
 8006fb6:	404a      	eors	r2, r1
 8006fb8:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32(state[b], 7);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	68f9      	ldr	r1, [r7, #12]
 8006fca:	440b      	add	r3, r1
 8006fcc:	ea4f 6272 	mov.w	r2, r2, ror #25
 8006fd0:	601a      	str	r2, [r3, #0]
}
 8006fd2:	bf00      	nop
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <chacha20_inner_block>:
 *                  diagonal round.
 *
 * \param state     The ChaCha20 state to update.
 */
static void chacha20_inner_block(uint32_t state[16])
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af02      	add	r7, sp, #8
 8006fe4:	6078      	str	r0, [r7, #4]
    chacha20_quarter_round(state, 0, 4, 8,  12);
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	2308      	movs	r3, #8
 8006fec:	2204      	movs	r2, #4
 8006fee:	2100      	movs	r1, #0
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff ff37 	bl	8006e64 <chacha20_quarter_round>
    chacha20_quarter_round(state, 1, 5, 9,  13);
 8006ff6:	230d      	movs	r3, #13
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	2309      	movs	r3, #9
 8006ffc:	2205      	movs	r2, #5
 8006ffe:	2101      	movs	r1, #1
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff ff2f 	bl	8006e64 <chacha20_quarter_round>
    chacha20_quarter_round(state, 2, 6, 10, 14);
 8007006:	230e      	movs	r3, #14
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	230a      	movs	r3, #10
 800700c:	2206      	movs	r2, #6
 800700e:	2102      	movs	r1, #2
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff ff27 	bl	8006e64 <chacha20_quarter_round>
    chacha20_quarter_round(state, 3, 7, 11, 15);
 8007016:	230f      	movs	r3, #15
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	230b      	movs	r3, #11
 800701c:	2207      	movs	r2, #7
 800701e:	2103      	movs	r1, #3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff ff1f 	bl	8006e64 <chacha20_quarter_round>

    chacha20_quarter_round(state, 0, 5, 10, 15);
 8007026:	230f      	movs	r3, #15
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	230a      	movs	r3, #10
 800702c:	2205      	movs	r2, #5
 800702e:	2100      	movs	r1, #0
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff ff17 	bl	8006e64 <chacha20_quarter_round>
    chacha20_quarter_round(state, 1, 6, 11, 12);
 8007036:	230c      	movs	r3, #12
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	230b      	movs	r3, #11
 800703c:	2206      	movs	r2, #6
 800703e:	2101      	movs	r1, #1
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff ff0f 	bl	8006e64 <chacha20_quarter_round>
    chacha20_quarter_round(state, 2, 7, 8,  13);
 8007046:	230d      	movs	r3, #13
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	2308      	movs	r3, #8
 800704c:	2207      	movs	r2, #7
 800704e:	2102      	movs	r1, #2
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff ff07 	bl	8006e64 <chacha20_quarter_round>
    chacha20_quarter_round(state, 3, 4, 9,  14);
 8007056:	230e      	movs	r3, #14
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	2309      	movs	r3, #9
 800705c:	2204      	movs	r2, #4
 800705e:	2103      	movs	r1, #3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7ff feff 	bl	8006e64 <chacha20_quarter_round>
}
 8007066:	bf00      	nop
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <chacha20_block>:
 * \param initial_state The initial ChaCha20 state (key, nonce, counter).
 * \param keystream     Generated keystream bytes are written to this buffer.
 */
static void chacha20_block(const uint32_t initial_state[16],
                           unsigned char keystream[64])
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b096      	sub	sp, #88	; 0x58
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
    uint32_t working_state[16];
    size_t i;

    memcpy(working_state,
 8007078:	f107 030c 	add.w	r3, r7, #12
 800707c:	2240      	movs	r2, #64	; 0x40
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	4618      	mov	r0, r3
 8007082:	f009 fe26 	bl	8010cd2 <memcpy>
           initial_state,
           CHACHA20_BLOCK_SIZE_BYTES);

    for (i = 0U; i < 10U; i++) {
 8007086:	2300      	movs	r3, #0
 8007088:	657b      	str	r3, [r7, #84]	; 0x54
 800708a:	e007      	b.n	800709c <chacha20_block+0x2e>
        chacha20_inner_block(working_state);
 800708c:	f107 030c 	add.w	r3, r7, #12
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff ffa4 	bl	8006fde <chacha20_inner_block>
    for (i = 0U; i < 10U; i++) {
 8007096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007098:	3301      	adds	r3, #1
 800709a:	657b      	str	r3, [r7, #84]	; 0x54
 800709c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800709e:	2b09      	cmp	r3, #9
 80070a0:	d9f4      	bls.n	800708c <chacha20_block+0x1e>
    }

    working_state[0] += initial_state[0];
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4413      	add	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
    working_state[1] += initial_state[1];
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3304      	adds	r3, #4
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4413      	add	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]
    working_state[2] += initial_state[2];
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3308      	adds	r3, #8
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4413      	add	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]
    working_state[3] += initial_state[3];
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	330c      	adds	r3, #12
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4413      	add	r3, r2
 80070ce:	61bb      	str	r3, [r7, #24]
    working_state[4] += initial_state[4];
 80070d0:	69fa      	ldr	r2, [r7, #28]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	3310      	adds	r3, #16
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4413      	add	r3, r2
 80070da:	61fb      	str	r3, [r7, #28]
    working_state[5] += initial_state[5];
 80070dc:	6a3a      	ldr	r2, [r7, #32]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3314      	adds	r3, #20
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4413      	add	r3, r2
 80070e6:	623b      	str	r3, [r7, #32]
    working_state[6] += initial_state[6];
 80070e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3318      	adds	r3, #24
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4413      	add	r3, r2
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24
    working_state[7] += initial_state[7];
 80070f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	331c      	adds	r3, #28
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4413      	add	r3, r2
 80070fe:	62bb      	str	r3, [r7, #40]	; 0x28
    working_state[8] += initial_state[8];
 8007100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3320      	adds	r3, #32
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4413      	add	r3, r2
 800710a:	62fb      	str	r3, [r7, #44]	; 0x2c
    working_state[9] += initial_state[9];
 800710c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3324      	adds	r3, #36	; 0x24
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4413      	add	r3, r2
 8007116:	633b      	str	r3, [r7, #48]	; 0x30
    working_state[10] += initial_state[10];
 8007118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3328      	adds	r3, #40	; 0x28
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4413      	add	r3, r2
 8007122:	637b      	str	r3, [r7, #52]	; 0x34
    working_state[11] += initial_state[11];
 8007124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	332c      	adds	r3, #44	; 0x2c
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4413      	add	r3, r2
 800712e:	63bb      	str	r3, [r7, #56]	; 0x38
    working_state[12] += initial_state[12];
 8007130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3330      	adds	r3, #48	; 0x30
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4413      	add	r3, r2
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
    working_state[13] += initial_state[13];
 800713c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3334      	adds	r3, #52	; 0x34
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4413      	add	r3, r2
 8007146:	643b      	str	r3, [r7, #64]	; 0x40
    working_state[14] += initial_state[14];
 8007148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3338      	adds	r3, #56	; 0x38
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4413      	add	r3, r2
 8007152:	647b      	str	r3, [r7, #68]	; 0x44
    working_state[15] += initial_state[15];
 8007154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	333c      	adds	r3, #60	; 0x3c
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4413      	add	r3, r2
 800715e:	64bb      	str	r3, [r7, #72]	; 0x48

    for (i = 0U; i < 16; i++) {
 8007160:	2300      	movs	r3, #0
 8007162:	657b      	str	r3, [r7, #84]	; 0x54
 8007164:	e014      	b.n	8007190 <chacha20_block+0x122>
        size_t offset = i * 4U;
 8007166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	653b      	str	r3, [r7, #80]	; 0x50

        MBEDTLS_PUT_UINT32_LE(working_state[i], keystream, offset);
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007170:	441a      	add	r2, r3
 8007172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	3358      	adds	r3, #88	; 0x58
 8007178:	443b      	add	r3, r7
 800717a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800717e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007180:	60bb      	str	r3, [r7, #8]
 8007182:	68ba      	ldr	r2, [r7, #8]
    memcpy(p, &x, sizeof(x));
 8007184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007186:	601a      	str	r2, [r3, #0]
}
 8007188:	bf00      	nop
    for (i = 0U; i < 16; i++) {
 800718a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800718c:	3301      	adds	r3, #1
 800718e:	657b      	str	r3, [r7, #84]	; 0x54
 8007190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007192:	2b0f      	cmp	r3, #15
 8007194:	d9e7      	bls.n	8007166 <chacha20_block+0xf8>
    }

    mbedtls_platform_zeroize(working_state, sizeof(working_state));
 8007196:	f107 030c 	add.w	r3, r7, #12
 800719a:	2140      	movs	r1, #64	; 0x40
 800719c:	4618      	mov	r0, r3
 800719e:	f004 fa8b 	bl	800b6b8 <mbedtls_platform_zeroize>
}
 80071a2:	bf00      	nop
 80071a4:	3758      	adds	r7, #88	; 0x58
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <mbedtls_chacha20_init>:

void mbedtls_chacha20_init(mbedtls_chacha20_context *ctx)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
    mbedtls_platform_zeroize(ctx->state, sizeof(ctx->state));
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2140      	movs	r1, #64	; 0x40
 80071b6:	4618      	mov	r0, r3
 80071b8:	f004 fa7e 	bl	800b6b8 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(ctx->keystream8, sizeof(ctx->keystream8));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3340      	adds	r3, #64	; 0x40
 80071c0:	2140      	movs	r1, #64	; 0x40
 80071c2:	4618      	mov	r0, r3
 80071c4:	f004 fa78 	bl	800b6b8 <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2240      	movs	r2, #64	; 0x40
 80071cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <mbedtls_chacha20_free>:

void mbedtls_chacha20_free(mbedtls_chacha20_context *ctx)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
    if (ctx != NULL) {
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <mbedtls_chacha20_free+0x16>
        mbedtls_platform_zeroize(ctx, sizeof(mbedtls_chacha20_context));
 80071e6:	2184      	movs	r1, #132	; 0x84
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f004 fa65 	bl	800b6b8 <mbedtls_platform_zeroize>
    }
}
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <mbedtls_chacha20_setkey>:

int mbedtls_chacha20_setkey(mbedtls_chacha20_context *ctx,
                            const unsigned char key[32])
{
 80071f8:	b480      	push	{r7}
 80071fa:	b093      	sub	sp, #76	; 0x4c
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
    /* ChaCha20 constants - the string "expand 32-byte k" */
    ctx->state[0] = 0x61707865;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a2c      	ldr	r2, [pc, #176]	; (80072b8 <mbedtls_chacha20_setkey+0xc0>)
 8007206:	601a      	str	r2, [r3, #0]
    ctx->state[1] = 0x3320646e;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a2c      	ldr	r2, [pc, #176]	; (80072bc <mbedtls_chacha20_setkey+0xc4>)
 800720c:	605a      	str	r2, [r3, #4]
    ctx->state[2] = 0x79622d32;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a2b      	ldr	r2, [pc, #172]	; (80072c0 <mbedtls_chacha20_setkey+0xc8>)
 8007212:	609a      	str	r2, [r3, #8]
    ctx->state[3] = 0x6b206574;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a2b      	ldr	r2, [pc, #172]	; (80072c4 <mbedtls_chacha20_setkey+0xcc>)
 8007218:	60da      	str	r2, [r3, #12]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	62bb      	str	r3, [r7, #40]	; 0x28
 800721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007220:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8007224:	6a7a      	ldr	r2, [r7, #36]	; 0x24

    /* Set key */
    ctx->state[4]  = MBEDTLS_GET_UINT32_LE(key, 0);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	611a      	str	r2, [r3, #16]
    ctx->state[5]  = MBEDTLS_GET_UINT32_LE(key, 4);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	3304      	adds	r3, #4
 800722e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007232:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007234:	623b      	str	r3, [r7, #32]
    return r;
 8007236:	6a3a      	ldr	r2, [r7, #32]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	615a      	str	r2, [r3, #20]
    ctx->state[6]  = MBEDTLS_GET_UINT32_LE(key, 8);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	3308      	adds	r3, #8
 8007240:	633b      	str	r3, [r7, #48]	; 0x30
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007246:	61fb      	str	r3, [r7, #28]
    return r;
 8007248:	69fa      	ldr	r2, [r7, #28]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	619a      	str	r2, [r3, #24]
    ctx->state[7]  = MBEDTLS_GET_UINT32_LE(key, 12);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	637b      	str	r3, [r7, #52]	; 0x34
 8007254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007256:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007258:	61bb      	str	r3, [r7, #24]
    return r;
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	61da      	str	r2, [r3, #28]
    ctx->state[8]  = MBEDTLS_GET_UINT32_LE(key, 16);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	3310      	adds	r3, #16
 8007264:	63bb      	str	r3, [r7, #56]	; 0x38
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800726a:	617b      	str	r3, [r7, #20]
    return r;
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	621a      	str	r2, [r3, #32]
    ctx->state[9]  = MBEDTLS_GET_UINT32_LE(key, 20);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	3314      	adds	r3, #20
 8007276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800727a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800727c:	613b      	str	r3, [r7, #16]
    return r;
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	625a      	str	r2, [r3, #36]	; 0x24
    ctx->state[10] = MBEDTLS_GET_UINT32_LE(key, 24);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	3318      	adds	r3, #24
 8007288:	643b      	str	r3, [r7, #64]	; 0x40
 800728a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800728c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800728e:	60fb      	str	r3, [r7, #12]
    return r;
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	629a      	str	r2, [r3, #40]	; 0x28
    ctx->state[11] = MBEDTLS_GET_UINT32_LE(key, 28);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	331c      	adds	r3, #28
 800729a:	647b      	str	r3, [r7, #68]	; 0x44
 800729c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800729e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80072a0:	60bb      	str	r3, [r7, #8]
    return r;
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	62da      	str	r2, [r3, #44]	; 0x2c

    return 0;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	374c      	adds	r7, #76	; 0x4c
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	61707865 	.word	0x61707865
 80072bc:	3320646e 	.word	0x3320646e
 80072c0:	79622d32 	.word	0x79622d32
 80072c4:	6b206574 	.word	0x6b206574

080072c8 <mbedtls_chacha20_update>:

int mbedtls_chacha20_update(mbedtls_chacha20_context *ctx,
                            size_t size,
                            const unsigned char *input,
                            unsigned char *output)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b09e      	sub	sp, #120	; 0x78
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
    size_t offset = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	677b      	str	r3, [r7, #116]	; 0x74

    /* Use leftover keystream bytes, if available */
    while (size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES) {
 80072da:	e01d      	b.n	8007318 <mbedtls_chacha20_update+0x50>
        output[offset] = input[offset]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e0:	4413      	add	r3, r2
 80072e2:	7819      	ldrb	r1, [r3, #0]
                         ^ ctx->keystream8[ctx->keystream_bytes_used];
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4413      	add	r3, r2
 80072ee:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        output[offset] = input[offset]
 80072f2:	6838      	ldr	r0, [r7, #0]
 80072f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072f6:	4403      	add	r3, r0
 80072f8:	404a      	eors	r2, r1
 80072fa:	b2d2      	uxtb	r2, r2
 80072fc:	701a      	strb	r2, [r3, #0]

        ctx->keystream_bytes_used++;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        offset++;
 800730c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800730e:	3301      	adds	r3, #1
 8007310:	677b      	str	r3, [r7, #116]	; 0x74
        size--;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	3b01      	subs	r3, #1
 8007316:	60bb      	str	r3, [r7, #8]
    while (size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES) {
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d062      	beq.n	80073e4 <mbedtls_chacha20_update+0x11c>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007324:	2b3f      	cmp	r3, #63	; 0x3f
 8007326:	d9d9      	bls.n	80072dc <mbedtls_chacha20_update+0x14>
    }

    /* Process full blocks */
    while (size >= CHACHA20_BLOCK_SIZE_BYTES) {
 8007328:	e05c      	b.n	80073e4 <mbedtls_chacha20_update+0x11c>
        /* Generate new keystream block and increment counter */
        chacha20_block(ctx->state, ctx->keystream8);
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3340      	adds	r3, #64	; 0x40
 8007330:	4619      	mov	r1, r3
 8007332:	4610      	mov	r0, r2
 8007334:	f7ff fe9b 	bl	800706e <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	631a      	str	r2, [r3, #48]	; 0x30

        mbedtls_xor(output + offset, input + offset, ctx->keystream8, 64U);
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007346:	18d1      	adds	r1, r2, r3
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800734c:	441a      	add	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3340      	adds	r3, #64	; 0x40
 8007352:	6739      	str	r1, [r7, #112]	; 0x70
 8007354:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007356:	66bb      	str	r3, [r7, #104]	; 0x68
 8007358:	2340      	movs	r3, #64	; 0x40
 800735a:	667b      	str	r3, [r7, #100]	; 0x64
    size_t i = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	663b      	str	r3, [r7, #96]	; 0x60
    for (; (i + 4) <= n; i += 4) {
 8007360:	e01e      	b.n	80073a0 <mbedtls_chacha20_update+0xd8>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8007362:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007366:	4413      	add	r3, r2
 8007368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800736a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800736c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800736e:	61fb      	str	r3, [r7, #28]
    return r;
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007374:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007376:	440b      	add	r3, r1
 8007378:	65bb      	str	r3, [r7, #88]	; 0x58
 800737a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800737c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800737e:	61bb      	str	r3, [r7, #24]
    return r;
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	4053      	eors	r3, r2
 8007384:	657b      	str	r3, [r7, #84]	; 0x54
        mbedtls_put_unaligned_uint32(r + i, x);
 8007386:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800738a:	4413      	add	r3, r2
 800738c:	653b      	str	r3, [r7, #80]	; 0x50
 800738e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8007394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007396:	601a      	str	r2, [r3, #0]
}
 8007398:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800739a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800739c:	3304      	adds	r3, #4
 800739e:	663b      	str	r3, [r7, #96]	; 0x60
 80073a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073a2:	3304      	adds	r3, #4
 80073a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d2db      	bcs.n	8007362 <mbedtls_chacha20_update+0x9a>
    for (; i < n; i++) {
 80073aa:	e010      	b.n	80073ce <mbedtls_chacha20_update+0x106>
        r[i] = a[i] ^ b[i];
 80073ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b0:	4413      	add	r3, r2
 80073b2:	7819      	ldrb	r1, [r3, #0]
 80073b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b8:	4413      	add	r3, r2
 80073ba:	781a      	ldrb	r2, [r3, #0]
 80073bc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80073be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073c0:	4403      	add	r3, r0
 80073c2:	404a      	eors	r2, r1
 80073c4:	b2d2      	uxtb	r2, r2
 80073c6:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80073c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ca:	3301      	adds	r3, #1
 80073cc:	663b      	str	r3, [r7, #96]	; 0x60
 80073ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80073d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d8ea      	bhi.n	80073ac <mbedtls_chacha20_update+0xe4>
}
 80073d6:	bf00      	nop

        offset += CHACHA20_BLOCK_SIZE_BYTES;
 80073d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073da:	3340      	adds	r3, #64	; 0x40
 80073dc:	677b      	str	r3, [r7, #116]	; 0x74
        size   -= CHACHA20_BLOCK_SIZE_BYTES;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	3b40      	subs	r3, #64	; 0x40
 80073e2:	60bb      	str	r3, [r7, #8]
    while (size >= CHACHA20_BLOCK_SIZE_BYTES) {
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b3f      	cmp	r3, #63	; 0x3f
 80073e8:	d89f      	bhi.n	800732a <mbedtls_chacha20_update+0x62>
    }

    /* Last (partial) block */
    if (size > 0U) {
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d05a      	beq.n	80074a6 <mbedtls_chacha20_update+0x1de>
        /* Generate new keystream block and increment counter */
        chacha20_block(ctx->state, ctx->keystream8);
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3340      	adds	r3, #64	; 0x40
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7ff fe38 	bl	800706e <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	631a      	str	r2, [r3, #48]	; 0x30

        mbedtls_xor(output + offset, input + offset, ctx->keystream8, size);
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800740c:	18d1      	adds	r1, r2, r3
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007412:	441a      	add	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3340      	adds	r3, #64	; 0x40
 8007418:	64f9      	str	r1, [r7, #76]	; 0x4c
 800741a:	64ba      	str	r2, [r7, #72]	; 0x48
 800741c:	647b      	str	r3, [r7, #68]	; 0x44
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	643b      	str	r3, [r7, #64]	; 0x40
    size_t i = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (; (i + 4) <= n; i += 4) {
 8007426:	e01e      	b.n	8007466 <mbedtls_chacha20_update+0x19e>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8007428:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800742a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742c:	4413      	add	r3, r2
 800742e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007434:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8007436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007438:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800743a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743c:	440b      	add	r3, r1
 800743e:	637b      	str	r3, [r7, #52]	; 0x34
 8007440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007442:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8007444:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	4053      	eors	r3, r2
 800744a:	633b      	str	r3, [r7, #48]	; 0x30
        mbedtls_put_unaligned_uint32(r + i, x);
 800744c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800744e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007450:	4413      	add	r3, r2
 8007452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	623b      	str	r3, [r7, #32]
 8007458:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	601a      	str	r2, [r3, #0]
}
 800745e:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8007460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007462:	3304      	adds	r3, #4
 8007464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007468:	3304      	adds	r3, #4
 800746a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800746c:	429a      	cmp	r2, r3
 800746e:	d2db      	bcs.n	8007428 <mbedtls_chacha20_update+0x160>
    for (; i < n; i++) {
 8007470:	e010      	b.n	8007494 <mbedtls_chacha20_update+0x1cc>
        r[i] = a[i] ^ b[i];
 8007472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007476:	4413      	add	r3, r2
 8007478:	7819      	ldrb	r1, [r3, #0]
 800747a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800747c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747e:	4413      	add	r3, r2
 8007480:	781a      	ldrb	r2, [r3, #0]
 8007482:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007486:	4403      	add	r3, r0
 8007488:	404a      	eors	r2, r1
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800748e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007490:	3301      	adds	r3, #1
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007494:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007498:	429a      	cmp	r2, r3
 800749a:	d8ea      	bhi.n	8007472 <mbedtls_chacha20_update+0x1aa>
}
 800749c:	bf00      	nop

        ctx->keystream_bytes_used = size;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    }

    return 0;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3778      	adds	r7, #120	; 0x78
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <chachapoly_pad_aad>:
 * \brief           Adds nul bytes to pad the AAD for Poly1305.
 *
 * \param ctx       The ChaCha20-Poly1305 context.
 */
static int chachapoly_pad_aad(mbedtls_chachapoly_context *ctx)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
    uint32_t partial_block_len = (uint32_t) (ctx->aad_len % 16U);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80074be:	4613      	mov	r3, r2
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	61fb      	str	r3, [r7, #28]
    unsigned char zeroes[15];

    if (partial_block_len == 0U) {
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <chachapoly_pad_aad+0x20>
        return 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	e012      	b.n	80074f6 <chachapoly_pad_aad+0x46>
    }

    memset(zeroes, 0, sizeof(zeroes));
 80074d0:	f107 030c 	add.w	r3, r7, #12
 80074d4:	220f      	movs	r2, #15
 80074d6:	2100      	movs	r1, #0
 80074d8:	4618      	mov	r0, r3
 80074da:	f009 fb6f 	bl	8010bbc <memset>

    return mbedtls_poly1305_update(&ctx->poly1305_ctx,
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f103 0084 	add.w	r0, r3, #132	; 0x84
                                   zeroes,
                                   16U - partial_block_len);
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	f1c3 0210 	rsb	r2, r3, #16
    return mbedtls_poly1305_update(&ctx->poly1305_ctx,
 80074ea:	f107 030c 	add.w	r3, r7, #12
 80074ee:	4619      	mov	r1, r3
 80074f0:	f004 fd31 	bl	800bf56 <mbedtls_poly1305_update>
 80074f4:	4603      	mov	r3, r0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3720      	adds	r7, #32
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <mbedtls_chachapoly_init>:
                                   zeroes,
                                   16U - partial_block_len);
}

void mbedtls_chachapoly_init(mbedtls_chachapoly_context *ctx)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
    mbedtls_chacha20_init(&ctx->chacha20_ctx);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4618      	mov	r0, r3
 800750a:	f7ff fe4e 	bl	80071aa <mbedtls_chacha20_init>
    mbedtls_poly1305_init(&ctx->poly1305_ctx);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3384      	adds	r3, #132	; 0x84
 8007512:	4618      	mov	r0, r3
 8007514:	f004 fd03 	bl	800bf1e <mbedtls_poly1305_init>
    ctx->aad_len        = 0U;
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	f04f 0200 	mov.w	r2, #0
 800751e:	f04f 0300 	mov.w	r3, #0
 8007522:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	f04f 0200 	mov.w	r2, #0
 800752c:	f04f 0300 	mov.w	r3, #0
 8007530:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <mbedtls_chachapoly_free>:

void mbedtls_chachapoly_free(mbedtls_chachapoly_context *ctx)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d01f      	beq.n	800759a <mbedtls_chachapoly_free+0x4e>
        return;
    }

    mbedtls_chacha20_free(&ctx->chacha20_ctx);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4618      	mov	r0, r3
 800755e:	f7ff fe3b 	bl	80071d8 <mbedtls_chacha20_free>
    mbedtls_poly1305_free(&ctx->poly1305_ctx);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3384      	adds	r3, #132	; 0x84
 8007566:	4618      	mov	r0, r3
 8007568:	f004 fce5 	bl	800bf36 <mbedtls_poly1305_free>
    ctx->aad_len        = 0U;
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	f04f 0300 	mov.w	r3, #0
 8007576:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	f04f 0300 	mov.w	r3, #0
 8007584:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8007598:	e000      	b.n	800759c <mbedtls_chachapoly_free+0x50>
        return;
 800759a:	bf00      	nop
}
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <mbedtls_chachapoly_setkey>:

int mbedtls_chachapoly_setkey(mbedtls_chachapoly_context *ctx,
                              const unsigned char key[32])
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80075ac:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80075b0:	60fb      	str	r3, [r7, #12]

    ret = mbedtls_chacha20_setkey(&ctx->chacha20_ctx, key);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff fe1e 	bl	80071f8 <mbedtls_chacha20_setkey>
 80075bc:	60f8      	str	r0, [r7, #12]

    return ret;
 80075be:	68fb      	ldr	r3, [r7, #12]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <mbedtls_chachapoly_update>:

int mbedtls_chachapoly_update(mbedtls_chachapoly_context *ctx,
                              size_t len,
                              const unsigned char *input,
                              unsigned char *output)
{
 80075c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80075cc:	b086      	sub	sp, #24
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
 80075d6:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80075d8:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80075dc:	617b      	str	r3, [r7, #20]

    if ((ctx->state != CHACHAPOLY_STATE_AAD) &&
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d007      	beq.n	80075f8 <mbedtls_chachapoly_update+0x30>
        (ctx->state != CHACHAPOLY_STATE_CIPHERTEXT)) {
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if ((ctx->state != CHACHAPOLY_STATE_AAD) &&
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d002      	beq.n	80075f8 <mbedtls_chachapoly_update+0x30>
        return MBEDTLS_ERR_CHACHAPOLY_BAD_STATE;
 80075f2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80075f6:	e057      	b.n	80076a8 <mbedtls_chachapoly_update+0xe0>
    }

    if (ctx->state == CHACHAPOLY_STATE_AAD) {
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d10c      	bne.n	800761c <mbedtls_chachapoly_update+0x54>
        ctx->state = CHACHAPOLY_STATE_CIPHERTEXT;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2202      	movs	r2, #2
 8007606:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

        ret = chachapoly_pad_aad(ctx);
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff ff50 	bl	80074b0 <chachapoly_pad_aad>
 8007610:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <mbedtls_chachapoly_update+0x54>
            return ret;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	e045      	b.n	80076a8 <mbedtls_chachapoly_update+0xe0>
        }
    }

    ctx->ciphertext_len += len;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	2000      	movs	r0, #0
 8007626:	460c      	mov	r4, r1
 8007628:	4605      	mov	r5, r0
 800762a:	eb12 0804 	adds.w	r8, r2, r4
 800762e:	eb43 0905 	adc.w	r9, r3, r5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	e9c3 8936 	strd	r8, r9, [r3, #216]	; 0xd8

    if (ctx->mode == MBEDTLS_CHACHAPOLY_ENCRYPT) {
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 800763e:	2b00      	cmp	r3, #0
 8007640:	d118      	bne.n	8007674 <mbedtls_chachapoly_update+0xac>
        ret = mbedtls_chacha20_update(&ctx->chacha20_ctx, len, input, output);
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	68b9      	ldr	r1, [r7, #8]
 800764a:	f7ff fe3d 	bl	80072c8 <mbedtls_chacha20_update>
 800764e:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <mbedtls_chachapoly_update+0x92>
            return ret;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	e026      	b.n	80076a8 <mbedtls_chachapoly_update+0xe0>
        }

        ret = mbedtls_poly1305_update(&ctx->poly1305_ctx, output, len);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3384      	adds	r3, #132	; 0x84
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f004 fc77 	bl	800bf56 <mbedtls_poly1305_update>
 8007668:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01a      	beq.n	80076a6 <mbedtls_chachapoly_update+0xde>
            return ret;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	e019      	b.n	80076a8 <mbedtls_chachapoly_update+0xe0>
        }
    } else { /* DECRYPT */
        ret = mbedtls_poly1305_update(&ctx->poly1305_ctx, input, len);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3384      	adds	r3, #132	; 0x84
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	4618      	mov	r0, r3
 800767e:	f004 fc6a 	bl	800bf56 <mbedtls_poly1305_update>
 8007682:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <mbedtls_chachapoly_update+0xc6>
            return ret;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	e00c      	b.n	80076a8 <mbedtls_chachapoly_update+0xe0>
        }

        ret = mbedtls_chacha20_update(&ctx->chacha20_ctx, len, input, output);
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	68b9      	ldr	r1, [r7, #8]
 8007696:	f7ff fe17 	bl	80072c8 <mbedtls_chacha20_update>
 800769a:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <mbedtls_chachapoly_update+0xde>
            return ret;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	e000      	b.n	80076a8 <mbedtls_chachapoly_update+0xe0>
        }
    }

    return 0;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080076b2 <mbedtls_cipher_info_get_key_bitlen>:
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <mbedtls_cipher_info_get_key_bitlen+0x12>
        return 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e005      	b.n	80076d0 <mbedtls_cipher_info_get_key_bitlen+0x1e>
        return ((size_t) info->MBEDTLS_PRIVATE(key_bitlen)) << MBEDTLS_KEY_BITLEN_SHIFT;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	795b      	ldrb	r3, [r3, #5]
 80076c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	019b      	lsls	r3, r3, #6
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <mbedtls_cipher_get_block_size>:
 * \return       \c 1 if the cipher is a stream cipher.
 * \return       \c 0 if \p ctx has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
    if (ctx->MBEDTLS_PRIVATE(cipher_info) == NULL) {
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <mbedtls_cipher_get_block_size+0x14>
        return 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	e005      	b.n	80076fc <mbedtls_cipher_get_block_size+0x20>
    }

    return (unsigned int) ctx->MBEDTLS_PRIVATE(cipher_info)->MBEDTLS_PRIVATE(block_size);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	791b      	ldrb	r3, [r3, #4]
 80076f6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80076fa:	b2db      	uxtb	r3, r3
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <mbedtls_cipher_get_base>:

static int supported_init = 0;

static inline const mbedtls_cipher_base_t *mbedtls_cipher_get_base(
    const mbedtls_cipher_info_t *info)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
    return mbedtls_cipher_base_lookup_table[info->base_idx];
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	79db      	ldrb	r3, [r3, #7]
 8007714:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8007718:	b2db      	uxtb	r3, r3
 800771a:	461a      	mov	r2, r3
 800771c:	4b04      	ldr	r3, [pc, #16]	; (8007730 <mbedtls_cipher_get_base+0x28>)
 800771e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8007722:	4618      	mov	r0, r3
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20000004 	.word	0x20000004

08007734 <mbedtls_cipher_info_from_type>:
    return mbedtls_cipher_supported;
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type(
    const mbedtls_cipher_type_t cipher_type)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	71fb      	strb	r3, [r7, #7]
    const mbedtls_cipher_definition_t *def;

    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 800773e:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <mbedtls_cipher_info_from_type+0x3c>)
 8007740:	60fb      	str	r3, [r7, #12]
 8007742:	e00a      	b.n	800775a <mbedtls_cipher_info_from_type+0x26>
        if (def->type == cipher_type) {
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	79fa      	ldrb	r2, [r7, #7]
 800774a:	429a      	cmp	r2, r3
 800774c:	d102      	bne.n	8007754 <mbedtls_cipher_info_from_type+0x20>
            return def->info;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	e007      	b.n	8007764 <mbedtls_cipher_info_from_type+0x30>
    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3308      	adds	r3, #8
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1f0      	bne.n	8007744 <mbedtls_cipher_info_from_type+0x10>
        }
    }

    return NULL;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	08012db4 	.word	0x08012db4

08007774 <mbedtls_cipher_info_from_values>:

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values(
    const mbedtls_cipher_id_t cipher_id,
    int key_bitlen,
    const mbedtls_cipher_mode_t mode)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	6039      	str	r1, [r7, #0]
 800777e:	71fb      	strb	r3, [r7, #7]
 8007780:	4613      	mov	r3, r2
 8007782:	71bb      	strb	r3, [r7, #6]
    const mbedtls_cipher_definition_t *def;

    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 8007784:	4b17      	ldr	r3, [pc, #92]	; (80077e4 <mbedtls_cipher_info_from_values+0x70>)
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	e022      	b.n	80077d0 <mbedtls_cipher_info_from_values+0x5c>
        if (mbedtls_cipher_get_base(def->info)->cipher == cipher_id &&
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff ffba 	bl	8007708 <mbedtls_cipher_get_base>
 8007794:	4603      	mov	r3, r0
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	79fa      	ldrb	r2, [r7, #7]
 800779a:	429a      	cmp	r2, r3
 800779c:	d115      	bne.n	80077ca <mbedtls_cipher_info_from_values+0x56>
            mbedtls_cipher_info_get_key_bitlen(def->info) == (unsigned) key_bitlen &&
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff ff85 	bl	80076b2 <mbedtls_cipher_info_get_key_bitlen>
 80077a8:	4602      	mov	r2, r0
 80077aa:	683b      	ldr	r3, [r7, #0]
        if (mbedtls_cipher_get_base(def->info)->cipher == cipher_id &&
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d10c      	bne.n	80077ca <mbedtls_cipher_info_from_values+0x56>
            def->info->mode == mode) {
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	795b      	ldrb	r3, [r3, #5]
 80077b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	461a      	mov	r2, r3
            mbedtls_cipher_info_get_key_bitlen(def->info) == (unsigned) key_bitlen &&
 80077be:	79bb      	ldrb	r3, [r7, #6]
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d102      	bne.n	80077ca <mbedtls_cipher_info_from_values+0x56>
            return def->info;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	e007      	b.n	80077da <mbedtls_cipher_info_from_values+0x66>
    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3308      	adds	r3, #8
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1d8      	bne.n	800778a <mbedtls_cipher_info_from_values+0x16>
        }
    }

    return NULL;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	08012db4 	.word	0x08012db4

080077e8 <mbedtls_cipher_init>:
    }
}
#endif /* MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_DEPRECATED_REMOVED */

void mbedtls_cipher_init(mbedtls_cipher_context_t *ctx)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_cipher_context_t));
 80077f0:	2244      	movs	r2, #68	; 0x44
 80077f2:	2100      	movs	r1, #0
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f009 f9e1 	bl	8010bbc <memset>
}
 80077fa:	bf00      	nop
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <mbedtls_cipher_free>:

void mbedtls_cipher_free(mbedtls_cipher_context_t *ctx)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b082      	sub	sp, #8
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01d      	beq.n	800784c <mbedtls_cipher_free+0x4a>
        return;
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_DEPRECATED_REMOVED */

#if defined(MBEDTLS_CMAC_C)
    if (ctx->cmac_ctx) {
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007814:	2b00      	cmp	r3, #0
 8007816:	d005      	beq.n	8007824 <mbedtls_cipher_free+0x22>
        mbedtls_zeroize_and_free(ctx->cmac_ctx,
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	2124      	movs	r1, #36	; 0x24
 800781e:	4618      	mov	r0, r3
 8007820:	f003 ff6e 	bl	800b700 <mbedtls_zeroize_and_free>
                                 sizeof(mbedtls_cmac_context_t));
    }
#endif

    if (ctx->cipher_ctx) {
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <mbedtls_cipher_free+0x40>
        mbedtls_cipher_get_base(ctx->cipher_info)->ctx_free_func(ctx->cipher_ctx);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff ff69 	bl	8007708 <mbedtls_cipher_get_base>
 8007836:	4603      	mov	r3, r0
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800783e:	4610      	mov	r0, r2
 8007840:	4798      	blx	r3
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_cipher_context_t));
 8007842:	2144      	movs	r1, #68	; 0x44
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f003 ff37 	bl	800b6b8 <mbedtls_platform_zeroize>
 800784a:	e000      	b.n	800784e <mbedtls_cipher_free+0x4c>
        return;
 800784c:	bf00      	nop
}
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup(mbedtls_cipher_context_t *ctx,
                         const mbedtls_cipher_info_t *cipher_info)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
    if (cipher_info == NULL) {
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <mbedtls_cipher_setup+0x14>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007864:	4b12      	ldr	r3, [pc, #72]	; (80078b0 <mbedtls_cipher_setup+0x5c>)
 8007866:	e01e      	b.n	80078a6 <mbedtls_cipher_setup+0x52>
    }

    memset(ctx, 0, sizeof(mbedtls_cipher_context_t));
 8007868:	2244      	movs	r2, #68	; 0x44
 800786a:	2100      	movs	r1, #0
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f009 f9a5 	bl	8010bbc <memset>

    if (mbedtls_cipher_get_base(cipher_info)->ctx_alloc_func != NULL) {
 8007872:	6838      	ldr	r0, [r7, #0]
 8007874:	f7ff ff48 	bl	8007708 <mbedtls_cipher_get_base>
 8007878:	4603      	mov	r3, r0
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00e      	beq.n	800789e <mbedtls_cipher_setup+0x4a>
        ctx->cipher_ctx = mbedtls_cipher_get_base(cipher_info)->ctx_alloc_func();
 8007880:	6838      	ldr	r0, [r7, #0]
 8007882:	f7ff ff41 	bl	8007708 <mbedtls_cipher_get_base>
 8007886:	4603      	mov	r3, r0
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	4798      	blx	r3
 800788c:	4602      	mov	r2, r0
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	63da      	str	r2, [r3, #60]	; 0x3c
        if (ctx->cipher_ctx == NULL) {
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <mbedtls_cipher_setup+0x4a>
            return MBEDTLS_ERR_CIPHER_ALLOC_FAILED;
 800789a:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <mbedtls_cipher_setup+0x60>)
 800789c:	e003      	b.n	80078a6 <mbedtls_cipher_setup+0x52>
        }
    }

    ctx->cipher_info = cipher_info;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	601a      	str	r2, [r3, #0]

    return 0;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	ffff9f00 	.word	0xffff9f00
 80078b4:	ffff9e80 	.word	0xffff9e80

080078b8 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey(mbedtls_cipher_context_t *ctx,
                          const unsigned char *key,
                          int key_bitlen,
                          const mbedtls_operation_t operation)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	70fb      	strb	r3, [r7, #3]
    if (operation != MBEDTLS_ENCRYPT && operation != MBEDTLS_DECRYPT) {
 80078c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d005      	beq.n	80078da <mbedtls_cipher_setkey+0x22>
 80078ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <mbedtls_cipher_setkey+0x22>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 80078d6:	4b33      	ldr	r3, [pc, #204]	; (80079a4 <mbedtls_cipher_setkey+0xec>)
 80078d8:	e060      	b.n	800799c <mbedtls_cipher_setkey+0xe4>
    }
    if (ctx->cipher_info == NULL) {
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <mbedtls_cipher_setkey+0x2e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 80078e2:	4b30      	ldr	r3, [pc, #192]	; (80079a4 <mbedtls_cipher_setkey+0xec>)
 80078e4:	e05a      	b.n	800799c <mbedtls_cipher_setkey+0xe4>
        ctx->operation = operation;
        return 0;
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_DEPRECATED_REMOVED */

    if ((ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN) == 0 &&
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	79db      	ldrb	r3, [r3, #7]
 80078ec:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	f003 0302 	and.w	r3, r3, #2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10b      	bne.n	8007912 <mbedtls_cipher_setkey+0x5a>
        (int) mbedtls_cipher_info_get_key_bitlen(ctx->cipher_info) != key_bitlen) {
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff fed7 	bl	80076b2 <mbedtls_cipher_info_get_key_bitlen>
 8007904:	4603      	mov	r3, r0
 8007906:	461a      	mov	r2, r3
    if ((ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN) == 0 &&
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4293      	cmp	r3, r2
 800790c:	d001      	beq.n	8007912 <mbedtls_cipher_setkey+0x5a>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800790e:	4b25      	ldr	r3, [pc, #148]	; (80079a4 <mbedtls_cipher_setkey+0xec>)
 8007910:	e044      	b.n	800799c <mbedtls_cipher_setkey+0xe4>
    }

    ctx->key_bitlen = key_bitlen;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	605a      	str	r2, [r3, #4]
    ctx->operation = operation;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	78fa      	ldrb	r2, [r7, #3]
 800791c:	721a      	strb	r2, [r3, #8]

#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if (MBEDTLS_ENCRYPT == operation ||
 800791e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d017      	beq.n	8007956 <mbedtls_cipher_setkey+0x9e>
        MBEDTLS_MODE_CFB == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode) ||
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	795b      	ldrb	r3, [r3, #5]
 800792c:	f023 030f 	bic.w	r3, r3, #15
 8007930:	b2db      	uxtb	r3, r3
    if (MBEDTLS_ENCRYPT == operation ||
 8007932:	2b30      	cmp	r3, #48	; 0x30
 8007934:	d00f      	beq.n	8007956 <mbedtls_cipher_setkey+0x9e>
        MBEDTLS_MODE_OFB == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode) ||
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	795b      	ldrb	r3, [r3, #5]
 800793c:	f023 030f 	bic.w	r3, r3, #15
 8007940:	b2db      	uxtb	r3, r3
        MBEDTLS_MODE_CFB == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode) ||
 8007942:	2b40      	cmp	r3, #64	; 0x40
 8007944:	d007      	beq.n	8007956 <mbedtls_cipher_setkey+0x9e>
        MBEDTLS_MODE_CTR == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode)) {
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	795b      	ldrb	r3, [r3, #5]
 800794c:	f023 030f 	bic.w	r3, r3, #15
 8007950:	b2db      	uxtb	r3, r3
        MBEDTLS_MODE_OFB == ((mbedtls_cipher_mode_t) ctx->cipher_info->mode) ||
 8007952:	2b50      	cmp	r3, #80	; 0x50
 8007954:	d10e      	bne.n	8007974 <mbedtls_cipher_setkey+0xbc>
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_enc_func(ctx->cipher_ctx, key,
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4618      	mov	r0, r3
 800795c:	f7ff fed4 	bl	8007708 <mbedtls_cipher_get_base>
 8007960:	4603      	mov	r3, r0
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                                                                          ctx->key_bitlen);
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	6852      	ldr	r2, [r2, #4]
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_enc_func(ctx->cipher_ctx, key,
 800796c:	68b9      	ldr	r1, [r7, #8]
 800796e:	4798      	blx	r3
 8007970:	4603      	mov	r3, r0
 8007972:	e013      	b.n	800799c <mbedtls_cipher_setkey+0xe4>
    }

    if (MBEDTLS_DECRYPT == operation) {
 8007974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10e      	bne.n	800799a <mbedtls_cipher_setkey+0xe2>
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_dec_func(ctx->cipher_ctx, key,
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff fec1 	bl	8007708 <mbedtls_cipher_get_base>
 8007986:	4603      	mov	r3, r0
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                                                                          ctx->key_bitlen);
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	6852      	ldr	r2, [r2, #4]
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_dec_func(ctx->cipher_ctx, key,
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	4798      	blx	r3
 8007996:	4603      	mov	r3, r0
 8007998:	e000      	b.n	800799c <mbedtls_cipher_setkey+0xe4>
        return mbedtls_cipher_get_base(ctx->cipher_info)->setkey_enc_func(ctx->cipher_ctx, key,
                                                                          ctx->key_bitlen);
    }
#endif

    return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800799a:	4b02      	ldr	r3, [pc, #8]	; (80079a4 <mbedtls_cipher_setkey+0xec>)
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	ffff9f00 	.word	0xffff9f00

080079a8 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update(mbedtls_cipher_context_t *ctx, const unsigned char *input,
                          size_t ilen, unsigned char *output, size_t *olen)
{
 80079a8:	b5b0      	push	{r4, r5, r7, lr}
 80079aa:	b08c      	sub	sp, #48	; 0x30
 80079ac:	af04      	add	r7, sp, #16
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80079b6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80079ba:	61bb      	str	r3, [r7, #24]
    size_t block_size;

    if (ctx->cipher_info == NULL) {
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <mbedtls_cipher_update+0x20>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 80079c4:	4b7f      	ldr	r3, [pc, #508]	; (8007bc4 <mbedtls_cipher_update+0x21c>)
 80079c6:	e241      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
         * accessible through the cipher layer. */
        return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_DEPRECATED_REMOVED */

    *olen = 0;
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
    block_size = mbedtls_cipher_get_block_size(ctx);
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f7ff fe84 	bl	80076dc <mbedtls_cipher_get_block_size>
 80079d4:	6178      	str	r0, [r7, #20]
    if (0 == block_size) {
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <mbedtls_cipher_update+0x38>
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 80079dc:	4b7a      	ldr	r3, [pc, #488]	; (8007bc8 <mbedtls_cipher_update+0x220>)
 80079de:	e235      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
    }

    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_ECB) {
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	795b      	ldrb	r3, [r3, #5]
 80079e6:	f023 030f 	bic.w	r3, r3, #15
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b10      	cmp	r3, #16
 80079ee:	d11f      	bne.n	8007a30 <mbedtls_cipher_update+0x88>
        if (ilen != block_size) {
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d001      	beq.n	80079fc <mbedtls_cipher_update+0x54>
            return MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED;
 80079f8:	4b74      	ldr	r3, [pc, #464]	; (8007bcc <mbedtls_cipher_update+0x224>)
 80079fa:	e227      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 80079fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	601a      	str	r2, [r3, #0]

        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ecb_func(ctx->cipher_ctx,
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fe7e 	bl	8007708 <mbedtls_cipher_get_base>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	685c      	ldr	r4, [r3, #4]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f993 1008 	ldrsb.w	r1, [r3, #8]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	47a0      	blx	r4
 8007a20:	61b8      	str	r0, [r7, #24]
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <mbedtls_cipher_update+0x84>
                                                                            ctx->operation, input,
                                                                            output))) {
            return ret;
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	e20f      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
        }

        return 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	e20d      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
    }

#if defined(MBEDTLS_GCM_C)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_GCM) {
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	795b      	ldrb	r3, [r3, #5]
 8007a36:	f023 030f 	bic.w	r3, r3, #15
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b60      	cmp	r3, #96	; 0x60
 8007a3e:	d10c      	bne.n	8007a5a <mbedtls_cipher_update+0xb2>
        return mbedtls_gcm_update((mbedtls_gcm_context *) ctx->cipher_ctx,
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	68b9      	ldr	r1, [r7, #8]
 8007a52:	f003 fc61 	bl	800b318 <mbedtls_gcm_update>
 8007a56:	4603      	mov	r3, r0
 8007a58:	e1f8      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
                                  output, ilen, olen);
    }
#endif

#if defined(MBEDTLS_CCM_C)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_CCM_STAR_NO_TAG) {
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	795b      	ldrb	r3, [r3, #5]
 8007a60:	f023 030f 	bic.w	r3, r3, #15
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b90      	cmp	r3, #144	; 0x90
 8007a68:	d10c      	bne.n	8007a84 <mbedtls_cipher_update+0xdc>
        return mbedtls_ccm_update((mbedtls_ccm_context *) ctx->cipher_ctx,
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	68b9      	ldr	r1, [r7, #8]
 8007a7c:	f7ff f828 	bl	8006ad0 <mbedtls_ccm_update>
 8007a80:	4603      	mov	r3, r0
 8007a82:	e1e3      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
                                  output, ilen, olen);
    }
#endif

#if defined(MBEDTLS_CHACHAPOLY_C)
    if (((mbedtls_cipher_type_t) ctx->cipher_info->type) == MBEDTLS_CIPHER_CHACHA20_POLY1305) {
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	799b      	ldrb	r3, [r3, #6]
 8007a8a:	2b4d      	cmp	r3, #77	; 0x4d
 8007a8c:	d10b      	bne.n	8007aa6 <mbedtls_cipher_update+0xfe>
        *olen = ilen;
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	601a      	str	r2, [r3, #0]
        return mbedtls_chachapoly_update((mbedtls_chachapoly_context *) ctx->cipher_ctx,
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	f7ff fd93 	bl	80075c8 <mbedtls_chachapoly_update>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	e1d2      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
                                         ilen, input, output);
    }
#endif

    if (input == output &&
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d10f      	bne.n	8007ace <mbedtls_cipher_update+0x126>
        (ctx->unprocessed_len != 0 || ilen % block_size)) {
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (input == output &&
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d109      	bne.n	8007aca <mbedtls_cipher_update+0x122>
        (ctx->unprocessed_len != 0 || ilen % block_size)) {
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	fbb3 f2f2 	udiv	r2, r3, r2
 8007abe:	6979      	ldr	r1, [r7, #20]
 8007ac0:	fb01 f202 	mul.w	r2, r1, r2
 8007ac4:	1a9b      	subs	r3, r3, r2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <mbedtls_cipher_update+0x126>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007aca:	4b3e      	ldr	r3, [pc, #248]	; (8007bc4 <mbedtls_cipher_update+0x21c>)
 8007acc:	e1be      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_CBC) {
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	795b      	ldrb	r3, [r3, #5]
 8007ad4:	f023 030f 	bic.w	r3, r3, #15
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	f040 80e4 	bne.w	8007ca8 <mbedtls_cipher_update+0x300>
        size_t copy_len = 0;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61fb      	str	r3, [r7, #28]

        /*
         * If there is not enough data for a full block, cache it.
         */
        if ((ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <mbedtls_cipher_update+0x15c>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d006      	beq.n	8007b04 <mbedtls_cipher_update+0x15c>
             ilen <= block_size - ctx->unprocessed_len) ||
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	1ad3      	subs	r3, r2, r3
        if ((ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d91b      	bls.n	8007b3c <mbedtls_cipher_update+0x194>
            (ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f993 3008 	ldrsb.w	r3, [r3, #8]
             ilen <= block_size - ctx->unprocessed_len) ||
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10a      	bne.n	8007b24 <mbedtls_cipher_update+0x17c>
            (ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <mbedtls_cipher_update+0x17c>
             ilen < block_size - ctx->unprocessed_len) ||
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	1ad3      	subs	r3, r2, r3
            (ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d30b      	bcc.n	8007b3c <mbedtls_cipher_update+0x194>
            (ctx->operation == MBEDTLS_ENCRYPT &&
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f993 3008 	ldrsb.w	r3, [r3, #8]
             ilen < block_size - ctx->unprocessed_len) ||
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d119      	bne.n	8007b62 <mbedtls_cipher_update+0x1ba>
             ilen < block_size - ctx->unprocessed_len)) {
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	1ad3      	subs	r3, r2, r3
            (ctx->operation == MBEDTLS_ENCRYPT &&
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d212      	bcs.n	8007b62 <mbedtls_cipher_update+0x1ba>
            memcpy(&(ctx->unprocessed_data[ctx->unprocessed_len]), input,
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	3310      	adds	r3, #16
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	3304      	adds	r3, #4
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f009 f8c0 	bl	8010cd2 <memcpy>
                   ilen);

            ctx->unprocessed_len += ilen;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	441a      	add	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	625a      	str	r2, [r3, #36]	; 0x24
            return 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e174      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
        }

        /*
         * Process cached data first
         */
        if (0 != ctx->unprocessed_len) {
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d047      	beq.n	8007bfa <mbedtls_cipher_update+0x252>
            copy_len = block_size - ctx->unprocessed_len;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	61fb      	str	r3, [r7, #28]

            memcpy(&(ctx->unprocessed_data[ctx->unprocessed_len]), input,
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	3310      	adds	r3, #16
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	3304      	adds	r3, #4
 8007b80:	69fa      	ldr	r2, [r7, #28]
 8007b82:	68b9      	ldr	r1, [r7, #8]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f009 f8a4 	bl	8010cd2 <memcpy>
                   copy_len);

            if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cbc_func(ctx->cipher_ctx,
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7ff fdba 	bl	8007708 <mbedtls_cipher_get_base>
 8007b94:	4603      	mov	r3, r0
 8007b96:	689c      	ldr	r4, [r3, #8]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                                                ctx->operation,
                                                                                block_size, ctx->iv,
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f103 0528 	add.w	r5, r3, #40	; 0x28
                                                                                ctx->
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3314      	adds	r3, #20
            if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cbc_func(ctx->cipher_ctx,
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	9201      	str	r2, [sp, #4]
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	462b      	mov	r3, r5
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	47a0      	blx	r4
 8007bb8:	61b8      	str	r0, [r7, #24]
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d007      	beq.n	8007bd0 <mbedtls_cipher_update+0x228>
                                                                                unprocessed_data,
                                                                                output))) {
                return ret;
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	e143      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
 8007bc4:	ffff9f00 	.word	0xffff9f00
 8007bc8:	ffff9c80 	.word	0xffff9c80
 8007bcc:	ffff9d80 	.word	0xffff9d80
            }

            *olen += block_size;
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	441a      	add	r2, r3
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	601a      	str	r2, [r3, #0]
            output += block_size;
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	4413      	add	r3, r2
 8007be2:	603b      	str	r3, [r7, #0]
            ctx->unprocessed_len = 0;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	625a      	str	r2, [r3, #36]	; 0x24

            input += copy_len;
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	4413      	add	r3, r2
 8007bf0:	60bb      	str	r3, [r7, #8]
            ilen -= copy_len;
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	607b      	str	r3, [r7, #4]
        }

        /*
         * Cache final, incomplete block
         */
        if (0 != ilen) {
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d02c      	beq.n	8007c5a <mbedtls_cipher_update+0x2b2>
            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c08:	6979      	ldr	r1, [r7, #20]
 8007c0a:	fb01 f202 	mul.w	r2, r1, r2
 8007c0e:	1a9b      	subs	r3, r3, r2
 8007c10:	61fb      	str	r3, [r7, #28]
            if (copy_len == 0 &&
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10a      	bne.n	8007c2e <mbedtls_cipher_update+0x286>
                ctx->operation == MBEDTLS_DECRYPT &&
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f993 3008 	ldrsb.w	r3, [r3, #8]
            if (copy_len == 0 &&
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d105      	bne.n	8007c2e <mbedtls_cipher_update+0x286>
                NULL != ctx->add_padding) {
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	68db      	ldr	r3, [r3, #12]
                ctx->operation == MBEDTLS_DECRYPT &&
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <mbedtls_cipher_update+0x286>
                copy_len = block_size;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	61fb      	str	r3, [r7, #28]
            }

            memcpy(ctx->unprocessed_data, &(input[ilen - copy_len]),
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f103 0014 	add.w	r0, r3, #20
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	4619      	mov	r1, r3
 8007c42:	f009 f846 	bl	8010cd2 <memcpy>
                   copy_len);

            ctx->unprocessed_len += copy_len;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	441a      	add	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	625a      	str	r2, [r3, #36]	; 0x24
            ilen -= copy_len;
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	607b      	str	r3, [r7, #4]
        }

        /*
         * Process remaining full blocks
         */
        if (ilen) {
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d021      	beq.n	8007ca4 <mbedtls_cipher_update+0x2fc>
            if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cbc_func(ctx->cipher_ctx,
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff fd4f 	bl	8007708 <mbedtls_cipher_get_base>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	689c      	ldr	r4, [r3, #8]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                                                ctx->operation,
                                                                                ilen, ctx->iv,
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f103 0228 	add.w	r2, r3, #40	; 0x28
            if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cbc_func(ctx->cipher_ctx,
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	4613      	mov	r3, r2
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	47a0      	blx	r4
 8007c8c:	61b8      	str	r0, [r7, #24]
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <mbedtls_cipher_update+0x2f0>
                                                                                input,
                                                                                output))) {
                return ret;
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	e0d9      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
            }

            *olen += ilen;
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	441a      	add	r2, r3
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	601a      	str	r2, [r3, #0]
        }

        return 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e0d1      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

#if defined(MBEDTLS_CIPHER_MODE_CFB)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_CFB) {
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	795b      	ldrb	r3, [r3, #5]
 8007cae:	f023 030f 	bic.w	r3, r3, #15
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b30      	cmp	r3, #48	; 0x30
 8007cb6:	d123      	bne.n	8007d00 <mbedtls_cipher_update+0x358>
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cfb_func(ctx->cipher_ctx,
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7ff fd23 	bl	8007708 <mbedtls_cipher_get_base>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	68dc      	ldr	r4, [r3, #12]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f993 1008 	ldrsb.w	r1, [r3, #8]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f103 0524 	add.w	r5, r3, #36	; 0x24
                                                                            ctx->operation, ilen,
                                                                            &ctx->unprocessed_len,
                                                                            ctx->iv,
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3328      	adds	r3, #40	; 0x28
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->cfb_func(ctx->cipher_ctx,
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	9202      	str	r2, [sp, #8]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	9201      	str	r2, [sp, #4]
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	462b      	mov	r3, r5
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	47a0      	blx	r4
 8007cea:	61b8      	str	r0, [r7, #24]
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <mbedtls_cipher_update+0x34e>
                                                                            input, output))) {
            return ret;
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	e0aa      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	601a      	str	r2, [r3, #0]

        return 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e0a5      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_OFB) {
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	795b      	ldrb	r3, [r3, #5]
 8007d06:	f023 030f 	bic.w	r3, r3, #15
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b40      	cmp	r3, #64	; 0x40
 8007d0e:	d120      	bne.n	8007d52 <mbedtls_cipher_update+0x3aa>
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ofb_func(ctx->cipher_ctx,
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7ff fcf7 	bl	8007708 <mbedtls_cipher_get_base>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	691c      	ldr	r4, [r3, #16]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f103 0224 	add.w	r2, r3, #36	; 0x24
                                                                            ilen,
                                                                            &ctx->unprocessed_len,
                                                                            ctx->iv,
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f103 0128 	add.w	r1, r3, #40	; 0x28
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ofb_func(ctx->cipher_ctx,
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	460b      	mov	r3, r1
 8007d38:	6879      	ldr	r1, [r7, #4]
 8007d3a:	47a0      	blx	r4
 8007d3c:	61b8      	str	r0, [r7, #24]
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <mbedtls_cipher_update+0x3a0>
                                                                            input, output))) {
            return ret;
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	e081      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	601a      	str	r2, [r3, #0]

        return 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e07c      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_OFB */

#if defined(MBEDTLS_CIPHER_MODE_CTR)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_CTR) {
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	795b      	ldrb	r3, [r3, #5]
 8007d58:	f023 030f 	bic.w	r3, r3, #15
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b50      	cmp	r3, #80	; 0x50
 8007d60:	d124      	bne.n	8007dac <mbedtls_cipher_update+0x404>
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ctr_func(ctx->cipher_ctx,
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff fcce 	bl	8007708 <mbedtls_cipher_get_base>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	695c      	ldr	r4, [r3, #20]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f103 0124 	add.w	r1, r3, #36	; 0x24
                                                                            ilen,
                                                                            &ctx->unprocessed_len,
                                                                            ctx->iv,
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f103 0528 	add.w	r5, r3, #40	; 0x28
                                                                            ctx->unprocessed_data,
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3314      	adds	r3, #20
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->ctr_func(ctx->cipher_ctx,
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	9202      	str	r2, [sp, #8]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	9201      	str	r2, [sp, #4]
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	462b      	mov	r3, r5
 8007d90:	460a      	mov	r2, r1
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	47a0      	blx	r4
 8007d96:	61b8      	str	r0, [r7, #24]
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <mbedtls_cipher_update+0x3fa>
                                                                            input, output))) {
            return ret;
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	e054      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	601a      	str	r2, [r3, #0]

        return 0;
 8007da8:	2300      	movs	r3, #0
 8007daa:	e04f      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_XTS) {
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	795b      	ldrb	r3, [r3, #5]
 8007db2:	f023 030f 	bic.w	r3, r3, #15
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2ba0      	cmp	r3, #160	; 0xa0
 8007dba:	d126      	bne.n	8007e0a <mbedtls_cipher_update+0x462>
        if (ctx->unprocessed_len > 0) {
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <mbedtls_cipher_update+0x420>
            /* We can only process an entire data unit at a time. */
            return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
 8007dc4:	4b23      	ldr	r3, [pc, #140]	; (8007e54 <mbedtls_cipher_update+0x4ac>)
 8007dc6:	e041      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
        }

        ret = mbedtls_cipher_get_base(ctx->cipher_info)->xts_func(ctx->cipher_ctx,
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff fc9b 	bl	8007708 <mbedtls_cipher_get_base>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	699c      	ldr	r4, [r3, #24]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                                  ctx->operation,
                                                                  ilen,
                                                                  ctx->iv,
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f103 0228 	add.w	r2, r3, #40	; 0x28
        ret = mbedtls_cipher_get_base(ctx->cipher_info)->xts_func(ctx->cipher_ctx,
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	4613      	mov	r3, r2
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	47a0      	blx	r4
 8007df4:	61b8      	str	r0, [r7, #24]
                                                                  input,
                                                                  output);
        if (ret != 0) {
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <mbedtls_cipher_update+0x458>
            return ret;
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	e025      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	601a      	str	r2, [r3, #0]

        return 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	e020      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_CIPHER_MODE_STREAM)
    if (((mbedtls_cipher_mode_t) ctx->cipher_info->mode) == MBEDTLS_MODE_STREAM) {
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	795b      	ldrb	r3, [r3, #5]
 8007e10:	f023 030f 	bic.w	r3, r3, #15
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b70      	cmp	r3, #112	; 0x70
 8007e18:	d117      	bne.n	8007e4a <mbedtls_cipher_update+0x4a2>
        if (0 != (ret = mbedtls_cipher_get_base(ctx->cipher_info)->stream_func(ctx->cipher_ctx,
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff fc72 	bl	8007708 <mbedtls_cipher_get_base>
 8007e24:	4603      	mov	r3, r0
 8007e26:	69dc      	ldr	r4, [r3, #28]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	47a0      	blx	r4
 8007e34:	61b8      	str	r0, [r7, #24]
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <mbedtls_cipher_update+0x498>
                                                                               ilen, input,
                                                                               output))) {
            return ret;
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	e005      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
        }

        *olen = ilen;
 8007e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	601a      	str	r2, [r3, #0]

        return 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	e000      	b.n	8007e4c <mbedtls_cipher_update+0x4a4>
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
 8007e4a:	4b02      	ldr	r3, [pc, #8]	; (8007e54 <mbedtls_cipher_update+0x4ac>)
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3720      	adds	r7, #32
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bdb0      	pop	{r4, r5, r7, pc}
 8007e54:	ffff9f80 	.word	0xffff9f80

08007e58 <gcm_ctx_alloc>:
#if defined(MBEDTLS_GCM_C) && \
    (defined(MBEDTLS_CIPHER_HAVE_GCM_AES_VIA_LEGACY_OR_USE_PSA) || \
    defined(MBEDTLS_ARIA_C) || defined(MBEDTLS_CAMELLIA_C))
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc(1, sizeof(mbedtls_gcm_context));
 8007e5e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e62:	2001      	movs	r0, #1
 8007e64:	f008 fad4 	bl	8010410 <calloc>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	607b      	str	r3, [r7, #4]

    if (ctx != NULL) {
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <gcm_ctx_alloc+0x20>
        mbedtls_gcm_init((mbedtls_gcm_context *) ctx);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f002 fc48 	bl	800a708 <mbedtls_gcm_init>
    }

    return ctx;
 8007e78:	687b      	ldr	r3, [r7, #4]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <gcm_ctx_free>:

static void gcm_ctx_free(void *ctx)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
    mbedtls_gcm_free(ctx);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f003 fb7c 	bl	800b588 <mbedtls_gcm_free>
    mbedtls_free(ctx);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f008 fae3 	bl	801045c <free>
}
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <ccm_ctx_alloc>:
#if defined(MBEDTLS_CCM_C) && \
    (defined(MBEDTLS_CIPHER_HAVE_CCM_AES_VIA_LEGACY_OR_USE_PSA) || \
    defined(MBEDTLS_ARIA_C) || defined(MBEDTLS_CAMELLIA_C))
/* shared by all CCM ciphers */
static void *ccm_ctx_alloc(void)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc(1, sizeof(mbedtls_ccm_context));
 8007ea4:	2180      	movs	r1, #128	; 0x80
 8007ea6:	2001      	movs	r0, #1
 8007ea8:	f008 fab2 	bl	8010410 <calloc>
 8007eac:	4603      	mov	r3, r0
 8007eae:	607b      	str	r3, [r7, #4]

    if (ctx != NULL) {
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <ccm_ctx_alloc+0x1e>
        mbedtls_ccm_init((mbedtls_ccm_context *) ctx);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7fe fd1a 	bl	80068f0 <mbedtls_ccm_init>
    }

    return ctx;
 8007ebc:	687b      	ldr	r3, [r7, #4]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <ccm_ctx_free>:

static void ccm_ctx_free(void *ctx)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
    mbedtls_ccm_free(ctx);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7fe fd60 	bl	8006994 <mbedtls_ccm_free>
    mbedtls_free(ctx);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f008 fac1 	bl	801045c <free>
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                              const unsigned char *input, unsigned char *output)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	60f8      	str	r0, [r7, #12]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_ecb((mbedtls_aes_context *) ctx, operation, input, output);
 8007ef2:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f7fb fbde 	bl	80036bc <mbedtls_aes_crypt_ecb>
 8007f00:	4603      	mov	r3, r0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <aes_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
                              unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b086      	sub	sp, #24
 8007f0e:	af02      	add	r7, sp, #8
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
 8007f16:	460b      	mov	r3, r1
 8007f18:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cbc((mbedtls_aes_context *) ctx, operation, length, iv, input,
 8007f1a:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f7fb fbea 	bl	8003704 <mbedtls_aes_crypt_cbc>
 8007f30:	4603      	mov	r3, r0
                                 output);
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <aes_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int aes_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
                                 size_t length, size_t *iv_off, unsigned char *iv,
                                 const unsigned char *input, unsigned char *output)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b088      	sub	sp, #32
 8007f3e:	af04      	add	r7, sp, #16
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	460b      	mov	r3, r1
 8007f48:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cfb128((mbedtls_aes_context *) ctx, operation, length, iv_off, iv,
 8007f4a:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	9302      	str	r3, [sp, #8]
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f7fc f930 	bl	80041c4 <mbedtls_aes_crypt_cfb128>
 8007f64:	4603      	mov	r3, r0
                                    input, output);
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <aes_crypt_ofb_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
static int aes_crypt_ofb_wrap(void *ctx, size_t length, size_t *iv_off,
                              unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b086      	sub	sp, #24
 8007f72:	af02      	add	r7, sp, #8
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	60b9      	str	r1, [r7, #8]
 8007f78:	607a      	str	r2, [r7, #4]
 8007f7a:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ofb((mbedtls_aes_context *) ctx, length, iv_off,
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7fc f9a3 	bl	80042d6 <mbedtls_aes_crypt_ofb>
 8007f90:	4603      	mov	r3, r0
                                 iv, input, output);
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <aes_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int aes_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
                              unsigned char *nonce_counter, unsigned char *stream_block,
                              const unsigned char *input, unsigned char *output)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b088      	sub	sp, #32
 8007f9e:	af04      	add	r7, sp, #16
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	607a      	str	r2, [r7, #4]
 8007fa6:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ctr((mbedtls_aes_context *) ctx, length, nc_off, nonce_counter,
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	9302      	str	r3, [sp, #8]
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	9301      	str	r3, [sp, #4]
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	68b9      	ldr	r1, [r7, #8]
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f7fc f9cc 	bl	8004358 <mbedtls_aes_crypt_ctr>
 8007fc0:	4603      	mov	r3, r0
                                 stream_block, input, output);
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <aes_crypt_xts_wrap>:
static int aes_crypt_xts_wrap(void *ctx, mbedtls_operation_t operation,
                              size_t length,
                              const unsigned char data_unit[16],
                              const unsigned char *input,
                              unsigned char *output)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b088      	sub	sp, #32
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	607a      	str	r2, [r7, #4]
 8007fd6:	603b      	str	r3, [r7, #0]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	72fb      	strb	r3, [r7, #11]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	613b      	str	r3, [r7, #16]
    int mode;

    switch (operation) {
 8007fe0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d004      	beq.n	8007ff2 <aes_crypt_xts_wrap+0x26>
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d105      	bne.n	8007ff8 <aes_crypt_xts_wrap+0x2c>
        case MBEDTLS_ENCRYPT:
            mode = MBEDTLS_AES_ENCRYPT;
 8007fec:	2301      	movs	r3, #1
 8007fee:	617b      	str	r3, [r7, #20]
            break;
 8007ff0:	e004      	b.n	8007ffc <aes_crypt_xts_wrap+0x30>
        case MBEDTLS_DECRYPT:
            mode = MBEDTLS_AES_DECRYPT;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	617b      	str	r3, [r7, #20]
            break;
 8007ff6:	e001      	b.n	8007ffc <aes_crypt_xts_wrap+0x30>
        default:
            return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007ff8:	4b08      	ldr	r3, [pc, #32]	; (800801c <aes_crypt_xts_wrap+0x50>)
 8007ffa:	e00a      	b.n	8008012 <aes_crypt_xts_wrap+0x46>
    }

    return mbedtls_aes_crypt_xts(xts_ctx, mode, length,
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	9301      	str	r3, [sp, #4]
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	6979      	ldr	r1, [r7, #20]
 800800a:	6938      	ldr	r0, [r7, #16]
 800800c:	f7fb fd17 	bl	8003a3e <mbedtls_aes_crypt_xts>
 8008010:	4603      	mov	r3, r0
                                 data_unit, input, output);
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	ffff9f00 	.word	0xffff9f00

08008020 <aes_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
static int aes_setkey_dec_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_dec((mbedtls_aes_context *) ctx, key, key_bitlen);
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	68b9      	ldr	r1, [r7, #8]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f7fa fbad 	bl	8002790 <mbedtls_aes_setkey_dec>
 8008036:	4603      	mov	r3, r0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <aes_setkey_enc_wrap>:
#endif

static int aes_setkey_enc_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_enc((mbedtls_aes_context *) ctx, key, key_bitlen);
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7fa f9b7 	bl	80023c4 <mbedtls_aes_setkey_enc>
 8008056:	4603      	mov	r3, r0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <aes_ctx_alloc>:

static void *aes_ctx_alloc(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
    mbedtls_aes_context *aes = mbedtls_calloc(1, sizeof(mbedtls_aes_context));
 8008066:	f44f 718c 	mov.w	r1, #280	; 0x118
 800806a:	2001      	movs	r0, #1
 800806c:	f008 f9d0 	bl	8010410 <calloc>
 8008070:	4603      	mov	r3, r0
 8008072:	607b      	str	r3, [r7, #4]

    if (aes == NULL) {
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <aes_ctx_alloc+0x1e>
        return NULL;
 800807a:	2300      	movs	r3, #0
 800807c:	e003      	b.n	8008086 <aes_ctx_alloc+0x26>
    }

    mbedtls_aes_init(aes);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7fa f94e 	bl	8002320 <mbedtls_aes_init>

    return aes;
 8008084:	687b      	ldr	r3, [r7, #4]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <aes_ctx_free>:

static void aes_ctx_free(void *ctx)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b082      	sub	sp, #8
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
    mbedtls_aes_free((mbedtls_aes_context *) ctx);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7fa f950 	bl	800233c <mbedtls_aes_free>
    mbedtls_free(ctx);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f008 f9dd 	bl	801045c <free>
}
 80080a2:	bf00      	nop
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <xts_aes_setkey_enc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
static int xts_aes_setkey_enc_wrap(void *ctx, const unsigned char *key,
                                   unsigned int key_bitlen)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b086      	sub	sp, #24
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	60b9      	str	r1, [r7, #8]
 80080b4:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	617b      	str	r3, [r7, #20]
    return mbedtls_aes_xts_setkey_enc(xts_ctx, key, key_bitlen);
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	68b9      	ldr	r1, [r7, #8]
 80080be:	6978      	ldr	r0, [r7, #20]
 80080c0:	f7fa fce2 	bl	8002a88 <mbedtls_aes_xts_setkey_enc>
 80080c4:	4603      	mov	r3, r0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <xts_aes_setkey_dec_wrap>:

static int xts_aes_setkey_dec_wrap(void *ctx, const unsigned char *key,
                                   unsigned int key_bitlen)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b086      	sub	sp, #24
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	60b9      	str	r1, [r7, #8]
 80080d8:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	617b      	str	r3, [r7, #20]
    return mbedtls_aes_xts_setkey_dec(xts_ctx, key, key_bitlen);
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	68b9      	ldr	r1, [r7, #8]
 80080e2:	6978      	ldr	r0, [r7, #20]
 80080e4:	f7fa fd07 	bl	8002af6 <mbedtls_aes_xts_setkey_dec>
 80080e8:	4603      	mov	r3, r0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <xts_aes_ctx_alloc>:

static void *xts_aes_ctx_alloc(void)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
    mbedtls_aes_xts_context *xts_ctx = mbedtls_calloc(1, sizeof(*xts_ctx));
 80080f8:	f44f 710c 	mov.w	r1, #560	; 0x230
 80080fc:	2001      	movs	r0, #1
 80080fe:	f008 f987 	bl	8010410 <calloc>
 8008102:	4603      	mov	r3, r0
 8008104:	607b      	str	r3, [r7, #4]

    if (xts_ctx != NULL) {
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <xts_aes_ctx_alloc+0x20>
        mbedtls_aes_xts_init(xts_ctx);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7fa f926 	bl	800235e <mbedtls_aes_xts_init>
    }

    return xts_ctx;
 8008112:	687b      	ldr	r3, [r7, #4]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <xts_aes_ctx_free>:

static void xts_aes_ctx_free(void *ctx)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60fb      	str	r3, [r7, #12]

    if (xts_ctx == NULL) {
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d006      	beq.n	800813c <xts_aes_ctx_free+0x20>
        return;
    }

    mbedtls_aes_xts_free(xts_ctx);
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f7fa f927 	bl	8002382 <mbedtls_aes_xts_free>
    mbedtls_free(xts_ctx);
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f008 f991 	bl	801045c <free>
 800813a:	e000      	b.n	800813e <xts_aes_ctx_free+0x22>
        return;
 800813c:	bf00      	nop
}
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_AES_C */

#if defined(MBEDTLS_GCM_C) && defined(MBEDTLS_CCM_GCM_CAN_AES)
static int gcm_aes_setkey_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	2102      	movs	r1, #2
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f002 fc6e 	bl	800aa38 <mbedtls_gcm_setkey>
 800815c:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <ccm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_HAVE_GCM_AES_VIA_LEGACY_OR_USE_PSA */

#if defined(MBEDTLS_CCM_C) && defined(MBEDTLS_CCM_GCM_CAN_AES)
static int ccm_aes_setkey_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	2102      	movs	r1, #2
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f7fe fbc6 	bl	800690a <mbedtls_ccm_setkey>
 800817e:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <camellia_crypt_ecb_wrap>:

#if defined(MBEDTLS_CAMELLIA_C)

static int camellia_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                                   const unsigned char *input, unsigned char *output)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	607a      	str	r2, [r7, #4]
 8008192:	603b      	str	r3, [r7, #0]
 8008194:	460b      	mov	r3, r1
 8008196:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_ecb((mbedtls_camellia_context *) ctx, operation, input,
 8008198:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f7fe f8b1 	bl	8006308 <mbedtls_camellia_crypt_ecb>
 80081a6:	4603      	mov	r3, r0
                                      output);
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <camellia_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int camellia_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation,
                                   size_t length, unsigned char *iv,
                                   const unsigned char *input, unsigned char *output)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af02      	add	r7, sp, #8
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	607a      	str	r2, [r7, #4]
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	460b      	mov	r3, r1
 80081be:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cbc((mbedtls_camellia_context *) ctx, operation, length, iv,
 80081c0:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f7fe f9b2 	bl	800653a <mbedtls_camellia_crypt_cbc>
 80081d6:	4603      	mov	r3, r0
                                      input, output);
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <camellia_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int camellia_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
                                      size_t length, size_t *iv_off, unsigned char *iv,
                                      const unsigned char *input, unsigned char *output)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af04      	add	r7, sp, #16
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	460b      	mov	r3, r1
 80081ee:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cfb128((mbedtls_camellia_context *) ctx, operation, length,
 80081f0:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	9302      	str	r3, [sp, #8]
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f7fe fa93 	bl	8006730 <mbedtls_camellia_crypt_cfb128>
 800820a:	4603      	mov	r3, r0
                                         iv_off, iv, input, output);
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <camellia_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int camellia_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
                                   unsigned char *nonce_counter, unsigned char *stream_block,
                                   const unsigned char *input, unsigned char *output)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af04      	add	r7, sp, #16
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	603b      	str	r3, [r7, #0]
    return mbedtls_camellia_crypt_ctr((mbedtls_camellia_context *) ctx, length, nc_off,
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	9302      	str	r3, [sp, #8]
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	68b9      	ldr	r1, [r7, #8]
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f7fe faf3 	bl	8006820 <mbedtls_camellia_crypt_ctr>
 800823a:	4603      	mov	r3, r0
                                      nonce_counter, stream_block, input, output);
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <camellia_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
static int camellia_setkey_dec_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_dec((mbedtls_camellia_context *) ctx, key, key_bitlen);
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f7fd ff5b 	bl	8006110 <mbedtls_camellia_setkey_dec>
 800825a:	4603      	mov	r3, r0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <camellia_setkey_enc_wrap>:
#endif

static int camellia_setkey_enc_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_enc((mbedtls_camellia_context *) ctx, key, key_bitlen);
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	68b9      	ldr	r1, [r7, #8]
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f7fd f8dd 	bl	8005434 <mbedtls_camellia_setkey_enc>
 800827a:	4603      	mov	r3, r0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <camellia_ctx_alloc>:

static void *camellia_ctx_alloc(void)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
    mbedtls_camellia_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_camellia_context));
 800828a:	f44f 718a 	mov.w	r1, #276	; 0x114
 800828e:	2001      	movs	r0, #1
 8008290:	f008 f8be 	bl	8010410 <calloc>
 8008294:	4603      	mov	r3, r0
 8008296:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <camellia_ctx_alloc+0x1e>
        return NULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	e003      	b.n	80082aa <camellia_ctx_alloc+0x26>
    }

    mbedtls_camellia_init(ctx);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7fd f8a6 	bl	80053f4 <mbedtls_camellia_init>

    return ctx;
 80082a8:	687b      	ldr	r3, [r7, #4]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <camellia_ctx_free>:

static void camellia_ctx_free(void *ctx)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
    mbedtls_camellia_free((mbedtls_camellia_context *) ctx);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fd f8a8 	bl	8005410 <mbedtls_camellia_free>
    mbedtls_free(ctx);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f008 f8cb 	bl	801045c <free>
}
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <gcm_camellia_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_camellia_setkey_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	2105      	movs	r1, #5
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f002 fba9 	bl	800aa38 <mbedtls_gcm_setkey>
 80082e6:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <ccm_camellia_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_camellia_setkey_wrap(void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	2105      	movs	r1, #5
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7fe fb01 	bl	800690a <mbedtls_ccm_setkey>
 8008308:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <aria_crypt_ecb_wrap>:

#if defined(MBEDTLS_ARIA_C)

static int aria_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                               const unsigned char *input, unsigned char *output)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	60f8      	str	r0, [r7, #12]
 800831a:	607a      	str	r2, [r7, #4]
 800831c:	603b      	str	r3, [r7, #0]
 800831e:	460b      	mov	r3, r1
 8008320:	72fb      	strb	r3, [r7, #11]
    (void) operation;
    return mbedtls_aria_crypt_ecb((mbedtls_aria_context *) ctx, input,
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f7fc fcf6 	bl	8004d18 <mbedtls_aria_crypt_ecb>
 800832c:	4603      	mov	r3, r0
                                  output);
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <aria_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aria_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation,
                               size_t length, unsigned char *iv,
                               const unsigned char *input, unsigned char *output)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b086      	sub	sp, #24
 800833a:	af02      	add	r7, sp, #8
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
 8008342:	460b      	mov	r3, r1
 8008344:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aria_crypt_cbc((mbedtls_aria_context *) ctx, operation, length, iv,
 8008346:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7fc fe09 	bl	8004f6e <mbedtls_aria_crypt_cbc>
 800835c:	4603      	mov	r3, r0
                                  input, output);
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <aria_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int aria_crypt_cfb128_wrap(void *ctx, mbedtls_operation_t operation,
                                  size_t length, size_t *iv_off, unsigned char *iv,
                                  const unsigned char *input, unsigned char *output)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b088      	sub	sp, #32
 800836a:	af04      	add	r7, sp, #16
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
 8008372:	460b      	mov	r3, r1
 8008374:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aria_crypt_cfb128((mbedtls_aria_context *) ctx, operation, length,
 8008376:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	9302      	str	r3, [sp, #8]
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7fc fee8 	bl	8005160 <mbedtls_aria_crypt_cfb128>
 8008390:	4603      	mov	r3, r0
                                     iv_off, iv, input, output);
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <aria_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int aria_crypt_ctr_wrap(void *ctx, size_t length, size_t *nc_off,
                               unsigned char *nonce_counter, unsigned char *stream_block,
                               const unsigned char *input, unsigned char *output)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b088      	sub	sp, #32
 800839e:	af04      	add	r7, sp, #16
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	607a      	str	r2, [r7, #4]
 80083a6:	603b      	str	r3, [r7, #0]
    return mbedtls_aria_crypt_ctr((mbedtls_aria_context *) ctx, length, nc_off,
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	9302      	str	r3, [sp, #8]
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f7fc ff42 	bl	8005244 <mbedtls_aria_crypt_ctr>
 80083c0:	4603      	mov	r3, r0
                                  nonce_counter, stream_block, input, output);
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <aria_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if !defined(MBEDTLS_BLOCK_CIPHER_NO_DECRYPT)
static int aria_setkey_dec_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	607a      	str	r2, [r7, #4]
    return mbedtls_aria_setkey_dec((mbedtls_aria_context *) ctx, key, key_bitlen);
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f7fc fc24 	bl	8004c28 <mbedtls_aria_setkey_dec>
 80083e0:	4603      	mov	r3, r0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <aria_setkey_enc_wrap>:
#endif

static int aria_setkey_enc_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	607a      	str	r2, [r7, #4]
    return mbedtls_aria_setkey_enc((mbedtls_aria_context *) ctx, key, key_bitlen);
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	68b9      	ldr	r1, [r7, #8]
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f7fc fac0 	bl	8004980 <mbedtls_aria_setkey_enc>
 8008400:	4603      	mov	r3, r0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <aria_ctx_alloc>:

static void *aria_ctx_alloc(void)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
    mbedtls_aria_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_aria_context));
 8008410:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008414:	2001      	movs	r0, #1
 8008416:	f007 fffb 	bl	8010410 <calloc>
 800841a:	4603      	mov	r3, r0
 800841c:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <aria_ctx_alloc+0x1e>
        return NULL;
 8008424:	2300      	movs	r3, #0
 8008426:	e003      	b.n	8008430 <aria_ctx_alloc+0x26>
    }

    mbedtls_aria_init(ctx);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7fc fd81 	bl	8004f30 <mbedtls_aria_init>

    return ctx;
 800842e:	687b      	ldr	r3, [r7, #4]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <aria_ctx_free>:

static void aria_ctx_free(void *ctx)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
    mbedtls_aria_free((mbedtls_aria_context *) ctx);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7fc fd83 	bl	8004f4c <mbedtls_aria_free>
    mbedtls_free(ctx);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f008 f808 	bl	801045c <free>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <gcm_aria_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_aria_setkey_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey((mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	2106      	movs	r1, #6
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f002 fae6 	bl	800aa38 <mbedtls_gcm_setkey>
 800846c:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <ccm_aria_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aria_setkey_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey((mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	2106      	movs	r1, #6
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f7fe fa3e 	bl	800690a <mbedtls_ccm_setkey>
 800848e:	4603      	mov	r3, r0
                              key, key_bitlen);
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <des_crypt_ecb_wrap>:

#if defined(MBEDTLS_DES_C)

static int des_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                              const unsigned char *input, unsigned char *output)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	607a      	str	r2, [r7, #4]
 80084a2:	603b      	str	r3, [r7, #0]
 80084a4:	460b      	mov	r3, r1
 80084a6:	72fb      	strb	r3, [r7, #11]
    ((void) operation);
    return mbedtls_des_crypt_ecb((mbedtls_des_context *) ctx, input, output);
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	6879      	ldr	r1, [r7, #4]
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f001 fa77 	bl	80099a0 <mbedtls_des_crypt_ecb>
 80084b2:	4603      	mov	r3, r0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <des3_crypt_ecb_wrap>:

static int des3_crypt_ecb_wrap(void *ctx, mbedtls_operation_t operation,
                               const unsigned char *input, unsigned char *output)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	607a      	str	r2, [r7, #4]
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	460b      	mov	r3, r1
 80084ca:	72fb      	strb	r3, [r7, #11]
    ((void) operation);
    return mbedtls_des3_crypt_ecb((mbedtls_des3_context *) ctx, input, output);
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f001 fcff 	bl	8009ed4 <mbedtls_des3_crypt_ecb>
 80084d6:	4603      	mov	r3, r0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <des_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int des_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
                              unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	607a      	str	r2, [r7, #4]
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	460b      	mov	r3, r1
 80084ee:	72fb      	strb	r3, [r7, #11]
    return mbedtls_des_crypt_cbc((mbedtls_des_context *) ctx, operation, length, iv, input,
 80084f0:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f001 fbe9 	bl	8009cd8 <mbedtls_des_crypt_cbc>
 8008506:	4603      	mov	r3, r0
                                 output);
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <des3_crypt_cbc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CBC */

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int des3_crypt_cbc_wrap(void *ctx, mbedtls_operation_t operation, size_t length,
                               unsigned char *iv, const unsigned char *input, unsigned char *output)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af02      	add	r7, sp, #8
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	607a      	str	r2, [r7, #4]
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	460b      	mov	r3, r1
 800851e:	72fb      	strb	r3, [r7, #11]
    return mbedtls_des3_crypt_cbc((mbedtls_des3_context *) ctx, operation, length, iv, input,
 8008520:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f001 ffd7 	bl	800a4e4 <mbedtls_des3_crypt_cbc>
 8008536:	4603      	mov	r3, r0
                                  output);
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <des_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CBC */

static int des_setkey_dec_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des_setkey_dec((mbedtls_des_context *) ctx, key);
 800854c:	68b9      	ldr	r1, [r7, #8]
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f001 f843 	bl	80095da <mbedtls_des_setkey_dec>
 8008554:	4603      	mov	r3, r0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <des_setkey_enc_wrap>:

static int des_setkey_enc_wrap(void *ctx, const unsigned char *key,
                               unsigned int key_bitlen)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des_setkey_enc((mbedtls_des_context *) ctx, key);
 800856a:	68b9      	ldr	r1, [r7, #8]
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f001 f825 	bl	80095bc <mbedtls_des_setkey_enc>
 8008572:	4603      	mov	r3, r0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <des3_set2key_dec_wrap>:

static int des3_set2key_dec_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set2key_dec((mbedtls_des3_context *) ctx, key);
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f001 f919 	bl	80097c2 <mbedtls_des3_set2key_dec>
 8008590:	4603      	mov	r3, r0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <des3_set2key_enc_wrap>:

static int des3_set2key_enc_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	60b9      	str	r1, [r7, #8]
 80085a4:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set2key_enc((mbedtls_des3_context *) ctx, key);
 80085a6:	68b9      	ldr	r1, [r7, #8]
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f001 f8e2 	bl	8009772 <mbedtls_des3_set2key_enc>
 80085ae:	4603      	mov	r3, r0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <des3_set3key_dec_wrap>:

static int des3_set3key_dec_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set3key_dec((mbedtls_des3_context *) ctx, key);
 80085c4:	68b9      	ldr	r1, [r7, #8]
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f001 f9c2 	bl	8009950 <mbedtls_des3_set3key_dec>
 80085cc:	4603      	mov	r3, r0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <des3_set3key_enc_wrap>:

static int des3_set3key_enc_wrap(void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	60f8      	str	r0, [r7, #12]
 80085de:	60b9      	str	r1, [r7, #8]
 80085e0:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set3key_enc((mbedtls_des3_context *) ctx, key);
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f001 f98b 	bl	8009900 <mbedtls_des3_set3key_enc>
 80085ea:	4603      	mov	r3, r0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <des_ctx_alloc>:

static void *des_ctx_alloc(void)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
    mbedtls_des_context *des = mbedtls_calloc(1, sizeof(mbedtls_des_context));
 80085fa:	2180      	movs	r1, #128	; 0x80
 80085fc:	2001      	movs	r0, #1
 80085fe:	f007 ff07 	bl	8010410 <calloc>
 8008602:	4603      	mov	r3, r0
 8008604:	607b      	str	r3, [r7, #4]

    if (des == NULL) {
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <des_ctx_alloc+0x1c>
        return NULL;
 800860c:	2300      	movs	r3, #0
 800860e:	e003      	b.n	8008618 <des_ctx_alloc+0x24>
    }

    mbedtls_des_init(des);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fdaf 	bl	8009174 <mbedtls_des_init>

    return des;
 8008616:	687b      	ldr	r3, [r7, #4]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <des_ctx_free>:

static void des_ctx_free(void *ctx)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
    mbedtls_des_free((mbedtls_des_context *) ctx);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fdb0 	bl	800918e <mbedtls_des_free>
    mbedtls_free(ctx);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f007 ff14 	bl	801045c <free>
}
 8008634:	bf00      	nop
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <des3_ctx_alloc>:

static void *des3_ctx_alloc(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
    mbedtls_des3_context *des3;
    des3 = mbedtls_calloc(1, sizeof(mbedtls_des3_context));
 8008642:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008646:	2001      	movs	r0, #1
 8008648:	f007 fee2 	bl	8010410 <calloc>
 800864c:	4603      	mov	r3, r0
 800864e:	607b      	str	r3, [r7, #4]

    if (des3 == NULL) {
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <des3_ctx_alloc+0x1e>
        return NULL;
 8008656:	2300      	movs	r3, #0
 8008658:	e003      	b.n	8008662 <des3_ctx_alloc+0x26>
    }

    mbedtls_des3_init(des3);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fda7 	bl	80091ae <mbedtls_des3_init>

    return des3;
 8008660:	687b      	ldr	r3, [r7, #4]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <des3_ctx_free>:

static void des3_ctx_free(void *ctx)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b082      	sub	sp, #8
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
    mbedtls_des3_free((mbedtls_des3_context *) ctx);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fda9 	bl	80091ca <mbedtls_des3_free>
    mbedtls_free(ctx);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f007 feef 	bl	801045c <free>
}
 800867e:	bf00      	nop
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
	...

08008688 <chacha20_setkey_wrap>:

#if defined(MBEDTLS_CHACHA20_C)

static int chacha20_setkey_wrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
    if (key_bitlen != 256U) {
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800869a:	d001      	beq.n	80086a0 <chacha20_setkey_wrap+0x18>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800869c:	4b07      	ldr	r3, [pc, #28]	; (80086bc <chacha20_setkey_wrap+0x34>)
 800869e:	e009      	b.n	80086b4 <chacha20_setkey_wrap+0x2c>
    }

    if (0 != mbedtls_chacha20_setkey((mbedtls_chacha20_context *) ctx, key)) {
 80086a0:	68b9      	ldr	r1, [r7, #8]
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f7fe fda8 	bl	80071f8 <mbedtls_chacha20_setkey>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <chacha20_setkey_wrap+0x2a>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 80086ae:	4b03      	ldr	r3, [pc, #12]	; (80086bc <chacha20_setkey_wrap+0x34>)
 80086b0:	e000      	b.n	80086b4 <chacha20_setkey_wrap+0x2c>
    }

    return 0;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	ffff9f00 	.word	0xffff9f00

080086c0 <chacha20_stream_wrap>:

static int chacha20_stream_wrap(void *ctx,  size_t length,
                                const unsigned char *input,
                                unsigned char *output)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
 80086cc:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80086ce:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80086d2:	617b      	str	r3, [r7, #20]

    ret = mbedtls_chacha20_update(ctx, length, input, output);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	68b9      	ldr	r1, [r7, #8]
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f7fe fdf4 	bl	80072c8 <mbedtls_chacha20_update>
 80086e0:	6178      	str	r0, [r7, #20]
    if (ret == MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA) {
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80086e8:	d101      	bne.n	80086ee <chacha20_stream_wrap+0x2e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 80086ea:	4b03      	ldr	r3, [pc, #12]	; (80086f8 <chacha20_stream_wrap+0x38>)
 80086ec:	e000      	b.n	80086f0 <chacha20_stream_wrap+0x30>
    }

    return ret;
 80086ee:	697b      	ldr	r3, [r7, #20]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	ffff9f00 	.word	0xffff9f00

080086fc <chacha20_ctx_alloc>:

static void *chacha20_ctx_alloc(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
    mbedtls_chacha20_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_chacha20_context));
 8008702:	2184      	movs	r1, #132	; 0x84
 8008704:	2001      	movs	r0, #1
 8008706:	f007 fe83 	bl	8010410 <calloc>
 800870a:	4603      	mov	r3, r0
 800870c:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <chacha20_ctx_alloc+0x1c>
        return NULL;
 8008714:	2300      	movs	r3, #0
 8008716:	e003      	b.n	8008720 <chacha20_ctx_alloc+0x24>
    }

    mbedtls_chacha20_init(ctx);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7fe fd46 	bl	80071aa <mbedtls_chacha20_init>

    return ctx;
 800871e:	687b      	ldr	r3, [r7, #4]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <chacha20_ctx_free>:

static void chacha20_ctx_free(void *ctx)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
    mbedtls_chacha20_free((mbedtls_chacha20_context *) ctx);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7fe fd51 	bl	80071d8 <mbedtls_chacha20_free>
    mbedtls_free(ctx);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f007 fe90 	bl	801045c <free>
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <chachapoly_setkey_wrap>:
#if defined(MBEDTLS_CHACHAPOLY_C)

static int chachapoly_setkey_wrap(void *ctx,
                                  const unsigned char *key,
                                  unsigned int key_bitlen)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
    if (key_bitlen != 256U) {
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008756:	d001      	beq.n	800875c <chachapoly_setkey_wrap+0x18>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8008758:	4b07      	ldr	r3, [pc, #28]	; (8008778 <chachapoly_setkey_wrap+0x34>)
 800875a:	e009      	b.n	8008770 <chachapoly_setkey_wrap+0x2c>
    }

    if (0 != mbedtls_chachapoly_setkey((mbedtls_chachapoly_context *) ctx, key)) {
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f7fe ff1f 	bl	80075a2 <mbedtls_chachapoly_setkey>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <chachapoly_setkey_wrap+0x2a>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800876a:	4b03      	ldr	r3, [pc, #12]	; (8008778 <chachapoly_setkey_wrap+0x34>)
 800876c:	e000      	b.n	8008770 <chachapoly_setkey_wrap+0x2c>
    }

    return 0;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	ffff9f00 	.word	0xffff9f00

0800877c <chachapoly_ctx_alloc>:

static void *chachapoly_ctx_alloc(void)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
    mbedtls_chachapoly_context *ctx;
    ctx = mbedtls_calloc(1, sizeof(mbedtls_chachapoly_context));
 8008782:	21e8      	movs	r1, #232	; 0xe8
 8008784:	2001      	movs	r0, #1
 8008786:	f007 fe43 	bl	8010410 <calloc>
 800878a:	4603      	mov	r3, r0
 800878c:	607b      	str	r3, [r7, #4]

    if (ctx == NULL) {
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <chachapoly_ctx_alloc+0x1c>
        return NULL;
 8008794:	2300      	movs	r3, #0
 8008796:	e003      	b.n	80087a0 <chachapoly_ctx_alloc+0x24>
    }

    mbedtls_chachapoly_init(ctx);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7fe feb0 	bl	80074fe <mbedtls_chachapoly_init>

    return ctx;
 800879e:	687b      	ldr	r3, [r7, #4]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <chachapoly_ctx_free>:

static void chachapoly_ctx_free(void *ctx)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
    mbedtls_chachapoly_free((mbedtls_chachapoly_context *) ctx);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7fe fecb 	bl	800754c <mbedtls_chachapoly_free>
    mbedtls_free(ctx);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f007 fe50 	bl	801045c <free>
}
 80087bc:	bf00      	nop
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <kw_ctx_alloc>:
};
#endif /* defined(MBEDTLS_CIPHER_NULL_CIPHER) */

#if defined(MBEDTLS_NIST_KW_C)
static void *kw_ctx_alloc(void)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc(1, sizeof(mbedtls_nist_kw_context));
 80087ca:	2144      	movs	r1, #68	; 0x44
 80087cc:	2001      	movs	r0, #1
 80087ce:	f007 fe1f 	bl	8010410 <calloc>
 80087d2:	4603      	mov	r3, r0
 80087d4:	607b      	str	r3, [r7, #4]

    if (ctx != NULL) {
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d002      	beq.n	80087e2 <kw_ctx_alloc+0x1e>
        mbedtls_nist_kw_init((mbedtls_nist_kw_context *) ctx);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f002 fefc 	bl	800b5da <mbedtls_nist_kw_init>
    }

    return ctx;
 80087e2:	687b      	ldr	r3, [r7, #4]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <kw_ctx_free>:

static void kw_ctx_free(void *ctx)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
    mbedtls_nist_kw_free(ctx);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f002 ff4b 	bl	800b690 <mbedtls_nist_kw_free>
    mbedtls_free(ctx);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f007 fe2e 	bl	801045c <free>
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <kw_aes_setkey_wrap>:

static int kw_aes_setkey_wrap(void *ctx, const unsigned char *key,
                              unsigned int key_bitlen)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af02      	add	r7, sp, #8
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
    return mbedtls_nist_kw_setkey((mbedtls_nist_kw_context *) ctx,
 8008814:	2301      	movs	r3, #1
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	2102      	movs	r1, #2
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f002 fee8 	bl	800b5f4 <mbedtls_nist_kw_setkey>
 8008824:	4603      	mov	r3, r0
                                  MBEDTLS_CIPHER_ID_AES, key, key_bitlen, 1);
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <kw_aes_setkey_unwrap>:

static int kw_aes_setkey_unwrap(void *ctx, const unsigned char *key,
                                unsigned int key_bitlen)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b086      	sub	sp, #24
 8008832:	af02      	add	r7, sp, #8
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	607a      	str	r2, [r7, #4]
    return mbedtls_nist_kw_setkey((mbedtls_nist_kw_context *) ctx,
 800883a:	2300      	movs	r3, #0
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	2102      	movs	r1, #2
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f002 fed5 	bl	800b5f4 <mbedtls_nist_kw_setkey>
 800884a:	4603      	mov	r3, r0
                                  MBEDTLS_CIPHER_ID_AES, key, key_bitlen, 0);
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <mbedtls_cipher_info_get_type>:
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <mbedtls_cipher_info_get_type+0x12>
        return MBEDTLS_CIPHER_NONE;
 8008862:	2300      	movs	r3, #0
 8008864:	e001      	b.n	800886a <mbedtls_cipher_info_get_type+0x16>
        return (mbedtls_cipher_type_t) info->MBEDTLS_PRIVATE(type);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	799b      	ldrb	r3, [r3, #6]
}
 800886a:	4618      	mov	r0, r3
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <mbedtls_cipher_info_get_block_size>:
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <mbedtls_cipher_info_get_block_size+0x12>
        return 0;
 8008884:	2300      	movs	r3, #0
 8008886:	e004      	b.n	8008892 <mbedtls_cipher_info_get_block_size+0x1c>
    return (size_t) (info->MBEDTLS_PRIVATE(block_size));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	791b      	ldrb	r3, [r3, #4]
 800888c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008890:	b2db      	uxtb	r3, r3
}
 8008892:	4618      	mov	r0, r3
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <mbedtls_ct_bool>:
#define RESTORE_ASM_SYNTAX
#endif

/* Convert a number into a condition in constant time. */
static inline mbedtls_ct_condition_t mbedtls_ct_bool(mbedtls_ct_uint_t x)
{
 800889e:	b480      	push	{r7}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
                  :
                  );
    return (mbedtls_ct_condition_t) x;
#elif defined(MBEDTLS_CT_ARM_ASM) && defined(MBEDTLS_CT_SIZE_32)
    uint32_t s;
    asm volatile (".syntax unified                                \n\t"
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	425a      	negs	r2, r3
 80088aa:	4313      	orrs	r3, r2
 80088ac:	17db      	asrs	r3, r3, #31
 80088ae:	60fa      	str	r2, [r7, #12]
 80088b0:	607b      	str	r3, [r7, #4]
                  [x] "+&l" (x)
                  :
                  :
                  "cc" /* clobbers flag bits */
                  );
    return (mbedtls_ct_condition_t) x;
 80088b2:	687b      	ldr	r3, [r7, #4]
    return (mbedtls_ct_condition_t) (-y);
#if defined(_MSC_VER)
#pragma warning( pop )
#endif
#endif
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <mbedtls_ct_uint_if_else_0>:
{
    return (size_t) (condition & if1);
}

static inline unsigned mbedtls_ct_uint_if_else_0(mbedtls_ct_condition_t condition, unsigned if1)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
    return (unsigned) (condition & if1);
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	4013      	ands	r3, r2
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <cmac_multiply_by_u>:
 * Block size must be 8 bytes or 16 bytes - the block sizes for DES and AES.
 */
static int cmac_multiply_by_u(unsigned char *output,
                              const unsigned char *input,
                              size_t blocksize)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08e      	sub	sp, #56	; 0x38
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
    const unsigned char R_128 = 0x87;
 80088e8:	2387      	movs	r3, #135	; 0x87
 80088ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    unsigned char R_n;
    uint32_t overflow = 0x00;
 80088ee:	2300      	movs	r3, #0
 80088f0:	633b      	str	r3, [r7, #48]	; 0x30
    int i;

    if (blocksize == MBEDTLS_AES_BLOCK_SIZE) {
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b10      	cmp	r3, #16
 80088f6:	d104      	bne.n	8008902 <cmac_multiply_by_u+0x26>
        R_n = R_128;
 80088f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008900:	e00c      	b.n	800891c <cmac_multiply_by_u+0x40>
    }
#if defined(MBEDTLS_DES_C)
    else if (blocksize == MBEDTLS_DES3_BLOCK_SIZE) {
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b08      	cmp	r3, #8
 8008906:	d107      	bne.n	8008918 <cmac_multiply_by_u+0x3c>
        const unsigned char R_64 = 0x1B;
 8008908:	231b      	movs	r3, #27
 800890a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        R_n = R_64;
 800890e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008912:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008916:	e001      	b.n	800891c <cmac_multiply_by_u+0x40>
    }
#endif
    else {
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8008918:	4b27      	ldr	r3, [pc, #156]	; (80089b8 <cmac_multiply_by_u+0xdc>)
 800891a:	e048      	b.n	80089ae <cmac_multiply_by_u+0xd2>
    }

    for (i = (int) blocksize - 4; i >= 0; i -= 4) {
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3b04      	subs	r3, #4
 8008920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008922:	e021      	b.n	8008968 <cmac_multiply_by_u+0x8c>
        uint32_t i32 = MBEDTLS_GET_UINT32_BE(&input[i], 0);
 8008924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	4413      	add	r3, r2
 800892a:	61fb      	str	r3, [r7, #28]
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008930:	613b      	str	r3, [r7, #16]
    return r;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	ba1b      	rev	r3, r3
 8008936:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t new_overflow = i32 >> 31;
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	0fdb      	lsrs	r3, r3, #31
 800893c:	623b      	str	r3, [r7, #32]
        i32 = (i32 << 1) | overflow;
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	005b      	lsls	r3, r3, #1
 8008942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008944:	4313      	orrs	r3, r2
 8008946:	627b      	str	r3, [r7, #36]	; 0x24
        MBEDTLS_PUT_UINT32_BE(i32, &output[i], 0);
 8008948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	441a      	add	r2, r3
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	ba1b      	rev	r3, r3
 8008952:	61ba      	str	r2, [r7, #24]
 8008954:	617b      	str	r3, [r7, #20]
 8008956:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	601a      	str	r2, [r3, #0]
}
 800895c:	bf00      	nop
        overflow = new_overflow;
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	633b      	str	r3, [r7, #48]	; 0x30
    for (i = (int) blocksize - 4; i >= 0; i -= 4) {
 8008962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008964:	3b04      	subs	r3, #4
 8008966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896a:	2b00      	cmp	r3, #0
 800896c:	dada      	bge.n	8008924 <cmac_multiply_by_u+0x48>
    }

    R_n = (unsigned char) mbedtls_ct_uint_if_else_0(mbedtls_ct_bool(input[0] >> 7), R_n);
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	09db      	lsrs	r3, r3, #7
 8008974:	b2db      	uxtb	r3, r3
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff ff91 	bl	800889e <mbedtls_ct_bool>
 800897c:	4602      	mov	r2, r0
 800897e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008982:	4619      	mov	r1, r3
 8008984:	4610      	mov	r0, r2
 8008986:	f7ff ff9b 	bl	80088c0 <mbedtls_ct_uint_if_else_0>
 800898a:	4603      	mov	r3, r0
 800898c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    output[blocksize - 1] ^= R_n;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3b01      	subs	r3, #1
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	4413      	add	r3, r2
 8008998:	7819      	ldrb	r1, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	3b01      	subs	r3, #1
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	4413      	add	r3, r2
 80089a2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80089a6:	404a      	eors	r2, r1
 80089a8:	b2d2      	uxtb	r2, r2
 80089aa:	701a      	strb	r2, [r3, #0]

    return 0;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3738      	adds	r7, #56	; 0x38
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	ffff9f00 	.word	0xffff9f00

080089bc <cmac_generate_subkeys>:
 *
 * - as specified by RFC 4493, section 2.3 Subkey Generation Algorithm
 */
static int cmac_generate_subkeys(mbedtls_cipher_context_t *ctx,
                                 unsigned char *K1, unsigned char *K2)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08e      	sub	sp, #56	; 0x38
 80089c0:	af02      	add	r7, sp, #8
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80089c8:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80089cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned char L[MBEDTLS_CMAC_MAX_BLOCK_SIZE];
    size_t olen, block_size;

    mbedtls_platform_zeroize(L, sizeof(L));
 80089ce:	f107 0318 	add.w	r3, r7, #24
 80089d2:	2110      	movs	r1, #16
 80089d4:	4618      	mov	r0, r3
 80089d6:	f002 fe6f 	bl	800b6b8 <mbedtls_platform_zeroize>

    block_size = mbedtls_cipher_info_get_block_size(ctx->cipher_info);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff ff49 	bl	8008876 <mbedtls_cipher_info_get_block_size>
 80089e4:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Calculate Ek(0) */
    if ((ret = mbedtls_cipher_update(ctx, L, block_size, L, &olen)) != 0) {
 80089e6:	f107 0218 	add.w	r2, r7, #24
 80089ea:	f107 0118 	add.w	r1, r7, #24
 80089ee:	f107 0314 	add.w	r3, r7, #20
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	4613      	mov	r3, r2
 80089f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f7fe ffd5 	bl	80079a8 <mbedtls_cipher_update>
 80089fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d113      	bne.n	8008a2e <cmac_generate_subkeys+0x72>
    }

    /*
     * Generate K1 and K2
     */
    if ((ret = cmac_multiply_by_u(K1, L, block_size)) != 0) {
 8008a06:	f107 0318 	add.w	r3, r7, #24
 8008a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	68b8      	ldr	r0, [r7, #8]
 8008a10:	f7ff ff64 	bl	80088dc <cmac_multiply_by_u>
 8008a14:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <cmac_generate_subkeys+0x76>
        goto exit;
    }

    if ((ret = cmac_multiply_by_u(K2, K1, block_size)) != 0) {
 8008a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a1e:	68b9      	ldr	r1, [r7, #8]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7ff ff5b 	bl	80088dc <cmac_multiply_by_u>
 8008a26:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2a:	2b00      	cmp	r3, #0
        goto exit;
    }

exit:
 8008a2c:	e002      	b.n	8008a34 <cmac_generate_subkeys+0x78>
        goto exit;
 8008a2e:	bf00      	nop
 8008a30:	e000      	b.n	8008a34 <cmac_generate_subkeys+0x78>
        goto exit;
 8008a32:	bf00      	nop
    mbedtls_platform_zeroize(L, sizeof(L));
 8008a34:	f107 0318 	add.w	r3, r7, #24
 8008a38:	2110      	movs	r1, #16
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f002 fe3c 	bl	800b6b8 <mbedtls_platform_zeroize>

    return ret;
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3730      	adds	r7, #48	; 0x30
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <cmac_pad>:
 */
static void cmac_pad(unsigned char padded_block[MBEDTLS_CMAC_MAX_BLOCK_SIZE],
                     size_t padded_block_len,
                     const unsigned char *last_block,
                     size_t last_block_len)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b087      	sub	sp, #28
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	607a      	str	r2, [r7, #4]
 8008a56:	603b      	str	r3, [r7, #0]
    size_t j;

    for (j = 0; j < padded_block_len; j++) {
 8008a58:	2300      	movs	r3, #0
 8008a5a:	617b      	str	r3, [r7, #20]
 8008a5c:	e01e      	b.n	8008a9c <cmac_pad+0x52>
        if (j < last_block_len) {
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d208      	bcs.n	8008a78 <cmac_pad+0x2e>
            padded_block[j] = last_block[j];
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	441a      	add	r2, r3
 8008a6c:	68f9      	ldr	r1, [r7, #12]
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	440b      	add	r3, r1
 8008a72:	7812      	ldrb	r2, [r2, #0]
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	e00e      	b.n	8008a96 <cmac_pad+0x4c>
        } else if (j == last_block_len) {
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d105      	bne.n	8008a8c <cmac_pad+0x42>
            padded_block[j] = 0x80;
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	4413      	add	r3, r2
 8008a86:	2280      	movs	r2, #128	; 0x80
 8008a88:	701a      	strb	r2, [r3, #0]
 8008a8a:	e004      	b.n	8008a96 <cmac_pad+0x4c>
        } else {
            padded_block[j] = 0x00;
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	4413      	add	r3, r2
 8008a92:	2200      	movs	r2, #0
 8008a94:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < padded_block_len; j++) {
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d3dc      	bcc.n	8008a5e <cmac_pad+0x14>
        }
    }
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
	...

08008ab4 <mbedtls_cipher_cmac_starts>:

int mbedtls_cipher_cmac_starts(mbedtls_cipher_context_t *ctx,
                               const unsigned char *key, size_t keybits)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b088      	sub	sp, #32
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
    mbedtls_cipher_type_t type;
    mbedtls_cmac_context_t *cmac_ctx;
    int retval;

    if (ctx == NULL || ctx->cipher_info == NULL || key == NULL) {
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d006      	beq.n	8008ad4 <mbedtls_cipher_cmac_starts+0x20>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <mbedtls_cipher_cmac_starts+0x20>
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <mbedtls_cipher_cmac_starts+0x24>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8008ad4:	4b1b      	ldr	r3, [pc, #108]	; (8008b44 <mbedtls_cipher_cmac_starts+0x90>)
 8008ad6:	e031      	b.n	8008b3c <mbedtls_cipher_cmac_starts+0x88>
    }

    if ((retval = mbedtls_cipher_setkey(ctx, key, (int) keybits,
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	2301      	movs	r3, #1
 8008adc:	68b9      	ldr	r1, [r7, #8]
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f7fe feea 	bl	80078b8 <mbedtls_cipher_setkey>
 8008ae4:	61f8      	str	r0, [r7, #28]
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <mbedtls_cipher_cmac_starts+0x3c>
                                        MBEDTLS_ENCRYPT)) != 0) {
        return retval;
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	e025      	b.n	8008b3c <mbedtls_cipher_cmac_starts+0x88>
    }

    type = mbedtls_cipher_info_get_type(ctx->cipher_info);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff fead 	bl	8008854 <mbedtls_cipher_info_get_type>
 8008afa:	4603      	mov	r3, r0
 8008afc:	76fb      	strb	r3, [r7, #27]

    switch (type) {
 8008afe:	7efb      	ldrb	r3, [r7, #27]
 8008b00:	2b04      	cmp	r3, #4
 8008b02:	dc02      	bgt.n	8008b0a <mbedtls_cipher_cmac_starts+0x56>
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	da04      	bge.n	8008b12 <mbedtls_cipher_cmac_starts+0x5e>
 8008b08:	e001      	b.n	8008b0e <mbedtls_cipher_cmac_starts+0x5a>
 8008b0a:	2b24      	cmp	r3, #36	; 0x24
 8008b0c:	d001      	beq.n	8008b12 <mbedtls_cipher_cmac_starts+0x5e>
        case MBEDTLS_CIPHER_AES_192_ECB:
        case MBEDTLS_CIPHER_AES_256_ECB:
        case MBEDTLS_CIPHER_DES_EDE3_ECB:
            break;
        default:
            return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	; (8008b44 <mbedtls_cipher_cmac_starts+0x90>)
 8008b10:	e014      	b.n	8008b3c <mbedtls_cipher_cmac_starts+0x88>
            break;
 8008b12:	bf00      	nop
    }

    /* Allocated and initialise in the cipher context memory for the CMAC
     * context */
    cmac_ctx = mbedtls_calloc(1, sizeof(mbedtls_cmac_context_t));
 8008b14:	2124      	movs	r1, #36	; 0x24
 8008b16:	2001      	movs	r0, #1
 8008b18:	f007 fc7a 	bl	8010410 <calloc>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	617b      	str	r3, [r7, #20]
    if (cmac_ctx == NULL) {
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <mbedtls_cipher_cmac_starts+0x76>
        return MBEDTLS_ERR_CIPHER_ALLOC_FAILED;
 8008b26:	4b08      	ldr	r3, [pc, #32]	; (8008b48 <mbedtls_cipher_cmac_starts+0x94>)
 8008b28:	e008      	b.n	8008b3c <mbedtls_cipher_cmac_starts+0x88>
    }

    ctx->cmac_ctx = cmac_ctx;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	641a      	str	r2, [r3, #64]	; 0x40

    mbedtls_platform_zeroize(cmac_ctx->state, sizeof(cmac_ctx->state));
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2110      	movs	r1, #16
 8008b34:	4618      	mov	r0, r3
 8008b36:	f002 fdbf 	bl	800b6b8 <mbedtls_platform_zeroize>

    return 0;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3720      	adds	r7, #32
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	ffff9f00 	.word	0xffff9f00
 8008b48:	ffff9e80 	.word	0xffff9e80

08008b4c <mbedtls_cipher_cmac_update>:

int mbedtls_cipher_cmac_update(mbedtls_cipher_context_t *ctx,
                               const unsigned char *input, size_t ilen)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b0a6      	sub	sp, #152	; 0x98
 8008b50:	af02      	add	r7, sp, #8
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
    mbedtls_cmac_context_t *cmac_ctx;
    unsigned char *state;
    int ret = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    size_t n, j, olen, block_size;

    if (ctx == NULL || ctx->cipher_info == NULL || input == NULL ||
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00a      	beq.n	8008b7a <mbedtls_cipher_cmac_update+0x2e>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d006      	beq.n	8008b7a <mbedtls_cipher_cmac_update+0x2e>
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <mbedtls_cipher_cmac_update+0x2e>
        ctx->cmac_ctx == NULL) {
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if (ctx == NULL || ctx->cipher_info == NULL || input == NULL ||
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <mbedtls_cipher_cmac_update+0x32>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8008b7a:	4ba0      	ldr	r3, [pc, #640]	; (8008dfc <mbedtls_cipher_cmac_update+0x2b0>)
 8008b7c:	e139      	b.n	8008df2 <mbedtls_cipher_cmac_update+0x2a6>
    }

    cmac_ctx = ctx->cmac_ctx;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    block_size = mbedtls_cipher_info_get_block_size(ctx->cipher_info);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7ff fe73 	bl	8008876 <mbedtls_cipher_info_get_block_size>
 8008b90:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    state = ctx->cmac_ctx->state;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b98:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Without the MBEDTLS_ASSUME below, gcc -O3 will generate a warning of the form
     * error: writing 16 bytes into a region of size 0 [-Werror=stringop-overflow=] */
    MBEDTLS_ASSUME(block_size <= MBEDTLS_CMAC_MAX_BLOCK_SIZE);
 8008b9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b9e:	2b10      	cmp	r3, #16

    /* Is there data still to process from the last call, that's greater in
     * size than a block? */
    if (cmac_ctx->unprocessed_len > 0 &&
 8008ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 808b 	beq.w	8008cc2 <mbedtls_cipher_cmac_update+0x176>
        ilen > block_size - cmac_ctx->unprocessed_len) {
 8008bac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008bb6:	1ad3      	subs	r3, r2, r3
    if (cmac_ctx->unprocessed_len > 0 &&
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	f240 8081 	bls.w	8008cc2 <mbedtls_cipher_cmac_update+0x176>
        memcpy(&cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 8008bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	3310      	adds	r3, #16
 8008bc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008bcc:	18d0      	adds	r0, r2, r3
               input,
               block_size - cmac_ctx->unprocessed_len);
 8008bce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
        memcpy(&cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 8008bd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	461a      	mov	r2, r3
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	f008 f878 	bl	8010cd2 <memcpy>

        mbedtls_xor_no_simd(state, cmac_ctx->unprocessed_block, state, block_size);
 8008be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008be6:	3310      	adds	r3, #16
 8008be8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008bea:	677a      	str	r2, [r7, #116]	; 0x74
 8008bec:	673b      	str	r3, [r7, #112]	; 0x70
 8008bee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008bf6:	66bb      	str	r3, [r7, #104]	; 0x68
    size_t i = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	667b      	str	r3, [r7, #100]	; 0x64
    for (; (i + 4) <= n; i += 4) {
 8008bfc:	e01e      	b.n	8008c3c <mbedtls_cipher_cmac_update+0xf0>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8008bfe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c02:	4413      	add	r3, r2
 8008c04:	663b      	str	r3, [r7, #96]	; 0x60
 8008c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c08:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008c0a:	61fb      	str	r3, [r7, #28]
    return r;
 8008c0c:	69fa      	ldr	r2, [r7, #28]
 8008c0e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c12:	440b      	add	r3, r1
 8008c14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c18:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008c1a:	61bb      	str	r3, [r7, #24]
    return r;
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	4053      	eors	r3, r2
 8008c20:	65bb      	str	r3, [r7, #88]	; 0x58
        mbedtls_put_unaligned_uint32(r + i, x);
 8008c22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c26:	4413      	add	r3, r2
 8008c28:	657b      	str	r3, [r7, #84]	; 0x54
 8008c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c2c:	617b      	str	r3, [r7, #20]
 8008c2e:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8008c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c32:	601a      	str	r2, [r3, #0]
}
 8008c34:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8008c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c38:	3304      	adds	r3, #4
 8008c3a:	667b      	str	r3, [r7, #100]	; 0x64
 8008c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c3e:	3304      	adds	r3, #4
 8008c40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d2db      	bcs.n	8008bfe <mbedtls_cipher_cmac_update+0xb2>
    for (; i < n; i++) {
 8008c46:	e010      	b.n	8008c6a <mbedtls_cipher_cmac_update+0x11e>
        r[i] = a[i] ^ b[i];
 8008c48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c4c:	4413      	add	r3, r2
 8008c4e:	7819      	ldrb	r1, [r3, #0]
 8008c50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c54:	4413      	add	r3, r2
 8008c56:	781a      	ldrb	r2, [r3, #0]
 8008c58:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008c5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c5c:	4403      	add	r3, r0
 8008c5e:	404a      	eors	r2, r1
 8008c60:	b2d2      	uxtb	r2, r2
 8008c62:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8008c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c66:	3301      	adds	r3, #1
 8008c68:	667b      	str	r3, [r7, #100]	; 0x64
 8008c6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d8ea      	bhi.n	8008c48 <mbedtls_cipher_cmac_update+0xfc>
}
 8008c72:	bf00      	nop

        if ((ret = mbedtls_cipher_update(ctx, state, block_size, state,
 8008c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f7fe fe90 	bl	80079a8 <mbedtls_cipher_update>
 8008c88:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8008c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f040 80a7 	bne.w	8008de4 <mbedtls_cipher_cmac_update+0x298>
                                         &olen)) != 0) {
            goto exit;
        }

        input += block_size - cmac_ctx->unprocessed_len;
 8008c96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c9a:	6a1b      	ldr	r3, [r3, #32]
 8008c9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	60bb      	str	r3, [r7, #8]
        ilen -= block_size - cmac_ctx->unprocessed_len;
 8008ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cac:	6a1a      	ldr	r2, [r3, #32]
 8008cae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	607b      	str	r3, [r7, #4]
        cmac_ctx->unprocessed_len = 0;
 8008cba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	621a      	str	r2, [r3, #32]
    }

    /* n is the number of blocks including any final partial block */
    n = (ilen + block_size - 1) / block_size;
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cc8:	4413      	add	r3, r2
 8008cca:	1e5a      	subs	r2, r3, #1
 8008ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd4:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Iterate across the input data in block sized chunks, excluding any
     * final partial or complete block */
    for (j = 1; j < n; j++) {
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cdc:	e065      	b.n	8008daa <mbedtls_cipher_cmac_update+0x25e>
 8008cde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ce6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cee:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	643b      	str	r3, [r7, #64]	; 0x40
    for (; (i + 4) <= n; i += 4) {
 8008cf4:	e01e      	b.n	8008d34 <mbedtls_cipher_cmac_update+0x1e8>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8008cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cfa:	4413      	add	r3, r2
 8008cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d00:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008d02:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8008d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d0a:	440b      	add	r3, r1
 8008d0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d10:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008d12:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	4053      	eors	r3, r2
 8008d18:	637b      	str	r3, [r7, #52]	; 0x34
        mbedtls_put_unaligned_uint32(r + i, x);
 8008d1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d1e:	4413      	add	r3, r2
 8008d20:	633b      	str	r3, [r7, #48]	; 0x30
 8008d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d24:	623b      	str	r3, [r7, #32]
 8008d26:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	601a      	str	r2, [r3, #0]
}
 8008d2c:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8008d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d30:	3304      	adds	r3, #4
 8008d32:	643b      	str	r3, [r7, #64]	; 0x40
 8008d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d36:	3304      	adds	r3, #4
 8008d38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d2db      	bcs.n	8008cf6 <mbedtls_cipher_cmac_update+0x1aa>
    for (; i < n; i++) {
 8008d3e:	e010      	b.n	8008d62 <mbedtls_cipher_cmac_update+0x216>
        r[i] = a[i] ^ b[i];
 8008d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d44:	4413      	add	r3, r2
 8008d46:	7819      	ldrb	r1, [r3, #0]
 8008d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d4c:	4413      	add	r3, r2
 8008d4e:	781a      	ldrb	r2, [r3, #0]
 8008d50:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d54:	4403      	add	r3, r0
 8008d56:	404a      	eors	r2, r1
 8008d58:	b2d2      	uxtb	r2, r2
 8008d5a:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8008d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d5e:	3301      	adds	r3, #1
 8008d60:	643b      	str	r3, [r7, #64]	; 0x40
 8008d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d8ea      	bhi.n	8008d40 <mbedtls_cipher_cmac_update+0x1f4>
}
 8008d6a:	bf00      	nop
        mbedtls_xor_no_simd(state, input, state, block_size);

        if ((ret = mbedtls_cipher_update(ctx, state, block_size, state,
 8008d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f7fe fe14 	bl	80079a8 <mbedtls_cipher_update>
 8008d80:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8008d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d12d      	bne.n	8008de8 <mbedtls_cipher_cmac_update+0x29c>
                                         &olen)) != 0) {
            goto exit;
        }

        ilen -= block_size;
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	607b      	str	r3, [r7, #4]
        input += block_size;
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d9c:	4413      	add	r3, r2
 8008d9e:	60bb      	str	r3, [r7, #8]
    for (j = 1; j < n; j++) {
 8008da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008da4:	3301      	adds	r3, #1
 8008da6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008daa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d394      	bcc.n	8008cde <mbedtls_cipher_cmac_update+0x192>
    }

    /* If there is data left over that wasn't aligned to a block */
    if (ilen > 0) {
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d018      	beq.n	8008dec <mbedtls_cipher_cmac_update+0x2a0>
        memcpy(&cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 8008dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	3310      	adds	r3, #16
 8008dc2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008dc6:	4413      	add	r3, r2
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	68b9      	ldr	r1, [r7, #8]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f007 ff80 	bl	8010cd2 <memcpy>
               input,
               ilen);
        cmac_ctx->unprocessed_len += ilen;
 8008dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dd6:	6a1a      	ldr	r2, [r3, #32]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	441a      	add	r2, r3
 8008ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008de0:	621a      	str	r2, [r3, #32]
 8008de2:	e004      	b.n	8008dee <mbedtls_cipher_cmac_update+0x2a2>
            goto exit;
 8008de4:	bf00      	nop
 8008de6:	e002      	b.n	8008dee <mbedtls_cipher_cmac_update+0x2a2>
            goto exit;
 8008de8:	bf00      	nop
 8008dea:	e000      	b.n	8008dee <mbedtls_cipher_cmac_update+0x2a2>
    }

exit:
 8008dec:	bf00      	nop
    return ret;
 8008dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3790      	adds	r7, #144	; 0x90
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	ffff9f00 	.word	0xffff9f00

08008e00 <mbedtls_cipher_cmac_finish>:

int mbedtls_cipher_cmac_finish(mbedtls_cipher_context_t *ctx,
                               unsigned char *output)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b0ba      	sub	sp, #232	; 0xe8
 8008e04:	af02      	add	r7, sp, #8
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
    mbedtls_cmac_context_t *cmac_ctx;
    unsigned char *state, *last_block;
    unsigned char K1[MBEDTLS_CMAC_MAX_BLOCK_SIZE];
    unsigned char K2[MBEDTLS_CMAC_MAX_BLOCK_SIZE];
    unsigned char M_last[MBEDTLS_CMAC_MAX_BLOCK_SIZE];
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008e0a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8008e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    size_t olen, block_size;

    if (ctx == NULL || ctx->cipher_info == NULL || ctx->cmac_ctx == NULL ||
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00a      	beq.n	8008e2e <mbedtls_cipher_cmac_finish+0x2e>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d006      	beq.n	8008e2e <mbedtls_cipher_cmac_finish+0x2e>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <mbedtls_cipher_cmac_finish+0x2e>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <mbedtls_cipher_cmac_finish+0x32>
        output == NULL) {
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8008e2e:	4bbe      	ldr	r3, [pc, #760]	; (8009128 <mbedtls_cipher_cmac_finish+0x328>)
 8008e30:	e19b      	b.n	800916a <mbedtls_cipher_cmac_finish+0x36a>
    }

    cmac_ctx = ctx->cmac_ctx;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    block_size = mbedtls_cipher_info_get_block_size(ctx->cipher_info);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fd19 	bl	8008876 <mbedtls_cipher_info_get_block_size>
 8008e44:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    MBEDTLS_ASSUME(block_size <= MBEDTLS_CMAC_MAX_BLOCK_SIZE); // silence GCC warning
 8008e48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e4c:	2b10      	cmp	r3, #16
    state = cmac_ctx->state;
 8008e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    mbedtls_platform_zeroize(K1, sizeof(K1));
 8008e56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e5a:	2110      	movs	r1, #16
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f002 fc2b 	bl	800b6b8 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(K2, sizeof(K2));
 8008e62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e66:	2110      	movs	r1, #16
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f002 fc25 	bl	800b6b8 <mbedtls_platform_zeroize>
    cmac_generate_subkeys(ctx, K1, K2);
 8008e6e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008e72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7ff fd9f 	bl	80089bc <cmac_generate_subkeys>

    last_block = cmac_ctx->unprocessed_block;
 8008e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e82:	3310      	adds	r3, #16
 8008e84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    /* Calculate last block */
    if (cmac_ctx->unprocessed_len < block_size) {
 8008e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d975      	bls.n	8008f82 <mbedtls_cipher_cmac_finish+0x182>
        cmac_pad(M_last, block_size, last_block, cmac_ctx->unprocessed_len);
 8008e96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008ea0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008ea4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8008ea8:	f7ff fdcf 	bl	8008a4a <cmac_pad>
 8008eac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008eb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008eb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ec8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    size_t i = 0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    for (; (i + 4) <= n; i += 4) {
 8008ed2:	e02e      	b.n	8008f32 <mbedtls_cipher_cmac_finish+0x132>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8008ed4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008ed8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008edc:	4413      	add	r3, r2
 8008ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ee2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ee6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008ee8:	613b      	str	r3, [r7, #16]
    return r;
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8008ef0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ef4:	440b      	add	r3, r1
 8008ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008efa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008efe:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008f00:	60fb      	str	r3, [r7, #12]
    return r;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	4053      	eors	r3, r2
 8008f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        mbedtls_put_unaligned_uint32(r + i, x);
 8008f0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f12:	4413      	add	r3, r2
 8008f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f1c:	60bb      	str	r3, [r7, #8]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
    memcpy(p, &x, sizeof(x));
 8008f20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f24:	601a      	str	r2, [r3, #0]
}
 8008f26:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8008f28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f36:	3304      	adds	r3, #4
 8008f38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d2c9      	bcs.n	8008ed4 <mbedtls_cipher_cmac_finish+0xd4>
    for (; i < n; i++) {
 8008f40:	e018      	b.n	8008f74 <mbedtls_cipher_cmac_finish+0x174>
        r[i] = a[i] ^ b[i];
 8008f42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f4a:	4413      	add	r3, r2
 8008f4c:	7819      	ldrb	r1, [r3, #0]
 8008f4e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008f52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f56:	4413      	add	r3, r2
 8008f58:	781a      	ldrb	r2, [r3, #0]
 8008f5a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8008f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f62:	4403      	add	r3, r0
 8008f64:	404a      	eors	r2, r1
 8008f66:	b2d2      	uxtb	r2, r2
 8008f68:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8008f6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f6e:	3301      	adds	r3, #1
 8008f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d8e0      	bhi.n	8008f42 <mbedtls_cipher_cmac_finish+0x142>
}
 8008f80:	e06a      	b.n	8009058 <mbedtls_cipher_cmac_finish+0x258>
 8008f82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    size_t i = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (; (i + 4) <= n; i += 4) {
 8008fa8:	e02e      	b.n	8009008 <mbedtls_cipher_cmac_finish+0x208>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8008faa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fbc:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008fbe:	61fb      	str	r3, [r7, #28]
    return r;
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8008fc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fca:	440b      	add	r3, r1
 8008fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fd4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8008fd6:	61bb      	str	r3, [r7, #24]
    return r;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	4053      	eors	r3, r2
 8008fdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        mbedtls_put_unaligned_uint32(r + i, x);
 8008fe0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008fe4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fe8:	4413      	add	r3, r2
 8008fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8008ff6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ffa:	601a      	str	r2, [r3, #0]
}
 8008ffc:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8008ffe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009002:	3304      	adds	r3, #4
 8009004:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009008:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800900c:	3304      	adds	r3, #4
 800900e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009012:	429a      	cmp	r2, r3
 8009014:	d2c9      	bcs.n	8008faa <mbedtls_cipher_cmac_finish+0x1aa>
    for (; i < n; i++) {
 8009016:	e018      	b.n	800904a <mbedtls_cipher_cmac_finish+0x24a>
        r[i] = a[i] ^ b[i];
 8009018:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800901c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009020:	4413      	add	r3, r2
 8009022:	7819      	ldrb	r1, [r3, #0]
 8009024:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009028:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800902c:	4413      	add	r3, r2
 800902e:	781a      	ldrb	r2, [r3, #0]
 8009030:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009034:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009038:	4403      	add	r3, r0
 800903a:	404a      	eors	r2, r1
 800903c:	b2d2      	uxtb	r2, r2
 800903e:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8009040:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009044:	3301      	adds	r3, #1
 8009046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800904a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800904e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009052:	429a      	cmp	r2, r3
 8009054:	d8e0      	bhi.n	8009018 <mbedtls_cipher_cmac_finish+0x218>
}
 8009056:	bf00      	nop
 8009058:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800905c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009060:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009064:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009066:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800906a:	67bb      	str	r3, [r7, #120]	; 0x78
 800906c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009070:	677b      	str	r3, [r7, #116]	; 0x74
    size_t i = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	673b      	str	r3, [r7, #112]	; 0x70
    for (; (i + 4) <= n; i += 4) {
 8009076:	e01f      	b.n	80090b8 <mbedtls_cipher_cmac_finish+0x2b8>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8009078:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800907a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800907c:	4413      	add	r3, r2
 800907e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009082:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009084:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8009086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009088:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800908a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800908c:	440b      	add	r3, r1
 800908e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009092:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009094:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8009096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009098:	4053      	eors	r3, r2
 800909a:	667b      	str	r3, [r7, #100]	; 0x64
        mbedtls_put_unaligned_uint32(r + i, x);
 800909c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090a2:	4413      	add	r3, r2
 80090a4:	663b      	str	r3, [r7, #96]	; 0x60
 80090a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090a8:	623b      	str	r3, [r7, #32]
 80090aa:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 80090ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090ae:	601a      	str	r2, [r3, #0]
}
 80090b0:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 80090b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090b4:	3304      	adds	r3, #4
 80090b6:	673b      	str	r3, [r7, #112]	; 0x70
 80090b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090ba:	3304      	adds	r3, #4
 80090bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80090be:	429a      	cmp	r2, r3
 80090c0:	d2da      	bcs.n	8009078 <mbedtls_cipher_cmac_finish+0x278>
    for (; i < n; i++) {
 80090c2:	e011      	b.n	80090e8 <mbedtls_cipher_cmac_finish+0x2e8>
        r[i] = a[i] ^ b[i];
 80090c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80090c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090c8:	4413      	add	r3, r2
 80090ca:	7819      	ldrb	r1, [r3, #0]
 80090cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090d0:	4413      	add	r3, r2
 80090d2:	781a      	ldrb	r2, [r3, #0]
 80090d4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80090d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090da:	4403      	add	r3, r0
 80090dc:	404a      	eors	r2, r1
 80090de:	b2d2      	uxtb	r2, r2
 80090e0:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 80090e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090e4:	3301      	adds	r3, #1
 80090e6:	673b      	str	r3, [r7, #112]	; 0x70
 80090e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80090ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d8e9      	bhi.n	80090c4 <mbedtls_cipher_cmac_finish+0x2c4>
}
 80090f0:	bf00      	nop
        mbedtls_xor(M_last, last_block, K1, block_size);
    }


    mbedtls_xor(state, M_last, state, block_size);
    if ((ret = mbedtls_cipher_update(ctx, state, block_size, state,
 80090f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80090fc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009100:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7fe fc4f 	bl	80079a8 <mbedtls_cipher_update>
 800910a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800910e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10a      	bne.n	800912c <mbedtls_cipher_cmac_finish+0x32c>
                                     &olen)) != 0) {
        goto exit;
    }

    memcpy(output, state, block_size);
 8009116:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800911a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800911e:	6838      	ldr	r0, [r7, #0]
 8009120:	f007 fdd7 	bl	8010cd2 <memcpy>
 8009124:	e003      	b.n	800912e <mbedtls_cipher_cmac_finish+0x32e>
 8009126:	bf00      	nop
 8009128:	ffff9f00 	.word	0xffff9f00
        goto exit;
 800912c:	bf00      	nop

exit:
    /* Wipe the generated keys on the stack, and any other transients to avoid
     * side channel leakage */
    mbedtls_platform_zeroize(K1, sizeof(K1));
 800912e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009132:	2110      	movs	r1, #16
 8009134:	4618      	mov	r0, r3
 8009136:	f002 fabf 	bl	800b6b8 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(K2, sizeof(K2));
 800913a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800913e:	2110      	movs	r1, #16
 8009140:	4618      	mov	r0, r3
 8009142:	f002 fab9 	bl	800b6b8 <mbedtls_platform_zeroize>

    cmac_ctx->unprocessed_len = 0;
 8009146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800914a:	2200      	movs	r2, #0
 800914c:	621a      	str	r2, [r3, #32]
    mbedtls_platform_zeroize(cmac_ctx->unprocessed_block,
 800914e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009152:	3310      	adds	r3, #16
 8009154:	2110      	movs	r1, #16
 8009156:	4618      	mov	r0, r3
 8009158:	f002 faae 	bl	800b6b8 <mbedtls_platform_zeroize>
                             sizeof(cmac_ctx->unprocessed_block));

    mbedtls_platform_zeroize(state, MBEDTLS_CMAC_MAX_BLOCK_SIZE);
 800915c:	2110      	movs	r1, #16
 800915e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8009162:	f002 faa9 	bl	800b6b8 <mbedtls_platform_zeroize>
    return ret;
 8009166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
}
 800916a:	4618      	mov	r0, r3
 800916c:	37e0      	adds	r7, #224	; 0xe0
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop

08009174 <mbedtls_des_init>:
    {                                                   \
        uint32_t t = (a); (a) = (b); (b) = t; t = 0;    \
    } while (0)

void mbedtls_des_init(mbedtls_des_context *ctx)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_des_context));
 800917c:	2280      	movs	r2, #128	; 0x80
 800917e:	2100      	movs	r1, #0
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f007 fd1b 	bl	8010bbc <memset>
}
 8009186:	bf00      	nop
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <mbedtls_des_free>:

void mbedtls_des_free(mbedtls_des_context *ctx)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b082      	sub	sp, #8
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d004      	beq.n	80091a6 <mbedtls_des_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_des_context));
 800919c:	2180      	movs	r1, #128	; 0x80
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f002 fa8a 	bl	800b6b8 <mbedtls_platform_zeroize>
 80091a4:	e000      	b.n	80091a8 <mbedtls_des_free+0x1a>
        return;
 80091a6:	bf00      	nop
}
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <mbedtls_des3_init>:

void mbedtls_des3_init(mbedtls_des3_context *ctx)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_des3_context));
 80091b6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80091ba:	2100      	movs	r1, #0
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f007 fcfd 	bl	8010bbc <memset>
}
 80091c2:	bf00      	nop
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <mbedtls_des3_free>:

void mbedtls_des3_free(mbedtls_des3_context *ctx)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b082      	sub	sp, #8
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d005      	beq.n	80091e4 <mbedtls_des3_free+0x1a>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_des3_context));
 80091d8:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f002 fa6b 	bl	800b6b8 <mbedtls_platform_zeroize>
 80091e2:	e000      	b.n	80091e6 <mbedtls_des3_free+0x1c>
        return;
 80091e4:	bf00      	nop
}
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <mbedtls_des_setkey>:
    return 0;
}

#if !defined(MBEDTLS_DES_SETKEY_ALT)
void mbedtls_des_setkey(uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE])
{
 80091ec:	b480      	push	{r7}
 80091ee:	b08b      	sub	sp, #44	; 0x2c
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	613b      	str	r3, [r7, #16]
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80091fe:	60fb      	str	r3, [r7, #12]
    return r;
 8009200:	68fb      	ldr	r3, [r7, #12]
    int i;
    uint32_t X, Y, T;

    X = MBEDTLS_GET_UINT32_BE(key, 0);
 8009202:	ba1b      	rev	r3, r3
 8009204:	623b      	str	r3, [r7, #32]
    Y = MBEDTLS_GET_UINT32_BE(key, 4);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	3304      	adds	r3, #4
 800920a:	617b      	str	r3, [r7, #20]
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009210:	60bb      	str	r3, [r7, #8]
    return r;
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	ba1b      	rev	r3, r3
 8009216:	61fb      	str	r3, [r7, #28]

    /*
     * Permuted Choice 1
     */
    T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	091a      	lsrs	r2, r3, #4
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	4053      	eors	r3, r2
 8009220:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8009224:	61bb      	str	r3, [r7, #24]
 8009226:	6a3a      	ldr	r2, [r7, #32]
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	4053      	eors	r3, r2
 800922c:	623b      	str	r3, [r7, #32]
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	69fa      	ldr	r2, [r7, #28]
 8009234:	4053      	eors	r3, r2
 8009236:	61fb      	str	r3, [r7, #28]
    T =  ((Y) ^ X) & 0x10101010;  X ^= T; Y ^= (T);
 8009238:	69fa      	ldr	r2, [r7, #28]
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	4053      	eors	r3, r2
 800923e:	f003 3310 	and.w	r3, r3, #269488144	; 0x10101010
 8009242:	61bb      	str	r3, [r7, #24]
 8009244:	6a3a      	ldr	r2, [r7, #32]
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	4053      	eors	r3, r2
 800924a:	623b      	str	r3, [r7, #32]
 800924c:	69fa      	ldr	r2, [r7, #28]
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	4053      	eors	r3, r2
 8009252:	61fb      	str	r3, [r7, #28]

    X =   (LHs[(X) & 0xF] << 3) | (LHs[(X >>  8) & 0xF] << 2)
 8009254:	6a3b      	ldr	r3, [r7, #32]
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	4a55      	ldr	r2, [pc, #340]	; (80093b0 <mbedtls_des_setkey+0x1c4>)
 800925c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009260:	00da      	lsls	r2, r3, #3
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	0a1b      	lsrs	r3, r3, #8
 8009266:	f003 030f 	and.w	r3, r3, #15
 800926a:	4951      	ldr	r1, [pc, #324]	; (80093b0 <mbedtls_des_setkey+0x1c4>)
 800926c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	431a      	orrs	r2, r3
        | (LHs[(X >> 16) & 0xF] << 1) | (LHs[(X >> 24) & 0xF])
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	0c1b      	lsrs	r3, r3, #16
 8009278:	f003 030f 	and.w	r3, r3, #15
 800927c:	494c      	ldr	r1, [pc, #304]	; (80093b0 <mbedtls_des_setkey+0x1c4>)
 800927e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	431a      	orrs	r2, r3
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	0e1b      	lsrs	r3, r3, #24
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	4948      	ldr	r1, [pc, #288]	; (80093b0 <mbedtls_des_setkey+0x1c4>)
 8009290:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009294:	431a      	orrs	r2, r3
        | (LHs[(X >>  5) & 0xF] << 7) | (LHs[(X >> 13) & 0xF] << 6)
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	095b      	lsrs	r3, r3, #5
 800929a:	f003 030f 	and.w	r3, r3, #15
 800929e:	4944      	ldr	r1, [pc, #272]	; (80093b0 <mbedtls_des_setkey+0x1c4>)
 80092a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092a4:	01db      	lsls	r3, r3, #7
 80092a6:	431a      	orrs	r2, r3
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	0b5b      	lsrs	r3, r3, #13
 80092ac:	f003 030f 	and.w	r3, r3, #15
 80092b0:	493f      	ldr	r1, [pc, #252]	; (80093b0 <mbedtls_des_setkey+0x1c4>)
 80092b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092b6:	019b      	lsls	r3, r3, #6
 80092b8:	431a      	orrs	r2, r3
        | (LHs[(X >> 21) & 0xF] << 5) | (LHs[(X >> 29) & 0xF] << 4);
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	0d5b      	lsrs	r3, r3, #21
 80092be:	f003 030f 	and.w	r3, r3, #15
 80092c2:	493b      	ldr	r1, [pc, #236]	; (80093b0 <mbedtls_des_setkey+0x1c4>)
 80092c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092c8:	015b      	lsls	r3, r3, #5
 80092ca:	431a      	orrs	r2, r3
 80092cc:	6a3b      	ldr	r3, [r7, #32]
 80092ce:	0f5b      	lsrs	r3, r3, #29
 80092d0:	4937      	ldr	r1, [pc, #220]	; (80093b0 <mbedtls_des_setkey+0x1c4>)
 80092d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092d6:	011b      	lsls	r3, r3, #4
    X =   (LHs[(X) & 0xF] << 3) | (LHs[(X >>  8) & 0xF] << 2)
 80092d8:	4313      	orrs	r3, r2
 80092da:	623b      	str	r3, [r7, #32]

    Y =   (RHs[(Y >>  1) & 0xF] << 3) | (RHs[(Y >>  9) & 0xF] << 2)
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	085b      	lsrs	r3, r3, #1
 80092e0:	f003 030f 	and.w	r3, r3, #15
 80092e4:	4a33      	ldr	r2, [pc, #204]	; (80093b4 <mbedtls_des_setkey+0x1c8>)
 80092e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092ea:	00da      	lsls	r2, r3, #3
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	0a5b      	lsrs	r3, r3, #9
 80092f0:	f003 030f 	and.w	r3, r3, #15
 80092f4:	492f      	ldr	r1, [pc, #188]	; (80093b4 <mbedtls_des_setkey+0x1c8>)
 80092f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	431a      	orrs	r2, r3
        | (RHs[(Y >> 17) & 0xF] << 1) | (RHs[(Y >> 25) & 0xF])
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	0c5b      	lsrs	r3, r3, #17
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	492b      	ldr	r1, [pc, #172]	; (80093b4 <mbedtls_des_setkey+0x1c8>)
 8009308:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	431a      	orrs	r2, r3
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	0e5b      	lsrs	r3, r3, #25
 8009314:	f003 030f 	and.w	r3, r3, #15
 8009318:	4926      	ldr	r1, [pc, #152]	; (80093b4 <mbedtls_des_setkey+0x1c8>)
 800931a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800931e:	431a      	orrs	r2, r3
        | (RHs[(Y >>  4) & 0xF] << 7) | (RHs[(Y >> 12) & 0xF] << 6)
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	091b      	lsrs	r3, r3, #4
 8009324:	f003 030f 	and.w	r3, r3, #15
 8009328:	4922      	ldr	r1, [pc, #136]	; (80093b4 <mbedtls_des_setkey+0x1c8>)
 800932a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800932e:	01db      	lsls	r3, r3, #7
 8009330:	431a      	orrs	r2, r3
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	0b1b      	lsrs	r3, r3, #12
 8009336:	f003 030f 	and.w	r3, r3, #15
 800933a:	491e      	ldr	r1, [pc, #120]	; (80093b4 <mbedtls_des_setkey+0x1c8>)
 800933c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009340:	019b      	lsls	r3, r3, #6
 8009342:	431a      	orrs	r2, r3
        | (RHs[(Y >> 20) & 0xF] << 5) | (RHs[(Y >> 28) & 0xF] << 4);
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	0d1b      	lsrs	r3, r3, #20
 8009348:	f003 030f 	and.w	r3, r3, #15
 800934c:	4919      	ldr	r1, [pc, #100]	; (80093b4 <mbedtls_des_setkey+0x1c8>)
 800934e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009352:	015b      	lsls	r3, r3, #5
 8009354:	431a      	orrs	r2, r3
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	0f1b      	lsrs	r3, r3, #28
 800935a:	4916      	ldr	r1, [pc, #88]	; (80093b4 <mbedtls_des_setkey+0x1c8>)
 800935c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009360:	011b      	lsls	r3, r3, #4
    Y =   (RHs[(Y >>  1) & 0xF] << 3) | (RHs[(Y >>  9) & 0xF] << 2)
 8009362:	4313      	orrs	r3, r2
 8009364:	61fb      	str	r3, [r7, #28]

    X &= 0x0FFFFFFF;
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800936c:	623b      	str	r3, [r7, #32]
    Y &= 0x0FFFFFFF;
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009374:	61fb      	str	r3, [r7, #28]

    /*
     * calculate subkeys
     */
    for (i = 0; i < 16; i++) {
 8009376:	2300      	movs	r3, #0
 8009378:	627b      	str	r3, [r7, #36]	; 0x24
 800937a:	e113      	b.n	80095a4 <mbedtls_des_setkey+0x3b8>
        if (i < 2 || i == 8 || i == 15) {
 800937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937e:	2b01      	cmp	r3, #1
 8009380:	dd05      	ble.n	800938e <mbedtls_des_setkey+0x1a2>
 8009382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009384:	2b08      	cmp	r3, #8
 8009386:	d002      	beq.n	800938e <mbedtls_des_setkey+0x1a2>
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	2b0f      	cmp	r3, #15
 800938c:	d114      	bne.n	80093b8 <mbedtls_des_setkey+0x1cc>
            X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	005a      	lsls	r2, r3, #1
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	0edb      	lsrs	r3, r3, #27
 8009396:	4313      	orrs	r3, r2
 8009398:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800939c:	623b      	str	r3, [r7, #32]
            Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	005a      	lsls	r2, r3, #1
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	0edb      	lsrs	r3, r3, #27
 80093a6:	4313      	orrs	r3, r2
 80093a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80093ac:	61fb      	str	r3, [r7, #28]
 80093ae:	e013      	b.n	80093d8 <mbedtls_des_setkey+0x1ec>
 80093b0:	0801384c 	.word	0x0801384c
 80093b4:	0801388c 	.word	0x0801388c
        } else {
            X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	009a      	lsls	r2, r3, #2
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	0e9b      	lsrs	r3, r3, #26
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80093c6:	623b      	str	r3, [r7, #32]
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	009a      	lsls	r2, r3, #2
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	0e9b      	lsrs	r3, r3, #26
 80093d0:	4313      	orrs	r3, r2
 80093d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80093d6:	61fb      	str	r3, [r7, #28]
        }

        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	011b      	lsls	r3, r3, #4
 80093dc:	f003 5210 	and.w	r2, r3, #603979776	; 0x24000000
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	071b      	lsls	r3, r3, #28
 80093e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093e8:	431a      	orrs	r2, r3
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	039b      	lsls	r3, r3, #14
 80093ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093f2:	431a      	orrs	r2, r3
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	049b      	lsls	r3, r3, #18
 80093f8:	f003 7302 	and.w	r3, r3, #34078720	; 0x2080000
 80093fc:	431a      	orrs	r2, r3
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	019b      	lsls	r3, r3, #6
 8009402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009406:	431a      	orrs	r2, r3
 8009408:	6a3b      	ldr	r3, [r7, #32]
 800940a:	025b      	lsls	r3, r3, #9
 800940c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009410:	431a      	orrs	r2, r3
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	085b      	lsrs	r3, r3, #1
 8009416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800941a:	431a      	orrs	r2, r3
 800941c:	6a3b      	ldr	r3, [r7, #32]
 800941e:	029b      	lsls	r3, r3, #10
 8009420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009424:	431a      	orrs	r2, r3
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800942e:	431a      	orrs	r2, r3
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	0a9b      	lsrs	r3, r3, #10
 8009434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009438:	431a      	orrs	r2, r3
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	0b5b      	lsrs	r3, r3, #13
 800943e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009442:	431a      	orrs	r2, r3
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	091b      	lsrs	r3, r3, #4
 8009448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800944c:	431a      	orrs	r2, r3
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	019b      	lsls	r3, r3, #6
 8009452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009456:	431a      	orrs	r2, r3
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	085b      	lsrs	r3, r3, #1
 800945c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009460:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000200) | ((Y) & 0x00000100)
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	0b9b      	lsrs	r3, r3, #14
 8009466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800946a:	431a      	orrs	r2, r3
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009472:	431a      	orrs	r2, r3
                | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	095b      	lsrs	r3, r3, #5
 8009478:	f003 0320 	and.w	r3, r3, #32
 800947c:	431a      	orrs	r2, r3
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	0a9b      	lsrs	r3, r3, #10
 8009482:	f003 0310 	and.w	r3, r3, #16
 8009486:	431a      	orrs	r2, r3
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	08db      	lsrs	r3, r3, #3
 800948c:	f003 0308 	and.w	r3, r3, #8
 8009490:	431a      	orrs	r2, r3
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	0c9b      	lsrs	r3, r3, #18
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	431a      	orrs	r2, r3
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	0e9b      	lsrs	r3, r3, #26
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	ea42 0103 	orr.w	r1, r2, r3
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	0e1b      	lsrs	r3, r3, #24
 80094ac:	f003 0201 	and.w	r2, r3, #1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	1d18      	adds	r0, r3, #4
 80094b4:	6078      	str	r0, [r7, #4]
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 80094b6:	430a      	orrs	r2, r1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 80094b8:	601a      	str	r2, [r3, #0]

        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	03db      	lsls	r3, r3, #15
 80094be:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	045b      	lsls	r3, r3, #17
 80094c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094ca:	431a      	orrs	r2, r3
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	029b      	lsls	r3, r3, #10
 80094d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094d4:	431a      	orrs	r2, r3
 80094d6:	6a3b      	ldr	r3, [r7, #32]
 80094d8:	059b      	lsls	r3, r3, #22
 80094da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094de:	431a      	orrs	r2, r3
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	089b      	lsrs	r3, r3, #2
 80094e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094e8:	431a      	orrs	r2, r3
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094f2:	431a      	orrs	r2, r3
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	041b      	lsls	r3, r3, #16
 80094f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094fc:	431a      	orrs	r2, r3
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	02db      	lsls	r3, r3, #11
 8009502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009506:	431a      	orrs	r2, r3
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009510:	431a      	orrs	r2, r3
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	099b      	lsrs	r3, r3, #6
 8009516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800951a:	431a      	orrs	r2, r3
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	03db      	lsls	r3, r3, #15
 8009520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009524:	431a      	orrs	r2, r3
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	091b      	lsrs	r3, r3, #4
 800952a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800952e:	431a      	orrs	r2, r3
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	089b      	lsrs	r3, r3, #2
 8009534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009538:	431a      	orrs	r2, r3
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	021b      	lsls	r3, r3, #8
 800953e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009542:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	0b99      	lsrs	r1, r3, #14
 8009548:	f640 0308 	movw	r3, #2056	; 0x808
 800954c:	400b      	ands	r3, r1
 800954e:	431a      	orrs	r2, r3
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	0a5b      	lsrs	r3, r3, #9
 8009554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009558:	431a      	orrs	r2, r3
                | ((Y) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009560:	431a      	orrs	r2, r3
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	01db      	lsls	r3, r3, #7
 8009566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956a:	431a      	orrs	r2, r3
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	09db      	lsrs	r3, r3, #7
 8009570:	f003 0320 	and.w	r3, r3, #32
 8009574:	431a      	orrs	r2, r3
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	08db      	lsrs	r3, r3, #3
 800957a:	f003 0311 	and.w	r3, r3, #17
 800957e:	431a      	orrs	r2, r3
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	f003 0304 	and.w	r3, r3, #4
 8009588:	ea42 0103 	orr.w	r1, r2, r3
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	0d5b      	lsrs	r3, r3, #21
 8009590:	f003 0202 	and.w	r2, r3, #2
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	1d18      	adds	r0, r3, #4
 8009598:	6078      	str	r0, [r7, #4]
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 800959a:	430a      	orrs	r2, r1
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800959c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 16; i++) {
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	3301      	adds	r3, #1
 80095a2:	627b      	str	r3, [r7, #36]	; 0x24
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	2b0f      	cmp	r3, #15
 80095a8:	f77f aee8 	ble.w	800937c <mbedtls_des_setkey+0x190>
    }
}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	372c      	adds	r7, #44	; 0x2c
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop

080095bc <mbedtls_des_setkey_enc>:

/*
 * DES key schedule (56-bit, encryption)
 */
int mbedtls_des_setkey_enc(mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE])
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
    mbedtls_des_setkey(ctx->sk, key);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7ff fe0e 	bl	80091ec <mbedtls_des_setkey>

    return 0;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <mbedtls_des_setkey_dec>:

/*
 * DES key schedule (56-bit, decryption)
 */
int mbedtls_des_setkey_dec(mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE])
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b086      	sub	sp, #24
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	6039      	str	r1, [r7, #0]
    int i;

    mbedtls_des_setkey(ctx->sk, key);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff fdff 	bl	80091ec <mbedtls_des_setkey>

    for (i = 0; i < 16; i += 2) {
 80095ee:	2300      	movs	r3, #0
 80095f0:	617b      	str	r3, [r7, #20]
 80095f2:	e034      	b.n	800965e <mbedtls_des_setkey_dec+0x84>
        SWAP(ctx->sk[i], ctx->sk[30 - i]);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095fc:	613b      	str	r3, [r7, #16]
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f1c3 021e 	rsb	r2, r3, #30
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f1c3 021e 	rsb	r2, r3, #30
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6939      	ldr	r1, [r7, #16]
 800961c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009620:	2300      	movs	r3, #0
 8009622:	613b      	str	r3, [r7, #16]
        SWAP(ctx->sk[i + 1], ctx->sk[31 - i]);
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f1c3 011f 	rsb	r1, r3, #31
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f1c3 021f 	rsb	r2, r3, #31
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	68f9      	ldr	r1, [r7, #12]
 8009650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 16; i += 2) {
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	3302      	adds	r3, #2
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b0f      	cmp	r3, #15
 8009662:	ddc7      	ble.n	80095f4 <mbedtls_des_setkey_dec+0x1a>
    }

    return 0;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <des3_set2key>:

static void des3_set2key(uint32_t esk[96],
                         uint32_t dsk[96],
                         const unsigned char key[MBEDTLS_DES_KEY_SIZE*2])
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b086      	sub	sp, #24
 8009672:	af00      	add	r7, sp, #0
 8009674:	60f8      	str	r0, [r7, #12]
 8009676:	60b9      	str	r1, [r7, #8]
 8009678:	607a      	str	r2, [r7, #4]
    int i;

    mbedtls_des_setkey(esk, key);
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f7ff fdb5 	bl	80091ec <mbedtls_des_setkey>
    mbedtls_des_setkey(dsk + 32, key + 8);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3308      	adds	r3, #8
 800968c:	4619      	mov	r1, r3
 800968e:	4610      	mov	r0, r2
 8009690:	f7ff fdac 	bl	80091ec <mbedtls_des_setkey>

    for (i = 0; i < 32; i += 2) {
 8009694:	2300      	movs	r3, #0
 8009696:	617b      	str	r3, [r7, #20]
 8009698:	e063      	b.n	8009762 <des3_set2key+0xf4>
        dsk[i] = esk[30 - i];
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f1c3 031e 	rsb	r3, r3, #30
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	441a      	add	r2, r3
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	440b      	add	r3, r1
 80096ae:	6812      	ldr	r2, [r2, #0]
 80096b0:	601a      	str	r2, [r3, #0]
        dsk[i +  1] = esk[31 - i];
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f1c3 031f 	rsb	r3, r3, #31
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	441a      	add	r2, r3
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	3301      	adds	r3, #1
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	68b9      	ldr	r1, [r7, #8]
 80096c6:	440b      	add	r3, r1
 80096c8:	6812      	ldr	r2, [r2, #0]
 80096ca:	601a      	str	r2, [r3, #0]

        esk[i + 32] = dsk[62 - i];
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	441a      	add	r2, r3
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	3320      	adds	r3, #32
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	68f9      	ldr	r1, [r7, #12]
 80096e0:	440b      	add	r3, r1
 80096e2:	6812      	ldr	r2, [r2, #0]
 80096e4:	601a      	str	r2, [r3, #0]
        esk[i + 33] = dsk[63 - i];
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	441a      	add	r2, r3
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	3321      	adds	r3, #33	; 0x21
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	68f9      	ldr	r1, [r7, #12]
 80096fa:	440b      	add	r3, r1
 80096fc:	6812      	ldr	r2, [r2, #0]
 80096fe:	601a      	str	r2, [r3, #0]

        esk[i + 64] = esk[i];
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	441a      	add	r2, r3
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	3340      	adds	r3, #64	; 0x40
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	68f9      	ldr	r1, [r7, #12]
 8009710:	440b      	add	r3, r1
 8009712:	6812      	ldr	r2, [r2, #0]
 8009714:	601a      	str	r2, [r3, #0]
        esk[i + 65] = esk[i + 1];
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	3301      	adds	r3, #1
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	441a      	add	r2, r3
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	3341      	adds	r3, #65	; 0x41
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	68f9      	ldr	r1, [r7, #12]
 8009728:	440b      	add	r3, r1
 800972a:	6812      	ldr	r2, [r2, #0]
 800972c:	601a      	str	r2, [r3, #0]

        dsk[i + 64] = dsk[i];
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	441a      	add	r2, r3
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	3340      	adds	r3, #64	; 0x40
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	68b9      	ldr	r1, [r7, #8]
 800973e:	440b      	add	r3, r1
 8009740:	6812      	ldr	r2, [r2, #0]
 8009742:	601a      	str	r2, [r3, #0]
        dsk[i + 65] = dsk[i + 1];
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	3301      	adds	r3, #1
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	441a      	add	r2, r3
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	3341      	adds	r3, #65	; 0x41
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	68b9      	ldr	r1, [r7, #8]
 8009756:	440b      	add	r3, r1
 8009758:	6812      	ldr	r2, [r2, #0]
 800975a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 32; i += 2) {
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	3302      	adds	r3, #2
 8009760:	617b      	str	r3, [r7, #20]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	2b1f      	cmp	r3, #31
 8009766:	dd98      	ble.n	800969a <des3_set2key+0x2c>
    }
}
 8009768:	bf00      	nop
 800976a:	bf00      	nop
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <mbedtls_des3_set2key_enc>:
/*
 * Triple-DES key schedule (112-bit, encryption)
 */
int mbedtls_des3_set2key_enc(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2])
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b0e2      	sub	sp, #392	; 0x188
 8009776:	af00      	add	r7, sp, #0
 8009778:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800977c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009780:	6018      	str	r0, [r3, #0]
 8009782:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009786:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800978a:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set2key(ctx->sk, sk, key);
 800978c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009790:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800979a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800979e:	f107 0108 	add.w	r1, r7, #8
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	f7ff ff63 	bl	800966e <des3_set2key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 80097a8:	f107 0308 	add.w	r3, r7, #8
 80097ac:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80097b0:	4618      	mov	r0, r3
 80097b2:	f001 ff81 	bl	800b6b8 <mbedtls_platform_zeroize>

    return 0;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <mbedtls_des3_set2key_dec>:
/*
 * Triple-DES key schedule (112-bit, decryption)
 */
int mbedtls_des3_set2key_dec(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2])
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b0e2      	sub	sp, #392	; 0x188
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80097cc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80097d0:	6018      	str	r0, [r3, #0]
 80097d2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80097d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80097da:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set2key(sk, ctx->sk, key);
 80097dc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80097e0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80097e4:	6819      	ldr	r1, [r3, #0]
 80097e6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80097ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80097ee:	f107 0008 	add.w	r0, r7, #8
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	f7ff ff3b 	bl	800966e <des3_set2key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 80097f8:	f107 0308 	add.w	r3, r7, #8
 80097fc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8009800:	4618      	mov	r0, r3
 8009802:	f001 ff59 	bl	800b6b8 <mbedtls_platform_zeroize>

    return 0;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <des3_set3key>:

static void des3_set3key(uint32_t esk[96],
                         uint32_t dsk[96],
                         const unsigned char key[24])
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b086      	sub	sp, #24
 8009816:	af00      	add	r7, sp, #0
 8009818:	60f8      	str	r0, [r7, #12]
 800981a:	60b9      	str	r1, [r7, #8]
 800981c:	607a      	str	r2, [r7, #4]
    int i;

    mbedtls_des_setkey(esk, key);
 800981e:	6879      	ldr	r1, [r7, #4]
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f7ff fce3 	bl	80091ec <mbedtls_des_setkey>
    mbedtls_des_setkey(dsk + 32, key +  8);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	3308      	adds	r3, #8
 8009830:	4619      	mov	r1, r3
 8009832:	4610      	mov	r0, r2
 8009834:	f7ff fcda 	bl	80091ec <mbedtls_des_setkey>
    mbedtls_des_setkey(esk + 64, key + 16);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	3310      	adds	r3, #16
 8009842:	4619      	mov	r1, r3
 8009844:	4610      	mov	r0, r2
 8009846:	f7ff fcd1 	bl	80091ec <mbedtls_des_setkey>

    for (i = 0; i < 32; i += 2) {
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]
 800984e:	e04f      	b.n	80098f0 <des3_set3key+0xde>
        dsk[i] = esk[94 - i];
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	441a      	add	r2, r3
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	440b      	add	r3, r1
 8009864:	6812      	ldr	r2, [r2, #0]
 8009866:	601a      	str	r2, [r3, #0]
        dsk[i +  1] = esk[95 - i];
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	441a      	add	r2, r3
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	3301      	adds	r3, #1
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	68b9      	ldr	r1, [r7, #8]
 800987c:	440b      	add	r3, r1
 800987e:	6812      	ldr	r2, [r2, #0]
 8009880:	601a      	str	r2, [r3, #0]

        esk[i + 32] = dsk[62 - i];
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	441a      	add	r2, r3
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	3320      	adds	r3, #32
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	68f9      	ldr	r1, [r7, #12]
 8009896:	440b      	add	r3, r1
 8009898:	6812      	ldr	r2, [r2, #0]
 800989a:	601a      	str	r2, [r3, #0]
        esk[i + 33] = dsk[63 - i];
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	441a      	add	r2, r3
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	3321      	adds	r3, #33	; 0x21
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	68f9      	ldr	r1, [r7, #12]
 80098b0:	440b      	add	r3, r1
 80098b2:	6812      	ldr	r2, [r2, #0]
 80098b4:	601a      	str	r2, [r3, #0]

        dsk[i + 64] = esk[30 - i];
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f1c3 031e 	rsb	r3, r3, #30
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	441a      	add	r2, r3
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	3340      	adds	r3, #64	; 0x40
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	68b9      	ldr	r1, [r7, #8]
 80098ca:	440b      	add	r3, r1
 80098cc:	6812      	ldr	r2, [r2, #0]
 80098ce:	601a      	str	r2, [r3, #0]
        dsk[i + 65] = esk[31 - i];
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f1c3 031f 	rsb	r3, r3, #31
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	441a      	add	r2, r3
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	3341      	adds	r3, #65	; 0x41
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	68b9      	ldr	r1, [r7, #8]
 80098e4:	440b      	add	r3, r1
 80098e6:	6812      	ldr	r2, [r2, #0]
 80098e8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 32; i += 2) {
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	3302      	adds	r3, #2
 80098ee:	617b      	str	r3, [r7, #20]
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	2b1f      	cmp	r3, #31
 80098f4:	ddac      	ble.n	8009850 <des3_set3key+0x3e>
    }
}
 80098f6:	bf00      	nop
 80098f8:	bf00      	nop
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <mbedtls_des3_set3key_enc>:
/*
 * Triple-DES key schedule (168-bit, encryption)
 */
int mbedtls_des3_set3key_enc(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3])
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b0e2      	sub	sp, #392	; 0x188
 8009904:	af00      	add	r7, sp, #0
 8009906:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800990a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800990e:	6018      	str	r0, [r3, #0]
 8009910:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009914:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009918:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key(ctx->sk, sk, key);
 800991a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800991e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009922:	6818      	ldr	r0, [r3, #0]
 8009924:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009928:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800992c:	f107 0108 	add.w	r1, r7, #8
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	f7ff ff6e 	bl	8009812 <des3_set3key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 8009936:	f107 0308 	add.w	r3, r7, #8
 800993a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800993e:	4618      	mov	r0, r3
 8009940:	f001 feba 	bl	800b6b8 <mbedtls_platform_zeroize>

    return 0;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <mbedtls_des3_set3key_dec>:
/*
 * Triple-DES key schedule (168-bit, decryption)
 */
int mbedtls_des3_set3key_dec(mbedtls_des3_context *ctx,
                             const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3])
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b0e2      	sub	sp, #392	; 0x188
 8009954:	af00      	add	r7, sp, #0
 8009956:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800995a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800995e:	6018      	str	r0, [r3, #0]
 8009960:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009964:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009968:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key(sk, ctx->sk, key);
 800996a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800996e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009972:	6819      	ldr	r1, [r3, #0]
 8009974:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009978:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800997c:	f107 0008 	add.w	r0, r7, #8
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	f7ff ff46 	bl	8009812 <des3_set3key>
    mbedtls_platform_zeroize(sk,  sizeof(sk));
 8009986:	f107 0308 	add.w	r3, r7, #8
 800998a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800998e:	4618      	mov	r0, r3
 8009990:	f001 fe92 	bl	800b6b8 <mbedtls_platform_zeroize>

    return 0;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <mbedtls_des_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES_CRYPT_ECB_ALT)
int mbedtls_des_crypt_ecb(mbedtls_des_context *ctx,
                          const unsigned char input[8],
                          unsigned char output[8])
{
 80099a0:	b480      	push	{r7}
 80099a2:	b093      	sub	sp, #76	; 0x4c
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b6:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80099b8:	61bb      	str	r3, [r7, #24]
    return r;
 80099ba:	69bb      	ldr	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE(input, 0);
 80099bc:	ba1b      	rev	r3, r3
 80099be:	643b      	str	r3, [r7, #64]	; 0x40
    Y = MBEDTLS_GET_UINT32_BE(input, 4);
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	3304      	adds	r3, #4
 80099c4:	633b      	str	r3, [r7, #48]	; 0x30
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 80099ca:	617b      	str	r3, [r7, #20]
    return r;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	ba1b      	rev	r3, r3
 80099d0:	63fb      	str	r3, [r7, #60]	; 0x3c

    DES_IP(X, Y);
 80099d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099d4:	091a      	lsrs	r2, r3, #4
 80099d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d8:	4053      	eors	r3, r2
 80099da:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 80099de:	637b      	str	r3, [r7, #52]	; 0x34
 80099e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e4:	4053      	eors	r3, r2
 80099e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ea:	011b      	lsls	r3, r3, #4
 80099ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099ee:	4053      	eors	r3, r2
 80099f0:	643b      	str	r3, [r7, #64]	; 0x40
 80099f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099f4:	0c1a      	lsrs	r2, r3, #16
 80099f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f8:	4053      	eors	r3, r2
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	637b      	str	r3, [r7, #52]	; 0x34
 80099fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a02:	4053      	eors	r3, r2
 8009a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a08:	041b      	lsls	r3, r3, #16
 8009a0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a0c:	4053      	eors	r3, r2
 8009a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a12:	089a      	lsrs	r2, r3, #2
 8009a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a16:	4053      	eors	r3, r2
 8009a18:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8009a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a22:	4053      	eors	r3, r2
 8009a24:	643b      	str	r3, [r7, #64]	; 0x40
 8009a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a2c:	4053      	eors	r3, r2
 8009a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a32:	0a1a      	lsrs	r2, r3, #8
 8009a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a36:	4053      	eors	r3, r2
 8009a38:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8009a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a42:	4053      	eors	r3, r2
 8009a44:	643b      	str	r3, [r7, #64]	; 0x40
 8009a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a4c:	4053      	eors	r3, r2
 8009a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a52:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5c:	4053      	eors	r3, r2
 8009a5e:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8009a62:	637b      	str	r3, [r7, #52]	; 0x34
 8009a64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a68:	4053      	eors	r3, r2
 8009a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a70:	4053      	eors	r3, r2
 8009a72:	643b      	str	r3, [r7, #64]	; 0x40
 8009a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a76:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009a7a:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < 8; i++) {
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a80:	e0a6      	b.n	8009bd0 <mbedtls_des_crypt_ecb+0x230>
        DES_ROUND(Y, X);
 8009a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a84:	1d1a      	adds	r2, r3, #4
 8009a86:	63ba      	str	r2, [r7, #56]	; 0x38
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a8c:	4053      	eors	r3, r2
 8009a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a96:	4a88      	ldr	r2, [pc, #544]	; (8009cb8 <mbedtls_des_crypt_ecb+0x318>)
 8009a98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a9e:	0a1b      	lsrs	r3, r3, #8
 8009aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aa4:	4985      	ldr	r1, [pc, #532]	; (8009cbc <mbedtls_des_crypt_ecb+0x31c>)
 8009aa6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009aaa:	405a      	eors	r2, r3
 8009aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aae:	0c1b      	lsrs	r3, r3, #16
 8009ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ab4:	4982      	ldr	r1, [pc, #520]	; (8009cc0 <mbedtls_des_crypt_ecb+0x320>)
 8009ab6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009aba:	405a      	eors	r2, r3
 8009abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abe:	0e1b      	lsrs	r3, r3, #24
 8009ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ac4:	497f      	ldr	r1, [pc, #508]	; (8009cc4 <mbedtls_des_crypt_ecb+0x324>)
 8009ac6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009aca:	4053      	eors	r3, r2
 8009acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ace:	4053      	eors	r3, r2
 8009ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8009ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad4:	1d1a      	adds	r2, r3, #4
 8009ad6:	63ba      	str	r2, [r7, #56]	; 0x38
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009adc:	ea4f 1333 	mov.w	r3, r3, ror #4
 8009ae0:	4053      	eors	r3, r2
 8009ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aea:	4a77      	ldr	r2, [pc, #476]	; (8009cc8 <mbedtls_des_crypt_ecb+0x328>)
 8009aec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af2:	0a1b      	lsrs	r3, r3, #8
 8009af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009af8:	4974      	ldr	r1, [pc, #464]	; (8009ccc <mbedtls_des_crypt_ecb+0x32c>)
 8009afa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009afe:	405a      	eors	r2, r3
 8009b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b02:	0c1b      	lsrs	r3, r3, #16
 8009b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b08:	4971      	ldr	r1, [pc, #452]	; (8009cd0 <mbedtls_des_crypt_ecb+0x330>)
 8009b0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009b0e:	405a      	eors	r2, r3
 8009b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b12:	0e1b      	lsrs	r3, r3, #24
 8009b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b18:	496e      	ldr	r1, [pc, #440]	; (8009cd4 <mbedtls_des_crypt_ecb+0x334>)
 8009b1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009b1e:	4053      	eors	r3, r2
 8009b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b22:	4053      	eors	r3, r2
 8009b24:	643b      	str	r3, [r7, #64]	; 0x40
        DES_ROUND(X, Y);
 8009b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b28:	1d1a      	adds	r2, r3, #4
 8009b2a:	63ba      	str	r2, [r7, #56]	; 0x38
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b30:	4053      	eors	r3, r2
 8009b32:	637b      	str	r3, [r7, #52]	; 0x34
 8009b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b3a:	4a5f      	ldr	r2, [pc, #380]	; (8009cb8 <mbedtls_des_crypt_ecb+0x318>)
 8009b3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b42:	0a1b      	lsrs	r3, r3, #8
 8009b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b48:	495c      	ldr	r1, [pc, #368]	; (8009cbc <mbedtls_des_crypt_ecb+0x31c>)
 8009b4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009b4e:	405a      	eors	r2, r3
 8009b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b52:	0c1b      	lsrs	r3, r3, #16
 8009b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b58:	4959      	ldr	r1, [pc, #356]	; (8009cc0 <mbedtls_des_crypt_ecb+0x320>)
 8009b5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009b5e:	405a      	eors	r2, r3
 8009b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b62:	0e1b      	lsrs	r3, r3, #24
 8009b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b68:	4956      	ldr	r1, [pc, #344]	; (8009cc4 <mbedtls_des_crypt_ecb+0x324>)
 8009b6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009b6e:	4053      	eors	r3, r2
 8009b70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b72:	4053      	eors	r3, r2
 8009b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b78:	1d1a      	adds	r2, r3, #4
 8009b7a:	63ba      	str	r2, [r7, #56]	; 0x38
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b80:	ea4f 1333 	mov.w	r3, r3, ror #4
 8009b84:	4053      	eors	r3, r2
 8009b86:	637b      	str	r3, [r7, #52]	; 0x34
 8009b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b8e:	4a4e      	ldr	r2, [pc, #312]	; (8009cc8 <mbedtls_des_crypt_ecb+0x328>)
 8009b90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b96:	0a1b      	lsrs	r3, r3, #8
 8009b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b9c:	494b      	ldr	r1, [pc, #300]	; (8009ccc <mbedtls_des_crypt_ecb+0x32c>)
 8009b9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ba2:	405a      	eors	r2, r3
 8009ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba6:	0c1b      	lsrs	r3, r3, #16
 8009ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bac:	4948      	ldr	r1, [pc, #288]	; (8009cd0 <mbedtls_des_crypt_ecb+0x330>)
 8009bae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009bb2:	405a      	eors	r2, r3
 8009bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb6:	0e1b      	lsrs	r3, r3, #24
 8009bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bbc:	4945      	ldr	r1, [pc, #276]	; (8009cd4 <mbedtls_des_crypt_ecb+0x334>)
 8009bbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009bc2:	4053      	eors	r3, r2
 8009bc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bc6:	4053      	eors	r3, r2
 8009bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < 8; i++) {
 8009bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bcc:	3301      	adds	r3, #1
 8009bce:	647b      	str	r3, [r7, #68]	; 0x44
 8009bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bd2:	2b07      	cmp	r3, #7
 8009bd4:	f77f af55 	ble.w	8009a82 <mbedtls_des_crypt_ecb+0xe2>
    }

    DES_FP(Y, X);
 8009bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bda:	ea4f 0373 	mov.w	r3, r3, ror #1
 8009bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009be0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009be4:	4053      	eors	r3, r2
 8009be6:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8009bea:	637b      	str	r3, [r7, #52]	; 0x34
 8009bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf0:	4053      	eors	r3, r2
 8009bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf8:	4053      	eors	r3, r2
 8009bfa:	643b      	str	r3, [r7, #64]	; 0x40
 8009bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bfe:	ea4f 0373 	mov.w	r3, r3, ror #1
 8009c02:	643b      	str	r3, [r7, #64]	; 0x40
 8009c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c06:	0a1a      	lsrs	r2, r3, #8
 8009c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c0a:	4053      	eors	r3, r2
 8009c0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8009c10:	637b      	str	r3, [r7, #52]	; 0x34
 8009c12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c16:	4053      	eors	r3, r2
 8009c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1c:	021b      	lsls	r3, r3, #8
 8009c1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c20:	4053      	eors	r3, r2
 8009c22:	643b      	str	r3, [r7, #64]	; 0x40
 8009c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c26:	089a      	lsrs	r2, r3, #2
 8009c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c2a:	4053      	eors	r3, r2
 8009c2c:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8009c30:	637b      	str	r3, [r7, #52]	; 0x34
 8009c32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c36:	4053      	eors	r3, r2
 8009c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c40:	4053      	eors	r3, r2
 8009c42:	643b      	str	r3, [r7, #64]	; 0x40
 8009c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c46:	0c1a      	lsrs	r2, r3, #16
 8009c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c4a:	4053      	eors	r3, r2
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8009c50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c54:	4053      	eors	r3, r2
 8009c56:	643b      	str	r3, [r7, #64]	; 0x40
 8009c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5a:	041b      	lsls	r3, r3, #16
 8009c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c5e:	4053      	eors	r3, r2
 8009c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c64:	091a      	lsrs	r2, r3, #4
 8009c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c68:	4053      	eors	r3, r2
 8009c6a:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8009c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c74:	4053      	eors	r3, r2
 8009c76:	643b      	str	r3, [r7, #64]	; 0x40
 8009c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7a:	011b      	lsls	r3, r3, #4
 8009c7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c7e:	4053      	eors	r3, r2
 8009c80:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT32_BE(Y, output, 0);
 8009c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c84:	ba1b      	rev	r3, r3
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	62ba      	str	r2, [r7, #40]	; 0x28
 8009c8a:	61fb      	str	r3, [r7, #28]
 8009c8c:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	601a      	str	r2, [r3, #0]
}
 8009c92:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X, output, 4);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	1d1a      	adds	r2, r3, #4
 8009c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c9a:	ba1b      	rev	r3, r3
 8009c9c:	627a      	str	r2, [r7, #36]	; 0x24
 8009c9e:	623b      	str	r3, [r7, #32]
 8009ca0:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	601a      	str	r2, [r3, #0]
}
 8009ca6:	bf00      	nop

    return 0;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	374c      	adds	r7, #76	; 0x4c
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	0801374c 	.word	0x0801374c
 8009cbc:	0801354c 	.word	0x0801354c
 8009cc0:	0801334c 	.word	0x0801334c
 8009cc4:	0801314c 	.word	0x0801314c
 8009cc8:	0801364c 	.word	0x0801364c
 8009ccc:	0801344c 	.word	0x0801344c
 8009cd0:	0801324c 	.word	0x0801324c
 8009cd4:	0801304c 	.word	0x0801304c

08009cd8 <mbedtls_des_crypt_cbc>:
                          int mode,
                          size_t length,
                          unsigned char iv[8],
                          const unsigned char *input,
                          unsigned char *output)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b0a0      	sub	sp, #128	; 0x80
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8009ce6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8009cea:	67fb      	str	r3, [r7, #124]	; 0x7c
    unsigned char temp[8];

    if (length % 8) {
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f003 0307 	and.w	r3, r3, #7
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d002      	beq.n	8009cfc <mbedtls_des_crypt_cbc+0x24>
        return MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH;
 8009cf6:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8009cfa:	e0e7      	b.n	8009ecc <mbedtls_des_crypt_cbc+0x1f4>
    }

    if (mode == MBEDTLS_DES_ENCRYPT) {
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	f040 80da 	bne.w	8009eb8 <mbedtls_des_crypt_cbc+0x1e0>
        while (length > 0) {
 8009d04:	e066      	b.n	8009dd4 <mbedtls_des_crypt_cbc+0xfc>
 8009d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d10:	677b      	str	r3, [r7, #116]	; 0x74
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	673b      	str	r3, [r7, #112]	; 0x70
 8009d16:	2308      	movs	r3, #8
 8009d18:	66fb      	str	r3, [r7, #108]	; 0x6c
    size_t i = 0;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    for (; (i + 4) <= n; i += 4) {
 8009d1e:	e01e      	b.n	8009d5e <mbedtls_des_crypt_cbc+0x86>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8009d20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d24:	4413      	add	r3, r2
 8009d26:	667b      	str	r3, [r7, #100]	; 0x64
 8009d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d2a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009d2c:	61fb      	str	r3, [r7, #28]
    return r;
 8009d2e:	69fa      	ldr	r2, [r7, #28]
 8009d30:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009d32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d34:	440b      	add	r3, r1
 8009d36:	663b      	str	r3, [r7, #96]	; 0x60
 8009d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d3a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009d3c:	61bb      	str	r3, [r7, #24]
    return r;
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	4053      	eors	r3, r2
 8009d42:	65fb      	str	r3, [r7, #92]	; 0x5c
        mbedtls_put_unaligned_uint32(r + i, x);
 8009d44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009d46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d48:	4413      	add	r3, r2
 8009d4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d4e:	617b      	str	r3, [r7, #20]
 8009d50:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 8009d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d54:	601a      	str	r2, [r3, #0]
}
 8009d56:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8009d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d60:	3304      	adds	r3, #4
 8009d62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d2db      	bcs.n	8009d20 <mbedtls_des_crypt_cbc+0x48>
    for (; i < n; i++) {
 8009d68:	e010      	b.n	8009d8c <mbedtls_des_crypt_cbc+0xb4>
        r[i] = a[i] ^ b[i];
 8009d6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009d6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d6e:	4413      	add	r3, r2
 8009d70:	7819      	ldrb	r1, [r3, #0]
 8009d72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d76:	4413      	add	r3, r2
 8009d78:	781a      	ldrb	r2, [r3, #0]
 8009d7a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d7e:	4403      	add	r3, r0
 8009d80:	404a      	eors	r2, r1
 8009d82:	b2d2      	uxtb	r2, r2
 8009d84:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8009d86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d88:	3301      	adds	r3, #1
 8009d8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d8ea      	bhi.n	8009d6a <mbedtls_des_crypt_cbc+0x92>
}
 8009d94:	bf00      	nop
            mbedtls_xor(output, input, iv, 8);

            ret = mbedtls_des_crypt_ecb(ctx, output, output);
 8009d96:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009d9a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f7ff fdfe 	bl	80099a0 <mbedtls_des_crypt_ecb>
 8009da4:	67f8      	str	r0, [r7, #124]	; 0x7c
            if (ret != 0) {
 8009da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f040 808b 	bne.w	8009ec4 <mbedtls_des_crypt_cbc+0x1ec>
                goto exit;
            }
            memcpy(iv, output, 8);
 8009dae:	2208      	movs	r2, #8
 8009db0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8009db4:	6838      	ldr	r0, [r7, #0]
 8009db6:	f006 ff8c 	bl	8010cd2 <memcpy>

            input  += 8;
 8009dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            output += 8;
 8009dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009dc8:	3308      	adds	r3, #8
 8009dca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            length -= 8;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3b08      	subs	r3, #8
 8009dd2:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d195      	bne.n	8009d06 <mbedtls_des_crypt_cbc+0x2e>
 8009dda:	e070      	b.n	8009ebe <mbedtls_des_crypt_cbc+0x1e6>
        }
    } else { /* MBEDTLS_DES_DECRYPT */
        while (length > 0) {
            memcpy(temp, input, 8);
 8009ddc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009de4:	6810      	ldr	r0, [r2, #0]
 8009de6:	6851      	ldr	r1, [r2, #4]
 8009de8:	c303      	stmia	r3!, {r0, r1}
            ret = mbedtls_des_crypt_ecb(ctx, input, output);
 8009dea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009dee:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f7ff fdd4 	bl	80099a0 <mbedtls_des_crypt_ecb>
 8009df8:	67f8      	str	r0, [r7, #124]	; 0x7c
            if (ret != 0) {
 8009dfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d163      	bne.n	8009ec8 <mbedtls_des_crypt_cbc+0x1f0>
 8009e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e04:	657b      	str	r3, [r7, #84]	; 0x54
 8009e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e0a:	653b      	str	r3, [r7, #80]	; 0x50
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e10:	2308      	movs	r3, #8
 8009e12:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t i = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	647b      	str	r3, [r7, #68]	; 0x44
    for (; (i + 4) <= n; i += 4) {
 8009e18:	e01e      	b.n	8009e58 <mbedtls_des_crypt_cbc+0x180>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8009e1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e1e:	4413      	add	r3, r2
 8009e20:	643b      	str	r3, [r7, #64]	; 0x40
 8009e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e24:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009e26:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 8009e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e2e:	440b      	add	r3, r1
 8009e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e34:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009e36:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	4053      	eors	r3, r2
 8009e3c:	63bb      	str	r3, [r7, #56]	; 0x38
        mbedtls_put_unaligned_uint32(r + i, x);
 8009e3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e42:	4413      	add	r3, r2
 8009e44:	637b      	str	r3, [r7, #52]	; 0x34
 8009e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e48:	623b      	str	r3, [r7, #32]
 8009e4a:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 8009e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4e:	601a      	str	r2, [r3, #0]
}
 8009e50:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 8009e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e54:	3304      	adds	r3, #4
 8009e56:	647b      	str	r3, [r7, #68]	; 0x44
 8009e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d2db      	bcs.n	8009e1a <mbedtls_des_crypt_cbc+0x142>
    for (; i < n; i++) {
 8009e62:	e010      	b.n	8009e86 <mbedtls_des_crypt_cbc+0x1ae>
        r[i] = a[i] ^ b[i];
 8009e64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e68:	4413      	add	r3, r2
 8009e6a:	7819      	ldrb	r1, [r3, #0]
 8009e6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e70:	4413      	add	r3, r2
 8009e72:	781a      	ldrb	r2, [r3, #0]
 8009e74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e78:	4403      	add	r3, r0
 8009e7a:	404a      	eors	r2, r1
 8009e7c:	b2d2      	uxtb	r2, r2
 8009e7e:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 8009e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e82:	3301      	adds	r3, #1
 8009e84:	647b      	str	r3, [r7, #68]	; 0x44
 8009e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d8ea      	bhi.n	8009e64 <mbedtls_des_crypt_cbc+0x18c>
}
 8009e8e:	bf00      	nop
                goto exit;
            }

            mbedtls_xor(output, output, iv, 8);

            memcpy(iv, temp, 8);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009e98:	cb03      	ldmia	r3!, {r0, r1}
 8009e9a:	6010      	str	r0, [r2, #0]
 8009e9c:	6051      	str	r1, [r2, #4]

            input  += 8;
 8009e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            output += 8;
 8009ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009eac:	3308      	adds	r3, #8
 8009eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            length -= 8;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	3b08      	subs	r3, #8
 8009eb6:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d18e      	bne.n	8009ddc <mbedtls_des_crypt_cbc+0x104>
        }
    }
    ret = 0;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009ec2:	e002      	b.n	8009eca <mbedtls_des_crypt_cbc+0x1f2>
                goto exit;
 8009ec4:	bf00      	nop
 8009ec6:	e000      	b.n	8009eca <mbedtls_des_crypt_cbc+0x1f2>
                goto exit;
 8009ec8:	bf00      	nop

exit:
    return ret;
 8009eca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3780      	adds	r7, #128	; 0x80
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <mbedtls_des3_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES3_CRYPT_ECB_ALT)
int mbedtls_des3_crypt_ecb(mbedtls_des3_context *ctx,
                           const unsigned char input[8],
                           unsigned char output[8])
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b093      	sub	sp, #76	; 0x4c
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eea:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009eec:	61bb      	str	r3, [r7, #24]
    return r;
 8009eee:	69bb      	ldr	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE(input, 0);
 8009ef0:	ba1b      	rev	r3, r3
 8009ef2:	643b      	str	r3, [r7, #64]	; 0x40
    Y = MBEDTLS_GET_UINT32_BE(input, 4);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8009efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efc:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 8009efe:	617b      	str	r3, [r7, #20]
    return r;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	ba1b      	rev	r3, r3
 8009f04:	63fb      	str	r3, [r7, #60]	; 0x3c

    DES_IP(X, Y);
 8009f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f08:	091a      	lsrs	r2, r3, #4
 8009f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0c:	4053      	eors	r3, r2
 8009f0e:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8009f12:	637b      	str	r3, [r7, #52]	; 0x34
 8009f14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f18:	4053      	eors	r3, r2
 8009f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f1e:	011b      	lsls	r3, r3, #4
 8009f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f22:	4053      	eors	r3, r2
 8009f24:	643b      	str	r3, [r7, #64]	; 0x40
 8009f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f28:	0c1a      	lsrs	r2, r3, #16
 8009f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f2c:	4053      	eors	r3, r2
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	637b      	str	r3, [r7, #52]	; 0x34
 8009f32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f36:	4053      	eors	r3, r2
 8009f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3c:	041b      	lsls	r3, r3, #16
 8009f3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f40:	4053      	eors	r3, r2
 8009f42:	643b      	str	r3, [r7, #64]	; 0x40
 8009f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f46:	089a      	lsrs	r2, r3, #2
 8009f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f4a:	4053      	eors	r3, r2
 8009f4c:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8009f50:	637b      	str	r3, [r7, #52]	; 0x34
 8009f52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f56:	4053      	eors	r3, r2
 8009f58:	643b      	str	r3, [r7, #64]	; 0x40
 8009f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f60:	4053      	eors	r3, r2
 8009f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f66:	0a1a      	lsrs	r2, r3, #8
 8009f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f6a:	4053      	eors	r3, r2
 8009f6c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8009f70:	637b      	str	r3, [r7, #52]	; 0x34
 8009f72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f76:	4053      	eors	r3, r2
 8009f78:	643b      	str	r3, [r7, #64]	; 0x40
 8009f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7c:	021b      	lsls	r3, r3, #8
 8009f7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f80:	4053      	eors	r3, r2
 8009f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f86:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f90:	4053      	eors	r3, r2
 8009f92:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8009f96:	637b      	str	r3, [r7, #52]	; 0x34
 8009f98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9c:	4053      	eors	r3, r2
 8009f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa4:	4053      	eors	r3, r2
 8009fa6:	643b      	str	r3, [r7, #64]	; 0x40
 8009fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009faa:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009fae:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < 8; i++) {
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8009fb4:	e0a6      	b.n	800a104 <mbedtls_des3_crypt_ecb+0x230>
        DES_ROUND(Y, X);
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb8:	1d1a      	adds	r2, r3, #4
 8009fba:	63ba      	str	r2, [r7, #56]	; 0x38
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fc0:	4053      	eors	r3, r2
 8009fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8009fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fca:	4aa9      	ldr	r2, [pc, #676]	; (800a270 <mbedtls_des3_crypt_ecb+0x39c>)
 8009fcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd2:	0a1b      	lsrs	r3, r3, #8
 8009fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fd8:	49a6      	ldr	r1, [pc, #664]	; (800a274 <mbedtls_des3_crypt_ecb+0x3a0>)
 8009fda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009fde:	405a      	eors	r2, r3
 8009fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe2:	0c1b      	lsrs	r3, r3, #16
 8009fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fe8:	49a3      	ldr	r1, [pc, #652]	; (800a278 <mbedtls_des3_crypt_ecb+0x3a4>)
 8009fea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009fee:	405a      	eors	r2, r3
 8009ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff2:	0e1b      	lsrs	r3, r3, #24
 8009ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ff8:	49a0      	ldr	r1, [pc, #640]	; (800a27c <mbedtls_des3_crypt_ecb+0x3a8>)
 8009ffa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ffe:	4053      	eors	r3, r2
 800a000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a002:	4053      	eors	r3, r2
 800a004:	643b      	str	r3, [r7, #64]	; 0x40
 800a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a008:	1d1a      	adds	r2, r3, #4
 800a00a:	63ba      	str	r2, [r7, #56]	; 0x38
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a010:	ea4f 1333 	mov.w	r3, r3, ror #4
 800a014:	4053      	eors	r3, r2
 800a016:	637b      	str	r3, [r7, #52]	; 0x34
 800a018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a01e:	4a98      	ldr	r2, [pc, #608]	; (800a280 <mbedtls_des3_crypt_ecb+0x3ac>)
 800a020:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a026:	0a1b      	lsrs	r3, r3, #8
 800a028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a02c:	4995      	ldr	r1, [pc, #596]	; (800a284 <mbedtls_des3_crypt_ecb+0x3b0>)
 800a02e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a032:	405a      	eors	r2, r3
 800a034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a036:	0c1b      	lsrs	r3, r3, #16
 800a038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a03c:	4992      	ldr	r1, [pc, #584]	; (800a288 <mbedtls_des3_crypt_ecb+0x3b4>)
 800a03e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a042:	405a      	eors	r2, r3
 800a044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a046:	0e1b      	lsrs	r3, r3, #24
 800a048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a04c:	498f      	ldr	r1, [pc, #572]	; (800a28c <mbedtls_des3_crypt_ecb+0x3b8>)
 800a04e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a052:	4053      	eors	r3, r2
 800a054:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a056:	4053      	eors	r3, r2
 800a058:	643b      	str	r3, [r7, #64]	; 0x40
        DES_ROUND(X, Y);
 800a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05c:	1d1a      	adds	r2, r3, #4
 800a05e:	63ba      	str	r2, [r7, #56]	; 0x38
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a064:	4053      	eors	r3, r2
 800a066:	637b      	str	r3, [r7, #52]	; 0x34
 800a068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a06a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a06e:	4a80      	ldr	r2, [pc, #512]	; (800a270 <mbedtls_des3_crypt_ecb+0x39c>)
 800a070:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a076:	0a1b      	lsrs	r3, r3, #8
 800a078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a07c:	497d      	ldr	r1, [pc, #500]	; (800a274 <mbedtls_des3_crypt_ecb+0x3a0>)
 800a07e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a082:	405a      	eors	r2, r3
 800a084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a086:	0c1b      	lsrs	r3, r3, #16
 800a088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a08c:	497a      	ldr	r1, [pc, #488]	; (800a278 <mbedtls_des3_crypt_ecb+0x3a4>)
 800a08e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a092:	405a      	eors	r2, r3
 800a094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a096:	0e1b      	lsrs	r3, r3, #24
 800a098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a09c:	4977      	ldr	r1, [pc, #476]	; (800a27c <mbedtls_des3_crypt_ecb+0x3a8>)
 800a09e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a0a2:	4053      	eors	r3, r2
 800a0a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0a6:	4053      	eors	r3, r2
 800a0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	1d1a      	adds	r2, r3, #4
 800a0ae:	63ba      	str	r2, [r7, #56]	; 0x38
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0b4:	ea4f 1333 	mov.w	r3, r3, ror #4
 800a0b8:	4053      	eors	r3, r2
 800a0ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0c2:	4a6f      	ldr	r2, [pc, #444]	; (800a280 <mbedtls_des3_crypt_ecb+0x3ac>)
 800a0c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ca:	0a1b      	lsrs	r3, r3, #8
 800a0cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0d0:	496c      	ldr	r1, [pc, #432]	; (800a284 <mbedtls_des3_crypt_ecb+0x3b0>)
 800a0d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a0d6:	405a      	eors	r2, r3
 800a0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0da:	0c1b      	lsrs	r3, r3, #16
 800a0dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0e0:	4969      	ldr	r1, [pc, #420]	; (800a288 <mbedtls_des3_crypt_ecb+0x3b4>)
 800a0e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a0e6:	405a      	eors	r2, r3
 800a0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ea:	0e1b      	lsrs	r3, r3, #24
 800a0ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0f0:	4966      	ldr	r1, [pc, #408]	; (800a28c <mbedtls_des3_crypt_ecb+0x3b8>)
 800a0f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a0f6:	4053      	eors	r3, r2
 800a0f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0fa:	4053      	eors	r3, r2
 800a0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < 8; i++) {
 800a0fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a100:	3301      	adds	r3, #1
 800a102:	647b      	str	r3, [r7, #68]	; 0x44
 800a104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a106:	2b07      	cmp	r3, #7
 800a108:	f77f af55 	ble.w	8009fb6 <mbedtls_des3_crypt_ecb+0xe2>
    }

    for (i = 0; i < 8; i++) {
 800a10c:	2300      	movs	r3, #0
 800a10e:	647b      	str	r3, [r7, #68]	; 0x44
 800a110:	e0a6      	b.n	800a260 <mbedtls_des3_crypt_ecb+0x38c>
        DES_ROUND(X, Y);
 800a112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a114:	1d1a      	adds	r2, r3, #4
 800a116:	63ba      	str	r2, [r7, #56]	; 0x38
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a11c:	4053      	eors	r3, r2
 800a11e:	637b      	str	r3, [r7, #52]	; 0x34
 800a120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a126:	4a52      	ldr	r2, [pc, #328]	; (800a270 <mbedtls_des3_crypt_ecb+0x39c>)
 800a128:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12e:	0a1b      	lsrs	r3, r3, #8
 800a130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a134:	494f      	ldr	r1, [pc, #316]	; (800a274 <mbedtls_des3_crypt_ecb+0x3a0>)
 800a136:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a13a:	405a      	eors	r2, r3
 800a13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a13e:	0c1b      	lsrs	r3, r3, #16
 800a140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a144:	494c      	ldr	r1, [pc, #304]	; (800a278 <mbedtls_des3_crypt_ecb+0x3a4>)
 800a146:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a14a:	405a      	eors	r2, r3
 800a14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14e:	0e1b      	lsrs	r3, r3, #24
 800a150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a154:	4949      	ldr	r1, [pc, #292]	; (800a27c <mbedtls_des3_crypt_ecb+0x3a8>)
 800a156:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a15a:	4053      	eors	r3, r2
 800a15c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a15e:	4053      	eors	r3, r2
 800a160:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a164:	1d1a      	adds	r2, r3, #4
 800a166:	63ba      	str	r2, [r7, #56]	; 0x38
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a16c:	ea4f 1333 	mov.w	r3, r3, ror #4
 800a170:	4053      	eors	r3, r2
 800a172:	637b      	str	r3, [r7, #52]	; 0x34
 800a174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a17a:	4a41      	ldr	r2, [pc, #260]	; (800a280 <mbedtls_des3_crypt_ecb+0x3ac>)
 800a17c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a182:	0a1b      	lsrs	r3, r3, #8
 800a184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a188:	493e      	ldr	r1, [pc, #248]	; (800a284 <mbedtls_des3_crypt_ecb+0x3b0>)
 800a18a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a18e:	405a      	eors	r2, r3
 800a190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a192:	0c1b      	lsrs	r3, r3, #16
 800a194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a198:	493b      	ldr	r1, [pc, #236]	; (800a288 <mbedtls_des3_crypt_ecb+0x3b4>)
 800a19a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a19e:	405a      	eors	r2, r3
 800a1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a2:	0e1b      	lsrs	r3, r3, #24
 800a1a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1a8:	4938      	ldr	r1, [pc, #224]	; (800a28c <mbedtls_des3_crypt_ecb+0x3b8>)
 800a1aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a1ae:	4053      	eors	r3, r2
 800a1b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1b2:	4053      	eors	r3, r2
 800a1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        DES_ROUND(Y, X);
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b8:	1d1a      	adds	r2, r3, #4
 800a1ba:	63ba      	str	r2, [r7, #56]	; 0x38
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1c0:	4053      	eors	r3, r2
 800a1c2:	637b      	str	r3, [r7, #52]	; 0x34
 800a1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1ca:	4a29      	ldr	r2, [pc, #164]	; (800a270 <mbedtls_des3_crypt_ecb+0x39c>)
 800a1cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d2:	0a1b      	lsrs	r3, r3, #8
 800a1d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1d8:	4926      	ldr	r1, [pc, #152]	; (800a274 <mbedtls_des3_crypt_ecb+0x3a0>)
 800a1da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a1de:	405a      	eors	r2, r3
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e2:	0c1b      	lsrs	r3, r3, #16
 800a1e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1e8:	4923      	ldr	r1, [pc, #140]	; (800a278 <mbedtls_des3_crypt_ecb+0x3a4>)
 800a1ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a1ee:	405a      	eors	r2, r3
 800a1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f2:	0e1b      	lsrs	r3, r3, #24
 800a1f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1f8:	4920      	ldr	r1, [pc, #128]	; (800a27c <mbedtls_des3_crypt_ecb+0x3a8>)
 800a1fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a1fe:	4053      	eors	r3, r2
 800a200:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a202:	4053      	eors	r3, r2
 800a204:	643b      	str	r3, [r7, #64]	; 0x40
 800a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a208:	1d1a      	adds	r2, r3, #4
 800a20a:	63ba      	str	r2, [r7, #56]	; 0x38
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a210:	ea4f 1333 	mov.w	r3, r3, ror #4
 800a214:	4053      	eors	r3, r2
 800a216:	637b      	str	r3, [r7, #52]	; 0x34
 800a218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a21a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a21e:	4a18      	ldr	r2, [pc, #96]	; (800a280 <mbedtls_des3_crypt_ecb+0x3ac>)
 800a220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a226:	0a1b      	lsrs	r3, r3, #8
 800a228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a22c:	4915      	ldr	r1, [pc, #84]	; (800a284 <mbedtls_des3_crypt_ecb+0x3b0>)
 800a22e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a232:	405a      	eors	r2, r3
 800a234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a236:	0c1b      	lsrs	r3, r3, #16
 800a238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a23c:	4912      	ldr	r1, [pc, #72]	; (800a288 <mbedtls_des3_crypt_ecb+0x3b4>)
 800a23e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a242:	405a      	eors	r2, r3
 800a244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a246:	0e1b      	lsrs	r3, r3, #24
 800a248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a24c:	490f      	ldr	r1, [pc, #60]	; (800a28c <mbedtls_des3_crypt_ecb+0x3b8>)
 800a24e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a252:	4053      	eors	r3, r2
 800a254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a256:	4053      	eors	r3, r2
 800a258:	643b      	str	r3, [r7, #64]	; 0x40
    for (i = 0; i < 8; i++) {
 800a25a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a25c:	3301      	adds	r3, #1
 800a25e:	647b      	str	r3, [r7, #68]	; 0x44
 800a260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a262:	2b07      	cmp	r3, #7
 800a264:	f77f af55 	ble.w	800a112 <mbedtls_des3_crypt_ecb+0x23e>
    }

    for (i = 0; i < 8; i++) {
 800a268:	2300      	movs	r3, #0
 800a26a:	647b      	str	r3, [r7, #68]	; 0x44
 800a26c:	e0b7      	b.n	800a3de <mbedtls_des3_crypt_ecb+0x50a>
 800a26e:	bf00      	nop
 800a270:	0801374c 	.word	0x0801374c
 800a274:	0801354c 	.word	0x0801354c
 800a278:	0801334c 	.word	0x0801334c
 800a27c:	0801314c 	.word	0x0801314c
 800a280:	0801364c 	.word	0x0801364c
 800a284:	0801344c 	.word	0x0801344c
 800a288:	0801324c 	.word	0x0801324c
 800a28c:	0801304c 	.word	0x0801304c
        DES_ROUND(Y, X);
 800a290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a292:	1d1a      	adds	r2, r3, #4
 800a294:	63ba      	str	r2, [r7, #56]	; 0x38
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a29a:	4053      	eors	r3, r2
 800a29c:	637b      	str	r3, [r7, #52]	; 0x34
 800a29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2a4:	4a87      	ldr	r2, [pc, #540]	; (800a4c4 <mbedtls_des3_crypt_ecb+0x5f0>)
 800a2a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ac:	0a1b      	lsrs	r3, r3, #8
 800a2ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2b2:	4985      	ldr	r1, [pc, #532]	; (800a4c8 <mbedtls_des3_crypt_ecb+0x5f4>)
 800a2b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a2b8:	405a      	eors	r2, r3
 800a2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2bc:	0c1b      	lsrs	r3, r3, #16
 800a2be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2c2:	4982      	ldr	r1, [pc, #520]	; (800a4cc <mbedtls_des3_crypt_ecb+0x5f8>)
 800a2c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a2c8:	405a      	eors	r2, r3
 800a2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2cc:	0e1b      	lsrs	r3, r3, #24
 800a2ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2d2:	497f      	ldr	r1, [pc, #508]	; (800a4d0 <mbedtls_des3_crypt_ecb+0x5fc>)
 800a2d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a2d8:	4053      	eors	r3, r2
 800a2da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2dc:	4053      	eors	r3, r2
 800a2de:	643b      	str	r3, [r7, #64]	; 0x40
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e2:	1d1a      	adds	r2, r3, #4
 800a2e4:	63ba      	str	r2, [r7, #56]	; 0x38
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ea:	ea4f 1333 	mov.w	r3, r3, ror #4
 800a2ee:	4053      	eors	r3, r2
 800a2f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2f8:	4a76      	ldr	r2, [pc, #472]	; (800a4d4 <mbedtls_des3_crypt_ecb+0x600>)
 800a2fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a300:	0a1b      	lsrs	r3, r3, #8
 800a302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a306:	4974      	ldr	r1, [pc, #464]	; (800a4d8 <mbedtls_des3_crypt_ecb+0x604>)
 800a308:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a30c:	405a      	eors	r2, r3
 800a30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a310:	0c1b      	lsrs	r3, r3, #16
 800a312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a316:	4971      	ldr	r1, [pc, #452]	; (800a4dc <mbedtls_des3_crypt_ecb+0x608>)
 800a318:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a31c:	405a      	eors	r2, r3
 800a31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a320:	0e1b      	lsrs	r3, r3, #24
 800a322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a326:	496e      	ldr	r1, [pc, #440]	; (800a4e0 <mbedtls_des3_crypt_ecb+0x60c>)
 800a328:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a32c:	4053      	eors	r3, r2
 800a32e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a330:	4053      	eors	r3, r2
 800a332:	643b      	str	r3, [r7, #64]	; 0x40
        DES_ROUND(X, Y);
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	1d1a      	adds	r2, r3, #4
 800a338:	63ba      	str	r2, [r7, #56]	; 0x38
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a33e:	4053      	eors	r3, r2
 800a340:	637b      	str	r3, [r7, #52]	; 0x34
 800a342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a348:	4a5e      	ldr	r2, [pc, #376]	; (800a4c4 <mbedtls_des3_crypt_ecb+0x5f0>)
 800a34a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a350:	0a1b      	lsrs	r3, r3, #8
 800a352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a356:	495c      	ldr	r1, [pc, #368]	; (800a4c8 <mbedtls_des3_crypt_ecb+0x5f4>)
 800a358:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a35c:	405a      	eors	r2, r3
 800a35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a360:	0c1b      	lsrs	r3, r3, #16
 800a362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a366:	4959      	ldr	r1, [pc, #356]	; (800a4cc <mbedtls_des3_crypt_ecb+0x5f8>)
 800a368:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a36c:	405a      	eors	r2, r3
 800a36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a370:	0e1b      	lsrs	r3, r3, #24
 800a372:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a376:	4956      	ldr	r1, [pc, #344]	; (800a4d0 <mbedtls_des3_crypt_ecb+0x5fc>)
 800a378:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a37c:	4053      	eors	r3, r2
 800a37e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a380:	4053      	eors	r3, r2
 800a382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a386:	1d1a      	adds	r2, r3, #4
 800a388:	63ba      	str	r2, [r7, #56]	; 0x38
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a38e:	ea4f 1333 	mov.w	r3, r3, ror #4
 800a392:	4053      	eors	r3, r2
 800a394:	637b      	str	r3, [r7, #52]	; 0x34
 800a396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a39c:	4a4d      	ldr	r2, [pc, #308]	; (800a4d4 <mbedtls_des3_crypt_ecb+0x600>)
 800a39e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a4:	0a1b      	lsrs	r3, r3, #8
 800a3a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3aa:	494b      	ldr	r1, [pc, #300]	; (800a4d8 <mbedtls_des3_crypt_ecb+0x604>)
 800a3ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a3b0:	405a      	eors	r2, r3
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b4:	0c1b      	lsrs	r3, r3, #16
 800a3b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3ba:	4948      	ldr	r1, [pc, #288]	; (800a4dc <mbedtls_des3_crypt_ecb+0x608>)
 800a3bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a3c0:	405a      	eors	r2, r3
 800a3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c4:	0e1b      	lsrs	r3, r3, #24
 800a3c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3ca:	4945      	ldr	r1, [pc, #276]	; (800a4e0 <mbedtls_des3_crypt_ecb+0x60c>)
 800a3cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a3d0:	4053      	eors	r3, r2
 800a3d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3d4:	4053      	eors	r3, r2
 800a3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < 8; i++) {
 800a3d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3da:	3301      	adds	r3, #1
 800a3dc:	647b      	str	r3, [r7, #68]	; 0x44
 800a3de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3e0:	2b07      	cmp	r3, #7
 800a3e2:	f77f af55 	ble.w	800a290 <mbedtls_des3_crypt_ecb+0x3bc>
    }

    DES_FP(Y, X);
 800a3e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e8:	ea4f 0373 	mov.w	r3, r3, ror #1
 800a3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3f2:	4053      	eors	r3, r2
 800a3f4:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800a3f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a3fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3fe:	4053      	eors	r3, r2
 800a400:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a406:	4053      	eors	r3, r2
 800a408:	643b      	str	r3, [r7, #64]	; 0x40
 800a40a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a40c:	ea4f 0373 	mov.w	r3, r3, ror #1
 800a410:	643b      	str	r3, [r7, #64]	; 0x40
 800a412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a414:	0a1a      	lsrs	r2, r3, #8
 800a416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a418:	4053      	eors	r3, r2
 800a41a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800a41e:	637b      	str	r3, [r7, #52]	; 0x34
 800a420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a424:	4053      	eors	r3, r2
 800a426:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a42a:	021b      	lsls	r3, r3, #8
 800a42c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a42e:	4053      	eors	r3, r2
 800a430:	643b      	str	r3, [r7, #64]	; 0x40
 800a432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a434:	089a      	lsrs	r2, r3, #2
 800a436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a438:	4053      	eors	r3, r2
 800a43a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800a43e:	637b      	str	r3, [r7, #52]	; 0x34
 800a440:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a444:	4053      	eors	r3, r2
 800a446:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a44e:	4053      	eors	r3, r2
 800a450:	643b      	str	r3, [r7, #64]	; 0x40
 800a452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a454:	0c1a      	lsrs	r2, r3, #16
 800a456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a458:	4053      	eors	r3, r2
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	637b      	str	r3, [r7, #52]	; 0x34
 800a45e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a462:	4053      	eors	r3, r2
 800a464:	643b      	str	r3, [r7, #64]	; 0x40
 800a466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a468:	041b      	lsls	r3, r3, #16
 800a46a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a46c:	4053      	eors	r3, r2
 800a46e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a472:	091a      	lsrs	r2, r3, #4
 800a474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a476:	4053      	eors	r3, r2
 800a478:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800a47c:	637b      	str	r3, [r7, #52]	; 0x34
 800a47e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a482:	4053      	eors	r3, r2
 800a484:	643b      	str	r3, [r7, #64]	; 0x40
 800a486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a488:	011b      	lsls	r3, r3, #4
 800a48a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a48c:	4053      	eors	r3, r2
 800a48e:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT32_BE(Y, output, 0);
 800a490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a492:	ba1b      	rev	r3, r3
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	62ba      	str	r2, [r7, #40]	; 0x28
 800a498:	61fb      	str	r3, [r7, #28]
 800a49a:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 800a49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49e:	601a      	str	r2, [r3, #0]
}
 800a4a0:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(X, output, 4);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	1d1a      	adds	r2, r3, #4
 800a4a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4a8:	ba1b      	rev	r3, r3
 800a4aa:	627a      	str	r2, [r7, #36]	; 0x24
 800a4ac:	623b      	str	r3, [r7, #32]
 800a4ae:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	601a      	str	r2, [r3, #0]
}
 800a4b4:	bf00      	nop

    return 0;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	374c      	adds	r7, #76	; 0x4c
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr
 800a4c4:	0801374c 	.word	0x0801374c
 800a4c8:	0801354c 	.word	0x0801354c
 800a4cc:	0801334c 	.word	0x0801334c
 800a4d0:	0801314c 	.word	0x0801314c
 800a4d4:	0801364c 	.word	0x0801364c
 800a4d8:	0801344c 	.word	0x0801344c
 800a4dc:	0801324c 	.word	0x0801324c
 800a4e0:	0801304c 	.word	0x0801304c

0800a4e4 <mbedtls_des3_crypt_cbc>:
                           int mode,
                           size_t length,
                           unsigned char iv[8],
                           const unsigned char *input,
                           unsigned char *output)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b0a0      	sub	sp, #128	; 0x80
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	607a      	str	r2, [r7, #4]
 800a4f0:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800a4f2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800a4f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    unsigned char temp[8];

    if (length % 8) {
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f003 0307 	and.w	r3, r3, #7
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d002      	beq.n	800a508 <mbedtls_des3_crypt_cbc+0x24>
        return MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH;
 800a502:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800a506:	e0e7      	b.n	800a6d8 <mbedtls_des3_crypt_cbc+0x1f4>
    }

    if (mode == MBEDTLS_DES_ENCRYPT) {
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	f040 80da 	bne.w	800a6c4 <mbedtls_des3_crypt_cbc+0x1e0>
        while (length > 0) {
 800a510:	e066      	b.n	800a5e0 <mbedtls_des3_crypt_cbc+0xfc>
 800a512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a516:	67bb      	str	r3, [r7, #120]	; 0x78
 800a518:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a51c:	677b      	str	r3, [r7, #116]	; 0x74
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	673b      	str	r3, [r7, #112]	; 0x70
 800a522:	2308      	movs	r3, #8
 800a524:	66fb      	str	r3, [r7, #108]	; 0x6c
    size_t i = 0;
 800a526:	2300      	movs	r3, #0
 800a528:	66bb      	str	r3, [r7, #104]	; 0x68
    for (; (i + 4) <= n; i += 4) {
 800a52a:	e01e      	b.n	800a56a <mbedtls_des3_crypt_cbc+0x86>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800a52c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a52e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a530:	4413      	add	r3, r2
 800a532:	667b      	str	r3, [r7, #100]	; 0x64
 800a534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a536:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a538:	61fb      	str	r3, [r7, #28]
    return r;
 800a53a:	69fa      	ldr	r2, [r7, #28]
 800a53c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a53e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a540:	440b      	add	r3, r1
 800a542:	663b      	str	r3, [r7, #96]	; 0x60
 800a544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a546:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a548:	61bb      	str	r3, [r7, #24]
    return r;
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	4053      	eors	r3, r2
 800a54e:	65fb      	str	r3, [r7, #92]	; 0x5c
        mbedtls_put_unaligned_uint32(r + i, x);
 800a550:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a552:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a554:	4413      	add	r3, r2
 800a556:	65bb      	str	r3, [r7, #88]	; 0x58
 800a558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a55a:	617b      	str	r3, [r7, #20]
 800a55c:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 800a55e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a560:	601a      	str	r2, [r3, #0]
}
 800a562:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800a564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a566:	3304      	adds	r3, #4
 800a568:	66bb      	str	r3, [r7, #104]	; 0x68
 800a56a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a56c:	3304      	adds	r3, #4
 800a56e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a570:	429a      	cmp	r2, r3
 800a572:	d2db      	bcs.n	800a52c <mbedtls_des3_crypt_cbc+0x48>
    for (; i < n; i++) {
 800a574:	e010      	b.n	800a598 <mbedtls_des3_crypt_cbc+0xb4>
        r[i] = a[i] ^ b[i];
 800a576:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a578:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a57a:	4413      	add	r3, r2
 800a57c:	7819      	ldrb	r1, [r3, #0]
 800a57e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a582:	4413      	add	r3, r2
 800a584:	781a      	ldrb	r2, [r3, #0]
 800a586:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a58a:	4403      	add	r3, r0
 800a58c:	404a      	eors	r2, r1
 800a58e:	b2d2      	uxtb	r2, r2
 800a590:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800a592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a594:	3301      	adds	r3, #1
 800a596:	66bb      	str	r3, [r7, #104]	; 0x68
 800a598:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a59a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d8ea      	bhi.n	800a576 <mbedtls_des3_crypt_cbc+0x92>
}
 800a5a0:	bf00      	nop
            mbedtls_xor(output, input, iv, 8);

            ret = mbedtls_des3_crypt_ecb(ctx, output, output);
 800a5a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a5a6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f7ff fc92 	bl	8009ed4 <mbedtls_des3_crypt_ecb>
 800a5b0:	67f8      	str	r0, [r7, #124]	; 0x7c
            if (ret != 0) {
 800a5b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f040 808b 	bne.w	800a6d0 <mbedtls_des3_crypt_cbc+0x1ec>
                goto exit;
            }
            memcpy(iv, output, 8);
 800a5ba:	2208      	movs	r2, #8
 800a5bc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800a5c0:	6838      	ldr	r0, [r7, #0]
 800a5c2:	f006 fb86 	bl	8010cd2 <memcpy>

            input  += 8;
 800a5c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            output += 8;
 800a5d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5d4:	3308      	adds	r3, #8
 800a5d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            length -= 8;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	3b08      	subs	r3, #8
 800a5de:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d195      	bne.n	800a512 <mbedtls_des3_crypt_cbc+0x2e>
 800a5e6:	e070      	b.n	800a6ca <mbedtls_des3_crypt_cbc+0x1e6>
        }
    } else { /* MBEDTLS_DES_DECRYPT */
        while (length > 0) {
            memcpy(temp, input, 8);
 800a5e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a5ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5f0:	6810      	ldr	r0, [r2, #0]
 800a5f2:	6851      	ldr	r1, [r2, #4]
 800a5f4:	c303      	stmia	r3!, {r0, r1}
            ret = mbedtls_des3_crypt_ecb(ctx, input, output);
 800a5f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a5fa:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f7ff fc68 	bl	8009ed4 <mbedtls_des3_crypt_ecb>
 800a604:	67f8      	str	r0, [r7, #124]	; 0x7c
            if (ret != 0) {
 800a606:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d163      	bne.n	800a6d4 <mbedtls_des3_crypt_cbc+0x1f0>
 800a60c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a610:	657b      	str	r3, [r7, #84]	; 0x54
 800a612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a616:	653b      	str	r3, [r7, #80]	; 0x50
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a61c:	2308      	movs	r3, #8
 800a61e:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t i = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	647b      	str	r3, [r7, #68]	; 0x44
    for (; (i + 4) <= n; i += 4) {
 800a624:	e01e      	b.n	800a664 <mbedtls_des3_crypt_cbc+0x180>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800a626:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a62a:	4413      	add	r3, r2
 800a62c:	643b      	str	r3, [r7, #64]	; 0x40
 800a62e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a630:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a632:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 800a634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a636:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a63a:	440b      	add	r3, r1
 800a63c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a640:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a642:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	4053      	eors	r3, r2
 800a648:	63bb      	str	r3, [r7, #56]	; 0x38
        mbedtls_put_unaligned_uint32(r + i, x);
 800a64a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a64c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a64e:	4413      	add	r3, r2
 800a650:	637b      	str	r3, [r7, #52]	; 0x34
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	623b      	str	r3, [r7, #32]
 800a656:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 800a658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65a:	601a      	str	r2, [r3, #0]
}
 800a65c:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800a65e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a660:	3304      	adds	r3, #4
 800a662:	647b      	str	r3, [r7, #68]	; 0x44
 800a664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a666:	3304      	adds	r3, #4
 800a668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d2db      	bcs.n	800a626 <mbedtls_des3_crypt_cbc+0x142>
    for (; i < n; i++) {
 800a66e:	e010      	b.n	800a692 <mbedtls_des3_crypt_cbc+0x1ae>
        r[i] = a[i] ^ b[i];
 800a670:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a674:	4413      	add	r3, r2
 800a676:	7819      	ldrb	r1, [r3, #0]
 800a678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a67a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a67c:	4413      	add	r3, r2
 800a67e:	781a      	ldrb	r2, [r3, #0]
 800a680:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a684:	4403      	add	r3, r0
 800a686:	404a      	eors	r2, r1
 800a688:	b2d2      	uxtb	r2, r2
 800a68a:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800a68c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a68e:	3301      	adds	r3, #1
 800a690:	647b      	str	r3, [r7, #68]	; 0x44
 800a692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a696:	429a      	cmp	r2, r3
 800a698:	d8ea      	bhi.n	800a670 <mbedtls_des3_crypt_cbc+0x18c>
}
 800a69a:	bf00      	nop
                goto exit;
            }

            mbedtls_xor(output, output, iv, 8);

            memcpy(iv, temp, 8);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6a4:	cb03      	ldmia	r3!, {r0, r1}
 800a6a6:	6010      	str	r0, [r2, #0]
 800a6a8:	6051      	str	r1, [r2, #4]

            input  += 8;
 800a6aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6ae:	3308      	adds	r3, #8
 800a6b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            output += 8;
 800a6b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6b8:	3308      	adds	r3, #8
 800a6ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            length -= 8;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	3b08      	subs	r3, #8
 800a6c2:	607b      	str	r3, [r7, #4]
        while (length > 0) {
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d18e      	bne.n	800a5e8 <mbedtls_des3_crypt_cbc+0x104>
        }
    }
    ret = 0;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6ce:	e002      	b.n	800a6d6 <mbedtls_des3_crypt_cbc+0x1f2>
                goto exit;
 800a6d0:	bf00      	nop
 800a6d2:	e000      	b.n	800a6d6 <mbedtls_des3_crypt_cbc+0x1f2>
                goto exit;
 800a6d4:	bf00      	nop

exit:
    return ret;
 800a6d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3780      	adds	r7, #128	; 0x80
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <mbedtls_cipher_info_get_block_size>:
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d101      	bne.n	800a6f2 <mbedtls_cipher_info_get_block_size+0x12>
        return 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	e004      	b.n	800a6fc <mbedtls_cipher_info_get_block_size+0x1c>
    return (size_t) (info->MBEDTLS_PRIVATE(block_size));
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	791b      	ldrb	r3, [r3, #4]
 800a6f6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800a6fa:	b2db      	uxtb	r3, r3
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <mbedtls_gcm_init>:

/*
 * Initialize a context
 */
void mbedtls_gcm_init(mbedtls_gcm_context *ctx)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_gcm_context));
 800a710:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a714:	2100      	movs	r1, #0
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f006 fa50 	bl	8010bbc <memset>
}
 800a71c:	bf00      	nop
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <gcm_set_acceleration>:

static inline void gcm_set_acceleration(mbedtls_gcm_context *ctx)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
#if defined(MBEDTLS_GCM_LARGE_TABLE)
    ctx->acceleration = MBEDTLS_GCM_ACC_LARGETABLE;
#else
    ctx->acceleration = MBEDTLS_GCM_ACC_SMALLTABLE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
#if defined(MBEDTLS_AESCE_HAVE_CODE)
    if (MBEDTLS_AESCE_HAS_SUPPORT()) {
        ctx->acceleration = MBEDTLS_GCM_ACC_AESCE;
    }
#endif
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <gcm_gen_table_rightshift>:

static inline void gcm_gen_table_rightshift(uint64_t dst[2], const uint64_t src[2])
{
 800a740:	b5b0      	push	{r4, r5, r7, lr}
 800a742:	b090      	sub	sp, #64	; 0x40
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
    uint8_t *u8Dst = (uint8_t *) dst;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t *u8Src = (uint8_t *) src;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	63fb      	str	r3, [r7, #60]	; 0x3c

    MBEDTLS_PUT_UINT64_BE(MBEDTLS_GET_UINT64_BE(&src[1], 0) >> 1, &dst[1], 0);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f103 0408 	add.w	r4, r3, #8
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	3308      	adds	r3, #8
 800a75c:	633b      	str	r3, [r7, #48]	; 0x30
    memcpy(&r, p, sizeof(r));
 800a75e:	f107 0310 	add.w	r3, r7, #16
 800a762:	2208      	movs	r2, #8
 800a764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a766:	4618      	mov	r0, r3
 800a768:	f006 fab3 	bl	8010cd2 <memcpy>
    return r;
 800a76c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a770:	ba15      	rev	r5, r2
 800a772:	ba1b      	rev	r3, r3
 800a774:	4618      	mov	r0, r3
 800a776:	4629      	mov	r1, r5
 800a778:	f04f 0200 	mov.w	r2, #0
 800a77c:	f04f 0300 	mov.w	r3, #0
 800a780:	0842      	lsrs	r2, r0, #1
 800a782:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800a786:	084b      	lsrs	r3, r1, #1
 800a788:	ba11      	rev	r1, r2
 800a78a:	ba18      	rev	r0, r3
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	637c      	str	r4, [r7, #52]	; 0x34
 800a792:	e9c7 2302 	strd	r2, r3, [r7, #8]
    memcpy(p, &x, sizeof(x));
 800a796:	f107 0308 	add.w	r3, r7, #8
 800a79a:	2208      	movs	r2, #8
 800a79c:	4619      	mov	r1, r3
 800a79e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a7a0:	f006 fa97 	bl	8010cd2 <memcpy>
}
 800a7a4:	bf00      	nop
    u8Dst[8] |= (u8Src[7] & 0x01) << 7;
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	3308      	adds	r3, #8
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	b25a      	sxtb	r2, r3
 800a7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b0:	3307      	adds	r3, #7
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	01db      	lsls	r3, r3, #7
 800a7b6:	b25b      	sxtb	r3, r3
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	b25a      	sxtb	r2, r3
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	3308      	adds	r3, #8
 800a7c0:	b2d2      	uxtb	r2, r2
 800a7c2:	701a      	strb	r2, [r3, #0]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	62bb      	str	r3, [r7, #40]	; 0x28
    memcpy(&r, p, sizeof(r));
 800a7c8:	f107 0320 	add.w	r3, r7, #32
 800a7cc:	2208      	movs	r2, #8
 800a7ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f006 fa7e 	bl	8010cd2 <memcpy>
    return r;
 800a7d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    MBEDTLS_PUT_UINT64_BE(MBEDTLS_GET_UINT64_BE(&src[0], 0) >> 1, &dst[0], 0);
 800a7da:	ba14      	rev	r4, r2
 800a7dc:	ba1b      	rev	r3, r3
 800a7de:	4618      	mov	r0, r3
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	f04f 0200 	mov.w	r2, #0
 800a7e6:	f04f 0300 	mov.w	r3, #0
 800a7ea:	0842      	lsrs	r2, r0, #1
 800a7ec:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800a7f0:	084b      	lsrs	r3, r1, #1
 800a7f2:	ba11      	rev	r1, r2
 800a7f4:	ba18      	rev	r0, r3
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	6879      	ldr	r1, [r7, #4]
 800a7fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a7fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    memcpy(p, &x, sizeof(x));
 800a802:	f107 0318 	add.w	r3, r7, #24
 800a806:	2208      	movs	r2, #8
 800a808:	4619      	mov	r1, r3
 800a80a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a80c:	f006 fa61 	bl	8010cd2 <memcpy>
}
 800a810:	bf00      	nop
    u8Dst[0] ^= (u8Src[15] & 0x01) ? 0xE1 : 0;
 800a812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	b25b      	sxtb	r3, r3
 800a818:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a81a:	320f      	adds	r2, #15
 800a81c:	7812      	ldrb	r2, [r2, #0]
 800a81e:	f002 0201 	and.w	r2, r2, #1
 800a822:	2a00      	cmp	r2, #0
 800a824:	d002      	beq.n	800a82c <gcm_gen_table_rightshift+0xec>
 800a826:	f06f 021e 	mvn.w	r2, #30
 800a82a:	e000      	b.n	800a82e <gcm_gen_table_rightshift+0xee>
 800a82c:	2200      	movs	r2, #0
 800a82e:	4053      	eors	r3, r2
 800a830:	b25b      	sxtb	r3, r3
 800a832:	b2da      	uxtb	r2, r3
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	701a      	strb	r2, [r3, #0]
}
 800a838:	bf00      	nop
 800a83a:	3740      	adds	r7, #64	; 0x40
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bdb0      	pop	{r4, r5, r7, pc}

0800a840 <gcm_gen_table>:
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */
static int gcm_gen_table(mbedtls_gcm_context *ctx)
{
 800a840:	b590      	push	{r4, r7, lr}
 800a842:	b0a1      	sub	sp, #132	; 0x84
 800a844:	af02      	add	r7, sp, #8
 800a846:	6078      	str	r0, [r7, #4]
    int ret, i, j;
    uint64_t u64h[2] = { 0 };
 800a848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a84c:	2200      	movs	r2, #0
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	605a      	str	r2, [r3, #4]
 800a852:	609a      	str	r2, [r3, #8]
 800a854:	60da      	str	r2, [r3, #12]
    uint8_t *h = (uint8_t *) u64h;
 800a856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a85a:	66fb      	str	r3, [r7, #108]	; 0x6c

#if defined(MBEDTLS_BLOCK_CIPHER_C)
    ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, h, h);
#else
    size_t olen = 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	627b      	str	r3, [r7, #36]	; 0x24
    ret = mbedtls_cipher_update(&ctx->cipher_ctx, h, 16, h, &olen);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a86a:	2210      	movs	r2, #16
 800a86c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a86e:	f7fd f89b 	bl	80079a8 <mbedtls_cipher_update>
 800a872:	66b8      	str	r0, [r7, #104]	; 0x68
#endif
    if (ret != 0) {
 800a874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <gcm_gen_table+0x3e>
        return ret;
 800a87a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a87c:	e0d8      	b.n	800aa30 <gcm_gen_table+0x1f0>
    }

    gcm_set_acceleration(ctx);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff ff50 	bl	800a724 <gcm_set_acceleration>

    /* MBEDTLS_GCM_HTABLE_SIZE/2 = 1000 corresponds to 1 in GF(2^128) */
    ctx->H[MBEDTLS_GCM_HTABLE_SIZE/2][0] = u64h[0];
 800a884:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a888:	6879      	ldr	r1, [r7, #4]
 800a88a:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    ctx->H[MBEDTLS_GCM_HTABLE_SIZE/2][1] = u64h[1];
 800a88e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a892:	6879      	ldr	r1, [r7, #4]
 800a894:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
            return 0;
#endif

        default:
            /* 0 corresponds to 0 in GF(2^128) */
            ctx->H[0][0] = 0;
 800a898:	6879      	ldr	r1, [r7, #4]
 800a89a:	f04f 0200 	mov.w	r2, #0
 800a89e:	f04f 0300 	mov.w	r3, #0
 800a8a2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
            ctx->H[0][1] = 0;
 800a8a6:	6879      	ldr	r1, [r7, #4]
 800a8a8:	f04f 0200 	mov.w	r2, #0
 800a8ac:	f04f 0300 	mov.w	r3, #0
 800a8b0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

            for (i = MBEDTLS_GCM_HTABLE_SIZE/4; i > 0; i >>= 1) {
 800a8b4:	2304      	movs	r3, #4
 800a8b6:	677b      	str	r3, [r7, #116]	; 0x74
 800a8b8:	e010      	b.n	800a8dc <gcm_gen_table+0x9c>
                gcm_gen_table_rightshift(ctx->H[i], ctx->H[i*2]);
 800a8ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8bc:	011b      	lsls	r3, r3, #4
 800a8be:	3348      	adds	r3, #72	; 0x48
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	18d0      	adds	r0, r2, r3
 800a8c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	011b      	lsls	r3, r3, #4
 800a8ca:	3348      	adds	r3, #72	; 0x48
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f7ff ff35 	bl	800a740 <gcm_gen_table_rightshift>
            for (i = MBEDTLS_GCM_HTABLE_SIZE/4; i > 0; i >>= 1) {
 800a8d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8d8:	105b      	asrs	r3, r3, #1
 800a8da:	677b      	str	r3, [r7, #116]	; 0x74
 800a8dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dceb      	bgt.n	800a8ba <gcm_gen_table+0x7a>
            }

#if !defined(MBEDTLS_GCM_LARGE_TABLE)
            /* pack elements of H as 64-bits ints, big-endian */
            for (i = MBEDTLS_GCM_HTABLE_SIZE/2; i > 0; i >>= 1) {
 800a8e2:	2308      	movs	r3, #8
 800a8e4:	677b      	str	r3, [r7, #116]	; 0x74
 800a8e6:	e038      	b.n	800a95a <gcm_gen_table+0x11a>
                MBEDTLS_PUT_UINT64_BE(ctx->H[i][0], &ctx->H[i][0], 0);
 800a8e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8ea:	011b      	lsls	r3, r3, #4
 800a8ec:	3348      	adds	r3, #72	; 0x48
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	18d1      	adds	r1, r2, r3
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8f6:	011b      	lsls	r3, r3, #4
 800a8f8:	4413      	add	r3, r2
 800a8fa:	3348      	adds	r3, #72	; 0x48
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	ba10      	rev	r0, r2
 800a902:	ba1c      	rev	r4, r3
 800a904:	4622      	mov	r2, r4
 800a906:	4603      	mov	r3, r0
 800a908:	6679      	str	r1, [r7, #100]	; 0x64
 800a90a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    memcpy(p, &x, sizeof(x));
 800a90e:	f107 0308 	add.w	r3, r7, #8
 800a912:	2208      	movs	r2, #8
 800a914:	4619      	mov	r1, r3
 800a916:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a918:	f006 f9db 	bl	8010cd2 <memcpy>
}
 800a91c:	bf00      	nop
                MBEDTLS_PUT_UINT64_BE(ctx->H[i][1], &ctx->H[i][1], 0);
 800a91e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a920:	3305      	adds	r3, #5
 800a922:	011b      	lsls	r3, r3, #4
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	18d1      	adds	r1, r2, r3
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a92c:	3305      	adds	r3, #5
 800a92e:	011b      	lsls	r3, r3, #4
 800a930:	4413      	add	r3, r2
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	ba10      	rev	r0, r2
 800a938:	ba1c      	rev	r4, r3
 800a93a:	4622      	mov	r2, r4
 800a93c:	4603      	mov	r3, r0
 800a93e:	6639      	str	r1, [r7, #96]	; 0x60
 800a940:	e9c7 2304 	strd	r2, r3, [r7, #16]
    memcpy(p, &x, sizeof(x));
 800a944:	f107 0310 	add.w	r3, r7, #16
 800a948:	2208      	movs	r2, #8
 800a94a:	4619      	mov	r1, r3
 800a94c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a94e:	f006 f9c0 	bl	8010cd2 <memcpy>
}
 800a952:	bf00      	nop
            for (i = MBEDTLS_GCM_HTABLE_SIZE/2; i > 0; i >>= 1) {
 800a954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a956:	105b      	asrs	r3, r3, #1
 800a958:	677b      	str	r3, [r7, #116]	; 0x74
 800a95a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dcc3      	bgt.n	800a8e8 <gcm_gen_table+0xa8>
            }
#endif

            for (i = 2; i < MBEDTLS_GCM_HTABLE_SIZE; i <<= 1) {
 800a960:	2302      	movs	r3, #2
 800a962:	677b      	str	r3, [r7, #116]	; 0x74
 800a964:	e060      	b.n	800aa28 <gcm_gen_table+0x1e8>
                for (j = 1; j < i; j++) {
 800a966:	2301      	movs	r3, #1
 800a968:	673b      	str	r3, [r7, #112]	; 0x70
 800a96a:	e056      	b.n	800aa1a <gcm_gen_table+0x1da>
                    mbedtls_xor_no_simd((unsigned char *) ctx->H[i+j],
 800a96c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a96e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a970:	4413      	add	r3, r2
 800a972:	011b      	lsls	r3, r3, #4
 800a974:	3348      	adds	r3, #72	; 0x48
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	18d1      	adds	r1, r2, r3
                                        (unsigned char *) ctx->H[i],
 800a97a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a97c:	011b      	lsls	r3, r3, #4
 800a97e:	3348      	adds	r3, #72	; 0x48
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	441a      	add	r2, r3
                                        (unsigned char *) ctx->H[j],
 800a984:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a986:	011b      	lsls	r3, r3, #4
 800a988:	3348      	adds	r3, #72	; 0x48
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	4403      	add	r3, r0
 800a98e:	65f9      	str	r1, [r7, #92]	; 0x5c
 800a990:	65ba      	str	r2, [r7, #88]	; 0x58
 800a992:	657b      	str	r3, [r7, #84]	; 0x54
 800a994:	2310      	movs	r3, #16
 800a996:	653b      	str	r3, [r7, #80]	; 0x50
    size_t i = 0;
 800a998:	2300      	movs	r3, #0
 800a99a:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (; (i + 4) <= n; i += 4) {
 800a99c:	e01e      	b.n	800a9dc <gcm_gen_table+0x19c>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800a99e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9a2:	4413      	add	r3, r2
 800a9a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9a8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a9aa:	623b      	str	r3, [r7, #32]
    return r;
 800a9ac:	6a3a      	ldr	r2, [r7, #32]
 800a9ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b2:	440b      	add	r3, r1
 800a9b4:	647b      	str	r3, [r7, #68]	; 0x44
 800a9b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9b8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800a9ba:	61fb      	str	r3, [r7, #28]
    return r;
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	4053      	eors	r3, r2
 800a9c0:	643b      	str	r3, [r7, #64]	; 0x40
        mbedtls_put_unaligned_uint32(r + i, x);
 800a9c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9c6:	4413      	add	r3, r2
 800a9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9cc:	61bb      	str	r3, [r7, #24]
 800a9ce:	69ba      	ldr	r2, [r7, #24]
    memcpy(p, &x, sizeof(x));
 800a9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d2:	601a      	str	r2, [r3, #0]
}
 800a9d4:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800a9d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9d8:	3304      	adds	r3, #4
 800a9da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9de:	3304      	adds	r3, #4
 800a9e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d2db      	bcs.n	800a99e <gcm_gen_table+0x15e>
    for (; i < n; i++) {
 800a9e6:	e010      	b.n	800aa0a <gcm_gen_table+0x1ca>
        r[i] = a[i] ^ b[i];
 800a9e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ec:	4413      	add	r3, r2
 800a9ee:	7819      	ldrb	r1, [r3, #0]
 800a9f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9f4:	4413      	add	r3, r2
 800a9f6:	781a      	ldrb	r2, [r3, #0]
 800a9f8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9fc:	4403      	add	r3, r0
 800a9fe:	404a      	eors	r2, r1
 800aa00:	b2d2      	uxtb	r2, r2
 800aa02:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800aa04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa06:	3301      	adds	r3, #1
 800aa08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d8ea      	bhi.n	800a9e8 <gcm_gen_table+0x1a8>
}
 800aa12:	bf00      	nop
                for (j = 1; j < i; j++) {
 800aa14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa16:	3301      	adds	r3, #1
 800aa18:	673b      	str	r3, [r7, #112]	; 0x70
 800aa1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800aa1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	dba4      	blt.n	800a96c <gcm_gen_table+0x12c>
            for (i = 2; i < MBEDTLS_GCM_HTABLE_SIZE; i <<= 1) {
 800aa22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa24:	005b      	lsls	r3, r3, #1
 800aa26:	677b      	str	r3, [r7, #116]	; 0x74
 800aa28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa2a:	2b0f      	cmp	r3, #15
 800aa2c:	dd9b      	ble.n	800a966 <gcm_gen_table+0x126>
                                        16);
                }
            }
    }

    return 0;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	377c      	adds	r7, #124	; 0x7c
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd90      	pop	{r4, r7, pc}

0800aa38 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey(mbedtls_gcm_context *ctx,
                       mbedtls_cipher_id_t cipher,
                       const unsigned char *key,
                       unsigned int keybits)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	607a      	str	r2, [r7, #4]
 800aa42:	603b      	str	r3, [r7, #0]
 800aa44:	460b      	mov	r3, r1
 800aa46:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800aa48:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800aa4c:	617b      	str	r3, [r7, #20]

    if (keybits != 128 && keybits != 192 && keybits != 256) {
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	2b80      	cmp	r3, #128	; 0x80
 800aa52:	d009      	beq.n	800aa68 <mbedtls_gcm_setkey+0x30>
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2bc0      	cmp	r3, #192	; 0xc0
 800aa58:	d006      	beq.n	800aa68 <mbedtls_gcm_setkey+0x30>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa60:	d002      	beq.n	800aa68 <mbedtls_gcm_setkey+0x30>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800aa62:	f06f 0313 	mvn.w	r3, #19
 800aa66:	e03a      	b.n	800aade <mbedtls_gcm_setkey+0xa6>
        return ret;
    }
#else
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values(cipher, keybits,
 800aa68:	6839      	ldr	r1, [r7, #0]
 800aa6a:	7afb      	ldrb	r3, [r7, #11]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fc fe80 	bl	8007774 <mbedtls_cipher_info_from_values>
 800aa74:	6138      	str	r0, [r7, #16]
                                                  MBEDTLS_MODE_ECB);
    if (cipher_info == NULL) {
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d102      	bne.n	800aa82 <mbedtls_gcm_setkey+0x4a>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800aa7c:	f06f 0313 	mvn.w	r3, #19
 800aa80:	e02d      	b.n	800aade <mbedtls_gcm_setkey+0xa6>
    }

    if (mbedtls_cipher_info_get_block_size(cipher_info) != 16) {
 800aa82:	6938      	ldr	r0, [r7, #16]
 800aa84:	f7ff fe2c 	bl	800a6e0 <mbedtls_cipher_info_get_block_size>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b10      	cmp	r3, #16
 800aa8c:	d002      	beq.n	800aa94 <mbedtls_gcm_setkey+0x5c>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800aa8e:	f06f 0313 	mvn.w	r3, #19
 800aa92:	e024      	b.n	800aade <mbedtls_gcm_setkey+0xa6>
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fc feb3 	bl	8007802 <mbedtls_cipher_free>

    if ((ret = mbedtls_cipher_setup(&ctx->cipher_ctx, cipher_info)) != 0) {
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6939      	ldr	r1, [r7, #16]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7fc fed7 	bl	8007854 <mbedtls_cipher_setup>
 800aaa6:	6178      	str	r0, [r7, #20]
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <mbedtls_gcm_setkey+0x7a>
        return ret;
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	e015      	b.n	800aade <mbedtls_gcm_setkey+0xa6>
    }

    if ((ret = mbedtls_cipher_setkey(&ctx->cipher_ctx, key, keybits,
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	683a      	ldr	r2, [r7, #0]
 800aab6:	2301      	movs	r3, #1
 800aab8:	6879      	ldr	r1, [r7, #4]
 800aaba:	f7fc fefd 	bl	80078b8 <mbedtls_cipher_setkey>
 800aabe:	6178      	str	r0, [r7, #20]
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d001      	beq.n	800aaca <mbedtls_gcm_setkey+0x92>
                                     MBEDTLS_ENCRYPT)) != 0) {
        return ret;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	e009      	b.n	800aade <mbedtls_gcm_setkey+0xa6>
    }
#endif

    if ((ret = gcm_gen_table(ctx)) != 0) {
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f7ff feb8 	bl	800a840 <gcm_gen_table>
 800aad0:	6178      	str	r0, [r7, #20]
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d001      	beq.n	800aadc <mbedtls_gcm_setkey+0xa4>
        return ret;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	e000      	b.n	800aade <mbedtls_gcm_setkey+0xa6>
    }

    return 0;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <gcm_mult_smalltable>:
    0xe100, 0xfd20, 0xd940, 0xc560,
    0x9180, 0x8da0, 0xa9c0, 0xb5e0
};

static void gcm_mult_smalltable(uint8_t *output, const uint8_t *x, uint64_t H[16][2])
{
 800aae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaec:	b0c6      	sub	sp, #280	; 0x118
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6478      	str	r0, [r7, #68]	; 0x44
 800aaf2:	6439      	str	r1, [r7, #64]	; 0x40
 800aaf4:	63fa      	str	r2, [r7, #60]	; 0x3c
    int i = 0;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    unsigned char lo, hi, rem;
    uint64_t u64z[2];
    const uint64_t *pu64z = NULL;
 800aafc:	2300      	movs	r3, #0
 800aafe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    uint8_t *u8z = (uint8_t *) u64z;
 800ab02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ab06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    lo = x[15] & 0xf;
 800ab0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab0c:	330f      	adds	r3, #15
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	f003 030f 	and.w	r3, r3, #15
 800ab14:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    hi = (x[15] >> 4) & 0xf;
 800ab18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab1a:	330f      	adds	r3, #15
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	091b      	lsrs	r3, r3, #4
 800ab20:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

    pu64z = H[lo];
 800ab24:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800ab28:	011a      	lsls	r2, r3, #4
 800ab2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    rem = (unsigned char) pu64z[1] & 0xf;
 800ab32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ab36:	3308      	adds	r3, #8
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	b2d3      	uxtb	r3, r2
 800ab3e:	f003 030f 	and.w	r3, r3, #15
 800ab42:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    u64z[1] = (pu64z[0] << 60) | (pu64z[1] >> 4);
 800ab46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f04f 0400 	mov.w	r4, #0
 800ab52:	f04f 0500 	mov.w	r5, #0
 800ab56:	0715      	lsls	r5, r2, #28
 800ab58:	2400      	movs	r4, #0
 800ab5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ab5e:	3308      	adds	r3, #8
 800ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab64:	f04f 0000 	mov.w	r0, #0
 800ab68:	f04f 0100 	mov.w	r1, #0
 800ab6c:	0910      	lsrs	r0, r2, #4
 800ab6e:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800ab72:	0919      	lsrs	r1, r3, #4
 800ab74:	ea44 0800 	orr.w	r8, r4, r0
 800ab78:	ea45 0901 	orr.w	r9, r5, r1
 800ab7c:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
    u64z[0] = (pu64z[0] >> 4);
 800ab80:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ab84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab88:	f04f 0000 	mov.w	r0, #0
 800ab8c:	f04f 0100 	mov.w	r1, #0
 800ab90:	0910      	lsrs	r0, r2, #4
 800ab92:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800ab96:	0919      	lsrs	r1, r3, #4
 800ab98:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
    u64z[0] ^= (uint64_t) last4[rem] << 48;
 800ab9c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aba0:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 800aba4:	4bd7      	ldr	r3, [pc, #860]	; (800af04 <gcm_mult_smalltable+0x41c>)
 800aba6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800abaa:	b29b      	uxth	r3, r3
 800abac:	2200      	movs	r2, #0
 800abae:	633b      	str	r3, [r7, #48]	; 0x30
 800abb0:	637a      	str	r2, [r7, #52]	; 0x34
 800abb2:	f04f 0200 	mov.w	r2, #0
 800abb6:	f04f 0300 	mov.w	r3, #0
 800abba:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800abbc:	0423      	lsls	r3, r4, #16
 800abbe:	2200      	movs	r2, #0
 800abc0:	ea80 0a02 	eor.w	sl, r0, r2
 800abc4:	ea81 0b03 	eor.w	fp, r1, r3
 800abc8:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
    mbedtls_xor_no_simd(u8z, u8z, (uint8_t *) H[hi], 16);
 800abcc:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800abd0:	011b      	lsls	r3, r3, #4
 800abd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800abd4:	441a      	add	r2, r3
 800abd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800abda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800abde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800abe2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800abe6:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800abea:	2310      	movs	r3, #16
 800abec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    size_t i = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    for (; (i + 4) <= n; i += 4) {
 800abf6:	e02e      	b.n	800ac56 <gcm_mult_smalltable+0x16e>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800abf8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800abfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac00:	4413      	add	r3, r2
 800ac02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac0a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800ac0c:	657b      	str	r3, [r7, #84]	; 0x54
    return r;
 800ac0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac10:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800ac14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac18:	4413      	add	r3, r2
 800ac1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ac22:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800ac24:	653b      	str	r3, [r7, #80]	; 0x50
    return r;
 800ac26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac28:	404b      	eors	r3, r1
 800ac2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
        mbedtls_put_unaligned_uint32(r + i, x);
 800ac2e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800ac32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac36:	4413      	add	r3, r2
 800ac38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    memcpy(p, &x, sizeof(x));
 800ac44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac48:	601a      	str	r2, [r3, #0]
}
 800ac4a:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800ac4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac50:	3304      	adds	r3, #4
 800ac52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac5a:	3304      	adds	r3, #4
 800ac5c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d2c9      	bcs.n	800abf8 <gcm_mult_smalltable+0x110>
    for (; i < n; i++) {
 800ac64:	e019      	b.n	800ac9a <gcm_mult_smalltable+0x1b2>
        r[i] = a[i] ^ b[i];
 800ac66:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800ac6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac6e:	4413      	add	r3, r2
 800ac70:	7818      	ldrb	r0, [r3, #0]
 800ac72:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800ac76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac7a:	4413      	add	r3, r2
 800ac7c:	7819      	ldrb	r1, [r3, #0]
 800ac7e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800ac82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac86:	441a      	add	r2, r3
 800ac88:	ea80 0301 	eor.w	r3, r0, r1
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	7013      	strb	r3, [r2, #0]
    for (; i < n; i++) {
 800ac90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac94:	3301      	adds	r3, #1
 800ac96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac9a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800ac9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d8df      	bhi.n	800ac66 <gcm_mult_smalltable+0x17e>
}
 800aca6:	bf00      	nop

    for (i = 14; i >= 0; i--) {
 800aca8:	230e      	movs	r3, #14
 800acaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800acae:	e188      	b.n	800afc2 <gcm_mult_smalltable+0x4da>
        lo = x[i] & 0xf;
 800acb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acb6:	4413      	add	r3, r2
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	f003 030f 	and.w	r3, r3, #15
 800acbe:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        hi = (x[i] >> 4) & 0xf;
 800acc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acc8:	4413      	add	r3, r2
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	091b      	lsrs	r3, r3, #4
 800acce:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

        rem = (unsigned char) u64z[1] & 0xf;
 800acd2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800acd6:	b2d3      	uxtb	r3, r2
 800acd8:	f003 030f 	and.w	r3, r3, #15
 800acdc:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
        u64z[1] = (u64z[0] << 60) | (u64z[1] >> 4);
 800ace0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800ace4:	f04f 0400 	mov.w	r4, #0
 800ace8:	f04f 0500 	mov.w	r5, #0
 800acec:	0715      	lsls	r5, r2, #28
 800acee:	2400      	movs	r4, #0
 800acf0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800acf4:	f04f 0000 	mov.w	r0, #0
 800acf8:	f04f 0100 	mov.w	r1, #0
 800acfc:	0910      	lsrs	r0, r2, #4
 800acfe:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800ad02:	0919      	lsrs	r1, r3, #4
 800ad04:	ea44 0300 	orr.w	r3, r4, r0
 800ad08:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad0a:	ea45 0301 	orr.w	r3, r5, r1
 800ad0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad10:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800ad14:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        u64z[0] = (u64z[0] >> 4);
 800ad18:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800ad1c:	f04f 0000 	mov.w	r0, #0
 800ad20:	f04f 0100 	mov.w	r1, #0
 800ad24:	0910      	lsrs	r0, r2, #4
 800ad26:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800ad2a:	0919      	lsrs	r1, r3, #4
 800ad2c:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
        u64z[0] ^= (uint64_t) last4[rem] << 48;
 800ad30:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ad34:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 800ad38:	4b72      	ldr	r3, [pc, #456]	; (800af04 <gcm_mult_smalltable+0x41c>)
 800ad3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	2200      	movs	r2, #0
 800ad42:	623b      	str	r3, [r7, #32]
 800ad44:	627a      	str	r2, [r7, #36]	; 0x24
 800ad46:	f04f 0200 	mov.w	r2, #0
 800ad4a:	f04f 0300 	mov.w	r3, #0
 800ad4e:	6a3c      	ldr	r4, [r7, #32]
 800ad50:	0423      	lsls	r3, r4, #16
 800ad52:	2200      	movs	r2, #0
 800ad54:	ea80 0402 	eor.w	r4, r0, r2
 800ad58:	61bc      	str	r4, [r7, #24]
 800ad5a:	404b      	eors	r3, r1
 800ad5c:	61fb      	str	r3, [r7, #28]
 800ad5e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800ad62:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        mbedtls_xor_no_simd(u8z, u8z, (uint8_t *) H[lo], 16);
 800ad66:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800ad6a:	011b      	lsls	r3, r3, #4
 800ad6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad6e:	441a      	add	r2, r3
 800ad70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ad74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ad78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ad7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad80:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800ad84:	2310      	movs	r3, #16
 800ad86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    size_t i = 0;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (; (i + 4) <= n; i += 4) {
 800ad90:	e02e      	b.n	800adf0 <gcm_mult_smalltable+0x308>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800ad92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ad96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad9a:	4413      	add	r3, r2
 800ad9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ada0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ada4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800ada6:	66fb      	str	r3, [r7, #108]	; 0x6c
    return r;
 800ada8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800adaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800adae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adb2:	4413      	add	r3, r2
 800adb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800adb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800adbc:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800adbe:	66bb      	str	r3, [r7, #104]	; 0x68
    return r;
 800adc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adc2:	404b      	eors	r3, r1
 800adc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        mbedtls_put_unaligned_uint32(r + i, x);
 800adc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800adcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800add0:	4413      	add	r3, r2
 800add2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800add6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800adda:	667b      	str	r3, [r7, #100]	; 0x64
 800addc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    memcpy(p, &x, sizeof(x));
 800adde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ade2:	601a      	str	r2, [r3, #0]
}
 800ade4:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800ade6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adea:	3304      	adds	r3, #4
 800adec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800adf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adf4:	3304      	adds	r3, #4
 800adf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d2c9      	bcs.n	800ad92 <gcm_mult_smalltable+0x2aa>
    for (; i < n; i++) {
 800adfe:	e019      	b.n	800ae34 <gcm_mult_smalltable+0x34c>
        r[i] = a[i] ^ b[i];
 800ae00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ae04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae08:	4413      	add	r3, r2
 800ae0a:	7818      	ldrb	r0, [r3, #0]
 800ae0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ae10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae14:	4413      	add	r3, r2
 800ae16:	7819      	ldrb	r1, [r3, #0]
 800ae18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ae1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae20:	441a      	add	r2, r3
 800ae22:	ea80 0301 	eor.w	r3, r0, r1
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	7013      	strb	r3, [r2, #0]
    for (; i < n; i++) {
 800ae2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae2e:	3301      	adds	r3, #1
 800ae30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ae38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d8df      	bhi.n	800ae00 <gcm_mult_smalltable+0x318>
}
 800ae40:	bf00      	nop

        rem = (unsigned char) u64z[1] & 0xf;
 800ae42:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ae46:	b2d3      	uxtb	r3, r2
 800ae48:	f003 030f 	and.w	r3, r3, #15
 800ae4c:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
        u64z[1] = (u64z[0] << 60) | (u64z[1] >> 4);
 800ae50:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800ae54:	f04f 0400 	mov.w	r4, #0
 800ae58:	f04f 0500 	mov.w	r5, #0
 800ae5c:	0715      	lsls	r5, r2, #28
 800ae5e:	2400      	movs	r4, #0
 800ae60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ae64:	f04f 0000 	mov.w	r0, #0
 800ae68:	f04f 0100 	mov.w	r1, #0
 800ae6c:	0910      	lsrs	r0, r2, #4
 800ae6e:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800ae72:	0919      	lsrs	r1, r3, #4
 800ae74:	ea44 0300 	orr.w	r3, r4, r0
 800ae78:	613b      	str	r3, [r7, #16]
 800ae7a:	ea45 0301 	orr.w	r3, r5, r1
 800ae7e:	617b      	str	r3, [r7, #20]
 800ae80:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ae84:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        u64z[0] = (u64z[0] >> 4);
 800ae88:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800ae8c:	f04f 0000 	mov.w	r0, #0
 800ae90:	f04f 0100 	mov.w	r1, #0
 800ae94:	0910      	lsrs	r0, r2, #4
 800ae96:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800ae9a:	0919      	lsrs	r1, r3, #4
 800ae9c:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
        u64z[0] ^= (uint64_t) last4[rem] << 48;
 800aea0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aea4:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 800aea8:	4b16      	ldr	r3, [pc, #88]	; (800af04 <gcm_mult_smalltable+0x41c>)
 800aeaa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	60bb      	str	r3, [r7, #8]
 800aeb4:	60fa      	str	r2, [r7, #12]
 800aeb6:	f04f 0200 	mov.w	r2, #0
 800aeba:	f04f 0300 	mov.w	r3, #0
 800aebe:	68bc      	ldr	r4, [r7, #8]
 800aec0:	0423      	lsls	r3, r4, #16
 800aec2:	2200      	movs	r2, #0
 800aec4:	ea80 0402 	eor.w	r4, r0, r2
 800aec8:	603c      	str	r4, [r7, #0]
 800aeca:	404b      	eors	r3, r1
 800aecc:	607b      	str	r3, [r7, #4]
 800aece:	e9d7 3400 	ldrd	r3, r4, [r7]
 800aed2:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        mbedtls_xor_no_simd(u8z, u8z, (uint8_t *) H[hi], 16);
 800aed6:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800aeda:	011b      	lsls	r3, r3, #4
 800aedc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aede:	441a      	add	r2, r3
 800aee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aeec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aef0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800aef4:	2310      	movs	r3, #16
 800aef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    size_t i = 0;
 800aefa:	2300      	movs	r3, #0
 800aefc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    for (; (i + 4) <= n; i += 4) {
 800af00:	e031      	b.n	800af66 <gcm_mult_smalltable+0x47e>
 800af02:	bf00      	nop
 800af04:	080138cc 	.word	0x080138cc
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800af08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800af0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800af10:	4413      	add	r3, r2
 800af12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af1a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800af1c:	663b      	str	r3, [r7, #96]	; 0x60
    return r;
 800af1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800af20:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800af24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800af28:	4413      	add	r3, r2
 800af2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af32:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800af34:	65fb      	str	r3, [r7, #92]	; 0x5c
    return r;
 800af36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af38:	404b      	eors	r3, r1
 800af3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        mbedtls_put_unaligned_uint32(r + i, x);
 800af3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800af42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800af46:	4413      	add	r3, r2
 800af48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af50:	65bb      	str	r3, [r7, #88]	; 0x58
 800af52:	6dba      	ldr	r2, [r7, #88]	; 0x58
    memcpy(p, &x, sizeof(x));
 800af54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af58:	601a      	str	r2, [r3, #0]
}
 800af5a:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800af5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800af60:	3304      	adds	r3, #4
 800af62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800af6a:	3304      	adds	r3, #4
 800af6c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800af70:	429a      	cmp	r2, r3
 800af72:	d2c9      	bcs.n	800af08 <gcm_mult_smalltable+0x420>
    for (; i < n; i++) {
 800af74:	e019      	b.n	800afaa <gcm_mult_smalltable+0x4c2>
        r[i] = a[i] ^ b[i];
 800af76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800af7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800af7e:	4413      	add	r3, r2
 800af80:	7818      	ldrb	r0, [r3, #0]
 800af82:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800af86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800af8a:	4413      	add	r3, r2
 800af8c:	7819      	ldrb	r1, [r3, #0]
 800af8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800af92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800af96:	441a      	add	r2, r3
 800af98:	ea80 0301 	eor.w	r3, r0, r1
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	7013      	strb	r3, [r2, #0]
    for (; i < n; i++) {
 800afa0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800afa4:	3301      	adds	r3, #1
 800afa6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afaa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800afae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d8df      	bhi.n	800af76 <gcm_mult_smalltable+0x48e>
}
 800afb6:	bf00      	nop
    for (i = 14; i >= 0; i--) {
 800afb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afbc:	3b01      	subs	r3, #1
 800afbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800afc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f6bf ae72 	bge.w	800acb0 <gcm_mult_smalltable+0x1c8>
    }

    MBEDTLS_PUT_UINT64_BE(u64z[0], output, 0);
 800afcc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800afd0:	ba11      	rev	r1, r2
 800afd2:	ba18      	rev	r0, r3
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800afda:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800afde:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    memcpy(p, &x, sizeof(x));
 800afe2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800afe6:	2208      	movs	r2, #8
 800afe8:	4619      	mov	r1, r3
 800afea:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800afee:	f005 fe70 	bl	8010cd2 <memcpy>
}
 800aff2:	bf00      	nop
    MBEDTLS_PUT_UINT64_BE(u64z[1], output, 8);
 800aff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aff6:	f103 0108 	add.w	r1, r3, #8
 800affa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800affe:	ba10      	rev	r0, r2
 800b000:	ba1c      	rev	r4, r3
 800b002:	4622      	mov	r2, r4
 800b004:	4603      	mov	r3, r0
 800b006:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800b00a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    memcpy(p, &x, sizeof(x));
 800b00e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b012:	2208      	movs	r2, #8
 800b014:	4619      	mov	r1, r3
 800b016:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800b01a:	f005 fe5a 	bl	8010cd2 <memcpy>
}
 800b01e:	bf00      	nop
}
 800b020:	bf00      	nop
 800b022:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b026:	46bd      	mov	sp, r7
 800b028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b02c <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult(mbedtls_gcm_context *ctx, const unsigned char x[16],
                     unsigned char output[16])
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
    switch (ctx->acceleration) {
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d108      	bne.n	800b054 <gcm_mult+0x28>
        case MBEDTLS_GCM_ACC_LARGETABLE:
            gcm_mult_largetable(output, x, ctx->H);
            break;
#else
        case MBEDTLS_GCM_ACC_SMALLTABLE:
            gcm_mult_smalltable(output, x, ctx->H);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3348      	adds	r3, #72	; 0x48
 800b046:	461a      	mov	r2, r3
 800b048:	68b9      	ldr	r1, [r7, #8]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7ff fd4c 	bl	800aae8 <gcm_mult_smalltable>
            break;
 800b050:	bf00      	nop
#endif
    }

    return;
 800b052:	bf00      	nop
 800b054:	bf00      	nop
}
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <gcm_incr>:
    return 0;
}

/* Increment the counter. */
static void gcm_incr(unsigned char y[16])
{
 800b05c:	b480      	push	{r7}
 800b05e:	b089      	sub	sp, #36	; 0x24
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
    uint32_t x = MBEDTLS_GET_UINT32_BE(y, 12);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	330c      	adds	r3, #12
 800b068:	61bb      	str	r3, [r7, #24]
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b06e:	60fb      	str	r3, [r7, #12]
    return r;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	ba1b      	rev	r3, r3
 800b074:	61fb      	str	r3, [r7, #28]
    x++;
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	3301      	adds	r3, #1
 800b07a:	61fb      	str	r3, [r7, #28]
    MBEDTLS_PUT_UINT32_BE(x, y, 12);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f103 020c 	add.w	r2, r3, #12
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	ba1b      	rev	r3, r3
 800b086:	617a      	str	r2, [r7, #20]
 800b088:	613b      	str	r3, [r7, #16]
 800b08a:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	601a      	str	r2, [r3, #0]
}
 800b090:	bf00      	nop
}
 800b092:	bf00      	nop
 800b094:	3724      	adds	r7, #36	; 0x24
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr

0800b09e <gcm_mask>:
static int gcm_mask(mbedtls_gcm_context *ctx,
                    unsigned char ectr[16],
                    size_t offset, size_t use_len,
                    const unsigned char *input,
                    unsigned char *output)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b0ac      	sub	sp, #176	; 0xb0
 800b0a2:	af02      	add	r7, sp, #8
 800b0a4:	60f8      	str	r0, [r7, #12]
 800b0a6:	60b9      	str	r1, [r7, #8]
 800b0a8:	607a      	str	r2, [r7, #4]
 800b0aa:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800b0ac:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800b0b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

#if defined(MBEDTLS_BLOCK_CIPHER_C)
    ret = mbedtls_block_cipher_encrypt(&ctx->block_cipher_ctx, ctx->y, ectr);
#else
    size_t olen = 0;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	637b      	str	r3, [r7, #52]	; 0x34
    ret = mbedtls_cipher_update(&ctx->cipher_ctx, ctx->y, 16, ectr, &olen);
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800b0c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2210      	movs	r2, #16
 800b0ca:	f7fc fc6d 	bl	80079a8 <mbedtls_cipher_update>
 800b0ce:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
#endif
    if (ret != 0) {
 800b0d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d006      	beq.n	800b0e8 <gcm_mask+0x4a>
        mbedtls_platform_zeroize(ectr, 16);
 800b0da:	2110      	movs	r1, #16
 800b0dc:	68b8      	ldr	r0, [r7, #8]
 800b0de:	f000 faeb 	bl	800b6b8 <mbedtls_platform_zeroize>
        return ret;
 800b0e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b0e6:	e113      	b.n	800b310 <gcm_mask+0x272>
    }

    if (ctx->mode == MBEDTLS_GCM_DECRYPT) {
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d16f      	bne.n	800b1d2 <gcm_mask+0x134>
        mbedtls_xor(ctx->buf + offset, ctx->buf + offset, input, use_len);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	441a      	add	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	440b      	add	r3, r1
 800b106:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800b10a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b10e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b112:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    size_t i = 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    for (; (i + 4) <= n; i += 4) {
 800b122:	e02e      	b.n	800b182 <gcm_mask+0xe4>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800b124:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b128:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b12c:	4413      	add	r3, r2
 800b12e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b136:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b138:	61bb      	str	r3, [r7, #24]
    return r;
 800b13a:	69ba      	ldr	r2, [r7, #24]
 800b13c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800b140:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b144:	440b      	add	r3, r1
 800b146:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b14a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b14e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b150:	617b      	str	r3, [r7, #20]
    return r;
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	4053      	eors	r3, r2
 800b156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        mbedtls_put_unaligned_uint32(r + i, x);
 800b15a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b15e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b162:	4413      	add	r3, r2
 800b164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b16c:	613b      	str	r3, [r7, #16]
 800b16e:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 800b170:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b174:	601a      	str	r2, [r3, #0]
}
 800b176:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800b178:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b17c:	3304      	adds	r3, #4
 800b17e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b182:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b186:	3304      	adds	r3, #4
 800b188:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d2c9      	bcs.n	800b124 <gcm_mask+0x86>
    for (; i < n; i++) {
 800b190:	e018      	b.n	800b1c4 <gcm_mask+0x126>
        r[i] = a[i] ^ b[i];
 800b192:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b196:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b19a:	4413      	add	r3, r2
 800b19c:	7819      	ldrb	r1, [r3, #0]
 800b19e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b1a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1a6:	4413      	add	r3, r2
 800b1a8:	781a      	ldrb	r2, [r3, #0]
 800b1aa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800b1ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1b2:	4403      	add	r3, r0
 800b1b4:	404a      	eors	r2, r1
 800b1b6:	b2d2      	uxtb	r2, r2
 800b1b8:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800b1ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1be:	3301      	adds	r3, #1
 800b1c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b1c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b1c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d8e0      	bhi.n	800b192 <gcm_mask+0xf4>
}
 800b1d0:	bf00      	nop
    }
    mbedtls_xor(output, ectr + offset, input, use_len);
 800b1d2:	68ba      	ldr	r2, [r7, #8]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b1dc:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b1de:	67bb      	str	r3, [r7, #120]	; 0x78
 800b1e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b1e4:	677b      	str	r3, [r7, #116]	; 0x74
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	673b      	str	r3, [r7, #112]	; 0x70
    size_t i = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (; (i + 4) <= n; i += 4) {
 800b1ee:	e01e      	b.n	800b22e <gcm_mask+0x190>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800b1f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b1f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1f4:	4413      	add	r3, r2
 800b1f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b1fa:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b1fc:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 800b1fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b200:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b204:	440b      	add	r3, r1
 800b206:	667b      	str	r3, [r7, #100]	; 0x64
 800b208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b20a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b20c:	623b      	str	r3, [r7, #32]
    return r;
 800b20e:	6a3b      	ldr	r3, [r7, #32]
 800b210:	4053      	eors	r3, r2
 800b212:	663b      	str	r3, [r7, #96]	; 0x60
        mbedtls_put_unaligned_uint32(r + i, x);
 800b214:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b218:	4413      	add	r3, r2
 800b21a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b21c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b21e:	61fb      	str	r3, [r7, #28]
 800b220:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 800b222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b224:	601a      	str	r2, [r3, #0]
}
 800b226:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800b228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b22a:	3304      	adds	r3, #4
 800b22c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b22e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b230:	3304      	adds	r3, #4
 800b232:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b234:	429a      	cmp	r2, r3
 800b236:	d2db      	bcs.n	800b1f0 <gcm_mask+0x152>
    for (; i < n; i++) {
 800b238:	e010      	b.n	800b25c <gcm_mask+0x1be>
        r[i] = a[i] ^ b[i];
 800b23a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b23c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b23e:	4413      	add	r3, r2
 800b240:	7819      	ldrb	r1, [r3, #0]
 800b242:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b246:	4413      	add	r3, r2
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800b24c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b24e:	4403      	add	r3, r0
 800b250:	404a      	eors	r2, r1
 800b252:	b2d2      	uxtb	r2, r2
 800b254:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800b256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b258:	3301      	adds	r3, #1
 800b25a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b25c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b25e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b260:	429a      	cmp	r2, r3
 800b262:	d8ea      	bhi.n	800b23a <gcm_mask+0x19c>
}
 800b264:	bf00      	nop
    if (ctx->mode == MBEDTLS_GCM_ENCRYPT) {
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d14e      	bne.n	800b30e <gcm_mask+0x270>
        mbedtls_xor(ctx->buf + offset, ctx->buf + offset, output, use_len);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	441a      	add	r2, r3
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	440b      	add	r3, r1
 800b284:	65ba      	str	r2, [r7, #88]	; 0x58
 800b286:	657b      	str	r3, [r7, #84]	; 0x54
 800b288:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b28c:	653b      	str	r3, [r7, #80]	; 0x50
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t i = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	64bb      	str	r3, [r7, #72]	; 0x48
    for (; (i + 4) <= n; i += 4) {
 800b296:	e01e      	b.n	800b2d6 <gcm_mask+0x238>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 800b298:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b29a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b29c:	4413      	add	r3, r2
 800b29e:	647b      	str	r3, [r7, #68]	; 0x44
 800b2a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2a2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b2a4:	633b      	str	r3, [r7, #48]	; 0x30
    return r;
 800b2a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2ac:	440b      	add	r3, r1
 800b2ae:	643b      	str	r3, [r7, #64]	; 0x40
 800b2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2b2:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 800b2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b8:	4053      	eors	r3, r2
 800b2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        mbedtls_put_unaligned_uint32(r + i, x);
 800b2bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2c0:	4413      	add	r3, r2
 800b2c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    memcpy(p, &x, sizeof(x));
 800b2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2cc:	601a      	str	r2, [r3, #0]
}
 800b2ce:	bf00      	nop
    for (; (i + 4) <= n; i += 4) {
 800b2d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2d2:	3304      	adds	r3, #4
 800b2d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2d8:	3304      	adds	r3, #4
 800b2da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d2db      	bcs.n	800b298 <gcm_mask+0x1fa>
    for (; i < n; i++) {
 800b2e0:	e010      	b.n	800b304 <gcm_mask+0x266>
        r[i] = a[i] ^ b[i];
 800b2e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2e6:	4413      	add	r3, r2
 800b2e8:	7819      	ldrb	r1, [r3, #0]
 800b2ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2ee:	4413      	add	r3, r2
 800b2f0:	781a      	ldrb	r2, [r3, #0]
 800b2f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b2f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2f6:	4403      	add	r3, r0
 800b2f8:	404a      	eors	r2, r1
 800b2fa:	b2d2      	uxtb	r2, r2
 800b2fc:	701a      	strb	r2, [r3, #0]
    for (; i < n; i++) {
 800b2fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b300:	3301      	adds	r3, #1
 800b302:	64bb      	str	r3, [r7, #72]	; 0x48
 800b304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b308:	429a      	cmp	r2, r3
 800b30a:	d8ea      	bhi.n	800b2e2 <gcm_mask+0x244>
}
 800b30c:	bf00      	nop
    }

    return 0;
 800b30e:	2300      	movs	r3, #0
}
 800b310:	4618      	mov	r0, r3
 800b312:	37a8      	adds	r7, #168	; 0xa8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <mbedtls_gcm_update>:

int mbedtls_gcm_update(mbedtls_gcm_context *ctx,
                       const unsigned char *input, size_t input_length,
                       unsigned char *output, size_t output_size,
                       size_t *output_length)
{
 800b318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b31c:	b09c      	sub	sp, #112	; 0x70
 800b31e:	af02      	add	r7, sp, #8
 800b320:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b322:	63b9      	str	r1, [r7, #56]	; 0x38
 800b324:	637a      	str	r2, [r7, #52]	; 0x34
 800b326:	633b      	str	r3, [r7, #48]	; 0x30
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800b328:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800b32c:	65bb      	str	r3, [r7, #88]	; 0x58
    const unsigned char *p = input;
 800b32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b330:	667b      	str	r3, [r7, #100]	; 0x64
    unsigned char *out_p = output;
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	663b      	str	r3, [r7, #96]	; 0x60
    size_t offset;
    unsigned char ectr[16] = { 0 };
 800b336:	2300      	movs	r3, #0
 800b338:	647b      	str	r3, [r7, #68]	; 0x44
 800b33a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b33e:	2300      	movs	r3, #0
 800b340:	6013      	str	r3, [r2, #0]
 800b342:	6053      	str	r3, [r2, #4]
 800b344:	6093      	str	r3, [r2, #8]

    if (output_size < input_length) {
 800b346:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d202      	bcs.n	800b356 <mbedtls_gcm_update+0x3e>
        return MBEDTLS_ERR_GCM_BUFFER_TOO_SMALL;
 800b350:	f06f 0315 	mvn.w	r3, #21
 800b354:	e113      	b.n	800b57e <mbedtls_gcm_update+0x266>
    }
    *output_length = input_length;
 800b356:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35c:	6013      	str	r3, [r2, #0]

    /* Exit early if input_length==0 so that we don't do any pointer arithmetic
     * on a potentially null pointer.
     * Returning early also means that the last partial block of AD remains
     * untouched for mbedtls_gcm_finish */
    if (input_length == 0) {
 800b35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b360:	2b00      	cmp	r3, #0
 800b362:	d101      	bne.n	800b368 <mbedtls_gcm_update+0x50>
        return 0;
 800b364:	2300      	movs	r3, #0
 800b366:	e10a      	b.n	800b57e <mbedtls_gcm_update+0x266>
    }

    if (output > input && (size_t) (output - input) < input_length) {
 800b368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d909      	bls.n	800b384 <mbedtls_gcm_update+0x6c>
 800b370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	461a      	mov	r2, r3
 800b378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d902      	bls.n	800b384 <mbedtls_gcm_update+0x6c>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800b37e:	f06f 0313 	mvn.w	r3, #19
 800b382:	e0fc      	b.n	800b57e <mbedtls_gcm_update+0x266>
    }

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if (ctx->len + input_length < ctx->len ||
 800b384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b386:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800b38a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b38c:	2000      	movs	r0, #0
 800b38e:	62b9      	str	r1, [r7, #40]	; 0x28
 800b390:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b394:	1854      	adds	r4, r2, r1
 800b396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b398:	eb43 0101 	adc.w	r1, r3, r1
 800b39c:	460d      	mov	r5, r1
 800b39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a0:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800b3a4:	4294      	cmp	r4, r2
 800b3a6:	eb75 0303 	sbcs.w	r3, r5, r3
 800b3aa:	d313      	bcc.n	800b3d4 <mbedtls_gcm_update+0xbc>
        (uint64_t) ctx->len + input_length > 0xFFFFFFFE0ull) {
 800b3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ae:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800b3b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	6239      	str	r1, [r7, #32]
 800b3b8:	6278      	str	r0, [r7, #36]	; 0x24
 800b3ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800b3be:	4621      	mov	r1, r4
 800b3c0:	eb12 0801 	adds.w	r8, r2, r1
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	eb43 0901 	adc.w	r9, r3, r1
    if (ctx->len + input_length < ctx->len ||
 800b3ca:	f118 0f1f 	cmn.w	r8, #31
 800b3ce:	f179 030f 	sbcs.w	r3, r9, #15
 800b3d2:	d302      	bcc.n	800b3da <mbedtls_gcm_update+0xc2>
        return MBEDTLS_ERR_GCM_BAD_INPUT;
 800b3d4:	f06f 0313 	mvn.w	r3, #19
 800b3d8:	e0d1      	b.n	800b57e <mbedtls_gcm_update+0x266>
    }

    if (ctx->len == 0 && ctx->add_len % 16 != 0) {
 800b3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3dc:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	d113      	bne.n	800b40c <mbedtls_gcm_update+0xf4>
 800b3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e6:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800b3ea:	f002 0a0f 	and.w	sl, r2, #15
 800b3ee:	f04f 0b00 	mov.w	fp, #0
 800b3f2:	ea5a 030b 	orrs.w	r3, sl, fp
 800b3f6:	d009      	beq.n	800b40c <mbedtls_gcm_update+0xf4>
        gcm_mult(ctx, ctx->buf, ctx->buf);
 800b3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3fa:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800b3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b400:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800b404:	461a      	mov	r2, r3
 800b406:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b408:	f7ff fe10 	bl	800b02c <gcm_mult>
    }

    offset = ctx->len % 16;
 800b40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b40e:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800b412:	4613      	mov	r3, r2
 800b414:	f003 030f 	and.w	r3, r3, #15
 800b418:	657b      	str	r3, [r7, #84]	; 0x54
    if (offset != 0) {
 800b41a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d04a      	beq.n	800b4b6 <mbedtls_gcm_update+0x19e>
        size_t use_len = 16 - offset;
 800b420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b422:	f1c3 0310 	rsb	r3, r3, #16
 800b426:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (use_len > input_length) {
 800b428:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d901      	bls.n	800b434 <mbedtls_gcm_update+0x11c>
            use_len = input_length;
 800b430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b432:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        if ((ret = gcm_mask(ctx, ectr, offset, use_len, p, out_p)) != 0) {
 800b434:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800b438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b43a:	9301      	str	r3, [sp, #4]
 800b43c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b442:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b444:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b446:	f7ff fe2a 	bl	800b09e <gcm_mask>
 800b44a:	65b8      	str	r0, [r7, #88]	; 0x58
 800b44c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <mbedtls_gcm_update+0x13e>
            return ret;
 800b452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b454:	e093      	b.n	800b57e <mbedtls_gcm_update+0x266>
        }

        if (offset + use_len == 16) {
 800b456:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b45a:	4413      	add	r3, r2
 800b45c:	2b10      	cmp	r3, #16
 800b45e:	d109      	bne.n	800b474 <mbedtls_gcm_update+0x15c>
            gcm_mult(ctx, ctx->buf, ctx->buf);
 800b460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b462:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800b466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b468:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800b46c:	461a      	mov	r2, r3
 800b46e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b470:	f7ff fddc 	bl	800b02c <gcm_mult>
        }

        ctx->len += use_len;
 800b474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b476:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800b47a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b47c:	2000      	movs	r0, #0
 800b47e:	61b9      	str	r1, [r7, #24]
 800b480:	61f8      	str	r0, [r7, #28]
 800b482:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800b486:	4621      	mov	r1, r4
 800b488:	1851      	adds	r1, r2, r1
 800b48a:	6139      	str	r1, [r7, #16]
 800b48c:	4629      	mov	r1, r5
 800b48e:	eb43 0101 	adc.w	r1, r3, r1
 800b492:	6179      	str	r1, [r7, #20]
 800b494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b496:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b49a:	e9c3 1252 	strd	r1, r2, [r3, #328]	; 0x148
        input_length -= use_len;
 800b49e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	637b      	str	r3, [r7, #52]	; 0x34
        p += use_len;
 800b4a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b4a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4aa:	4413      	add	r3, r2
 800b4ac:	667b      	str	r3, [r7, #100]	; 0x64
        out_p += use_len;
 800b4ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b4b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4b2:	4413      	add	r3, r2
 800b4b4:	663b      	str	r3, [r7, #96]	; 0x60
    }

    ctx->len += input_length;
 800b4b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b8:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800b4bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b4be:	2000      	movs	r0, #0
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	1851      	adds	r1, r2, r1
 800b4cc:	6039      	str	r1, [r7, #0]
 800b4ce:	4629      	mov	r1, r5
 800b4d0:	eb43 0101 	adc.w	r1, r3, r1
 800b4d4:	6079      	str	r1, [r7, #4]
 800b4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b4dc:	e9c3 1252 	strd	r1, r2, [r3, #328]	; 0x148

    while (input_length >= 16) {
 800b4e0:	e029      	b.n	800b536 <mbedtls_gcm_update+0x21e>
        gcm_incr(ctx->y);
 800b4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7ff fdb7 	bl	800b05c <gcm_incr>
        if ((ret = gcm_mask(ctx, ectr, 0, 16, p, out_p)) != 0) {
 800b4ee:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800b4f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4f4:	9301      	str	r3, [sp, #4]
 800b4f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4f8:	9300      	str	r3, [sp, #0]
 800b4fa:	2310      	movs	r3, #16
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b500:	f7ff fdcd 	bl	800b09e <gcm_mask>
 800b504:	65b8      	str	r0, [r7, #88]	; 0x58
 800b506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <mbedtls_gcm_update+0x1f8>
            return ret;
 800b50c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b50e:	e036      	b.n	800b57e <mbedtls_gcm_update+0x266>
        }

        gcm_mult(ctx, ctx->buf, ctx->buf);
 800b510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b512:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800b516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b518:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800b51c:	461a      	mov	r2, r3
 800b51e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b520:	f7ff fd84 	bl	800b02c <gcm_mult>

        input_length -= 16;
 800b524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b526:	3b10      	subs	r3, #16
 800b528:	637b      	str	r3, [r7, #52]	; 0x34
        p += 16;
 800b52a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b52c:	3310      	adds	r3, #16
 800b52e:	667b      	str	r3, [r7, #100]	; 0x64
        out_p += 16;
 800b530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b532:	3310      	adds	r3, #16
 800b534:	663b      	str	r3, [r7, #96]	; 0x60
    while (input_length >= 16) {
 800b536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b538:	2b0f      	cmp	r3, #15
 800b53a:	d8d2      	bhi.n	800b4e2 <mbedtls_gcm_update+0x1ca>
    }

    if (input_length > 0) {
 800b53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d016      	beq.n	800b570 <mbedtls_gcm_update+0x258>
        gcm_incr(ctx->y);
 800b542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b544:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b548:	4618      	mov	r0, r3
 800b54a:	f7ff fd87 	bl	800b05c <gcm_incr>
        if ((ret = gcm_mask(ctx, ectr, 0, input_length, p, out_p)) != 0) {
 800b54e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800b552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55c:	2200      	movs	r2, #0
 800b55e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b560:	f7ff fd9d 	bl	800b09e <gcm_mask>
 800b564:	65b8      	str	r0, [r7, #88]	; 0x58
 800b566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <mbedtls_gcm_update+0x258>
            return ret;
 800b56c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b56e:	e006      	b.n	800b57e <mbedtls_gcm_update+0x266>
        }
    }

    mbedtls_platform_zeroize(ectr, sizeof(ectr));
 800b570:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b574:	2110      	movs	r1, #16
 800b576:	4618      	mov	r0, r3
 800b578:	f000 f89e 	bl	800b6b8 <mbedtls_platform_zeroize>
    return 0;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3768      	adds	r7, #104	; 0x68
 800b582:	46bd      	mov	sp, r7
 800b584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b588 <mbedtls_gcm_free>:

    return 0;
}

void mbedtls_gcm_free(mbedtls_gcm_context *ctx)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d009      	beq.n	800b5aa <mbedtls_gcm_free+0x22>
        return;
    }
#if defined(MBEDTLS_BLOCK_CIPHER_C)
    mbedtls_block_cipher_free(&ctx->block_cipher_ctx);
#else
    mbedtls_cipher_free(&ctx->cipher_ctx);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4618      	mov	r0, r3
 800b59a:	f7fc f932 	bl	8007802 <mbedtls_cipher_free>
#endif
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_gcm_context));
 800b59e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 f888 	bl	800b6b8 <mbedtls_platform_zeroize>
 800b5a8:	e000      	b.n	800b5ac <mbedtls_gcm_free+0x24>
        return;
 800b5aa:	bf00      	nop
}
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <mbedtls_cipher_info_get_block_size>:
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b083      	sub	sp, #12
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
    if (info == NULL) {
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <mbedtls_cipher_info_get_block_size+0x12>
        return 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	e004      	b.n	800b5ce <mbedtls_cipher_info_get_block_size+0x1c>
    return (size_t) (info->MBEDTLS_PRIVATE(block_size));
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	791b      	ldrb	r3, [r3, #4]
 800b5c8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b5cc:	b2db      	uxtb	r3, r3
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	370c      	adds	r7, #12
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr

0800b5da <mbedtls_nist_kw_init>:

/*
 * Initialize context
 */
void mbedtls_nist_kw_init(mbedtls_nist_kw_context *ctx)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b082      	sub	sp, #8
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_nist_kw_context));
 800b5e2:	2244      	movs	r2, #68	; 0x44
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f005 fae8 	bl	8010bbc <memset>
}
 800b5ec:	bf00      	nop
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <mbedtls_nist_kw_setkey>:
int mbedtls_nist_kw_setkey(mbedtls_nist_kw_context *ctx,
                           mbedtls_cipher_id_t cipher,
                           const unsigned char *key,
                           unsigned int keybits,
                           const int is_wrap)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	607a      	str	r2, [r7, #4]
 800b5fe:	603b      	str	r3, [r7, #0]
 800b600:	460b      	mov	r3, r1
 800b602:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800b604:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800b608:	617b      	str	r3, [r7, #20]
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values(cipher,
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	7afb      	ldrb	r3, [r7, #11]
 800b60e:	2201      	movs	r2, #1
 800b610:	4618      	mov	r0, r3
 800b612:	f7fc f8af 	bl	8007774 <mbedtls_cipher_info_from_values>
 800b616:	6138      	str	r0, [r7, #16]
                                                  keybits,
                                                  MBEDTLS_MODE_ECB);
    if (cipher_info == NULL) {
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d101      	bne.n	800b622 <mbedtls_nist_kw_setkey+0x2e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800b61e:	4b1a      	ldr	r3, [pc, #104]	; (800b688 <mbedtls_nist_kw_setkey+0x94>)
 800b620:	e02e      	b.n	800b680 <mbedtls_nist_kw_setkey+0x8c>
    }

    if (mbedtls_cipher_info_get_block_size(cipher_info) != 16) {
 800b622:	6938      	ldr	r0, [r7, #16]
 800b624:	f7ff ffc5 	bl	800b5b2 <mbedtls_cipher_info_get_block_size>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b10      	cmp	r3, #16
 800b62c:	d001      	beq.n	800b632 <mbedtls_nist_kw_setkey+0x3e>
        return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800b62e:	4b16      	ldr	r3, [pc, #88]	; (800b688 <mbedtls_nist_kw_setkey+0x94>)
 800b630:	e026      	b.n	800b680 <mbedtls_nist_kw_setkey+0x8c>
     *  lengths of 128, 192, or 256 bits, is the only block cipher that fits
     *  this profile."
     *  Currently we don't support other 128 bit block ciphers for key wrapping,
     *  such as Camellia and Aria.
     */
    if (cipher != MBEDTLS_CIPHER_ID_AES) {
 800b632:	7afb      	ldrb	r3, [r7, #11]
 800b634:	2b02      	cmp	r3, #2
 800b636:	d001      	beq.n	800b63c <mbedtls_nist_kw_setkey+0x48>
        return MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE;
 800b638:	4b14      	ldr	r3, [pc, #80]	; (800b68c <mbedtls_nist_kw_setkey+0x98>)
 800b63a:	e021      	b.n	800b680 <mbedtls_nist_kw_setkey+0x8c>
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fc f8df 	bl	8007802 <mbedtls_cipher_free>

    if ((ret = mbedtls_cipher_setup(&ctx->cipher_ctx, cipher_info)) != 0) {
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6939      	ldr	r1, [r7, #16]
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fc f903 	bl	8007854 <mbedtls_cipher_setup>
 800b64e:	6178      	str	r0, [r7, #20]
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <mbedtls_nist_kw_setkey+0x66>
        return ret;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	e012      	b.n	800b680 <mbedtls_nist_kw_setkey+0x8c>
    }

    if ((ret = mbedtls_cipher_setkey(&ctx->cipher_ctx, key, keybits,
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	2b00      	cmp	r3, #0
 800b662:	bf14      	ite	ne
 800b664:	2301      	movne	r3, #1
 800b666:	2300      	moveq	r3, #0
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	b25b      	sxtb	r3, r3
 800b66c:	6879      	ldr	r1, [r7, #4]
 800b66e:	f7fc f923 	bl	80078b8 <mbedtls_cipher_setkey>
 800b672:	6178      	str	r0, [r7, #20]
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <mbedtls_nist_kw_setkey+0x8a>
                                     is_wrap ? MBEDTLS_ENCRYPT :
                                     MBEDTLS_DECRYPT)
         ) != 0) {
        return ret;
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	e000      	b.n	800b680 <mbedtls_nist_kw_setkey+0x8c>
    }

    return 0;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3718      	adds	r7, #24
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	ffff9f00 	.word	0xffff9f00
 800b68c:	ffff9f80 	.word	0xffff9f80

0800b690 <mbedtls_nist_kw_free>:

/*
 * Free context
 */
void mbedtls_nist_kw_free(mbedtls_nist_kw_context *ctx)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d008      	beq.n	800b6b0 <mbedtls_nist_kw_free+0x20>
        return;
    }

    mbedtls_cipher_free(&ctx->cipher_ctx);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fc f8ae 	bl	8007802 <mbedtls_cipher_free>
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_nist_kw_context));
 800b6a6:	2144      	movs	r1, #68	; 0x44
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 f805 	bl	800b6b8 <mbedtls_platform_zeroize>
 800b6ae:	e000      	b.n	800b6b2 <mbedtls_nist_kw_free+0x22>
        return;
 800b6b0:	bf00      	nop
}
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <mbedtls_platform_zeroize>:
    && !defined(_WIN32)
static void *(*const volatile memset_func)(void *, int, size_t) = memset;
#endif

void mbedtls_platform_zeroize(void *buf, size_t len)
{
 800b6b8:	b5b0      	push	{r4, r5, r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
    if (len > 0) {
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d015      	beq.n	800b6f4 <mbedtls_platform_zeroize+0x3c>
#elif defined(__STDC_LIB_EXT1__) && !defined(__IAR_SYSTEMS_ICC__)
        memset_s(buf, len, 0, len);
#elif defined(_WIN32)
        SecureZeroMemory(buf, len);
#else
        memset_func(buf, 0, len);
 800b6c8:	4b0c      	ldr	r3, [pc, #48]	; (800b6fc <mbedtls_platform_zeroize+0x44>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	683a      	ldr	r2, [r7, #0]
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	4798      	blx	r3
#pragma clang diagnostic ignored "-Wvla"
#elif defined(MBEDTLS_COMPILER_IS_GCC)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
#endif
        asm volatile ("" : : "m" (*(char (*)[len]) buf) :);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	3a01      	subs	r2, #1
 800b6da:	60fa      	str	r2, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	461c      	mov	r4, r3
 800b6e0:	4615      	mov	r5, r2
 800b6e2:	f04f 0200 	mov.w	r2, #0
 800b6e6:	f04f 0300 	mov.w	r3, #0
 800b6ea:	00eb      	lsls	r3, r5, #3
 800b6ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b6f0:	00e2      	lsls	r2, r4, #3
 800b6f2:	687b      	ldr	r3, [r7, #4]
#pragma GCC diagnostic pop
#endif
#endif
#endif
    }
}
 800b6f4:	bf00      	nop
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bdb0      	pop	{r4, r5, r7, pc}
 800b6fc:	20000044 	.word	0x20000044

0800b700 <mbedtls_zeroize_and_free>:
#endif /* MBEDTLS_PLATFORM_ZEROIZE_ALT */

void mbedtls_zeroize_and_free(void *buf, size_t len)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
    if (buf != NULL) {
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d003      	beq.n	800b718 <mbedtls_zeroize_and_free+0x18>
        mbedtls_platform_zeroize(buf, len);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7ff ffd0 	bl	800b6b8 <mbedtls_platform_zeroize>
    }

    mbedtls_free(buf);
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f004 fe9f 	bl	801045c <free>
}
 800b71e:	bf00      	nop
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <mul64>:

    return lo + (me << 16) + ((uint64_t) hi << 32);
}
#else
static inline uint64_t mul64(uint32_t a, uint32_t b)
{
 800b726:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
    return (uint64_t) a * b;
 800b732:	6879      	ldr	r1, [r7, #4]
 800b734:	2000      	movs	r0, #0
 800b736:	4688      	mov	r8, r1
 800b738:	4681      	mov	r9, r0
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	2000      	movs	r0, #0
 800b73e:	460c      	mov	r4, r1
 800b740:	4605      	mov	r5, r0
 800b742:	fb04 f009 	mul.w	r0, r4, r9
 800b746:	fb08 f105 	mul.w	r1, r8, r5
 800b74a:	4401      	add	r1, r0
 800b74c:	fba8 2304 	umull	r2, r3, r8, r4
 800b750:	4419      	add	r1, r3
 800b752:	460b      	mov	r3, r1
}
 800b754:	4610      	mov	r0, r2
 800b756:	4619      	mov	r1, r3
 800b758:	370c      	adds	r7, #12
 800b75a:	46bd      	mov	sp, r7
 800b75c:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800b760:	4770      	bx	lr

0800b762 <poly1305_process>:
 */
static void poly1305_process(mbedtls_poly1305_context *ctx,
                             size_t nblocks,
                             const unsigned char *input,
                             uint32_t needs_padding)
{
 800b762:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b766:	b0fc      	sub	sp, #496	; 0x1f0
 800b768:	af00      	add	r7, sp, #0
 800b76a:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 800b76e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 800b772:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800b776:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    uint64_t d0, d1, d2, d3;
    uint32_t acc0, acc1, acc2, acc3, acc4;
    uint32_t r0, r1, r2, r3;
    uint32_t rs1, rs2, rs3;
    size_t offset  = 0U;
 800b77a:	2300      	movs	r3, #0
 800b77c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    size_t i;

    r0 = ctx->r[0];
 800b780:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    r1 = ctx->r[1];
 800b78a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    r2 = ctx->r[2];
 800b794:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    r3 = ctx->r[3];
 800b79e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

    rs1 = r1 + (r1 >> 2U);
 800b7a8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800b7ac:	089a      	lsrs	r2, r3, #2
 800b7ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800b7b2:	4413      	add	r3, r2
 800b7b4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    rs2 = r2 + (r2 >> 2U);
 800b7b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800b7bc:	089a      	lsrs	r2, r3, #2
 800b7be:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    rs3 = r3 + (r3 >> 2U);
 800b7c8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b7cc:	089a      	lsrs	r2, r3, #2
 800b7ce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    acc0 = ctx->acc[0];
 800b7d8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    acc1 = ctx->acc[1];
 800b7e2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    acc2 = ctx->acc[2];
 800b7ec:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800b7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    acc3 = ctx->acc[3];
 800b7f6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800b7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    acc4 = ctx->acc[4];
 800b800:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800b804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b806:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

    /* Process full blocks */
    for (i = 0U; i < nblocks; i++) {
 800b80a:	2300      	movs	r3, #0
 800b80c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800b810:	e35f      	b.n	800bed2 <poly1305_process+0x770>
        /* The input block is treated as a 128-bit little-endian integer */
        d0   = MBEDTLS_GET_UINT32_LE(input, offset + 0);
 800b812:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800b816:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800b81a:	4413      	add	r3, r2
 800b81c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800b820:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800b824:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b826:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    return r;
 800b82a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800b82e:	2200      	movs	r2, #0
 800b830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b834:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800b838:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800b83c:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        d1   = MBEDTLS_GET_UINT32_LE(input, offset + 4);
 800b840:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800b844:	1d1a      	adds	r2, r3, #4
 800b846:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800b84a:	4413      	add	r3, r2
 800b84c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800b850:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800b854:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b856:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    return r;
 800b85a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800b85e:	2200      	movs	r2, #0
 800b860:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b864:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b868:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800b86c:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
        d2   = MBEDTLS_GET_UINT32_LE(input, offset + 8);
 800b870:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800b874:	f103 0208 	add.w	r2, r3, #8
 800b878:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800b87c:	4413      	add	r3, r2
 800b87e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800b882:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800b886:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b888:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    return r;
 800b88c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800b890:	2200      	movs	r2, #0
 800b892:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b896:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b89a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800b89e:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
        d3   = MBEDTLS_GET_UINT32_LE(input, offset + 12);
 800b8a2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800b8a6:	f103 020c 	add.w	r2, r3, #12
 800b8aa:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800b8b4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800b8b8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800b8ba:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    return r;
 800b8be:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800b8cc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800b8d0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198

        /* Compute: acc += (padded) block as a 130-bit integer */
        d0  += (uint64_t) acc0;
 800b8d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800b8de:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800b8e2:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800b8e6:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	1851      	adds	r1, r2, r1
 800b8ee:	67b9      	str	r1, [r7, #120]	; 0x78
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	414b      	adcs	r3, r1
 800b8f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b8f6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800b8fa:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        d1  += (uint64_t) acc1 + (d0 >> 32U);
 800b8fe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800b902:	2200      	movs	r2, #0
 800b904:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800b908:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800b90c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800b910:	f04f 0000 	mov.w	r0, #0
 800b914:	f04f 0100 	mov.w	r1, #0
 800b918:	0018      	movs	r0, r3
 800b91a:	2100      	movs	r1, #0
 800b91c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800b920:	4623      	mov	r3, r4
 800b922:	181b      	adds	r3, r3, r0
 800b924:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800b928:	462b      	mov	r3, r5
 800b92a:	414b      	adcs	r3, r1
 800b92c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800b930:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800b934:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800b938:	4621      	mov	r1, r4
 800b93a:	1851      	adds	r1, r2, r1
 800b93c:	6739      	str	r1, [r7, #112]	; 0x70
 800b93e:	4629      	mov	r1, r5
 800b940:	414b      	adcs	r3, r1
 800b942:	677b      	str	r3, [r7, #116]	; 0x74
 800b944:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800b948:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
        d2  += (uint64_t) acc2 + (d1 >> 32U);
 800b94c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800b950:	2200      	movs	r2, #0
 800b952:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b956:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800b95a:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800b95e:	f04f 0000 	mov.w	r0, #0
 800b962:	f04f 0100 	mov.w	r1, #0
 800b966:	0018      	movs	r0, r3
 800b968:	2100      	movs	r1, #0
 800b96a:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 800b96e:	4623      	mov	r3, r4
 800b970:	181b      	adds	r3, r3, r0
 800b972:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800b976:	462b      	mov	r3, r5
 800b978:	414b      	adcs	r3, r1
 800b97a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800b97e:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800b982:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 800b986:	4621      	mov	r1, r4
 800b988:	1851      	adds	r1, r2, r1
 800b98a:	66b9      	str	r1, [r7, #104]	; 0x68
 800b98c:	4629      	mov	r1, r5
 800b98e:	414b      	adcs	r3, r1
 800b990:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b992:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800b996:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
        d3  += (uint64_t) acc3 + (d2 >> 32U);
 800b99a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800b9a4:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800b9a8:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800b9ac:	f04f 0000 	mov.w	r0, #0
 800b9b0:	f04f 0100 	mov.w	r1, #0
 800b9b4:	0018      	movs	r0, r3
 800b9b6:	2100      	movs	r1, #0
 800b9b8:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 800b9bc:	4623      	mov	r3, r4
 800b9be:	181b      	adds	r3, r3, r0
 800b9c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800b9c4:	462b      	mov	r3, r5
 800b9c6:	414b      	adcs	r3, r1
 800b9c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800b9cc:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800b9d0:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	1851      	adds	r1, r2, r1
 800b9d8:	6639      	str	r1, [r7, #96]	; 0x60
 800b9da:	4629      	mov	r1, r5
 800b9dc:	414b      	adcs	r3, r1
 800b9de:	667b      	str	r3, [r7, #100]	; 0x64
 800b9e0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800b9e4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
        acc0 = (uint32_t) d0;
 800b9e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800b9ec:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        acc1 = (uint32_t) d1;
 800b9f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b9f4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
        acc2 = (uint32_t) d2;
 800b9f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800b9fc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        acc3 = (uint32_t) d3;
 800ba00:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800ba04:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        acc4 += (uint32_t) (d3 >> 32U) + needs_padding;
 800ba08:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800ba0c:	f04f 0000 	mov.w	r0, #0
 800ba10:	f04f 0100 	mov.w	r1, #0
 800ba14:	0018      	movs	r0, r3
 800ba16:	2100      	movs	r1, #0
 800ba18:	4602      	mov	r2, r0
 800ba1a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800ba1e:	441a      	add	r2, r3
 800ba20:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800ba24:	4413      	add	r3, r2
 800ba26:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        /* Compute: acc *= r */
        d0 = mul64(acc0, r0) +
 800ba2a:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800ba2e:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800ba32:	f7ff fe78 	bl	800b726 <mul64>
 800ba36:	4604      	mov	r4, r0
 800ba38:	460d      	mov	r5, r1
             mul64(acc1, rs3) +
 800ba3a:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800ba3e:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800ba42:	f7ff fe70 	bl	800b726 <mul64>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
        d0 = mul64(acc0, r0) +
 800ba4a:	18a1      	adds	r1, r4, r2
 800ba4c:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800ba50:	eb45 0303 	adc.w	r3, r5, r3
 800ba54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
             mul64(acc2, rs2) +
 800ba58:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800ba5c:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800ba60:	f7ff fe61 	bl	800b726 <mul64>
 800ba64:	4602      	mov	r2, r0
 800ba66:	460b      	mov	r3, r1
             mul64(acc1, rs3) +
 800ba68:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	1889      	adds	r1, r1, r2
 800ba70:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800ba74:	4629      	mov	r1, r5
 800ba76:	eb41 0303 	adc.w	r3, r1, r3
 800ba7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
             mul64(acc3, rs1);
 800ba7e:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800ba82:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800ba86:	f7ff fe4e 	bl	800b726 <mul64>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	460b      	mov	r3, r1
        d0 = mul64(acc0, r0) +
 800ba8e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800ba92:	4621      	mov	r1, r4
 800ba94:	1889      	adds	r1, r1, r2
 800ba96:	65b9      	str	r1, [r7, #88]	; 0x58
 800ba98:	4629      	mov	r1, r5
 800ba9a:	eb41 0303 	adc.w	r3, r1, r3
 800ba9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800baa0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800baa4:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        d1 = mul64(acc0, r1) +
 800baa8:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800baac:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800bab0:	f7ff fe39 	bl	800b726 <mul64>
 800bab4:	4604      	mov	r4, r0
 800bab6:	460d      	mov	r5, r1
             mul64(acc1, r0) +
 800bab8:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800babc:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800bac0:	f7ff fe31 	bl	800b726 <mul64>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
        d1 = mul64(acc0, r1) +
 800bac8:	18a1      	adds	r1, r4, r2
 800baca:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800bace:	eb45 0303 	adc.w	r3, r5, r3
 800bad2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
             mul64(acc2, rs3) +
 800bad6:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800bada:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800bade:	f7ff fe22 	bl	800b726 <mul64>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
             mul64(acc1, r0) +
 800bae6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800baea:	4621      	mov	r1, r4
 800baec:	1889      	adds	r1, r1, r2
 800baee:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800baf2:	4629      	mov	r1, r5
 800baf4:	eb41 0303 	adc.w	r3, r1, r3
 800baf8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
             mul64(acc3, rs2) +
 800bafc:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800bb00:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800bb04:	f7ff fe0f 	bl	800b726 <mul64>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
             mul64(acc2, rs3) +
 800bb0c:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 800bb10:	4621      	mov	r1, r4
 800bb12:	1889      	adds	r1, r1, r2
 800bb14:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800bb18:	4629      	mov	r1, r5
 800bb1a:	eb41 0303 	adc.w	r3, r1, r3
 800bb1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
             mul64(acc4, rs1);
 800bb22:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800bb26:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 800bb2a:	f7ff fdfc 	bl	800b726 <mul64>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	460b      	mov	r3, r1
        d1 = mul64(acc0, r1) +
 800bb32:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800bb36:	4621      	mov	r1, r4
 800bb38:	1889      	adds	r1, r1, r2
 800bb3a:	6539      	str	r1, [r7, #80]	; 0x50
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	eb41 0303 	adc.w	r3, r1, r3
 800bb42:	657b      	str	r3, [r7, #84]	; 0x54
 800bb44:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800bb48:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
        d2 = mul64(acc0, r2) +
 800bb4c:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800bb50:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800bb54:	f7ff fde7 	bl	800b726 <mul64>
 800bb58:	4604      	mov	r4, r0
 800bb5a:	460d      	mov	r5, r1
             mul64(acc1, r1) +
 800bb5c:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800bb60:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800bb64:	f7ff fddf 	bl	800b726 <mul64>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
        d2 = mul64(acc0, r2) +
 800bb6c:	18a1      	adds	r1, r4, r2
 800bb6e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800bb72:	eb45 0303 	adc.w	r3, r5, r3
 800bb76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
             mul64(acc2, r0) +
 800bb7a:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800bb7e:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800bb82:	f7ff fdd0 	bl	800b726 <mul64>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
             mul64(acc1, r1) +
 800bb8a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800bb8e:	4621      	mov	r1, r4
 800bb90:	1889      	adds	r1, r1, r2
 800bb92:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800bb96:	4629      	mov	r1, r5
 800bb98:	eb41 0303 	adc.w	r3, r1, r3
 800bb9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
             mul64(acc3, rs3) +
 800bba0:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800bba4:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800bba8:	f7ff fdbd 	bl	800b726 <mul64>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
             mul64(acc2, r0) +
 800bbb0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	1889      	adds	r1, r1, r2
 800bbb8:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	eb41 0303 	adc.w	r3, r1, r3
 800bbc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
             mul64(acc4, rs2);
 800bbc6:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800bbca:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 800bbce:	f7ff fdaa 	bl	800b726 <mul64>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
        d2 = mul64(acc0, r2) +
 800bbd6:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800bbda:	4621      	mov	r1, r4
 800bbdc:	1889      	adds	r1, r1, r2
 800bbde:	64b9      	str	r1, [r7, #72]	; 0x48
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	eb41 0303 	adc.w	r3, r1, r3
 800bbe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbe8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800bbec:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
        d3 = mul64(acc0, r3) +
 800bbf0:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800bbf4:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 800bbf8:	f7ff fd95 	bl	800b726 <mul64>
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	460d      	mov	r5, r1
             mul64(acc1, r2) +
 800bc00:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800bc04:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 800bc08:	f7ff fd8d 	bl	800b726 <mul64>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
        d3 = mul64(acc0, r3) +
 800bc10:	18a1      	adds	r1, r4, r2
 800bc12:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800bc16:	eb45 0303 	adc.w	r3, r5, r3
 800bc1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
             mul64(acc2, r1) +
 800bc1e:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800bc22:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 800bc26:	f7ff fd7e 	bl	800b726 <mul64>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
             mul64(acc1, r2) +
 800bc2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bc32:	4621      	mov	r1, r4
 800bc34:	1889      	adds	r1, r1, r2
 800bc36:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	eb41 0303 	adc.w	r3, r1, r3
 800bc40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
             mul64(acc3, r0) +
 800bc44:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800bc48:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800bc4c:	f7ff fd6b 	bl	800b726 <mul64>
 800bc50:	4602      	mov	r2, r0
 800bc52:	460b      	mov	r3, r1
             mul64(acc2, r1) +
 800bc54:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800bc58:	4621      	mov	r1, r4
 800bc5a:	eb11 0a02 	adds.w	sl, r1, r2
 800bc5e:	4629      	mov	r1, r5
 800bc60:	eb41 0b03 	adc.w	fp, r1, r3
             mul64(acc4, rs3);
 800bc64:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800bc68:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 800bc6c:	f7ff fd5b 	bl	800b726 <mul64>
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
        d3 = mul64(acc0, r3) +
 800bc74:	eb1a 0102 	adds.w	r1, sl, r2
 800bc78:	6439      	str	r1, [r7, #64]	; 0x40
 800bc7a:	eb4b 0303 	adc.w	r3, fp, r3
 800bc7e:	647b      	str	r3, [r7, #68]	; 0x44
 800bc80:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800bc84:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
        acc4 *= r0;
 800bc88:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800bc8c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800bc90:	fb02 f303 	mul.w	r3, r2, r3
 800bc94:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        /* Compute: acc %= (2^130 - 5) (partial remainder) */
        d1 += (d0 >> 32);
 800bc98:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800bc9c:	f04f 0000 	mov.w	r0, #0
 800bca0:	f04f 0100 	mov.w	r1, #0
 800bca4:	0018      	movs	r0, r3
 800bca6:	2100      	movs	r1, #0
 800bca8:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800bcac:	1814      	adds	r4, r2, r0
 800bcae:	63bc      	str	r4, [r7, #56]	; 0x38
 800bcb0:	414b      	adcs	r3, r1
 800bcb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcb4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800bcb8:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
        d2 += (d1 >> 32);
 800bcbc:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800bcc0:	f04f 0000 	mov.w	r0, #0
 800bcc4:	f04f 0100 	mov.w	r1, #0
 800bcc8:	0018      	movs	r0, r3
 800bcca:	2100      	movs	r1, #0
 800bccc:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800bcd0:	1814      	adds	r4, r2, r0
 800bcd2:	633c      	str	r4, [r7, #48]	; 0x30
 800bcd4:	414b      	adcs	r3, r1
 800bcd6:	637b      	str	r3, [r7, #52]	; 0x34
 800bcd8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800bcdc:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
        d3 += (d2 >> 32);
 800bce0:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800bce4:	f04f 0000 	mov.w	r0, #0
 800bce8:	f04f 0100 	mov.w	r1, #0
 800bcec:	0018      	movs	r0, r3
 800bcee:	2100      	movs	r1, #0
 800bcf0:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800bcf4:	1814      	adds	r4, r2, r0
 800bcf6:	62bc      	str	r4, [r7, #40]	; 0x28
 800bcf8:	414b      	adcs	r3, r1
 800bcfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcfc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800bd00:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
        acc0 = (uint32_t) d0;
 800bd04:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800bd08:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        acc1 = (uint32_t) d1;
 800bd0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800bd10:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
        acc2 = (uint32_t) d2;
 800bd14:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800bd18:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        acc3 = (uint32_t) d3;
 800bd1c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800bd20:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        acc4 = (uint32_t) (d3 >> 32) + acc4;
 800bd24:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800bd28:	f04f 0000 	mov.w	r0, #0
 800bd2c:	f04f 0100 	mov.w	r1, #0
 800bd30:	0018      	movs	r0, r3
 800bd32:	2100      	movs	r1, #0
 800bd34:	4602      	mov	r2, r0
 800bd36:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800bd3a:	4413      	add	r3, r2
 800bd3c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        d0 = (uint64_t) acc0 + (acc4 >> 2) + (acc4 & 0xFFFFFFFCU);
 800bd40:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800bd44:	2200      	movs	r2, #0
 800bd46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bd4e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800bd52:	089b      	lsrs	r3, r3, #2
 800bd54:	2200      	movs	r2, #0
 800bd56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd5a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bd5e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800bd62:	4623      	mov	r3, r4
 800bd64:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800bd68:	4602      	mov	r2, r0
 800bd6a:	eb13 0802 	adds.w	r8, r3, r2
 800bd6e:	462b      	mov	r3, r5
 800bd70:	460a      	mov	r2, r1
 800bd72:	eb43 0902 	adc.w	r9, r3, r2
 800bd76:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd80:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800bd84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd88:	f023 0303 	bic.w	r3, r3, #3
 800bd8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd90:	2300      	movs	r3, #0
 800bd92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd96:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	eb18 0303 	adds.w	r3, r8, r3
 800bda0:	623b      	str	r3, [r7, #32]
 800bda2:	4613      	mov	r3, r2
 800bda4:	eb49 0303 	adc.w	r3, r9, r3
 800bda8:	627b      	str	r3, [r7, #36]	; 0x24
 800bdaa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800bdae:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc4 &= 3U;
 800bdb2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800bdb6:	f003 0303 	and.w	r3, r3, #3
 800bdba:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
        acc0 = (uint32_t) d0;
 800bdbe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800bdc2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        d0 = (uint64_t) acc1 + (d0 >> 32U);
 800bdc6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bdd4:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800bdd8:	f04f 0000 	mov.w	r0, #0
 800bddc:	f04f 0100 	mov.w	r1, #0
 800bde0:	0018      	movs	r0, r3
 800bde2:	2100      	movs	r1, #0
 800bde4:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800bde8:	4623      	mov	r3, r4
 800bdea:	181b      	adds	r3, r3, r0
 800bdec:	61bb      	str	r3, [r7, #24]
 800bdee:	462b      	mov	r3, r5
 800bdf0:	414b      	adcs	r3, r1
 800bdf2:	61fb      	str	r3, [r7, #28]
 800bdf4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800bdf8:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc1 = (uint32_t) d0;
 800bdfc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800be00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
        d0 = (uint64_t) acc2 + (d0 >> 32U);
 800be04:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800be08:	2200      	movs	r2, #0
 800be0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be0e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800be12:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800be16:	f04f 0000 	mov.w	r0, #0
 800be1a:	f04f 0100 	mov.w	r1, #0
 800be1e:	0018      	movs	r0, r3
 800be20:	2100      	movs	r1, #0
 800be22:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800be26:	4623      	mov	r3, r4
 800be28:	181b      	adds	r3, r3, r0
 800be2a:	613b      	str	r3, [r7, #16]
 800be2c:	462b      	mov	r3, r5
 800be2e:	414b      	adcs	r3, r1
 800be30:	617b      	str	r3, [r7, #20]
 800be32:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800be36:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc2 = (uint32_t) d0;
 800be3a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800be3e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        d0 = (uint64_t) acc3 + (d0 >> 32U);
 800be42:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800be46:	2200      	movs	r2, #0
 800be48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800be4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800be50:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800be54:	f04f 0000 	mov.w	r0, #0
 800be58:	f04f 0100 	mov.w	r1, #0
 800be5c:	0018      	movs	r0, r3
 800be5e:	2100      	movs	r1, #0
 800be60:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800be64:	4623      	mov	r3, r4
 800be66:	181b      	adds	r3, r3, r0
 800be68:	60bb      	str	r3, [r7, #8]
 800be6a:	462b      	mov	r3, r5
 800be6c:	414b      	adcs	r3, r1
 800be6e:	60fb      	str	r3, [r7, #12]
 800be70:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800be74:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc3 = (uint32_t) d0;
 800be78:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800be7c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        d0 = (uint64_t) acc4 + (d0 >> 32U);
 800be80:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800be84:	2200      	movs	r2, #0
 800be86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800be8e:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800be92:	f04f 0000 	mov.w	r0, #0
 800be96:	f04f 0100 	mov.w	r1, #0
 800be9a:	0018      	movs	r0, r3
 800be9c:	2100      	movs	r1, #0
 800be9e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800bea2:	4623      	mov	r3, r4
 800bea4:	181b      	adds	r3, r3, r0
 800bea6:	603b      	str	r3, [r7, #0]
 800bea8:	462b      	mov	r3, r5
 800beaa:	414b      	adcs	r3, r1
 800beac:	607b      	str	r3, [r7, #4]
 800beae:	e9d7 3400 	ldrd	r3, r4, [r7]
 800beb2:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
        acc4 = (uint32_t) d0;
 800beb6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800beba:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        offset    += POLY1305_BLOCK_SIZE_BYTES;
 800bebe:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800bec2:	3310      	adds	r3, #16
 800bec4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    for (i = 0U; i < nblocks; i++) {
 800bec8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800becc:	3301      	adds	r3, #1
 800bece:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800bed2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800bed6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800beda:	429a      	cmp	r2, r3
 800bedc:	f4ff ac99 	bcc.w	800b812 <poly1305_process+0xb0>
    }

    ctx->acc[0] = acc0;
 800bee0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800bee4:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800bee8:	621a      	str	r2, [r3, #32]
    ctx->acc[1] = acc1;
 800beea:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800beee:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 800bef2:	625a      	str	r2, [r3, #36]	; 0x24
    ctx->acc[2] = acc2;
 800bef4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800bef8:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 800befc:	629a      	str	r2, [r3, #40]	; 0x28
    ctx->acc[3] = acc3;
 800befe:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800bf02:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800bf06:	62da      	str	r2, [r3, #44]	; 0x2c
    ctx->acc[4] = acc4;
 800bf08:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800bf0c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800bf10:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf12:	bf00      	nop
 800bf14:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bf1e <mbedtls_poly1305_init>:
    MBEDTLS_PUT_UINT32_LE(acc2, mac,  8);
    MBEDTLS_PUT_UINT32_LE(acc3, mac, 12);
}

void mbedtls_poly1305_init(mbedtls_poly1305_context *ctx)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b082      	sub	sp, #8
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_poly1305_context));
 800bf26:	2148      	movs	r1, #72	; 0x48
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f7ff fbc5 	bl	800b6b8 <mbedtls_platform_zeroize>
}
 800bf2e:	bf00      	nop
 800bf30:	3708      	adds	r7, #8
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <mbedtls_poly1305_free>:

void mbedtls_poly1305_free(mbedtls_poly1305_context *ctx)
{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b082      	sub	sp, #8
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d004      	beq.n	800bf4e <mbedtls_poly1305_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_poly1305_context));
 800bf44:	2148      	movs	r1, #72	; 0x48
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7ff fbb6 	bl	800b6b8 <mbedtls_platform_zeroize>
 800bf4c:	e000      	b.n	800bf50 <mbedtls_poly1305_free+0x1a>
        return;
 800bf4e:	bf00      	nop
}
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <mbedtls_poly1305_update>:
}

int mbedtls_poly1305_update(mbedtls_poly1305_context *ctx,
                            const unsigned char *input,
                            size_t ilen)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b088      	sub	sp, #32
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	60f8      	str	r0, [r7, #12]
 800bf5e:	60b9      	str	r1, [r7, #8]
 800bf60:	607a      	str	r2, [r7, #4]
    size_t offset    = 0U;
 800bf62:	2300      	movs	r3, #0
 800bf64:	61fb      	str	r3, [r7, #28]
    size_t remaining = ilen;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	61bb      	str	r3, [r7, #24]
    size_t queue_free_len;
    size_t nblocks;

    if ((remaining > 0U) && (ctx->queue_len > 0U)) {
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d03e      	beq.n	800bfee <mbedtls_poly1305_update+0x98>
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d03a      	beq.n	800bfee <mbedtls_poly1305_update+0x98>
        queue_free_len = (POLY1305_BLOCK_SIZE_BYTES - ctx->queue_len);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf7c:	f1c3 0310 	rsb	r3, r3, #16
 800bf80:	617b      	str	r3, [r7, #20]

        if (ilen < queue_free_len) {
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d213      	bcs.n	800bfb2 <mbedtls_poly1305_update+0x5c>
            /* Not enough data to complete the block.
             * Store this data with the other leftovers.
             */
            memcpy(&ctx->queue[ctx->queue_len],
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf8e:	3330      	adds	r3, #48	; 0x30
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	4413      	add	r3, r2
 800bf94:	3304      	adds	r3, #4
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	68b9      	ldr	r1, [r7, #8]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f004 fe99 	bl	8010cd2 <memcpy>
                   input,
                   ilen);

            ctx->queue_len += ilen;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	441a      	add	r2, r3
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	645a      	str	r2, [r3, #68]	; 0x44

            remaining = 0U;
 800bfac:	2300      	movs	r3, #0
 800bfae:	61bb      	str	r3, [r7, #24]
 800bfb0:	e01d      	b.n	800bfee <mbedtls_poly1305_update+0x98>
        } else {
            /* Enough data to produce a complete block */
            memcpy(&ctx->queue[ctx->queue_len],
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfb6:	3330      	adds	r3, #48	; 0x30
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	4413      	add	r3, r2
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	68b9      	ldr	r1, [r7, #8]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f004 fe85 	bl	8010cd2 <memcpy>
                   input,
                   queue_free_len);

            ctx->queue_len = 0U;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	645a      	str	r2, [r3, #68]	; 0x44

            poly1305_process(ctx, 1U, ctx->queue, 1U);   /* add padding bit */
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f7ff fbc2 	bl	800b762 <poly1305_process>

            offset    += queue_free_len;
 800bfde:	69fa      	ldr	r2, [r7, #28]
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	61fb      	str	r3, [r7, #28]
            remaining -= queue_free_len;
 800bfe6:	69ba      	ldr	r2, [r7, #24]
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	61bb      	str	r3, [r7, #24]
        }
    }

    if (remaining >= POLY1305_BLOCK_SIZE_BYTES) {
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	2b0f      	cmp	r3, #15
 800bff2:	d913      	bls.n	800c01c <mbedtls_poly1305_update+0xc6>
        nblocks = remaining / POLY1305_BLOCK_SIZE_BYTES;
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	091b      	lsrs	r3, r3, #4
 800bff8:	613b      	str	r3, [r7, #16]

        poly1305_process(ctx, nblocks, &input[offset], 1U);
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	441a      	add	r2, r3
 800c000:	2301      	movs	r3, #1
 800c002:	6939      	ldr	r1, [r7, #16]
 800c004:	68f8      	ldr	r0, [r7, #12]
 800c006:	f7ff fbac 	bl	800b762 <poly1305_process>

        offset += nblocks * POLY1305_BLOCK_SIZE_BYTES;
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	011b      	lsls	r3, r3, #4
 800c00e:	69fa      	ldr	r2, [r7, #28]
 800c010:	4413      	add	r3, r2
 800c012:	61fb      	str	r3, [r7, #28]
        remaining %= POLY1305_BLOCK_SIZE_BYTES;
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	f003 030f 	and.w	r3, r3, #15
 800c01a:	61bb      	str	r3, [r7, #24]
    }

    if (remaining > 0U) {
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00c      	beq.n	800c03c <mbedtls_poly1305_update+0xe6>
        /* Store partial block */
        ctx->queue_len = remaining;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	69ba      	ldr	r2, [r7, #24]
 800c026:	645a      	str	r2, [r3, #68]	; 0x44
        memcpy(ctx->queue, &input[offset], remaining);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800c02e:	68ba      	ldr	r2, [r7, #8]
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	4413      	add	r3, r2
 800c034:	69ba      	ldr	r2, [r7, #24]
 800c036:	4619      	mov	r1, r3
 800c038:	f004 fe4b 	bl	8010cd2 <memcpy>
    }

    return 0;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3720      	adds	r7, #32
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <mbedtls_sha1_init>:
#include "mbedtls/platform.h"

#if !defined(MBEDTLS_SHA1_ALT)

void mbedtls_sha1_init(mbedtls_sha1_context *ctx)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b082      	sub	sp, #8
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(mbedtls_sha1_context));
 800c04e:	225c      	movs	r2, #92	; 0x5c
 800c050:	2100      	movs	r1, #0
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f004 fdb2 	bl	8010bbc <memset>
}
 800c058:	bf00      	nop
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <mbedtls_sha1_free>:

void mbedtls_sha1_free(mbedtls_sha1_context *ctx)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) {
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d004      	beq.n	800c078 <mbedtls_sha1_free+0x18>
        return;
    }

    mbedtls_platform_zeroize(ctx, sizeof(mbedtls_sha1_context));
 800c06e:	215c      	movs	r1, #92	; 0x5c
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff fb21 	bl	800b6b8 <mbedtls_platform_zeroize>
 800c076:	e000      	b.n	800c07a <mbedtls_sha1_free+0x1a>
        return;
 800c078:	bf00      	nop
}
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <mbedtls_sha1_starts>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts(mbedtls_sha1_context *ctx)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	4a0a      	ldr	r2, [pc, #40]	; (800c0c0 <mbedtls_sha1_starts+0x40>)
 800c098:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a09      	ldr	r2, [pc, #36]	; (800c0c4 <mbedtls_sha1_starts+0x44>)
 800c09e:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a09      	ldr	r2, [pc, #36]	; (800c0c8 <mbedtls_sha1_starts+0x48>)
 800c0a4:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a08      	ldr	r2, [pc, #32]	; (800c0cc <mbedtls_sha1_starts+0x4c>)
 800c0aa:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	4a08      	ldr	r2, [pc, #32]	; (800c0d0 <mbedtls_sha1_starts+0x50>)
 800c0b0:	619a      	str	r2, [r3, #24]

    return 0;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	67452301 	.word	0x67452301
 800c0c4:	efcdab89 	.word	0xefcdab89
 800c0c8:	98badcfe 	.word	0x98badcfe
 800c0cc:	10325476 	.word	0x10325476
 800c0d0:	c3d2e1f0 	.word	0xc3d2e1f0

0800c0d4 <mbedtls_internal_sha1_process>:

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process(mbedtls_sha1_context *ctx,
                                  const unsigned char data[64])
{
 800c0d4:	b5b0      	push	{r4, r5, r7, lr}
 800c0d6:	b0b8      	sub	sp, #224	; 0xe0
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c0e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c0e8:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c0ea:	647b      	str	r3, [r7, #68]	; 0x44
    return r;
 800c0ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    struct {
        uint32_t temp, W[16], A, B, C, D, E;
    } local;

    local.W[0] = MBEDTLS_GET_UINT32_BE(data,  0);
 800c0ee:	ba1b      	rev	r3, r3
 800c0f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    local.W[1] = MBEDTLS_GET_UINT32_BE(data,  4);
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	3304      	adds	r3, #4
 800c0f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c0fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c0fe:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c100:	643b      	str	r3, [r7, #64]	; 0x40
    return r;
 800c102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c104:	ba1b      	rev	r3, r3
 800c106:	653b      	str	r3, [r7, #80]	; 0x50
    local.W[2] = MBEDTLS_GET_UINT32_BE(data,  8);
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	3308      	adds	r3, #8
 800c10c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c114:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c116:	63fb      	str	r3, [r7, #60]	; 0x3c
    return r;
 800c118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11a:	ba1b      	rev	r3, r3
 800c11c:	657b      	str	r3, [r7, #84]	; 0x54
    local.W[3] = MBEDTLS_GET_UINT32_BE(data, 12);
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	330c      	adds	r3, #12
 800c122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c12a:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c12c:	63bb      	str	r3, [r7, #56]	; 0x38
    return r;
 800c12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c130:	ba1b      	rev	r3, r3
 800c132:	65bb      	str	r3, [r7, #88]	; 0x58
    local.W[4] = MBEDTLS_GET_UINT32_BE(data, 16);
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	3310      	adds	r3, #16
 800c138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c13c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c140:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c142:	637b      	str	r3, [r7, #52]	; 0x34
    return r;
 800c144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c146:	ba1b      	rev	r3, r3
 800c148:	65fb      	str	r3, [r7, #92]	; 0x5c
    local.W[5] = MBEDTLS_GET_UINT32_BE(data, 20);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	3314      	adds	r3, #20
 800c14e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c156:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c158:	633b      	str	r3, [r7, #48]	; 0x30
    return r;
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	ba1b      	rev	r3, r3
 800c15e:	663b      	str	r3, [r7, #96]	; 0x60
    local.W[6] = MBEDTLS_GET_UINT32_BE(data, 24);
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	3318      	adds	r3, #24
 800c164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c168:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c16c:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c16e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 800c170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c172:	ba1b      	rev	r3, r3
 800c174:	667b      	str	r3, [r7, #100]	; 0x64
    local.W[7] = MBEDTLS_GET_UINT32_BE(data, 28);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	331c      	adds	r3, #28
 800c17a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c17e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c182:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c184:	62bb      	str	r3, [r7, #40]	; 0x28
    return r;
 800c186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c188:	ba1b      	rev	r3, r3
 800c18a:	66bb      	str	r3, [r7, #104]	; 0x68
    local.W[8] = MBEDTLS_GET_UINT32_BE(data, 32);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	3320      	adds	r3, #32
 800c190:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c198:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c19a:	627b      	str	r3, [r7, #36]	; 0x24
    return r;
 800c19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19e:	ba1b      	rev	r3, r3
 800c1a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    local.W[9] = MBEDTLS_GET_UINT32_BE(data, 36);
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	3324      	adds	r3, #36	; 0x24
 800c1a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c1aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c1ae:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c1b0:	623b      	str	r3, [r7, #32]
    return r;
 800c1b2:	6a3b      	ldr	r3, [r7, #32]
 800c1b4:	ba1b      	rev	r3, r3
 800c1b6:	673b      	str	r3, [r7, #112]	; 0x70
    local.W[10] = MBEDTLS_GET_UINT32_BE(data, 40);
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	3328      	adds	r3, #40	; 0x28
 800c1bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1c4:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c1c6:	61fb      	str	r3, [r7, #28]
    return r;
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	ba1b      	rev	r3, r3
 800c1cc:	677b      	str	r3, [r7, #116]	; 0x74
    local.W[11] = MBEDTLS_GET_UINT32_BE(data, 44);
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	332c      	adds	r3, #44	; 0x2c
 800c1d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c1d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c1da:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c1dc:	61bb      	str	r3, [r7, #24]
    return r;
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	ba1b      	rev	r3, r3
 800c1e2:	67bb      	str	r3, [r7, #120]	; 0x78
    local.W[12] = MBEDTLS_GET_UINT32_BE(data, 48);
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	3330      	adds	r3, #48	; 0x30
 800c1e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c1ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c1f0:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c1f2:	617b      	str	r3, [r7, #20]
    return r;
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	ba1b      	rev	r3, r3
 800c1f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    local.W[13] = MBEDTLS_GET_UINT32_BE(data, 52);
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	3334      	adds	r3, #52	; 0x34
 800c1fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c206:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c208:	613b      	str	r3, [r7, #16]
    return r;
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	ba1b      	rev	r3, r3
 800c20e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    local.W[14] = MBEDTLS_GET_UINT32_BE(data, 56);
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	3338      	adds	r3, #56	; 0x38
 800c216:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c21a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c21e:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c220:	60fb      	str	r3, [r7, #12]
    return r;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	ba1b      	rev	r3, r3
 800c226:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    local.W[15] = MBEDTLS_GET_UINT32_BE(data, 60);
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	333c      	adds	r3, #60	; 0x3c
 800c22e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c236:	681b      	ldr	r3, [r3, #0]
    memcpy(&r, p, sizeof(r));
 800c238:	60bb      	str	r3, [r7, #8]
    return r;
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	ba1b      	rev	r3, r3
 800c23e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    {                                                           \
        (e) += S((a), 5) + F((b), (c), (d)) + K + (x);             \
        (b) = S((b), 30);                                        \
    } while (0)

    local.A = ctx->state[0];
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    local.B = ctx->state[1];
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    local.C = ctx->state[2];
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	691b      	ldr	r3, [r3, #16]
 800c256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    local.D = ctx->state[3];
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	695b      	ldr	r3, [r3, #20]
 800c25e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    local.E = ctx->state[4];
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	699b      	ldr	r3, [r3, #24]
 800c266:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

#define F(x, y, z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P(local.A, local.B, local.C, local.D, local.E, local.W[0]);
 800c26a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c26e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c272:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c276:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c27a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800c27e:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
 800c282:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c286:	406b      	eors	r3, r5
 800c288:	4023      	ands	r3, r4
 800c28a:	4043      	eors	r3, r0
 800c28c:	4419      	add	r1, r3
 800c28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c290:	440b      	add	r3, r1
 800c292:	441a      	add	r2, r3
 800c294:	4bf0      	ldr	r3, [pc, #960]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c296:	4413      	add	r3, r2
 800c298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c29c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2a0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c2a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, local.W[1]);
 800c2a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c2ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2b0:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c2b4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800c2b8:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800c2bc:	f8d7 5090 	ldr.w	r5, [r7, #144]	; 0x90
 800c2c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c2c4:	406b      	eors	r3, r5
 800c2c6:	4023      	ands	r3, r4
 800c2c8:	4043      	eors	r3, r0
 800c2ca:	4419      	add	r1, r3
 800c2cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2ce:	440b      	add	r3, r1
 800c2d0:	441a      	add	r2, r3
 800c2d2:	4be1      	ldr	r3, [pc, #900]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c2d4:	4413      	add	r3, r2
 800c2d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c2da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2de:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c2e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, local.W[2]);
 800c2e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c2ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c2ee:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c2f2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c2f6:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800c2fa:	f8d7 508c 	ldr.w	r5, [r7, #140]	; 0x8c
 800c2fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c302:	406b      	eors	r3, r5
 800c304:	4023      	ands	r3, r4
 800c306:	4043      	eors	r3, r0
 800c308:	4419      	add	r1, r3
 800c30a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c30c:	440b      	add	r3, r1
 800c30e:	441a      	add	r2, r3
 800c310:	4bd1      	ldr	r3, [pc, #836]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c312:	4413      	add	r3, r2
 800c314:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c318:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c31c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, local.W[3]);
 800c324:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c328:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c32c:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c330:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c334:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800c338:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 800c33c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c340:	406b      	eors	r3, r5
 800c342:	4023      	ands	r3, r4
 800c344:	4043      	eors	r3, r0
 800c346:	4419      	add	r1, r3
 800c348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c34a:	440b      	add	r3, r1
 800c34c:	441a      	add	r2, r3
 800c34e:	4bc2      	ldr	r3, [pc, #776]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c350:	4413      	add	r3, r2
 800c352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c356:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c35a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c35e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, local.W[4]);
 800c362:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c366:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c36a:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c36e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800c372:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800c376:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800c37a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c37e:	406b      	eors	r3, r5
 800c380:	4023      	ands	r3, r4
 800c382:	4043      	eors	r3, r0
 800c384:	4419      	add	r1, r3
 800c386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c388:	440b      	add	r3, r1
 800c38a:	441a      	add	r2, r3
 800c38c:	4bb2      	ldr	r3, [pc, #712]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c38e:	4413      	add	r3, r2
 800c390:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c394:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c398:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c39c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, local.W[5]);
 800c3a0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c3a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3a8:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c3ac:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c3b0:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800c3b4:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
 800c3b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3bc:	406b      	eors	r3, r5
 800c3be:	4023      	ands	r3, r4
 800c3c0:	4043      	eors	r3, r0
 800c3c2:	4419      	add	r1, r3
 800c3c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3c6:	440b      	add	r3, r1
 800c3c8:	441a      	add	r2, r3
 800c3ca:	4ba3      	ldr	r3, [pc, #652]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c3cc:	4413      	add	r3, r2
 800c3ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c3d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3d6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c3da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, local.W[6]);
 800c3de:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c3e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3e6:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c3ea:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800c3ee:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800c3f2:	f8d7 5090 	ldr.w	r5, [r7, #144]	; 0x90
 800c3f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3fa:	406b      	eors	r3, r5
 800c3fc:	4023      	ands	r3, r4
 800c3fe:	4043      	eors	r3, r0
 800c400:	4419      	add	r1, r3
 800c402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c404:	440b      	add	r3, r1
 800c406:	441a      	add	r2, r3
 800c408:	4b93      	ldr	r3, [pc, #588]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c40a:	4413      	add	r3, r2
 800c40c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c414:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c418:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, local.W[7]);
 800c41c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c424:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c428:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c42c:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800c430:	f8d7 508c 	ldr.w	r5, [r7, #140]	; 0x8c
 800c434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c438:	406b      	eors	r3, r5
 800c43a:	4023      	ands	r3, r4
 800c43c:	4043      	eors	r3, r0
 800c43e:	4419      	add	r1, r3
 800c440:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c442:	440b      	add	r3, r1
 800c444:	441a      	add	r2, r3
 800c446:	4b84      	ldr	r3, [pc, #528]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c448:	4413      	add	r3, r2
 800c44a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c44e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c452:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c456:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, local.W[8]);
 800c45a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c45e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c462:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c466:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c46a:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800c46e:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 800c472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c476:	406b      	eors	r3, r5
 800c478:	4023      	ands	r3, r4
 800c47a:	4043      	eors	r3, r0
 800c47c:	4419      	add	r1, r3
 800c47e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c480:	440b      	add	r3, r1
 800c482:	441a      	add	r2, r3
 800c484:	4b74      	ldr	r3, [pc, #464]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c486:	4413      	add	r3, r2
 800c488:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c48c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c490:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, local.W[9]);
 800c498:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c49c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4a0:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c4a4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800c4a8:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800c4ac:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800c4b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c4b4:	406b      	eors	r3, r5
 800c4b6:	4023      	ands	r3, r4
 800c4b8:	4043      	eors	r3, r0
 800c4ba:	4419      	add	r1, r3
 800c4bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4be:	440b      	add	r3, r1
 800c4c0:	441a      	add	r2, r3
 800c4c2:	4b65      	ldr	r3, [pc, #404]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c4c4:	4413      	add	r3, r2
 800c4c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c4ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4ce:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c4d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, local.W[10]);
 800c4d6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c4da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4de:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c4e2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c4e6:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800c4ea:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
 800c4ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c4f2:	406b      	eors	r3, r5
 800c4f4:	4023      	ands	r3, r4
 800c4f6:	4043      	eors	r3, r0
 800c4f8:	4419      	add	r1, r3
 800c4fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4fc:	440b      	add	r3, r1
 800c4fe:	441a      	add	r2, r3
 800c500:	4b55      	ldr	r3, [pc, #340]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c502:	4413      	add	r3, r2
 800c504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c508:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c50c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, local.W[11]);
 800c514:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c518:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c51c:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c520:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800c524:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800c528:	f8d7 5090 	ldr.w	r5, [r7, #144]	; 0x90
 800c52c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c530:	406b      	eors	r3, r5
 800c532:	4023      	ands	r3, r4
 800c534:	4043      	eors	r3, r0
 800c536:	4419      	add	r1, r3
 800c538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c53a:	440b      	add	r3, r1
 800c53c:	441a      	add	r2, r3
 800c53e:	4b46      	ldr	r3, [pc, #280]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c540:	4413      	add	r3, r2
 800c542:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c54a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c54e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, local.W[12]);
 800c552:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c55a:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c55e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c562:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800c566:	f8d7 508c 	ldr.w	r5, [r7, #140]	; 0x8c
 800c56a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c56e:	406b      	eors	r3, r5
 800c570:	4023      	ands	r3, r4
 800c572:	4043      	eors	r3, r0
 800c574:	4419      	add	r1, r3
 800c576:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c578:	440b      	add	r3, r1
 800c57a:	441a      	add	r2, r3
 800c57c:	4b36      	ldr	r3, [pc, #216]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c57e:	4413      	add	r3, r2
 800c580:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c588:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c58c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, local.W[13]);
 800c590:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c594:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c598:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c59c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c5a0:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800c5a4:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 800c5a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5ac:	406b      	eors	r3, r5
 800c5ae:	4023      	ands	r3, r4
 800c5b0:	4043      	eors	r3, r0
 800c5b2:	4419      	add	r1, r3
 800c5b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c5b8:	440b      	add	r3, r1
 800c5ba:	441a      	add	r2, r3
 800c5bc:	4b26      	ldr	r3, [pc, #152]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c5be:	4413      	add	r3, r2
 800c5c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c5c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5c8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c5cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, local.W[14]);
 800c5d0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c5d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c5d8:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c5dc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800c5e0:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800c5e4:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800c5e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5ec:	406b      	eors	r3, r5
 800c5ee:	4023      	ands	r3, r4
 800c5f0:	4043      	eors	r3, r0
 800c5f2:	4419      	add	r1, r3
 800c5f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c5f8:	440b      	add	r3, r1
 800c5fa:	441a      	add	r2, r3
 800c5fc:	4b16      	ldr	r3, [pc, #88]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c5fe:	4413      	add	r3, r2
 800c600:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c604:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c608:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c60c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, local.W[15]);
 800c610:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c614:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c618:	ea4f 61f3 	mov.w	r1, r3, ror #27
 800c61c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c620:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800c624:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
 800c628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c62c:	406b      	eors	r3, r5
 800c62e:	4023      	ands	r3, r4
 800c630:	4043      	eors	r3, r0
 800c632:	4419      	add	r1, r3
 800c634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c638:	440b      	add	r3, r1
 800c63a:	441a      	add	r2, r3
 800c63c:	4b06      	ldr	r3, [pc, #24]	; (800c658 <mbedtls_internal_sha1_process+0x584>)
 800c63e:	4413      	add	r3, r2
 800c640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c648:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c64c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(16));
 800c650:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c654:	e002      	b.n	800c65c <mbedtls_internal_sha1_process+0x588>
 800c656:	bf00      	nop
 800c658:	5a827999 	.word	0x5a827999
 800c65c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c65e:	405a      	eors	r2, r3
 800c660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c662:	405a      	eors	r2, r3
 800c664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c666:	4053      	eors	r3, r2
 800c668:	64bb      	str	r3, [r7, #72]	; 0x48
 800c66a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c66e:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800c672:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800c676:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c67a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800c67e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c682:	4063      	eors	r3, r4
 800c684:	4003      	ands	r3, r0
 800c686:	404b      	eors	r3, r1
 800c688:	441a      	add	r2, r3
 800c68a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c68c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c690:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c694:	441a      	add	r2, r3
 800c696:	4bd3      	ldr	r3, [pc, #844]	; (800c9e4 <mbedtls_internal_sha1_process+0x910>)
 800c698:	4413      	add	r3, r2
 800c69a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c69e:	4413      	add	r3, r2
 800c6a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c6a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6a8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c6ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(17));
 800c6b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c6b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c6b6:	405a      	eors	r2, r3
 800c6b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6ba:	405a      	eors	r2, r3
 800c6bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6be:	4053      	eors	r3, r2
 800c6c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6c6:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800c6ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c6ce:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800c6d2:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800c6d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c6da:	4063      	eors	r3, r4
 800c6dc:	4003      	ands	r3, r0
 800c6de:	404b      	eors	r3, r1
 800c6e0:	441a      	add	r2, r3
 800c6e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6e4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c6e8:	653b      	str	r3, [r7, #80]	; 0x50
 800c6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6ec:	441a      	add	r2, r3
 800c6ee:	4bbd      	ldr	r3, [pc, #756]	; (800c9e4 <mbedtls_internal_sha1_process+0x910>)
 800c6f0:	4413      	add	r3, r2
 800c6f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c6f6:	4413      	add	r3, r2
 800c6f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c6fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c700:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(18));
 800c708:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c70c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c70e:	405a      	eors	r2, r3
 800c710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c712:	405a      	eors	r2, r3
 800c714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c716:	4053      	eors	r3, r2
 800c718:	64bb      	str	r3, [r7, #72]	; 0x48
 800c71a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c71e:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800c722:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c726:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c72a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800c72e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c732:	4063      	eors	r3, r4
 800c734:	4003      	ands	r3, r0
 800c736:	404b      	eors	r3, r1
 800c738:	441a      	add	r2, r3
 800c73a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c73c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c740:	657b      	str	r3, [r7, #84]	; 0x54
 800c742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c744:	441a      	add	r2, r3
 800c746:	4ba7      	ldr	r3, [pc, #668]	; (800c9e4 <mbedtls_internal_sha1_process+0x910>)
 800c748:	4413      	add	r3, r2
 800c74a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c74e:	4413      	add	r3, r2
 800c750:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c758:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c75c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(19));
 800c760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c764:	405a      	eors	r2, r3
 800c766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c768:	405a      	eors	r2, r3
 800c76a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c76c:	4053      	eors	r3, r2
 800c76e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c770:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c774:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800c778:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800c77c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800c780:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800c784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c788:	4063      	eors	r3, r4
 800c78a:	4003      	ands	r3, r0
 800c78c:	404b      	eors	r3, r1
 800c78e:	441a      	add	r2, r3
 800c790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c792:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c796:	65bb      	str	r3, [r7, #88]	; 0x58
 800c798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c79a:	441a      	add	r2, r3
 800c79c:	4b91      	ldr	r3, [pc, #580]	; (800c9e4 <mbedtls_internal_sha1_process+0x910>)
 800c79e:	4413      	add	r3, r2
 800c7a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c7a4:	4413      	add	r3, r2
 800c7a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c7aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c7ae:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c7b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#undef F

#define F(x, y, z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P(local.A, local.B, local.C, local.D, local.E, R(20));
 800c7b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c7b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c7ba:	405a      	eors	r2, r3
 800c7bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7be:	405a      	eors	r2, r3
 800c7c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7c2:	4053      	eors	r3, r2
 800c7c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7ca:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800c7ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c7d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c7d6:	4059      	eors	r1, r3
 800c7d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7dc:	404b      	eors	r3, r1
 800c7de:	441a      	add	r2, r3
 800c7e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7e2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c7e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7ea:	441a      	add	r2, r3
 800c7ec:	4b7e      	ldr	r3, [pc, #504]	; (800c9e8 <mbedtls_internal_sha1_process+0x914>)
 800c7ee:	4413      	add	r3, r2
 800c7f0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c7fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c7fe:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(21));
 800c806:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c808:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c80c:	405a      	eors	r2, r3
 800c80e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c810:	405a      	eors	r2, r3
 800c812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c814:	4053      	eors	r3, r2
 800c816:	64bb      	str	r3, [r7, #72]	; 0x48
 800c818:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c81c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800c820:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c824:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c828:	4059      	eors	r1, r3
 800c82a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c82e:	404b      	eors	r3, r1
 800c830:	441a      	add	r2, r3
 800c832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c834:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c838:	663b      	str	r3, [r7, #96]	; 0x60
 800c83a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c83c:	441a      	add	r2, r3
 800c83e:	4b6a      	ldr	r3, [pc, #424]	; (800c9e8 <mbedtls_internal_sha1_process+0x914>)
 800c840:	4413      	add	r3, r2
 800c842:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c846:	4413      	add	r3, r2
 800c848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c84c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c850:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c854:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(22));
 800c858:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c85a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c85e:	405a      	eors	r2, r3
 800c860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c862:	405a      	eors	r2, r3
 800c864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c866:	4053      	eors	r3, r2
 800c868:	64bb      	str	r3, [r7, #72]	; 0x48
 800c86a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c86e:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800c872:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800c876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c87a:	4059      	eors	r1, r3
 800c87c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c880:	404b      	eors	r3, r1
 800c882:	441a      	add	r2, r3
 800c884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c886:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c88a:	667b      	str	r3, [r7, #100]	; 0x64
 800c88c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c88e:	441a      	add	r2, r3
 800c890:	4b55      	ldr	r3, [pc, #340]	; (800c9e8 <mbedtls_internal_sha1_process+0x914>)
 800c892:	4413      	add	r3, r2
 800c894:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c898:	4413      	add	r3, r2
 800c89a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c89e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8a2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c8a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(23));
 800c8aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c8b0:	405a      	eors	r2, r3
 800c8b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c8b4:	405a      	eors	r2, r3
 800c8b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8b8:	4053      	eors	r3, r2
 800c8ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c8c0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800c8c4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800c8c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8cc:	4059      	eors	r1, r3
 800c8ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c8d2:	404b      	eors	r3, r1
 800c8d4:	441a      	add	r2, r3
 800c8d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8d8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c8dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8e0:	441a      	add	r2, r3
 800c8e2:	4b41      	ldr	r3, [pc, #260]	; (800c9e8 <mbedtls_internal_sha1_process+0x914>)
 800c8e4:	4413      	add	r3, r2
 800c8e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c8ea:	4413      	add	r3, r2
 800c8ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c8f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c8f4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c8f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(24));
 800c8fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c8fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c900:	405a      	eors	r2, r3
 800c902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c904:	405a      	eors	r2, r3
 800c906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c908:	4053      	eors	r3, r2
 800c90a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c90c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c910:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800c914:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800c918:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c91c:	4059      	eors	r1, r3
 800c91e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c922:	404b      	eors	r3, r1
 800c924:	441a      	add	r2, r3
 800c926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c928:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c92c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c92e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c930:	441a      	add	r2, r3
 800c932:	4b2d      	ldr	r3, [pc, #180]	; (800c9e8 <mbedtls_internal_sha1_process+0x914>)
 800c934:	4413      	add	r3, r2
 800c936:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c93a:	4413      	add	r3, r2
 800c93c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c940:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c944:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(25));
 800c94c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c94e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c950:	405a      	eors	r2, r3
 800c952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c954:	405a      	eors	r2, r3
 800c956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c958:	4053      	eors	r3, r2
 800c95a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c95c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c960:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800c964:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c968:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c96c:	4059      	eors	r1, r3
 800c96e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c972:	404b      	eors	r3, r1
 800c974:	441a      	add	r2, r3
 800c976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c978:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c97c:	673b      	str	r3, [r7, #112]	; 0x70
 800c97e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c980:	441a      	add	r2, r3
 800c982:	4b19      	ldr	r3, [pc, #100]	; (800c9e8 <mbedtls_internal_sha1_process+0x914>)
 800c984:	4413      	add	r3, r2
 800c986:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c98a:	4413      	add	r3, r2
 800c98c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c990:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c994:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(26));
 800c99c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c99e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9a0:	405a      	eors	r2, r3
 800c9a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c9a4:	405a      	eors	r2, r3
 800c9a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9a8:	4053      	eors	r3, r2
 800c9aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c9b0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800c9b4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c9b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c9bc:	4059      	eors	r1, r3
 800c9be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c9c2:	404b      	eors	r3, r1
 800c9c4:	441a      	add	r2, r3
 800c9c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9c8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c9cc:	677b      	str	r3, [r7, #116]	; 0x74
 800c9ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9d0:	441a      	add	r2, r3
 800c9d2:	4b05      	ldr	r3, [pc, #20]	; (800c9e8 <mbedtls_internal_sha1_process+0x914>)
 800c9d4:	4413      	add	r3, r2
 800c9d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c9da:	4413      	add	r3, r2
 800c9dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c9e0:	e004      	b.n	800c9ec <mbedtls_internal_sha1_process+0x918>
 800c9e2:	bf00      	nop
 800c9e4:	5a827999 	.word	0x5a827999
 800c9e8:	6ed9eba1 	.word	0x6ed9eba1
 800c9ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c9f0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800c9f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(27));
 800c9f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c9fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9fc:	405a      	eors	r2, r3
 800c9fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca02:	405a      	eors	r2, r3
 800ca04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca06:	4053      	eors	r3, r2
 800ca08:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ca0e:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800ca12:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800ca16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca1a:	4059      	eors	r1, r3
 800ca1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ca20:	404b      	eors	r3, r1
 800ca22:	441a      	add	r2, r3
 800ca24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca26:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800ca2a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ca2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca2e:	441a      	add	r2, r3
 800ca30:	4bd7      	ldr	r3, [pc, #860]	; (800cd90 <mbedtls_internal_sha1_process+0xcbc>)
 800ca32:	4413      	add	r3, r2
 800ca34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ca38:	4413      	add	r3, r2
 800ca3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ca3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ca42:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800ca46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(28));
 800ca4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ca4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca4e:	405a      	eors	r2, r3
 800ca50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca54:	405a      	eors	r2, r3
 800ca56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca58:	4053      	eors	r3, r2
 800ca5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca60:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800ca64:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800ca68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ca6c:	4059      	eors	r1, r3
 800ca6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca72:	404b      	eors	r3, r1
 800ca74:	441a      	add	r2, r3
 800ca76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca78:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800ca7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca80:	441a      	add	r2, r3
 800ca82:	4bc3      	ldr	r3, [pc, #780]	; (800cd90 <mbedtls_internal_sha1_process+0xcbc>)
 800ca84:	4413      	add	r3, r2
 800ca86:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ca94:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800ca98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(29));
 800ca9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ca9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800caa0:	405a      	eors	r2, r3
 800caa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800caa6:	405a      	eors	r2, r3
 800caa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800caac:	4053      	eors	r3, r2
 800caae:	64bb      	str	r3, [r7, #72]	; 0x48
 800cab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cab4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800cab8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800cabc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cac0:	4059      	eors	r1, r3
 800cac2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cac6:	404b      	eors	r3, r1
 800cac8:	441a      	add	r2, r3
 800caca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cacc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cad0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cad4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cad8:	441a      	add	r2, r3
 800cada:	4bad      	ldr	r3, [pc, #692]	; (800cd90 <mbedtls_internal_sha1_process+0xcbc>)
 800cadc:	4413      	add	r3, r2
 800cade:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cae2:	4413      	add	r3, r2
 800cae4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cae8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800caec:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800caf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(30));
 800caf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800caf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800caf8:	405a      	eors	r2, r3
 800cafa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cafc:	405a      	eors	r2, r3
 800cafe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb02:	4053      	eors	r3, r2
 800cb04:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb0a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800cb0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cb12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cb16:	4059      	eors	r1, r3
 800cb18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cb1c:	404b      	eors	r3, r1
 800cb1e:	441a      	add	r2, r3
 800cb20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb22:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cb26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb2e:	441a      	add	r2, r3
 800cb30:	4b97      	ldr	r3, [pc, #604]	; (800cd90 <mbedtls_internal_sha1_process+0xcbc>)
 800cb32:	4413      	add	r3, r2
 800cb34:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800cb38:	4413      	add	r3, r2
 800cb3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cb3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb42:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800cb46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(31));
 800cb4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cb4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb4e:	405a      	eors	r2, r3
 800cb50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb52:	405a      	eors	r2, r3
 800cb54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb58:	4053      	eors	r3, r2
 800cb5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cb60:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800cb64:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800cb68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb6c:	4059      	eors	r1, r3
 800cb6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cb72:	404b      	eors	r3, r1
 800cb74:	441a      	add	r2, r3
 800cb76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb78:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cb7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb84:	441a      	add	r2, r3
 800cb86:	4b82      	ldr	r3, [pc, #520]	; (800cd90 <mbedtls_internal_sha1_process+0xcbc>)
 800cb88:	4413      	add	r3, r2
 800cb8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cb8e:	4413      	add	r3, r2
 800cb90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cb94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb98:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800cb9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(32));
 800cba0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cba6:	405a      	eors	r2, r3
 800cba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbaa:	405a      	eors	r2, r3
 800cbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbae:	4053      	eors	r3, r2
 800cbb0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cbb6:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800cbba:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800cbbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cbc2:	4059      	eors	r1, r3
 800cbc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cbc8:	404b      	eors	r3, r1
 800cbca:	441a      	add	r2, r3
 800cbcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbce:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cbd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbd6:	441a      	add	r2, r3
 800cbd8:	4b6d      	ldr	r3, [pc, #436]	; (800cd90 <mbedtls_internal_sha1_process+0xcbc>)
 800cbda:	4413      	add	r3, r2
 800cbdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cbe6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cbea:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800cbee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(33));
 800cbf2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cbf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbf8:	405a      	eors	r2, r3
 800cbfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cbfc:	405a      	eors	r2, r3
 800cbfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc00:	4053      	eors	r3, r2
 800cc02:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cc08:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800cc0c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800cc10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cc14:	4059      	eors	r1, r3
 800cc16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc1a:	404b      	eors	r3, r1
 800cc1c:	441a      	add	r2, r3
 800cc1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc20:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cc24:	653b      	str	r3, [r7, #80]	; 0x50
 800cc26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc28:	441a      	add	r2, r3
 800cc2a:	4b59      	ldr	r3, [pc, #356]	; (800cd90 <mbedtls_internal_sha1_process+0xcbc>)
 800cc2c:	4413      	add	r3, r2
 800cc2e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cc32:	4413      	add	r3, r2
 800cc34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cc38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc3c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800cc40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(34));
 800cc44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cc48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc4a:	405a      	eors	r2, r3
 800cc4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc4e:	405a      	eors	r2, r3
 800cc50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc52:	4053      	eors	r3, r2
 800cc54:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cc5a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800cc5e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800cc62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc66:	4059      	eors	r1, r3
 800cc68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cc6c:	404b      	eors	r3, r1
 800cc6e:	441a      	add	r2, r3
 800cc70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc72:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cc76:	657b      	str	r3, [r7, #84]	; 0x54
 800cc78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc7a:	441a      	add	r2, r3
 800cc7c:	4b44      	ldr	r3, [pc, #272]	; (800cd90 <mbedtls_internal_sha1_process+0xcbc>)
 800cc7e:	4413      	add	r3, r2
 800cc80:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cc84:	4413      	add	r3, r2
 800cc86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cc8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cc8e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800cc92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(35));
 800cc96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc9a:	405a      	eors	r2, r3
 800cc9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc9e:	405a      	eors	r2, r3
 800cca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cca2:	4053      	eors	r3, r2
 800cca4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ccaa:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800ccae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ccb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ccb6:	4059      	eors	r1, r3
 800ccb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ccbc:	404b      	eors	r3, r1
 800ccbe:	441a      	add	r2, r3
 800ccc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccc2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800ccc6:	65bb      	str	r3, [r7, #88]	; 0x58
 800ccc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccca:	441a      	add	r2, r3
 800cccc:	4b30      	ldr	r3, [pc, #192]	; (800cd90 <mbedtls_internal_sha1_process+0xcbc>)
 800ccce:	4413      	add	r3, r2
 800ccd0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ccd4:	4413      	add	r3, r2
 800ccd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ccda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ccde:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800cce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(36));
 800cce6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cce8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ccea:	405a      	eors	r2, r3
 800ccec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccee:	405a      	eors	r2, r3
 800ccf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccf2:	4053      	eors	r3, r2
 800ccf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ccfa:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800ccfe:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800cd02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd06:	4059      	eors	r1, r3
 800cd08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cd0c:	404b      	eors	r3, r1
 800cd0e:	441a      	add	r2, r3
 800cd10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd12:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cd16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd1a:	441a      	add	r2, r3
 800cd1c:	4b1c      	ldr	r3, [pc, #112]	; (800cd90 <mbedtls_internal_sha1_process+0xcbc>)
 800cd1e:	4413      	add	r3, r2
 800cd20:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cd24:	4413      	add	r3, r2
 800cd26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cd2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd2e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800cd32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(37));
 800cd36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd3c:	405a      	eors	r2, r3
 800cd3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd40:	405a      	eors	r2, r3
 800cd42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd44:	4053      	eors	r3, r2
 800cd46:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cd4c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800cd50:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800cd54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd58:	4059      	eors	r1, r3
 800cd5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd5e:	404b      	eors	r3, r1
 800cd60:	441a      	add	r2, r3
 800cd62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd64:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cd68:	663b      	str	r3, [r7, #96]	; 0x60
 800cd6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd6c:	441a      	add	r2, r3
 800cd6e:	4b08      	ldr	r3, [pc, #32]	; (800cd90 <mbedtls_internal_sha1_process+0xcbc>)
 800cd70:	4413      	add	r3, r2
 800cd72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cd76:	4413      	add	r3, r2
 800cd78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cd7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd80:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800cd84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(38));
 800cd88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cd8e:	e001      	b.n	800cd94 <mbedtls_internal_sha1_process+0xcc0>
 800cd90:	6ed9eba1 	.word	0x6ed9eba1
 800cd94:	405a      	eors	r2, r3
 800cd96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd98:	405a      	eors	r2, r3
 800cd9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd9c:	4053      	eors	r3, r2
 800cd9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cda0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cda4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800cda8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800cdac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cdb0:	4059      	eors	r1, r3
 800cdb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cdb6:	404b      	eors	r3, r1
 800cdb8:	441a      	add	r2, r3
 800cdba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdbc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cdc0:	667b      	str	r3, [r7, #100]	; 0x64
 800cdc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdc4:	441a      	add	r2, r3
 800cdc6:	4bdb      	ldr	r3, [pc, #876]	; (800d134 <mbedtls_internal_sha1_process+0x1060>)
 800cdc8:	4413      	add	r3, r2
 800cdca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cdce:	4413      	add	r3, r2
 800cdd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cdd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cdd8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800cddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(39));
 800cde0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cde2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cde6:	405a      	eors	r2, r3
 800cde8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cdea:	405a      	eors	r2, r3
 800cdec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdee:	4053      	eors	r3, r2
 800cdf0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cdf6:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800cdfa:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800cdfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce02:	4059      	eors	r1, r3
 800ce04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ce08:	404b      	eors	r3, r1
 800ce0a:	441a      	add	r2, r3
 800ce0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce0e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800ce12:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce16:	441a      	add	r2, r3
 800ce18:	4bc6      	ldr	r3, [pc, #792]	; (800d134 <mbedtls_internal_sha1_process+0x1060>)
 800ce1a:	4413      	add	r3, r2
 800ce1c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ce20:	4413      	add	r3, r2
 800ce22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ce26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce2a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800ce2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#undef F

#define F(x, y, z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P(local.A, local.B, local.C, local.D, local.E, R(40));
 800ce32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce36:	405a      	eors	r2, r3
 800ce38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce3a:	405a      	eors	r2, r3
 800ce3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce3e:	4053      	eors	r3, r2
 800ce40:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce46:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800ce4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ce4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce52:	4019      	ands	r1, r3
 800ce54:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ce58:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800ce5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce60:	4323      	orrs	r3, r4
 800ce62:	4003      	ands	r3, r0
 800ce64:	430b      	orrs	r3, r1
 800ce66:	441a      	add	r2, r3
 800ce68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce6a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800ce6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ce70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce72:	441a      	add	r2, r3
 800ce74:	4bb0      	ldr	r3, [pc, #704]	; (800d138 <mbedtls_internal_sha1_process+0x1064>)
 800ce76:	4413      	add	r3, r2
 800ce78:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ce7c:	4413      	add	r3, r2
 800ce7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ce82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce86:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800ce8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(41));
 800ce8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ce90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce92:	405a      	eors	r2, r3
 800ce94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce96:	405a      	eors	r2, r3
 800ce98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce9a:	4053      	eors	r3, r2
 800ce9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cea2:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800cea6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ceaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ceae:	4019      	ands	r1, r3
 800ceb0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800ceb4:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800ceb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cebc:	4323      	orrs	r3, r4
 800cebe:	4003      	ands	r3, r0
 800cec0:	430b      	orrs	r3, r1
 800cec2:	441a      	add	r2, r3
 800cec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cec6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800ceca:	673b      	str	r3, [r7, #112]	; 0x70
 800cecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cece:	441a      	add	r2, r3
 800ced0:	4b99      	ldr	r3, [pc, #612]	; (800d138 <mbedtls_internal_sha1_process+0x1064>)
 800ced2:	4413      	add	r3, r2
 800ced4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ced8:	4413      	add	r3, r2
 800ceda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cee2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800cee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(42));
 800ceea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ceec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceee:	405a      	eors	r2, r3
 800cef0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cef2:	405a      	eors	r2, r3
 800cef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cef6:	4053      	eors	r3, r2
 800cef8:	64bb      	str	r3, [r7, #72]	; 0x48
 800cefa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cefe:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800cf02:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800cf06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf0a:	4019      	ands	r1, r3
 800cf0c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800cf10:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800cf14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf18:	4323      	orrs	r3, r4
 800cf1a:	4003      	ands	r3, r0
 800cf1c:	430b      	orrs	r3, r1
 800cf1e:	441a      	add	r2, r3
 800cf20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf22:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cf26:	677b      	str	r3, [r7, #116]	; 0x74
 800cf28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf2a:	441a      	add	r2, r3
 800cf2c:	4b82      	ldr	r3, [pc, #520]	; (800d138 <mbedtls_internal_sha1_process+0x1064>)
 800cf2e:	4413      	add	r3, r2
 800cf30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cf34:	4413      	add	r3, r2
 800cf36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf3e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800cf42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(43));
 800cf46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf4a:	405a      	eors	r2, r3
 800cf4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cf50:	405a      	eors	r2, r3
 800cf52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf54:	4053      	eors	r3, r2
 800cf56:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf5c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800cf60:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800cf64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf68:	4019      	ands	r1, r3
 800cf6a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800cf6e:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800cf72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf76:	4323      	orrs	r3, r4
 800cf78:	4003      	ands	r3, r0
 800cf7a:	430b      	orrs	r3, r1
 800cf7c:	441a      	add	r2, r3
 800cf7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf80:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cf84:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf88:	441a      	add	r2, r3
 800cf8a:	4b6b      	ldr	r3, [pc, #428]	; (800d138 <mbedtls_internal_sha1_process+0x1064>)
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cf92:	4413      	add	r3, r2
 800cf94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cf98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf9c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800cfa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(44));
 800cfa4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cfa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfa8:	405a      	eors	r2, r3
 800cfaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cfae:	405a      	eors	r2, r3
 800cfb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cfb2:	4053      	eors	r3, r2
 800cfb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cfba:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800cfbe:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800cfc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cfc6:	4019      	ands	r1, r3
 800cfc8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800cfcc:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800cfd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cfd4:	4323      	orrs	r3, r4
 800cfd6:	4003      	ands	r3, r0
 800cfd8:	430b      	orrs	r3, r1
 800cfda:	441a      	add	r2, r3
 800cfdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfde:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cfe2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cfe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cfe6:	441a      	add	r2, r3
 800cfe8:	4b53      	ldr	r3, [pc, #332]	; (800d138 <mbedtls_internal_sha1_process+0x1064>)
 800cfea:	4413      	add	r3, r2
 800cfec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cff0:	4413      	add	r3, r2
 800cff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cff6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cffa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800cffe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(45));
 800d002:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d006:	405a      	eors	r2, r3
 800d008:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d00c:	405a      	eors	r2, r3
 800d00e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d012:	4053      	eors	r3, r2
 800d014:	64bb      	str	r3, [r7, #72]	; 0x48
 800d016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d01a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d01e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d022:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d026:	4019      	ands	r1, r3
 800d028:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800d02c:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800d030:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d034:	4323      	orrs	r3, r4
 800d036:	4003      	ands	r3, r0
 800d038:	430b      	orrs	r3, r1
 800d03a:	441a      	add	r2, r3
 800d03c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d03e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d042:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d046:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d04a:	441a      	add	r2, r3
 800d04c:	4b3a      	ldr	r3, [pc, #232]	; (800d138 <mbedtls_internal_sha1_process+0x1064>)
 800d04e:	4413      	add	r3, r2
 800d050:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d054:	4413      	add	r3, r2
 800d056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d05a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d05e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(46));
 800d066:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d06a:	405a      	eors	r2, r3
 800d06c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d06e:	405a      	eors	r2, r3
 800d070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d074:	4053      	eors	r3, r2
 800d076:	64bb      	str	r3, [r7, #72]	; 0x48
 800d078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d07c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d080:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d084:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d088:	4019      	ands	r1, r3
 800d08a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d08e:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800d092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d096:	4323      	orrs	r3, r4
 800d098:	4003      	ands	r3, r0
 800d09a:	430b      	orrs	r3, r1
 800d09c:	441a      	add	r2, r3
 800d09e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0a0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d0a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d0a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d0ac:	441a      	add	r2, r3
 800d0ae:	4b22      	ldr	r3, [pc, #136]	; (800d138 <mbedtls_internal_sha1_process+0x1064>)
 800d0b0:	4413      	add	r3, r2
 800d0b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d0b6:	4413      	add	r3, r2
 800d0b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d0bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d0c0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d0c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(47));
 800d0c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d0ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0cc:	405a      	eors	r2, r3
 800d0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0d0:	405a      	eors	r2, r3
 800d0d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d0d6:	4053      	eors	r3, r2
 800d0d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d0de:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d0e2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800d0e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d0ea:	4019      	ands	r1, r3
 800d0ec:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d0f0:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800d0f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d0f8:	4323      	orrs	r3, r4
 800d0fa:	4003      	ands	r3, r0
 800d0fc:	430b      	orrs	r3, r1
 800d0fe:	441a      	add	r2, r3
 800d100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d102:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d10a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d10e:	441a      	add	r2, r3
 800d110:	4b09      	ldr	r3, [pc, #36]	; (800d138 <mbedtls_internal_sha1_process+0x1064>)
 800d112:	4413      	add	r3, r2
 800d114:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d118:	4413      	add	r3, r2
 800d11a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d11e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d122:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(48));
 800d12a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d12e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d130:	405a      	eors	r2, r3
 800d132:	e003      	b.n	800d13c <mbedtls_internal_sha1_process+0x1068>
 800d134:	6ed9eba1 	.word	0x6ed9eba1
 800d138:	8f1bbcdc 	.word	0x8f1bbcdc
 800d13c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d13e:	405a      	eors	r2, r3
 800d140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d142:	4053      	eors	r3, r2
 800d144:	64bb      	str	r3, [r7, #72]	; 0x48
 800d146:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d14a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d14e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d152:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d156:	4019      	ands	r1, r3
 800d158:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d15c:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800d160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d164:	4323      	orrs	r3, r4
 800d166:	4003      	ands	r3, r0
 800d168:	430b      	orrs	r3, r1
 800d16a:	441a      	add	r2, r3
 800d16c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d16e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d172:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d176:	441a      	add	r2, r3
 800d178:	4bd7      	ldr	r3, [pc, #860]	; (800d4d8 <mbedtls_internal_sha1_process+0x1404>)
 800d17a:	4413      	add	r3, r2
 800d17c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d180:	4413      	add	r3, r2
 800d182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d186:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d18a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d18e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(49));
 800d192:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d198:	405a      	eors	r2, r3
 800d19a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d19c:	405a      	eors	r2, r3
 800d19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1a0:	4053      	eors	r3, r2
 800d1a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1a8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d1ac:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d1b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d1b4:	4019      	ands	r1, r3
 800d1b6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800d1ba:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800d1be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d1c2:	4323      	orrs	r3, r4
 800d1c4:	4003      	ands	r3, r0
 800d1c6:	430b      	orrs	r3, r1
 800d1c8:	441a      	add	r2, r3
 800d1ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1cc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d1d0:	653b      	str	r3, [r7, #80]	; 0x50
 800d1d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1d4:	441a      	add	r2, r3
 800d1d6:	4bc0      	ldr	r3, [pc, #768]	; (800d4d8 <mbedtls_internal_sha1_process+0x1404>)
 800d1d8:	4413      	add	r3, r2
 800d1da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d1de:	4413      	add	r3, r2
 800d1e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d1e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d1e8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d1ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(50));
 800d1f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d1f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1f6:	405a      	eors	r2, r3
 800d1f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1fa:	405a      	eors	r2, r3
 800d1fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1fe:	4053      	eors	r3, r2
 800d200:	64bb      	str	r3, [r7, #72]	; 0x48
 800d202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d206:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d20a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d20e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d212:	4019      	ands	r1, r3
 800d214:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800d218:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800d21c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d220:	4323      	orrs	r3, r4
 800d222:	4003      	ands	r3, r0
 800d224:	430b      	orrs	r3, r1
 800d226:	441a      	add	r2, r3
 800d228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d22a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d22e:	657b      	str	r3, [r7, #84]	; 0x54
 800d230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d232:	441a      	add	r2, r3
 800d234:	4ba8      	ldr	r3, [pc, #672]	; (800d4d8 <mbedtls_internal_sha1_process+0x1404>)
 800d236:	4413      	add	r3, r2
 800d238:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d23c:	4413      	add	r3, r2
 800d23e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d242:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d246:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d24a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(51));
 800d24e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d252:	405a      	eors	r2, r3
 800d254:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d256:	405a      	eors	r2, r3
 800d258:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d25a:	4053      	eors	r3, r2
 800d25c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d25e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d262:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d266:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d26a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d26e:	4019      	ands	r1, r3
 800d270:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d274:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800d278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d27c:	4323      	orrs	r3, r4
 800d27e:	4003      	ands	r3, r0
 800d280:	430b      	orrs	r3, r1
 800d282:	441a      	add	r2, r3
 800d284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d286:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d28a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d28c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d28e:	441a      	add	r2, r3
 800d290:	4b91      	ldr	r3, [pc, #580]	; (800d4d8 <mbedtls_internal_sha1_process+0x1404>)
 800d292:	4413      	add	r3, r2
 800d294:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d298:	4413      	add	r3, r2
 800d29a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d29e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2a2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d2a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(52));
 800d2aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d2ae:	405a      	eors	r2, r3
 800d2b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2b2:	405a      	eors	r2, r3
 800d2b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2b6:	4053      	eors	r3, r2
 800d2b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d2be:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d2c2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800d2c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2ca:	4019      	ands	r1, r3
 800d2cc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d2d0:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800d2d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2d8:	4323      	orrs	r3, r4
 800d2da:	4003      	ands	r3, r0
 800d2dc:	430b      	orrs	r3, r1
 800d2de:	441a      	add	r2, r3
 800d2e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2e2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d2e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2ea:	441a      	add	r2, r3
 800d2ec:	4b7a      	ldr	r3, [pc, #488]	; (800d4d8 <mbedtls_internal_sha1_process+0x1404>)
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d2f4:	4413      	add	r3, r2
 800d2f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d2fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d2fe:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(53));
 800d306:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d30c:	405a      	eors	r2, r3
 800d30e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d310:	405a      	eors	r2, r3
 800d312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d314:	4053      	eors	r3, r2
 800d316:	64bb      	str	r3, [r7, #72]	; 0x48
 800d318:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d31c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d320:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d328:	4019      	ands	r1, r3
 800d32a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d32e:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800d332:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d336:	4323      	orrs	r3, r4
 800d338:	4003      	ands	r3, r0
 800d33a:	430b      	orrs	r3, r1
 800d33c:	441a      	add	r2, r3
 800d33e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d340:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d344:	663b      	str	r3, [r7, #96]	; 0x60
 800d346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d348:	441a      	add	r2, r3
 800d34a:	4b63      	ldr	r3, [pc, #396]	; (800d4d8 <mbedtls_internal_sha1_process+0x1404>)
 800d34c:	4413      	add	r3, r2
 800d34e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d352:	4413      	add	r3, r2
 800d354:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d35c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(54));
 800d364:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d366:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d36a:	405a      	eors	r2, r3
 800d36c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d36e:	405a      	eors	r2, r3
 800d370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d372:	4053      	eors	r3, r2
 800d374:	64bb      	str	r3, [r7, #72]	; 0x48
 800d376:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d37a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d37e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d382:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d386:	4019      	ands	r1, r3
 800d388:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800d38c:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800d390:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d394:	4323      	orrs	r3, r4
 800d396:	4003      	ands	r3, r0
 800d398:	430b      	orrs	r3, r1
 800d39a:	441a      	add	r2, r3
 800d39c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d39e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d3a2:	667b      	str	r3, [r7, #100]	; 0x64
 800d3a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3a6:	441a      	add	r2, r3
 800d3a8:	4b4b      	ldr	r3, [pc, #300]	; (800d4d8 <mbedtls_internal_sha1_process+0x1404>)
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d3b0:	4413      	add	r3, r2
 800d3b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d3b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3ba:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d3be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(55));
 800d3c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d3c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d3c8:	405a      	eors	r2, r3
 800d3ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3cc:	405a      	eors	r2, r3
 800d3ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3d0:	4053      	eors	r3, r2
 800d3d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d3d8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d3dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d3e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3e4:	4019      	ands	r1, r3
 800d3e6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800d3ea:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800d3ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3f2:	4323      	orrs	r3, r4
 800d3f4:	4003      	ands	r3, r0
 800d3f6:	430b      	orrs	r3, r1
 800d3f8:	441a      	add	r2, r3
 800d3fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3fc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d400:	66bb      	str	r3, [r7, #104]	; 0x68
 800d402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d404:	441a      	add	r2, r3
 800d406:	4b34      	ldr	r3, [pc, #208]	; (800d4d8 <mbedtls_internal_sha1_process+0x1404>)
 800d408:	4413      	add	r3, r2
 800d40a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d40e:	4413      	add	r3, r2
 800d410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d418:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d41c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(56));
 800d420:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d424:	405a      	eors	r2, r3
 800d426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d428:	405a      	eors	r2, r3
 800d42a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d42c:	4053      	eors	r3, r2
 800d42e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d434:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d438:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d43c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d440:	4019      	ands	r1, r3
 800d442:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d446:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 800d44a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d44e:	4323      	orrs	r3, r4
 800d450:	4003      	ands	r3, r0
 800d452:	430b      	orrs	r3, r1
 800d454:	441a      	add	r2, r3
 800d456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d458:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d45c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d45e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d460:	441a      	add	r2, r3
 800d462:	4b1d      	ldr	r3, [pc, #116]	; (800d4d8 <mbedtls_internal_sha1_process+0x1404>)
 800d464:	4413      	add	r3, r2
 800d466:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d46a:	4413      	add	r3, r2
 800d46c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d474:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d478:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(57));
 800d47c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d480:	405a      	eors	r2, r3
 800d482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d484:	405a      	eors	r2, r3
 800d486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d488:	4053      	eors	r3, r2
 800d48a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d48c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d490:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d494:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800d498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d49c:	4019      	ands	r1, r3
 800d49e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d4a2:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800d4a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4aa:	4323      	orrs	r3, r4
 800d4ac:	4003      	ands	r3, r0
 800d4ae:	430b      	orrs	r3, r1
 800d4b0:	441a      	add	r2, r3
 800d4b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4b4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d4b8:	673b      	str	r3, [r7, #112]	; 0x70
 800d4ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d4bc:	441a      	add	r2, r3
 800d4be:	4b06      	ldr	r3, [pc, #24]	; (800d4d8 <mbedtls_internal_sha1_process+0x1404>)
 800d4c0:	4413      	add	r3, r2
 800d4c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d4cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d4d0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d4d4:	e002      	b.n	800d4dc <mbedtls_internal_sha1_process+0x1408>
 800d4d6:	bf00      	nop
 800d4d8:	8f1bbcdc 	.word	0x8f1bbcdc
 800d4dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(58));
 800d4e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d4e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4e4:	405a      	eors	r2, r3
 800d4e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4e8:	405a      	eors	r2, r3
 800d4ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4ec:	4053      	eors	r3, r2
 800d4ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d4f4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d4f8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d4fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d500:	4019      	ands	r1, r3
 800d502:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d506:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800d50a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d50e:	4323      	orrs	r3, r4
 800d510:	4003      	ands	r3, r0
 800d512:	430b      	orrs	r3, r1
 800d514:	441a      	add	r2, r3
 800d516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d518:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d51c:	677b      	str	r3, [r7, #116]	; 0x74
 800d51e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d520:	441a      	add	r2, r3
 800d522:	4bd8      	ldr	r3, [pc, #864]	; (800d884 <mbedtls_internal_sha1_process+0x17b0>)
 800d524:	4413      	add	r3, r2
 800d526:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d52a:	4413      	add	r3, r2
 800d52c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d530:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d534:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(59));
 800d53c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d53e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d540:	405a      	eors	r2, r3
 800d542:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d546:	405a      	eors	r2, r3
 800d548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d54a:	4053      	eors	r3, r2
 800d54c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d54e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d552:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d556:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d55a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d55e:	4019      	ands	r1, r3
 800d560:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800d564:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800d568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d56c:	4323      	orrs	r3, r4
 800d56e:	4003      	ands	r3, r0
 800d570:	430b      	orrs	r3, r1
 800d572:	441a      	add	r2, r3
 800d574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d576:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d57a:	67bb      	str	r3, [r7, #120]	; 0x78
 800d57c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d57e:	441a      	add	r2, r3
 800d580:	4bc0      	ldr	r3, [pc, #768]	; (800d884 <mbedtls_internal_sha1_process+0x17b0>)
 800d582:	4413      	add	r3, r2
 800d584:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d588:	4413      	add	r3, r2
 800d58a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d58e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d592:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#undef F

#define F(x, y, z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P(local.A, local.B, local.C, local.D, local.E, R(60));
 800d59a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d59c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d59e:	405a      	eors	r2, r3
 800d5a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5a4:	405a      	eors	r2, r3
 800d5a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5a8:	4053      	eors	r3, r2
 800d5aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5b0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d5b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d5b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d5bc:	4059      	eors	r1, r3
 800d5be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5c2:	404b      	eors	r3, r1
 800d5c4:	441a      	add	r2, r3
 800d5c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5c8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d5cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d5ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5d0:	441a      	add	r2, r3
 800d5d2:	4bad      	ldr	r3, [pc, #692]	; (800d888 <mbedtls_internal_sha1_process+0x17b4>)
 800d5d4:	4413      	add	r3, r2
 800d5d6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d5da:	4413      	add	r3, r2
 800d5dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d5e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d5e4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d5e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(61));
 800d5ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d5ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5f0:	405a      	eors	r2, r3
 800d5f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d5f6:	405a      	eors	r2, r3
 800d5f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d5fc:	4053      	eors	r3, r2
 800d5fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800d600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d604:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d608:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d60c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d610:	4059      	eors	r1, r3
 800d612:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d616:	404b      	eors	r3, r1
 800d618:	441a      	add	r2, r3
 800d61a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d61c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d624:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d628:	441a      	add	r2, r3
 800d62a:	4b97      	ldr	r3, [pc, #604]	; (800d888 <mbedtls_internal_sha1_process+0x17b4>)
 800d62c:	4413      	add	r3, r2
 800d62e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d632:	4413      	add	r3, r2
 800d634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d63c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d640:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(62));
 800d644:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d646:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d648:	405a      	eors	r2, r3
 800d64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d64c:	405a      	eors	r2, r3
 800d64e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d652:	4053      	eors	r3, r2
 800d654:	64bb      	str	r3, [r7, #72]	; 0x48
 800d656:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d65a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d65e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800d662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d666:	4059      	eors	r1, r3
 800d668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d66c:	404b      	eors	r3, r1
 800d66e:	441a      	add	r2, r3
 800d670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d672:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d67a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d67e:	441a      	add	r2, r3
 800d680:	4b81      	ldr	r3, [pc, #516]	; (800d888 <mbedtls_internal_sha1_process+0x17b4>)
 800d682:	4413      	add	r3, r2
 800d684:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d688:	4413      	add	r3, r2
 800d68a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d68e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d692:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(63));
 800d69a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d69c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d69e:	405a      	eors	r2, r3
 800d6a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6a2:	405a      	eors	r2, r3
 800d6a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6a8:	4053      	eors	r3, r2
 800d6aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800d6ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d6b0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d6b4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d6b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d6bc:	4059      	eors	r1, r3
 800d6be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6c2:	404b      	eors	r3, r1
 800d6c4:	441a      	add	r2, r3
 800d6c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6c8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d6cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d6d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6d4:	441a      	add	r2, r3
 800d6d6:	4b6c      	ldr	r3, [pc, #432]	; (800d888 <mbedtls_internal_sha1_process+0x17b4>)
 800d6d8:	4413      	add	r3, r2
 800d6da:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d6de:	4413      	add	r3, r2
 800d6e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d6e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6e8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d6ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(64));
 800d6f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d6f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6f6:	405a      	eors	r2, r3
 800d6f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6fa:	405a      	eors	r2, r3
 800d6fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6fe:	4053      	eors	r3, r2
 800d700:	64bb      	str	r3, [r7, #72]	; 0x48
 800d702:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d706:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d70a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d70e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d712:	4059      	eors	r1, r3
 800d714:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d718:	404b      	eors	r3, r1
 800d71a:	441a      	add	r2, r3
 800d71c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d71e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d722:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d726:	441a      	add	r2, r3
 800d728:	4b57      	ldr	r3, [pc, #348]	; (800d888 <mbedtls_internal_sha1_process+0x17b4>)
 800d72a:	4413      	add	r3, r2
 800d72c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d730:	4413      	add	r3, r2
 800d732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d736:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d73a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d73e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(65));
 800d742:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d748:	405a      	eors	r2, r3
 800d74a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d74c:	405a      	eors	r2, r3
 800d74e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d750:	4053      	eors	r3, r2
 800d752:	64bb      	str	r3, [r7, #72]	; 0x48
 800d754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d758:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d75c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d760:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d764:	4059      	eors	r1, r3
 800d766:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d76a:	404b      	eors	r3, r1
 800d76c:	441a      	add	r2, r3
 800d76e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d770:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d774:	653b      	str	r3, [r7, #80]	; 0x50
 800d776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d778:	441a      	add	r2, r3
 800d77a:	4b43      	ldr	r3, [pc, #268]	; (800d888 <mbedtls_internal_sha1_process+0x17b4>)
 800d77c:	4413      	add	r3, r2
 800d77e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d782:	4413      	add	r3, r2
 800d784:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d78c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d790:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(66));
 800d794:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d79a:	405a      	eors	r2, r3
 800d79c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d79e:	405a      	eors	r2, r3
 800d7a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7a2:	4053      	eors	r3, r2
 800d7a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d7aa:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d7ae:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d7b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7b6:	4059      	eors	r1, r3
 800d7b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7bc:	404b      	eors	r3, r1
 800d7be:	441a      	add	r2, r3
 800d7c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7c2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d7c6:	657b      	str	r3, [r7, #84]	; 0x54
 800d7c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7ca:	441a      	add	r2, r3
 800d7cc:	4b2e      	ldr	r3, [pc, #184]	; (800d888 <mbedtls_internal_sha1_process+0x17b4>)
 800d7ce:	4413      	add	r3, r2
 800d7d0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d7d4:	4413      	add	r3, r2
 800d7d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d7da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7de:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d7e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(67));
 800d7e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7ea:	405a      	eors	r2, r3
 800d7ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7ee:	405a      	eors	r2, r3
 800d7f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7f2:	4053      	eors	r3, r2
 800d7f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d7fa:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d7fe:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800d802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d806:	4059      	eors	r1, r3
 800d808:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d80c:	404b      	eors	r3, r1
 800d80e:	441a      	add	r2, r3
 800d810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d812:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d816:	65bb      	str	r3, [r7, #88]	; 0x58
 800d818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d81a:	441a      	add	r2, r3
 800d81c:	4b1a      	ldr	r3, [pc, #104]	; (800d888 <mbedtls_internal_sha1_process+0x17b4>)
 800d81e:	4413      	add	r3, r2
 800d820:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d824:	4413      	add	r3, r2
 800d826:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d82a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d82e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(68));
 800d836:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d838:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d83a:	405a      	eors	r2, r3
 800d83c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d83e:	405a      	eors	r2, r3
 800d840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d842:	4053      	eors	r3, r2
 800d844:	64bb      	str	r3, [r7, #72]	; 0x48
 800d846:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d84a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d84e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d852:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d856:	4059      	eors	r1, r3
 800d858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d85c:	404b      	eors	r3, r1
 800d85e:	441a      	add	r2, r3
 800d860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d862:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d866:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d86a:	441a      	add	r2, r3
 800d86c:	4b06      	ldr	r3, [pc, #24]	; (800d888 <mbedtls_internal_sha1_process+0x17b4>)
 800d86e:	4413      	add	r3, r2
 800d870:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d874:	4413      	add	r3, r2
 800d876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d87a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d87e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d882:	e003      	b.n	800d88c <mbedtls_internal_sha1_process+0x17b8>
 800d884:	8f1bbcdc 	.word	0x8f1bbcdc
 800d888:	ca62c1d6 	.word	0xca62c1d6
 800d88c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(69));
 800d890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d892:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d896:	405a      	eors	r2, r3
 800d898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d89a:	405a      	eors	r2, r3
 800d89c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d89e:	4053      	eors	r3, r2
 800d8a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8a6:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d8aa:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d8ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8b2:	4059      	eors	r1, r3
 800d8b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d8b8:	404b      	eors	r3, r1
 800d8ba:	441a      	add	r2, r3
 800d8bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8be:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d8c2:	663b      	str	r3, [r7, #96]	; 0x60
 800d8c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8c6:	441a      	add	r2, r3
 800d8c8:	4bd6      	ldr	r3, [pc, #856]	; (800dc24 <mbedtls_internal_sha1_process+0x1b50>)
 800d8ca:	4413      	add	r3, r2
 800d8cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d8d0:	4413      	add	r3, r2
 800d8d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d8d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8da:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d8de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(70));
 800d8e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d8e8:	405a      	eors	r2, r3
 800d8ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8ec:	405a      	eors	r2, r3
 800d8ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8f0:	4053      	eors	r3, r2
 800d8f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8f8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d8fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d900:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d904:	4059      	eors	r1, r3
 800d906:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d90a:	404b      	eors	r3, r1
 800d90c:	441a      	add	r2, r3
 800d90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d910:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d914:	667b      	str	r3, [r7, #100]	; 0x64
 800d916:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d918:	441a      	add	r2, r3
 800d91a:	4bc2      	ldr	r3, [pc, #776]	; (800dc24 <mbedtls_internal_sha1_process+0x1b50>)
 800d91c:	4413      	add	r3, r2
 800d91e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d922:	4413      	add	r3, r2
 800d924:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d928:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d92c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d930:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(71));
 800d934:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d93a:	405a      	eors	r2, r3
 800d93c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d93e:	405a      	eors	r2, r3
 800d940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d942:	4053      	eors	r3, r2
 800d944:	64bb      	str	r3, [r7, #72]	; 0x48
 800d946:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d94a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d94e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d952:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d956:	4059      	eors	r1, r3
 800d958:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d95c:	404b      	eors	r3, r1
 800d95e:	441a      	add	r2, r3
 800d960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d962:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d966:	66bb      	str	r3, [r7, #104]	; 0x68
 800d968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d96a:	441a      	add	r2, r3
 800d96c:	4bad      	ldr	r3, [pc, #692]	; (800dc24 <mbedtls_internal_sha1_process+0x1b50>)
 800d96e:	4413      	add	r3, r2
 800d970:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d974:	4413      	add	r3, r2
 800d976:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d97a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d97e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(72));
 800d986:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d98a:	405a      	eors	r2, r3
 800d98c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d98e:	405a      	eors	r2, r3
 800d990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d992:	4053      	eors	r3, r2
 800d994:	64bb      	str	r3, [r7, #72]	; 0x48
 800d996:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d99a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d99e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800d9a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d9a6:	4059      	eors	r1, r3
 800d9a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d9ac:	404b      	eors	r3, r1
 800d9ae:	441a      	add	r2, r3
 800d9b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9b2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d9b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ba:	441a      	add	r2, r3
 800d9bc:	4b99      	ldr	r3, [pc, #612]	; (800dc24 <mbedtls_internal_sha1_process+0x1b50>)
 800d9be:	4413      	add	r3, r2
 800d9c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d9c4:	4413      	add	r3, r2
 800d9c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d9ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9ce:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d9d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(73));
 800d9d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d9d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9da:	405a      	eors	r2, r3
 800d9dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9de:	405a      	eors	r2, r3
 800d9e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9e2:	4053      	eors	r3, r2
 800d9e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d9ea:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800d9ee:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d9f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9f6:	4059      	eors	r1, r3
 800d9f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d9fc:	404b      	eors	r3, r1
 800d9fe:	441a      	add	r2, r3
 800da00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da02:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800da06:	673b      	str	r3, [r7, #112]	; 0x70
 800da08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da0a:	441a      	add	r2, r3
 800da0c:	4b85      	ldr	r3, [pc, #532]	; (800dc24 <mbedtls_internal_sha1_process+0x1b50>)
 800da0e:	4413      	add	r3, r2
 800da10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800da14:	4413      	add	r3, r2
 800da16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da1e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800da22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(74));
 800da26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800da28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da2a:	405a      	eors	r2, r3
 800da2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da2e:	405a      	eors	r2, r3
 800da30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da32:	4053      	eors	r3, r2
 800da34:	64bb      	str	r3, [r7, #72]	; 0x48
 800da36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da3a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800da3e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800da42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da46:	4059      	eors	r1, r3
 800da48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da4c:	404b      	eors	r3, r1
 800da4e:	441a      	add	r2, r3
 800da50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da52:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800da56:	677b      	str	r3, [r7, #116]	; 0x74
 800da58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da5a:	441a      	add	r2, r3
 800da5c:	4b71      	ldr	r3, [pc, #452]	; (800dc24 <mbedtls_internal_sha1_process+0x1b50>)
 800da5e:	4413      	add	r3, r2
 800da60:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800da64:	4413      	add	r3, r2
 800da66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800da6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da6e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800da72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    P(local.A, local.B, local.C, local.D, local.E, R(75));
 800da76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da7a:	405a      	eors	r2, r3
 800da7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800da80:	405a      	eors	r2, r3
 800da82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da84:	4053      	eors	r3, r2
 800da86:	64bb      	str	r3, [r7, #72]	; 0x48
 800da88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800da8c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800da90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800da94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da98:	4059      	eors	r1, r3
 800da9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da9e:	404b      	eors	r3, r1
 800daa0:	441a      	add	r2, r3
 800daa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daa4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800daa8:	67bb      	str	r3, [r7, #120]	; 0x78
 800daaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800daac:	441a      	add	r2, r3
 800daae:	4b5d      	ldr	r3, [pc, #372]	; (800dc24 <mbedtls_internal_sha1_process+0x1b50>)
 800dab0:	4413      	add	r3, r2
 800dab2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800dab6:	4413      	add	r3, r2
 800dab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dabc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dac0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dac4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    P(local.E, local.A, local.B, local.C, local.D, R(76));
 800dac8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800daca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dacc:	405a      	eors	r2, r3
 800dace:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dad2:	405a      	eors	r2, r3
 800dad4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dad6:	4053      	eors	r3, r2
 800dad8:	64bb      	str	r3, [r7, #72]	; 0x48
 800dada:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dade:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800dae2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800dae6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800daea:	4059      	eors	r1, r3
 800daec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800daf0:	404b      	eors	r3, r1
 800daf2:	441a      	add	r2, r3
 800daf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daf6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dafa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dafc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dafe:	441a      	add	r2, r3
 800db00:	4b48      	ldr	r3, [pc, #288]	; (800dc24 <mbedtls_internal_sha1_process+0x1b50>)
 800db02:	4413      	add	r3, r2
 800db04:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800db08:	4413      	add	r3, r2
 800db0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800db0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db12:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800db16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    P(local.D, local.E, local.A, local.B, local.C, R(77));
 800db1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800db1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db1e:	405a      	eors	r2, r3
 800db20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db24:	405a      	eors	r2, r3
 800db26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800db2a:	4053      	eors	r3, r2
 800db2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800db2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db32:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800db36:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800db3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db3e:	4059      	eors	r1, r3
 800db40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db44:	404b      	eors	r3, r1
 800db46:	441a      	add	r2, r3
 800db48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db4a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800db4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800db52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800db56:	441a      	add	r2, r3
 800db58:	4b32      	ldr	r3, [pc, #200]	; (800dc24 <mbedtls_internal_sha1_process+0x1b50>)
 800db5a:	4413      	add	r3, r2
 800db5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800db60:	4413      	add	r3, r2
 800db62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db6a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800db6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    P(local.C, local.D, local.E, local.A, local.B, R(78));
 800db72:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800db74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db76:	405a      	eors	r2, r3
 800db78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db7a:	405a      	eors	r2, r3
 800db7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db80:	4053      	eors	r3, r2
 800db82:	64bb      	str	r3, [r7, #72]	; 0x48
 800db84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db88:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800db8c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800db90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db94:	4059      	eors	r1, r3
 800db96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db9a:	404b      	eors	r3, r1
 800db9c:	441a      	add	r2, r3
 800db9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dba0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dbac:	441a      	add	r2, r3
 800dbae:	4b1d      	ldr	r3, [pc, #116]	; (800dc24 <mbedtls_internal_sha1_process+0x1b50>)
 800dbb0:	4413      	add	r3, r2
 800dbb2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dbb6:	4413      	add	r3, r2
 800dbb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dbbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dbc0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dbc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    P(local.B, local.C, local.D, local.E, local.A, R(79));
 800dbc8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dbca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbcc:	405a      	eors	r2, r3
 800dbce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbd0:	405a      	eors	r2, r3
 800dbd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dbd6:	4053      	eors	r3, r2
 800dbd8:	64bb      	str	r3, [r7, #72]	; 0x48
 800dbda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dbde:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800dbe2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800dbe6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dbea:	4059      	eors	r1, r3
 800dbec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dbf0:	404b      	eors	r3, r1
 800dbf2:	441a      	add	r2, r3
 800dbf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbf6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dbfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dbfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc02:	441a      	add	r2, r3
 800dc04:	4b07      	ldr	r3, [pc, #28]	; (800dc24 <mbedtls_internal_sha1_process+0x1b50>)
 800dc06:	4413      	add	r3, r2
 800dc08:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dc0c:	4413      	add	r3, r2
 800dc0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dc12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc16:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dc1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

#undef K
#undef F

    ctx->state[0] += local.A;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	689a      	ldr	r2, [r3, #8]
 800dc22:	e001      	b.n	800dc28 <mbedtls_internal_sha1_process+0x1b54>
 800dc24:	ca62c1d6 	.word	0xca62c1d6
 800dc28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc2c:	441a      	add	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	609a      	str	r2, [r3, #8]
    ctx->state[1] += local.B;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	68da      	ldr	r2, [r3, #12]
 800dc36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc3a:	441a      	add	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	60da      	str	r2, [r3, #12]
    ctx->state[2] += local.C;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	691a      	ldr	r2, [r3, #16]
 800dc44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc48:	441a      	add	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	611a      	str	r2, [r3, #16]
    ctx->state[3] += local.D;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	695a      	ldr	r2, [r3, #20]
 800dc52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc56:	441a      	add	r2, r3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	615a      	str	r2, [r3, #20]
    ctx->state[4] += local.E;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	699a      	ldr	r2, [r3, #24]
 800dc60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dc64:	441a      	add	r2, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	619a      	str	r2, [r3, #24]

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize(&local, sizeof(local));
 800dc6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc6e:	2158      	movs	r1, #88	; 0x58
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7fd fd21 	bl	800b6b8 <mbedtls_platform_zeroize>

    return 0;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	37e0      	adds	r7, #224	; 0xe0
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bdb0      	pop	{r4, r5, r7, pc}

0800dc80 <mbedtls_sha1_update>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update(mbedtls_sha1_context *ctx,
                        const unsigned char *input,
                        size_t ilen)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b088      	sub	sp, #32
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800dc8c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800dc90:	61bb      	str	r3, [r7, #24]
    size_t fill;
    uint32_t left;

    if (ilen == 0) {
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d101      	bne.n	800dc9c <mbedtls_sha1_update+0x1c>
        return 0;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	e065      	b.n	800dd68 <mbedtls_sha1_update+0xe8>
    }

    left = ctx->total[0] & 0x3F;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dca4:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800dcac:	617b      	str	r3, [r7, #20]

    ctx->total[0] += (uint32_t) ilen;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	441a      	add	r2, r3
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	601a      	str	r2, [r3, #0]

    if (ctx->total[0] < (uint32_t) ilen) {
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d904      	bls.n	800dcd6 <mbedtls_sha1_update+0x56>
        ctx->total[1]++;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	1c5a      	adds	r2, r3, #1
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	605a      	str	r2, [r3, #4]
    }

    if (left && ilen >= fill) {
 800dcd6:	69fb      	ldr	r3, [r7, #28]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d034      	beq.n	800dd46 <mbedtls_sha1_update+0xc6>
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d330      	bcc.n	800dd46 <mbedtls_sha1_update+0xc6>
        memcpy((void *) (ctx->buffer + left), input, fill);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f103 021c 	add.w	r2, r3, #28
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	4413      	add	r3, r2
 800dcee:	697a      	ldr	r2, [r7, #20]
 800dcf0:	68b9      	ldr	r1, [r7, #8]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f002 ffed 	bl	8010cd2 <memcpy>

        if ((ret = mbedtls_internal_sha1_process(ctx, ctx->buffer)) != 0) {
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	331c      	adds	r3, #28
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	68f8      	ldr	r0, [r7, #12]
 800dd00:	f7fe f9e8 	bl	800c0d4 <mbedtls_internal_sha1_process>
 800dd04:	61b8      	str	r0, [r7, #24]
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d001      	beq.n	800dd10 <mbedtls_sha1_update+0x90>
            return ret;
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	e02b      	b.n	800dd68 <mbedtls_sha1_update+0xe8>
        }

        input += fill;
 800dd10:	68ba      	ldr	r2, [r7, #8]
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	4413      	add	r3, r2
 800dd16:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	607b      	str	r3, [r7, #4]
        left = 0;
 800dd20:	2300      	movs	r3, #0
 800dd22:	61fb      	str	r3, [r7, #28]
    }

    while (ilen >= 64) {
 800dd24:	e00f      	b.n	800dd46 <mbedtls_sha1_update+0xc6>
        if ((ret = mbedtls_internal_sha1_process(ctx, input)) != 0) {
 800dd26:	68b9      	ldr	r1, [r7, #8]
 800dd28:	68f8      	ldr	r0, [r7, #12]
 800dd2a:	f7fe f9d3 	bl	800c0d4 <mbedtls_internal_sha1_process>
 800dd2e:	61b8      	str	r0, [r7, #24]
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d001      	beq.n	800dd3a <mbedtls_sha1_update+0xba>
            return ret;
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	e016      	b.n	800dd68 <mbedtls_sha1_update+0xe8>
        }

        input += 64;
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	3340      	adds	r3, #64	; 0x40
 800dd3e:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	3b40      	subs	r3, #64	; 0x40
 800dd44:	607b      	str	r3, [r7, #4]
    while (ilen >= 64) {
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2b3f      	cmp	r3, #63	; 0x3f
 800dd4a:	d8ec      	bhi.n	800dd26 <mbedtls_sha1_update+0xa6>
    }

    if (ilen > 0) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d009      	beq.n	800dd66 <mbedtls_sha1_update+0xe6>
        memcpy((void *) (ctx->buffer + left), input, ilen);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f103 021c 	add.w	r2, r3, #28
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	68b9      	ldr	r1, [r7, #8]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f002 ffb6 	bl	8010cd2 <memcpy>
    }

    return 0;
 800dd66:	2300      	movs	r3, #0
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3720      	adds	r7, #32
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <mbedtls_sha1_finish>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish(mbedtls_sha1_context *ctx,
                        unsigned char output[20])
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b094      	sub	sp, #80	; 0x50
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800dd7a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800dd7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd88:	64bb      	str	r3, [r7, #72]	; 0x48

    ctx->buffer[used++] = 0x80;
 800dd8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd8c:	1c5a      	adds	r2, r3, #1
 800dd8e:	64ba      	str	r2, [r7, #72]	; 0x48
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	4413      	add	r3, r2
 800dd94:	2280      	movs	r2, #128	; 0x80
 800dd96:	771a      	strb	r2, [r3, #28]

    if (used <= 56) {
 800dd98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd9a:	2b38      	cmp	r3, #56	; 0x38
 800dd9c:	d80c      	bhi.n	800ddb8 <mbedtls_sha1_finish+0x48>
        /* Enough room for padding + length in current block */
        memset(ctx->buffer + used, 0, 56 - used);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f103 021c 	add.w	r2, r3, #28
 800dda4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dda6:	18d0      	adds	r0, r2, r3
 800dda8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddaa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ddae:	461a      	mov	r2, r3
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	f002 ff03 	bl	8010bbc <memset>
 800ddb6:	e01c      	b.n	800ddf2 <mbedtls_sha1_finish+0x82>
    } else {
        /* We'll need an extra block */
        memset(ctx->buffer + used, 0, 64 - used);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f103 021c 	add.w	r2, r3, #28
 800ddbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddc0:	18d0      	adds	r0, r2, r3
 800ddc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddc4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800ddc8:	461a      	mov	r2, r3
 800ddca:	2100      	movs	r1, #0
 800ddcc:	f002 fef6 	bl	8010bbc <memset>

        if ((ret = mbedtls_internal_sha1_process(ctx, ctx->buffer)) != 0) {
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	331c      	adds	r3, #28
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7fe f97c 	bl	800c0d4 <mbedtls_internal_sha1_process>
 800dddc:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ddde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d170      	bne.n	800dec6 <mbedtls_sha1_finish+0x156>
            goto exit;
        }

        memset(ctx->buffer, 0, 56);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	331c      	adds	r3, #28
 800dde8:	2238      	movs	r2, #56	; 0x38
 800ddea:	2100      	movs	r1, #0
 800ddec:	4618      	mov	r0, r3
 800ddee:	f002 fee5 	bl	8010bbc <memset>
    }

    /*
     * Add message length
     */
    high = (ctx->total[0] >> 29)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	0f5a      	lsrs	r2, r3, #29
           | (ctx->total[1] <<  3);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	00db      	lsls	r3, r3, #3
    high = (ctx->total[0] >> 29)
 800ddfe:	4313      	orrs	r3, r2
 800de00:	647b      	str	r3, [r7, #68]	; 0x44
    low  = (ctx->total[0] <<  3);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	00db      	lsls	r3, r3, #3
 800de08:	643b      	str	r3, [r7, #64]	; 0x40

    MBEDTLS_PUT_UINT32_BE(high, ctx->buffer, 56);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	331c      	adds	r3, #28
 800de0e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800de12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de14:	ba1b      	rev	r3, r3
 800de16:	63fa      	str	r2, [r7, #60]	; 0x3c
 800de18:	60bb      	str	r3, [r7, #8]
 800de1a:	68ba      	ldr	r2, [r7, #8]
    memcpy(p, &x, sizeof(x));
 800de1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de1e:	601a      	str	r2, [r3, #0]
}
 800de20:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(low,  ctx->buffer, 60);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	331c      	adds	r3, #28
 800de26:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800de2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de2c:	ba1b      	rev	r3, r3
 800de2e:	63ba      	str	r2, [r7, #56]	; 0x38
 800de30:	60fb      	str	r3, [r7, #12]
 800de32:	68fa      	ldr	r2, [r7, #12]
    memcpy(p, &x, sizeof(x));
 800de34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de36:	601a      	str	r2, [r3, #0]
}
 800de38:	bf00      	nop

    if ((ret = mbedtls_internal_sha1_process(ctx, ctx->buffer)) != 0) {
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	331c      	adds	r3, #28
 800de3e:	4619      	mov	r1, r3
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7fe f947 	bl	800c0d4 <mbedtls_internal_sha1_process>
 800de46:	64f8      	str	r0, [r7, #76]	; 0x4c
 800de48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d13d      	bne.n	800deca <mbedtls_sha1_finish+0x15a>
    }

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_BE(ctx->state[0], output,  0);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	ba1b      	rev	r3, r3
 800de54:	683a      	ldr	r2, [r7, #0]
 800de56:	637a      	str	r2, [r7, #52]	; 0x34
 800de58:	613b      	str	r3, [r7, #16]
 800de5a:	693a      	ldr	r2, [r7, #16]
    memcpy(p, &x, sizeof(x));
 800de5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de5e:	601a      	str	r2, [r3, #0]
}
 800de60:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[1], output,  4);
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	1d1a      	adds	r2, r3, #4
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	ba1b      	rev	r3, r3
 800de6c:	633a      	str	r2, [r7, #48]	; 0x30
 800de6e:	617b      	str	r3, [r7, #20]
 800de70:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &x, sizeof(x));
 800de72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de74:	601a      	str	r2, [r3, #0]
}
 800de76:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[2], output,  8);
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	f103 0208 	add.w	r2, r3, #8
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	ba1b      	rev	r3, r3
 800de84:	62fa      	str	r2, [r7, #44]	; 0x2c
 800de86:	61bb      	str	r3, [r7, #24]
 800de88:	69ba      	ldr	r2, [r7, #24]
    memcpy(p, &x, sizeof(x));
 800de8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8c:	601a      	str	r2, [r3, #0]
}
 800de8e:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[3], output, 12);
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	f103 020c 	add.w	r2, r3, #12
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	ba1b      	rev	r3, r3
 800de9c:	62ba      	str	r2, [r7, #40]	; 0x28
 800de9e:	61fb      	str	r3, [r7, #28]
 800dea0:	69fa      	ldr	r2, [r7, #28]
    memcpy(p, &x, sizeof(x));
 800dea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea4:	601a      	str	r2, [r3, #0]
}
 800dea6:	bf00      	nop
    MBEDTLS_PUT_UINT32_BE(ctx->state[4], output, 16);
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	f103 0210 	add.w	r2, r3, #16
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	699b      	ldr	r3, [r3, #24]
 800deb2:	ba1b      	rev	r3, r3
 800deb4:	627a      	str	r2, [r7, #36]	; 0x24
 800deb6:	623b      	str	r3, [r7, #32]
 800deb8:	6a3a      	ldr	r2, [r7, #32]
    memcpy(p, &x, sizeof(x));
 800deba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debc:	601a      	str	r2, [r3, #0]
}
 800debe:	bf00      	nop

    ret = 0;
 800dec0:	2300      	movs	r3, #0
 800dec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dec4:	e002      	b.n	800decc <mbedtls_sha1_finish+0x15c>
            goto exit;
 800dec6:	bf00      	nop
 800dec8:	e000      	b.n	800decc <mbedtls_sha1_finish+0x15c>
        goto exit;
 800deca:	bf00      	nop

exit:
    mbedtls_sha1_free(ctx);
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7fe f8c7 	bl	800c060 <mbedtls_sha1_free>
    return ret;
 800ded2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3750      	adds	r7, #80	; 0x50
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800dedc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800df14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800dee0:	f7f3 ffa4 	bl	8001e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800dee4:	480c      	ldr	r0, [pc, #48]	; (800df18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800dee6:	490d      	ldr	r1, [pc, #52]	; (800df1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800dee8:	4a0d      	ldr	r2, [pc, #52]	; (800df20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800deea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800deec:	e002      	b.n	800def4 <LoopCopyDataInit>

0800deee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800deee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800def0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800def2:	3304      	adds	r3, #4

0800def4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800def4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800def6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800def8:	d3f9      	bcc.n	800deee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800defa:	4a0a      	ldr	r2, [pc, #40]	; (800df24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800defc:	4c0a      	ldr	r4, [pc, #40]	; (800df28 <LoopFillZerobss+0x22>)
  movs r3, #0
 800defe:	2300      	movs	r3, #0
  b LoopFillZerobss
 800df00:	e001      	b.n	800df06 <LoopFillZerobss>

0800df02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800df02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800df04:	3204      	adds	r2, #4

0800df06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800df06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800df08:	d3fb      	bcc.n	800df02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800df0a:	f002 febb 	bl	8010c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800df0e:	f7f3 faef 	bl	80014f0 <main>
  bx  lr    
 800df12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800df14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800df18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800df1c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800df20:	080139dc 	.word	0x080139dc
  ldr r2, =_sbss
 800df24:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800df28:	2000252c 	.word	0x2000252c

0800df2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800df2c:	e7fe      	b.n	800df2c <ADC_IRQHandler>
	...

0800df30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800df34:	4b0e      	ldr	r3, [pc, #56]	; (800df70 <HAL_Init+0x40>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a0d      	ldr	r2, [pc, #52]	; (800df70 <HAL_Init+0x40>)
 800df3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800df3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800df40:	4b0b      	ldr	r3, [pc, #44]	; (800df70 <HAL_Init+0x40>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a0a      	ldr	r2, [pc, #40]	; (800df70 <HAL_Init+0x40>)
 800df46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800df4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800df4c:	4b08      	ldr	r3, [pc, #32]	; (800df70 <HAL_Init+0x40>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a07      	ldr	r2, [pc, #28]	; (800df70 <HAL_Init+0x40>)
 800df52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800df58:	2003      	movs	r0, #3
 800df5a:	f000 f931 	bl	800e1c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800df5e:	2000      	movs	r0, #0
 800df60:	f000 f808 	bl	800df74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800df64:	f7f3 fdd6 	bl	8001b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	40023c00 	.word	0x40023c00

0800df74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800df7c:	4b12      	ldr	r3, [pc, #72]	; (800dfc8 <HAL_InitTick+0x54>)
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	4b12      	ldr	r3, [pc, #72]	; (800dfcc <HAL_InitTick+0x58>)
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	4619      	mov	r1, r3
 800df86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800df8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800df92:	4618      	mov	r0, r3
 800df94:	f000 f93b 	bl	800e20e <HAL_SYSTICK_Config>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d001      	beq.n	800dfa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e00e      	b.n	800dfc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2b0f      	cmp	r3, #15
 800dfa6:	d80a      	bhi.n	800dfbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	6879      	ldr	r1, [r7, #4]
 800dfac:	f04f 30ff 	mov.w	r0, #4294967295
 800dfb0:	f000 f911 	bl	800e1d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800dfb4:	4a06      	ldr	r2, [pc, #24]	; (800dfd0 <HAL_InitTick+0x5c>)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	e000      	b.n	800dfc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	20000000 	.word	0x20000000
 800dfcc:	2000004c 	.word	0x2000004c
 800dfd0:	20000048 	.word	0x20000048

0800dfd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800dfd8:	4b06      	ldr	r3, [pc, #24]	; (800dff4 <HAL_IncTick+0x20>)
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	461a      	mov	r2, r3
 800dfde:	4b06      	ldr	r3, [pc, #24]	; (800dff8 <HAL_IncTick+0x24>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	4a04      	ldr	r2, [pc, #16]	; (800dff8 <HAL_IncTick+0x24>)
 800dfe6:	6013      	str	r3, [r2, #0]
}
 800dfe8:	bf00      	nop
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	2000004c 	.word	0x2000004c
 800dff8:	200023dc 	.word	0x200023dc

0800dffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800dffc:	b480      	push	{r7}
 800dffe:	af00      	add	r7, sp, #0
  return uwTick;
 800e000:	4b03      	ldr	r3, [pc, #12]	; (800e010 <HAL_GetTick+0x14>)
 800e002:	681b      	ldr	r3, [r3, #0]
}
 800e004:	4618      	mov	r0, r3
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	200023dc 	.word	0x200023dc

0800e014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e01c:	f7ff ffee 	bl	800dffc <HAL_GetTick>
 800e020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e02c:	d005      	beq.n	800e03a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e02e:	4b0a      	ldr	r3, [pc, #40]	; (800e058 <HAL_Delay+0x44>)
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	461a      	mov	r2, r3
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	4413      	add	r3, r2
 800e038:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e03a:	bf00      	nop
 800e03c:	f7ff ffde 	bl	800dffc <HAL_GetTick>
 800e040:	4602      	mov	r2, r0
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	1ad3      	subs	r3, r2, r3
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d8f7      	bhi.n	800e03c <HAL_Delay+0x28>
  {
  }
}
 800e04c:	bf00      	nop
 800e04e:	bf00      	nop
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	2000004c 	.word	0x2000004c

0800e05c <__NVIC_SetPriorityGrouping>:
{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f003 0307 	and.w	r3, r3, #7
 800e06a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e06c:	4b0c      	ldr	r3, [pc, #48]	; (800e0a0 <__NVIC_SetPriorityGrouping+0x44>)
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e072:	68ba      	ldr	r2, [r7, #8]
 800e074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e078:	4013      	ands	r3, r2
 800e07a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e08c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e08e:	4a04      	ldr	r2, [pc, #16]	; (800e0a0 <__NVIC_SetPriorityGrouping+0x44>)
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	60d3      	str	r3, [r2, #12]
}
 800e094:	bf00      	nop
 800e096:	3714      	adds	r7, #20
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr
 800e0a0:	e000ed00 	.word	0xe000ed00

0800e0a4 <__NVIC_GetPriorityGrouping>:
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e0a8:	4b04      	ldr	r3, [pc, #16]	; (800e0bc <__NVIC_GetPriorityGrouping+0x18>)
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	0a1b      	lsrs	r3, r3, #8
 800e0ae:	f003 0307 	and.w	r3, r3, #7
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	e000ed00 	.word	0xe000ed00

0800e0c0 <__NVIC_SetPriority>:
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	6039      	str	r1, [r7, #0]
 800e0ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e0cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	db0a      	blt.n	800e0ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	b2da      	uxtb	r2, r3
 800e0d8:	490c      	ldr	r1, [pc, #48]	; (800e10c <__NVIC_SetPriority+0x4c>)
 800e0da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0de:	0112      	lsls	r2, r2, #4
 800e0e0:	b2d2      	uxtb	r2, r2
 800e0e2:	440b      	add	r3, r1
 800e0e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e0e8:	e00a      	b.n	800e100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	4908      	ldr	r1, [pc, #32]	; (800e110 <__NVIC_SetPriority+0x50>)
 800e0f0:	79fb      	ldrb	r3, [r7, #7]
 800e0f2:	f003 030f 	and.w	r3, r3, #15
 800e0f6:	3b04      	subs	r3, #4
 800e0f8:	0112      	lsls	r2, r2, #4
 800e0fa:	b2d2      	uxtb	r2, r2
 800e0fc:	440b      	add	r3, r1
 800e0fe:	761a      	strb	r2, [r3, #24]
}
 800e100:	bf00      	nop
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr
 800e10c:	e000e100 	.word	0xe000e100
 800e110:	e000ed00 	.word	0xe000ed00

0800e114 <NVIC_EncodePriority>:
{
 800e114:	b480      	push	{r7}
 800e116:	b089      	sub	sp, #36	; 0x24
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f003 0307 	and.w	r3, r3, #7
 800e126:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	f1c3 0307 	rsb	r3, r3, #7
 800e12e:	2b04      	cmp	r3, #4
 800e130:	bf28      	it	cs
 800e132:	2304      	movcs	r3, #4
 800e134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	3304      	adds	r3, #4
 800e13a:	2b06      	cmp	r3, #6
 800e13c:	d902      	bls.n	800e144 <NVIC_EncodePriority+0x30>
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	3b03      	subs	r3, #3
 800e142:	e000      	b.n	800e146 <NVIC_EncodePriority+0x32>
 800e144:	2300      	movs	r3, #0
 800e146:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e148:	f04f 32ff 	mov.w	r2, #4294967295
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	fa02 f303 	lsl.w	r3, r2, r3
 800e152:	43da      	mvns	r2, r3
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	401a      	ands	r2, r3
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e15c:	f04f 31ff 	mov.w	r1, #4294967295
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	fa01 f303 	lsl.w	r3, r1, r3
 800e166:	43d9      	mvns	r1, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e16c:	4313      	orrs	r3, r2
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3724      	adds	r7, #36	; 0x24
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr
	...

0800e17c <SysTick_Config>:
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b082      	sub	sp, #8
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	3b01      	subs	r3, #1
 800e188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e18c:	d301      	bcc.n	800e192 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800e18e:	2301      	movs	r3, #1
 800e190:	e00f      	b.n	800e1b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e192:	4a0a      	ldr	r2, [pc, #40]	; (800e1bc <SysTick_Config+0x40>)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	3b01      	subs	r3, #1
 800e198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e19a:	210f      	movs	r1, #15
 800e19c:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a0:	f7ff ff8e 	bl	800e0c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e1a4:	4b05      	ldr	r3, [pc, #20]	; (800e1bc <SysTick_Config+0x40>)
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e1aa:	4b04      	ldr	r3, [pc, #16]	; (800e1bc <SysTick_Config+0x40>)
 800e1ac:	2207      	movs	r2, #7
 800e1ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800e1b0:	2300      	movs	r3, #0
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3708      	adds	r7, #8
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	e000e010 	.word	0xe000e010

0800e1c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f7ff ff47 	bl	800e05c <__NVIC_SetPriorityGrouping>
}
 800e1ce:	bf00      	nop
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b086      	sub	sp, #24
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	4603      	mov	r3, r0
 800e1de:	60b9      	str	r1, [r7, #8]
 800e1e0:	607a      	str	r2, [r7, #4]
 800e1e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e1e8:	f7ff ff5c 	bl	800e0a4 <__NVIC_GetPriorityGrouping>
 800e1ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	68b9      	ldr	r1, [r7, #8]
 800e1f2:	6978      	ldr	r0, [r7, #20]
 800e1f4:	f7ff ff8e 	bl	800e114 <NVIC_EncodePriority>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1fe:	4611      	mov	r1, r2
 800e200:	4618      	mov	r0, r3
 800e202:	f7ff ff5d 	bl	800e0c0 <__NVIC_SetPriority>
}
 800e206:	bf00      	nop
 800e208:	3718      	adds	r7, #24
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e20e:	b580      	push	{r7, lr}
 800e210:	b082      	sub	sp, #8
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7ff ffb0 	bl	800e17c <SysTick_Config>
 800e21c:	4603      	mov	r3, r0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
	...

0800e228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e228:	b480      	push	{r7}
 800e22a:	b089      	sub	sp, #36	; 0x24
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e232:	2300      	movs	r3, #0
 800e234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e236:	2300      	movs	r3, #0
 800e238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e23a:	2300      	movs	r3, #0
 800e23c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e23e:	2300      	movs	r3, #0
 800e240:	61fb      	str	r3, [r7, #28]
 800e242:	e159      	b.n	800e4f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e244:	2201      	movs	r2, #1
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	fa02 f303 	lsl.w	r3, r2, r3
 800e24c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	697a      	ldr	r2, [r7, #20]
 800e254:	4013      	ands	r3, r2
 800e256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e258:	693a      	ldr	r2, [r7, #16]
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	f040 8148 	bne.w	800e4f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	f003 0303 	and.w	r3, r3, #3
 800e26a:	2b01      	cmp	r3, #1
 800e26c:	d005      	beq.n	800e27a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e276:	2b02      	cmp	r3, #2
 800e278:	d130      	bne.n	800e2dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	689b      	ldr	r3, [r3, #8]
 800e27e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	005b      	lsls	r3, r3, #1
 800e284:	2203      	movs	r2, #3
 800e286:	fa02 f303 	lsl.w	r3, r2, r3
 800e28a:	43db      	mvns	r3, r3
 800e28c:	69ba      	ldr	r2, [r7, #24]
 800e28e:	4013      	ands	r3, r2
 800e290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	68da      	ldr	r2, [r3, #12]
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	005b      	lsls	r3, r3, #1
 800e29a:	fa02 f303 	lsl.w	r3, r2, r3
 800e29e:	69ba      	ldr	r2, [r7, #24]
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	69ba      	ldr	r2, [r7, #24]
 800e2a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800e2b8:	43db      	mvns	r3, r3
 800e2ba:	69ba      	ldr	r2, [r7, #24]
 800e2bc:	4013      	ands	r3, r2
 800e2be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	091b      	lsrs	r3, r3, #4
 800e2c6:	f003 0201 	and.w	r2, r3, #1
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e2d0:	69ba      	ldr	r2, [r7, #24]
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	69ba      	ldr	r2, [r7, #24]
 800e2da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	f003 0303 	and.w	r3, r3, #3
 800e2e4:	2b03      	cmp	r3, #3
 800e2e6:	d017      	beq.n	800e318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	68db      	ldr	r3, [r3, #12]
 800e2ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e2ee:	69fb      	ldr	r3, [r7, #28]
 800e2f0:	005b      	lsls	r3, r3, #1
 800e2f2:	2203      	movs	r2, #3
 800e2f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e2f8:	43db      	mvns	r3, r3
 800e2fa:	69ba      	ldr	r2, [r7, #24]
 800e2fc:	4013      	ands	r3, r2
 800e2fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	689a      	ldr	r2, [r3, #8]
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	005b      	lsls	r3, r3, #1
 800e308:	fa02 f303 	lsl.w	r3, r2, r3
 800e30c:	69ba      	ldr	r2, [r7, #24]
 800e30e:	4313      	orrs	r3, r2
 800e310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	69ba      	ldr	r2, [r7, #24]
 800e316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	f003 0303 	and.w	r3, r3, #3
 800e320:	2b02      	cmp	r3, #2
 800e322:	d123      	bne.n	800e36c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	08da      	lsrs	r2, r3, #3
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	3208      	adds	r2, #8
 800e32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	f003 0307 	and.w	r3, r3, #7
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	220f      	movs	r2, #15
 800e33c:	fa02 f303 	lsl.w	r3, r2, r3
 800e340:	43db      	mvns	r3, r3
 800e342:	69ba      	ldr	r2, [r7, #24]
 800e344:	4013      	ands	r3, r2
 800e346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	691a      	ldr	r2, [r3, #16]
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	f003 0307 	and.w	r3, r3, #7
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	fa02 f303 	lsl.w	r3, r2, r3
 800e358:	69ba      	ldr	r2, [r7, #24]
 800e35a:	4313      	orrs	r3, r2
 800e35c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e35e:	69fb      	ldr	r3, [r7, #28]
 800e360:	08da      	lsrs	r2, r3, #3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	3208      	adds	r2, #8
 800e366:	69b9      	ldr	r1, [r7, #24]
 800e368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	005b      	lsls	r3, r3, #1
 800e376:	2203      	movs	r2, #3
 800e378:	fa02 f303 	lsl.w	r3, r2, r3
 800e37c:	43db      	mvns	r3, r3
 800e37e:	69ba      	ldr	r2, [r7, #24]
 800e380:	4013      	ands	r3, r2
 800e382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	f003 0203 	and.w	r2, r3, #3
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	005b      	lsls	r3, r3, #1
 800e390:	fa02 f303 	lsl.w	r3, r2, r3
 800e394:	69ba      	ldr	r2, [r7, #24]
 800e396:	4313      	orrs	r3, r2
 800e398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	69ba      	ldr	r2, [r7, #24]
 800e39e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f000 80a2 	beq.w	800e4f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	60fb      	str	r3, [r7, #12]
 800e3b2:	4b57      	ldr	r3, [pc, #348]	; (800e510 <HAL_GPIO_Init+0x2e8>)
 800e3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3b6:	4a56      	ldr	r2, [pc, #344]	; (800e510 <HAL_GPIO_Init+0x2e8>)
 800e3b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e3bc:	6453      	str	r3, [r2, #68]	; 0x44
 800e3be:	4b54      	ldr	r3, [pc, #336]	; (800e510 <HAL_GPIO_Init+0x2e8>)
 800e3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3c6:	60fb      	str	r3, [r7, #12]
 800e3c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e3ca:	4a52      	ldr	r2, [pc, #328]	; (800e514 <HAL_GPIO_Init+0x2ec>)
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	089b      	lsrs	r3, r3, #2
 800e3d0:	3302      	adds	r3, #2
 800e3d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	f003 0303 	and.w	r3, r3, #3
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	220f      	movs	r2, #15
 800e3e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e3e6:	43db      	mvns	r3, r3
 800e3e8:	69ba      	ldr	r2, [r7, #24]
 800e3ea:	4013      	ands	r3, r2
 800e3ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	4a49      	ldr	r2, [pc, #292]	; (800e518 <HAL_GPIO_Init+0x2f0>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d019      	beq.n	800e42a <HAL_GPIO_Init+0x202>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	4a48      	ldr	r2, [pc, #288]	; (800e51c <HAL_GPIO_Init+0x2f4>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d013      	beq.n	800e426 <HAL_GPIO_Init+0x1fe>
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	4a47      	ldr	r2, [pc, #284]	; (800e520 <HAL_GPIO_Init+0x2f8>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d00d      	beq.n	800e422 <HAL_GPIO_Init+0x1fa>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	4a46      	ldr	r2, [pc, #280]	; (800e524 <HAL_GPIO_Init+0x2fc>)
 800e40a:	4293      	cmp	r3, r2
 800e40c:	d007      	beq.n	800e41e <HAL_GPIO_Init+0x1f6>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	4a45      	ldr	r2, [pc, #276]	; (800e528 <HAL_GPIO_Init+0x300>)
 800e412:	4293      	cmp	r3, r2
 800e414:	d101      	bne.n	800e41a <HAL_GPIO_Init+0x1f2>
 800e416:	2304      	movs	r3, #4
 800e418:	e008      	b.n	800e42c <HAL_GPIO_Init+0x204>
 800e41a:	2307      	movs	r3, #7
 800e41c:	e006      	b.n	800e42c <HAL_GPIO_Init+0x204>
 800e41e:	2303      	movs	r3, #3
 800e420:	e004      	b.n	800e42c <HAL_GPIO_Init+0x204>
 800e422:	2302      	movs	r3, #2
 800e424:	e002      	b.n	800e42c <HAL_GPIO_Init+0x204>
 800e426:	2301      	movs	r3, #1
 800e428:	e000      	b.n	800e42c <HAL_GPIO_Init+0x204>
 800e42a:	2300      	movs	r3, #0
 800e42c:	69fa      	ldr	r2, [r7, #28]
 800e42e:	f002 0203 	and.w	r2, r2, #3
 800e432:	0092      	lsls	r2, r2, #2
 800e434:	4093      	lsls	r3, r2
 800e436:	69ba      	ldr	r2, [r7, #24]
 800e438:	4313      	orrs	r3, r2
 800e43a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e43c:	4935      	ldr	r1, [pc, #212]	; (800e514 <HAL_GPIO_Init+0x2ec>)
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	089b      	lsrs	r3, r3, #2
 800e442:	3302      	adds	r3, #2
 800e444:	69ba      	ldr	r2, [r7, #24]
 800e446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e44a:	4b38      	ldr	r3, [pc, #224]	; (800e52c <HAL_GPIO_Init+0x304>)
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	43db      	mvns	r3, r3
 800e454:	69ba      	ldr	r2, [r7, #24]
 800e456:	4013      	ands	r3, r2
 800e458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e462:	2b00      	cmp	r3, #0
 800e464:	d003      	beq.n	800e46e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800e466:	69ba      	ldr	r2, [r7, #24]
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	4313      	orrs	r3, r2
 800e46c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e46e:	4a2f      	ldr	r2, [pc, #188]	; (800e52c <HAL_GPIO_Init+0x304>)
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e474:	4b2d      	ldr	r3, [pc, #180]	; (800e52c <HAL_GPIO_Init+0x304>)
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	43db      	mvns	r3, r3
 800e47e:	69ba      	ldr	r2, [r7, #24]
 800e480:	4013      	ands	r3, r2
 800e482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d003      	beq.n	800e498 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800e490:	69ba      	ldr	r2, [r7, #24]
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	4313      	orrs	r3, r2
 800e496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e498:	4a24      	ldr	r2, [pc, #144]	; (800e52c <HAL_GPIO_Init+0x304>)
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e49e:	4b23      	ldr	r3, [pc, #140]	; (800e52c <HAL_GPIO_Init+0x304>)
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	43db      	mvns	r3, r3
 800e4a8:	69ba      	ldr	r2, [r7, #24]
 800e4aa:	4013      	ands	r3, r2
 800e4ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d003      	beq.n	800e4c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800e4ba:	69ba      	ldr	r2, [r7, #24]
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e4c2:	4a1a      	ldr	r2, [pc, #104]	; (800e52c <HAL_GPIO_Init+0x304>)
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e4c8:	4b18      	ldr	r3, [pc, #96]	; (800e52c <HAL_GPIO_Init+0x304>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	43db      	mvns	r3, r3
 800e4d2:	69ba      	ldr	r2, [r7, #24]
 800e4d4:	4013      	ands	r3, r2
 800e4d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d003      	beq.n	800e4ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800e4e4:	69ba      	ldr	r2, [r7, #24]
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e4ec:	4a0f      	ldr	r2, [pc, #60]	; (800e52c <HAL_GPIO_Init+0x304>)
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	61fb      	str	r3, [r7, #28]
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	2b0f      	cmp	r3, #15
 800e4fc:	f67f aea2 	bls.w	800e244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e500:	bf00      	nop
 800e502:	bf00      	nop
 800e504:	3724      	adds	r7, #36	; 0x24
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop
 800e510:	40023800 	.word	0x40023800
 800e514:	40013800 	.word	0x40013800
 800e518:	40020000 	.word	0x40020000
 800e51c:	40020400 	.word	0x40020400
 800e520:	40020800 	.word	0x40020800
 800e524:	40020c00 	.word	0x40020c00
 800e528:	40021000 	.word	0x40021000
 800e52c:	40013c00 	.word	0x40013c00

0800e530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e530:	b480      	push	{r7}
 800e532:	b083      	sub	sp, #12
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	460b      	mov	r3, r1
 800e53a:	807b      	strh	r3, [r7, #2]
 800e53c:	4613      	mov	r3, r2
 800e53e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e540:	787b      	ldrb	r3, [r7, #1]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d003      	beq.n	800e54e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e546:	887a      	ldrh	r2, [r7, #2]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e54c:	e003      	b.n	800e556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e54e:	887b      	ldrh	r3, [r7, #2]
 800e550:	041a      	lsls	r2, r3, #16
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	619a      	str	r2, [r3, #24]
}
 800e556:	bf00      	nop
 800e558:	370c      	adds	r7, #12
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr
	...

0800e564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d101      	bne.n	800e576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e572:	2301      	movs	r3, #1
 800e574:	e12b      	b.n	800e7ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d106      	bne.n	800e590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2200      	movs	r2, #0
 800e586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7f3 faea 	bl	8001b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2224      	movs	r2, #36	; 0x24
 800e594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f022 0201 	bic.w	r2, r2, #1
 800e5a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e5b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e5c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800e5c8:	f001 fc36 	bl	800fe38 <HAL_RCC_GetPCLK1Freq>
 800e5cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	4a81      	ldr	r2, [pc, #516]	; (800e7d8 <HAL_I2C_Init+0x274>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d807      	bhi.n	800e5e8 <HAL_I2C_Init+0x84>
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	4a80      	ldr	r2, [pc, #512]	; (800e7dc <HAL_I2C_Init+0x278>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	bf94      	ite	ls
 800e5e0:	2301      	movls	r3, #1
 800e5e2:	2300      	movhi	r3, #0
 800e5e4:	b2db      	uxtb	r3, r3
 800e5e6:	e006      	b.n	800e5f6 <HAL_I2C_Init+0x92>
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	4a7d      	ldr	r2, [pc, #500]	; (800e7e0 <HAL_I2C_Init+0x27c>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	bf94      	ite	ls
 800e5f0:	2301      	movls	r3, #1
 800e5f2:	2300      	movhi	r3, #0
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d001      	beq.n	800e5fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e0e7      	b.n	800e7ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	4a78      	ldr	r2, [pc, #480]	; (800e7e4 <HAL_I2C_Init+0x280>)
 800e602:	fba2 2303 	umull	r2, r3, r2, r3
 800e606:	0c9b      	lsrs	r3, r3, #18
 800e608:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	68ba      	ldr	r2, [r7, #8]
 800e61a:	430a      	orrs	r2, r1
 800e61c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	6a1b      	ldr	r3, [r3, #32]
 800e624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	4a6a      	ldr	r2, [pc, #424]	; (800e7d8 <HAL_I2C_Init+0x274>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d802      	bhi.n	800e638 <HAL_I2C_Init+0xd4>
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	3301      	adds	r3, #1
 800e636:	e009      	b.n	800e64c <HAL_I2C_Init+0xe8>
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e63e:	fb02 f303 	mul.w	r3, r2, r3
 800e642:	4a69      	ldr	r2, [pc, #420]	; (800e7e8 <HAL_I2C_Init+0x284>)
 800e644:	fba2 2303 	umull	r2, r3, r2, r3
 800e648:	099b      	lsrs	r3, r3, #6
 800e64a:	3301      	adds	r3, #1
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	6812      	ldr	r2, [r2, #0]
 800e650:	430b      	orrs	r3, r1
 800e652:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	69db      	ldr	r3, [r3, #28]
 800e65a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800e65e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	495c      	ldr	r1, [pc, #368]	; (800e7d8 <HAL_I2C_Init+0x274>)
 800e668:	428b      	cmp	r3, r1
 800e66a:	d819      	bhi.n	800e6a0 <HAL_I2C_Init+0x13c>
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	1e59      	subs	r1, r3, #1
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	005b      	lsls	r3, r3, #1
 800e676:	fbb1 f3f3 	udiv	r3, r1, r3
 800e67a:	1c59      	adds	r1, r3, #1
 800e67c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e680:	400b      	ands	r3, r1
 800e682:	2b00      	cmp	r3, #0
 800e684:	d00a      	beq.n	800e69c <HAL_I2C_Init+0x138>
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	1e59      	subs	r1, r3, #1
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	005b      	lsls	r3, r3, #1
 800e690:	fbb1 f3f3 	udiv	r3, r1, r3
 800e694:	3301      	adds	r3, #1
 800e696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e69a:	e051      	b.n	800e740 <HAL_I2C_Init+0x1dc>
 800e69c:	2304      	movs	r3, #4
 800e69e:	e04f      	b.n	800e740 <HAL_I2C_Init+0x1dc>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	689b      	ldr	r3, [r3, #8]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d111      	bne.n	800e6cc <HAL_I2C_Init+0x168>
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	1e58      	subs	r0, r3, #1
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6859      	ldr	r1, [r3, #4]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	005b      	lsls	r3, r3, #1
 800e6b4:	440b      	add	r3, r1
 800e6b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	bf0c      	ite	eq
 800e6c4:	2301      	moveq	r3, #1
 800e6c6:	2300      	movne	r3, #0
 800e6c8:	b2db      	uxtb	r3, r3
 800e6ca:	e012      	b.n	800e6f2 <HAL_I2C_Init+0x18e>
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	1e58      	subs	r0, r3, #1
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6859      	ldr	r1, [r3, #4]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	009b      	lsls	r3, r3, #2
 800e6d8:	440b      	add	r3, r1
 800e6da:	0099      	lsls	r1, r3, #2
 800e6dc:	440b      	add	r3, r1
 800e6de:	fbb0 f3f3 	udiv	r3, r0, r3
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	bf0c      	ite	eq
 800e6ec:	2301      	moveq	r3, #1
 800e6ee:	2300      	movne	r3, #0
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d001      	beq.n	800e6fa <HAL_I2C_Init+0x196>
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	e022      	b.n	800e740 <HAL_I2C_Init+0x1dc>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d10e      	bne.n	800e720 <HAL_I2C_Init+0x1bc>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	1e58      	subs	r0, r3, #1
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6859      	ldr	r1, [r3, #4]
 800e70a:	460b      	mov	r3, r1
 800e70c:	005b      	lsls	r3, r3, #1
 800e70e:	440b      	add	r3, r1
 800e710:	fbb0 f3f3 	udiv	r3, r0, r3
 800e714:	3301      	adds	r3, #1
 800e716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e71a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e71e:	e00f      	b.n	800e740 <HAL_I2C_Init+0x1dc>
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	1e58      	subs	r0, r3, #1
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6859      	ldr	r1, [r3, #4]
 800e728:	460b      	mov	r3, r1
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	440b      	add	r3, r1
 800e72e:	0099      	lsls	r1, r3, #2
 800e730:	440b      	add	r3, r1
 800e732:	fbb0 f3f3 	udiv	r3, r0, r3
 800e736:	3301      	adds	r3, #1
 800e738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e73c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e740:	6879      	ldr	r1, [r7, #4]
 800e742:	6809      	ldr	r1, [r1, #0]
 800e744:	4313      	orrs	r3, r2
 800e746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	69da      	ldr	r2, [r3, #28]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6a1b      	ldr	r3, [r3, #32]
 800e75a:	431a      	orrs	r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	430a      	orrs	r2, r1
 800e762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	689b      	ldr	r3, [r3, #8]
 800e76a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800e76e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	6911      	ldr	r1, [r2, #16]
 800e776:	687a      	ldr	r2, [r7, #4]
 800e778:	68d2      	ldr	r2, [r2, #12]
 800e77a:	4311      	orrs	r1, r2
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	6812      	ldr	r2, [r2, #0]
 800e780:	430b      	orrs	r3, r1
 800e782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	695a      	ldr	r2, [r3, #20]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	699b      	ldr	r3, [r3, #24]
 800e796:	431a      	orrs	r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	430a      	orrs	r2, r1
 800e79e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f042 0201 	orr.w	r2, r2, #1
 800e7ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2220      	movs	r2, #32
 800e7ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e7cc:	2300      	movs	r3, #0
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3710      	adds	r7, #16
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	000186a0 	.word	0x000186a0
 800e7dc:	001e847f 	.word	0x001e847f
 800e7e0:	003d08ff 	.word	0x003d08ff
 800e7e4:	431bde83 	.word	0x431bde83
 800e7e8:	10624dd3 	.word	0x10624dd3

0800e7ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b088      	sub	sp, #32
 800e7f0:	af02      	add	r7, sp, #8
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	607a      	str	r2, [r7, #4]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	817b      	strh	r3, [r7, #10]
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e800:	f7ff fbfc 	bl	800dffc <HAL_GetTick>
 800e804:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	2b20      	cmp	r3, #32
 800e810:	f040 80e0 	bne.w	800e9d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	9300      	str	r3, [sp, #0]
 800e818:	2319      	movs	r3, #25
 800e81a:	2201      	movs	r2, #1
 800e81c:	4970      	ldr	r1, [pc, #448]	; (800e9e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800e81e:	68f8      	ldr	r0, [r7, #12]
 800e820:	f000 fc64 	bl	800f0ec <I2C_WaitOnFlagUntilTimeout>
 800e824:	4603      	mov	r3, r0
 800e826:	2b00      	cmp	r3, #0
 800e828:	d001      	beq.n	800e82e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800e82a:	2302      	movs	r3, #2
 800e82c:	e0d3      	b.n	800e9d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e834:	2b01      	cmp	r3, #1
 800e836:	d101      	bne.n	800e83c <HAL_I2C_Master_Transmit+0x50>
 800e838:	2302      	movs	r3, #2
 800e83a:	e0cc      	b.n	800e9d6 <HAL_I2C_Master_Transmit+0x1ea>
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2201      	movs	r2, #1
 800e840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f003 0301 	and.w	r3, r3, #1
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d007      	beq.n	800e862 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f042 0201 	orr.w	r2, r2, #1
 800e860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2221      	movs	r2, #33	; 0x21
 800e876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2210      	movs	r2, #16
 800e87e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2200      	movs	r2, #0
 800e886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	893a      	ldrh	r2, [r7, #8]
 800e892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e898:	b29a      	uxth	r2, r3
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	4a50      	ldr	r2, [pc, #320]	; (800e9e4 <HAL_I2C_Master_Transmit+0x1f8>)
 800e8a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800e8a4:	8979      	ldrh	r1, [r7, #10]
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	6a3a      	ldr	r2, [r7, #32]
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f000 face 	bl	800ee4c <I2C_MasterRequestWrite>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d001      	beq.n	800e8ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	e08d      	b.n	800e9d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	613b      	str	r3, [r7, #16]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	695b      	ldr	r3, [r3, #20]
 800e8c4:	613b      	str	r3, [r7, #16]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	699b      	ldr	r3, [r3, #24]
 800e8cc:	613b      	str	r3, [r7, #16]
 800e8ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800e8d0:	e066      	b.n	800e9a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e8d2:	697a      	ldr	r2, [r7, #20]
 800e8d4:	6a39      	ldr	r1, [r7, #32]
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f000 fd22 	bl	800f320 <I2C_WaitOnTXEFlagUntilTimeout>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d00d      	beq.n	800e8fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8e6:	2b04      	cmp	r3, #4
 800e8e8:	d107      	bne.n	800e8fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e8f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e06b      	b.n	800e9d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e902:	781a      	ldrb	r2, [r3, #0]
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e90e:	1c5a      	adds	r2, r3, #1
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e918:	b29b      	uxth	r3, r3
 800e91a:	3b01      	subs	r3, #1
 800e91c:	b29a      	uxth	r2, r3
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e926:	3b01      	subs	r3, #1
 800e928:	b29a      	uxth	r2, r3
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	695b      	ldr	r3, [r3, #20]
 800e934:	f003 0304 	and.w	r3, r3, #4
 800e938:	2b04      	cmp	r3, #4
 800e93a:	d11b      	bne.n	800e974 <HAL_I2C_Master_Transmit+0x188>
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e940:	2b00      	cmp	r3, #0
 800e942:	d017      	beq.n	800e974 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e948:	781a      	ldrb	r2, [r3, #0]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e954:	1c5a      	adds	r2, r3, #1
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e95e:	b29b      	uxth	r3, r3
 800e960:	3b01      	subs	r3, #1
 800e962:	b29a      	uxth	r2, r3
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e96c:	3b01      	subs	r3, #1
 800e96e:	b29a      	uxth	r2, r3
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e974:	697a      	ldr	r2, [r7, #20]
 800e976:	6a39      	ldr	r1, [r7, #32]
 800e978:	68f8      	ldr	r0, [r7, #12]
 800e97a:	f000 fd19 	bl	800f3b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	d00d      	beq.n	800e9a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e988:	2b04      	cmp	r3, #4
 800e98a:	d107      	bne.n	800e99c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e99a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e99c:	2301      	movs	r3, #1
 800e99e:	e01a      	b.n	800e9d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d194      	bne.n	800e8d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e9b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2220      	movs	r2, #32
 800e9bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	e000      	b.n	800e9d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800e9d4:	2302      	movs	r3, #2
  }
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3718      	adds	r7, #24
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	00100002 	.word	0x00100002
 800e9e4:	ffff0000 	.word	0xffff0000

0800e9e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b08c      	sub	sp, #48	; 0x30
 800e9ec:	af02      	add	r7, sp, #8
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	607a      	str	r2, [r7, #4]
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	817b      	strh	r3, [r7, #10]
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e9fc:	f7ff fafe 	bl	800dffc <HAL_GetTick>
 800ea00:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	2b20      	cmp	r3, #32
 800ea0c:	f040 8217 	bne.w	800ee3e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ea10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea12:	9300      	str	r3, [sp, #0]
 800ea14:	2319      	movs	r3, #25
 800ea16:	2201      	movs	r2, #1
 800ea18:	497c      	ldr	r1, [pc, #496]	; (800ec0c <HAL_I2C_Master_Receive+0x224>)
 800ea1a:	68f8      	ldr	r0, [r7, #12]
 800ea1c:	f000 fb66 	bl	800f0ec <I2C_WaitOnFlagUntilTimeout>
 800ea20:	4603      	mov	r3, r0
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d001      	beq.n	800ea2a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800ea26:	2302      	movs	r3, #2
 800ea28:	e20a      	b.n	800ee40 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d101      	bne.n	800ea38 <HAL_I2C_Master_Receive+0x50>
 800ea34:	2302      	movs	r3, #2
 800ea36:	e203      	b.n	800ee40 <HAL_I2C_Master_Receive+0x458>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f003 0301 	and.w	r3, r3, #1
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d007      	beq.n	800ea5e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f042 0201 	orr.w	r2, r2, #1
 800ea5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	681a      	ldr	r2, [r3, #0]
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2222      	movs	r2, #34	; 0x22
 800ea72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2210      	movs	r2, #16
 800ea7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2200      	movs	r2, #0
 800ea82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	893a      	ldrh	r2, [r7, #8]
 800ea8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	4a5c      	ldr	r2, [pc, #368]	; (800ec10 <HAL_I2C_Master_Receive+0x228>)
 800ea9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800eaa0:	8979      	ldrh	r1, [r7, #10]
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaa6:	68f8      	ldr	r0, [r7, #12]
 800eaa8:	f000 fa52 	bl	800ef50 <I2C_MasterRequestRead>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d001      	beq.n	800eab6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800eab2:	2301      	movs	r3, #1
 800eab4:	e1c4      	b.n	800ee40 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d113      	bne.n	800eae6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800eabe:	2300      	movs	r3, #0
 800eac0:	623b      	str	r3, [r7, #32]
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	695b      	ldr	r3, [r3, #20]
 800eac8:	623b      	str	r3, [r7, #32]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	699b      	ldr	r3, [r3, #24]
 800ead0:	623b      	str	r3, [r7, #32]
 800ead2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eae2:	601a      	str	r2, [r3, #0]
 800eae4:	e198      	b.n	800ee18 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eaea:	2b01      	cmp	r3, #1
 800eaec:	d11b      	bne.n	800eb26 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	681a      	ldr	r2, [r3, #0]
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eafc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800eafe:	2300      	movs	r3, #0
 800eb00:	61fb      	str	r3, [r7, #28]
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	695b      	ldr	r3, [r3, #20]
 800eb08:	61fb      	str	r3, [r7, #28]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	699b      	ldr	r3, [r3, #24]
 800eb10:	61fb      	str	r3, [r7, #28]
 800eb12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb22:	601a      	str	r2, [r3, #0]
 800eb24:	e178      	b.n	800ee18 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb2a:	2b02      	cmp	r3, #2
 800eb2c:	d11b      	bne.n	800eb66 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800eb4e:	2300      	movs	r3, #0
 800eb50:	61bb      	str	r3, [r7, #24]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	695b      	ldr	r3, [r3, #20]
 800eb58:	61bb      	str	r3, [r7, #24]
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	699b      	ldr	r3, [r3, #24]
 800eb60:	61bb      	str	r3, [r7, #24]
 800eb62:	69bb      	ldr	r3, [r7, #24]
 800eb64:	e158      	b.n	800ee18 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	681a      	ldr	r2, [r3, #0]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eb74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800eb76:	2300      	movs	r3, #0
 800eb78:	617b      	str	r3, [r7, #20]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	695b      	ldr	r3, [r3, #20]
 800eb80:	617b      	str	r3, [r7, #20]
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	699b      	ldr	r3, [r3, #24]
 800eb88:	617b      	str	r3, [r7, #20]
 800eb8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800eb8c:	e144      	b.n	800ee18 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb92:	2b03      	cmp	r3, #3
 800eb94:	f200 80f1 	bhi.w	800ed7a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d123      	bne.n	800ebe8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f000 fc4b 	bl	800f440 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d001      	beq.n	800ebb4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e145      	b.n	800ee40 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	691a      	ldr	r2, [r3, #16]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebbe:	b2d2      	uxtb	r2, r2
 800ebc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc6:	1c5a      	adds	r2, r3, #1
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	b29a      	uxth	r2, r3
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ebe6:	e117      	b.n	800ee18 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebec:	2b02      	cmp	r3, #2
 800ebee:	d14e      	bne.n	800ec8e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf2:	9300      	str	r3, [sp, #0]
 800ebf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	4906      	ldr	r1, [pc, #24]	; (800ec14 <HAL_I2C_Master_Receive+0x22c>)
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f000 fa76 	bl	800f0ec <I2C_WaitOnFlagUntilTimeout>
 800ec00:	4603      	mov	r3, r0
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d008      	beq.n	800ec18 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800ec06:	2301      	movs	r3, #1
 800ec08:	e11a      	b.n	800ee40 <HAL_I2C_Master_Receive+0x458>
 800ec0a:	bf00      	nop
 800ec0c:	00100002 	.word	0x00100002
 800ec10:	ffff0000 	.word	0xffff0000
 800ec14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	691a      	ldr	r2, [r3, #16]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec32:	b2d2      	uxtb	r2, r2
 800ec34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3a:	1c5a      	adds	r2, r3, #1
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec44:	3b01      	subs	r3, #1
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	3b01      	subs	r3, #1
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	691a      	ldr	r2, [r3, #16]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec64:	b2d2      	uxtb	r2, r2
 800ec66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec6c:	1c5a      	adds	r2, r3, #1
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec76:	3b01      	subs	r3, #1
 800ec78:	b29a      	uxth	r2, r3
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	3b01      	subs	r3, #1
 800ec86:	b29a      	uxth	r2, r3
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ec8c:	e0c4      	b.n	800ee18 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ec8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec90:	9300      	str	r3, [sp, #0]
 800ec92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec94:	2200      	movs	r2, #0
 800ec96:	496c      	ldr	r1, [pc, #432]	; (800ee48 <HAL_I2C_Master_Receive+0x460>)
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f000 fa27 	bl	800f0ec <I2C_WaitOnFlagUntilTimeout>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d001      	beq.n	800eca8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800eca4:	2301      	movs	r3, #1
 800eca6:	e0cb      	b.n	800ee40 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ecb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	691a      	ldr	r2, [r3, #16]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc2:	b2d2      	uxtb	r2, r2
 800ecc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecca:	1c5a      	adds	r2, r3, #1
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ecd4:	3b01      	subs	r3, #1
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	3b01      	subs	r3, #1
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ecea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	4955      	ldr	r1, [pc, #340]	; (800ee48 <HAL_I2C_Master_Receive+0x460>)
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	f000 f9f9 	bl	800f0ec <I2C_WaitOnFlagUntilTimeout>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d001      	beq.n	800ed04 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800ed00:	2301      	movs	r3, #1
 800ed02:	e09d      	b.n	800ee40 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	691a      	ldr	r2, [r3, #16]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1e:	b2d2      	uxtb	r2, r2
 800ed20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed26:	1c5a      	adds	r2, r3, #1
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed30:	3b01      	subs	r3, #1
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	3b01      	subs	r3, #1
 800ed40:	b29a      	uxth	r2, r3
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	691a      	ldr	r2, [r3, #16]
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed50:	b2d2      	uxtb	r2, r2
 800ed52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed58:	1c5a      	adds	r2, r3, #1
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed62:	3b01      	subs	r3, #1
 800ed64:	b29a      	uxth	r2, r3
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	3b01      	subs	r3, #1
 800ed72:	b29a      	uxth	r2, r3
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ed78:	e04e      	b.n	800ee18 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ed7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed7e:	68f8      	ldr	r0, [r7, #12]
 800ed80:	f000 fb5e 	bl	800f440 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ed84:	4603      	mov	r3, r0
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d001      	beq.n	800ed8e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e058      	b.n	800ee40 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	691a      	ldr	r2, [r3, #16]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed98:	b2d2      	uxtb	r2, r2
 800ed9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda0:	1c5a      	adds	r2, r3, #1
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800edaa:	3b01      	subs	r3, #1
 800edac:	b29a      	uxth	r2, r3
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	3b01      	subs	r3, #1
 800edba:	b29a      	uxth	r2, r3
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	695b      	ldr	r3, [r3, #20]
 800edc6:	f003 0304 	and.w	r3, r3, #4
 800edca:	2b04      	cmp	r3, #4
 800edcc:	d124      	bne.n	800ee18 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800edd2:	2b03      	cmp	r3, #3
 800edd4:	d107      	bne.n	800ede6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ede4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	691a      	ldr	r2, [r3, #16]
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf0:	b2d2      	uxtb	r2, r2
 800edf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf8:	1c5a      	adds	r2, r3, #1
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee02:	3b01      	subs	r3, #1
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	3b01      	subs	r3, #1
 800ee12:	b29a      	uxth	r2, r3
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	f47f aeb6 	bne.w	800eb8e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2220      	movs	r2, #32
 800ee26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	e000      	b.n	800ee40 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800ee3e:	2302      	movs	r3, #2
  }
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3728      	adds	r7, #40	; 0x28
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	00010004 	.word	0x00010004

0800ee4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b088      	sub	sp, #32
 800ee50:	af02      	add	r7, sp, #8
 800ee52:	60f8      	str	r0, [r7, #12]
 800ee54:	607a      	str	r2, [r7, #4]
 800ee56:	603b      	str	r3, [r7, #0]
 800ee58:	460b      	mov	r3, r1
 800ee5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	2b08      	cmp	r3, #8
 800ee66:	d006      	beq.n	800ee76 <I2C_MasterRequestWrite+0x2a>
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d003      	beq.n	800ee76 <I2C_MasterRequestWrite+0x2a>
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ee74:	d108      	bne.n	800ee88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	681a      	ldr	r2, [r3, #0]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ee84:	601a      	str	r2, [r3, #0]
 800ee86:	e00b      	b.n	800eea0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee8c:	2b12      	cmp	r3, #18
 800ee8e:	d107      	bne.n	800eea0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ee9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	9300      	str	r3, [sp, #0]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2200      	movs	r2, #0
 800eea8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	f000 f91d 	bl	800f0ec <I2C_WaitOnFlagUntilTimeout>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d00d      	beq.n	800eed4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eec6:	d103      	bne.n	800eed0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eece:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800eed0:	2303      	movs	r3, #3
 800eed2:	e035      	b.n	800ef40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	691b      	ldr	r3, [r3, #16]
 800eed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eedc:	d108      	bne.n	800eef0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800eede:	897b      	ldrh	r3, [r7, #10]
 800eee0:	b2db      	uxtb	r3, r3
 800eee2:	461a      	mov	r2, r3
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800eeec:	611a      	str	r2, [r3, #16]
 800eeee:	e01b      	b.n	800ef28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800eef0:	897b      	ldrh	r3, [r7, #10]
 800eef2:	11db      	asrs	r3, r3, #7
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	f003 0306 	and.w	r3, r3, #6
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	f063 030f 	orn	r3, r3, #15
 800ef00:	b2da      	uxtb	r2, r3
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	490e      	ldr	r1, [pc, #56]	; (800ef48 <I2C_MasterRequestWrite+0xfc>)
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f000 f966 	bl	800f1e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e010      	b.n	800ef40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ef1e:	897b      	ldrh	r3, [r7, #10]
 800ef20:	b2da      	uxtb	r2, r3
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	4907      	ldr	r1, [pc, #28]	; (800ef4c <I2C_MasterRequestWrite+0x100>)
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f000 f956 	bl	800f1e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d001      	beq.n	800ef3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e000      	b.n	800ef40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ef3e:	2300      	movs	r3, #0
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3718      	adds	r7, #24
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	00010008 	.word	0x00010008
 800ef4c:	00010002 	.word	0x00010002

0800ef50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b088      	sub	sp, #32
 800ef54:	af02      	add	r7, sp, #8
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	607a      	str	r2, [r7, #4]
 800ef5a:	603b      	str	r3, [r7, #0]
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ef74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	2b08      	cmp	r3, #8
 800ef7a:	d006      	beq.n	800ef8a <I2C_MasterRequestRead+0x3a>
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d003      	beq.n	800ef8a <I2C_MasterRequestRead+0x3a>
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ef88:	d108      	bne.n	800ef9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ef98:	601a      	str	r2, [r3, #0]
 800ef9a:	e00b      	b.n	800efb4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efa0:	2b11      	cmp	r3, #17
 800efa2:	d107      	bne.n	800efb4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	681a      	ldr	r2, [r3, #0]
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800efb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f000 f893 	bl	800f0ec <I2C_WaitOnFlagUntilTimeout>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00d      	beq.n	800efe8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efda:	d103      	bne.n	800efe4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efe2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800efe4:	2303      	movs	r3, #3
 800efe6:	e079      	b.n	800f0dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	691b      	ldr	r3, [r3, #16]
 800efec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eff0:	d108      	bne.n	800f004 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800eff2:	897b      	ldrh	r3, [r7, #10]
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	f043 0301 	orr.w	r3, r3, #1
 800effa:	b2da      	uxtb	r2, r3
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	611a      	str	r2, [r3, #16]
 800f002:	e05f      	b.n	800f0c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800f004:	897b      	ldrh	r3, [r7, #10]
 800f006:	11db      	asrs	r3, r3, #7
 800f008:	b2db      	uxtb	r3, r3
 800f00a:	f003 0306 	and.w	r3, r3, #6
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	f063 030f 	orn	r3, r3, #15
 800f014:	b2da      	uxtb	r2, r3
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	4930      	ldr	r1, [pc, #192]	; (800f0e4 <I2C_MasterRequestRead+0x194>)
 800f022:	68f8      	ldr	r0, [r7, #12]
 800f024:	f000 f8dc 	bl	800f1e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f028:	4603      	mov	r3, r0
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d001      	beq.n	800f032 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800f02e:	2301      	movs	r3, #1
 800f030:	e054      	b.n	800f0dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800f032:	897b      	ldrh	r3, [r7, #10]
 800f034:	b2da      	uxtb	r2, r3
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	4929      	ldr	r1, [pc, #164]	; (800f0e8 <I2C_MasterRequestRead+0x198>)
 800f042:	68f8      	ldr	r0, [r7, #12]
 800f044:	f000 f8cc 	bl	800f1e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d001      	beq.n	800f052 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800f04e:	2301      	movs	r3, #1
 800f050:	e044      	b.n	800f0dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f052:	2300      	movs	r3, #0
 800f054:	613b      	str	r3, [r7, #16]
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	695b      	ldr	r3, [r3, #20]
 800f05c:	613b      	str	r3, [r7, #16]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	699b      	ldr	r3, [r3, #24]
 800f064:	613b      	str	r3, [r7, #16]
 800f066:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f076:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2200      	movs	r2, #0
 800f080:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f084:	68f8      	ldr	r0, [r7, #12]
 800f086:	f000 f831 	bl	800f0ec <I2C_WaitOnFlagUntilTimeout>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00d      	beq.n	800f0ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f09a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f09e:	d103      	bne.n	800f0a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f0a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800f0a8:	2303      	movs	r3, #3
 800f0aa:	e017      	b.n	800f0dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800f0ac:	897b      	ldrh	r3, [r7, #10]
 800f0ae:	11db      	asrs	r3, r3, #7
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	f003 0306 	and.w	r3, r3, #6
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	f063 030e 	orn	r3, r3, #14
 800f0bc:	b2da      	uxtb	r2, r3
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	4907      	ldr	r1, [pc, #28]	; (800f0e8 <I2C_MasterRequestRead+0x198>)
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	f000 f888 	bl	800f1e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d001      	beq.n	800f0da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	e000      	b.n	800f0dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800f0da:	2300      	movs	r3, #0
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3718      	adds	r7, #24
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}
 800f0e4:	00010008 	.word	0x00010008
 800f0e8:	00010002 	.word	0x00010002

0800f0ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	603b      	str	r3, [r7, #0]
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f0fc:	e048      	b.n	800f190 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f104:	d044      	beq.n	800f190 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f106:	f7fe ff79 	bl	800dffc <HAL_GetTick>
 800f10a:	4602      	mov	r2, r0
 800f10c:	69bb      	ldr	r3, [r7, #24]
 800f10e:	1ad3      	subs	r3, r2, r3
 800f110:	683a      	ldr	r2, [r7, #0]
 800f112:	429a      	cmp	r2, r3
 800f114:	d302      	bcc.n	800f11c <I2C_WaitOnFlagUntilTimeout+0x30>
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d139      	bne.n	800f190 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	0c1b      	lsrs	r3, r3, #16
 800f120:	b2db      	uxtb	r3, r3
 800f122:	2b01      	cmp	r3, #1
 800f124:	d10d      	bne.n	800f142 <I2C_WaitOnFlagUntilTimeout+0x56>
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	695b      	ldr	r3, [r3, #20]
 800f12c:	43da      	mvns	r2, r3
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	4013      	ands	r3, r2
 800f132:	b29b      	uxth	r3, r3
 800f134:	2b00      	cmp	r3, #0
 800f136:	bf0c      	ite	eq
 800f138:	2301      	moveq	r3, #1
 800f13a:	2300      	movne	r3, #0
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	461a      	mov	r2, r3
 800f140:	e00c      	b.n	800f15c <I2C_WaitOnFlagUntilTimeout+0x70>
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	699b      	ldr	r3, [r3, #24]
 800f148:	43da      	mvns	r2, r3
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	4013      	ands	r3, r2
 800f14e:	b29b      	uxth	r3, r3
 800f150:	2b00      	cmp	r3, #0
 800f152:	bf0c      	ite	eq
 800f154:	2301      	moveq	r3, #1
 800f156:	2300      	movne	r3, #0
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	461a      	mov	r2, r3
 800f15c:	79fb      	ldrb	r3, [r7, #7]
 800f15e:	429a      	cmp	r2, r3
 800f160:	d116      	bne.n	800f190 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2200      	movs	r2, #0
 800f166:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2220      	movs	r2, #32
 800f16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2200      	movs	r2, #0
 800f174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f17c:	f043 0220 	orr.w	r2, r3, #32
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2200      	movs	r2, #0
 800f188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800f18c:	2301      	movs	r3, #1
 800f18e:	e023      	b.n	800f1d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	0c1b      	lsrs	r3, r3, #16
 800f194:	b2db      	uxtb	r3, r3
 800f196:	2b01      	cmp	r3, #1
 800f198:	d10d      	bne.n	800f1b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	695b      	ldr	r3, [r3, #20]
 800f1a0:	43da      	mvns	r2, r3
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	4013      	ands	r3, r2
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	bf0c      	ite	eq
 800f1ac:	2301      	moveq	r3, #1
 800f1ae:	2300      	movne	r3, #0
 800f1b0:	b2db      	uxtb	r3, r3
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	e00c      	b.n	800f1d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	699b      	ldr	r3, [r3, #24]
 800f1bc:	43da      	mvns	r2, r3
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	4013      	ands	r3, r2
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	bf0c      	ite	eq
 800f1c8:	2301      	moveq	r3, #1
 800f1ca:	2300      	movne	r3, #0
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	79fb      	ldrb	r3, [r7, #7]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d093      	beq.n	800f0fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f1d6:	2300      	movs	r3, #0
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3710      	adds	r7, #16
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b084      	sub	sp, #16
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	607a      	str	r2, [r7, #4]
 800f1ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f1ee:	e071      	b.n	800f2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	695b      	ldr	r3, [r3, #20]
 800f1f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1fe:	d123      	bne.n	800f248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f20e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f218:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2200      	movs	r2, #0
 800f21e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2220      	movs	r2, #32
 800f224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2200      	movs	r2, #0
 800f22c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f234:	f043 0204 	orr.w	r2, r3, #4
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2200      	movs	r2, #0
 800f240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f244:	2301      	movs	r3, #1
 800f246:	e067      	b.n	800f318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f24e:	d041      	beq.n	800f2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f250:	f7fe fed4 	bl	800dffc <HAL_GetTick>
 800f254:	4602      	mov	r2, r0
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	1ad3      	subs	r3, r2, r3
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d302      	bcc.n	800f266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d136      	bne.n	800f2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	0c1b      	lsrs	r3, r3, #16
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	d10c      	bne.n	800f28a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	695b      	ldr	r3, [r3, #20]
 800f276:	43da      	mvns	r2, r3
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	4013      	ands	r3, r2
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	2b00      	cmp	r3, #0
 800f280:	bf14      	ite	ne
 800f282:	2301      	movne	r3, #1
 800f284:	2300      	moveq	r3, #0
 800f286:	b2db      	uxtb	r3, r3
 800f288:	e00b      	b.n	800f2a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	699b      	ldr	r3, [r3, #24]
 800f290:	43da      	mvns	r2, r3
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	4013      	ands	r3, r2
 800f296:	b29b      	uxth	r3, r3
 800f298:	2b00      	cmp	r3, #0
 800f29a:	bf14      	ite	ne
 800f29c:	2301      	movne	r3, #1
 800f29e:	2300      	moveq	r3, #0
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d016      	beq.n	800f2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2220      	movs	r2, #32
 800f2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2c0:	f043 0220 	orr.w	r2, r3, #32
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	e021      	b.n	800f318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	0c1b      	lsrs	r3, r3, #16
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d10c      	bne.n	800f2f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	695b      	ldr	r3, [r3, #20]
 800f2e4:	43da      	mvns	r2, r3
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	4013      	ands	r3, r2
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	bf14      	ite	ne
 800f2f0:	2301      	movne	r3, #1
 800f2f2:	2300      	moveq	r3, #0
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	e00b      	b.n	800f310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	699b      	ldr	r3, [r3, #24]
 800f2fe:	43da      	mvns	r2, r3
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	4013      	ands	r3, r2
 800f304:	b29b      	uxth	r3, r3
 800f306:	2b00      	cmp	r3, #0
 800f308:	bf14      	ite	ne
 800f30a:	2301      	movne	r3, #1
 800f30c:	2300      	moveq	r3, #0
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	2b00      	cmp	r3, #0
 800f312:	f47f af6d 	bne.w	800f1f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800f316:	2300      	movs	r3, #0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f32c:	e034      	b.n	800f398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f32e:	68f8      	ldr	r0, [r7, #12]
 800f330:	f000 f8e3 	bl	800f4fa <I2C_IsAcknowledgeFailed>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d001      	beq.n	800f33e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f33a:	2301      	movs	r3, #1
 800f33c:	e034      	b.n	800f3a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f344:	d028      	beq.n	800f398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f346:	f7fe fe59 	bl	800dffc <HAL_GetTick>
 800f34a:	4602      	mov	r2, r0
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	1ad3      	subs	r3, r2, r3
 800f350:	68ba      	ldr	r2, [r7, #8]
 800f352:	429a      	cmp	r2, r3
 800f354:	d302      	bcc.n	800f35c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d11d      	bne.n	800f398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	695b      	ldr	r3, [r3, #20]
 800f362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f366:	2b80      	cmp	r3, #128	; 0x80
 800f368:	d016      	beq.n	800f398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2200      	movs	r2, #0
 800f36e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2220      	movs	r2, #32
 800f374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2200      	movs	r2, #0
 800f37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f384:	f043 0220 	orr.w	r2, r3, #32
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2200      	movs	r2, #0
 800f390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800f394:	2301      	movs	r3, #1
 800f396:	e007      	b.n	800f3a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	695b      	ldr	r3, [r3, #20]
 800f39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3a2:	2b80      	cmp	r3, #128	; 0x80
 800f3a4:	d1c3      	bne.n	800f32e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f3a6:	2300      	movs	r3, #0
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b084      	sub	sp, #16
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	60f8      	str	r0, [r7, #12]
 800f3b8:	60b9      	str	r1, [r7, #8]
 800f3ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f3bc:	e034      	b.n	800f428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f000 f89b 	bl	800f4fa <I2C_IsAcknowledgeFailed>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d001      	beq.n	800f3ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	e034      	b.n	800f438 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3d4:	d028      	beq.n	800f428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3d6:	f7fe fe11 	bl	800dffc <HAL_GetTick>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	1ad3      	subs	r3, r2, r3
 800f3e0:	68ba      	ldr	r2, [r7, #8]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d302      	bcc.n	800f3ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d11d      	bne.n	800f428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	695b      	ldr	r3, [r3, #20]
 800f3f2:	f003 0304 	and.w	r3, r3, #4
 800f3f6:	2b04      	cmp	r3, #4
 800f3f8:	d016      	beq.n	800f428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2220      	movs	r2, #32
 800f404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2200      	movs	r2, #0
 800f40c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f414:	f043 0220 	orr.w	r2, r3, #32
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2200      	movs	r2, #0
 800f420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800f424:	2301      	movs	r3, #1
 800f426:	e007      	b.n	800f438 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	695b      	ldr	r3, [r3, #20]
 800f42e:	f003 0304 	and.w	r3, r3, #4
 800f432:	2b04      	cmp	r3, #4
 800f434:	d1c3      	bne.n	800f3be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f436:	2300      	movs	r3, #0
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f44c:	e049      	b.n	800f4e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	695b      	ldr	r3, [r3, #20]
 800f454:	f003 0310 	and.w	r3, r3, #16
 800f458:	2b10      	cmp	r3, #16
 800f45a:	d119      	bne.n	800f490 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f06f 0210 	mvn.w	r2, #16
 800f464:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2200      	movs	r2, #0
 800f46a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	2220      	movs	r2, #32
 800f470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2200      	movs	r2, #0
 800f478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2200      	movs	r2, #0
 800f488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f48c:	2301      	movs	r3, #1
 800f48e:	e030      	b.n	800f4f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f490:	f7fe fdb4 	bl	800dffc <HAL_GetTick>
 800f494:	4602      	mov	r2, r0
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	1ad3      	subs	r3, r2, r3
 800f49a:	68ba      	ldr	r2, [r7, #8]
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d302      	bcc.n	800f4a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d11d      	bne.n	800f4e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	695b      	ldr	r3, [r3, #20]
 800f4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4b0:	2b40      	cmp	r3, #64	; 0x40
 800f4b2:	d016      	beq.n	800f4e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2220      	movs	r2, #32
 800f4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ce:	f043 0220 	orr.w	r2, r3, #32
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f4de:	2301      	movs	r3, #1
 800f4e0:	e007      	b.n	800f4f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	695b      	ldr	r3, [r3, #20]
 800f4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4ec:	2b40      	cmp	r3, #64	; 0x40
 800f4ee:	d1ae      	bne.n	800f44e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3710      	adds	r7, #16
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}

0800f4fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f4fa:	b480      	push	{r7}
 800f4fc:	b083      	sub	sp, #12
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	695b      	ldr	r3, [r3, #20]
 800f508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f50c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f510:	d11b      	bne.n	800f54a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f51a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2220      	movs	r2, #32
 800f526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2200      	movs	r2, #0
 800f52e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f536:	f043 0204 	orr.w	r2, r3, #4
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2200      	movs	r2, #0
 800f542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800f546:	2301      	movs	r3, #1
 800f548:	e000      	b.n	800f54c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f54a:	2300      	movs	r3, #0
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	370c      	adds	r7, #12
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr

0800f558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d101      	bne.n	800f56a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f566:	2301      	movs	r3, #1
 800f568:	e267      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f003 0301 	and.w	r3, r3, #1
 800f572:	2b00      	cmp	r3, #0
 800f574:	d075      	beq.n	800f662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800f576:	4b88      	ldr	r3, [pc, #544]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f578:	689b      	ldr	r3, [r3, #8]
 800f57a:	f003 030c 	and.w	r3, r3, #12
 800f57e:	2b04      	cmp	r3, #4
 800f580:	d00c      	beq.n	800f59c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f582:	4b85      	ldr	r3, [pc, #532]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f584:	689b      	ldr	r3, [r3, #8]
 800f586:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800f58a:	2b08      	cmp	r3, #8
 800f58c:	d112      	bne.n	800f5b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f58e:	4b82      	ldr	r3, [pc, #520]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f59a:	d10b      	bne.n	800f5b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f59c:	4b7e      	ldr	r3, [pc, #504]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d05b      	beq.n	800f660 <HAL_RCC_OscConfig+0x108>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d157      	bne.n	800f660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	e242      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5bc:	d106      	bne.n	800f5cc <HAL_RCC_OscConfig+0x74>
 800f5be:	4b76      	ldr	r3, [pc, #472]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4a75      	ldr	r2, [pc, #468]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f5c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f5c8:	6013      	str	r3, [r2, #0]
 800f5ca:	e01d      	b.n	800f608 <HAL_RCC_OscConfig+0xb0>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f5d4:	d10c      	bne.n	800f5f0 <HAL_RCC_OscConfig+0x98>
 800f5d6:	4b70      	ldr	r3, [pc, #448]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	4a6f      	ldr	r2, [pc, #444]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f5dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f5e0:	6013      	str	r3, [r2, #0]
 800f5e2:	4b6d      	ldr	r3, [pc, #436]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	4a6c      	ldr	r2, [pc, #432]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f5e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f5ec:	6013      	str	r3, [r2, #0]
 800f5ee:	e00b      	b.n	800f608 <HAL_RCC_OscConfig+0xb0>
 800f5f0:	4b69      	ldr	r3, [pc, #420]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4a68      	ldr	r2, [pc, #416]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f5f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f5fa:	6013      	str	r3, [r2, #0]
 800f5fc:	4b66      	ldr	r3, [pc, #408]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4a65      	ldr	r2, [pc, #404]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d013      	beq.n	800f638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f610:	f7fe fcf4 	bl	800dffc <HAL_GetTick>
 800f614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f616:	e008      	b.n	800f62a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f618:	f7fe fcf0 	bl	800dffc <HAL_GetTick>
 800f61c:	4602      	mov	r2, r0
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	1ad3      	subs	r3, r2, r3
 800f622:	2b64      	cmp	r3, #100	; 0x64
 800f624:	d901      	bls.n	800f62a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f626:	2303      	movs	r3, #3
 800f628:	e207      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f62a:	4b5b      	ldr	r3, [pc, #364]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f632:	2b00      	cmp	r3, #0
 800f634:	d0f0      	beq.n	800f618 <HAL_RCC_OscConfig+0xc0>
 800f636:	e014      	b.n	800f662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f638:	f7fe fce0 	bl	800dffc <HAL_GetTick>
 800f63c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f63e:	e008      	b.n	800f652 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f640:	f7fe fcdc 	bl	800dffc <HAL_GetTick>
 800f644:	4602      	mov	r2, r0
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	1ad3      	subs	r3, r2, r3
 800f64a:	2b64      	cmp	r3, #100	; 0x64
 800f64c:	d901      	bls.n	800f652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f64e:	2303      	movs	r3, #3
 800f650:	e1f3      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f652:	4b51      	ldr	r3, [pc, #324]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d1f0      	bne.n	800f640 <HAL_RCC_OscConfig+0xe8>
 800f65e:	e000      	b.n	800f662 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f003 0302 	and.w	r3, r3, #2
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d063      	beq.n	800f736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800f66e:	4b4a      	ldr	r3, [pc, #296]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f670:	689b      	ldr	r3, [r3, #8]
 800f672:	f003 030c 	and.w	r3, r3, #12
 800f676:	2b00      	cmp	r3, #0
 800f678:	d00b      	beq.n	800f692 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f67a:	4b47      	ldr	r3, [pc, #284]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800f682:	2b08      	cmp	r3, #8
 800f684:	d11c      	bne.n	800f6c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f686:	4b44      	ldr	r3, [pc, #272]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d116      	bne.n	800f6c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f692:	4b41      	ldr	r3, [pc, #260]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f003 0302 	and.w	r3, r3, #2
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d005      	beq.n	800f6aa <HAL_RCC_OscConfig+0x152>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d001      	beq.n	800f6aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e1c7      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f6aa:	4b3b      	ldr	r3, [pc, #236]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	00db      	lsls	r3, r3, #3
 800f6b8:	4937      	ldr	r1, [pc, #220]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f6ba:	4313      	orrs	r3, r2
 800f6bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f6be:	e03a      	b.n	800f736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d020      	beq.n	800f70a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f6c8:	4b34      	ldr	r3, [pc, #208]	; (800f79c <HAL_RCC_OscConfig+0x244>)
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f6ce:	f7fe fc95 	bl	800dffc <HAL_GetTick>
 800f6d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f6d4:	e008      	b.n	800f6e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f6d6:	f7fe fc91 	bl	800dffc <HAL_GetTick>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	1ad3      	subs	r3, r2, r3
 800f6e0:	2b02      	cmp	r3, #2
 800f6e2:	d901      	bls.n	800f6e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f6e4:	2303      	movs	r3, #3
 800f6e6:	e1a8      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f6e8:	4b2b      	ldr	r3, [pc, #172]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f003 0302 	and.w	r3, r3, #2
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d0f0      	beq.n	800f6d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f6f4:	4b28      	ldr	r3, [pc, #160]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	00db      	lsls	r3, r3, #3
 800f702:	4925      	ldr	r1, [pc, #148]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f704:	4313      	orrs	r3, r2
 800f706:	600b      	str	r3, [r1, #0]
 800f708:	e015      	b.n	800f736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f70a:	4b24      	ldr	r3, [pc, #144]	; (800f79c <HAL_RCC_OscConfig+0x244>)
 800f70c:	2200      	movs	r2, #0
 800f70e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f710:	f7fe fc74 	bl	800dffc <HAL_GetTick>
 800f714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f716:	e008      	b.n	800f72a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f718:	f7fe fc70 	bl	800dffc <HAL_GetTick>
 800f71c:	4602      	mov	r2, r0
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	1ad3      	subs	r3, r2, r3
 800f722:	2b02      	cmp	r3, #2
 800f724:	d901      	bls.n	800f72a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f726:	2303      	movs	r3, #3
 800f728:	e187      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f72a:	4b1b      	ldr	r3, [pc, #108]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	f003 0302 	and.w	r3, r3, #2
 800f732:	2b00      	cmp	r3, #0
 800f734:	d1f0      	bne.n	800f718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	f003 0308 	and.w	r3, r3, #8
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d036      	beq.n	800f7b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	695b      	ldr	r3, [r3, #20]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d016      	beq.n	800f778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f74a:	4b15      	ldr	r3, [pc, #84]	; (800f7a0 <HAL_RCC_OscConfig+0x248>)
 800f74c:	2201      	movs	r2, #1
 800f74e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f750:	f7fe fc54 	bl	800dffc <HAL_GetTick>
 800f754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f756:	e008      	b.n	800f76a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f758:	f7fe fc50 	bl	800dffc <HAL_GetTick>
 800f75c:	4602      	mov	r2, r0
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	1ad3      	subs	r3, r2, r3
 800f762:	2b02      	cmp	r3, #2
 800f764:	d901      	bls.n	800f76a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f766:	2303      	movs	r3, #3
 800f768:	e167      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f76a:	4b0b      	ldr	r3, [pc, #44]	; (800f798 <HAL_RCC_OscConfig+0x240>)
 800f76c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f76e:	f003 0302 	and.w	r3, r3, #2
 800f772:	2b00      	cmp	r3, #0
 800f774:	d0f0      	beq.n	800f758 <HAL_RCC_OscConfig+0x200>
 800f776:	e01b      	b.n	800f7b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f778:	4b09      	ldr	r3, [pc, #36]	; (800f7a0 <HAL_RCC_OscConfig+0x248>)
 800f77a:	2200      	movs	r2, #0
 800f77c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f77e:	f7fe fc3d 	bl	800dffc <HAL_GetTick>
 800f782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f784:	e00e      	b.n	800f7a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f786:	f7fe fc39 	bl	800dffc <HAL_GetTick>
 800f78a:	4602      	mov	r2, r0
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	1ad3      	subs	r3, r2, r3
 800f790:	2b02      	cmp	r3, #2
 800f792:	d907      	bls.n	800f7a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f794:	2303      	movs	r3, #3
 800f796:	e150      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
 800f798:	40023800 	.word	0x40023800
 800f79c:	42470000 	.word	0x42470000
 800f7a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f7a4:	4b88      	ldr	r3, [pc, #544]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f7a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7a8:	f003 0302 	and.w	r3, r3, #2
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d1ea      	bne.n	800f786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f003 0304 	and.w	r3, r3, #4
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f000 8097 	beq.w	800f8ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f7c2:	4b81      	ldr	r3, [pc, #516]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d10f      	bne.n	800f7ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	60bb      	str	r3, [r7, #8]
 800f7d2:	4b7d      	ldr	r3, [pc, #500]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7d6:	4a7c      	ldr	r2, [pc, #496]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f7d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7dc:	6413      	str	r3, [r2, #64]	; 0x40
 800f7de:	4b7a      	ldr	r3, [pc, #488]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7e6:	60bb      	str	r3, [r7, #8]
 800f7e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f7ee:	4b77      	ldr	r3, [pc, #476]	; (800f9cc <HAL_RCC_OscConfig+0x474>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d118      	bne.n	800f82c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f7fa:	4b74      	ldr	r3, [pc, #464]	; (800f9cc <HAL_RCC_OscConfig+0x474>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	4a73      	ldr	r2, [pc, #460]	; (800f9cc <HAL_RCC_OscConfig+0x474>)
 800f800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f806:	f7fe fbf9 	bl	800dffc <HAL_GetTick>
 800f80a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f80c:	e008      	b.n	800f820 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f80e:	f7fe fbf5 	bl	800dffc <HAL_GetTick>
 800f812:	4602      	mov	r2, r0
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	1ad3      	subs	r3, r2, r3
 800f818:	2b02      	cmp	r3, #2
 800f81a:	d901      	bls.n	800f820 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800f81c:	2303      	movs	r3, #3
 800f81e:	e10c      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f820:	4b6a      	ldr	r3, [pc, #424]	; (800f9cc <HAL_RCC_OscConfig+0x474>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d0f0      	beq.n	800f80e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	689b      	ldr	r3, [r3, #8]
 800f830:	2b01      	cmp	r3, #1
 800f832:	d106      	bne.n	800f842 <HAL_RCC_OscConfig+0x2ea>
 800f834:	4b64      	ldr	r3, [pc, #400]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f838:	4a63      	ldr	r2, [pc, #396]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f83a:	f043 0301 	orr.w	r3, r3, #1
 800f83e:	6713      	str	r3, [r2, #112]	; 0x70
 800f840:	e01c      	b.n	800f87c <HAL_RCC_OscConfig+0x324>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	689b      	ldr	r3, [r3, #8]
 800f846:	2b05      	cmp	r3, #5
 800f848:	d10c      	bne.n	800f864 <HAL_RCC_OscConfig+0x30c>
 800f84a:	4b5f      	ldr	r3, [pc, #380]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f84e:	4a5e      	ldr	r2, [pc, #376]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f850:	f043 0304 	orr.w	r3, r3, #4
 800f854:	6713      	str	r3, [r2, #112]	; 0x70
 800f856:	4b5c      	ldr	r3, [pc, #368]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f85a:	4a5b      	ldr	r2, [pc, #364]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f85c:	f043 0301 	orr.w	r3, r3, #1
 800f860:	6713      	str	r3, [r2, #112]	; 0x70
 800f862:	e00b      	b.n	800f87c <HAL_RCC_OscConfig+0x324>
 800f864:	4b58      	ldr	r3, [pc, #352]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f868:	4a57      	ldr	r2, [pc, #348]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f86a:	f023 0301 	bic.w	r3, r3, #1
 800f86e:	6713      	str	r3, [r2, #112]	; 0x70
 800f870:	4b55      	ldr	r3, [pc, #340]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f874:	4a54      	ldr	r2, [pc, #336]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f876:	f023 0304 	bic.w	r3, r3, #4
 800f87a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	689b      	ldr	r3, [r3, #8]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d015      	beq.n	800f8b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f884:	f7fe fbba 	bl	800dffc <HAL_GetTick>
 800f888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f88a:	e00a      	b.n	800f8a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f88c:	f7fe fbb6 	bl	800dffc <HAL_GetTick>
 800f890:	4602      	mov	r2, r0
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	1ad3      	subs	r3, r2, r3
 800f896:	f241 3288 	movw	r2, #5000	; 0x1388
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d901      	bls.n	800f8a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800f89e:	2303      	movs	r3, #3
 800f8a0:	e0cb      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f8a2:	4b49      	ldr	r3, [pc, #292]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8a6:	f003 0302 	and.w	r3, r3, #2
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d0ee      	beq.n	800f88c <HAL_RCC_OscConfig+0x334>
 800f8ae:	e014      	b.n	800f8da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f8b0:	f7fe fba4 	bl	800dffc <HAL_GetTick>
 800f8b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f8b6:	e00a      	b.n	800f8ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f8b8:	f7fe fba0 	bl	800dffc <HAL_GetTick>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	1ad3      	subs	r3, r2, r3
 800f8c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d901      	bls.n	800f8ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800f8ca:	2303      	movs	r3, #3
 800f8cc:	e0b5      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f8ce:	4b3e      	ldr	r3, [pc, #248]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f8d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8d2:	f003 0302 	and.w	r3, r3, #2
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d1ee      	bne.n	800f8b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800f8da:	7dfb      	ldrb	r3, [r7, #23]
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	d105      	bne.n	800f8ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f8e0:	4b39      	ldr	r3, [pc, #228]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8e4:	4a38      	ldr	r2, [pc, #224]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f8e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f8ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	699b      	ldr	r3, [r3, #24]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f000 80a1 	beq.w	800fa38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f8f6:	4b34      	ldr	r3, [pc, #208]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f8f8:	689b      	ldr	r3, [r3, #8]
 800f8fa:	f003 030c 	and.w	r3, r3, #12
 800f8fe:	2b08      	cmp	r3, #8
 800f900:	d05c      	beq.n	800f9bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	699b      	ldr	r3, [r3, #24]
 800f906:	2b02      	cmp	r3, #2
 800f908:	d141      	bne.n	800f98e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f90a:	4b31      	ldr	r3, [pc, #196]	; (800f9d0 <HAL_RCC_OscConfig+0x478>)
 800f90c:	2200      	movs	r2, #0
 800f90e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f910:	f7fe fb74 	bl	800dffc <HAL_GetTick>
 800f914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f916:	e008      	b.n	800f92a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f918:	f7fe fb70 	bl	800dffc <HAL_GetTick>
 800f91c:	4602      	mov	r2, r0
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	1ad3      	subs	r3, r2, r3
 800f922:	2b02      	cmp	r3, #2
 800f924:	d901      	bls.n	800f92a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f926:	2303      	movs	r3, #3
 800f928:	e087      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f92a:	4b27      	ldr	r3, [pc, #156]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f932:	2b00      	cmp	r3, #0
 800f934:	d1f0      	bne.n	800f918 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	69da      	ldr	r2, [r3, #28]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6a1b      	ldr	r3, [r3, #32]
 800f93e:	431a      	orrs	r2, r3
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f944:	019b      	lsls	r3, r3, #6
 800f946:	431a      	orrs	r2, r3
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f94c:	085b      	lsrs	r3, r3, #1
 800f94e:	3b01      	subs	r3, #1
 800f950:	041b      	lsls	r3, r3, #16
 800f952:	431a      	orrs	r2, r3
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f958:	061b      	lsls	r3, r3, #24
 800f95a:	491b      	ldr	r1, [pc, #108]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f95c:	4313      	orrs	r3, r2
 800f95e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f960:	4b1b      	ldr	r3, [pc, #108]	; (800f9d0 <HAL_RCC_OscConfig+0x478>)
 800f962:	2201      	movs	r2, #1
 800f964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f966:	f7fe fb49 	bl	800dffc <HAL_GetTick>
 800f96a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f96c:	e008      	b.n	800f980 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f96e:	f7fe fb45 	bl	800dffc <HAL_GetTick>
 800f972:	4602      	mov	r2, r0
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	1ad3      	subs	r3, r2, r3
 800f978:	2b02      	cmp	r3, #2
 800f97a:	d901      	bls.n	800f980 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f97c:	2303      	movs	r3, #3
 800f97e:	e05c      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f980:	4b11      	ldr	r3, [pc, #68]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d0f0      	beq.n	800f96e <HAL_RCC_OscConfig+0x416>
 800f98c:	e054      	b.n	800fa38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f98e:	4b10      	ldr	r3, [pc, #64]	; (800f9d0 <HAL_RCC_OscConfig+0x478>)
 800f990:	2200      	movs	r2, #0
 800f992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f994:	f7fe fb32 	bl	800dffc <HAL_GetTick>
 800f998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f99a:	e008      	b.n	800f9ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f99c:	f7fe fb2e 	bl	800dffc <HAL_GetTick>
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	1ad3      	subs	r3, r2, r3
 800f9a6:	2b02      	cmp	r3, #2
 800f9a8:	d901      	bls.n	800f9ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f9aa:	2303      	movs	r3, #3
 800f9ac:	e045      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f9ae:	4b06      	ldr	r3, [pc, #24]	; (800f9c8 <HAL_RCC_OscConfig+0x470>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d1f0      	bne.n	800f99c <HAL_RCC_OscConfig+0x444>
 800f9ba:	e03d      	b.n	800fa38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	699b      	ldr	r3, [r3, #24]
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	d107      	bne.n	800f9d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	e038      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
 800f9c8:	40023800 	.word	0x40023800
 800f9cc:	40007000 	.word	0x40007000
 800f9d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f9d4:	4b1b      	ldr	r3, [pc, #108]	; (800fa44 <HAL_RCC_OscConfig+0x4ec>)
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	699b      	ldr	r3, [r3, #24]
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d028      	beq.n	800fa34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d121      	bne.n	800fa34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d11a      	bne.n	800fa34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f9fe:	68fa      	ldr	r2, [r7, #12]
 800fa00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800fa04:	4013      	ands	r3, r2
 800fa06:	687a      	ldr	r2, [r7, #4]
 800fa08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fa0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	d111      	bne.n	800fa34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa1a:	085b      	lsrs	r3, r3, #1
 800fa1c:	3b01      	subs	r3, #1
 800fa1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d107      	bne.n	800fa34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d001      	beq.n	800fa38 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800fa34:	2301      	movs	r3, #1
 800fa36:	e000      	b.n	800fa3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3718      	adds	r7, #24
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	40023800 	.word	0x40023800

0800fa48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b084      	sub	sp, #16
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d101      	bne.n	800fa5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fa58:	2301      	movs	r3, #1
 800fa5a:	e0cc      	b.n	800fbf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fa5c:	4b68      	ldr	r3, [pc, #416]	; (800fc00 <HAL_RCC_ClockConfig+0x1b8>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	f003 0307 	and.w	r3, r3, #7
 800fa64:	683a      	ldr	r2, [r7, #0]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d90c      	bls.n	800fa84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fa6a:	4b65      	ldr	r3, [pc, #404]	; (800fc00 <HAL_RCC_ClockConfig+0x1b8>)
 800fa6c:	683a      	ldr	r2, [r7, #0]
 800fa6e:	b2d2      	uxtb	r2, r2
 800fa70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fa72:	4b63      	ldr	r3, [pc, #396]	; (800fc00 <HAL_RCC_ClockConfig+0x1b8>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f003 0307 	and.w	r3, r3, #7
 800fa7a:	683a      	ldr	r2, [r7, #0]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d001      	beq.n	800fa84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800fa80:	2301      	movs	r3, #1
 800fa82:	e0b8      	b.n	800fbf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f003 0302 	and.w	r3, r3, #2
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d020      	beq.n	800fad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f003 0304 	and.w	r3, r3, #4
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d005      	beq.n	800faa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800fa9c:	4b59      	ldr	r3, [pc, #356]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fa9e:	689b      	ldr	r3, [r3, #8]
 800faa0:	4a58      	ldr	r2, [pc, #352]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800faa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800faa6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f003 0308 	and.w	r3, r3, #8
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d005      	beq.n	800fac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800fab4:	4b53      	ldr	r3, [pc, #332]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fab6:	689b      	ldr	r3, [r3, #8]
 800fab8:	4a52      	ldr	r2, [pc, #328]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800faba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800fabe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fac0:	4b50      	ldr	r3, [pc, #320]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fac2:	689b      	ldr	r3, [r3, #8]
 800fac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	689b      	ldr	r3, [r3, #8]
 800facc:	494d      	ldr	r1, [pc, #308]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800face:	4313      	orrs	r3, r2
 800fad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f003 0301 	and.w	r3, r3, #1
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d044      	beq.n	800fb68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	2b01      	cmp	r3, #1
 800fae4:	d107      	bne.n	800faf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fae6:	4b47      	ldr	r3, [pc, #284]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d119      	bne.n	800fb26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800faf2:	2301      	movs	r3, #1
 800faf4:	e07f      	b.n	800fbf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	2b02      	cmp	r3, #2
 800fafc:	d003      	beq.n	800fb06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fb02:	2b03      	cmp	r3, #3
 800fb04:	d107      	bne.n	800fb16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fb06:	4b3f      	ldr	r3, [pc, #252]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d109      	bne.n	800fb26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fb12:	2301      	movs	r3, #1
 800fb14:	e06f      	b.n	800fbf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fb16:	4b3b      	ldr	r3, [pc, #236]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f003 0302 	and.w	r3, r3, #2
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d101      	bne.n	800fb26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fb22:	2301      	movs	r3, #1
 800fb24:	e067      	b.n	800fbf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800fb26:	4b37      	ldr	r3, [pc, #220]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fb28:	689b      	ldr	r3, [r3, #8]
 800fb2a:	f023 0203 	bic.w	r2, r3, #3
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	4934      	ldr	r1, [pc, #208]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fb34:	4313      	orrs	r3, r2
 800fb36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fb38:	f7fe fa60 	bl	800dffc <HAL_GetTick>
 800fb3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fb3e:	e00a      	b.n	800fb56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fb40:	f7fe fa5c 	bl	800dffc <HAL_GetTick>
 800fb44:	4602      	mov	r2, r0
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	1ad3      	subs	r3, r2, r3
 800fb4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d901      	bls.n	800fb56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800fb52:	2303      	movs	r3, #3
 800fb54:	e04f      	b.n	800fbf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fb56:	4b2b      	ldr	r3, [pc, #172]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fb58:	689b      	ldr	r3, [r3, #8]
 800fb5a:	f003 020c 	and.w	r2, r3, #12
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	685b      	ldr	r3, [r3, #4]
 800fb62:	009b      	lsls	r3, r3, #2
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d1eb      	bne.n	800fb40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fb68:	4b25      	ldr	r3, [pc, #148]	; (800fc00 <HAL_RCC_ClockConfig+0x1b8>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f003 0307 	and.w	r3, r3, #7
 800fb70:	683a      	ldr	r2, [r7, #0]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d20c      	bcs.n	800fb90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fb76:	4b22      	ldr	r3, [pc, #136]	; (800fc00 <HAL_RCC_ClockConfig+0x1b8>)
 800fb78:	683a      	ldr	r2, [r7, #0]
 800fb7a:	b2d2      	uxtb	r2, r2
 800fb7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fb7e:	4b20      	ldr	r3, [pc, #128]	; (800fc00 <HAL_RCC_ClockConfig+0x1b8>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f003 0307 	and.w	r3, r3, #7
 800fb86:	683a      	ldr	r2, [r7, #0]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d001      	beq.n	800fb90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	e032      	b.n	800fbf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	f003 0304 	and.w	r3, r3, #4
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d008      	beq.n	800fbae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fb9c:	4b19      	ldr	r3, [pc, #100]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	4916      	ldr	r1, [pc, #88]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f003 0308 	and.w	r3, r3, #8
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d009      	beq.n	800fbce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fbba:	4b12      	ldr	r3, [pc, #72]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fbbc:	689b      	ldr	r3, [r3, #8]
 800fbbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	00db      	lsls	r3, r3, #3
 800fbc8:	490e      	ldr	r1, [pc, #56]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800fbce:	f000 f821 	bl	800fc14 <HAL_RCC_GetSysClockFreq>
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	4b0b      	ldr	r3, [pc, #44]	; (800fc04 <HAL_RCC_ClockConfig+0x1bc>)
 800fbd6:	689b      	ldr	r3, [r3, #8]
 800fbd8:	091b      	lsrs	r3, r3, #4
 800fbda:	f003 030f 	and.w	r3, r3, #15
 800fbde:	490a      	ldr	r1, [pc, #40]	; (800fc08 <HAL_RCC_ClockConfig+0x1c0>)
 800fbe0:	5ccb      	ldrb	r3, [r1, r3]
 800fbe2:	fa22 f303 	lsr.w	r3, r2, r3
 800fbe6:	4a09      	ldr	r2, [pc, #36]	; (800fc0c <HAL_RCC_ClockConfig+0x1c4>)
 800fbe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800fbea:	4b09      	ldr	r3, [pc, #36]	; (800fc10 <HAL_RCC_ClockConfig+0x1c8>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7fe f9c0 	bl	800df74 <HAL_InitTick>

  return HAL_OK;
 800fbf4:	2300      	movs	r3, #0
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3710      	adds	r7, #16
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
 800fbfe:	bf00      	nop
 800fc00:	40023c00 	.word	0x40023c00
 800fc04:	40023800 	.word	0x40023800
 800fc08:	08011ef4 	.word	0x08011ef4
 800fc0c:	20000000 	.word	0x20000000
 800fc10:	20000048 	.word	0x20000048

0800fc14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fc14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fc18:	b094      	sub	sp, #80	; 0x50
 800fc1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 800fc20:	2300      	movs	r3, #0
 800fc22:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 800fc24:	2300      	movs	r3, #0
 800fc26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fc2c:	4b79      	ldr	r3, [pc, #484]	; (800fe14 <HAL_RCC_GetSysClockFreq+0x200>)
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	f003 030c 	and.w	r3, r3, #12
 800fc34:	2b08      	cmp	r3, #8
 800fc36:	d00d      	beq.n	800fc54 <HAL_RCC_GetSysClockFreq+0x40>
 800fc38:	2b08      	cmp	r3, #8
 800fc3a:	f200 80e1 	bhi.w	800fe00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d002      	beq.n	800fc48 <HAL_RCC_GetSysClockFreq+0x34>
 800fc42:	2b04      	cmp	r3, #4
 800fc44:	d003      	beq.n	800fc4e <HAL_RCC_GetSysClockFreq+0x3a>
 800fc46:	e0db      	b.n	800fe00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800fc48:	4b73      	ldr	r3, [pc, #460]	; (800fe18 <HAL_RCC_GetSysClockFreq+0x204>)
 800fc4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800fc4c:	e0db      	b.n	800fe06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800fc4e:	4b73      	ldr	r3, [pc, #460]	; (800fe1c <HAL_RCC_GetSysClockFreq+0x208>)
 800fc50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800fc52:	e0d8      	b.n	800fe06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fc54:	4b6f      	ldr	r3, [pc, #444]	; (800fe14 <HAL_RCC_GetSysClockFreq+0x200>)
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc5c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800fc5e:	4b6d      	ldr	r3, [pc, #436]	; (800fe14 <HAL_RCC_GetSysClockFreq+0x200>)
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d063      	beq.n	800fd32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fc6a:	4b6a      	ldr	r3, [pc, #424]	; (800fe14 <HAL_RCC_GetSysClockFreq+0x200>)
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	099b      	lsrs	r3, r3, #6
 800fc70:	2200      	movs	r2, #0
 800fc72:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc74:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc7c:	633b      	str	r3, [r7, #48]	; 0x30
 800fc7e:	2300      	movs	r3, #0
 800fc80:	637b      	str	r3, [r7, #52]	; 0x34
 800fc82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800fc86:	4622      	mov	r2, r4
 800fc88:	462b      	mov	r3, r5
 800fc8a:	f04f 0000 	mov.w	r0, #0
 800fc8e:	f04f 0100 	mov.w	r1, #0
 800fc92:	0159      	lsls	r1, r3, #5
 800fc94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fc98:	0150      	lsls	r0, r2, #5
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	4621      	mov	r1, r4
 800fca0:	1a51      	subs	r1, r2, r1
 800fca2:	6139      	str	r1, [r7, #16]
 800fca4:	4629      	mov	r1, r5
 800fca6:	eb63 0301 	sbc.w	r3, r3, r1
 800fcaa:	617b      	str	r3, [r7, #20]
 800fcac:	f04f 0200 	mov.w	r2, #0
 800fcb0:	f04f 0300 	mov.w	r3, #0
 800fcb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800fcb8:	4659      	mov	r1, fp
 800fcba:	018b      	lsls	r3, r1, #6
 800fcbc:	4651      	mov	r1, sl
 800fcbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800fcc2:	4651      	mov	r1, sl
 800fcc4:	018a      	lsls	r2, r1, #6
 800fcc6:	4651      	mov	r1, sl
 800fcc8:	ebb2 0801 	subs.w	r8, r2, r1
 800fccc:	4659      	mov	r1, fp
 800fcce:	eb63 0901 	sbc.w	r9, r3, r1
 800fcd2:	f04f 0200 	mov.w	r2, #0
 800fcd6:	f04f 0300 	mov.w	r3, #0
 800fcda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800fcde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800fce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800fce6:	4690      	mov	r8, r2
 800fce8:	4699      	mov	r9, r3
 800fcea:	4623      	mov	r3, r4
 800fcec:	eb18 0303 	adds.w	r3, r8, r3
 800fcf0:	60bb      	str	r3, [r7, #8]
 800fcf2:	462b      	mov	r3, r5
 800fcf4:	eb49 0303 	adc.w	r3, r9, r3
 800fcf8:	60fb      	str	r3, [r7, #12]
 800fcfa:	f04f 0200 	mov.w	r2, #0
 800fcfe:	f04f 0300 	mov.w	r3, #0
 800fd02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800fd06:	4629      	mov	r1, r5
 800fd08:	024b      	lsls	r3, r1, #9
 800fd0a:	4621      	mov	r1, r4
 800fd0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800fd10:	4621      	mov	r1, r4
 800fd12:	024a      	lsls	r2, r1, #9
 800fd14:	4610      	mov	r0, r2
 800fd16:	4619      	mov	r1, r3
 800fd18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fd24:	f7f0 faac 	bl	8000280 <__aeabi_uldivmod>
 800fd28:	4602      	mov	r2, r0
 800fd2a:	460b      	mov	r3, r1
 800fd2c:	4613      	mov	r3, r2
 800fd2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd30:	e058      	b.n	800fde4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fd32:	4b38      	ldr	r3, [pc, #224]	; (800fe14 <HAL_RCC_GetSysClockFreq+0x200>)
 800fd34:	685b      	ldr	r3, [r3, #4]
 800fd36:	099b      	lsrs	r3, r3, #6
 800fd38:	2200      	movs	r2, #0
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	4611      	mov	r1, r2
 800fd3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800fd42:	623b      	str	r3, [r7, #32]
 800fd44:	2300      	movs	r3, #0
 800fd46:	627b      	str	r3, [r7, #36]	; 0x24
 800fd48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800fd4c:	4642      	mov	r2, r8
 800fd4e:	464b      	mov	r3, r9
 800fd50:	f04f 0000 	mov.w	r0, #0
 800fd54:	f04f 0100 	mov.w	r1, #0
 800fd58:	0159      	lsls	r1, r3, #5
 800fd5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fd5e:	0150      	lsls	r0, r2, #5
 800fd60:	4602      	mov	r2, r0
 800fd62:	460b      	mov	r3, r1
 800fd64:	4641      	mov	r1, r8
 800fd66:	ebb2 0a01 	subs.w	sl, r2, r1
 800fd6a:	4649      	mov	r1, r9
 800fd6c:	eb63 0b01 	sbc.w	fp, r3, r1
 800fd70:	f04f 0200 	mov.w	r2, #0
 800fd74:	f04f 0300 	mov.w	r3, #0
 800fd78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800fd7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800fd80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800fd84:	ebb2 040a 	subs.w	r4, r2, sl
 800fd88:	eb63 050b 	sbc.w	r5, r3, fp
 800fd8c:	f04f 0200 	mov.w	r2, #0
 800fd90:	f04f 0300 	mov.w	r3, #0
 800fd94:	00eb      	lsls	r3, r5, #3
 800fd96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800fd9a:	00e2      	lsls	r2, r4, #3
 800fd9c:	4614      	mov	r4, r2
 800fd9e:	461d      	mov	r5, r3
 800fda0:	4643      	mov	r3, r8
 800fda2:	18e3      	adds	r3, r4, r3
 800fda4:	603b      	str	r3, [r7, #0]
 800fda6:	464b      	mov	r3, r9
 800fda8:	eb45 0303 	adc.w	r3, r5, r3
 800fdac:	607b      	str	r3, [r7, #4]
 800fdae:	f04f 0200 	mov.w	r2, #0
 800fdb2:	f04f 0300 	mov.w	r3, #0
 800fdb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800fdba:	4629      	mov	r1, r5
 800fdbc:	028b      	lsls	r3, r1, #10
 800fdbe:	4621      	mov	r1, r4
 800fdc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800fdc4:	4621      	mov	r1, r4
 800fdc6:	028a      	lsls	r2, r1, #10
 800fdc8:	4610      	mov	r0, r2
 800fdca:	4619      	mov	r1, r3
 800fdcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdce:	2200      	movs	r2, #0
 800fdd0:	61bb      	str	r3, [r7, #24]
 800fdd2:	61fa      	str	r2, [r7, #28]
 800fdd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fdd8:	f7f0 fa52 	bl	8000280 <__aeabi_uldivmod>
 800fddc:	4602      	mov	r2, r0
 800fdde:	460b      	mov	r3, r1
 800fde0:	4613      	mov	r3, r2
 800fde2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800fde4:	4b0b      	ldr	r3, [pc, #44]	; (800fe14 <HAL_RCC_GetSysClockFreq+0x200>)
 800fde6:	685b      	ldr	r3, [r3, #4]
 800fde8:	0c1b      	lsrs	r3, r3, #16
 800fdea:	f003 0303 	and.w	r3, r3, #3
 800fdee:	3301      	adds	r3, #1
 800fdf0:	005b      	lsls	r3, r3, #1
 800fdf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800fdf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fdf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800fdfe:	e002      	b.n	800fe06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800fe00:	4b05      	ldr	r3, [pc, #20]	; (800fe18 <HAL_RCC_GetSysClockFreq+0x204>)
 800fe02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800fe04:	bf00      	nop
    }
  }
  return sysclockfreq;
 800fe06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3750      	adds	r7, #80	; 0x50
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fe12:	bf00      	nop
 800fe14:	40023800 	.word	0x40023800
 800fe18:	00f42400 	.word	0x00f42400
 800fe1c:	007a1200 	.word	0x007a1200

0800fe20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fe20:	b480      	push	{r7}
 800fe22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fe24:	4b03      	ldr	r3, [pc, #12]	; (800fe34 <HAL_RCC_GetHCLKFreq+0x14>)
 800fe26:	681b      	ldr	r3, [r3, #0]
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr
 800fe32:	bf00      	nop
 800fe34:	20000000 	.word	0x20000000

0800fe38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800fe3c:	f7ff fff0 	bl	800fe20 <HAL_RCC_GetHCLKFreq>
 800fe40:	4602      	mov	r2, r0
 800fe42:	4b05      	ldr	r3, [pc, #20]	; (800fe58 <HAL_RCC_GetPCLK1Freq+0x20>)
 800fe44:	689b      	ldr	r3, [r3, #8]
 800fe46:	0a9b      	lsrs	r3, r3, #10
 800fe48:	f003 0307 	and.w	r3, r3, #7
 800fe4c:	4903      	ldr	r1, [pc, #12]	; (800fe5c <HAL_RCC_GetPCLK1Freq+0x24>)
 800fe4e:	5ccb      	ldrb	r3, [r1, r3]
 800fe50:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	40023800 	.word	0x40023800
 800fe5c:	08011f04 	.word	0x08011f04

0800fe60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800fe64:	f7ff ffdc 	bl	800fe20 <HAL_RCC_GetHCLKFreq>
 800fe68:	4602      	mov	r2, r0
 800fe6a:	4b05      	ldr	r3, [pc, #20]	; (800fe80 <HAL_RCC_GetPCLK2Freq+0x20>)
 800fe6c:	689b      	ldr	r3, [r3, #8]
 800fe6e:	0b5b      	lsrs	r3, r3, #13
 800fe70:	f003 0307 	and.w	r3, r3, #7
 800fe74:	4903      	ldr	r1, [pc, #12]	; (800fe84 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fe76:	5ccb      	ldrb	r3, [r1, r3]
 800fe78:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	bd80      	pop	{r7, pc}
 800fe80:	40023800 	.word	0x40023800
 800fe84:	08011f04 	.word	0x08011f04

0800fe88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d101      	bne.n	800fe9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fe96:	2301      	movs	r3, #1
 800fe98:	e042      	b.n	800ff20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d106      	bne.n	800feb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2200      	movs	r2, #0
 800feaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f7f1 fea0 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2224      	movs	r2, #36	; 0x24
 800feb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	68da      	ldr	r2, [r3, #12]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800feca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 f82b 	bl	800ff28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	691a      	ldr	r2, [r3, #16]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	695a      	ldr	r2, [r3, #20]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	68da      	ldr	r2, [r3, #12]
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ff00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2220      	movs	r2, #32
 800ff0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2220      	movs	r2, #32
 800ff14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ff1e:	2300      	movs	r3, #0
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ff28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ff2c:	b0c0      	sub	sp, #256	; 0x100
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	691b      	ldr	r3, [r3, #16]
 800ff3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ff40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff44:	68d9      	ldr	r1, [r3, #12]
 800ff46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff4a:	681a      	ldr	r2, [r3, #0]
 800ff4c:	ea40 0301 	orr.w	r3, r0, r1
 800ff50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ff52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff56:	689a      	ldr	r2, [r3, #8]
 800ff58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff5c:	691b      	ldr	r3, [r3, #16]
 800ff5e:	431a      	orrs	r2, r3
 800ff60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff64:	695b      	ldr	r3, [r3, #20]
 800ff66:	431a      	orrs	r2, r3
 800ff68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff6c:	69db      	ldr	r3, [r3, #28]
 800ff6e:	4313      	orrs	r3, r2
 800ff70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ff74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ff80:	f021 010c 	bic.w	r1, r1, #12
 800ff84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff88:	681a      	ldr	r2, [r3, #0]
 800ff8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ff8e:	430b      	orrs	r3, r1
 800ff90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ff92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	695b      	ldr	r3, [r3, #20]
 800ff9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ff9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ffa2:	6999      	ldr	r1, [r3, #24]
 800ffa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	ea40 0301 	orr.w	r3, r0, r1
 800ffae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ffb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	4b8f      	ldr	r3, [pc, #572]	; (80101f4 <UART_SetConfig+0x2cc>)
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d005      	beq.n	800ffc8 <UART_SetConfig+0xa0>
 800ffbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	4b8d      	ldr	r3, [pc, #564]	; (80101f8 <UART_SetConfig+0x2d0>)
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d104      	bne.n	800ffd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ffc8:	f7ff ff4a 	bl	800fe60 <HAL_RCC_GetPCLK2Freq>
 800ffcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ffd0:	e003      	b.n	800ffda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ffd2:	f7ff ff31 	bl	800fe38 <HAL_RCC_GetPCLK1Freq>
 800ffd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ffda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ffde:	69db      	ldr	r3, [r3, #28]
 800ffe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffe4:	f040 810c 	bne.w	8010200 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ffe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ffec:	2200      	movs	r2, #0
 800ffee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fff2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800fff6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800fffa:	4622      	mov	r2, r4
 800fffc:	462b      	mov	r3, r5
 800fffe:	1891      	adds	r1, r2, r2
 8010000:	65b9      	str	r1, [r7, #88]	; 0x58
 8010002:	415b      	adcs	r3, r3
 8010004:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010006:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801000a:	4621      	mov	r1, r4
 801000c:	eb12 0801 	adds.w	r8, r2, r1
 8010010:	4629      	mov	r1, r5
 8010012:	eb43 0901 	adc.w	r9, r3, r1
 8010016:	f04f 0200 	mov.w	r2, #0
 801001a:	f04f 0300 	mov.w	r3, #0
 801001e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010022:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010026:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801002a:	4690      	mov	r8, r2
 801002c:	4699      	mov	r9, r3
 801002e:	4623      	mov	r3, r4
 8010030:	eb18 0303 	adds.w	r3, r8, r3
 8010034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010038:	462b      	mov	r3, r5
 801003a:	eb49 0303 	adc.w	r3, r9, r3
 801003e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	2200      	movs	r2, #0
 801004a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801004e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8010052:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8010056:	460b      	mov	r3, r1
 8010058:	18db      	adds	r3, r3, r3
 801005a:	653b      	str	r3, [r7, #80]	; 0x50
 801005c:	4613      	mov	r3, r2
 801005e:	eb42 0303 	adc.w	r3, r2, r3
 8010062:	657b      	str	r3, [r7, #84]	; 0x54
 8010064:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010068:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801006c:	f7f0 f908 	bl	8000280 <__aeabi_uldivmod>
 8010070:	4602      	mov	r2, r0
 8010072:	460b      	mov	r3, r1
 8010074:	4b61      	ldr	r3, [pc, #388]	; (80101fc <UART_SetConfig+0x2d4>)
 8010076:	fba3 2302 	umull	r2, r3, r3, r2
 801007a:	095b      	lsrs	r3, r3, #5
 801007c:	011c      	lsls	r4, r3, #4
 801007e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010082:	2200      	movs	r2, #0
 8010084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010088:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801008c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8010090:	4642      	mov	r2, r8
 8010092:	464b      	mov	r3, r9
 8010094:	1891      	adds	r1, r2, r2
 8010096:	64b9      	str	r1, [r7, #72]	; 0x48
 8010098:	415b      	adcs	r3, r3
 801009a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801009c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80100a0:	4641      	mov	r1, r8
 80100a2:	eb12 0a01 	adds.w	sl, r2, r1
 80100a6:	4649      	mov	r1, r9
 80100a8:	eb43 0b01 	adc.w	fp, r3, r1
 80100ac:	f04f 0200 	mov.w	r2, #0
 80100b0:	f04f 0300 	mov.w	r3, #0
 80100b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80100b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80100bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100c0:	4692      	mov	sl, r2
 80100c2:	469b      	mov	fp, r3
 80100c4:	4643      	mov	r3, r8
 80100c6:	eb1a 0303 	adds.w	r3, sl, r3
 80100ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80100ce:	464b      	mov	r3, r9
 80100d0:	eb4b 0303 	adc.w	r3, fp, r3
 80100d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80100d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80100e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80100e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80100ec:	460b      	mov	r3, r1
 80100ee:	18db      	adds	r3, r3, r3
 80100f0:	643b      	str	r3, [r7, #64]	; 0x40
 80100f2:	4613      	mov	r3, r2
 80100f4:	eb42 0303 	adc.w	r3, r2, r3
 80100f8:	647b      	str	r3, [r7, #68]	; 0x44
 80100fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80100fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8010102:	f7f0 f8bd 	bl	8000280 <__aeabi_uldivmod>
 8010106:	4602      	mov	r2, r0
 8010108:	460b      	mov	r3, r1
 801010a:	4611      	mov	r1, r2
 801010c:	4b3b      	ldr	r3, [pc, #236]	; (80101fc <UART_SetConfig+0x2d4>)
 801010e:	fba3 2301 	umull	r2, r3, r3, r1
 8010112:	095b      	lsrs	r3, r3, #5
 8010114:	2264      	movs	r2, #100	; 0x64
 8010116:	fb02 f303 	mul.w	r3, r2, r3
 801011a:	1acb      	subs	r3, r1, r3
 801011c:	00db      	lsls	r3, r3, #3
 801011e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8010122:	4b36      	ldr	r3, [pc, #216]	; (80101fc <UART_SetConfig+0x2d4>)
 8010124:	fba3 2302 	umull	r2, r3, r3, r2
 8010128:	095b      	lsrs	r3, r3, #5
 801012a:	005b      	lsls	r3, r3, #1
 801012c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010130:	441c      	add	r4, r3
 8010132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010136:	2200      	movs	r2, #0
 8010138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801013c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010140:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8010144:	4642      	mov	r2, r8
 8010146:	464b      	mov	r3, r9
 8010148:	1891      	adds	r1, r2, r2
 801014a:	63b9      	str	r1, [r7, #56]	; 0x38
 801014c:	415b      	adcs	r3, r3
 801014e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010154:	4641      	mov	r1, r8
 8010156:	1851      	adds	r1, r2, r1
 8010158:	6339      	str	r1, [r7, #48]	; 0x30
 801015a:	4649      	mov	r1, r9
 801015c:	414b      	adcs	r3, r1
 801015e:	637b      	str	r3, [r7, #52]	; 0x34
 8010160:	f04f 0200 	mov.w	r2, #0
 8010164:	f04f 0300 	mov.w	r3, #0
 8010168:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801016c:	4659      	mov	r1, fp
 801016e:	00cb      	lsls	r3, r1, #3
 8010170:	4651      	mov	r1, sl
 8010172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010176:	4651      	mov	r1, sl
 8010178:	00ca      	lsls	r2, r1, #3
 801017a:	4610      	mov	r0, r2
 801017c:	4619      	mov	r1, r3
 801017e:	4603      	mov	r3, r0
 8010180:	4642      	mov	r2, r8
 8010182:	189b      	adds	r3, r3, r2
 8010184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010188:	464b      	mov	r3, r9
 801018a:	460a      	mov	r2, r1
 801018c:	eb42 0303 	adc.w	r3, r2, r3
 8010190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010198:	685b      	ldr	r3, [r3, #4]
 801019a:	2200      	movs	r2, #0
 801019c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80101a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80101a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80101a8:	460b      	mov	r3, r1
 80101aa:	18db      	adds	r3, r3, r3
 80101ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80101ae:	4613      	mov	r3, r2
 80101b0:	eb42 0303 	adc.w	r3, r2, r3
 80101b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80101ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80101be:	f7f0 f85f 	bl	8000280 <__aeabi_uldivmod>
 80101c2:	4602      	mov	r2, r0
 80101c4:	460b      	mov	r3, r1
 80101c6:	4b0d      	ldr	r3, [pc, #52]	; (80101fc <UART_SetConfig+0x2d4>)
 80101c8:	fba3 1302 	umull	r1, r3, r3, r2
 80101cc:	095b      	lsrs	r3, r3, #5
 80101ce:	2164      	movs	r1, #100	; 0x64
 80101d0:	fb01 f303 	mul.w	r3, r1, r3
 80101d4:	1ad3      	subs	r3, r2, r3
 80101d6:	00db      	lsls	r3, r3, #3
 80101d8:	3332      	adds	r3, #50	; 0x32
 80101da:	4a08      	ldr	r2, [pc, #32]	; (80101fc <UART_SetConfig+0x2d4>)
 80101dc:	fba2 2303 	umull	r2, r3, r2, r3
 80101e0:	095b      	lsrs	r3, r3, #5
 80101e2:	f003 0207 	and.w	r2, r3, #7
 80101e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	4422      	add	r2, r4
 80101ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80101f0:	e106      	b.n	8010400 <UART_SetConfig+0x4d8>
 80101f2:	bf00      	nop
 80101f4:	40011000 	.word	0x40011000
 80101f8:	40011400 	.word	0x40011400
 80101fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010204:	2200      	movs	r2, #0
 8010206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801020a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801020e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8010212:	4642      	mov	r2, r8
 8010214:	464b      	mov	r3, r9
 8010216:	1891      	adds	r1, r2, r2
 8010218:	6239      	str	r1, [r7, #32]
 801021a:	415b      	adcs	r3, r3
 801021c:	627b      	str	r3, [r7, #36]	; 0x24
 801021e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010222:	4641      	mov	r1, r8
 8010224:	1854      	adds	r4, r2, r1
 8010226:	4649      	mov	r1, r9
 8010228:	eb43 0501 	adc.w	r5, r3, r1
 801022c:	f04f 0200 	mov.w	r2, #0
 8010230:	f04f 0300 	mov.w	r3, #0
 8010234:	00eb      	lsls	r3, r5, #3
 8010236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801023a:	00e2      	lsls	r2, r4, #3
 801023c:	4614      	mov	r4, r2
 801023e:	461d      	mov	r5, r3
 8010240:	4643      	mov	r3, r8
 8010242:	18e3      	adds	r3, r4, r3
 8010244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010248:	464b      	mov	r3, r9
 801024a:	eb45 0303 	adc.w	r3, r5, r3
 801024e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	2200      	movs	r2, #0
 801025a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801025e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010262:	f04f 0200 	mov.w	r2, #0
 8010266:	f04f 0300 	mov.w	r3, #0
 801026a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801026e:	4629      	mov	r1, r5
 8010270:	008b      	lsls	r3, r1, #2
 8010272:	4621      	mov	r1, r4
 8010274:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010278:	4621      	mov	r1, r4
 801027a:	008a      	lsls	r2, r1, #2
 801027c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010280:	f7ef fffe 	bl	8000280 <__aeabi_uldivmod>
 8010284:	4602      	mov	r2, r0
 8010286:	460b      	mov	r3, r1
 8010288:	4b60      	ldr	r3, [pc, #384]	; (801040c <UART_SetConfig+0x4e4>)
 801028a:	fba3 2302 	umull	r2, r3, r3, r2
 801028e:	095b      	lsrs	r3, r3, #5
 8010290:	011c      	lsls	r4, r3, #4
 8010292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010296:	2200      	movs	r2, #0
 8010298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801029c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80102a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80102a4:	4642      	mov	r2, r8
 80102a6:	464b      	mov	r3, r9
 80102a8:	1891      	adds	r1, r2, r2
 80102aa:	61b9      	str	r1, [r7, #24]
 80102ac:	415b      	adcs	r3, r3
 80102ae:	61fb      	str	r3, [r7, #28]
 80102b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80102b4:	4641      	mov	r1, r8
 80102b6:	1851      	adds	r1, r2, r1
 80102b8:	6139      	str	r1, [r7, #16]
 80102ba:	4649      	mov	r1, r9
 80102bc:	414b      	adcs	r3, r1
 80102be:	617b      	str	r3, [r7, #20]
 80102c0:	f04f 0200 	mov.w	r2, #0
 80102c4:	f04f 0300 	mov.w	r3, #0
 80102c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80102cc:	4659      	mov	r1, fp
 80102ce:	00cb      	lsls	r3, r1, #3
 80102d0:	4651      	mov	r1, sl
 80102d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80102d6:	4651      	mov	r1, sl
 80102d8:	00ca      	lsls	r2, r1, #3
 80102da:	4610      	mov	r0, r2
 80102dc:	4619      	mov	r1, r3
 80102de:	4603      	mov	r3, r0
 80102e0:	4642      	mov	r2, r8
 80102e2:	189b      	adds	r3, r3, r2
 80102e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80102e8:	464b      	mov	r3, r9
 80102ea:	460a      	mov	r2, r1
 80102ec:	eb42 0303 	adc.w	r3, r2, r3
 80102f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80102f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	2200      	movs	r2, #0
 80102fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80102fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010300:	f04f 0200 	mov.w	r2, #0
 8010304:	f04f 0300 	mov.w	r3, #0
 8010308:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801030c:	4649      	mov	r1, r9
 801030e:	008b      	lsls	r3, r1, #2
 8010310:	4641      	mov	r1, r8
 8010312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010316:	4641      	mov	r1, r8
 8010318:	008a      	lsls	r2, r1, #2
 801031a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801031e:	f7ef ffaf 	bl	8000280 <__aeabi_uldivmod>
 8010322:	4602      	mov	r2, r0
 8010324:	460b      	mov	r3, r1
 8010326:	4611      	mov	r1, r2
 8010328:	4b38      	ldr	r3, [pc, #224]	; (801040c <UART_SetConfig+0x4e4>)
 801032a:	fba3 2301 	umull	r2, r3, r3, r1
 801032e:	095b      	lsrs	r3, r3, #5
 8010330:	2264      	movs	r2, #100	; 0x64
 8010332:	fb02 f303 	mul.w	r3, r2, r3
 8010336:	1acb      	subs	r3, r1, r3
 8010338:	011b      	lsls	r3, r3, #4
 801033a:	3332      	adds	r3, #50	; 0x32
 801033c:	4a33      	ldr	r2, [pc, #204]	; (801040c <UART_SetConfig+0x4e4>)
 801033e:	fba2 2303 	umull	r2, r3, r2, r3
 8010342:	095b      	lsrs	r3, r3, #5
 8010344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010348:	441c      	add	r4, r3
 801034a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801034e:	2200      	movs	r2, #0
 8010350:	673b      	str	r3, [r7, #112]	; 0x70
 8010352:	677a      	str	r2, [r7, #116]	; 0x74
 8010354:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8010358:	4642      	mov	r2, r8
 801035a:	464b      	mov	r3, r9
 801035c:	1891      	adds	r1, r2, r2
 801035e:	60b9      	str	r1, [r7, #8]
 8010360:	415b      	adcs	r3, r3
 8010362:	60fb      	str	r3, [r7, #12]
 8010364:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010368:	4641      	mov	r1, r8
 801036a:	1851      	adds	r1, r2, r1
 801036c:	6039      	str	r1, [r7, #0]
 801036e:	4649      	mov	r1, r9
 8010370:	414b      	adcs	r3, r1
 8010372:	607b      	str	r3, [r7, #4]
 8010374:	f04f 0200 	mov.w	r2, #0
 8010378:	f04f 0300 	mov.w	r3, #0
 801037c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010380:	4659      	mov	r1, fp
 8010382:	00cb      	lsls	r3, r1, #3
 8010384:	4651      	mov	r1, sl
 8010386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801038a:	4651      	mov	r1, sl
 801038c:	00ca      	lsls	r2, r1, #3
 801038e:	4610      	mov	r0, r2
 8010390:	4619      	mov	r1, r3
 8010392:	4603      	mov	r3, r0
 8010394:	4642      	mov	r2, r8
 8010396:	189b      	adds	r3, r3, r2
 8010398:	66bb      	str	r3, [r7, #104]	; 0x68
 801039a:	464b      	mov	r3, r9
 801039c:	460a      	mov	r2, r1
 801039e:	eb42 0303 	adc.w	r3, r2, r3
 80103a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80103a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	2200      	movs	r2, #0
 80103ac:	663b      	str	r3, [r7, #96]	; 0x60
 80103ae:	667a      	str	r2, [r7, #100]	; 0x64
 80103b0:	f04f 0200 	mov.w	r2, #0
 80103b4:	f04f 0300 	mov.w	r3, #0
 80103b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80103bc:	4649      	mov	r1, r9
 80103be:	008b      	lsls	r3, r1, #2
 80103c0:	4641      	mov	r1, r8
 80103c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80103c6:	4641      	mov	r1, r8
 80103c8:	008a      	lsls	r2, r1, #2
 80103ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80103ce:	f7ef ff57 	bl	8000280 <__aeabi_uldivmod>
 80103d2:	4602      	mov	r2, r0
 80103d4:	460b      	mov	r3, r1
 80103d6:	4b0d      	ldr	r3, [pc, #52]	; (801040c <UART_SetConfig+0x4e4>)
 80103d8:	fba3 1302 	umull	r1, r3, r3, r2
 80103dc:	095b      	lsrs	r3, r3, #5
 80103de:	2164      	movs	r1, #100	; 0x64
 80103e0:	fb01 f303 	mul.w	r3, r1, r3
 80103e4:	1ad3      	subs	r3, r2, r3
 80103e6:	011b      	lsls	r3, r3, #4
 80103e8:	3332      	adds	r3, #50	; 0x32
 80103ea:	4a08      	ldr	r2, [pc, #32]	; (801040c <UART_SetConfig+0x4e4>)
 80103ec:	fba2 2303 	umull	r2, r3, r2, r3
 80103f0:	095b      	lsrs	r3, r3, #5
 80103f2:	f003 020f 	and.w	r2, r3, #15
 80103f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	4422      	add	r2, r4
 80103fe:	609a      	str	r2, [r3, #8]
}
 8010400:	bf00      	nop
 8010402:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8010406:	46bd      	mov	sp, r7
 8010408:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801040c:	51eb851f 	.word	0x51eb851f

08010410 <calloc>:
 8010410:	4b02      	ldr	r3, [pc, #8]	; (801041c <calloc+0xc>)
 8010412:	460a      	mov	r2, r1
 8010414:	4601      	mov	r1, r0
 8010416:	6818      	ldr	r0, [r3, #0]
 8010418:	f000 b802 	b.w	8010420 <_calloc_r>
 801041c:	200000a8 	.word	0x200000a8

08010420 <_calloc_r>:
 8010420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010422:	fba1 2402 	umull	r2, r4, r1, r2
 8010426:	b94c      	cbnz	r4, 801043c <_calloc_r+0x1c>
 8010428:	4611      	mov	r1, r2
 801042a:	9201      	str	r2, [sp, #4]
 801042c:	f000 f83e 	bl	80104ac <_malloc_r>
 8010430:	9a01      	ldr	r2, [sp, #4]
 8010432:	4605      	mov	r5, r0
 8010434:	b930      	cbnz	r0, 8010444 <_calloc_r+0x24>
 8010436:	4628      	mov	r0, r5
 8010438:	b003      	add	sp, #12
 801043a:	bd30      	pop	{r4, r5, pc}
 801043c:	220c      	movs	r2, #12
 801043e:	6002      	str	r2, [r0, #0]
 8010440:	2500      	movs	r5, #0
 8010442:	e7f8      	b.n	8010436 <_calloc_r+0x16>
 8010444:	4621      	mov	r1, r4
 8010446:	f000 fbb9 	bl	8010bbc <memset>
 801044a:	e7f4      	b.n	8010436 <_calloc_r+0x16>

0801044c <malloc>:
 801044c:	4b02      	ldr	r3, [pc, #8]	; (8010458 <malloc+0xc>)
 801044e:	4601      	mov	r1, r0
 8010450:	6818      	ldr	r0, [r3, #0]
 8010452:	f000 b82b 	b.w	80104ac <_malloc_r>
 8010456:	bf00      	nop
 8010458:	200000a8 	.word	0x200000a8

0801045c <free>:
 801045c:	4b02      	ldr	r3, [pc, #8]	; (8010468 <free+0xc>)
 801045e:	4601      	mov	r1, r0
 8010460:	6818      	ldr	r0, [r3, #0]
 8010462:	f000 bc63 	b.w	8010d2c <_free_r>
 8010466:	bf00      	nop
 8010468:	200000a8 	.word	0x200000a8

0801046c <sbrk_aligned>:
 801046c:	b570      	push	{r4, r5, r6, lr}
 801046e:	4e0e      	ldr	r6, [pc, #56]	; (80104a8 <sbrk_aligned+0x3c>)
 8010470:	460c      	mov	r4, r1
 8010472:	6831      	ldr	r1, [r6, #0]
 8010474:	4605      	mov	r5, r0
 8010476:	b911      	cbnz	r1, 801047e <sbrk_aligned+0x12>
 8010478:	f000 fbdc 	bl	8010c34 <_sbrk_r>
 801047c:	6030      	str	r0, [r6, #0]
 801047e:	4621      	mov	r1, r4
 8010480:	4628      	mov	r0, r5
 8010482:	f000 fbd7 	bl	8010c34 <_sbrk_r>
 8010486:	1c43      	adds	r3, r0, #1
 8010488:	d00a      	beq.n	80104a0 <sbrk_aligned+0x34>
 801048a:	1cc4      	adds	r4, r0, #3
 801048c:	f024 0403 	bic.w	r4, r4, #3
 8010490:	42a0      	cmp	r0, r4
 8010492:	d007      	beq.n	80104a4 <sbrk_aligned+0x38>
 8010494:	1a21      	subs	r1, r4, r0
 8010496:	4628      	mov	r0, r5
 8010498:	f000 fbcc 	bl	8010c34 <_sbrk_r>
 801049c:	3001      	adds	r0, #1
 801049e:	d101      	bne.n	80104a4 <sbrk_aligned+0x38>
 80104a0:	f04f 34ff 	mov.w	r4, #4294967295
 80104a4:	4620      	mov	r0, r4
 80104a6:	bd70      	pop	{r4, r5, r6, pc}
 80104a8:	200023e4 	.word	0x200023e4

080104ac <_malloc_r>:
 80104ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104b0:	1ccd      	adds	r5, r1, #3
 80104b2:	f025 0503 	bic.w	r5, r5, #3
 80104b6:	3508      	adds	r5, #8
 80104b8:	2d0c      	cmp	r5, #12
 80104ba:	bf38      	it	cc
 80104bc:	250c      	movcc	r5, #12
 80104be:	2d00      	cmp	r5, #0
 80104c0:	4607      	mov	r7, r0
 80104c2:	db01      	blt.n	80104c8 <_malloc_r+0x1c>
 80104c4:	42a9      	cmp	r1, r5
 80104c6:	d905      	bls.n	80104d4 <_malloc_r+0x28>
 80104c8:	230c      	movs	r3, #12
 80104ca:	603b      	str	r3, [r7, #0]
 80104cc:	2600      	movs	r6, #0
 80104ce:	4630      	mov	r0, r6
 80104d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80105a8 <_malloc_r+0xfc>
 80104d8:	f000 f868 	bl	80105ac <__malloc_lock>
 80104dc:	f8d8 3000 	ldr.w	r3, [r8]
 80104e0:	461c      	mov	r4, r3
 80104e2:	bb5c      	cbnz	r4, 801053c <_malloc_r+0x90>
 80104e4:	4629      	mov	r1, r5
 80104e6:	4638      	mov	r0, r7
 80104e8:	f7ff ffc0 	bl	801046c <sbrk_aligned>
 80104ec:	1c43      	adds	r3, r0, #1
 80104ee:	4604      	mov	r4, r0
 80104f0:	d155      	bne.n	801059e <_malloc_r+0xf2>
 80104f2:	f8d8 4000 	ldr.w	r4, [r8]
 80104f6:	4626      	mov	r6, r4
 80104f8:	2e00      	cmp	r6, #0
 80104fa:	d145      	bne.n	8010588 <_malloc_r+0xdc>
 80104fc:	2c00      	cmp	r4, #0
 80104fe:	d048      	beq.n	8010592 <_malloc_r+0xe6>
 8010500:	6823      	ldr	r3, [r4, #0]
 8010502:	4631      	mov	r1, r6
 8010504:	4638      	mov	r0, r7
 8010506:	eb04 0903 	add.w	r9, r4, r3
 801050a:	f000 fb93 	bl	8010c34 <_sbrk_r>
 801050e:	4581      	cmp	r9, r0
 8010510:	d13f      	bne.n	8010592 <_malloc_r+0xe6>
 8010512:	6821      	ldr	r1, [r4, #0]
 8010514:	1a6d      	subs	r5, r5, r1
 8010516:	4629      	mov	r1, r5
 8010518:	4638      	mov	r0, r7
 801051a:	f7ff ffa7 	bl	801046c <sbrk_aligned>
 801051e:	3001      	adds	r0, #1
 8010520:	d037      	beq.n	8010592 <_malloc_r+0xe6>
 8010522:	6823      	ldr	r3, [r4, #0]
 8010524:	442b      	add	r3, r5
 8010526:	6023      	str	r3, [r4, #0]
 8010528:	f8d8 3000 	ldr.w	r3, [r8]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d038      	beq.n	80105a2 <_malloc_r+0xf6>
 8010530:	685a      	ldr	r2, [r3, #4]
 8010532:	42a2      	cmp	r2, r4
 8010534:	d12b      	bne.n	801058e <_malloc_r+0xe2>
 8010536:	2200      	movs	r2, #0
 8010538:	605a      	str	r2, [r3, #4]
 801053a:	e00f      	b.n	801055c <_malloc_r+0xb0>
 801053c:	6822      	ldr	r2, [r4, #0]
 801053e:	1b52      	subs	r2, r2, r5
 8010540:	d41f      	bmi.n	8010582 <_malloc_r+0xd6>
 8010542:	2a0b      	cmp	r2, #11
 8010544:	d917      	bls.n	8010576 <_malloc_r+0xca>
 8010546:	1961      	adds	r1, r4, r5
 8010548:	42a3      	cmp	r3, r4
 801054a:	6025      	str	r5, [r4, #0]
 801054c:	bf18      	it	ne
 801054e:	6059      	strne	r1, [r3, #4]
 8010550:	6863      	ldr	r3, [r4, #4]
 8010552:	bf08      	it	eq
 8010554:	f8c8 1000 	streq.w	r1, [r8]
 8010558:	5162      	str	r2, [r4, r5]
 801055a:	604b      	str	r3, [r1, #4]
 801055c:	4638      	mov	r0, r7
 801055e:	f104 060b 	add.w	r6, r4, #11
 8010562:	f000 f829 	bl	80105b8 <__malloc_unlock>
 8010566:	f026 0607 	bic.w	r6, r6, #7
 801056a:	1d23      	adds	r3, r4, #4
 801056c:	1af2      	subs	r2, r6, r3
 801056e:	d0ae      	beq.n	80104ce <_malloc_r+0x22>
 8010570:	1b9b      	subs	r3, r3, r6
 8010572:	50a3      	str	r3, [r4, r2]
 8010574:	e7ab      	b.n	80104ce <_malloc_r+0x22>
 8010576:	42a3      	cmp	r3, r4
 8010578:	6862      	ldr	r2, [r4, #4]
 801057a:	d1dd      	bne.n	8010538 <_malloc_r+0x8c>
 801057c:	f8c8 2000 	str.w	r2, [r8]
 8010580:	e7ec      	b.n	801055c <_malloc_r+0xb0>
 8010582:	4623      	mov	r3, r4
 8010584:	6864      	ldr	r4, [r4, #4]
 8010586:	e7ac      	b.n	80104e2 <_malloc_r+0x36>
 8010588:	4634      	mov	r4, r6
 801058a:	6876      	ldr	r6, [r6, #4]
 801058c:	e7b4      	b.n	80104f8 <_malloc_r+0x4c>
 801058e:	4613      	mov	r3, r2
 8010590:	e7cc      	b.n	801052c <_malloc_r+0x80>
 8010592:	230c      	movs	r3, #12
 8010594:	603b      	str	r3, [r7, #0]
 8010596:	4638      	mov	r0, r7
 8010598:	f000 f80e 	bl	80105b8 <__malloc_unlock>
 801059c:	e797      	b.n	80104ce <_malloc_r+0x22>
 801059e:	6025      	str	r5, [r4, #0]
 80105a0:	e7dc      	b.n	801055c <_malloc_r+0xb0>
 80105a2:	605b      	str	r3, [r3, #4]
 80105a4:	deff      	udf	#255	; 0xff
 80105a6:	bf00      	nop
 80105a8:	200023e0 	.word	0x200023e0

080105ac <__malloc_lock>:
 80105ac:	4801      	ldr	r0, [pc, #4]	; (80105b4 <__malloc_lock+0x8>)
 80105ae:	f000 bb8e 	b.w	8010cce <__retarget_lock_acquire_recursive>
 80105b2:	bf00      	nop
 80105b4:	20002528 	.word	0x20002528

080105b8 <__malloc_unlock>:
 80105b8:	4801      	ldr	r0, [pc, #4]	; (80105c0 <__malloc_unlock+0x8>)
 80105ba:	f000 bb89 	b.w	8010cd0 <__retarget_lock_release_recursive>
 80105be:	bf00      	nop
 80105c0:	20002528 	.word	0x20002528

080105c4 <rand>:
 80105c4:	4b16      	ldr	r3, [pc, #88]	; (8010620 <rand+0x5c>)
 80105c6:	b510      	push	{r4, lr}
 80105c8:	681c      	ldr	r4, [r3, #0]
 80105ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80105cc:	b9b3      	cbnz	r3, 80105fc <rand+0x38>
 80105ce:	2018      	movs	r0, #24
 80105d0:	f7ff ff3c 	bl	801044c <malloc>
 80105d4:	4602      	mov	r2, r0
 80105d6:	6320      	str	r0, [r4, #48]	; 0x30
 80105d8:	b920      	cbnz	r0, 80105e4 <rand+0x20>
 80105da:	4b12      	ldr	r3, [pc, #72]	; (8010624 <rand+0x60>)
 80105dc:	4812      	ldr	r0, [pc, #72]	; (8010628 <rand+0x64>)
 80105de:	2152      	movs	r1, #82	; 0x52
 80105e0:	f000 fb86 	bl	8010cf0 <__assert_func>
 80105e4:	4911      	ldr	r1, [pc, #68]	; (801062c <rand+0x68>)
 80105e6:	4b12      	ldr	r3, [pc, #72]	; (8010630 <rand+0x6c>)
 80105e8:	e9c0 1300 	strd	r1, r3, [r0]
 80105ec:	4b11      	ldr	r3, [pc, #68]	; (8010634 <rand+0x70>)
 80105ee:	6083      	str	r3, [r0, #8]
 80105f0:	230b      	movs	r3, #11
 80105f2:	8183      	strh	r3, [r0, #12]
 80105f4:	2100      	movs	r1, #0
 80105f6:	2001      	movs	r0, #1
 80105f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80105fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80105fe:	480e      	ldr	r0, [pc, #56]	; (8010638 <rand+0x74>)
 8010600:	690b      	ldr	r3, [r1, #16]
 8010602:	694c      	ldr	r4, [r1, #20]
 8010604:	4a0d      	ldr	r2, [pc, #52]	; (801063c <rand+0x78>)
 8010606:	4358      	muls	r0, r3
 8010608:	fb02 0004 	mla	r0, r2, r4, r0
 801060c:	fba3 3202 	umull	r3, r2, r3, r2
 8010610:	3301      	adds	r3, #1
 8010612:	eb40 0002 	adc.w	r0, r0, r2
 8010616:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801061a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801061e:	bd10      	pop	{r4, pc}
 8010620:	200000a8 	.word	0x200000a8
 8010624:	080138ec 	.word	0x080138ec
 8010628:	08013903 	.word	0x08013903
 801062c:	abcd330e 	.word	0xabcd330e
 8010630:	e66d1234 	.word	0xe66d1234
 8010634:	0005deec 	.word	0x0005deec
 8010638:	5851f42d 	.word	0x5851f42d
 801063c:	4c957f2d 	.word	0x4c957f2d

08010640 <__sflush_r>:
 8010640:	898a      	ldrh	r2, [r1, #12]
 8010642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010646:	4605      	mov	r5, r0
 8010648:	0710      	lsls	r0, r2, #28
 801064a:	460c      	mov	r4, r1
 801064c:	d458      	bmi.n	8010700 <__sflush_r+0xc0>
 801064e:	684b      	ldr	r3, [r1, #4]
 8010650:	2b00      	cmp	r3, #0
 8010652:	dc05      	bgt.n	8010660 <__sflush_r+0x20>
 8010654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010656:	2b00      	cmp	r3, #0
 8010658:	dc02      	bgt.n	8010660 <__sflush_r+0x20>
 801065a:	2000      	movs	r0, #0
 801065c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010662:	2e00      	cmp	r6, #0
 8010664:	d0f9      	beq.n	801065a <__sflush_r+0x1a>
 8010666:	2300      	movs	r3, #0
 8010668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801066c:	682f      	ldr	r7, [r5, #0]
 801066e:	6a21      	ldr	r1, [r4, #32]
 8010670:	602b      	str	r3, [r5, #0]
 8010672:	d032      	beq.n	80106da <__sflush_r+0x9a>
 8010674:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010676:	89a3      	ldrh	r3, [r4, #12]
 8010678:	075a      	lsls	r2, r3, #29
 801067a:	d505      	bpl.n	8010688 <__sflush_r+0x48>
 801067c:	6863      	ldr	r3, [r4, #4]
 801067e:	1ac0      	subs	r0, r0, r3
 8010680:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010682:	b10b      	cbz	r3, 8010688 <__sflush_r+0x48>
 8010684:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010686:	1ac0      	subs	r0, r0, r3
 8010688:	2300      	movs	r3, #0
 801068a:	4602      	mov	r2, r0
 801068c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801068e:	6a21      	ldr	r1, [r4, #32]
 8010690:	4628      	mov	r0, r5
 8010692:	47b0      	blx	r6
 8010694:	1c43      	adds	r3, r0, #1
 8010696:	89a3      	ldrh	r3, [r4, #12]
 8010698:	d106      	bne.n	80106a8 <__sflush_r+0x68>
 801069a:	6829      	ldr	r1, [r5, #0]
 801069c:	291d      	cmp	r1, #29
 801069e:	d82b      	bhi.n	80106f8 <__sflush_r+0xb8>
 80106a0:	4a29      	ldr	r2, [pc, #164]	; (8010748 <__sflush_r+0x108>)
 80106a2:	410a      	asrs	r2, r1
 80106a4:	07d6      	lsls	r6, r2, #31
 80106a6:	d427      	bmi.n	80106f8 <__sflush_r+0xb8>
 80106a8:	2200      	movs	r2, #0
 80106aa:	6062      	str	r2, [r4, #4]
 80106ac:	04d9      	lsls	r1, r3, #19
 80106ae:	6922      	ldr	r2, [r4, #16]
 80106b0:	6022      	str	r2, [r4, #0]
 80106b2:	d504      	bpl.n	80106be <__sflush_r+0x7e>
 80106b4:	1c42      	adds	r2, r0, #1
 80106b6:	d101      	bne.n	80106bc <__sflush_r+0x7c>
 80106b8:	682b      	ldr	r3, [r5, #0]
 80106ba:	b903      	cbnz	r3, 80106be <__sflush_r+0x7e>
 80106bc:	6560      	str	r0, [r4, #84]	; 0x54
 80106be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106c0:	602f      	str	r7, [r5, #0]
 80106c2:	2900      	cmp	r1, #0
 80106c4:	d0c9      	beq.n	801065a <__sflush_r+0x1a>
 80106c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106ca:	4299      	cmp	r1, r3
 80106cc:	d002      	beq.n	80106d4 <__sflush_r+0x94>
 80106ce:	4628      	mov	r0, r5
 80106d0:	f000 fb2c 	bl	8010d2c <_free_r>
 80106d4:	2000      	movs	r0, #0
 80106d6:	6360      	str	r0, [r4, #52]	; 0x34
 80106d8:	e7c0      	b.n	801065c <__sflush_r+0x1c>
 80106da:	2301      	movs	r3, #1
 80106dc:	4628      	mov	r0, r5
 80106de:	47b0      	blx	r6
 80106e0:	1c41      	adds	r1, r0, #1
 80106e2:	d1c8      	bne.n	8010676 <__sflush_r+0x36>
 80106e4:	682b      	ldr	r3, [r5, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d0c5      	beq.n	8010676 <__sflush_r+0x36>
 80106ea:	2b1d      	cmp	r3, #29
 80106ec:	d001      	beq.n	80106f2 <__sflush_r+0xb2>
 80106ee:	2b16      	cmp	r3, #22
 80106f0:	d101      	bne.n	80106f6 <__sflush_r+0xb6>
 80106f2:	602f      	str	r7, [r5, #0]
 80106f4:	e7b1      	b.n	801065a <__sflush_r+0x1a>
 80106f6:	89a3      	ldrh	r3, [r4, #12]
 80106f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106fc:	81a3      	strh	r3, [r4, #12]
 80106fe:	e7ad      	b.n	801065c <__sflush_r+0x1c>
 8010700:	690f      	ldr	r7, [r1, #16]
 8010702:	2f00      	cmp	r7, #0
 8010704:	d0a9      	beq.n	801065a <__sflush_r+0x1a>
 8010706:	0793      	lsls	r3, r2, #30
 8010708:	680e      	ldr	r6, [r1, #0]
 801070a:	bf08      	it	eq
 801070c:	694b      	ldreq	r3, [r1, #20]
 801070e:	600f      	str	r7, [r1, #0]
 8010710:	bf18      	it	ne
 8010712:	2300      	movne	r3, #0
 8010714:	eba6 0807 	sub.w	r8, r6, r7
 8010718:	608b      	str	r3, [r1, #8]
 801071a:	f1b8 0f00 	cmp.w	r8, #0
 801071e:	dd9c      	ble.n	801065a <__sflush_r+0x1a>
 8010720:	6a21      	ldr	r1, [r4, #32]
 8010722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010724:	4643      	mov	r3, r8
 8010726:	463a      	mov	r2, r7
 8010728:	4628      	mov	r0, r5
 801072a:	47b0      	blx	r6
 801072c:	2800      	cmp	r0, #0
 801072e:	dc06      	bgt.n	801073e <__sflush_r+0xfe>
 8010730:	89a3      	ldrh	r3, [r4, #12]
 8010732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010736:	81a3      	strh	r3, [r4, #12]
 8010738:	f04f 30ff 	mov.w	r0, #4294967295
 801073c:	e78e      	b.n	801065c <__sflush_r+0x1c>
 801073e:	4407      	add	r7, r0
 8010740:	eba8 0800 	sub.w	r8, r8, r0
 8010744:	e7e9      	b.n	801071a <__sflush_r+0xda>
 8010746:	bf00      	nop
 8010748:	dfbffffe 	.word	0xdfbffffe

0801074c <_fflush_r>:
 801074c:	b538      	push	{r3, r4, r5, lr}
 801074e:	690b      	ldr	r3, [r1, #16]
 8010750:	4605      	mov	r5, r0
 8010752:	460c      	mov	r4, r1
 8010754:	b913      	cbnz	r3, 801075c <_fflush_r+0x10>
 8010756:	2500      	movs	r5, #0
 8010758:	4628      	mov	r0, r5
 801075a:	bd38      	pop	{r3, r4, r5, pc}
 801075c:	b118      	cbz	r0, 8010766 <_fflush_r+0x1a>
 801075e:	6a03      	ldr	r3, [r0, #32]
 8010760:	b90b      	cbnz	r3, 8010766 <_fflush_r+0x1a>
 8010762:	f000 f8a7 	bl	80108b4 <__sinit>
 8010766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d0f3      	beq.n	8010756 <_fflush_r+0xa>
 801076e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010770:	07d0      	lsls	r0, r2, #31
 8010772:	d404      	bmi.n	801077e <_fflush_r+0x32>
 8010774:	0599      	lsls	r1, r3, #22
 8010776:	d402      	bmi.n	801077e <_fflush_r+0x32>
 8010778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801077a:	f000 faa8 	bl	8010cce <__retarget_lock_acquire_recursive>
 801077e:	4628      	mov	r0, r5
 8010780:	4621      	mov	r1, r4
 8010782:	f7ff ff5d 	bl	8010640 <__sflush_r>
 8010786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010788:	07da      	lsls	r2, r3, #31
 801078a:	4605      	mov	r5, r0
 801078c:	d4e4      	bmi.n	8010758 <_fflush_r+0xc>
 801078e:	89a3      	ldrh	r3, [r4, #12]
 8010790:	059b      	lsls	r3, r3, #22
 8010792:	d4e1      	bmi.n	8010758 <_fflush_r+0xc>
 8010794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010796:	f000 fa9b 	bl	8010cd0 <__retarget_lock_release_recursive>
 801079a:	e7dd      	b.n	8010758 <_fflush_r+0xc>

0801079c <std>:
 801079c:	2300      	movs	r3, #0
 801079e:	b510      	push	{r4, lr}
 80107a0:	4604      	mov	r4, r0
 80107a2:	e9c0 3300 	strd	r3, r3, [r0]
 80107a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80107aa:	6083      	str	r3, [r0, #8]
 80107ac:	8181      	strh	r1, [r0, #12]
 80107ae:	6643      	str	r3, [r0, #100]	; 0x64
 80107b0:	81c2      	strh	r2, [r0, #14]
 80107b2:	6183      	str	r3, [r0, #24]
 80107b4:	4619      	mov	r1, r3
 80107b6:	2208      	movs	r2, #8
 80107b8:	305c      	adds	r0, #92	; 0x5c
 80107ba:	f000 f9ff 	bl	8010bbc <memset>
 80107be:	4b0d      	ldr	r3, [pc, #52]	; (80107f4 <std+0x58>)
 80107c0:	6263      	str	r3, [r4, #36]	; 0x24
 80107c2:	4b0d      	ldr	r3, [pc, #52]	; (80107f8 <std+0x5c>)
 80107c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80107c6:	4b0d      	ldr	r3, [pc, #52]	; (80107fc <std+0x60>)
 80107c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80107ca:	4b0d      	ldr	r3, [pc, #52]	; (8010800 <std+0x64>)
 80107cc:	6323      	str	r3, [r4, #48]	; 0x30
 80107ce:	4b0d      	ldr	r3, [pc, #52]	; (8010804 <std+0x68>)
 80107d0:	6224      	str	r4, [r4, #32]
 80107d2:	429c      	cmp	r4, r3
 80107d4:	d006      	beq.n	80107e4 <std+0x48>
 80107d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80107da:	4294      	cmp	r4, r2
 80107dc:	d002      	beq.n	80107e4 <std+0x48>
 80107de:	33d0      	adds	r3, #208	; 0xd0
 80107e0:	429c      	cmp	r4, r3
 80107e2:	d105      	bne.n	80107f0 <std+0x54>
 80107e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80107e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107ec:	f000 ba6e 	b.w	8010ccc <__retarget_lock_init_recursive>
 80107f0:	bd10      	pop	{r4, pc}
 80107f2:	bf00      	nop
 80107f4:	08010a0d 	.word	0x08010a0d
 80107f8:	08010a2f 	.word	0x08010a2f
 80107fc:	08010a67 	.word	0x08010a67
 8010800:	08010a8b 	.word	0x08010a8b
 8010804:	200023e8 	.word	0x200023e8

08010808 <stdio_exit_handler>:
 8010808:	4a02      	ldr	r2, [pc, #8]	; (8010814 <stdio_exit_handler+0xc>)
 801080a:	4903      	ldr	r1, [pc, #12]	; (8010818 <stdio_exit_handler+0x10>)
 801080c:	4803      	ldr	r0, [pc, #12]	; (801081c <stdio_exit_handler+0x14>)
 801080e:	f000 b869 	b.w	80108e4 <_fwalk_sglue>
 8010812:	bf00      	nop
 8010814:	20000050 	.word	0x20000050
 8010818:	0801074d 	.word	0x0801074d
 801081c:	2000005c 	.word	0x2000005c

08010820 <cleanup_stdio>:
 8010820:	6841      	ldr	r1, [r0, #4]
 8010822:	4b0c      	ldr	r3, [pc, #48]	; (8010854 <cleanup_stdio+0x34>)
 8010824:	4299      	cmp	r1, r3
 8010826:	b510      	push	{r4, lr}
 8010828:	4604      	mov	r4, r0
 801082a:	d001      	beq.n	8010830 <cleanup_stdio+0x10>
 801082c:	f7ff ff8e 	bl	801074c <_fflush_r>
 8010830:	68a1      	ldr	r1, [r4, #8]
 8010832:	4b09      	ldr	r3, [pc, #36]	; (8010858 <cleanup_stdio+0x38>)
 8010834:	4299      	cmp	r1, r3
 8010836:	d002      	beq.n	801083e <cleanup_stdio+0x1e>
 8010838:	4620      	mov	r0, r4
 801083a:	f7ff ff87 	bl	801074c <_fflush_r>
 801083e:	68e1      	ldr	r1, [r4, #12]
 8010840:	4b06      	ldr	r3, [pc, #24]	; (801085c <cleanup_stdio+0x3c>)
 8010842:	4299      	cmp	r1, r3
 8010844:	d004      	beq.n	8010850 <cleanup_stdio+0x30>
 8010846:	4620      	mov	r0, r4
 8010848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801084c:	f7ff bf7e 	b.w	801074c <_fflush_r>
 8010850:	bd10      	pop	{r4, pc}
 8010852:	bf00      	nop
 8010854:	200023e8 	.word	0x200023e8
 8010858:	20002450 	.word	0x20002450
 801085c:	200024b8 	.word	0x200024b8

08010860 <global_stdio_init.part.0>:
 8010860:	b510      	push	{r4, lr}
 8010862:	4b0b      	ldr	r3, [pc, #44]	; (8010890 <global_stdio_init.part.0+0x30>)
 8010864:	4c0b      	ldr	r4, [pc, #44]	; (8010894 <global_stdio_init.part.0+0x34>)
 8010866:	4a0c      	ldr	r2, [pc, #48]	; (8010898 <global_stdio_init.part.0+0x38>)
 8010868:	601a      	str	r2, [r3, #0]
 801086a:	4620      	mov	r0, r4
 801086c:	2200      	movs	r2, #0
 801086e:	2104      	movs	r1, #4
 8010870:	f7ff ff94 	bl	801079c <std>
 8010874:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010878:	2201      	movs	r2, #1
 801087a:	2109      	movs	r1, #9
 801087c:	f7ff ff8e 	bl	801079c <std>
 8010880:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010884:	2202      	movs	r2, #2
 8010886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801088a:	2112      	movs	r1, #18
 801088c:	f7ff bf86 	b.w	801079c <std>
 8010890:	20002520 	.word	0x20002520
 8010894:	200023e8 	.word	0x200023e8
 8010898:	08010809 	.word	0x08010809

0801089c <__sfp_lock_acquire>:
 801089c:	4801      	ldr	r0, [pc, #4]	; (80108a4 <__sfp_lock_acquire+0x8>)
 801089e:	f000 ba16 	b.w	8010cce <__retarget_lock_acquire_recursive>
 80108a2:	bf00      	nop
 80108a4:	20002529 	.word	0x20002529

080108a8 <__sfp_lock_release>:
 80108a8:	4801      	ldr	r0, [pc, #4]	; (80108b0 <__sfp_lock_release+0x8>)
 80108aa:	f000 ba11 	b.w	8010cd0 <__retarget_lock_release_recursive>
 80108ae:	bf00      	nop
 80108b0:	20002529 	.word	0x20002529

080108b4 <__sinit>:
 80108b4:	b510      	push	{r4, lr}
 80108b6:	4604      	mov	r4, r0
 80108b8:	f7ff fff0 	bl	801089c <__sfp_lock_acquire>
 80108bc:	6a23      	ldr	r3, [r4, #32]
 80108be:	b11b      	cbz	r3, 80108c8 <__sinit+0x14>
 80108c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108c4:	f7ff bff0 	b.w	80108a8 <__sfp_lock_release>
 80108c8:	4b04      	ldr	r3, [pc, #16]	; (80108dc <__sinit+0x28>)
 80108ca:	6223      	str	r3, [r4, #32]
 80108cc:	4b04      	ldr	r3, [pc, #16]	; (80108e0 <__sinit+0x2c>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d1f5      	bne.n	80108c0 <__sinit+0xc>
 80108d4:	f7ff ffc4 	bl	8010860 <global_stdio_init.part.0>
 80108d8:	e7f2      	b.n	80108c0 <__sinit+0xc>
 80108da:	bf00      	nop
 80108dc:	08010821 	.word	0x08010821
 80108e0:	20002520 	.word	0x20002520

080108e4 <_fwalk_sglue>:
 80108e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108e8:	4607      	mov	r7, r0
 80108ea:	4688      	mov	r8, r1
 80108ec:	4614      	mov	r4, r2
 80108ee:	2600      	movs	r6, #0
 80108f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80108f4:	f1b9 0901 	subs.w	r9, r9, #1
 80108f8:	d505      	bpl.n	8010906 <_fwalk_sglue+0x22>
 80108fa:	6824      	ldr	r4, [r4, #0]
 80108fc:	2c00      	cmp	r4, #0
 80108fe:	d1f7      	bne.n	80108f0 <_fwalk_sglue+0xc>
 8010900:	4630      	mov	r0, r6
 8010902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010906:	89ab      	ldrh	r3, [r5, #12]
 8010908:	2b01      	cmp	r3, #1
 801090a:	d907      	bls.n	801091c <_fwalk_sglue+0x38>
 801090c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010910:	3301      	adds	r3, #1
 8010912:	d003      	beq.n	801091c <_fwalk_sglue+0x38>
 8010914:	4629      	mov	r1, r5
 8010916:	4638      	mov	r0, r7
 8010918:	47c0      	blx	r8
 801091a:	4306      	orrs	r6, r0
 801091c:	3568      	adds	r5, #104	; 0x68
 801091e:	e7e9      	b.n	80108f4 <_fwalk_sglue+0x10>

08010920 <iprintf>:
 8010920:	b40f      	push	{r0, r1, r2, r3}
 8010922:	b507      	push	{r0, r1, r2, lr}
 8010924:	4906      	ldr	r1, [pc, #24]	; (8010940 <iprintf+0x20>)
 8010926:	ab04      	add	r3, sp, #16
 8010928:	6808      	ldr	r0, [r1, #0]
 801092a:	f853 2b04 	ldr.w	r2, [r3], #4
 801092e:	6881      	ldr	r1, [r0, #8]
 8010930:	9301      	str	r3, [sp, #4]
 8010932:	f000 fa71 	bl	8010e18 <_vfiprintf_r>
 8010936:	b003      	add	sp, #12
 8010938:	f85d eb04 	ldr.w	lr, [sp], #4
 801093c:	b004      	add	sp, #16
 801093e:	4770      	bx	lr
 8010940:	200000a8 	.word	0x200000a8

08010944 <putchar>:
 8010944:	4b02      	ldr	r3, [pc, #8]	; (8010950 <putchar+0xc>)
 8010946:	4601      	mov	r1, r0
 8010948:	6818      	ldr	r0, [r3, #0]
 801094a:	6882      	ldr	r2, [r0, #8]
 801094c:	f000 bd82 	b.w	8011454 <_putc_r>
 8010950:	200000a8 	.word	0x200000a8

08010954 <_puts_r>:
 8010954:	6a03      	ldr	r3, [r0, #32]
 8010956:	b570      	push	{r4, r5, r6, lr}
 8010958:	6884      	ldr	r4, [r0, #8]
 801095a:	4605      	mov	r5, r0
 801095c:	460e      	mov	r6, r1
 801095e:	b90b      	cbnz	r3, 8010964 <_puts_r+0x10>
 8010960:	f7ff ffa8 	bl	80108b4 <__sinit>
 8010964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010966:	07db      	lsls	r3, r3, #31
 8010968:	d405      	bmi.n	8010976 <_puts_r+0x22>
 801096a:	89a3      	ldrh	r3, [r4, #12]
 801096c:	0598      	lsls	r0, r3, #22
 801096e:	d402      	bmi.n	8010976 <_puts_r+0x22>
 8010970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010972:	f000 f9ac 	bl	8010cce <__retarget_lock_acquire_recursive>
 8010976:	89a3      	ldrh	r3, [r4, #12]
 8010978:	0719      	lsls	r1, r3, #28
 801097a:	d513      	bpl.n	80109a4 <_puts_r+0x50>
 801097c:	6923      	ldr	r3, [r4, #16]
 801097e:	b18b      	cbz	r3, 80109a4 <_puts_r+0x50>
 8010980:	3e01      	subs	r6, #1
 8010982:	68a3      	ldr	r3, [r4, #8]
 8010984:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010988:	3b01      	subs	r3, #1
 801098a:	60a3      	str	r3, [r4, #8]
 801098c:	b9e9      	cbnz	r1, 80109ca <_puts_r+0x76>
 801098e:	2b00      	cmp	r3, #0
 8010990:	da2e      	bge.n	80109f0 <_puts_r+0x9c>
 8010992:	4622      	mov	r2, r4
 8010994:	210a      	movs	r1, #10
 8010996:	4628      	mov	r0, r5
 8010998:	f000 f87b 	bl	8010a92 <__swbuf_r>
 801099c:	3001      	adds	r0, #1
 801099e:	d007      	beq.n	80109b0 <_puts_r+0x5c>
 80109a0:	250a      	movs	r5, #10
 80109a2:	e007      	b.n	80109b4 <_puts_r+0x60>
 80109a4:	4621      	mov	r1, r4
 80109a6:	4628      	mov	r0, r5
 80109a8:	f000 f8b0 	bl	8010b0c <__swsetup_r>
 80109ac:	2800      	cmp	r0, #0
 80109ae:	d0e7      	beq.n	8010980 <_puts_r+0x2c>
 80109b0:	f04f 35ff 	mov.w	r5, #4294967295
 80109b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109b6:	07da      	lsls	r2, r3, #31
 80109b8:	d405      	bmi.n	80109c6 <_puts_r+0x72>
 80109ba:	89a3      	ldrh	r3, [r4, #12]
 80109bc:	059b      	lsls	r3, r3, #22
 80109be:	d402      	bmi.n	80109c6 <_puts_r+0x72>
 80109c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109c2:	f000 f985 	bl	8010cd0 <__retarget_lock_release_recursive>
 80109c6:	4628      	mov	r0, r5
 80109c8:	bd70      	pop	{r4, r5, r6, pc}
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	da04      	bge.n	80109d8 <_puts_r+0x84>
 80109ce:	69a2      	ldr	r2, [r4, #24]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	dc06      	bgt.n	80109e2 <_puts_r+0x8e>
 80109d4:	290a      	cmp	r1, #10
 80109d6:	d004      	beq.n	80109e2 <_puts_r+0x8e>
 80109d8:	6823      	ldr	r3, [r4, #0]
 80109da:	1c5a      	adds	r2, r3, #1
 80109dc:	6022      	str	r2, [r4, #0]
 80109de:	7019      	strb	r1, [r3, #0]
 80109e0:	e7cf      	b.n	8010982 <_puts_r+0x2e>
 80109e2:	4622      	mov	r2, r4
 80109e4:	4628      	mov	r0, r5
 80109e6:	f000 f854 	bl	8010a92 <__swbuf_r>
 80109ea:	3001      	adds	r0, #1
 80109ec:	d1c9      	bne.n	8010982 <_puts_r+0x2e>
 80109ee:	e7df      	b.n	80109b0 <_puts_r+0x5c>
 80109f0:	6823      	ldr	r3, [r4, #0]
 80109f2:	250a      	movs	r5, #10
 80109f4:	1c5a      	adds	r2, r3, #1
 80109f6:	6022      	str	r2, [r4, #0]
 80109f8:	701d      	strb	r5, [r3, #0]
 80109fa:	e7db      	b.n	80109b4 <_puts_r+0x60>

080109fc <puts>:
 80109fc:	4b02      	ldr	r3, [pc, #8]	; (8010a08 <puts+0xc>)
 80109fe:	4601      	mov	r1, r0
 8010a00:	6818      	ldr	r0, [r3, #0]
 8010a02:	f7ff bfa7 	b.w	8010954 <_puts_r>
 8010a06:	bf00      	nop
 8010a08:	200000a8 	.word	0x200000a8

08010a0c <__sread>:
 8010a0c:	b510      	push	{r4, lr}
 8010a0e:	460c      	mov	r4, r1
 8010a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a14:	f000 f8fc 	bl	8010c10 <_read_r>
 8010a18:	2800      	cmp	r0, #0
 8010a1a:	bfab      	itete	ge
 8010a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8010a20:	181b      	addge	r3, r3, r0
 8010a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010a26:	bfac      	ite	ge
 8010a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8010a2a:	81a3      	strhlt	r3, [r4, #12]
 8010a2c:	bd10      	pop	{r4, pc}

08010a2e <__swrite>:
 8010a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a32:	461f      	mov	r7, r3
 8010a34:	898b      	ldrh	r3, [r1, #12]
 8010a36:	05db      	lsls	r3, r3, #23
 8010a38:	4605      	mov	r5, r0
 8010a3a:	460c      	mov	r4, r1
 8010a3c:	4616      	mov	r6, r2
 8010a3e:	d505      	bpl.n	8010a4c <__swrite+0x1e>
 8010a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a44:	2302      	movs	r3, #2
 8010a46:	2200      	movs	r2, #0
 8010a48:	f000 f8d0 	bl	8010bec <_lseek_r>
 8010a4c:	89a3      	ldrh	r3, [r4, #12]
 8010a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a56:	81a3      	strh	r3, [r4, #12]
 8010a58:	4632      	mov	r2, r6
 8010a5a:	463b      	mov	r3, r7
 8010a5c:	4628      	mov	r0, r5
 8010a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a62:	f000 b8f7 	b.w	8010c54 <_write_r>

08010a66 <__sseek>:
 8010a66:	b510      	push	{r4, lr}
 8010a68:	460c      	mov	r4, r1
 8010a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a6e:	f000 f8bd 	bl	8010bec <_lseek_r>
 8010a72:	1c43      	adds	r3, r0, #1
 8010a74:	89a3      	ldrh	r3, [r4, #12]
 8010a76:	bf15      	itete	ne
 8010a78:	6560      	strne	r0, [r4, #84]	; 0x54
 8010a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010a82:	81a3      	strheq	r3, [r4, #12]
 8010a84:	bf18      	it	ne
 8010a86:	81a3      	strhne	r3, [r4, #12]
 8010a88:	bd10      	pop	{r4, pc}

08010a8a <__sclose>:
 8010a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a8e:	f000 b89d 	b.w	8010bcc <_close_r>

08010a92 <__swbuf_r>:
 8010a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a94:	460e      	mov	r6, r1
 8010a96:	4614      	mov	r4, r2
 8010a98:	4605      	mov	r5, r0
 8010a9a:	b118      	cbz	r0, 8010aa4 <__swbuf_r+0x12>
 8010a9c:	6a03      	ldr	r3, [r0, #32]
 8010a9e:	b90b      	cbnz	r3, 8010aa4 <__swbuf_r+0x12>
 8010aa0:	f7ff ff08 	bl	80108b4 <__sinit>
 8010aa4:	69a3      	ldr	r3, [r4, #24]
 8010aa6:	60a3      	str	r3, [r4, #8]
 8010aa8:	89a3      	ldrh	r3, [r4, #12]
 8010aaa:	071a      	lsls	r2, r3, #28
 8010aac:	d525      	bpl.n	8010afa <__swbuf_r+0x68>
 8010aae:	6923      	ldr	r3, [r4, #16]
 8010ab0:	b31b      	cbz	r3, 8010afa <__swbuf_r+0x68>
 8010ab2:	6823      	ldr	r3, [r4, #0]
 8010ab4:	6922      	ldr	r2, [r4, #16]
 8010ab6:	1a98      	subs	r0, r3, r2
 8010ab8:	6963      	ldr	r3, [r4, #20]
 8010aba:	b2f6      	uxtb	r6, r6
 8010abc:	4283      	cmp	r3, r0
 8010abe:	4637      	mov	r7, r6
 8010ac0:	dc04      	bgt.n	8010acc <__swbuf_r+0x3a>
 8010ac2:	4621      	mov	r1, r4
 8010ac4:	4628      	mov	r0, r5
 8010ac6:	f7ff fe41 	bl	801074c <_fflush_r>
 8010aca:	b9e0      	cbnz	r0, 8010b06 <__swbuf_r+0x74>
 8010acc:	68a3      	ldr	r3, [r4, #8]
 8010ace:	3b01      	subs	r3, #1
 8010ad0:	60a3      	str	r3, [r4, #8]
 8010ad2:	6823      	ldr	r3, [r4, #0]
 8010ad4:	1c5a      	adds	r2, r3, #1
 8010ad6:	6022      	str	r2, [r4, #0]
 8010ad8:	701e      	strb	r6, [r3, #0]
 8010ada:	6962      	ldr	r2, [r4, #20]
 8010adc:	1c43      	adds	r3, r0, #1
 8010ade:	429a      	cmp	r2, r3
 8010ae0:	d004      	beq.n	8010aec <__swbuf_r+0x5a>
 8010ae2:	89a3      	ldrh	r3, [r4, #12]
 8010ae4:	07db      	lsls	r3, r3, #31
 8010ae6:	d506      	bpl.n	8010af6 <__swbuf_r+0x64>
 8010ae8:	2e0a      	cmp	r6, #10
 8010aea:	d104      	bne.n	8010af6 <__swbuf_r+0x64>
 8010aec:	4621      	mov	r1, r4
 8010aee:	4628      	mov	r0, r5
 8010af0:	f7ff fe2c 	bl	801074c <_fflush_r>
 8010af4:	b938      	cbnz	r0, 8010b06 <__swbuf_r+0x74>
 8010af6:	4638      	mov	r0, r7
 8010af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010afa:	4621      	mov	r1, r4
 8010afc:	4628      	mov	r0, r5
 8010afe:	f000 f805 	bl	8010b0c <__swsetup_r>
 8010b02:	2800      	cmp	r0, #0
 8010b04:	d0d5      	beq.n	8010ab2 <__swbuf_r+0x20>
 8010b06:	f04f 37ff 	mov.w	r7, #4294967295
 8010b0a:	e7f4      	b.n	8010af6 <__swbuf_r+0x64>

08010b0c <__swsetup_r>:
 8010b0c:	b538      	push	{r3, r4, r5, lr}
 8010b0e:	4b2a      	ldr	r3, [pc, #168]	; (8010bb8 <__swsetup_r+0xac>)
 8010b10:	4605      	mov	r5, r0
 8010b12:	6818      	ldr	r0, [r3, #0]
 8010b14:	460c      	mov	r4, r1
 8010b16:	b118      	cbz	r0, 8010b20 <__swsetup_r+0x14>
 8010b18:	6a03      	ldr	r3, [r0, #32]
 8010b1a:	b90b      	cbnz	r3, 8010b20 <__swsetup_r+0x14>
 8010b1c:	f7ff feca 	bl	80108b4 <__sinit>
 8010b20:	89a3      	ldrh	r3, [r4, #12]
 8010b22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b26:	0718      	lsls	r0, r3, #28
 8010b28:	d422      	bmi.n	8010b70 <__swsetup_r+0x64>
 8010b2a:	06d9      	lsls	r1, r3, #27
 8010b2c:	d407      	bmi.n	8010b3e <__swsetup_r+0x32>
 8010b2e:	2309      	movs	r3, #9
 8010b30:	602b      	str	r3, [r5, #0]
 8010b32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b36:	81a3      	strh	r3, [r4, #12]
 8010b38:	f04f 30ff 	mov.w	r0, #4294967295
 8010b3c:	e034      	b.n	8010ba8 <__swsetup_r+0x9c>
 8010b3e:	0758      	lsls	r0, r3, #29
 8010b40:	d512      	bpl.n	8010b68 <__swsetup_r+0x5c>
 8010b42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b44:	b141      	cbz	r1, 8010b58 <__swsetup_r+0x4c>
 8010b46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b4a:	4299      	cmp	r1, r3
 8010b4c:	d002      	beq.n	8010b54 <__swsetup_r+0x48>
 8010b4e:	4628      	mov	r0, r5
 8010b50:	f000 f8ec 	bl	8010d2c <_free_r>
 8010b54:	2300      	movs	r3, #0
 8010b56:	6363      	str	r3, [r4, #52]	; 0x34
 8010b58:	89a3      	ldrh	r3, [r4, #12]
 8010b5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b5e:	81a3      	strh	r3, [r4, #12]
 8010b60:	2300      	movs	r3, #0
 8010b62:	6063      	str	r3, [r4, #4]
 8010b64:	6923      	ldr	r3, [r4, #16]
 8010b66:	6023      	str	r3, [r4, #0]
 8010b68:	89a3      	ldrh	r3, [r4, #12]
 8010b6a:	f043 0308 	orr.w	r3, r3, #8
 8010b6e:	81a3      	strh	r3, [r4, #12]
 8010b70:	6923      	ldr	r3, [r4, #16]
 8010b72:	b94b      	cbnz	r3, 8010b88 <__swsetup_r+0x7c>
 8010b74:	89a3      	ldrh	r3, [r4, #12]
 8010b76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b7e:	d003      	beq.n	8010b88 <__swsetup_r+0x7c>
 8010b80:	4621      	mov	r1, r4
 8010b82:	4628      	mov	r0, r5
 8010b84:	f000 fc2a 	bl	80113dc <__smakebuf_r>
 8010b88:	89a0      	ldrh	r0, [r4, #12]
 8010b8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b8e:	f010 0301 	ands.w	r3, r0, #1
 8010b92:	d00a      	beq.n	8010baa <__swsetup_r+0x9e>
 8010b94:	2300      	movs	r3, #0
 8010b96:	60a3      	str	r3, [r4, #8]
 8010b98:	6963      	ldr	r3, [r4, #20]
 8010b9a:	425b      	negs	r3, r3
 8010b9c:	61a3      	str	r3, [r4, #24]
 8010b9e:	6923      	ldr	r3, [r4, #16]
 8010ba0:	b943      	cbnz	r3, 8010bb4 <__swsetup_r+0xa8>
 8010ba2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010ba6:	d1c4      	bne.n	8010b32 <__swsetup_r+0x26>
 8010ba8:	bd38      	pop	{r3, r4, r5, pc}
 8010baa:	0781      	lsls	r1, r0, #30
 8010bac:	bf58      	it	pl
 8010bae:	6963      	ldrpl	r3, [r4, #20]
 8010bb0:	60a3      	str	r3, [r4, #8]
 8010bb2:	e7f4      	b.n	8010b9e <__swsetup_r+0x92>
 8010bb4:	2000      	movs	r0, #0
 8010bb6:	e7f7      	b.n	8010ba8 <__swsetup_r+0x9c>
 8010bb8:	200000a8 	.word	0x200000a8

08010bbc <memset>:
 8010bbc:	4402      	add	r2, r0
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d100      	bne.n	8010bc6 <memset+0xa>
 8010bc4:	4770      	bx	lr
 8010bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8010bca:	e7f9      	b.n	8010bc0 <memset+0x4>

08010bcc <_close_r>:
 8010bcc:	b538      	push	{r3, r4, r5, lr}
 8010bce:	4d06      	ldr	r5, [pc, #24]	; (8010be8 <_close_r+0x1c>)
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	4608      	mov	r0, r1
 8010bd6:	602b      	str	r3, [r5, #0]
 8010bd8:	f7f1 f8bd 	bl	8001d56 <_close>
 8010bdc:	1c43      	adds	r3, r0, #1
 8010bde:	d102      	bne.n	8010be6 <_close_r+0x1a>
 8010be0:	682b      	ldr	r3, [r5, #0]
 8010be2:	b103      	cbz	r3, 8010be6 <_close_r+0x1a>
 8010be4:	6023      	str	r3, [r4, #0]
 8010be6:	bd38      	pop	{r3, r4, r5, pc}
 8010be8:	20002524 	.word	0x20002524

08010bec <_lseek_r>:
 8010bec:	b538      	push	{r3, r4, r5, lr}
 8010bee:	4d07      	ldr	r5, [pc, #28]	; (8010c0c <_lseek_r+0x20>)
 8010bf0:	4604      	mov	r4, r0
 8010bf2:	4608      	mov	r0, r1
 8010bf4:	4611      	mov	r1, r2
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	602a      	str	r2, [r5, #0]
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	f7f1 f8d2 	bl	8001da4 <_lseek>
 8010c00:	1c43      	adds	r3, r0, #1
 8010c02:	d102      	bne.n	8010c0a <_lseek_r+0x1e>
 8010c04:	682b      	ldr	r3, [r5, #0]
 8010c06:	b103      	cbz	r3, 8010c0a <_lseek_r+0x1e>
 8010c08:	6023      	str	r3, [r4, #0]
 8010c0a:	bd38      	pop	{r3, r4, r5, pc}
 8010c0c:	20002524 	.word	0x20002524

08010c10 <_read_r>:
 8010c10:	b538      	push	{r3, r4, r5, lr}
 8010c12:	4d07      	ldr	r5, [pc, #28]	; (8010c30 <_read_r+0x20>)
 8010c14:	4604      	mov	r4, r0
 8010c16:	4608      	mov	r0, r1
 8010c18:	4611      	mov	r1, r2
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	602a      	str	r2, [r5, #0]
 8010c1e:	461a      	mov	r2, r3
 8010c20:	f7f1 f87c 	bl	8001d1c <_read>
 8010c24:	1c43      	adds	r3, r0, #1
 8010c26:	d102      	bne.n	8010c2e <_read_r+0x1e>
 8010c28:	682b      	ldr	r3, [r5, #0]
 8010c2a:	b103      	cbz	r3, 8010c2e <_read_r+0x1e>
 8010c2c:	6023      	str	r3, [r4, #0]
 8010c2e:	bd38      	pop	{r3, r4, r5, pc}
 8010c30:	20002524 	.word	0x20002524

08010c34 <_sbrk_r>:
 8010c34:	b538      	push	{r3, r4, r5, lr}
 8010c36:	4d06      	ldr	r5, [pc, #24]	; (8010c50 <_sbrk_r+0x1c>)
 8010c38:	2300      	movs	r3, #0
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	4608      	mov	r0, r1
 8010c3e:	602b      	str	r3, [r5, #0]
 8010c40:	f7f1 f8be 	bl	8001dc0 <_sbrk>
 8010c44:	1c43      	adds	r3, r0, #1
 8010c46:	d102      	bne.n	8010c4e <_sbrk_r+0x1a>
 8010c48:	682b      	ldr	r3, [r5, #0]
 8010c4a:	b103      	cbz	r3, 8010c4e <_sbrk_r+0x1a>
 8010c4c:	6023      	str	r3, [r4, #0]
 8010c4e:	bd38      	pop	{r3, r4, r5, pc}
 8010c50:	20002524 	.word	0x20002524

08010c54 <_write_r>:
 8010c54:	b538      	push	{r3, r4, r5, lr}
 8010c56:	4d07      	ldr	r5, [pc, #28]	; (8010c74 <_write_r+0x20>)
 8010c58:	4604      	mov	r4, r0
 8010c5a:	4608      	mov	r0, r1
 8010c5c:	4611      	mov	r1, r2
 8010c5e:	2200      	movs	r2, #0
 8010c60:	602a      	str	r2, [r5, #0]
 8010c62:	461a      	mov	r2, r3
 8010c64:	f7f0 fe30 	bl	80018c8 <_write>
 8010c68:	1c43      	adds	r3, r0, #1
 8010c6a:	d102      	bne.n	8010c72 <_write_r+0x1e>
 8010c6c:	682b      	ldr	r3, [r5, #0]
 8010c6e:	b103      	cbz	r3, 8010c72 <_write_r+0x1e>
 8010c70:	6023      	str	r3, [r4, #0]
 8010c72:	bd38      	pop	{r3, r4, r5, pc}
 8010c74:	20002524 	.word	0x20002524

08010c78 <__errno>:
 8010c78:	4b01      	ldr	r3, [pc, #4]	; (8010c80 <__errno+0x8>)
 8010c7a:	6818      	ldr	r0, [r3, #0]
 8010c7c:	4770      	bx	lr
 8010c7e:	bf00      	nop
 8010c80:	200000a8 	.word	0x200000a8

08010c84 <__libc_init_array>:
 8010c84:	b570      	push	{r4, r5, r6, lr}
 8010c86:	4d0d      	ldr	r5, [pc, #52]	; (8010cbc <__libc_init_array+0x38>)
 8010c88:	4c0d      	ldr	r4, [pc, #52]	; (8010cc0 <__libc_init_array+0x3c>)
 8010c8a:	1b64      	subs	r4, r4, r5
 8010c8c:	10a4      	asrs	r4, r4, #2
 8010c8e:	2600      	movs	r6, #0
 8010c90:	42a6      	cmp	r6, r4
 8010c92:	d109      	bne.n	8010ca8 <__libc_init_array+0x24>
 8010c94:	4d0b      	ldr	r5, [pc, #44]	; (8010cc4 <__libc_init_array+0x40>)
 8010c96:	4c0c      	ldr	r4, [pc, #48]	; (8010cc8 <__libc_init_array+0x44>)
 8010c98:	f000 fc7e 	bl	8011598 <_init>
 8010c9c:	1b64      	subs	r4, r4, r5
 8010c9e:	10a4      	asrs	r4, r4, #2
 8010ca0:	2600      	movs	r6, #0
 8010ca2:	42a6      	cmp	r6, r4
 8010ca4:	d105      	bne.n	8010cb2 <__libc_init_array+0x2e>
 8010ca6:	bd70      	pop	{r4, r5, r6, pc}
 8010ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cac:	4798      	blx	r3
 8010cae:	3601      	adds	r6, #1
 8010cb0:	e7ee      	b.n	8010c90 <__libc_init_array+0xc>
 8010cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cb6:	4798      	blx	r3
 8010cb8:	3601      	adds	r6, #1
 8010cba:	e7f2      	b.n	8010ca2 <__libc_init_array+0x1e>
 8010cbc:	080139d4 	.word	0x080139d4
 8010cc0:	080139d4 	.word	0x080139d4
 8010cc4:	080139d4 	.word	0x080139d4
 8010cc8:	080139d8 	.word	0x080139d8

08010ccc <__retarget_lock_init_recursive>:
 8010ccc:	4770      	bx	lr

08010cce <__retarget_lock_acquire_recursive>:
 8010cce:	4770      	bx	lr

08010cd0 <__retarget_lock_release_recursive>:
 8010cd0:	4770      	bx	lr

08010cd2 <memcpy>:
 8010cd2:	440a      	add	r2, r1
 8010cd4:	4291      	cmp	r1, r2
 8010cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8010cda:	d100      	bne.n	8010cde <memcpy+0xc>
 8010cdc:	4770      	bx	lr
 8010cde:	b510      	push	{r4, lr}
 8010ce0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ce4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ce8:	4291      	cmp	r1, r2
 8010cea:	d1f9      	bne.n	8010ce0 <memcpy+0xe>
 8010cec:	bd10      	pop	{r4, pc}
	...

08010cf0 <__assert_func>:
 8010cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010cf2:	4614      	mov	r4, r2
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	4b09      	ldr	r3, [pc, #36]	; (8010d1c <__assert_func+0x2c>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	4605      	mov	r5, r0
 8010cfc:	68d8      	ldr	r0, [r3, #12]
 8010cfe:	b14c      	cbz	r4, 8010d14 <__assert_func+0x24>
 8010d00:	4b07      	ldr	r3, [pc, #28]	; (8010d20 <__assert_func+0x30>)
 8010d02:	9100      	str	r1, [sp, #0]
 8010d04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d08:	4906      	ldr	r1, [pc, #24]	; (8010d24 <__assert_func+0x34>)
 8010d0a:	462b      	mov	r3, r5
 8010d0c:	f000 fb2e 	bl	801136c <fiprintf>
 8010d10:	f000 fbf6 	bl	8011500 <abort>
 8010d14:	4b04      	ldr	r3, [pc, #16]	; (8010d28 <__assert_func+0x38>)
 8010d16:	461c      	mov	r4, r3
 8010d18:	e7f3      	b.n	8010d02 <__assert_func+0x12>
 8010d1a:	bf00      	nop
 8010d1c:	200000a8 	.word	0x200000a8
 8010d20:	0801395b 	.word	0x0801395b
 8010d24:	08013968 	.word	0x08013968
 8010d28:	08013996 	.word	0x08013996

08010d2c <_free_r>:
 8010d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d2e:	2900      	cmp	r1, #0
 8010d30:	d044      	beq.n	8010dbc <_free_r+0x90>
 8010d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d36:	9001      	str	r0, [sp, #4]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	f1a1 0404 	sub.w	r4, r1, #4
 8010d3e:	bfb8      	it	lt
 8010d40:	18e4      	addlt	r4, r4, r3
 8010d42:	f7ff fc33 	bl	80105ac <__malloc_lock>
 8010d46:	4a1e      	ldr	r2, [pc, #120]	; (8010dc0 <_free_r+0x94>)
 8010d48:	9801      	ldr	r0, [sp, #4]
 8010d4a:	6813      	ldr	r3, [r2, #0]
 8010d4c:	b933      	cbnz	r3, 8010d5c <_free_r+0x30>
 8010d4e:	6063      	str	r3, [r4, #4]
 8010d50:	6014      	str	r4, [r2, #0]
 8010d52:	b003      	add	sp, #12
 8010d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d58:	f7ff bc2e 	b.w	80105b8 <__malloc_unlock>
 8010d5c:	42a3      	cmp	r3, r4
 8010d5e:	d908      	bls.n	8010d72 <_free_r+0x46>
 8010d60:	6825      	ldr	r5, [r4, #0]
 8010d62:	1961      	adds	r1, r4, r5
 8010d64:	428b      	cmp	r3, r1
 8010d66:	bf01      	itttt	eq
 8010d68:	6819      	ldreq	r1, [r3, #0]
 8010d6a:	685b      	ldreq	r3, [r3, #4]
 8010d6c:	1949      	addeq	r1, r1, r5
 8010d6e:	6021      	streq	r1, [r4, #0]
 8010d70:	e7ed      	b.n	8010d4e <_free_r+0x22>
 8010d72:	461a      	mov	r2, r3
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	b10b      	cbz	r3, 8010d7c <_free_r+0x50>
 8010d78:	42a3      	cmp	r3, r4
 8010d7a:	d9fa      	bls.n	8010d72 <_free_r+0x46>
 8010d7c:	6811      	ldr	r1, [r2, #0]
 8010d7e:	1855      	adds	r5, r2, r1
 8010d80:	42a5      	cmp	r5, r4
 8010d82:	d10b      	bne.n	8010d9c <_free_r+0x70>
 8010d84:	6824      	ldr	r4, [r4, #0]
 8010d86:	4421      	add	r1, r4
 8010d88:	1854      	adds	r4, r2, r1
 8010d8a:	42a3      	cmp	r3, r4
 8010d8c:	6011      	str	r1, [r2, #0]
 8010d8e:	d1e0      	bne.n	8010d52 <_free_r+0x26>
 8010d90:	681c      	ldr	r4, [r3, #0]
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	6053      	str	r3, [r2, #4]
 8010d96:	440c      	add	r4, r1
 8010d98:	6014      	str	r4, [r2, #0]
 8010d9a:	e7da      	b.n	8010d52 <_free_r+0x26>
 8010d9c:	d902      	bls.n	8010da4 <_free_r+0x78>
 8010d9e:	230c      	movs	r3, #12
 8010da0:	6003      	str	r3, [r0, #0]
 8010da2:	e7d6      	b.n	8010d52 <_free_r+0x26>
 8010da4:	6825      	ldr	r5, [r4, #0]
 8010da6:	1961      	adds	r1, r4, r5
 8010da8:	428b      	cmp	r3, r1
 8010daa:	bf04      	itt	eq
 8010dac:	6819      	ldreq	r1, [r3, #0]
 8010dae:	685b      	ldreq	r3, [r3, #4]
 8010db0:	6063      	str	r3, [r4, #4]
 8010db2:	bf04      	itt	eq
 8010db4:	1949      	addeq	r1, r1, r5
 8010db6:	6021      	streq	r1, [r4, #0]
 8010db8:	6054      	str	r4, [r2, #4]
 8010dba:	e7ca      	b.n	8010d52 <_free_r+0x26>
 8010dbc:	b003      	add	sp, #12
 8010dbe:	bd30      	pop	{r4, r5, pc}
 8010dc0:	200023e0 	.word	0x200023e0

08010dc4 <__sfputc_r>:
 8010dc4:	6893      	ldr	r3, [r2, #8]
 8010dc6:	3b01      	subs	r3, #1
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	b410      	push	{r4}
 8010dcc:	6093      	str	r3, [r2, #8]
 8010dce:	da08      	bge.n	8010de2 <__sfputc_r+0x1e>
 8010dd0:	6994      	ldr	r4, [r2, #24]
 8010dd2:	42a3      	cmp	r3, r4
 8010dd4:	db01      	blt.n	8010dda <__sfputc_r+0x16>
 8010dd6:	290a      	cmp	r1, #10
 8010dd8:	d103      	bne.n	8010de2 <__sfputc_r+0x1e>
 8010dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dde:	f7ff be58 	b.w	8010a92 <__swbuf_r>
 8010de2:	6813      	ldr	r3, [r2, #0]
 8010de4:	1c58      	adds	r0, r3, #1
 8010de6:	6010      	str	r0, [r2, #0]
 8010de8:	7019      	strb	r1, [r3, #0]
 8010dea:	4608      	mov	r0, r1
 8010dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010df0:	4770      	bx	lr

08010df2 <__sfputs_r>:
 8010df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010df4:	4606      	mov	r6, r0
 8010df6:	460f      	mov	r7, r1
 8010df8:	4614      	mov	r4, r2
 8010dfa:	18d5      	adds	r5, r2, r3
 8010dfc:	42ac      	cmp	r4, r5
 8010dfe:	d101      	bne.n	8010e04 <__sfputs_r+0x12>
 8010e00:	2000      	movs	r0, #0
 8010e02:	e007      	b.n	8010e14 <__sfputs_r+0x22>
 8010e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e08:	463a      	mov	r2, r7
 8010e0a:	4630      	mov	r0, r6
 8010e0c:	f7ff ffda 	bl	8010dc4 <__sfputc_r>
 8010e10:	1c43      	adds	r3, r0, #1
 8010e12:	d1f3      	bne.n	8010dfc <__sfputs_r+0xa>
 8010e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e18 <_vfiprintf_r>:
 8010e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1c:	460d      	mov	r5, r1
 8010e1e:	b09d      	sub	sp, #116	; 0x74
 8010e20:	4614      	mov	r4, r2
 8010e22:	4698      	mov	r8, r3
 8010e24:	4606      	mov	r6, r0
 8010e26:	b118      	cbz	r0, 8010e30 <_vfiprintf_r+0x18>
 8010e28:	6a03      	ldr	r3, [r0, #32]
 8010e2a:	b90b      	cbnz	r3, 8010e30 <_vfiprintf_r+0x18>
 8010e2c:	f7ff fd42 	bl	80108b4 <__sinit>
 8010e30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e32:	07d9      	lsls	r1, r3, #31
 8010e34:	d405      	bmi.n	8010e42 <_vfiprintf_r+0x2a>
 8010e36:	89ab      	ldrh	r3, [r5, #12]
 8010e38:	059a      	lsls	r2, r3, #22
 8010e3a:	d402      	bmi.n	8010e42 <_vfiprintf_r+0x2a>
 8010e3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e3e:	f7ff ff46 	bl	8010cce <__retarget_lock_acquire_recursive>
 8010e42:	89ab      	ldrh	r3, [r5, #12]
 8010e44:	071b      	lsls	r3, r3, #28
 8010e46:	d501      	bpl.n	8010e4c <_vfiprintf_r+0x34>
 8010e48:	692b      	ldr	r3, [r5, #16]
 8010e4a:	b99b      	cbnz	r3, 8010e74 <_vfiprintf_r+0x5c>
 8010e4c:	4629      	mov	r1, r5
 8010e4e:	4630      	mov	r0, r6
 8010e50:	f7ff fe5c 	bl	8010b0c <__swsetup_r>
 8010e54:	b170      	cbz	r0, 8010e74 <_vfiprintf_r+0x5c>
 8010e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e58:	07dc      	lsls	r4, r3, #31
 8010e5a:	d504      	bpl.n	8010e66 <_vfiprintf_r+0x4e>
 8010e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e60:	b01d      	add	sp, #116	; 0x74
 8010e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e66:	89ab      	ldrh	r3, [r5, #12]
 8010e68:	0598      	lsls	r0, r3, #22
 8010e6a:	d4f7      	bmi.n	8010e5c <_vfiprintf_r+0x44>
 8010e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e6e:	f7ff ff2f 	bl	8010cd0 <__retarget_lock_release_recursive>
 8010e72:	e7f3      	b.n	8010e5c <_vfiprintf_r+0x44>
 8010e74:	2300      	movs	r3, #0
 8010e76:	9309      	str	r3, [sp, #36]	; 0x24
 8010e78:	2320      	movs	r3, #32
 8010e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e82:	2330      	movs	r3, #48	; 0x30
 8010e84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011038 <_vfiprintf_r+0x220>
 8010e88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e8c:	f04f 0901 	mov.w	r9, #1
 8010e90:	4623      	mov	r3, r4
 8010e92:	469a      	mov	sl, r3
 8010e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e98:	b10a      	cbz	r2, 8010e9e <_vfiprintf_r+0x86>
 8010e9a:	2a25      	cmp	r2, #37	; 0x25
 8010e9c:	d1f9      	bne.n	8010e92 <_vfiprintf_r+0x7a>
 8010e9e:	ebba 0b04 	subs.w	fp, sl, r4
 8010ea2:	d00b      	beq.n	8010ebc <_vfiprintf_r+0xa4>
 8010ea4:	465b      	mov	r3, fp
 8010ea6:	4622      	mov	r2, r4
 8010ea8:	4629      	mov	r1, r5
 8010eaa:	4630      	mov	r0, r6
 8010eac:	f7ff ffa1 	bl	8010df2 <__sfputs_r>
 8010eb0:	3001      	adds	r0, #1
 8010eb2:	f000 80a9 	beq.w	8011008 <_vfiprintf_r+0x1f0>
 8010eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010eb8:	445a      	add	r2, fp
 8010eba:	9209      	str	r2, [sp, #36]	; 0x24
 8010ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f000 80a1 	beq.w	8011008 <_vfiprintf_r+0x1f0>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8010ecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ed0:	f10a 0a01 	add.w	sl, sl, #1
 8010ed4:	9304      	str	r3, [sp, #16]
 8010ed6:	9307      	str	r3, [sp, #28]
 8010ed8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010edc:	931a      	str	r3, [sp, #104]	; 0x68
 8010ede:	4654      	mov	r4, sl
 8010ee0:	2205      	movs	r2, #5
 8010ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ee6:	4854      	ldr	r0, [pc, #336]	; (8011038 <_vfiprintf_r+0x220>)
 8010ee8:	f7ef f97a 	bl	80001e0 <memchr>
 8010eec:	9a04      	ldr	r2, [sp, #16]
 8010eee:	b9d8      	cbnz	r0, 8010f28 <_vfiprintf_r+0x110>
 8010ef0:	06d1      	lsls	r1, r2, #27
 8010ef2:	bf44      	itt	mi
 8010ef4:	2320      	movmi	r3, #32
 8010ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010efa:	0713      	lsls	r3, r2, #28
 8010efc:	bf44      	itt	mi
 8010efe:	232b      	movmi	r3, #43	; 0x2b
 8010f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f04:	f89a 3000 	ldrb.w	r3, [sl]
 8010f08:	2b2a      	cmp	r3, #42	; 0x2a
 8010f0a:	d015      	beq.n	8010f38 <_vfiprintf_r+0x120>
 8010f0c:	9a07      	ldr	r2, [sp, #28]
 8010f0e:	4654      	mov	r4, sl
 8010f10:	2000      	movs	r0, #0
 8010f12:	f04f 0c0a 	mov.w	ip, #10
 8010f16:	4621      	mov	r1, r4
 8010f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f1c:	3b30      	subs	r3, #48	; 0x30
 8010f1e:	2b09      	cmp	r3, #9
 8010f20:	d94d      	bls.n	8010fbe <_vfiprintf_r+0x1a6>
 8010f22:	b1b0      	cbz	r0, 8010f52 <_vfiprintf_r+0x13a>
 8010f24:	9207      	str	r2, [sp, #28]
 8010f26:	e014      	b.n	8010f52 <_vfiprintf_r+0x13a>
 8010f28:	eba0 0308 	sub.w	r3, r0, r8
 8010f2c:	fa09 f303 	lsl.w	r3, r9, r3
 8010f30:	4313      	orrs	r3, r2
 8010f32:	9304      	str	r3, [sp, #16]
 8010f34:	46a2      	mov	sl, r4
 8010f36:	e7d2      	b.n	8010ede <_vfiprintf_r+0xc6>
 8010f38:	9b03      	ldr	r3, [sp, #12]
 8010f3a:	1d19      	adds	r1, r3, #4
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	9103      	str	r1, [sp, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	bfbb      	ittet	lt
 8010f44:	425b      	neglt	r3, r3
 8010f46:	f042 0202 	orrlt.w	r2, r2, #2
 8010f4a:	9307      	strge	r3, [sp, #28]
 8010f4c:	9307      	strlt	r3, [sp, #28]
 8010f4e:	bfb8      	it	lt
 8010f50:	9204      	strlt	r2, [sp, #16]
 8010f52:	7823      	ldrb	r3, [r4, #0]
 8010f54:	2b2e      	cmp	r3, #46	; 0x2e
 8010f56:	d10c      	bne.n	8010f72 <_vfiprintf_r+0x15a>
 8010f58:	7863      	ldrb	r3, [r4, #1]
 8010f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8010f5c:	d134      	bne.n	8010fc8 <_vfiprintf_r+0x1b0>
 8010f5e:	9b03      	ldr	r3, [sp, #12]
 8010f60:	1d1a      	adds	r2, r3, #4
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	9203      	str	r2, [sp, #12]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	bfb8      	it	lt
 8010f6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f6e:	3402      	adds	r4, #2
 8010f70:	9305      	str	r3, [sp, #20]
 8010f72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011048 <_vfiprintf_r+0x230>
 8010f76:	7821      	ldrb	r1, [r4, #0]
 8010f78:	2203      	movs	r2, #3
 8010f7a:	4650      	mov	r0, sl
 8010f7c:	f7ef f930 	bl	80001e0 <memchr>
 8010f80:	b138      	cbz	r0, 8010f92 <_vfiprintf_r+0x17a>
 8010f82:	9b04      	ldr	r3, [sp, #16]
 8010f84:	eba0 000a 	sub.w	r0, r0, sl
 8010f88:	2240      	movs	r2, #64	; 0x40
 8010f8a:	4082      	lsls	r2, r0
 8010f8c:	4313      	orrs	r3, r2
 8010f8e:	3401      	adds	r4, #1
 8010f90:	9304      	str	r3, [sp, #16]
 8010f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f96:	4829      	ldr	r0, [pc, #164]	; (801103c <_vfiprintf_r+0x224>)
 8010f98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f9c:	2206      	movs	r2, #6
 8010f9e:	f7ef f91f 	bl	80001e0 <memchr>
 8010fa2:	2800      	cmp	r0, #0
 8010fa4:	d03f      	beq.n	8011026 <_vfiprintf_r+0x20e>
 8010fa6:	4b26      	ldr	r3, [pc, #152]	; (8011040 <_vfiprintf_r+0x228>)
 8010fa8:	bb1b      	cbnz	r3, 8010ff2 <_vfiprintf_r+0x1da>
 8010faa:	9b03      	ldr	r3, [sp, #12]
 8010fac:	3307      	adds	r3, #7
 8010fae:	f023 0307 	bic.w	r3, r3, #7
 8010fb2:	3308      	adds	r3, #8
 8010fb4:	9303      	str	r3, [sp, #12]
 8010fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fb8:	443b      	add	r3, r7
 8010fba:	9309      	str	r3, [sp, #36]	; 0x24
 8010fbc:	e768      	b.n	8010e90 <_vfiprintf_r+0x78>
 8010fbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fc2:	460c      	mov	r4, r1
 8010fc4:	2001      	movs	r0, #1
 8010fc6:	e7a6      	b.n	8010f16 <_vfiprintf_r+0xfe>
 8010fc8:	2300      	movs	r3, #0
 8010fca:	3401      	adds	r4, #1
 8010fcc:	9305      	str	r3, [sp, #20]
 8010fce:	4619      	mov	r1, r3
 8010fd0:	f04f 0c0a 	mov.w	ip, #10
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fda:	3a30      	subs	r2, #48	; 0x30
 8010fdc:	2a09      	cmp	r2, #9
 8010fde:	d903      	bls.n	8010fe8 <_vfiprintf_r+0x1d0>
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d0c6      	beq.n	8010f72 <_vfiprintf_r+0x15a>
 8010fe4:	9105      	str	r1, [sp, #20]
 8010fe6:	e7c4      	b.n	8010f72 <_vfiprintf_r+0x15a>
 8010fe8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fec:	4604      	mov	r4, r0
 8010fee:	2301      	movs	r3, #1
 8010ff0:	e7f0      	b.n	8010fd4 <_vfiprintf_r+0x1bc>
 8010ff2:	ab03      	add	r3, sp, #12
 8010ff4:	9300      	str	r3, [sp, #0]
 8010ff6:	462a      	mov	r2, r5
 8010ff8:	4b12      	ldr	r3, [pc, #72]	; (8011044 <_vfiprintf_r+0x22c>)
 8010ffa:	a904      	add	r1, sp, #16
 8010ffc:	4630      	mov	r0, r6
 8010ffe:	f3af 8000 	nop.w
 8011002:	4607      	mov	r7, r0
 8011004:	1c78      	adds	r0, r7, #1
 8011006:	d1d6      	bne.n	8010fb6 <_vfiprintf_r+0x19e>
 8011008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801100a:	07d9      	lsls	r1, r3, #31
 801100c:	d405      	bmi.n	801101a <_vfiprintf_r+0x202>
 801100e:	89ab      	ldrh	r3, [r5, #12]
 8011010:	059a      	lsls	r2, r3, #22
 8011012:	d402      	bmi.n	801101a <_vfiprintf_r+0x202>
 8011014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011016:	f7ff fe5b 	bl	8010cd0 <__retarget_lock_release_recursive>
 801101a:	89ab      	ldrh	r3, [r5, #12]
 801101c:	065b      	lsls	r3, r3, #25
 801101e:	f53f af1d 	bmi.w	8010e5c <_vfiprintf_r+0x44>
 8011022:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011024:	e71c      	b.n	8010e60 <_vfiprintf_r+0x48>
 8011026:	ab03      	add	r3, sp, #12
 8011028:	9300      	str	r3, [sp, #0]
 801102a:	462a      	mov	r2, r5
 801102c:	4b05      	ldr	r3, [pc, #20]	; (8011044 <_vfiprintf_r+0x22c>)
 801102e:	a904      	add	r1, sp, #16
 8011030:	4630      	mov	r0, r6
 8011032:	f000 f879 	bl	8011128 <_printf_i>
 8011036:	e7e4      	b.n	8011002 <_vfiprintf_r+0x1ea>
 8011038:	08013997 	.word	0x08013997
 801103c:	080139a1 	.word	0x080139a1
 8011040:	00000000 	.word	0x00000000
 8011044:	08010df3 	.word	0x08010df3
 8011048:	0801399d 	.word	0x0801399d

0801104c <_printf_common>:
 801104c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011050:	4616      	mov	r6, r2
 8011052:	4699      	mov	r9, r3
 8011054:	688a      	ldr	r2, [r1, #8]
 8011056:	690b      	ldr	r3, [r1, #16]
 8011058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801105c:	4293      	cmp	r3, r2
 801105e:	bfb8      	it	lt
 8011060:	4613      	movlt	r3, r2
 8011062:	6033      	str	r3, [r6, #0]
 8011064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011068:	4607      	mov	r7, r0
 801106a:	460c      	mov	r4, r1
 801106c:	b10a      	cbz	r2, 8011072 <_printf_common+0x26>
 801106e:	3301      	adds	r3, #1
 8011070:	6033      	str	r3, [r6, #0]
 8011072:	6823      	ldr	r3, [r4, #0]
 8011074:	0699      	lsls	r1, r3, #26
 8011076:	bf42      	ittt	mi
 8011078:	6833      	ldrmi	r3, [r6, #0]
 801107a:	3302      	addmi	r3, #2
 801107c:	6033      	strmi	r3, [r6, #0]
 801107e:	6825      	ldr	r5, [r4, #0]
 8011080:	f015 0506 	ands.w	r5, r5, #6
 8011084:	d106      	bne.n	8011094 <_printf_common+0x48>
 8011086:	f104 0a19 	add.w	sl, r4, #25
 801108a:	68e3      	ldr	r3, [r4, #12]
 801108c:	6832      	ldr	r2, [r6, #0]
 801108e:	1a9b      	subs	r3, r3, r2
 8011090:	42ab      	cmp	r3, r5
 8011092:	dc26      	bgt.n	80110e2 <_printf_common+0x96>
 8011094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011098:	1e13      	subs	r3, r2, #0
 801109a:	6822      	ldr	r2, [r4, #0]
 801109c:	bf18      	it	ne
 801109e:	2301      	movne	r3, #1
 80110a0:	0692      	lsls	r2, r2, #26
 80110a2:	d42b      	bmi.n	80110fc <_printf_common+0xb0>
 80110a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110a8:	4649      	mov	r1, r9
 80110aa:	4638      	mov	r0, r7
 80110ac:	47c0      	blx	r8
 80110ae:	3001      	adds	r0, #1
 80110b0:	d01e      	beq.n	80110f0 <_printf_common+0xa4>
 80110b2:	6823      	ldr	r3, [r4, #0]
 80110b4:	6922      	ldr	r2, [r4, #16]
 80110b6:	f003 0306 	and.w	r3, r3, #6
 80110ba:	2b04      	cmp	r3, #4
 80110bc:	bf02      	ittt	eq
 80110be:	68e5      	ldreq	r5, [r4, #12]
 80110c0:	6833      	ldreq	r3, [r6, #0]
 80110c2:	1aed      	subeq	r5, r5, r3
 80110c4:	68a3      	ldr	r3, [r4, #8]
 80110c6:	bf0c      	ite	eq
 80110c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110cc:	2500      	movne	r5, #0
 80110ce:	4293      	cmp	r3, r2
 80110d0:	bfc4      	itt	gt
 80110d2:	1a9b      	subgt	r3, r3, r2
 80110d4:	18ed      	addgt	r5, r5, r3
 80110d6:	2600      	movs	r6, #0
 80110d8:	341a      	adds	r4, #26
 80110da:	42b5      	cmp	r5, r6
 80110dc:	d11a      	bne.n	8011114 <_printf_common+0xc8>
 80110de:	2000      	movs	r0, #0
 80110e0:	e008      	b.n	80110f4 <_printf_common+0xa8>
 80110e2:	2301      	movs	r3, #1
 80110e4:	4652      	mov	r2, sl
 80110e6:	4649      	mov	r1, r9
 80110e8:	4638      	mov	r0, r7
 80110ea:	47c0      	blx	r8
 80110ec:	3001      	adds	r0, #1
 80110ee:	d103      	bne.n	80110f8 <_printf_common+0xac>
 80110f0:	f04f 30ff 	mov.w	r0, #4294967295
 80110f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110f8:	3501      	adds	r5, #1
 80110fa:	e7c6      	b.n	801108a <_printf_common+0x3e>
 80110fc:	18e1      	adds	r1, r4, r3
 80110fe:	1c5a      	adds	r2, r3, #1
 8011100:	2030      	movs	r0, #48	; 0x30
 8011102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011106:	4422      	add	r2, r4
 8011108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801110c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011110:	3302      	adds	r3, #2
 8011112:	e7c7      	b.n	80110a4 <_printf_common+0x58>
 8011114:	2301      	movs	r3, #1
 8011116:	4622      	mov	r2, r4
 8011118:	4649      	mov	r1, r9
 801111a:	4638      	mov	r0, r7
 801111c:	47c0      	blx	r8
 801111e:	3001      	adds	r0, #1
 8011120:	d0e6      	beq.n	80110f0 <_printf_common+0xa4>
 8011122:	3601      	adds	r6, #1
 8011124:	e7d9      	b.n	80110da <_printf_common+0x8e>
	...

08011128 <_printf_i>:
 8011128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801112c:	7e0f      	ldrb	r7, [r1, #24]
 801112e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011130:	2f78      	cmp	r7, #120	; 0x78
 8011132:	4691      	mov	r9, r2
 8011134:	4680      	mov	r8, r0
 8011136:	460c      	mov	r4, r1
 8011138:	469a      	mov	sl, r3
 801113a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801113e:	d807      	bhi.n	8011150 <_printf_i+0x28>
 8011140:	2f62      	cmp	r7, #98	; 0x62
 8011142:	d80a      	bhi.n	801115a <_printf_i+0x32>
 8011144:	2f00      	cmp	r7, #0
 8011146:	f000 80d4 	beq.w	80112f2 <_printf_i+0x1ca>
 801114a:	2f58      	cmp	r7, #88	; 0x58
 801114c:	f000 80c0 	beq.w	80112d0 <_printf_i+0x1a8>
 8011150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011158:	e03a      	b.n	80111d0 <_printf_i+0xa8>
 801115a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801115e:	2b15      	cmp	r3, #21
 8011160:	d8f6      	bhi.n	8011150 <_printf_i+0x28>
 8011162:	a101      	add	r1, pc, #4	; (adr r1, 8011168 <_printf_i+0x40>)
 8011164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011168:	080111c1 	.word	0x080111c1
 801116c:	080111d5 	.word	0x080111d5
 8011170:	08011151 	.word	0x08011151
 8011174:	08011151 	.word	0x08011151
 8011178:	08011151 	.word	0x08011151
 801117c:	08011151 	.word	0x08011151
 8011180:	080111d5 	.word	0x080111d5
 8011184:	08011151 	.word	0x08011151
 8011188:	08011151 	.word	0x08011151
 801118c:	08011151 	.word	0x08011151
 8011190:	08011151 	.word	0x08011151
 8011194:	080112d9 	.word	0x080112d9
 8011198:	08011201 	.word	0x08011201
 801119c:	08011293 	.word	0x08011293
 80111a0:	08011151 	.word	0x08011151
 80111a4:	08011151 	.word	0x08011151
 80111a8:	080112fb 	.word	0x080112fb
 80111ac:	08011151 	.word	0x08011151
 80111b0:	08011201 	.word	0x08011201
 80111b4:	08011151 	.word	0x08011151
 80111b8:	08011151 	.word	0x08011151
 80111bc:	0801129b 	.word	0x0801129b
 80111c0:	682b      	ldr	r3, [r5, #0]
 80111c2:	1d1a      	adds	r2, r3, #4
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	602a      	str	r2, [r5, #0]
 80111c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111d0:	2301      	movs	r3, #1
 80111d2:	e09f      	b.n	8011314 <_printf_i+0x1ec>
 80111d4:	6820      	ldr	r0, [r4, #0]
 80111d6:	682b      	ldr	r3, [r5, #0]
 80111d8:	0607      	lsls	r7, r0, #24
 80111da:	f103 0104 	add.w	r1, r3, #4
 80111de:	6029      	str	r1, [r5, #0]
 80111e0:	d501      	bpl.n	80111e6 <_printf_i+0xbe>
 80111e2:	681e      	ldr	r6, [r3, #0]
 80111e4:	e003      	b.n	80111ee <_printf_i+0xc6>
 80111e6:	0646      	lsls	r6, r0, #25
 80111e8:	d5fb      	bpl.n	80111e2 <_printf_i+0xba>
 80111ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80111ee:	2e00      	cmp	r6, #0
 80111f0:	da03      	bge.n	80111fa <_printf_i+0xd2>
 80111f2:	232d      	movs	r3, #45	; 0x2d
 80111f4:	4276      	negs	r6, r6
 80111f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111fa:	485a      	ldr	r0, [pc, #360]	; (8011364 <_printf_i+0x23c>)
 80111fc:	230a      	movs	r3, #10
 80111fe:	e012      	b.n	8011226 <_printf_i+0xfe>
 8011200:	682b      	ldr	r3, [r5, #0]
 8011202:	6820      	ldr	r0, [r4, #0]
 8011204:	1d19      	adds	r1, r3, #4
 8011206:	6029      	str	r1, [r5, #0]
 8011208:	0605      	lsls	r5, r0, #24
 801120a:	d501      	bpl.n	8011210 <_printf_i+0xe8>
 801120c:	681e      	ldr	r6, [r3, #0]
 801120e:	e002      	b.n	8011216 <_printf_i+0xee>
 8011210:	0641      	lsls	r1, r0, #25
 8011212:	d5fb      	bpl.n	801120c <_printf_i+0xe4>
 8011214:	881e      	ldrh	r6, [r3, #0]
 8011216:	4853      	ldr	r0, [pc, #332]	; (8011364 <_printf_i+0x23c>)
 8011218:	2f6f      	cmp	r7, #111	; 0x6f
 801121a:	bf0c      	ite	eq
 801121c:	2308      	moveq	r3, #8
 801121e:	230a      	movne	r3, #10
 8011220:	2100      	movs	r1, #0
 8011222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011226:	6865      	ldr	r5, [r4, #4]
 8011228:	60a5      	str	r5, [r4, #8]
 801122a:	2d00      	cmp	r5, #0
 801122c:	bfa2      	ittt	ge
 801122e:	6821      	ldrge	r1, [r4, #0]
 8011230:	f021 0104 	bicge.w	r1, r1, #4
 8011234:	6021      	strge	r1, [r4, #0]
 8011236:	b90e      	cbnz	r6, 801123c <_printf_i+0x114>
 8011238:	2d00      	cmp	r5, #0
 801123a:	d04b      	beq.n	80112d4 <_printf_i+0x1ac>
 801123c:	4615      	mov	r5, r2
 801123e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011242:	fb03 6711 	mls	r7, r3, r1, r6
 8011246:	5dc7      	ldrb	r7, [r0, r7]
 8011248:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801124c:	4637      	mov	r7, r6
 801124e:	42bb      	cmp	r3, r7
 8011250:	460e      	mov	r6, r1
 8011252:	d9f4      	bls.n	801123e <_printf_i+0x116>
 8011254:	2b08      	cmp	r3, #8
 8011256:	d10b      	bne.n	8011270 <_printf_i+0x148>
 8011258:	6823      	ldr	r3, [r4, #0]
 801125a:	07de      	lsls	r6, r3, #31
 801125c:	d508      	bpl.n	8011270 <_printf_i+0x148>
 801125e:	6923      	ldr	r3, [r4, #16]
 8011260:	6861      	ldr	r1, [r4, #4]
 8011262:	4299      	cmp	r1, r3
 8011264:	bfde      	ittt	le
 8011266:	2330      	movle	r3, #48	; 0x30
 8011268:	f805 3c01 	strble.w	r3, [r5, #-1]
 801126c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011270:	1b52      	subs	r2, r2, r5
 8011272:	6122      	str	r2, [r4, #16]
 8011274:	f8cd a000 	str.w	sl, [sp]
 8011278:	464b      	mov	r3, r9
 801127a:	aa03      	add	r2, sp, #12
 801127c:	4621      	mov	r1, r4
 801127e:	4640      	mov	r0, r8
 8011280:	f7ff fee4 	bl	801104c <_printf_common>
 8011284:	3001      	adds	r0, #1
 8011286:	d14a      	bne.n	801131e <_printf_i+0x1f6>
 8011288:	f04f 30ff 	mov.w	r0, #4294967295
 801128c:	b004      	add	sp, #16
 801128e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011292:	6823      	ldr	r3, [r4, #0]
 8011294:	f043 0320 	orr.w	r3, r3, #32
 8011298:	6023      	str	r3, [r4, #0]
 801129a:	4833      	ldr	r0, [pc, #204]	; (8011368 <_printf_i+0x240>)
 801129c:	2778      	movs	r7, #120	; 0x78
 801129e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80112a2:	6823      	ldr	r3, [r4, #0]
 80112a4:	6829      	ldr	r1, [r5, #0]
 80112a6:	061f      	lsls	r7, r3, #24
 80112a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80112ac:	d402      	bmi.n	80112b4 <_printf_i+0x18c>
 80112ae:	065f      	lsls	r7, r3, #25
 80112b0:	bf48      	it	mi
 80112b2:	b2b6      	uxthmi	r6, r6
 80112b4:	07df      	lsls	r7, r3, #31
 80112b6:	bf48      	it	mi
 80112b8:	f043 0320 	orrmi.w	r3, r3, #32
 80112bc:	6029      	str	r1, [r5, #0]
 80112be:	bf48      	it	mi
 80112c0:	6023      	strmi	r3, [r4, #0]
 80112c2:	b91e      	cbnz	r6, 80112cc <_printf_i+0x1a4>
 80112c4:	6823      	ldr	r3, [r4, #0]
 80112c6:	f023 0320 	bic.w	r3, r3, #32
 80112ca:	6023      	str	r3, [r4, #0]
 80112cc:	2310      	movs	r3, #16
 80112ce:	e7a7      	b.n	8011220 <_printf_i+0xf8>
 80112d0:	4824      	ldr	r0, [pc, #144]	; (8011364 <_printf_i+0x23c>)
 80112d2:	e7e4      	b.n	801129e <_printf_i+0x176>
 80112d4:	4615      	mov	r5, r2
 80112d6:	e7bd      	b.n	8011254 <_printf_i+0x12c>
 80112d8:	682b      	ldr	r3, [r5, #0]
 80112da:	6826      	ldr	r6, [r4, #0]
 80112dc:	6961      	ldr	r1, [r4, #20]
 80112de:	1d18      	adds	r0, r3, #4
 80112e0:	6028      	str	r0, [r5, #0]
 80112e2:	0635      	lsls	r5, r6, #24
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	d501      	bpl.n	80112ec <_printf_i+0x1c4>
 80112e8:	6019      	str	r1, [r3, #0]
 80112ea:	e002      	b.n	80112f2 <_printf_i+0x1ca>
 80112ec:	0670      	lsls	r0, r6, #25
 80112ee:	d5fb      	bpl.n	80112e8 <_printf_i+0x1c0>
 80112f0:	8019      	strh	r1, [r3, #0]
 80112f2:	2300      	movs	r3, #0
 80112f4:	6123      	str	r3, [r4, #16]
 80112f6:	4615      	mov	r5, r2
 80112f8:	e7bc      	b.n	8011274 <_printf_i+0x14c>
 80112fa:	682b      	ldr	r3, [r5, #0]
 80112fc:	1d1a      	adds	r2, r3, #4
 80112fe:	602a      	str	r2, [r5, #0]
 8011300:	681d      	ldr	r5, [r3, #0]
 8011302:	6862      	ldr	r2, [r4, #4]
 8011304:	2100      	movs	r1, #0
 8011306:	4628      	mov	r0, r5
 8011308:	f7ee ff6a 	bl	80001e0 <memchr>
 801130c:	b108      	cbz	r0, 8011312 <_printf_i+0x1ea>
 801130e:	1b40      	subs	r0, r0, r5
 8011310:	6060      	str	r0, [r4, #4]
 8011312:	6863      	ldr	r3, [r4, #4]
 8011314:	6123      	str	r3, [r4, #16]
 8011316:	2300      	movs	r3, #0
 8011318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801131c:	e7aa      	b.n	8011274 <_printf_i+0x14c>
 801131e:	6923      	ldr	r3, [r4, #16]
 8011320:	462a      	mov	r2, r5
 8011322:	4649      	mov	r1, r9
 8011324:	4640      	mov	r0, r8
 8011326:	47d0      	blx	sl
 8011328:	3001      	adds	r0, #1
 801132a:	d0ad      	beq.n	8011288 <_printf_i+0x160>
 801132c:	6823      	ldr	r3, [r4, #0]
 801132e:	079b      	lsls	r3, r3, #30
 8011330:	d413      	bmi.n	801135a <_printf_i+0x232>
 8011332:	68e0      	ldr	r0, [r4, #12]
 8011334:	9b03      	ldr	r3, [sp, #12]
 8011336:	4298      	cmp	r0, r3
 8011338:	bfb8      	it	lt
 801133a:	4618      	movlt	r0, r3
 801133c:	e7a6      	b.n	801128c <_printf_i+0x164>
 801133e:	2301      	movs	r3, #1
 8011340:	4632      	mov	r2, r6
 8011342:	4649      	mov	r1, r9
 8011344:	4640      	mov	r0, r8
 8011346:	47d0      	blx	sl
 8011348:	3001      	adds	r0, #1
 801134a:	d09d      	beq.n	8011288 <_printf_i+0x160>
 801134c:	3501      	adds	r5, #1
 801134e:	68e3      	ldr	r3, [r4, #12]
 8011350:	9903      	ldr	r1, [sp, #12]
 8011352:	1a5b      	subs	r3, r3, r1
 8011354:	42ab      	cmp	r3, r5
 8011356:	dcf2      	bgt.n	801133e <_printf_i+0x216>
 8011358:	e7eb      	b.n	8011332 <_printf_i+0x20a>
 801135a:	2500      	movs	r5, #0
 801135c:	f104 0619 	add.w	r6, r4, #25
 8011360:	e7f5      	b.n	801134e <_printf_i+0x226>
 8011362:	bf00      	nop
 8011364:	080139a8 	.word	0x080139a8
 8011368:	080139b9 	.word	0x080139b9

0801136c <fiprintf>:
 801136c:	b40e      	push	{r1, r2, r3}
 801136e:	b503      	push	{r0, r1, lr}
 8011370:	4601      	mov	r1, r0
 8011372:	ab03      	add	r3, sp, #12
 8011374:	4805      	ldr	r0, [pc, #20]	; (801138c <fiprintf+0x20>)
 8011376:	f853 2b04 	ldr.w	r2, [r3], #4
 801137a:	6800      	ldr	r0, [r0, #0]
 801137c:	9301      	str	r3, [sp, #4]
 801137e:	f7ff fd4b 	bl	8010e18 <_vfiprintf_r>
 8011382:	b002      	add	sp, #8
 8011384:	f85d eb04 	ldr.w	lr, [sp], #4
 8011388:	b003      	add	sp, #12
 801138a:	4770      	bx	lr
 801138c:	200000a8 	.word	0x200000a8

08011390 <__swhatbuf_r>:
 8011390:	b570      	push	{r4, r5, r6, lr}
 8011392:	460c      	mov	r4, r1
 8011394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011398:	2900      	cmp	r1, #0
 801139a:	b096      	sub	sp, #88	; 0x58
 801139c:	4615      	mov	r5, r2
 801139e:	461e      	mov	r6, r3
 80113a0:	da0d      	bge.n	80113be <__swhatbuf_r+0x2e>
 80113a2:	89a3      	ldrh	r3, [r4, #12]
 80113a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80113a8:	f04f 0100 	mov.w	r1, #0
 80113ac:	bf0c      	ite	eq
 80113ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80113b2:	2340      	movne	r3, #64	; 0x40
 80113b4:	2000      	movs	r0, #0
 80113b6:	6031      	str	r1, [r6, #0]
 80113b8:	602b      	str	r3, [r5, #0]
 80113ba:	b016      	add	sp, #88	; 0x58
 80113bc:	bd70      	pop	{r4, r5, r6, pc}
 80113be:	466a      	mov	r2, sp
 80113c0:	f000 f87c 	bl	80114bc <_fstat_r>
 80113c4:	2800      	cmp	r0, #0
 80113c6:	dbec      	blt.n	80113a2 <__swhatbuf_r+0x12>
 80113c8:	9901      	ldr	r1, [sp, #4]
 80113ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80113ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80113d2:	4259      	negs	r1, r3
 80113d4:	4159      	adcs	r1, r3
 80113d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113da:	e7eb      	b.n	80113b4 <__swhatbuf_r+0x24>

080113dc <__smakebuf_r>:
 80113dc:	898b      	ldrh	r3, [r1, #12]
 80113de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113e0:	079d      	lsls	r5, r3, #30
 80113e2:	4606      	mov	r6, r0
 80113e4:	460c      	mov	r4, r1
 80113e6:	d507      	bpl.n	80113f8 <__smakebuf_r+0x1c>
 80113e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113ec:	6023      	str	r3, [r4, #0]
 80113ee:	6123      	str	r3, [r4, #16]
 80113f0:	2301      	movs	r3, #1
 80113f2:	6163      	str	r3, [r4, #20]
 80113f4:	b002      	add	sp, #8
 80113f6:	bd70      	pop	{r4, r5, r6, pc}
 80113f8:	ab01      	add	r3, sp, #4
 80113fa:	466a      	mov	r2, sp
 80113fc:	f7ff ffc8 	bl	8011390 <__swhatbuf_r>
 8011400:	9900      	ldr	r1, [sp, #0]
 8011402:	4605      	mov	r5, r0
 8011404:	4630      	mov	r0, r6
 8011406:	f7ff f851 	bl	80104ac <_malloc_r>
 801140a:	b948      	cbnz	r0, 8011420 <__smakebuf_r+0x44>
 801140c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011410:	059a      	lsls	r2, r3, #22
 8011412:	d4ef      	bmi.n	80113f4 <__smakebuf_r+0x18>
 8011414:	f023 0303 	bic.w	r3, r3, #3
 8011418:	f043 0302 	orr.w	r3, r3, #2
 801141c:	81a3      	strh	r3, [r4, #12]
 801141e:	e7e3      	b.n	80113e8 <__smakebuf_r+0xc>
 8011420:	89a3      	ldrh	r3, [r4, #12]
 8011422:	6020      	str	r0, [r4, #0]
 8011424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011428:	81a3      	strh	r3, [r4, #12]
 801142a:	9b00      	ldr	r3, [sp, #0]
 801142c:	6163      	str	r3, [r4, #20]
 801142e:	9b01      	ldr	r3, [sp, #4]
 8011430:	6120      	str	r0, [r4, #16]
 8011432:	b15b      	cbz	r3, 801144c <__smakebuf_r+0x70>
 8011434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011438:	4630      	mov	r0, r6
 801143a:	f000 f851 	bl	80114e0 <_isatty_r>
 801143e:	b128      	cbz	r0, 801144c <__smakebuf_r+0x70>
 8011440:	89a3      	ldrh	r3, [r4, #12]
 8011442:	f023 0303 	bic.w	r3, r3, #3
 8011446:	f043 0301 	orr.w	r3, r3, #1
 801144a:	81a3      	strh	r3, [r4, #12]
 801144c:	89a3      	ldrh	r3, [r4, #12]
 801144e:	431d      	orrs	r5, r3
 8011450:	81a5      	strh	r5, [r4, #12]
 8011452:	e7cf      	b.n	80113f4 <__smakebuf_r+0x18>

08011454 <_putc_r>:
 8011454:	b570      	push	{r4, r5, r6, lr}
 8011456:	460d      	mov	r5, r1
 8011458:	4614      	mov	r4, r2
 801145a:	4606      	mov	r6, r0
 801145c:	b118      	cbz	r0, 8011466 <_putc_r+0x12>
 801145e:	6a03      	ldr	r3, [r0, #32]
 8011460:	b90b      	cbnz	r3, 8011466 <_putc_r+0x12>
 8011462:	f7ff fa27 	bl	80108b4 <__sinit>
 8011466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011468:	07d8      	lsls	r0, r3, #31
 801146a:	d405      	bmi.n	8011478 <_putc_r+0x24>
 801146c:	89a3      	ldrh	r3, [r4, #12]
 801146e:	0599      	lsls	r1, r3, #22
 8011470:	d402      	bmi.n	8011478 <_putc_r+0x24>
 8011472:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011474:	f7ff fc2b 	bl	8010cce <__retarget_lock_acquire_recursive>
 8011478:	68a3      	ldr	r3, [r4, #8]
 801147a:	3b01      	subs	r3, #1
 801147c:	2b00      	cmp	r3, #0
 801147e:	60a3      	str	r3, [r4, #8]
 8011480:	da05      	bge.n	801148e <_putc_r+0x3a>
 8011482:	69a2      	ldr	r2, [r4, #24]
 8011484:	4293      	cmp	r3, r2
 8011486:	db12      	blt.n	80114ae <_putc_r+0x5a>
 8011488:	b2eb      	uxtb	r3, r5
 801148a:	2b0a      	cmp	r3, #10
 801148c:	d00f      	beq.n	80114ae <_putc_r+0x5a>
 801148e:	6823      	ldr	r3, [r4, #0]
 8011490:	1c5a      	adds	r2, r3, #1
 8011492:	6022      	str	r2, [r4, #0]
 8011494:	701d      	strb	r5, [r3, #0]
 8011496:	b2ed      	uxtb	r5, r5
 8011498:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801149a:	07da      	lsls	r2, r3, #31
 801149c:	d405      	bmi.n	80114aa <_putc_r+0x56>
 801149e:	89a3      	ldrh	r3, [r4, #12]
 80114a0:	059b      	lsls	r3, r3, #22
 80114a2:	d402      	bmi.n	80114aa <_putc_r+0x56>
 80114a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114a6:	f7ff fc13 	bl	8010cd0 <__retarget_lock_release_recursive>
 80114aa:	4628      	mov	r0, r5
 80114ac:	bd70      	pop	{r4, r5, r6, pc}
 80114ae:	4629      	mov	r1, r5
 80114b0:	4622      	mov	r2, r4
 80114b2:	4630      	mov	r0, r6
 80114b4:	f7ff faed 	bl	8010a92 <__swbuf_r>
 80114b8:	4605      	mov	r5, r0
 80114ba:	e7ed      	b.n	8011498 <_putc_r+0x44>

080114bc <_fstat_r>:
 80114bc:	b538      	push	{r3, r4, r5, lr}
 80114be:	4d07      	ldr	r5, [pc, #28]	; (80114dc <_fstat_r+0x20>)
 80114c0:	2300      	movs	r3, #0
 80114c2:	4604      	mov	r4, r0
 80114c4:	4608      	mov	r0, r1
 80114c6:	4611      	mov	r1, r2
 80114c8:	602b      	str	r3, [r5, #0]
 80114ca:	f7f0 fc50 	bl	8001d6e <_fstat>
 80114ce:	1c43      	adds	r3, r0, #1
 80114d0:	d102      	bne.n	80114d8 <_fstat_r+0x1c>
 80114d2:	682b      	ldr	r3, [r5, #0]
 80114d4:	b103      	cbz	r3, 80114d8 <_fstat_r+0x1c>
 80114d6:	6023      	str	r3, [r4, #0]
 80114d8:	bd38      	pop	{r3, r4, r5, pc}
 80114da:	bf00      	nop
 80114dc:	20002524 	.word	0x20002524

080114e0 <_isatty_r>:
 80114e0:	b538      	push	{r3, r4, r5, lr}
 80114e2:	4d06      	ldr	r5, [pc, #24]	; (80114fc <_isatty_r+0x1c>)
 80114e4:	2300      	movs	r3, #0
 80114e6:	4604      	mov	r4, r0
 80114e8:	4608      	mov	r0, r1
 80114ea:	602b      	str	r3, [r5, #0]
 80114ec:	f7f0 fc4f 	bl	8001d8e <_isatty>
 80114f0:	1c43      	adds	r3, r0, #1
 80114f2:	d102      	bne.n	80114fa <_isatty_r+0x1a>
 80114f4:	682b      	ldr	r3, [r5, #0]
 80114f6:	b103      	cbz	r3, 80114fa <_isatty_r+0x1a>
 80114f8:	6023      	str	r3, [r4, #0]
 80114fa:	bd38      	pop	{r3, r4, r5, pc}
 80114fc:	20002524 	.word	0x20002524

08011500 <abort>:
 8011500:	b508      	push	{r3, lr}
 8011502:	2006      	movs	r0, #6
 8011504:	f000 f82c 	bl	8011560 <raise>
 8011508:	2001      	movs	r0, #1
 801150a:	f7f0 fbfd 	bl	8001d08 <_exit>

0801150e <_raise_r>:
 801150e:	291f      	cmp	r1, #31
 8011510:	b538      	push	{r3, r4, r5, lr}
 8011512:	4604      	mov	r4, r0
 8011514:	460d      	mov	r5, r1
 8011516:	d904      	bls.n	8011522 <_raise_r+0x14>
 8011518:	2316      	movs	r3, #22
 801151a:	6003      	str	r3, [r0, #0]
 801151c:	f04f 30ff 	mov.w	r0, #4294967295
 8011520:	bd38      	pop	{r3, r4, r5, pc}
 8011522:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011524:	b112      	cbz	r2, 801152c <_raise_r+0x1e>
 8011526:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801152a:	b94b      	cbnz	r3, 8011540 <_raise_r+0x32>
 801152c:	4620      	mov	r0, r4
 801152e:	f000 f831 	bl	8011594 <_getpid_r>
 8011532:	462a      	mov	r2, r5
 8011534:	4601      	mov	r1, r0
 8011536:	4620      	mov	r0, r4
 8011538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801153c:	f000 b818 	b.w	8011570 <_kill_r>
 8011540:	2b01      	cmp	r3, #1
 8011542:	d00a      	beq.n	801155a <_raise_r+0x4c>
 8011544:	1c59      	adds	r1, r3, #1
 8011546:	d103      	bne.n	8011550 <_raise_r+0x42>
 8011548:	2316      	movs	r3, #22
 801154a:	6003      	str	r3, [r0, #0]
 801154c:	2001      	movs	r0, #1
 801154e:	e7e7      	b.n	8011520 <_raise_r+0x12>
 8011550:	2400      	movs	r4, #0
 8011552:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011556:	4628      	mov	r0, r5
 8011558:	4798      	blx	r3
 801155a:	2000      	movs	r0, #0
 801155c:	e7e0      	b.n	8011520 <_raise_r+0x12>
	...

08011560 <raise>:
 8011560:	4b02      	ldr	r3, [pc, #8]	; (801156c <raise+0xc>)
 8011562:	4601      	mov	r1, r0
 8011564:	6818      	ldr	r0, [r3, #0]
 8011566:	f7ff bfd2 	b.w	801150e <_raise_r>
 801156a:	bf00      	nop
 801156c:	200000a8 	.word	0x200000a8

08011570 <_kill_r>:
 8011570:	b538      	push	{r3, r4, r5, lr}
 8011572:	4d07      	ldr	r5, [pc, #28]	; (8011590 <_kill_r+0x20>)
 8011574:	2300      	movs	r3, #0
 8011576:	4604      	mov	r4, r0
 8011578:	4608      	mov	r0, r1
 801157a:	4611      	mov	r1, r2
 801157c:	602b      	str	r3, [r5, #0]
 801157e:	f7f0 fbb3 	bl	8001ce8 <_kill>
 8011582:	1c43      	adds	r3, r0, #1
 8011584:	d102      	bne.n	801158c <_kill_r+0x1c>
 8011586:	682b      	ldr	r3, [r5, #0]
 8011588:	b103      	cbz	r3, 801158c <_kill_r+0x1c>
 801158a:	6023      	str	r3, [r4, #0]
 801158c:	bd38      	pop	{r3, r4, r5, pc}
 801158e:	bf00      	nop
 8011590:	20002524 	.word	0x20002524

08011594 <_getpid_r>:
 8011594:	f7f0 bba0 	b.w	8001cd8 <_getpid>

08011598 <_init>:
 8011598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159a:	bf00      	nop
 801159c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801159e:	bc08      	pop	{r3}
 80115a0:	469e      	mov	lr, r3
 80115a2:	4770      	bx	lr

080115a4 <_fini>:
 80115a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115a6:	bf00      	nop
 80115a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115aa:	bc08      	pop	{r3}
 80115ac:	469e      	mov	lr, r3
 80115ae:	4770      	bx	lr
