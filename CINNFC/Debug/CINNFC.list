
CINNFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007770  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c7c  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800858c  0800858c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800858c  0800858c  0001858c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008594  08008594  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008594  08008594  00018594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008598  08008598  00018598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800859c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000006c  08008608  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08008608  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da20  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000238e  00000000  00000000  0002daff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0002fe90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000099b  00000000  00000000  00030af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018913  00000000  00000000  00031493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010fc4  00000000  00000000  00049da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d94e  00000000  00000000  0005ad6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d84  00000000  00000000  000e86b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ec43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080078f8 	.word	0x080078f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080078f8 	.word	0x080078f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b0c8      	sub	sp, #288	; 0x120
 8000580:	af00      	add	r7, sp, #0
 8000582:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000586:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800058a:	6018      	str	r0, [r3, #0]
 800058c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000590:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000594:	6019      	str	r1, [r3, #0]
 8000596:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800059a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800059e:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 80005a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005a4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	2bff      	cmp	r3, #255	; 0xff
 80005ac:	d806      	bhi.n	80005bc <PN532_WriteFrame+0x40>
 80005ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005b2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	e0aa      	b.n	8000718 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 80005c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 80005d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005dc:	2200      	movs	r2, #0
 80005de:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 80005e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005e8:	22ff      	movs	r2, #255	; 0xff
 80005ea:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80005f2:	e010      	b.n	8000616 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 80005f4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80005f8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80005fc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000600:	5cd2      	ldrb	r2, [r2, r3]
 8000602:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000606:	4413      	add	r3, r2
 8000608:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 800060c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000610:	3301      	adds	r3, #1
 8000612:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8000616:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800061a:	2b02      	cmp	r3, #2
 800061c:	d9ea      	bls.n	80005f4 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 800061e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000622:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	b2da      	uxtb	r2, r3
 800062a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800062e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000632:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8000634:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000638:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	425b      	negs	r3, r3
 8000642:	b2da      	uxtb	r2, r3
 8000644:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000648:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800064c:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000654:	e023      	b.n	800069e <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8000656:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800065a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800065e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000662:	6812      	ldr	r2, [r2, #0]
 8000664:	441a      	add	r2, r3
 8000666:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800066a:	3305      	adds	r3, #5
 800066c:	7811      	ldrb	r1, [r2, #0]
 800066e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000672:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000676:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000678:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800067c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000680:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000684:	6812      	ldr	r2, [r2, #0]
 8000686:	4413      	add	r3, r2
 8000688:	781a      	ldrb	r2, [r3, #0]
 800068a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800068e:	4413      	add	r3, r2
 8000690:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000694:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000698:	3301      	adds	r3, #1
 800069a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800069e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80006a8:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 80006ac:	8812      	ldrh	r2, [r2, #0]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d8d1      	bhi.n	8000656 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 80006b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006b6:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	3305      	adds	r3, #5
 80006be:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80006c2:	43d2      	mvns	r2, r2
 80006c4:	b2d1      	uxtb	r1, r2
 80006c6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80006ca:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80006ce:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 80006d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006d4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	3306      	adds	r3, #6
 80006dc:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80006e0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80006e4:	2100      	movs	r1, #0
 80006e6:	54d1      	strb	r1, [r2, r3]
     if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 80006e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80006f8:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 80006fc:	8812      	ldrh	r2, [r2, #0]
 80006fe:	3207      	adds	r2, #7
 8000700:	b291      	uxth	r1, r2
 8000702:	f107 0214 	add.w	r2, r7, #20
 8000706:	4610      	mov	r0, r2
 8000708:	4798      	blx	r3
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	e000      	b.n	8000718 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b0c8      	sub	sp, #288	; 0x120
 8000728:	af00      	add	r7, sp, #0
 800072a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800072e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000732:	6018      	str	r0, [r3, #0]
 8000734:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000738:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800073c:	6019      	str	r1, [r3, #0]
 800073e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000742:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000746:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 800074e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000752:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800075e:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 8000762:	8812      	ldrh	r2, [r2, #0]
 8000764:	3207      	adds	r2, #7
 8000766:	b291      	uxth	r1, r2
 8000768:	f107 0214 	add.w	r2, r7, #20
 800076c:	4610      	mov	r0, r2
 800076e:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 8000776:	e019      	b.n	80007ac <PN532_ReadFrame+0x88>
        offset += 1;
 8000778:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800077c:	3301      	adds	r3, #1
 800077e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 8000782:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000786:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	1dda      	adds	r2, r3, #7
 800078e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000792:	429a      	cmp	r2, r3
 8000794:	da0a      	bge.n	80007ac <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8000796:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800079a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	485b      	ldr	r0, [pc, #364]	; (8000910 <PN532_ReadFrame+0x1ec>)
 80007a4:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	e0ab      	b.n	8000904 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 80007ac:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007b0:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80007b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80007b8:	5cd3      	ldrb	r3, [r2, r3]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0dc      	beq.n	8000778 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 80007be:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007c2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80007c6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80007ca:	5cd3      	ldrb	r3, [r2, r3]
 80007cc:	2bff      	cmp	r3, #255	; 0xff
 80007ce:	d00a      	beq.n	80007e6 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 80007d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	484c      	ldr	r0, [pc, #304]	; (8000910 <PN532_ReadFrame+0x1ec>)
 80007de:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	e08e      	b.n	8000904 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 80007e6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007ea:	3301      	adds	r3, #1
 80007ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 80007f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007f4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	1dda      	adds	r2, r3, #7
 80007fc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000800:	429a      	cmp	r2, r3
 8000802:	da0a      	bge.n	800081a <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8000804:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000808:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	4840      	ldr	r0, [pc, #256]	; (8000914 <PN532_ReadFrame+0x1f0>)
 8000812:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	e074      	b.n	8000904 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 800081a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800081e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000822:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000826:	5cd3      	ldrb	r3, [r2, r3]
 8000828:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 800082c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000830:	3301      	adds	r3, #1
 8000832:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000836:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800083a:	5cd2      	ldrb	r2, [r2, r3]
 800083c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000840:	4413      	add	r3, r2
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00a      	beq.n	800085e <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8000848:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800084c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4830      	ldr	r0, [pc, #192]	; (8000918 <PN532_ReadFrame+0x1f4>)
 8000856:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	e052      	b.n	8000904 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 800085e:	2300      	movs	r3, #0
 8000860:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000864:	e014      	b.n	8000890 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000866:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800086a:	1c9a      	adds	r2, r3, #2
 800086c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000870:	4413      	add	r3, r2
 8000872:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000876:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800087a:	5cd2      	ldrb	r2, [r2, r3]
 800087c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000880:	4413      	add	r3, r2
 8000882:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000886:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800088a:	3301      	adds	r3, #1
 800088c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000890:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 8000894:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000898:	429a      	cmp	r2, r3
 800089a:	d2e4      	bcs.n	8000866 <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 800089c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d00a      	beq.n	80008ba <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 80008a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <PN532_ReadFrame+0x1f8>)
 80008b2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	e024      	b.n	8000904 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80008c0:	e018      	b.n	80008f4 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 80008c2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80008c6:	1c9a      	adds	r2, r3, #2
 80008c8:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80008cc:	441a      	add	r2, r3
 80008ce:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80008d2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80008d6:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 80008da:	6809      	ldr	r1, [r1, #0]
 80008dc:	440b      	add	r3, r1
 80008de:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80008e2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80008e6:	5c8a      	ldrb	r2, [r1, r2]
 80008e8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 80008ea:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80008ee:	3301      	adds	r3, #1
 80008f0:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80008f4:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 80008f8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d3e0      	bcc.n	80008c2 <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8000900:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 8000904:	4618      	mov	r0, r3
 8000906:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	08007910 	.word	0x08007910
 8000914:	08007944 	.word	0x08007944
 8000918:	08007960 	.word	0x08007960
 800091c:	08007990 	.word	0x08007990

08000920 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b0c7      	sub	sp, #284	; 0x11c
 8000924:	af00      	add	r7, sp, #0
 8000926:	f507 748c 	add.w	r4, r7, #280	; 0x118
 800092a:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 800092e:	6020      	str	r0, [r4, #0]
 8000930:	4608      	mov	r0, r1
 8000932:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000936:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800093a:	600a      	str	r2, [r1, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000942:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000946:	4602      	mov	r2, r0
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800094e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000952:	460a      	mov	r2, r1
 8000954:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000956:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800095a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800095e:	22d4      	movs	r2, #212	; 0xd4
 8000960:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000962:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800096a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800096e:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800097c:	e012      	b.n	80009a4 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 800097e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000982:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000986:	441a      	add	r2, r3
 8000988:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800098c:	3302      	adds	r3, #2
 800098e:	7811      	ldrb	r1, [r2, #0]
 8000990:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000994:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000998:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 800099a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800099e:	3301      	adds	r3, #1
 80009a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80009a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d8e5      	bhi.n	800097e <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 80009b2:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 80009b6:	3302      	adds	r3, #2
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	f107 0110 	add.w	r1, r7, #16
 80009be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	f7ff fdd8 	bl	800057c <PN532_WriteFrame>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d011      	beq.n	80009f6 <PN532_CallFunction+0xd6>
        pn532->wakeup();
 80009d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	691b      	ldr	r3, [r3, #16]
 80009de:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 80009e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	485b      	ldr	r0, [pc, #364]	; (8000b5c <PN532_CallFunction+0x23c>)
 80009ee:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
 80009f4:	e0ac      	b.n	8000b50 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 80009f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000a06:	4798      	blx	r3
 8000a08:	4603      	mov	r3, r0
 8000a0a:	f083 0301 	eor.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
 8000a18:	e09a      	b.n	8000b50 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8000a1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f107 0210 	add.w	r2, r7, #16
 8000a2a:	2106      	movs	r1, #6
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000a36:	e01c      	b.n	8000a72 <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8000a38:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a3c:	4a48      	ldr	r2, [pc, #288]	; (8000b60 <PN532_CallFunction+0x240>)
 8000a3e:	5cd2      	ldrb	r2, [r2, r3]
 8000a40:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a44:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000a48:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8000a4c:	5ccb      	ldrb	r3, [r1, r3]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d00a      	beq.n	8000a68 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8000a52:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	4841      	ldr	r0, [pc, #260]	; (8000b64 <PN532_CallFunction+0x244>)
 8000a60:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	e073      	b.n	8000b50 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000a68:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000a72:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a76:	2b05      	cmp	r3, #5
 8000a78:	d9de      	bls.n	8000a38 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000a7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000a8a:	4798      	blx	r3
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f083 0301 	eor.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	e058      	b.n	8000b50 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000a9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000aa2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	f107 0110 	add.w	r1, r7, #16
 8000ab0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ab4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	f7ff fe33 	bl	8000724 <PN532_ReadFrame>
 8000abe:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000ac2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2bd5      	cmp	r3, #213	; 0xd5
 8000ace:	d10d      	bne.n	8000aec <PN532_CallFunction+0x1cc>
 8000ad0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ad8:	785b      	ldrb	r3, [r3, #1]
 8000ada:	461a      	mov	r2, r3
 8000adc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ae0:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d00a      	beq.n	8000b02 <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8000aec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000af0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	481b      	ldr	r0, [pc, #108]	; (8000b68 <PN532_CallFunction+0x248>)
 8000afa:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
 8000b00:	e026      	b.n	8000b50 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000b02:	2300      	movs	r3, #0
 8000b04:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000b08:	e015      	b.n	8000b36 <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8000b0a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000b0e:	1c9a      	adds	r2, r3, #2
 8000b10:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000b14:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000b18:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8000b1c:	6809      	ldr	r1, [r1, #0]
 8000b1e:	440b      	add	r3, r1
 8000b20:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000b24:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8000b28:	5c8a      	ldrb	r2, [r1, r2]
 8000b2a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000b2c:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000b30:	3301      	adds	r3, #1
 8000b32:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000b36:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000b40:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000b44:	8812      	ldrh	r2, [r2, #0]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d8df      	bhi.n	8000b0a <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000b4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b4e:	3b02      	subs	r3, #2
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd90      	pop	{r4, r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	080079c4 	.word	0x080079c4
 8000b60:	08007c0c 	.word	0x08007c0c
 8000b64:	080079d8 	.word	0x080079d8
 8000b68:	08007a04 	.word	0x08007a04

08000b6c <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af04      	add	r7, sp, #16
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000b76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b7a:	9302      	str	r3, [sp, #8]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	2300      	movs	r3, #0
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2304      	movs	r3, #4
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	2102      	movs	r1, #2
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fec8 	bl	8000920 <PN532_CallFunction>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b96:	d106      	bne.n	8000ba6 <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <PN532_GetFirmwareVersion+0x44>)
 8000b9e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	e000      	b.n	8000ba8 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	08007a2c 	.word	0x08007a2c

08000bb4 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af04      	add	r7, sp, #16
 8000bba:	6078      	str	r0, [r7, #4]
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    //uint8_t params[] = {0x01, 0x14, 0x01};
    uint8_t params[] = {0x4A, 0x01, 0x00};
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <PN532_SamConfiguration+0x40>)
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	6812      	ldr	r2, [r2, #0]
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	8019      	strh	r1, [r3, #0]
 8000bc8:	3302      	adds	r3, #2
 8000bca:	0c12      	lsrs	r2, r2, #16
 8000bcc:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2300      	movs	r3, #0
 8000be0:	2200      	movs	r2, #0
 8000be2:	2114      	movs	r1, #20
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fe9b 	bl	8000920 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	08007a48 	.word	0x08007a48

08000bf8 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b090      	sub	sp, #64	; 0x40
 8000bfc:	af04      	add	r7, sp, #16
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	4613      	mov	r3, r2
 8000c06:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000c14:	f107 0210 	add.w	r2, r7, #16
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2313      	movs	r3, #19
 8000c28:	214a      	movs	r1, #74	; 0x4a
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff fe78 	bl	8000920 <PN532_CallFunction>
 8000c30:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	da02      	bge.n	8000c3e <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	e02e      	b.n	8000c9c <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000c3e:	7c3b      	ldrb	r3, [r7, #16]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d006      	beq.n	8000c52 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <PN532_ReadPassiveTarget+0xac>)
 8000c4a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	e024      	b.n	8000c9c <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8000c52:	7d7b      	ldrb	r3, [r7, #21]
 8000c54:	2b07      	cmp	r3, #7
 8000c56:	d906      	bls.n	8000c66 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <PN532_ReadPassiveTarget+0xb0>)
 8000c5e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	e01a      	b.n	8000c9c <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c6c:	e010      	b.n	8000c90 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8000c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c72:	1d9a      	adds	r2, r3, #6
 8000c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	440b      	add	r3, r1
 8000c7c:	3230      	adds	r2, #48	; 0x30
 8000c7e:	443a      	add	r2, r7
 8000c80:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000c84:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c90:	7d7b      	ldrb	r3, [r7, #21]
 8000c92:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3e9      	bcc.n	8000c6e <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000c9a:	7d7b      	ldrb	r3, [r7, #21]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3730      	adds	r7, #48	; 0x30
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	08007a4c 	.word	0x08007a4c
 8000ca8:	08007a6c 	.word	0x08007a6c

08000cac <calculate_sha1>:
static uint8_t mrz_key[KEY_SIZE];
static BACKeys session_keys;
static I2C_HandleTypeDef hi2c1;

// Fonctions utilitaires pour le protocole BAC
static void calculate_sha1(const uint8_t* data, size_t length, uint8_t* hash) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b09c      	sub	sp, #112	; 0x70
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
    // Implémentation de SHA-1 (utiliser une bibliothèque crypto comme mbedtls)
    mbedtls_sha1_context ctx;
    mbedtls_sha1_init(&ctx);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fb0b 	bl	80022d8 <mbedtls_sha1_init>
    mbedtls_sha1_starts(&ctx);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fb4e 	bl	8002368 <mbedtls_sha1_starts>
    mbedtls_sha1_update(&ctx, data, length);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	68f9      	ldr	r1, [r7, #12]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 ff08 	bl	8003aea <mbedtls_sha1_update>
    mbedtls_sha1_finish(&ctx, hash);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 f822 	bl	8003d2a <mbedtls_sha1_finish>
    mbedtls_sha1_free(&ctx);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fb01 	bl	80022f2 <mbedtls_sha1_free>
}
 8000cf0:	bf00      	nop
 8000cf2:	3770      	adds	r7, #112	; 0x70
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <calculate_3des>:

static void calculate_3des(uint8_t* input, uint8_t* output, uint8_t* key, int mode) {
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b0e5      	sub	sp, #404	; 0x194
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 8000d02:	f5a4 74c2 	sub.w	r4, r4, #388	; 0x184
 8000d06:	6020      	str	r0, [r4, #0]
 8000d08:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8000d0c:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
 8000d10:	6001      	str	r1, [r0, #0]
 8000d12:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8000d16:	f5a1 71c6 	sub.w	r1, r1, #396	; 0x18c
 8000d1a:	600a      	str	r2, [r1, #0]
 8000d1c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8000d20:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8000d24:	6013      	str	r3, [r2, #0]
    // Implémentation du 3DES (utiliser une bibliothèque crypto comme mbedtls)
    mbedtls_des3_context ctx;
    mbedtls_des3_init(&ctx);
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fa6a 	bl	8001204 <mbedtls_des3_init>

    if (mode == MBEDTLS_DES_ENCRYPT) {
 8000d30:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d34:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d118      	bne.n	8000d70 <calculate_3des+0x78>
        mbedtls_des3_set3key_enc(&ctx, key);
 8000d3e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d42:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000d46:	f107 0210 	add.w	r2, r7, #16
 8000d4a:	6819      	ldr	r1, [r3, #0]
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	f000 fcec 	bl	800172a <mbedtls_des3_set3key_enc>
        mbedtls_des3_crypt_ecb(&ctx, input, output);
 8000d52:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d56:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8000d5a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d5e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000d62:	f107 0010 	add.w	r0, r7, #16
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	6819      	ldr	r1, [r3, #0]
 8000d6a:	f000 fd2f 	bl	80017cc <mbedtls_des3_crypt_ecb>
 8000d6e:	e017      	b.n	8000da0 <calculate_3des+0xa8>
    } else {
        mbedtls_des3_set3key_dec(&ctx, key);
 8000d70:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d74:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000d78:	f107 0210 	add.w	r2, r7, #16
 8000d7c:	6819      	ldr	r1, [r3, #0]
 8000d7e:	4610      	mov	r0, r2
 8000d80:	f000 fcfb 	bl	800177a <mbedtls_des3_set3key_dec>
        mbedtls_des3_crypt_ecb(&ctx, input, output);
 8000d84:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d88:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8000d8c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d90:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000d94:	f107 0010 	add.w	r0, r7, #16
 8000d98:	6812      	ldr	r2, [r2, #0]
 8000d9a:	6819      	ldr	r1, [r3, #0]
 8000d9c:	f000 fd16 	bl	80017cc <mbedtls_des3_crypt_ecb>
    }

    mbedtls_des3_free(&ctx);
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fa3b 	bl	8001220 <mbedtls_des3_free>
}
 8000daa:	bf00      	nop
 8000dac:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd90      	pop	{r4, r7, pc}

08000db4 <calculate_mrz_key>:

// Fonction pour calculer la clé MRZ
static void calculate_mrz_key(const char* CIN_num, const char* birth_date, const char* expiry_date) {
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b091      	sub	sp, #68	; 0x44
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
    uint8_t mrz_info[MRZ_SIZE];
    uint8_t hash[20];

    // Concaténer les informations MRZ
    memcpy(mrz_info, CIN_num, 7);
 8000dc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	68f9      	ldr	r1, [r7, #12]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f005 ffc0 	bl	8006d4e <memcpy>
    memcpy(mrz_info + 7, birth_date, 6);
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	3307      	adds	r3, #7
 8000dd4:	2206      	movs	r2, #6
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 ffb8 	bl	8006d4e <memcpy>
    memcpy(mrz_info + 13, expiry_date, 6);
 8000dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de2:	330d      	adds	r3, #13
 8000de4:	2206      	movs	r2, #6
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f005 ffb0 	bl	8006d4e <memcpy>

    // Calculer le SHA-1
    calculate_sha1(mrz_info, MRZ_SIZE, hash);
 8000dee:	f107 0214 	add.w	r2, r7, #20
 8000df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df6:	2118      	movs	r1, #24
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff57 	bl	8000cac <calculate_sha1>

    // Prendre les 16 premiers octets pour la clé
    memcpy(mrz_key, hash, KEY_SIZE);
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <calculate_mrz_key+0x60>)
 8000e00:	461c      	mov	r4, r3
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000e0c:	bf00      	nop
 8000e0e:	3744      	adds	r7, #68	; 0x44
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	20000088 	.word	0x20000088

08000e18 <derive_session_keys>:

// Fonction pour dériver les clés de session
static void derive_session_keys(uint8_t* k_seed) {
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b093      	sub	sp, #76	; 0x4c
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    uint8_t hash[20];
    uint8_t enc_data[20] = {0};
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
    uint8_t mac_data[20] = {0};
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]

    // Dérivation pour Ksenc
    enc_data[0] = 0x00;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f887 3020 	strb.w	r3, [r7, #32]
    enc_data[1] = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    enc_data[2] = 0x00;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    enc_data[3] = 0x01;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    memcpy(enc_data + 4, k_seed, 16);
 8000e5c:	f107 0320 	add.w	r3, r7, #32
 8000e60:	3304      	adds	r3, #4
 8000e62:	2210      	movs	r2, #16
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f005 ff71 	bl	8006d4e <memcpy>
    calculate_sha1(enc_data, 20, hash);
 8000e6c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	2114      	movs	r1, #20
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff18 	bl	8000cac <calculate_sha1>
    memcpy(session_keys.Ksenc, hash, 16);
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <derive_session_keys+0xbc>)
 8000e7e:	461c      	mov	r4, r3
 8000e80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Dérivation pour Ksmac
    mac_data[0] = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	733b      	strb	r3, [r7, #12]
    mac_data[1] = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	737b      	strb	r3, [r7, #13]
    mac_data[2] = 0x00;
 8000e92:	2300      	movs	r3, #0
 8000e94:	73bb      	strb	r3, [r7, #14]
    mac_data[3] = 0x02;
 8000e96:	2302      	movs	r3, #2
 8000e98:	73fb      	strb	r3, [r7, #15]
    memcpy(mac_data + 4, k_seed, 16);
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f005 ff52 	bl	8006d4e <memcpy>
    calculate_sha1(mac_data, 20, hash);
 8000eaa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	2114      	movs	r1, #20
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fef9 	bl	8000cac <calculate_sha1>
    memcpy(session_keys.Ksmac, hash, 16);
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <derive_session_keys+0xbc>)
 8000ebc:	f103 0410 	add.w	r4, r3, #16
 8000ec0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ec4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000eca:	bf00      	nop
 8000ecc:	374c      	adds	r7, #76	; 0x4c
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd90      	pop	{r4, r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000098 	.word	0x20000098

08000ed8 <perform_bac>:

// Fonction principale pour l'authentification BAC
int perform_bac(PN532* pn532) {
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b0f6      	sub	sp, #472	; 0x1d8
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000ee2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8000ee6:	6018      	str	r0, [r3, #0]
    uint8_t encrypted_challenge[32];
    uint8_t response[MAX_FRAME_SIZE];
    uint8_t cmd_data[40];

    // 1. Génération du challenge aléatoire
    for(int i = 0; i < 8; i++) {
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000eee:	e014      	b.n	8000f1a <perform_bac+0x42>
        rnd_ifd[i] = rand() % 256;
 8000ef0:	f005 fc64 	bl	80067bc <rand>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	425a      	negs	r2, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	bf58      	it	pl
 8000efe:	4253      	negpl	r3, r2
 8000f00:	b2d9      	uxtb	r1, r3
 8000f02:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8000f06:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f0a:	4413      	add	r3, r2
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 8; i++) {
 8000f10:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f14:	3301      	adds	r3, #1
 8000f16:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f1a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f1e:	2b07      	cmp	r3, #7
 8000f20:	dde6      	ble.n	8000ef0 <perform_bac+0x18>
    }

    // 2. Envoi de GET CHALLENGE
    uint8_t get_challenge[] = {0x00, 0x84, 0x00, 0x00, 0x08};
 8000f22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000f26:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8000f2a:	4a55      	ldr	r2, [pc, #340]	; (8001080 <perform_bac+0x1a8>)
 8000f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f30:	6018      	str	r0, [r3, #0]
 8000f32:	3304      	adds	r3, #4
 8000f34:	7019      	strb	r1, [r3, #0]
    if (PN532_CallFunction(&pn532, PN532_COMMAND_INDATAEXCHANGE, response, sizeof(response), get_challenge, sizeof(get_challenge), PN532_DEFAULT_TIMEOUT) <= 0) {
 8000f36:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000f3a:	1d38      	adds	r0, r7, #4
 8000f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f40:	9302      	str	r3, [sp, #8]
 8000f42:	2305      	movs	r3, #5
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f50:	2140      	movs	r1, #64	; 0x40
 8000f52:	f7ff fce5 	bl	8000920 <PN532_CallFunction>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	dc01      	bgt.n	8000f60 <perform_bac+0x88>
        return 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e08a      	b.n	8001076 <perform_bac+0x19e>
    }
    memcpy(rnd_icc, response, 8);
 8000f60:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000f64:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 8000f68:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8000f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f70:	e883 0003 	stmia.w	r3, {r0, r1}

    // 3. Construction de la commande EXTERNAL AUTHENTICATE
    memcpy(cmd_data, rnd_ifd, 8);
 8000f74:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000f78:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8000f82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f86:	e882 0003 	stmia.w	r2, {r0, r1}
    memcpy(cmd_data + 8, rnd_icc, 8);
 8000f8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f8e:	3308      	adds	r3, #8
 8000f90:	461a      	mov	r2, r3
 8000f92:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8000f96:	cb03      	ldmia	r3!, {r0, r1}
 8000f98:	6010      	str	r0, [r2, #0]
 8000f9a:	6051      	str	r1, [r2, #4]
    memcpy(cmd_data + 16, k_ifd, 16);
 8000f9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fa0:	3310      	adds	r3, #16
 8000fa2:	461d      	mov	r5, r3
 8000fa4:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 8000fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000faa:	6028      	str	r0, [r5, #0]
 8000fac:	6069      	str	r1, [r5, #4]
 8000fae:	60aa      	str	r2, [r5, #8]
 8000fb0:	60eb      	str	r3, [r5, #12]

    // 4. Chiffrement du challenge
    calculate_3des(cmd_data, encrypted_challenge, mrz_key, MBEDTLS_DES_ENCRYPT);
 8000fb2:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8000fb6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8000fba:	2301      	movs	r3, #1
 8000fbc:	4a31      	ldr	r2, [pc, #196]	; (8001084 <perform_bac+0x1ac>)
 8000fbe:	f7ff fe9b 	bl	8000cf8 <calculate_3des>

    // 5. Envoi de la commande d'authentification
    uint8_t auth_cmd[40] = {0x00, 0x82, 0x00, 0x00, 0x28};
 8000fc2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000fc6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000fca:	492f      	ldr	r1, [pc, #188]	; (8001088 <perform_bac+0x1b0>)
 8000fcc:	461a      	mov	r2, r3
 8000fce:	6808      	ldr	r0, [r1, #0]
 8000fd0:	6010      	str	r0, [r2, #0]
 8000fd2:	8889      	ldrh	r1, [r1, #4]
 8000fd4:	8091      	strh	r1, [r2, #4]
 8000fd6:	3306      	adds	r3, #6
 8000fd8:	2222      	movs	r2, #34	; 0x22
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f005 fe3b 	bl	8006c58 <memset>
    memcpy(auth_cmd + 5, encrypted_challenge, 32);
 8000fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe6:	3305      	adds	r3, #5
 8000fe8:	461d      	mov	r5, r3
 8000fea:	f507 74c2 	add.w	r4, r7, #388	; 0x184
 8000fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff0:	6028      	str	r0, [r5, #0]
 8000ff2:	6069      	str	r1, [r5, #4]
 8000ff4:	60aa      	str	r2, [r5, #8]
 8000ff6:	60eb      	str	r3, [r5, #12]
 8000ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffa:	6128      	str	r0, [r5, #16]
 8000ffc:	6169      	str	r1, [r5, #20]
 8000ffe:	61aa      	str	r2, [r5, #24]
 8001000:	61eb      	str	r3, [r5, #28]
    if (PN532_CallFunction(&pn532, PN532_COMMAND_INDATAEXCHANGE, response, sizeof(response), auth_cmd, sizeof(auth_cmd), PN532_DEFAULT_TIMEOUT) <= 0) {
 8001002:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001006:	1d38      	adds	r0, r7, #4
 8001008:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2328      	movs	r3, #40	; 0x28
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101c:	2140      	movs	r1, #64	; 0x40
 800101e:	f7ff fc7f 	bl	8000920 <PN532_CallFunction>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	dc01      	bgt.n	800102c <perform_bac+0x154>
        return 0;
 8001028:	2300      	movs	r3, #0
 800102a:	e024      	b.n	8001076 <perform_bac+0x19e>
    }

    // 6. Dérivation des clés de session
    uint8_t k_seed[32];
    memcpy(k_seed, rnd_ifd, 8);
 800102c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001030:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001034:	461a      	mov	r2, r3
 8001036:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800103a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800103e:	e882 0003 	stmia.w	r2, {r0, r1}
    memcpy(k_seed + 8, rnd_icc, 8);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	3308      	adds	r3, #8
 8001048:	461a      	mov	r2, r3
 800104a:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800104e:	cb03      	ldmia	r3!, {r0, r1}
 8001050:	6010      	str	r0, [r2, #0]
 8001052:	6051      	str	r1, [r2, #4]
    memcpy(k_seed + 16, k_ifd, 16);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	3310      	adds	r3, #16
 800105a:	461d      	mov	r5, r3
 800105c:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 8001060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001062:	6028      	str	r0, [r5, #0]
 8001064:	6069      	str	r1, [r5, #4]
 8001066:	60aa      	str	r2, [r5, #8]
 8001068:	60eb      	str	r3, [r5, #12]
    derive_session_keys(k_seed);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fed2 	bl	8000e18 <derive_session_keys>

    return 1;
 8001074:	2301      	movs	r3, #1
}
 8001076:	4618      	mov	r0, r3
 8001078:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 800107c:	46bd      	mov	sp, r7
 800107e:	bdb0      	pop	{r4, r5, r7, pc}
 8001080:	08007a94 	.word	0x08007a94
 8001084:	20000088 	.word	0x20000088
 8001088:	08007a9c 	.word	0x08007a9c

0800108c <CIN_data>:

// Fonction pour lire les données après authentification BAC
int CIN_data(PN532* pn532, uint8_t* data_buffer, size_t* data_length) {
 800108c:	b580      	push	{r7, lr}
 800108e:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8001092:	af04      	add	r7, sp, #16
 8001094:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001098:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800109c:	6018      	str	r0, [r3, #0]
 800109e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80010a2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80010a6:	6019      	str	r1, [r3, #0]
 80010a8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80010ac:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80010b0:	601a      	str	r2, [r3, #0]
    uint8_t cmd[5] = {0x00, 0xB0, 0x00, 0x00, 0x00};  // READ BINARY
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <CIN_data+0x78>)
 80010b4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80010b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010bc:	6018      	str	r0, [r3, #0]
 80010be:	3304      	adds	r3, #4
 80010c0:	7019      	strb	r1, [r3, #0]
    /*if (!apply_secure_messaging(cmd, sizeof(cmd), protected_cmd, &protected_len)) {
        return 0;
    }*/

    // Envoi de la commande protégée
    resp_len = PN532_CallFunction(&pn532, PN532_COMMAND_INDATAEXCHANGE, response, sizeof(response), protected_cmd, protected_len, PN532_DEFAULT_TIMEOUT);
 80010c2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80010cc:	f107 000c 	add.w	r0, r7, #12
 80010d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010d4:	9102      	str	r1, [sp, #8]
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	f7ff fc1c 	bl	8000920 <PN532_CallFunction>
 80010e8:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
    if (resp_len <= 0) {
 80010ec:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	dc01      	bgt.n	80010f8 <CIN_data+0x6c>
        return 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e000      	b.n	80010fa <CIN_data+0x6e>
    // Déchiffrement de la réponse
    /*if (!decrypt_secure_messaging(response, resp_len, data_buffer, data_length)) {
        return 0;
    }*/

    return 1;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	08007aa4 	.word	0x08007aa4

08001108 <read_identity_card>:

// Fonction principale pour initialiser et utiliser le système
int read_identity_card(PN532* pn532, const char* CIN_num, const char* birth_date, const char* expiry_date) {
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b0c7      	sub	sp, #284	; 0x11c
 800110c:	af00      	add	r7, sp, #0
 800110e:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001112:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8001116:	6020      	str	r0, [r4, #0]
 8001118:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800111c:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8001120:	6001      	str	r1, [r0, #0]
 8001122:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001126:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800112a:	600a      	str	r2, [r1, #0]
 800112c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001130:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8001134:	6013      	str	r3, [r2, #0]
    uint8_t data_buffer[MAX_FRAME_SIZE];
    size_t data_length;

    // 1. Calcul de la clé MRZ
    calculate_mrz_key(CIN_num, birth_date, expiry_date);
 8001136:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800113a:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800113e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001142:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8001146:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800114a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	6809      	ldr	r1, [r1, #0]
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	f7ff fe2e 	bl	8000db4 <calculate_mrz_key>

    // 2. Authentification BAC
    if (!perform_bac(&pn532)) {
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff febb 	bl	8000ed8 <perform_bac>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d104      	bne.n	8001172 <read_identity_card+0x6a>
        printf("Échec de l'authentification BAC\n");
 8001168:	4822      	ldr	r0, [pc, #136]	; (80011f4 <read_identity_card+0xec>)
 800116a:	f005 fc95 	bl	8006a98 <puts>
        return 0;
 800116e:	2300      	movs	r3, #0
 8001170:	e03b      	b.n	80011ea <read_identity_card+0xe2>
    }

    // 3. Lecture des données
    if (!CIN_data(&pn532, data_buffer, &data_length)) {
 8001172:	f107 0210 	add.w	r2, r7, #16
 8001176:	f107 0114 	add.w	r1, r7, #20
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff84 	bl	800108c <CIN_data>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d104      	bne.n	8001194 <read_identity_card+0x8c>
        printf("Échec de la lecture des données\n");
 800118a:	481b      	ldr	r0, [pc, #108]	; (80011f8 <read_identity_card+0xf0>)
 800118c:	f005 fc84 	bl	8006a98 <puts>
        return 0;
 8001190:	2300      	movs	r3, #0
 8001192:	e02a      	b.n	80011ea <read_identity_card+0xe2>
    }

    // 4. Traitement des données lues
    printf("Données lues avec succès (%d octets)\n", data_length);
 8001194:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	4816      	ldr	r0, [pc, #88]	; (80011fc <read_identity_card+0xf4>)
 80011a2:	f005 fc0b 	bl	80069bc <iprintf>
    for (size_t i = 0; i < data_length; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80011ac:	e010      	b.n	80011d0 <read_identity_card+0xc8>
        printf("%02X ", data_buffer[i]);
 80011ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011b2:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 80011b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011ba:	4413      	add	r3, r2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	4619      	mov	r1, r3
 80011c0:	480f      	ldr	r0, [pc, #60]	; (8001200 <read_identity_card+0xf8>)
 80011c2:	f005 fbfb 	bl	80069bc <iprintf>
    for (size_t i = 0; i < data_length; i++) {
 80011c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011ca:	3301      	adds	r3, #1
 80011cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80011d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3e5      	bcc.n	80011ae <read_identity_card+0xa6>
    }
    printf("\n");
 80011e2:	200a      	movs	r0, #10
 80011e4:	f005 fbfc 	bl	80069e0 <putchar>

    return 1;
 80011e8:	2301      	movs	r3, #1
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	08007aac 	.word	0x08007aac
 80011f8:	08007ad0 	.word	0x08007ad0
 80011fc:	08007af4 	.word	0x08007af4
 8001200:	08007b1c 	.word	0x08007b1c

08001204 <mbedtls_des3_init>:

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_des_context ) );
}

void mbedtls_des3_init( mbedtls_des3_context *ctx )
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_des3_context ) );
 800120c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001210:	2100      	movs	r1, #0
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f005 fd20 	bl	8006c58 <memset>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <mbedtls_des3_free>:

void mbedtls_des3_free( mbedtls_des3_context *ctx )
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <mbedtls_des3_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_des3_context ) );
 800122e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f001 f83e 	bl	80022b4 <mbedtls_platform_zeroize>
 8001238:	e000      	b.n	800123c <mbedtls_des3_free+0x1c>
        return;
 800123a:	bf00      	nop
}
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <mbedtls_des_setkey>:
    return( 0 );
}

#if !defined(MBEDTLS_DES_SETKEY_ALT)
void mbedtls_des_setkey( uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t X, Y, T;

    GET_UINT32_BE( X, key, 0 );
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	061a      	lsls	r2, r3, #24
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	041b      	lsls	r3, r3, #16
 800125c:	431a      	orrs	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3302      	adds	r3, #2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	4313      	orrs	r3, r2
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	3203      	adds	r2, #3
 800126c:	7812      	ldrb	r2, [r2, #0]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
    GET_UINT32_BE( Y, key, 4 );
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	3304      	adds	r3, #4
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	061a      	lsls	r2, r3, #24
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	3305      	adds	r3, #5
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	041b      	lsls	r3, r3, #16
 8001282:	431a      	orrs	r2, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	3306      	adds	r3, #6
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	4313      	orrs	r3, r2
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	3207      	adds	r2, #7
 8001292:	7812      	ldrb	r2, [r2, #0]
 8001294:	4313      	orrs	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]

    /*
     * Permuted Choice 1
     */
    T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	091a      	lsrs	r2, r3, #4
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4053      	eors	r3, r2
 80012a0:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4053      	eors	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4053      	eors	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
    T =  ((Y      ) ^ X) & 0x10101010;  X ^= T; Y ^= (T      );
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4053      	eors	r3, r2
 80012be:	f003 3310 	and.w	r3, r3, #269488144	; 0x10101010
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	4053      	eors	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	4053      	eors	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]

    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	4a55      	ldr	r2, [pc, #340]	; (8001430 <mbedtls_des_setkey+0x1ec>)
 80012dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e0:	00da      	lsls	r2, r3, #3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	4951      	ldr	r1, [pc, #324]	; (8001430 <mbedtls_des_setkey+0x1ec>)
 80012ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	431a      	orrs	r2, r3
        | (LHs[ (X >> 16) & 0xF] << 1) | (LHs[ (X >> 24) & 0xF ]     )
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	0c1b      	lsrs	r3, r3, #16
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	494c      	ldr	r1, [pc, #304]	; (8001430 <mbedtls_des_setkey+0x1ec>)
 80012fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	431a      	orrs	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	0e1b      	lsrs	r3, r3, #24
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	4948      	ldr	r1, [pc, #288]	; (8001430 <mbedtls_des_setkey+0x1ec>)
 8001310:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001314:	431a      	orrs	r2, r3
        | (LHs[ (X >>  5) & 0xF] << 7) | (LHs[ (X >> 13) & 0xF ] << 6)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	095b      	lsrs	r3, r3, #5
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	4944      	ldr	r1, [pc, #272]	; (8001430 <mbedtls_des_setkey+0x1ec>)
 8001320:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001324:	01db      	lsls	r3, r3, #7
 8001326:	431a      	orrs	r2, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	0b5b      	lsrs	r3, r3, #13
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	493f      	ldr	r1, [pc, #252]	; (8001430 <mbedtls_des_setkey+0x1ec>)
 8001332:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001336:	019b      	lsls	r3, r3, #6
 8001338:	431a      	orrs	r2, r3
        | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	0d5b      	lsrs	r3, r3, #21
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	493b      	ldr	r1, [pc, #236]	; (8001430 <mbedtls_des_setkey+0x1ec>)
 8001344:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001348:	015b      	lsls	r3, r3, #5
 800134a:	431a      	orrs	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	0f5b      	lsrs	r3, r3, #29
 8001350:	4937      	ldr	r1, [pc, #220]	; (8001430 <mbedtls_des_setkey+0x1ec>)
 8001352:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001356:	011b      	lsls	r3, r3, #4
    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]

    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	085b      	lsrs	r3, r3, #1
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	4a33      	ldr	r2, [pc, #204]	; (8001434 <mbedtls_des_setkey+0x1f0>)
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	00da      	lsls	r2, r3, #3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	492f      	ldr	r1, [pc, #188]	; (8001434 <mbedtls_des_setkey+0x1f0>)
 8001376:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 17) & 0xF] << 1) | (RHs[ (Y >> 25) & 0xF ]     )
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	0c5b      	lsrs	r3, r3, #17
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	492b      	ldr	r1, [pc, #172]	; (8001434 <mbedtls_des_setkey+0x1f0>)
 8001388:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	431a      	orrs	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	0e5b      	lsrs	r3, r3, #25
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	4926      	ldr	r1, [pc, #152]	; (8001434 <mbedtls_des_setkey+0x1f0>)
 800139a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800139e:	431a      	orrs	r2, r3
        | (RHs[ (Y >>  4) & 0xF] << 7) | (RHs[ (Y >> 12) & 0xF ] << 6)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f003 030f 	and.w	r3, r3, #15
 80013a8:	4922      	ldr	r1, [pc, #136]	; (8001434 <mbedtls_des_setkey+0x1f0>)
 80013aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013ae:	01db      	lsls	r3, r3, #7
 80013b0:	431a      	orrs	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	0b1b      	lsrs	r3, r3, #12
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	491e      	ldr	r1, [pc, #120]	; (8001434 <mbedtls_des_setkey+0x1f0>)
 80013bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013c0:	019b      	lsls	r3, r3, #6
 80013c2:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 20) & 0xF] << 5) | (RHs[ (Y >> 28) & 0xF ] << 4);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	0d1b      	lsrs	r3, r3, #20
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	4919      	ldr	r1, [pc, #100]	; (8001434 <mbedtls_des_setkey+0x1f0>)
 80013ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013d2:	015b      	lsls	r3, r3, #5
 80013d4:	431a      	orrs	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	0f1b      	lsrs	r3, r3, #28
 80013da:	4916      	ldr	r1, [pc, #88]	; (8001434 <mbedtls_des_setkey+0x1f0>)
 80013dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013e0:	011b      	lsls	r3, r3, #4
    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]

    X &= 0x0FFFFFFF;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80013ec:	613b      	str	r3, [r7, #16]
    Y &= 0x0FFFFFFF;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80013f4:	60fb      	str	r3, [r7, #12]

    /*
     * calculate subkeys
     */
    for( i = 0; i < 16; i++ )
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e113      	b.n	8001624 <mbedtls_des_setkey+0x3e0>
    {
        if( i < 2 || i == 8 || i == 15 )
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	dd05      	ble.n	800140e <mbedtls_des_setkey+0x1ca>
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2b08      	cmp	r3, #8
 8001406:	d002      	beq.n	800140e <mbedtls_des_setkey+0x1ca>
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	d114      	bne.n	8001438 <mbedtls_des_setkey+0x1f4>
        {
            X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	005a      	lsls	r2, r3, #1
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	0edb      	lsrs	r3, r3, #27
 8001416:	4313      	orrs	r3, r2
 8001418:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800141c:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	005a      	lsls	r2, r3, #1
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	0edb      	lsrs	r3, r3, #27
 8001426:	4313      	orrs	r3, r2
 8001428:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e013      	b.n	8001458 <mbedtls_des_setkey+0x214>
 8001430:	08008414 	.word	0x08008414
 8001434:	08008454 	.word	0x08008454
        }
        else
        {
            X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	009a      	lsls	r2, r3, #2
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	0e9b      	lsrs	r3, r3, #26
 8001440:	4313      	orrs	r3, r2
 8001442:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001446:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	009a      	lsls	r2, r3, #2
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	0e9b      	lsrs	r3, r3, #26
 8001450:	4313      	orrs	r3, r2
 8001452:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001456:	60fb      	str	r3, [r7, #12]
        }

        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	f003 5210 	and.w	r2, r3, #603979776	; 0x24000000
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	071b      	lsls	r3, r3, #28
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	431a      	orrs	r2, r3
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	039b      	lsls	r3, r3, #14
 800146e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001472:	431a      	orrs	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	049b      	lsls	r3, r3, #18
 8001478:	f003 7302 	and.w	r3, r3, #34078720	; 0x2080000
 800147c:	431a      	orrs	r2, r3
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	019b      	lsls	r3, r3, #6
 8001482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001486:	431a      	orrs	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	025b      	lsls	r3, r3, #9
 800148c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001490:	431a      	orrs	r2, r3
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149a:	431a      	orrs	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014a4:	431a      	orrs	r2, r3
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	431a      	orrs	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	0a9b      	lsrs	r3, r3, #10
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	431a      	orrs	r2, r3
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	0b5b      	lsrs	r3, r3, #13
 80014be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c2:	431a      	orrs	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014cc:	431a      	orrs	r2, r3
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	019b      	lsls	r3, r3, #6
 80014d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014d6:	431a      	orrs	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	085b      	lsrs	r3, r3, #1
 80014dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e0:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	0b9b      	lsrs	r3, r3, #14
 80014e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ea:	431a      	orrs	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f2:	431a      	orrs	r2, r3
                | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	f003 0320 	and.w	r3, r3, #32
 80014fc:	431a      	orrs	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	0a9b      	lsrs	r3, r3, #10
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	431a      	orrs	r2, r3
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	431a      	orrs	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	0c9b      	lsrs	r3, r3, #18
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	431a      	orrs	r2, r3
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	0e9b      	lsrs	r3, r3, #26
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	ea42 0103 	orr.w	r1, r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	0e1b      	lsrs	r3, r3, #24
 800152c:	f003 0201 	and.w	r2, r3, #1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	1d18      	adds	r0, r3, #4
 8001534:	6078      	str	r0, [r7, #4]
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 8001536:	430a      	orrs	r2, r1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 8001538:	601a      	str	r2, [r3, #0]

        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	03db      	lsls	r3, r3, #15
 800153e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	045b      	lsls	r3, r3, #17
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	431a      	orrs	r2, r3
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	029b      	lsls	r3, r3, #10
 8001550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001554:	431a      	orrs	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	059b      	lsls	r3, r3, #22
 800155a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800155e:	431a      	orrs	r2, r3
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	431a      	orrs	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001572:	431a      	orrs	r2, r3
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	041b      	lsls	r3, r3, #16
 8001578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157c:	431a      	orrs	r2, r3
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	02db      	lsls	r3, r3, #11
 8001582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001586:	431a      	orrs	r2, r3
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001590:	431a      	orrs	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	099b      	lsrs	r3, r3, #6
 8001596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800159a:	431a      	orrs	r2, r3
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	03db      	lsls	r3, r3, #15
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	431a      	orrs	r2, r3
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	431a      	orrs	r2, r3
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b8:	431a      	orrs	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c2:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	0b99      	lsrs	r1, r3, #14
 80015c8:	f640 0308 	movw	r3, #2056	; 0x808
 80015cc:	400b      	ands	r3, r1
 80015ce:	431a      	orrs	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	0a5b      	lsrs	r3, r3, #9
 80015d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d8:	431a      	orrs	r2, r3
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e0:	431a      	orrs	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	01db      	lsls	r3, r3, #7
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	431a      	orrs	r2, r3
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	09db      	lsrs	r3, r3, #7
 80015f0:	f003 0320 	and.w	r3, r3, #32
 80015f4:	431a      	orrs	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	08db      	lsrs	r3, r3, #3
 80015fa:	f003 0311 	and.w	r3, r3, #17
 80015fe:	431a      	orrs	r2, r3
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	ea42 0103 	orr.w	r1, r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	0d5b      	lsrs	r3, r3, #21
 8001610:	f003 0202 	and.w	r2, r3, #2
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	1d18      	adds	r0, r3, #4
 8001618:	6078      	str	r0, [r7, #4]
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 800161a:	430a      	orrs	r2, r1
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800161c:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i++ )
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2b0f      	cmp	r3, #15
 8001628:	f77f aee8 	ble.w	80013fc <mbedtls_des_setkey+0x1b8>
    }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop

0800163c <des3_set3key>:
}

static void des3_set3key( uint32_t esk[96],
                          uint32_t dsk[96],
                          const unsigned char key[24] )
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
    int i;

    mbedtls_des_setkey( esk, key );
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff fdfa 	bl	8001244 <mbedtls_des_setkey>
    mbedtls_des_setkey( dsk + 32, key +  8 );
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3308      	adds	r3, #8
 800165a:	4619      	mov	r1, r3
 800165c:	4610      	mov	r0, r2
 800165e:	f7ff fdf1 	bl	8001244 <mbedtls_des_setkey>
    mbedtls_des_setkey( esk + 64, key + 16 );
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3310      	adds	r3, #16
 800166c:	4619      	mov	r1, r3
 800166e:	4610      	mov	r0, r2
 8001670:	f7ff fde8 	bl	8001244 <mbedtls_des_setkey>

    for( i = 0; i < 32; i += 2 )
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e04f      	b.n	800171a <des3_set3key+0xde>
    {
        dsk[i     ] = esk[94 - i];
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	441a      	add	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	440b      	add	r3, r1
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	601a      	str	r2, [r3, #0]
        dsk[i +  1] = esk[95 - i];
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	441a      	add	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	440b      	add	r3, r1
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	601a      	str	r2, [r3, #0]

        esk[i + 32] = dsk[62 - i];
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	441a      	add	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3320      	adds	r3, #32
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	68f9      	ldr	r1, [r7, #12]
 80016c0:	440b      	add	r3, r1
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	601a      	str	r2, [r3, #0]
        esk[i + 33] = dsk[63 - i];
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	441a      	add	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3321      	adds	r3, #33	; 0x21
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	68f9      	ldr	r1, [r7, #12]
 80016da:	440b      	add	r3, r1
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	601a      	str	r2, [r3, #0]

        dsk[i + 64] = esk[30 - i];
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f1c3 031e 	rsb	r3, r3, #30
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	441a      	add	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3340      	adds	r3, #64	; 0x40
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	68b9      	ldr	r1, [r7, #8]
 80016f4:	440b      	add	r3, r1
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	601a      	str	r2, [r3, #0]
        dsk[i + 65] = esk[31 - i];
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f1c3 031f 	rsb	r3, r3, #31
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	441a      	add	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3341      	adds	r3, #65	; 0x41
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	440b      	add	r3, r1
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 32; i += 2 )
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3302      	adds	r3, #2
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b1f      	cmp	r3, #31
 800171e:	ddac      	ble.n	800167a <des3_set3key+0x3e>
    }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <mbedtls_des3_set3key_enc>:
/*
 * Triple-DES key schedule (168-bit, encryption)
 */
int mbedtls_des3_set3key_enc( mbedtls_des3_context *ctx,
                      const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3] )
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b0e2      	sub	sp, #392	; 0x188
 800172e:	af00      	add	r7, sp, #0
 8001730:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001734:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001738:	6018      	str	r0, [r3, #0]
 800173a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800173e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001742:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key( ctx->sk, sk, key );
 8001744:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001748:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001752:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001756:	f107 0108 	add.w	r1, r7, #8
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	f7ff ff6e 	bl	800163c <des3_set3key>
    mbedtls_platform_zeroize( sk,  sizeof( sk ) );
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001768:	4618      	mov	r0, r3
 800176a:	f000 fda3 	bl	80022b4 <mbedtls_platform_zeroize>

    return( 0 );
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <mbedtls_des3_set3key_dec>:
/*
 * Triple-DES key schedule (168-bit, decryption)
 */
int mbedtls_des3_set3key_dec( mbedtls_des3_context *ctx,
                      const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3] )
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b0e2      	sub	sp, #392	; 0x188
 800177e:	af00      	add	r7, sp, #0
 8001780:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001784:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001788:	6018      	str	r0, [r3, #0]
 800178a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800178e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001792:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key( sk, ctx->sk, key );
 8001794:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001798:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800179c:	6819      	ldr	r1, [r3, #0]
 800179e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80017a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80017a6:	f107 0008 	add.w	r0, r7, #8
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	f7ff ff46 	bl	800163c <des3_set3key>
    mbedtls_platform_zeroize( sk,  sizeof( sk ) );
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fd7b 	bl	80022b4 <mbedtls_platform_zeroize>

    return( 0 );
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <mbedtls_des3_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES3_CRYPT_ECB_ALT)
int mbedtls_des3_crypt_ecb( mbedtls_des3_context *ctx,
                     const unsigned char input[8],
                     unsigned char output[8] )
{
 80017cc:	b480      	push	{r7}
 80017ce:	b08b      	sub	sp, #44	; 0x2c
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	61bb      	str	r3, [r7, #24]

    GET_UINT32_BE( X, input, 0 );
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	061a      	lsls	r2, r3, #24
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	3301      	adds	r3, #1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	041b      	lsls	r3, r3, #16
 80017ea:	431a      	orrs	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	3302      	adds	r3, #2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	4313      	orrs	r3, r2
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	3203      	adds	r2, #3
 80017fa:	7812      	ldrb	r2, [r2, #0]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	623b      	str	r3, [r7, #32]
    GET_UINT32_BE( Y, input, 4 );
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	3304      	adds	r3, #4
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	061a      	lsls	r2, r3, #24
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3305      	adds	r3, #5
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	041b      	lsls	r3, r3, #16
 8001810:	431a      	orrs	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	3306      	adds	r3, #6
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	4313      	orrs	r3, r2
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	3207      	adds	r2, #7
 8001820:	7812      	ldrb	r2, [r2, #0]
 8001822:	4313      	orrs	r3, r2
 8001824:	61fb      	str	r3, [r7, #28]

    DES_IP( X, Y );
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	091a      	lsrs	r2, r3, #4
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	4053      	eors	r3, r2
 800182e:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	4053      	eors	r3, r2
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	6a3a      	ldr	r2, [r7, #32]
 8001842:	4053      	eors	r3, r2
 8001844:	623b      	str	r3, [r7, #32]
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	0c1a      	lsrs	r2, r3, #16
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	4053      	eors	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	4053      	eors	r3, r2
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	041b      	lsls	r3, r3, #16
 800185e:	6a3a      	ldr	r2, [r7, #32]
 8001860:	4053      	eors	r3, r2
 8001862:	623b      	str	r3, [r7, #32]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	089a      	lsrs	r2, r3, #2
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	4053      	eors	r3, r2
 800186c:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	6a3a      	ldr	r2, [r7, #32]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	4053      	eors	r3, r2
 8001878:	623b      	str	r3, [r7, #32]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	4053      	eors	r3, r2
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	0a1a      	lsrs	r2, r3, #8
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	4053      	eors	r3, r2
 800188c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	6a3a      	ldr	r2, [r7, #32]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	4053      	eors	r3, r2
 8001898:	623b      	str	r3, [r7, #32]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	4053      	eors	r3, r2
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	6a3a      	ldr	r2, [r7, #32]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	4053      	eors	r3, r2
 80018b2:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	4053      	eors	r3, r2
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	6a3a      	ldr	r2, [r7, #32]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	4053      	eors	r3, r2
 80018c6:	623b      	str	r3, [r7, #32]
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80018ce:	623b      	str	r3, [r7, #32]

    for( i = 0; i < 8; i++ )
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
 80018d4:	e0a6      	b.n	8001a24 <mbedtls_des3_crypt_ecb+0x258>
    {
        DES_ROUND( Y, X );
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	1d1a      	adds	r2, r3, #4
 80018da:	61ba      	str	r2, [r7, #24]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	4053      	eors	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018ea:	4aa9      	ldr	r2, [pc, #676]	; (8001b90 <mbedtls_des3_crypt_ecb+0x3c4>)
 80018ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f8:	49a6      	ldr	r1, [pc, #664]	; (8001b94 <mbedtls_des3_crypt_ecb+0x3c8>)
 80018fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018fe:	405a      	eors	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	0c1b      	lsrs	r3, r3, #16
 8001904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001908:	49a3      	ldr	r1, [pc, #652]	; (8001b98 <mbedtls_des3_crypt_ecb+0x3cc>)
 800190a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800190e:	405a      	eors	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	0e1b      	lsrs	r3, r3, #24
 8001914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001918:	49a0      	ldr	r1, [pc, #640]	; (8001b9c <mbedtls_des3_crypt_ecb+0x3d0>)
 800191a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800191e:	4053      	eors	r3, r2
 8001920:	6a3a      	ldr	r2, [r7, #32]
 8001922:	4053      	eors	r3, r2
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	1d1a      	adds	r2, r3, #4
 800192a:	61ba      	str	r2, [r7, #24]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	ea4f 1333 	mov.w	r3, r3, ror #4
 8001934:	4053      	eors	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800193e:	4a98      	ldr	r2, [pc, #608]	; (8001ba0 <mbedtls_des3_crypt_ecb+0x3d4>)
 8001940:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800194c:	4995      	ldr	r1, [pc, #596]	; (8001ba4 <mbedtls_des3_crypt_ecb+0x3d8>)
 800194e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001952:	405a      	eors	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800195c:	4992      	ldr	r1, [pc, #584]	; (8001ba8 <mbedtls_des3_crypt_ecb+0x3dc>)
 800195e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001962:	405a      	eors	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	0e1b      	lsrs	r3, r3, #24
 8001968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800196c:	498f      	ldr	r1, [pc, #572]	; (8001bac <mbedtls_des3_crypt_ecb+0x3e0>)
 800196e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001972:	4053      	eors	r3, r2
 8001974:	6a3a      	ldr	r2, [r7, #32]
 8001976:	4053      	eors	r3, r2
 8001978:	623b      	str	r3, [r7, #32]
        DES_ROUND( X, Y );
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	1d1a      	adds	r2, r3, #4
 800197e:	61ba      	str	r2, [r7, #24]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6a3a      	ldr	r2, [r7, #32]
 8001984:	4053      	eors	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800198e:	4a80      	ldr	r2, [pc, #512]	; (8001b90 <mbedtls_des3_crypt_ecb+0x3c4>)
 8001990:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800199c:	497d      	ldr	r1, [pc, #500]	; (8001b94 <mbedtls_des3_crypt_ecb+0x3c8>)
 800199e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019a2:	405a      	eors	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	0c1b      	lsrs	r3, r3, #16
 80019a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ac:	497a      	ldr	r1, [pc, #488]	; (8001b98 <mbedtls_des3_crypt_ecb+0x3cc>)
 80019ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019b2:	405a      	eors	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	0e1b      	lsrs	r3, r3, #24
 80019b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019bc:	4977      	ldr	r1, [pc, #476]	; (8001b9c <mbedtls_des3_crypt_ecb+0x3d0>)
 80019be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019c2:	4053      	eors	r3, r2
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	4053      	eors	r3, r2
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1d1a      	adds	r2, r3, #4
 80019ce:	61ba      	str	r2, [r7, #24]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	ea4f 1333 	mov.w	r3, r3, ror #4
 80019d8:	4053      	eors	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e2:	4a6f      	ldr	r2, [pc, #444]	; (8001ba0 <mbedtls_des3_crypt_ecb+0x3d4>)
 80019e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f0:	496c      	ldr	r1, [pc, #432]	; (8001ba4 <mbedtls_des3_crypt_ecb+0x3d8>)
 80019f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019f6:	405a      	eors	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	0c1b      	lsrs	r3, r3, #16
 80019fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a00:	4969      	ldr	r1, [pc, #420]	; (8001ba8 <mbedtls_des3_crypt_ecb+0x3dc>)
 8001a02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a06:	405a      	eors	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	0e1b      	lsrs	r3, r3, #24
 8001a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a10:	4966      	ldr	r1, [pc, #408]	; (8001bac <mbedtls_des3_crypt_ecb+0x3e0>)
 8001a12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a16:	4053      	eors	r3, r2
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	4053      	eors	r3, r2
 8001a1c:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < 8; i++ )
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	3301      	adds	r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	2b07      	cmp	r3, #7
 8001a28:	f77f af55 	ble.w	80018d6 <mbedtls_des3_crypt_ecb+0x10a>
    }

    for( i = 0; i < 8; i++ )
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a30:	e0a6      	b.n	8001b80 <mbedtls_des3_crypt_ecb+0x3b4>
    {
        DES_ROUND( X, Y );
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	1d1a      	adds	r2, r3, #4
 8001a36:	61ba      	str	r2, [r7, #24]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a3a      	ldr	r2, [r7, #32]
 8001a3c:	4053      	eors	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a46:	4a52      	ldr	r2, [pc, #328]	; (8001b90 <mbedtls_des3_crypt_ecb+0x3c4>)
 8001a48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a54:	494f      	ldr	r1, [pc, #316]	; (8001b94 <mbedtls_des3_crypt_ecb+0x3c8>)
 8001a56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a5a:	405a      	eors	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	0c1b      	lsrs	r3, r3, #16
 8001a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a64:	494c      	ldr	r1, [pc, #304]	; (8001b98 <mbedtls_des3_crypt_ecb+0x3cc>)
 8001a66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a6a:	405a      	eors	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	0e1b      	lsrs	r3, r3, #24
 8001a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a74:	4949      	ldr	r1, [pc, #292]	; (8001b9c <mbedtls_des3_crypt_ecb+0x3d0>)
 8001a76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a7a:	4053      	eors	r3, r2
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	4053      	eors	r3, r2
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	1d1a      	adds	r2, r3, #4
 8001a86:	61ba      	str	r2, [r7, #24]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	ea4f 1333 	mov.w	r3, r3, ror #4
 8001a90:	4053      	eors	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9a:	4a41      	ldr	r2, [pc, #260]	; (8001ba0 <mbedtls_des3_crypt_ecb+0x3d4>)
 8001a9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa8:	493e      	ldr	r1, [pc, #248]	; (8001ba4 <mbedtls_des3_crypt_ecb+0x3d8>)
 8001aaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001aae:	405a      	eors	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	0c1b      	lsrs	r3, r3, #16
 8001ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab8:	493b      	ldr	r1, [pc, #236]	; (8001ba8 <mbedtls_des3_crypt_ecb+0x3dc>)
 8001aba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001abe:	405a      	eors	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	0e1b      	lsrs	r3, r3, #24
 8001ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ac8:	4938      	ldr	r1, [pc, #224]	; (8001bac <mbedtls_des3_crypt_ecb+0x3e0>)
 8001aca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ace:	4053      	eors	r3, r2
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	4053      	eors	r3, r2
 8001ad4:	61fb      	str	r3, [r7, #28]
        DES_ROUND( Y, X );
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	1d1a      	adds	r2, r3, #4
 8001ada:	61ba      	str	r2, [r7, #24]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	4053      	eors	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aea:	4a29      	ldr	r2, [pc, #164]	; (8001b90 <mbedtls_des3_crypt_ecb+0x3c4>)
 8001aec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af8:	4926      	ldr	r1, [pc, #152]	; (8001b94 <mbedtls_des3_crypt_ecb+0x3c8>)
 8001afa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001afe:	405a      	eors	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	0c1b      	lsrs	r3, r3, #16
 8001b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b08:	4923      	ldr	r1, [pc, #140]	; (8001b98 <mbedtls_des3_crypt_ecb+0x3cc>)
 8001b0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b0e:	405a      	eors	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	0e1b      	lsrs	r3, r3, #24
 8001b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b18:	4920      	ldr	r1, [pc, #128]	; (8001b9c <mbedtls_des3_crypt_ecb+0x3d0>)
 8001b1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b1e:	4053      	eors	r3, r2
 8001b20:	6a3a      	ldr	r2, [r7, #32]
 8001b22:	4053      	eors	r3, r2
 8001b24:	623b      	str	r3, [r7, #32]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1d1a      	adds	r2, r3, #4
 8001b2a:	61ba      	str	r2, [r7, #24]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	ea4f 1333 	mov.w	r3, r3, ror #4
 8001b34:	4053      	eors	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b3e:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <mbedtls_des3_crypt_ecb+0x3d4>)
 8001b40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b4c:	4915      	ldr	r1, [pc, #84]	; (8001ba4 <mbedtls_des3_crypt_ecb+0x3d8>)
 8001b4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b52:	405a      	eors	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b5c:	4912      	ldr	r1, [pc, #72]	; (8001ba8 <mbedtls_des3_crypt_ecb+0x3dc>)
 8001b5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b62:	405a      	eors	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	0e1b      	lsrs	r3, r3, #24
 8001b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b6c:	490f      	ldr	r1, [pc, #60]	; (8001bac <mbedtls_des3_crypt_ecb+0x3e0>)
 8001b6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b72:	4053      	eors	r3, r2
 8001b74:	6a3a      	ldr	r2, [r7, #32]
 8001b76:	4053      	eors	r3, r2
 8001b78:	623b      	str	r3, [r7, #32]
    for( i = 0; i < 8; i++ )
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	2b07      	cmp	r3, #7
 8001b84:	f77f af55 	ble.w	8001a32 <mbedtls_des3_crypt_ecb+0x266>
    }

    for( i = 0; i < 8; i++ )
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8c:	e0b7      	b.n	8001cfe <mbedtls_des3_crypt_ecb+0x532>
 8001b8e:	bf00      	nop
 8001b90:	08008314 	.word	0x08008314
 8001b94:	08008114 	.word	0x08008114
 8001b98:	08007f14 	.word	0x08007f14
 8001b9c:	08007d14 	.word	0x08007d14
 8001ba0:	08008214 	.word	0x08008214
 8001ba4:	08008014 	.word	0x08008014
 8001ba8:	08007e14 	.word	0x08007e14
 8001bac:	08007c14 	.word	0x08007c14
    {
        DES_ROUND( Y, X );
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	1d1a      	adds	r2, r3, #4
 8001bb4:	61ba      	str	r2, [r7, #24]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	4053      	eors	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bc4:	4a94      	ldr	r2, [pc, #592]	; (8001e18 <mbedtls_des3_crypt_ecb+0x64c>)
 8001bc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd2:	4992      	ldr	r1, [pc, #584]	; (8001e1c <mbedtls_des3_crypt_ecb+0x650>)
 8001bd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bd8:	405a      	eors	r2, r3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	0c1b      	lsrs	r3, r3, #16
 8001bde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001be2:	498f      	ldr	r1, [pc, #572]	; (8001e20 <mbedtls_des3_crypt_ecb+0x654>)
 8001be4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001be8:	405a      	eors	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	0e1b      	lsrs	r3, r3, #24
 8001bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bf2:	498c      	ldr	r1, [pc, #560]	; (8001e24 <mbedtls_des3_crypt_ecb+0x658>)
 8001bf4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bf8:	4053      	eors	r3, r2
 8001bfa:	6a3a      	ldr	r2, [r7, #32]
 8001bfc:	4053      	eors	r3, r2
 8001bfe:	623b      	str	r3, [r7, #32]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	1d1a      	adds	r2, r3, #4
 8001c04:	61ba      	str	r2, [r7, #24]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	ea4f 1333 	mov.w	r3, r3, ror #4
 8001c0e:	4053      	eors	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c18:	4a83      	ldr	r2, [pc, #524]	; (8001e28 <mbedtls_des3_crypt_ecb+0x65c>)
 8001c1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c26:	4981      	ldr	r1, [pc, #516]	; (8001e2c <mbedtls_des3_crypt_ecb+0x660>)
 8001c28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c2c:	405a      	eors	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c36:	497e      	ldr	r1, [pc, #504]	; (8001e30 <mbedtls_des3_crypt_ecb+0x664>)
 8001c38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c3c:	405a      	eors	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	0e1b      	lsrs	r3, r3, #24
 8001c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c46:	497b      	ldr	r1, [pc, #492]	; (8001e34 <mbedtls_des3_crypt_ecb+0x668>)
 8001c48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c4c:	4053      	eors	r3, r2
 8001c4e:	6a3a      	ldr	r2, [r7, #32]
 8001c50:	4053      	eors	r3, r2
 8001c52:	623b      	str	r3, [r7, #32]
        DES_ROUND( X, Y );
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	1d1a      	adds	r2, r3, #4
 8001c58:	61ba      	str	r2, [r7, #24]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6a3a      	ldr	r2, [r7, #32]
 8001c5e:	4053      	eors	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c68:	4a6b      	ldr	r2, [pc, #428]	; (8001e18 <mbedtls_des3_crypt_ecb+0x64c>)
 8001c6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c76:	4969      	ldr	r1, [pc, #420]	; (8001e1c <mbedtls_des3_crypt_ecb+0x650>)
 8001c78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c7c:	405a      	eors	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c86:	4966      	ldr	r1, [pc, #408]	; (8001e20 <mbedtls_des3_crypt_ecb+0x654>)
 8001c88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c8c:	405a      	eors	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	0e1b      	lsrs	r3, r3, #24
 8001c92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c96:	4963      	ldr	r1, [pc, #396]	; (8001e24 <mbedtls_des3_crypt_ecb+0x658>)
 8001c98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c9c:	4053      	eors	r3, r2
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	4053      	eors	r3, r2
 8001ca2:	61fb      	str	r3, [r7, #28]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	1d1a      	adds	r2, r3, #4
 8001ca8:	61ba      	str	r2, [r7, #24]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	ea4f 1333 	mov.w	r3, r3, ror #4
 8001cb2:	4053      	eors	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cbc:	4a5a      	ldr	r2, [pc, #360]	; (8001e28 <mbedtls_des3_crypt_ecb+0x65c>)
 8001cbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cca:	4958      	ldr	r1, [pc, #352]	; (8001e2c <mbedtls_des3_crypt_ecb+0x660>)
 8001ccc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cd0:	405a      	eors	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	0c1b      	lsrs	r3, r3, #16
 8001cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cda:	4955      	ldr	r1, [pc, #340]	; (8001e30 <mbedtls_des3_crypt_ecb+0x664>)
 8001cdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ce0:	405a      	eors	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	0e1b      	lsrs	r3, r3, #24
 8001ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cea:	4952      	ldr	r1, [pc, #328]	; (8001e34 <mbedtls_des3_crypt_ecb+0x668>)
 8001cec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cf0:	4053      	eors	r3, r2
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	4053      	eors	r3, r2
 8001cf6:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < 8; i++ )
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	2b07      	cmp	r3, #7
 8001d02:	f77f af55 	ble.w	8001bb0 <mbedtls_des3_crypt_ecb+0x3e4>
    }

    DES_FP( Y, X );
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	ea4f 0373 	mov.w	r3, r3, ror #1
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	4053      	eors	r3, r2
 8001d14:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	4053      	eors	r3, r2
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	6a3a      	ldr	r2, [r7, #32]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	4053      	eors	r3, r2
 8001d28:	623b      	str	r3, [r7, #32]
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	ea4f 0373 	mov.w	r3, r3, ror #1
 8001d30:	623b      	str	r3, [r7, #32]
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	0a1a      	lsrs	r2, r3, #8
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	4053      	eors	r3, r2
 8001d3a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	4053      	eors	r3, r2
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	6a3a      	ldr	r2, [r7, #32]
 8001d4e:	4053      	eors	r3, r2
 8001d50:	623b      	str	r3, [r7, #32]
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	089a      	lsrs	r2, r3, #2
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	4053      	eors	r3, r2
 8001d5a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	4053      	eors	r3, r2
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	6a3a      	ldr	r2, [r7, #32]
 8001d6e:	4053      	eors	r3, r2
 8001d70:	623b      	str	r3, [r7, #32]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	0c1a      	lsrs	r2, r3, #16
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	4053      	eors	r3, r2
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	6a3a      	ldr	r2, [r7, #32]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	4053      	eors	r3, r2
 8001d84:	623b      	str	r3, [r7, #32]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	4053      	eors	r3, r2
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	091a      	lsrs	r2, r3, #4
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	4053      	eors	r3, r2
 8001d98:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	6a3a      	ldr	r2, [r7, #32]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	4053      	eors	r3, r2
 8001da4:	623b      	str	r3, [r7, #32]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	4053      	eors	r3, r2
 8001dae:	61fb      	str	r3, [r7, #28]

    PUT_UINT32_BE( Y, output, 0 );
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	0e1b      	lsrs	r3, r3, #24
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	0c1a      	lsrs	r2, r3, #16
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	0a1a      	lsrs	r2, r3, #8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3302      	adds	r3, #2
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3303      	adds	r3, #3
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X, output, 4 );
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	0e1a      	lsrs	r2, r3, #24
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3304      	adds	r3, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	0c1a      	lsrs	r2, r3, #16
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3305      	adds	r3, #5
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	0a1a      	lsrs	r2, r3, #8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3306      	adds	r3, #6
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3307      	adds	r3, #7
 8001e04:	6a3a      	ldr	r2, [r7, #32]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	372c      	adds	r7, #44	; 0x2c
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	08008314 	.word	0x08008314
 8001e1c:	08008114 	.word	0x08008114
 8001e20:	08007f14 	.word	0x08007f14
 8001e24:	08007d14 	.word	0x08007d14
 8001e28:	08008214 	.word	0x08008214
 8001e2c:	08008014 	.word	0x08008014
 8001e30:	08007e14 	.word	0x08007e14
 8001e34:	08007c14 	.word	0x08007c14

08001e38 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e44:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001e50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e54:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001e58:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00b      	beq.n	8001e78 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001e60:	e000      	b.n	8001e64 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001e62:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001e64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f9      	beq.n	8001e62 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001e6e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001e78:	687b      	ldr	r3, [r7, #4]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b0ce      	sub	sp, #312	; 0x138
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t buff[255];
  uint8_t uid[MIFARE_UID_MAX_LENGTH];
  int32_t uid_len = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* USER CODE END 1 */
  uint8_t indx = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e9a:	f002 fa1f 	bl	80042dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e9e:	f000 f8b7 	bl	8002010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ea2:	f000 f977 	bl	8002194 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ea6:	f000 f94b 	bl	8002140 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001eaa:	f000 f91b 	bl	80020e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  const char* CIN_num = "BM38477";
 8001eae:	4b4b      	ldr	r3, [pc, #300]	; (8001fdc <main+0x154>)
 8001eb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  const char* birth_date = "000920";     // Format YYMMDD
 8001eb4:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <main+0x158>)
 8001eb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  const char* expiry_date = "310913";    // Format YYMMDD
 8001eba:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <main+0x15c>)
 8001ebc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Start \r\n");
 8001ec0:	4849      	ldr	r0, [pc, #292]	; (8001fe8 <main+0x160>)
 8001ec2:	f004 fde9 	bl	8006a98 <puts>
  PN532 pn532;

  PN532_I2C_Init(&pn532);
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 f815 	bl	8003ef8 <PN532_I2C_Init>
  PN532_GetFirmwareVersion(&pn532, buff);
 8001ece:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fe48 	bl	8000b6c <PN532_GetFirmwareVersion>
  if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK) {
 8001edc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fe41 	bl	8000b6c <PN532_GetFirmwareVersion>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d116      	bne.n	8001f1e <main+0x96>
     printf("Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
 8001ef0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ef4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	4619      	mov	r1, r3
 8001efc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001f00:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f04:	789b      	ldrb	r3, [r3, #2]
 8001f06:	461a      	mov	r2, r3
 8001f08:	4838      	ldr	r0, [pc, #224]	; (8001fec <main+0x164>)
 8001f0a:	f004 fd57 	bl	80069bc <iprintf>
  }
  else {
     return -1;
  }
  PN532_SamConfiguration(&pn532);
 8001f0e:	463b      	mov	r3, r7
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fe4f 	bl	8000bb4 <PN532_SamConfiguration>
  printf("Waiting for RFID/NFC card...\r\n");
 8001f16:	4836      	ldr	r0, [pc, #216]	; (8001ff0 <main+0x168>)
 8001f18:	f004 fdbe 	bl	8006a98 <puts>
 8001f1c:	e002      	b.n	8001f24 <main+0x9c>
     return -1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e056      	b.n	8001fd2 <main+0x14a>
  while (1)
  {
    /* USER CODE END WHILE */
	uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8001f24:	f107 0118 	add.w	r1, r7, #24
 8001f28:	4638      	mov	r0, r7
 8001f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f7fe fe62 	bl	8000bf8 <PN532_ReadPassiveTarget>
 8001f34:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	if (uid_len == PN532_STATUS_ERROR) {
 8001f38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d103      	bne.n	8001f4a <main+0xc2>
	  	printf("Don't found card \n");
 8001f42:	482c      	ldr	r0, [pc, #176]	; (8001ff4 <main+0x16c>)
 8001f44:	f004 fda8 	bl	8006a98 <puts>
 8001f48:	e024      	b.n	8001f94 <main+0x10c>
	} else {
		indx++;
 8001f4a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	    printf("Found card with UID: ");
 8001f54:	4828      	ldr	r0, [pc, #160]	; (8001ff8 <main+0x170>)
 8001f56:	f004 fd31 	bl	80069bc <iprintf>
	    for (uint8_t i = 0; i < uid_len; i++) {
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 8001f60:	e00f      	b.n	8001f82 <main+0xfa>
	  	    printf("%02x ", uid[i]);
 8001f62:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8001f66:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001f6a:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	4619      	mov	r1, r3
 8001f72:	4822      	ldr	r0, [pc, #136]	; (8001ffc <main+0x174>)
 8001f74:	f004 fd22 	bl	80069bc <iprintf>
	    for (uint8_t i = 0; i < uid_len; i++) {
 8001f78:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 8001f82:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8001f86:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	dce9      	bgt.n	8001f62 <main+0xda>
	    }
	  	printf("\r\n");
 8001f8e:	481c      	ldr	r0, [pc, #112]	; (8002000 <main+0x178>)
 8001f90:	f004 fd82 	bl	8006a98 <puts>
	  	   //break;
	}
	if(indx > 0){
 8001f94:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0c3      	beq.n	8001f24 <main+0x9c>
	printf("read data ... \n");
 8001f9c:	4819      	ldr	r0, [pc, #100]	; (8002004 <main+0x17c>)
 8001f9e:	f004 fd7b 	bl	8006a98 <puts>
	// Tentative de lecture de la carte
	if (read_identity_card(&pn532, CIN_num, birth_date, expiry_date) == 1) {
 8001fa2:	4638      	mov	r0, r7
 8001fa4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001fa8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001fac:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001fb0:	f7ff f8aa 	bl	8001108 <read_identity_card>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d103      	bne.n	8001fc2 <main+0x13a>
	    printf("Lecture réussie !\n");
 8001fba:	4813      	ldr	r0, [pc, #76]	; (8002008 <main+0x180>)
 8001fbc:	f004 fd6c 	bl	8006a98 <puts>
 8001fc0:	e002      	b.n	8001fc8 <main+0x140>
	} else {
	    printf("Échec de la lecture\n");
 8001fc2:	4812      	ldr	r0, [pc, #72]	; (800200c <main+0x184>)
 8001fc4:	f004 fd68 	bl	8006a98 <puts>
	}

	HAL_Delay(1000); // Attente avant nouvelle tentative
 8001fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fcc:	f002 f9f8 	bl	80043c0 <HAL_Delay>
	uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8001fd0:	e7a8      	b.n	8001f24 <main+0x9c>
	}
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	08007b24 	.word	0x08007b24
 8001fe0:	08007b2c 	.word	0x08007b2c
 8001fe4:	08007b34 	.word	0x08007b34
 8001fe8:	08007b3c 	.word	0x08007b3c
 8001fec:	08007b44 	.word	0x08007b44
 8001ff0:	08007b70 	.word	0x08007b70
 8001ff4:	08007b90 	.word	0x08007b90
 8001ff8:	08007ba4 	.word	0x08007ba4
 8001ffc:	08007bbc 	.word	0x08007bbc
 8002000:	08007bc4 	.word	0x08007bc4
 8002004:	08007bc8 	.word	0x08007bc8
 8002008:	08007bd8 	.word	0x08007bd8
 800200c:	08007bec 	.word	0x08007bec

08002010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b094      	sub	sp, #80	; 0x50
 8002014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002016:	f107 0320 	add.w	r3, r7, #32
 800201a:	2230      	movs	r2, #48	; 0x30
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f004 fe1a 	bl	8006c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <SystemClock_Config+0xcc>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	4a27      	ldr	r2, [pc, #156]	; (80020dc <SystemClock_Config+0xcc>)
 800203e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002042:	6413      	str	r3, [r2, #64]	; 0x40
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <SystemClock_Config+0xcc>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <SystemClock_Config+0xd0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a21      	ldr	r2, [pc, #132]	; (80020e0 <SystemClock_Config+0xd0>)
 800205a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <SystemClock_Config+0xd0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800206c:	2302      	movs	r3, #2
 800206e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002070:	2301      	movs	r3, #1
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002074:	2310      	movs	r3, #16
 8002076:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002078:	2302      	movs	r3, #2
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800207c:	2300      	movs	r3, #0
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002080:	2310      	movs	r3, #16
 8002082:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002084:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002088:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800208a:	2304      	movs	r3, #4
 800208c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800208e:	2304      	movs	r3, #4
 8002090:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002092:	f107 0320 	add.w	r3, r7, #32
 8002096:	4618      	mov	r0, r3
 8002098:	f003 fc34 	bl	8005904 <HAL_RCC_OscConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80020a2:	f000 f901 	bl	80022a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a6:	230f      	movs	r3, #15
 80020a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020aa:	2302      	movs	r3, #2
 80020ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	2102      	movs	r1, #2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f003 fe96 	bl	8005df4 <HAL_RCC_ClockConfig>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020ce:	f000 f8eb 	bl	80022a8 <Error_Handler>
  }
}
 80020d2:	bf00      	nop
 80020d4:	3750      	adds	r7, #80	; 0x50
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40007000 	.word	0x40007000

080020e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_I2C1_Init+0x50>)
 80020ea:	4a13      	ldr	r2, [pc, #76]	; (8002138 <MX_I2C1_Init+0x54>)
 80020ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_I2C1_Init+0x50>)
 80020f0:	4a12      	ldr	r2, [pc, #72]	; (800213c <MX_I2C1_Init+0x58>)
 80020f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_I2C1_Init+0x50>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MX_I2C1_Init+0x50>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_I2C1_Init+0x50>)
 8002102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002106:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <MX_I2C1_Init+0x50>)
 800210a:	2200      	movs	r2, #0
 800210c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_I2C1_Init+0x50>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <MX_I2C1_Init+0x50>)
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <MX_I2C1_Init+0x50>)
 800211c:	2200      	movs	r2, #0
 800211e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <MX_I2C1_Init+0x50>)
 8002122:	f002 fbf5 	bl	8004910 <HAL_I2C_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800212c:	f000 f8bc 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200000b8 	.word	0x200000b8
 8002138:	40005400 	.word	0x40005400
 800213c:	000186a0 	.word	0x000186a0

08002140 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <MX_USART2_UART_Init+0x50>)
 8002148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800214c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002166:	220c      	movs	r2, #12
 8002168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002178:	f004 f85c 	bl	8006234 <HAL_UART_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002182:	f000 f891 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2000010c 	.word	0x2000010c
 8002190:	40004400 	.word	0x40004400

08002194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <MX_GPIO_Init+0xd0>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a2c      	ldr	r2, [pc, #176]	; (8002264 <MX_GPIO_Init+0xd0>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <MX_GPIO_Init+0xd0>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <MX_GPIO_Init+0xd0>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a25      	ldr	r2, [pc, #148]	; (8002264 <MX_GPIO_Init+0xd0>)
 80021d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b23      	ldr	r3, [pc, #140]	; (8002264 <MX_GPIO_Init+0xd0>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <MX_GPIO_Init+0xd0>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a1e      	ldr	r2, [pc, #120]	; (8002264 <MX_GPIO_Init+0xd0>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <MX_GPIO_Init+0xd0>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <MX_GPIO_Init+0xd0>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a17      	ldr	r2, [pc, #92]	; (8002264 <MX_GPIO_Init+0xd0>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <MX_GPIO_Init+0xd0>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_Led_GPIO_Port, G_Led_Pin, GPIO_PIN_SET);
 800221a:	2201      	movs	r2, #1
 800221c:	2120      	movs	r1, #32
 800221e:	4812      	ldr	r0, [pc, #72]	; (8002268 <MX_GPIO_Init+0xd4>)
 8002220:	f002 fb5c 	bl	80048dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800222a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800222e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	480c      	ldr	r0, [pc, #48]	; (800226c <MX_GPIO_Init+0xd8>)
 800223c:	f002 f9ca 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : G_Led_Pin */
  GPIO_InitStruct.Pin = G_Led_Pin;
 8002240:	2320      	movs	r3, #32
 8002242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002244:	2301      	movs	r3, #1
 8002246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_Led_GPIO_Port, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4804      	ldr	r0, [pc, #16]	; (8002268 <MX_GPIO_Init+0xd4>)
 8002258:	f002 f9bc 	bl	80045d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800225c:	bf00      	nop
 800225e:	3728      	adds	r7, #40	; 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000
 800226c:	40020800 	.word	0x40020800

08002270 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e009      	b.n	8002296 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar((*ptr++));
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	60ba      	str	r2, [r7, #8]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fdd4 	bl	8001e38 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	dbf1      	blt.n	8002282 <_write+0x12>
  }
  return len;
 800229e:	687b      	ldr	r3, [r7, #4]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ac:	b672      	cpsid	i
}
 80022ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <Error_Handler+0x8>
	...

080022b4 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <mbedtls_platform_zeroize+0x20>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	2100      	movs	r1, #0
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000000 	.word	0x20000000

080022d8 <mbedtls_sha1_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
    SHA1_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 80022e0:	225c      	movs	r2, #92	; 0x5c
 80022e2:	2100      	movs	r1, #0
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f004 fcb7 	bl	8006c58 <memset>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <mbedtls_sha1_free>:

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <mbedtls_sha1_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
 8002300:	215c      	movs	r1, #92	; 0x5c
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ffd6 	bl	80022b4 <mbedtls_platform_zeroize>
 8002308:	e000      	b.n	800230c <mbedtls_sha1_free+0x1a>
        return;
 800230a:	bf00      	nop
}
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <mbedtls_sha1_starts_ret+0x40>)
 800232c:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a09      	ldr	r2, [pc, #36]	; (8002358 <mbedtls_sha1_starts_ret+0x44>)
 8002332:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a09      	ldr	r2, [pc, #36]	; (800235c <mbedtls_sha1_starts_ret+0x48>)
 8002338:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a08      	ldr	r2, [pc, #32]	; (8002360 <mbedtls_sha1_starts_ret+0x4c>)
 800233e:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <mbedtls_sha1_starts_ret+0x50>)
 8002344:	619a      	str	r2, [r3, #24]

    return( 0 );
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	67452301 	.word	0x67452301
 8002358:	efcdab89 	.word	0xefcdab89
 800235c:	98badcfe 	.word	0x98badcfe
 8002360:	10325476 	.word	0x10325476
 8002364:	c3d2e1f0 	.word	0xc3d2e1f0

08002368 <mbedtls_sha1_starts>:

#if !defined(MBEDTLS_DEPRECATED_REMOVED)
void mbedtls_sha1_starts( mbedtls_sha1_context *ctx )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
    mbedtls_sha1_starts_ret( ctx );
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ffcf 	bl	8002314 <mbedtls_sha1_starts_ret>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8002380:	b480      	push	{r7}
 8002382:	b099      	sub	sp, #100	; 0x64
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	061a      	lsls	r2, r3, #24
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	3301      	adds	r3, #1
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	041b      	lsls	r3, r3, #16
 8002398:	431a      	orrs	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	3302      	adds	r3, #2
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	4313      	orrs	r3, r2
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	3203      	adds	r2, #3
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60bb      	str	r3, [r7, #8]
    GET_UINT32_BE( W[ 1], data,  4 );
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	3304      	adds	r3, #4
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	061a      	lsls	r2, r3, #24
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	3305      	adds	r3, #5
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	431a      	orrs	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	3306      	adds	r3, #6
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	4313      	orrs	r3, r2
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	3207      	adds	r2, #7
 80023ce:	7812      	ldrb	r2, [r2, #0]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
    GET_UINT32_BE( W[ 2], data,  8 );
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	3308      	adds	r3, #8
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	061a      	lsls	r2, r3, #24
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	3309      	adds	r3, #9
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	041b      	lsls	r3, r3, #16
 80023e4:	431a      	orrs	r2, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	330a      	adds	r3, #10
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	4313      	orrs	r3, r2
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	320b      	adds	r2, #11
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
    GET_UINT32_BE( W[ 3], data, 12 );
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	330c      	adds	r3, #12
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	061a      	lsls	r2, r3, #24
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	330d      	adds	r3, #13
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	041b      	lsls	r3, r3, #16
 800240a:	431a      	orrs	r2, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	330e      	adds	r3, #14
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	4313      	orrs	r3, r2
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	320f      	adds	r2, #15
 800241a:	7812      	ldrb	r2, [r2, #0]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
    GET_UINT32_BE( W[ 4], data, 16 );
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3310      	adds	r3, #16
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	061a      	lsls	r2, r3, #24
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	3311      	adds	r3, #17
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	041b      	lsls	r3, r3, #16
 8002430:	431a      	orrs	r2, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	3312      	adds	r3, #18
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	4313      	orrs	r3, r2
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	3213      	adds	r2, #19
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
    GET_UINT32_BE( W[ 5], data, 20 );
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	3314      	adds	r3, #20
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	061a      	lsls	r2, r3, #24
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	3315      	adds	r3, #21
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	041b      	lsls	r3, r3, #16
 8002456:	431a      	orrs	r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	3316      	adds	r3, #22
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	4313      	orrs	r3, r2
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	3217      	adds	r2, #23
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	4313      	orrs	r3, r2
 800246a:	61fb      	str	r3, [r7, #28]
    GET_UINT32_BE( W[ 6], data, 24 );
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	3318      	adds	r3, #24
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	061a      	lsls	r2, r3, #24
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	3319      	adds	r3, #25
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	431a      	orrs	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	331a      	adds	r3, #26
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	4313      	orrs	r3, r2
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	321b      	adds	r2, #27
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	4313      	orrs	r3, r2
 8002490:	623b      	str	r3, [r7, #32]
    GET_UINT32_BE( W[ 7], data, 28 );
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	331c      	adds	r3, #28
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	061a      	lsls	r2, r3, #24
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	331d      	adds	r3, #29
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	041b      	lsls	r3, r3, #16
 80024a2:	431a      	orrs	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	331e      	adds	r3, #30
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	4313      	orrs	r3, r2
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	321f      	adds	r2, #31
 80024b2:	7812      	ldrb	r2, [r2, #0]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_BE( W[ 8], data, 32 );
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3320      	adds	r3, #32
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	061a      	lsls	r2, r3, #24
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	3321      	adds	r3, #33	; 0x21
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	431a      	orrs	r2, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	3322      	adds	r3, #34	; 0x22
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	4313      	orrs	r3, r2
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	3223      	adds	r2, #35	; 0x23
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_BE( W[ 9], data, 36 );
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	3324      	adds	r3, #36	; 0x24
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	061a      	lsls	r2, r3, #24
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	3325      	adds	r3, #37	; 0x25
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	041b      	lsls	r3, r3, #16
 80024ee:	431a      	orrs	r2, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	3326      	adds	r3, #38	; 0x26
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	4313      	orrs	r3, r2
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	3227      	adds	r2, #39	; 0x27
 80024fe:	7812      	ldrb	r2, [r2, #0]
 8002500:	4313      	orrs	r3, r2
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_BE( W[10], data, 40 );
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	3328      	adds	r3, #40	; 0x28
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	061a      	lsls	r2, r3, #24
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	3329      	adds	r3, #41	; 0x29
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	041b      	lsls	r3, r3, #16
 8002514:	431a      	orrs	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	332a      	adds	r3, #42	; 0x2a
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	4313      	orrs	r3, r2
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	322b      	adds	r2, #43	; 0x2b
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	4313      	orrs	r3, r2
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
    GET_UINT32_BE( W[11], data, 44 );
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	332c      	adds	r3, #44	; 0x2c
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	061a      	lsls	r2, r3, #24
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	332d      	adds	r3, #45	; 0x2d
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	431a      	orrs	r2, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	332e      	adds	r3, #46	; 0x2e
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	4313      	orrs	r3, r2
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	322f      	adds	r2, #47	; 0x2f
 800254a:	7812      	ldrb	r2, [r2, #0]
 800254c:	4313      	orrs	r3, r2
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
    GET_UINT32_BE( W[12], data, 48 );
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	3330      	adds	r3, #48	; 0x30
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	061a      	lsls	r2, r3, #24
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	3331      	adds	r3, #49	; 0x31
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	3332      	adds	r3, #50	; 0x32
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	4313      	orrs	r3, r2
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	3233      	adds	r2, #51	; 0x33
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	63bb      	str	r3, [r7, #56]	; 0x38
    GET_UINT32_BE( W[13], data, 52 );
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	3334      	adds	r3, #52	; 0x34
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	061a      	lsls	r2, r3, #24
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	3335      	adds	r3, #53	; 0x35
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	431a      	orrs	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	3336      	adds	r3, #54	; 0x36
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	4313      	orrs	r3, r2
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	3237      	adds	r2, #55	; 0x37
 8002596:	7812      	ldrb	r2, [r2, #0]
 8002598:	4313      	orrs	r3, r2
 800259a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GET_UINT32_BE( W[14], data, 56 );
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	3338      	adds	r3, #56	; 0x38
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	061a      	lsls	r2, r3, #24
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	3339      	adds	r3, #57	; 0x39
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	041b      	lsls	r3, r3, #16
 80025ac:	431a      	orrs	r2, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	333a      	adds	r3, #58	; 0x3a
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	4313      	orrs	r3, r2
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	323b      	adds	r2, #59	; 0x3b
 80025bc:	7812      	ldrb	r2, [r2, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	643b      	str	r3, [r7, #64]	; 0x40
    GET_UINT32_BE( W[15], data, 60 );
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	333c      	adds	r3, #60	; 0x3c
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	061a      	lsls	r2, r3, #24
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	333d      	adds	r3, #61	; 0x3d
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	333e      	adds	r3, #62	; 0x3e
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	4313      	orrs	r3, r2
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	323f      	adds	r2, #63	; 0x3f
 80025e2:	7812      	ldrb	r2, [r2, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	647b      	str	r3, [r7, #68]	; 0x44
    {                                                           \
        (e) += S((a),5) + F((b),(c),(d)) + K + (x);             \
        (b) = S((b),30);                                        \
    } while( 0 )

    A = ctx->state[0];
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    B = ctx->state[1];
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	65bb      	str	r3, [r7, #88]	; 0x58
    C = ctx->state[2];
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	657b      	str	r3, [r7, #84]	; 0x54
    D = ctx->state[3];
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	653b      	str	r3, [r7, #80]	; 0x50
    E = ctx->state[4];
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	64fb      	str	r3, [r7, #76]	; 0x4c

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 8002606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002608:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800260c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800260e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002610:	4059      	eors	r1, r3
 8002612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002614:	4019      	ands	r1, r3
 8002616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002618:	404b      	eors	r3, r1
 800261a:	441a      	add	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	441a      	add	r2, r3
 8002620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002622:	441a      	add	r2, r3
 8002624:	4ba9      	ldr	r3, [pc, #676]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 8002626:	4413      	add	r3, r2
 8002628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800262a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800262c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002630:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, W[1]  );
 8002632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002634:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002638:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800263a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263c:	4059      	eors	r1, r3
 800263e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002640:	4019      	ands	r1, r3
 8002642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002644:	404b      	eors	r3, r1
 8002646:	441a      	add	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	441a      	add	r2, r3
 800264c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800264e:	441a      	add	r2, r3
 8002650:	4b9e      	ldr	r3, [pc, #632]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 8002652:	4413      	add	r3, r2
 8002654:	653b      	str	r3, [r7, #80]	; 0x50
 8002656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002658:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800265c:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, W[2]  );
 800265e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002660:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002664:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002668:	4059      	eors	r1, r3
 800266a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266c:	4019      	ands	r1, r3
 800266e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002670:	404b      	eors	r3, r1
 8002672:	441a      	add	r2, r3
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	441a      	add	r2, r3
 8002678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267a:	441a      	add	r2, r3
 800267c:	4b93      	ldr	r3, [pc, #588]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 800267e:	4413      	add	r3, r2
 8002680:	657b      	str	r3, [r7, #84]	; 0x54
 8002682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002684:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002688:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, W[3]  );
 800268a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002690:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002694:	4059      	eors	r1, r3
 8002696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002698:	4019      	ands	r1, r3
 800269a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800269c:	404b      	eors	r3, r1
 800269e:	441a      	add	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	441a      	add	r2, r3
 80026a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026a6:	441a      	add	r2, r3
 80026a8:	4b88      	ldr	r3, [pc, #544]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 80026aa:	4413      	add	r3, r2
 80026ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80026ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80026b4:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, W[4]  );
 80026b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80026bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80026be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c0:	4059      	eors	r1, r3
 80026c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c4:	4019      	ands	r1, r3
 80026c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c8:	404b      	eors	r3, r1
 80026ca:	441a      	add	r2, r3
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	441a      	add	r2, r3
 80026d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d2:	441a      	add	r2, r3
 80026d4:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 80026d6:	4413      	add	r3, r2
 80026d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026dc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80026e0:	657b      	str	r3, [r7, #84]	; 0x54
    P( A, B, C, D, E, W[5]  );
 80026e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80026e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ec:	4059      	eors	r1, r3
 80026ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f0:	4019      	ands	r1, r3
 80026f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f4:	404b      	eors	r3, r1
 80026f6:	441a      	add	r2, r3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	441a      	add	r2, r3
 80026fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026fe:	441a      	add	r2, r3
 8002700:	4b72      	ldr	r3, [pc, #456]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 8002702:	4413      	add	r3, r2
 8002704:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002708:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800270c:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, W[6]  );
 800270e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002710:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002714:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002718:	4059      	eors	r1, r3
 800271a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271c:	4019      	ands	r1, r3
 800271e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002720:	404b      	eors	r3, r1
 8002722:	441a      	add	r2, r3
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	441a      	add	r2, r3
 8002728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272a:	441a      	add	r2, r3
 800272c:	4b67      	ldr	r3, [pc, #412]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 800272e:	4413      	add	r3, r2
 8002730:	653b      	str	r3, [r7, #80]	; 0x50
 8002732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002734:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002738:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, W[7]  );
 800273a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002740:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002744:	4059      	eors	r1, r3
 8002746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002748:	4019      	ands	r1, r3
 800274a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800274c:	404b      	eors	r3, r1
 800274e:	441a      	add	r2, r3
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	441a      	add	r2, r3
 8002754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002756:	441a      	add	r2, r3
 8002758:	4b5c      	ldr	r3, [pc, #368]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 800275a:	4413      	add	r3, r2
 800275c:	657b      	str	r3, [r7, #84]	; 0x54
 800275e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002760:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002764:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, W[8]  );
 8002766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002768:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800276c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800276e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002770:	4059      	eors	r1, r3
 8002772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002774:	4019      	ands	r1, r3
 8002776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002778:	404b      	eors	r3, r1
 800277a:	441a      	add	r2, r3
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	441a      	add	r2, r3
 8002780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002782:	441a      	add	r2, r3
 8002784:	4b51      	ldr	r3, [pc, #324]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 8002786:	4413      	add	r3, r2
 8002788:	65bb      	str	r3, [r7, #88]	; 0x58
 800278a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002790:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, W[9]  );
 8002792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002794:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002798:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800279a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800279c:	4059      	eors	r1, r3
 800279e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a0:	4019      	ands	r1, r3
 80027a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a4:	404b      	eors	r3, r1
 80027a6:	441a      	add	r2, r3
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	441a      	add	r2, r3
 80027ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ae:	441a      	add	r2, r3
 80027b0:	4b46      	ldr	r3, [pc, #280]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 80027b2:	4413      	add	r3, r2
 80027b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80027bc:	657b      	str	r3, [r7, #84]	; 0x54
    P( A, B, C, D, E, W[10] );
 80027be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80027c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c8:	4059      	eors	r1, r3
 80027ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027cc:	4019      	ands	r1, r3
 80027ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d0:	404b      	eors	r3, r1
 80027d2:	441a      	add	r2, r3
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	441a      	add	r2, r3
 80027d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027da:	441a      	add	r2, r3
 80027dc:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 80027de:	4413      	add	r3, r2
 80027e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027e4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80027e8:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, W[11] );
 80027ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ec:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80027f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80027f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f4:	4059      	eors	r1, r3
 80027f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f8:	4019      	ands	r1, r3
 80027fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fc:	404b      	eors	r3, r1
 80027fe:	441a      	add	r2, r3
 8002800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002802:	441a      	add	r2, r3
 8002804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002806:	441a      	add	r2, r3
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 800280a:	4413      	add	r3, r2
 800280c:	653b      	str	r3, [r7, #80]	; 0x50
 800280e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002810:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002814:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, W[12] );
 8002816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002818:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800281c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800281e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002820:	4059      	eors	r1, r3
 8002822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002824:	4019      	ands	r1, r3
 8002826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002828:	404b      	eors	r3, r1
 800282a:	441a      	add	r2, r3
 800282c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282e:	441a      	add	r2, r3
 8002830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002832:	441a      	add	r2, r3
 8002834:	4b25      	ldr	r3, [pc, #148]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 8002836:	4413      	add	r3, r2
 8002838:	657b      	str	r3, [r7, #84]	; 0x54
 800283a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800283c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002840:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, W[13] );
 8002842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002844:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002848:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800284a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284c:	4059      	eors	r1, r3
 800284e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002850:	4019      	ands	r1, r3
 8002852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002854:	404b      	eors	r3, r1
 8002856:	441a      	add	r2, r3
 8002858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285a:	441a      	add	r2, r3
 800285c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800285e:	441a      	add	r2, r3
 8002860:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 8002862:	4413      	add	r3, r2
 8002864:	65bb      	str	r3, [r7, #88]	; 0x58
 8002866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002868:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800286c:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, W[14] );
 800286e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002870:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002874:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002878:	4059      	eors	r1, r3
 800287a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287c:	4019      	ands	r1, r3
 800287e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002880:	404b      	eors	r3, r1
 8002882:	441a      	add	r2, r3
 8002884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002886:	441a      	add	r2, r3
 8002888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288a:	441a      	add	r2, r3
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 800288e:	4413      	add	r3, r2
 8002890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002894:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002898:	657b      	str	r3, [r7, #84]	; 0x54
    P( A, B, C, D, E, W[15] );
 800289a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800289c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80028a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a4:	4059      	eors	r1, r3
 80028a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a8:	4019      	ands	r1, r3
 80028aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ac:	404b      	eors	r3, r1
 80028ae:	441a      	add	r2, r3
 80028b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b2:	441a      	add	r2, r3
 80028b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b6:	441a      	add	r2, r3
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <mbedtls_internal_sha1_process+0x54c>)
 80028ba:	4413      	add	r3, r2
 80028bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80028c4:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, R(16) );
 80028c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028c8:	e002      	b.n	80028d0 <mbedtls_internal_sha1_process+0x550>
 80028ca:	bf00      	nop
 80028cc:	5a827999 	.word	0x5a827999
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	405a      	eors	r2, r3
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	405a      	eors	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4053      	eors	r3, r2
 80028dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80028de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80028e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80028e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e8:	4059      	eors	r1, r3
 80028ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ec:	4019      	ands	r1, r3
 80028ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f0:	404b      	eors	r3, r1
 80028f2:	441a      	add	r2, r3
 80028f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	441a      	add	r2, r3
 8002900:	4ba5      	ldr	r3, [pc, #660]	; (8002b98 <mbedtls_internal_sha1_process+0x818>)
 8002902:	4413      	add	r3, r2
 8002904:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002906:	4413      	add	r3, r2
 8002908:	653b      	str	r3, [r7, #80]	; 0x50
 800290a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002910:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, R(17) );
 8002912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002916:	405a      	eors	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	405a      	eors	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4053      	eors	r3, r2
 8002920:	64bb      	str	r3, [r7, #72]	; 0x48
 8002922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002924:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002928:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800292a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292c:	4059      	eors	r1, r3
 800292e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002930:	4019      	ands	r1, r3
 8002932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002934:	404b      	eors	r3, r1
 8002936:	441a      	add	r2, r3
 8002938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800293a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	441a      	add	r2, r3
 8002944:	4b94      	ldr	r3, [pc, #592]	; (8002b98 <mbedtls_internal_sha1_process+0x818>)
 8002946:	4413      	add	r3, r2
 8002948:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800294a:	4413      	add	r3, r2
 800294c:	657b      	str	r3, [r7, #84]	; 0x54
 800294e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002950:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002954:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, R(18) );
 8002956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295a:	405a      	eors	r2, r3
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	405a      	eors	r2, r3
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4053      	eors	r3, r2
 8002964:	64bb      	str	r3, [r7, #72]	; 0x48
 8002966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002968:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800296c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800296e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002970:	4059      	eors	r1, r3
 8002972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002974:	4019      	ands	r1, r3
 8002976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002978:	404b      	eors	r3, r1
 800297a:	441a      	add	r2, r3
 800297c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	441a      	add	r2, r3
 8002988:	4b83      	ldr	r3, [pc, #524]	; (8002b98 <mbedtls_internal_sha1_process+0x818>)
 800298a:	4413      	add	r3, r2
 800298c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800298e:	4413      	add	r3, r2
 8002990:	65bb      	str	r3, [r7, #88]	; 0x58
 8002992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002994:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002998:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, R(19) );
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299e:	405a      	eors	r2, r3
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	405a      	eors	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	4053      	eors	r3, r2
 80029a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80029aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ac:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80029b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80029b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b4:	4059      	eors	r1, r3
 80029b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b8:	4019      	ands	r1, r3
 80029ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029bc:	404b      	eors	r3, r1
 80029be:	441a      	add	r2, r3
 80029c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	441a      	add	r2, r3
 80029cc:	4b72      	ldr	r3, [pc, #456]	; (8002b98 <mbedtls_internal_sha1_process+0x818>)
 80029ce:	4413      	add	r3, r2
 80029d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029d2:	4413      	add	r3, r2
 80029d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80029dc:	657b      	str	r3, [r7, #84]	; 0x54
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e2:	405a      	eors	r2, r3
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	405a      	eors	r2, r3
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	4053      	eors	r3, r2
 80029ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80029ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80029f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80029f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f8:	4059      	eors	r1, r3
 80029fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029fc:	404b      	eors	r3, r1
 80029fe:	441a      	add	r2, r3
 8002a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a02:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	441a      	add	r2, r3
 8002a0c:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <mbedtls_internal_sha1_process+0x81c>)
 8002a0e:	4413      	add	r3, r2
 8002a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a12:	4413      	add	r3, r2
 8002a14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a18:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002a1c:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, R(21) );
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a22:	405a      	eors	r2, r3
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	405a      	eors	r2, r3
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	4053      	eors	r3, r2
 8002a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a30:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002a34:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a38:	4059      	eors	r1, r3
 8002a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3c:	404b      	eors	r3, r1
 8002a3e:	441a      	add	r2, r3
 8002a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a42:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	441a      	add	r2, r3
 8002a4c:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <mbedtls_internal_sha1_process+0x81c>)
 8002a4e:	4413      	add	r3, r2
 8002a50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a52:	4413      	add	r3, r2
 8002a54:	653b      	str	r3, [r7, #80]	; 0x50
 8002a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a58:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, R(22) );
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a62:	405a      	eors	r2, r3
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	405a      	eors	r2, r3
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	4053      	eors	r3, r2
 8002a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a70:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002a74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a78:	4059      	eors	r1, r3
 8002a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7c:	404b      	eors	r3, r1
 8002a7e:	441a      	add	r2, r3
 8002a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a82:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002a86:	623b      	str	r3, [r7, #32]
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	441a      	add	r2, r3
 8002a8c:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <mbedtls_internal_sha1_process+0x81c>)
 8002a8e:	4413      	add	r3, r2
 8002a90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a92:	4413      	add	r3, r2
 8002a94:	657b      	str	r3, [r7, #84]	; 0x54
 8002a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a98:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, R(23) );
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa2:	405a      	eors	r2, r3
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa6:	405a      	eors	r2, r3
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	4053      	eors	r3, r2
 8002aac:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002ab4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab8:	4059      	eors	r1, r3
 8002aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002abc:	404b      	eors	r3, r1
 8002abe:	441a      	add	r2, r3
 8002ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	441a      	add	r2, r3
 8002acc:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <mbedtls_internal_sha1_process+0x81c>)
 8002ace:	4413      	add	r3, r2
 8002ad0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ad2:	4413      	add	r3, r2
 8002ad4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002adc:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, R(24) );
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	405a      	eors	r2, r3
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	405a      	eors	r2, r3
 8002ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aea:	4053      	eors	r3, r2
 8002aec:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af8:	4059      	eors	r1, r3
 8002afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afc:	404b      	eors	r3, r1
 8002afe:	441a      	add	r2, r3
 8002b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b02:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	441a      	add	r2, r3
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <mbedtls_internal_sha1_process+0x81c>)
 8002b0e:	4413      	add	r3, r2
 8002b10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b12:	4413      	add	r3, r2
 8002b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b18:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002b1c:	657b      	str	r3, [r7, #84]	; 0x54
    P( A, B, C, D, E, R(25) );
 8002b1e:	6a3a      	ldr	r2, [r7, #32]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	405a      	eors	r2, r3
 8002b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b26:	405a      	eors	r2, r3
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	4053      	eors	r3, r2
 8002b2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b30:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002b34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b38:	4059      	eors	r1, r3
 8002b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3c:	404b      	eors	r3, r1
 8002b3e:	441a      	add	r2, r3
 8002b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b42:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	441a      	add	r2, r3
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <mbedtls_internal_sha1_process+0x81c>)
 8002b4e:	4413      	add	r3, r2
 8002b50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b52:	4413      	add	r3, r2
 8002b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b58:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002b5c:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, R(26) );
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	405a      	eors	r2, r3
 8002b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b66:	405a      	eors	r2, r3
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	4053      	eors	r3, r2
 8002b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b70:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002b74:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b78:	4059      	eors	r1, r3
 8002b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7c:	404b      	eors	r3, r1
 8002b7e:	441a      	add	r2, r3
 8002b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b82:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	441a      	add	r2, r3
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <mbedtls_internal_sha1_process+0x81c>)
 8002b8e:	4413      	add	r3, r2
 8002b90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b92:	4413      	add	r3, r2
 8002b94:	653b      	str	r3, [r7, #80]	; 0x50
 8002b96:	e003      	b.n	8002ba0 <mbedtls_internal_sha1_process+0x820>
 8002b98:	5a827999 	.word	0x5a827999
 8002b9c:	6ed9eba1 	.word	0x6ed9eba1
 8002ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, R(27) );
 8002ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	405a      	eors	r2, r3
 8002bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb0:	405a      	eors	r2, r3
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb4:	4053      	eors	r3, r2
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bba:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002bbe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc2:	4059      	eors	r1, r3
 8002bc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bc6:	404b      	eors	r3, r1
 8002bc8:	441a      	add	r2, r3
 8002bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bcc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd4:	441a      	add	r2, r3
 8002bd6:	4ba6      	ldr	r3, [pc, #664]	; (8002e70 <mbedtls_internal_sha1_process+0xaf0>)
 8002bd8:	4413      	add	r3, r2
 8002bda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bdc:	4413      	add	r3, r2
 8002bde:	657b      	str	r3, [r7, #84]	; 0x54
 8002be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, R(28) );
 8002be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	405a      	eors	r2, r3
 8002bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf0:	405a      	eors	r2, r3
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf4:	4053      	eors	r3, r2
 8002bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfa:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002bfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c02:	4059      	eors	r1, r3
 8002c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c06:	404b      	eors	r3, r1
 8002c08:	441a      	add	r2, r3
 8002c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002c10:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c14:	441a      	add	r2, r3
 8002c16:	4b96      	ldr	r3, [pc, #600]	; (8002e70 <mbedtls_internal_sha1_process+0xaf0>)
 8002c18:	4413      	add	r3, r2
 8002c1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c1c:	4413      	add	r3, r2
 8002c1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c22:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002c26:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, R(29) );
 8002c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	405a      	eors	r2, r3
 8002c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c30:	405a      	eors	r2, r3
 8002c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c34:	4053      	eors	r3, r2
 8002c36:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c3a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002c3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c42:	4059      	eors	r1, r3
 8002c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c46:	404b      	eors	r3, r1
 8002c48:	441a      	add	r2, r3
 8002c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c4c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c54:	441a      	add	r2, r3
 8002c56:	4b86      	ldr	r3, [pc, #536]	; (8002e70 <mbedtls_internal_sha1_process+0xaf0>)
 8002c58:	4413      	add	r3, r2
 8002c5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c5c:	4413      	add	r3, r2
 8002c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c62:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002c66:	657b      	str	r3, [r7, #84]	; 0x54
    P( A, B, C, D, E, R(30) );
 8002c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	405a      	eors	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	405a      	eors	r2, r3
 8002c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c74:	4053      	eors	r3, r2
 8002c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002c7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c82:	4059      	eors	r1, r3
 8002c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c86:	404b      	eors	r3, r1
 8002c88:	441a      	add	r2, r3
 8002c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c8c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002c90:	643b      	str	r3, [r7, #64]	; 0x40
 8002c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c94:	441a      	add	r2, r3
 8002c96:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <mbedtls_internal_sha1_process+0xaf0>)
 8002c98:	4413      	add	r3, r2
 8002c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c9c:	4413      	add	r3, r2
 8002c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002ca6:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, R(31) );
 8002ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	405a      	eors	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	405a      	eors	r2, r3
 8002cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb4:	4053      	eors	r3, r2
 8002cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cba:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002cbe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc2:	4059      	eors	r1, r3
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc6:	404b      	eors	r3, r1
 8002cc8:	441a      	add	r2, r3
 8002cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ccc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd4:	441a      	add	r2, r3
 8002cd6:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <mbedtls_internal_sha1_process+0xaf0>)
 8002cd8:	4413      	add	r3, r2
 8002cda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cdc:	4413      	add	r3, r2
 8002cde:	653b      	str	r3, [r7, #80]	; 0x50
 8002ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, R(32) );
 8002ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	405a      	eors	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	405a      	eors	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4053      	eors	r3, r2
 8002cf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cfa:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002cfe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d02:	4059      	eors	r1, r3
 8002d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d06:	404b      	eors	r3, r1
 8002d08:	441a      	add	r2, r3
 8002d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d0c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	441a      	add	r2, r3
 8002d16:	4b56      	ldr	r3, [pc, #344]	; (8002e70 <mbedtls_internal_sha1_process+0xaf0>)
 8002d18:	4413      	add	r3, r2
 8002d1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d1c:	4413      	add	r3, r2
 8002d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d22:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, R(33) );
 8002d28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	405a      	eors	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	405a      	eors	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4053      	eors	r3, r2
 8002d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002d3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d42:	4059      	eors	r1, r3
 8002d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d46:	404b      	eors	r3, r1
 8002d48:	441a      	add	r2, r3
 8002d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	441a      	add	r2, r3
 8002d56:	4b46      	ldr	r3, [pc, #280]	; (8002e70 <mbedtls_internal_sha1_process+0xaf0>)
 8002d58:	4413      	add	r3, r2
 8002d5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d5c:	4413      	add	r3, r2
 8002d5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d62:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002d66:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, R(34) );
 8002d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	405a      	eors	r2, r3
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	405a      	eors	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4053      	eors	r3, r2
 8002d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d7a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002d7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d82:	4059      	eors	r1, r3
 8002d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d86:	404b      	eors	r3, r1
 8002d88:	441a      	add	r2, r3
 8002d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	441a      	add	r2, r3
 8002d96:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <mbedtls_internal_sha1_process+0xaf0>)
 8002d98:	4413      	add	r3, r2
 8002d9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d9c:	4413      	add	r3, r2
 8002d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002da6:	657b      	str	r3, [r7, #84]	; 0x54
    P( A, B, C, D, E, R(35) );
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dac:	405a      	eors	r2, r3
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	405a      	eors	r2, r3
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4053      	eors	r3, r2
 8002db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dba:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002dbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc2:	4059      	eors	r1, r3
 8002dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc6:	404b      	eors	r3, r1
 8002dc8:	441a      	add	r2, r3
 8002dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dcc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	441a      	add	r2, r3
 8002dd6:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <mbedtls_internal_sha1_process+0xaf0>)
 8002dd8:	4413      	add	r3, r2
 8002dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ddc:	4413      	add	r3, r2
 8002dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002de6:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, R(36) );
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	405a      	eors	r2, r3
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	405a      	eors	r2, r3
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	4053      	eors	r3, r2
 8002df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfa:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002dfe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e02:	4059      	eors	r1, r3
 8002e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e06:	404b      	eors	r3, r1
 8002e08:	441a      	add	r2, r3
 8002e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	441a      	add	r2, r3
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <mbedtls_internal_sha1_process+0xaf0>)
 8002e18:	4413      	add	r3, r2
 8002e1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e1c:	4413      	add	r3, r2
 8002e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8002e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e22:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002e26:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, R(37) );
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2c:	405a      	eors	r2, r3
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	405a      	eors	r2, r3
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4053      	eors	r3, r2
 8002e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002e3e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e42:	4059      	eors	r1, r3
 8002e44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e46:	404b      	eors	r3, r1
 8002e48:	441a      	add	r2, r3
 8002e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e4c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	441a      	add	r2, r3
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <mbedtls_internal_sha1_process+0xaf0>)
 8002e58:	4413      	add	r3, r2
 8002e5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e5c:	4413      	add	r3, r2
 8002e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e62:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002e66:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, R(38) );
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6c:	e002      	b.n	8002e74 <mbedtls_internal_sha1_process+0xaf4>
 8002e6e:	bf00      	nop
 8002e70:	6ed9eba1 	.word	0x6ed9eba1
 8002e74:	405a      	eors	r2, r3
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	405a      	eors	r2, r3
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	4053      	eors	r3, r2
 8002e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e82:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002e86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8a:	4059      	eors	r1, r3
 8002e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8e:	404b      	eors	r3, r1
 8002e90:	441a      	add	r2, r3
 8002e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e94:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002e98:	623b      	str	r3, [r7, #32]
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	441a      	add	r2, r3
 8002e9e:	4ba6      	ldr	r3, [pc, #664]	; (8003138 <mbedtls_internal_sha1_process+0xdb8>)
 8002ea0:	4413      	add	r3, r2
 8002ea2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ea4:	4413      	add	r3, r2
 8002ea6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eaa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002eae:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, R(39) );
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb4:	405a      	eors	r2, r3
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	405a      	eors	r2, r3
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	4053      	eors	r3, r2
 8002ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec2:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002ec6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eca:	4059      	eors	r1, r3
 8002ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ece:	404b      	eors	r3, r1
 8002ed0:	441a      	add	r2, r3
 8002ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	441a      	add	r2, r3
 8002ede:	4b96      	ldr	r3, [pc, #600]	; (8003138 <mbedtls_internal_sha1_process+0xdb8>)
 8002ee0:	4413      	add	r3, r2
 8002ee2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ee4:	4413      	add	r3, r2
 8002ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eea:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002eee:	657b      	str	r3, [r7, #84]	; 0x54
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	405a      	eors	r2, r3
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	405a      	eors	r2, r3
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	4053      	eors	r3, r2
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f02:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002f06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0a:	4019      	ands	r1, r3
 8002f0c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f10:	4318      	orrs	r0, r3
 8002f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f14:	4003      	ands	r3, r0
 8002f16:	430b      	orrs	r3, r1
 8002f18:	441a      	add	r2, r3
 8002f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f1c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	441a      	add	r2, r3
 8002f26:	4b85      	ldr	r3, [pc, #532]	; (800313c <mbedtls_internal_sha1_process+0xdbc>)
 8002f28:	4413      	add	r3, r2
 8002f2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f2c:	4413      	add	r3, r2
 8002f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f32:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002f36:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, R(41) );
 8002f38:	6a3a      	ldr	r2, [r7, #32]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	405a      	eors	r2, r3
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f40:	405a      	eors	r2, r3
 8002f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f44:	4053      	eors	r3, r2
 8002f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002f4e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f52:	4019      	ands	r1, r3
 8002f54:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f58:	4318      	orrs	r0, r3
 8002f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5c:	4003      	ands	r3, r0
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	441a      	add	r2, r3
 8002f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f64:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6c:	441a      	add	r2, r3
 8002f6e:	4b73      	ldr	r3, [pc, #460]	; (800313c <mbedtls_internal_sha1_process+0xdbc>)
 8002f70:	4413      	add	r3, r2
 8002f72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f74:	4413      	add	r3, r2
 8002f76:	653b      	str	r3, [r7, #80]	; 0x50
 8002f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f7a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, R(42) );
 8002f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	405a      	eors	r2, r3
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	405a      	eors	r2, r3
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	4053      	eors	r3, r2
 8002f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f92:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002f96:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9a:	4019      	ands	r1, r3
 8002f9c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa0:	4318      	orrs	r0, r3
 8002fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa4:	4003      	ands	r3, r0
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	441a      	add	r2, r3
 8002faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fac:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	441a      	add	r2, r3
 8002fb6:	4b61      	ldr	r3, [pc, #388]	; (800313c <mbedtls_internal_sha1_process+0xdbc>)
 8002fb8:	4413      	add	r3, r2
 8002fba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fbc:	4413      	add	r3, r2
 8002fbe:	657b      	str	r3, [r7, #84]	; 0x54
 8002fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, R(43) );
 8002fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	405a      	eors	r2, r3
 8002fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd0:	405a      	eors	r2, r3
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd4:	4053      	eors	r3, r2
 8002fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fda:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002fde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe2:	4019      	ands	r1, r3
 8002fe4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe8:	4318      	orrs	r0, r3
 8002fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fec:	4003      	ands	r3, r0
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	441a      	add	r2, r3
 8002ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8002ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffc:	441a      	add	r2, r3
 8002ffe:	4b4f      	ldr	r3, [pc, #316]	; (800313c <mbedtls_internal_sha1_process+0xdbc>)
 8003000:	4413      	add	r3, r2
 8003002:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003004:	4413      	add	r3, r2
 8003006:	65bb      	str	r3, [r7, #88]	; 0x58
 8003008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800300a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800300e:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, R(44) );
 8003010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	405a      	eors	r2, r3
 8003016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003018:	405a      	eors	r2, r3
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	4053      	eors	r3, r2
 800301e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003022:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003026:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302a:	4019      	ands	r1, r3
 800302c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800302e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003030:	4318      	orrs	r0, r3
 8003032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003034:	4003      	ands	r3, r0
 8003036:	430b      	orrs	r3, r1
 8003038:	441a      	add	r2, r3
 800303a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003040:	63bb      	str	r3, [r7, #56]	; 0x38
 8003042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003044:	441a      	add	r2, r3
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <mbedtls_internal_sha1_process+0xdbc>)
 8003048:	4413      	add	r3, r2
 800304a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800304c:	4413      	add	r3, r2
 800304e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003052:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8003056:	657b      	str	r3, [r7, #84]	; 0x54
    P( A, B, C, D, E, R(45) );
 8003058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	405a      	eors	r2, r3
 800305e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003060:	405a      	eors	r2, r3
 8003062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003064:	4053      	eors	r3, r2
 8003066:	64bb      	str	r3, [r7, #72]	; 0x48
 8003068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800306a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800306e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003072:	4019      	ands	r1, r3
 8003074:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003078:	4318      	orrs	r0, r3
 800307a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800307c:	4003      	ands	r3, r0
 800307e:	430b      	orrs	r3, r1
 8003080:	441a      	add	r2, r3
 8003082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003084:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003088:	63fb      	str	r3, [r7, #60]	; 0x3c
 800308a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800308c:	441a      	add	r2, r3
 800308e:	4b2b      	ldr	r3, [pc, #172]	; (800313c <mbedtls_internal_sha1_process+0xdbc>)
 8003090:	4413      	add	r3, r2
 8003092:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003094:	4413      	add	r3, r2
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003098:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800309a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800309e:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, R(46) );
 80030a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	405a      	eors	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	405a      	eors	r2, r3
 80030aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ac:	4053      	eors	r3, r2
 80030ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80030b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b2:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80030b6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80030b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ba:	4019      	ands	r1, r3
 80030bc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80030be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c0:	4318      	orrs	r0, r3
 80030c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c4:	4003      	ands	r3, r0
 80030c6:	430b      	orrs	r3, r1
 80030c8:	441a      	add	r2, r3
 80030ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030cc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80030d0:	643b      	str	r3, [r7, #64]	; 0x40
 80030d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d4:	441a      	add	r2, r3
 80030d6:	4b19      	ldr	r3, [pc, #100]	; (800313c <mbedtls_internal_sha1_process+0xdbc>)
 80030d8:	4413      	add	r3, r2
 80030da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030dc:	4413      	add	r3, r2
 80030de:	653b      	str	r3, [r7, #80]	; 0x50
 80030e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80030e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, R(47) );
 80030e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	405a      	eors	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	405a      	eors	r2, r3
 80030f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f4:	4053      	eors	r3, r2
 80030f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fa:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80030fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003102:	4019      	ands	r1, r3
 8003104:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003108:	4318      	orrs	r0, r3
 800310a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800310c:	4003      	ands	r3, r0
 800310e:	430b      	orrs	r3, r1
 8003110:	441a      	add	r2, r3
 8003112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003114:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003118:	647b      	str	r3, [r7, #68]	; 0x44
 800311a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311c:	441a      	add	r2, r3
 800311e:	4b07      	ldr	r3, [pc, #28]	; (800313c <mbedtls_internal_sha1_process+0xdbc>)
 8003120:	4413      	add	r3, r2
 8003122:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003124:	4413      	add	r3, r2
 8003126:	657b      	str	r3, [r7, #84]	; 0x54
 8003128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800312e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, R(48) );
 8003130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	405a      	eors	r2, r3
 8003136:	e003      	b.n	8003140 <mbedtls_internal_sha1_process+0xdc0>
 8003138:	6ed9eba1 	.word	0x6ed9eba1
 800313c:	8f1bbcdc 	.word	0x8f1bbcdc
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	405a      	eors	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4053      	eors	r3, r2
 8003148:	64bb      	str	r3, [r7, #72]	; 0x48
 800314a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800314c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003150:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003154:	4019      	ands	r1, r3
 8003156:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315a:	4318      	orrs	r0, r3
 800315c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800315e:	4003      	ands	r3, r0
 8003160:	430b      	orrs	r3, r1
 8003162:	441a      	add	r2, r3
 8003164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003166:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	441a      	add	r2, r3
 8003170:	4ba6      	ldr	r3, [pc, #664]	; (800340c <mbedtls_internal_sha1_process+0x108c>)
 8003172:	4413      	add	r3, r2
 8003174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003176:	4413      	add	r3, r2
 8003178:	65bb      	str	r3, [r7, #88]	; 0x58
 800317a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800317c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8003180:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, R(49) );
 8003182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003186:	405a      	eors	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	405a      	eors	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4053      	eors	r3, r2
 8003190:	64bb      	str	r3, [r7, #72]	; 0x48
 8003192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003194:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003198:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800319a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800319c:	4019      	ands	r1, r3
 800319e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80031a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a2:	4318      	orrs	r0, r3
 80031a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a6:	4003      	ands	r3, r0
 80031a8:	430b      	orrs	r3, r1
 80031aa:	441a      	add	r2, r3
 80031ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ae:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	441a      	add	r2, r3
 80031b8:	4b94      	ldr	r3, [pc, #592]	; (800340c <mbedtls_internal_sha1_process+0x108c>)
 80031ba:	4413      	add	r3, r2
 80031bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031be:	4413      	add	r3, r2
 80031c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80031c8:	657b      	str	r3, [r7, #84]	; 0x54
    P( A, B, C, D, E, R(50) );
 80031ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	405a      	eors	r2, r3
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	405a      	eors	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4053      	eors	r3, r2
 80031d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80031da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031dc:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80031e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e4:	4019      	ands	r1, r3
 80031e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80031e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ea:	4318      	orrs	r0, r3
 80031ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ee:	4003      	ands	r3, r0
 80031f0:	430b      	orrs	r3, r1
 80031f2:	441a      	add	r2, r3
 80031f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	441a      	add	r2, r3
 8003200:	4b82      	ldr	r3, [pc, #520]	; (800340c <mbedtls_internal_sha1_process+0x108c>)
 8003202:	4413      	add	r3, r2
 8003204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003206:	4413      	add	r3, r2
 8003208:	64fb      	str	r3, [r7, #76]	; 0x4c
 800320a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800320c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8003210:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, R(51) );
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	405a      	eors	r2, r3
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	405a      	eors	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	4053      	eors	r3, r2
 8003220:	64bb      	str	r3, [r7, #72]	; 0x48
 8003222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003224:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003228:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800322a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800322c:	4019      	ands	r1, r3
 800322e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003232:	4318      	orrs	r0, r3
 8003234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003236:	4003      	ands	r3, r0
 8003238:	430b      	orrs	r3, r1
 800323a:	441a      	add	r2, r3
 800323c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	441a      	add	r2, r3
 8003248:	4b70      	ldr	r3, [pc, #448]	; (800340c <mbedtls_internal_sha1_process+0x108c>)
 800324a:	4413      	add	r3, r2
 800324c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800324e:	4413      	add	r3, r2
 8003250:	653b      	str	r3, [r7, #80]	; 0x50
 8003252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003254:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8003258:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, R(52) );
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325e:	405a      	eors	r2, r3
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	405a      	eors	r2, r3
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	4053      	eors	r3, r2
 8003268:	64bb      	str	r3, [r7, #72]	; 0x48
 800326a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800326c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003270:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003274:	4019      	ands	r1, r3
 8003276:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327a:	4318      	orrs	r0, r3
 800327c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800327e:	4003      	ands	r3, r0
 8003280:	430b      	orrs	r3, r1
 8003282:	441a      	add	r2, r3
 8003284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003286:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800328a:	61bb      	str	r3, [r7, #24]
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	441a      	add	r2, r3
 8003290:	4b5e      	ldr	r3, [pc, #376]	; (800340c <mbedtls_internal_sha1_process+0x108c>)
 8003292:	4413      	add	r3, r2
 8003294:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003296:	4413      	add	r3, r2
 8003298:	657b      	str	r3, [r7, #84]	; 0x54
 800329a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80032a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, R(53) );
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a6:	405a      	eors	r2, r3
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	405a      	eors	r2, r3
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	4053      	eors	r3, r2
 80032b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80032b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80032ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032bc:	4019      	ands	r1, r3
 80032be:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80032c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c2:	4318      	orrs	r0, r3
 80032c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c6:	4003      	ands	r3, r0
 80032c8:	430b      	orrs	r3, r1
 80032ca:	441a      	add	r2, r3
 80032cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ce:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	441a      	add	r2, r3
 80032d8:	4b4c      	ldr	r3, [pc, #304]	; (800340c <mbedtls_internal_sha1_process+0x108c>)
 80032da:	4413      	add	r3, r2
 80032dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032de:	4413      	add	r3, r2
 80032e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80032e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80032e8:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, R(54) );
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ee:	405a      	eors	r2, r3
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	405a      	eors	r2, r3
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	4053      	eors	r3, r2
 80032f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80032fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032fc:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003300:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003304:	4019      	ands	r1, r3
 8003306:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330a:	4318      	orrs	r0, r3
 800330c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330e:	4003      	ands	r3, r0
 8003310:	430b      	orrs	r3, r1
 8003312:	441a      	add	r2, r3
 8003314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003316:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800331a:	623b      	str	r3, [r7, #32]
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	441a      	add	r2, r3
 8003320:	4b3a      	ldr	r3, [pc, #232]	; (800340c <mbedtls_internal_sha1_process+0x108c>)
 8003322:	4413      	add	r3, r2
 8003324:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003326:	4413      	add	r3, r2
 8003328:	65fb      	str	r3, [r7, #92]	; 0x5c
 800332a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800332c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8003330:	657b      	str	r3, [r7, #84]	; 0x54
    P( A, B, C, D, E, R(55) );
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003336:	405a      	eors	r2, r3
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	405a      	eors	r2, r3
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	4053      	eors	r3, r2
 8003340:	64bb      	str	r3, [r7, #72]	; 0x48
 8003342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003344:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003348:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800334a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800334c:	4019      	ands	r1, r3
 800334e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003352:	4318      	orrs	r0, r3
 8003354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003356:	4003      	ands	r3, r0
 8003358:	430b      	orrs	r3, r1
 800335a:	441a      	add	r2, r3
 800335c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800335e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	441a      	add	r2, r3
 8003368:	4b28      	ldr	r3, [pc, #160]	; (800340c <mbedtls_internal_sha1_process+0x108c>)
 800336a:	4413      	add	r3, r2
 800336c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800336e:	4413      	add	r3, r2
 8003370:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003374:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8003378:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, R(56) );
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	405a      	eors	r2, r3
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	405a      	eors	r2, r3
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	4053      	eors	r3, r2
 8003388:	64bb      	str	r3, [r7, #72]	; 0x48
 800338a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800338c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003390:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003394:	4019      	ands	r1, r3
 8003396:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339a:	4318      	orrs	r0, r3
 800339c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800339e:	4003      	ands	r3, r0
 80033a0:	430b      	orrs	r3, r1
 80033a2:	441a      	add	r2, r3
 80033a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	441a      	add	r2, r3
 80033b0:	4b16      	ldr	r3, [pc, #88]	; (800340c <mbedtls_internal_sha1_process+0x108c>)
 80033b2:	4413      	add	r3, r2
 80033b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033b6:	4413      	add	r3, r2
 80033b8:	653b      	str	r3, [r7, #80]	; 0x50
 80033ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033bc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80033c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, R(57) );
 80033c2:	6a3a      	ldr	r2, [r7, #32]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	405a      	eors	r2, r3
 80033c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ca:	405a      	eors	r2, r3
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	4053      	eors	r3, r2
 80033d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80033d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80033d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80033da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033dc:	4019      	ands	r1, r3
 80033de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80033e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e2:	4318      	orrs	r0, r3
 80033e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033e6:	4003      	ands	r3, r0
 80033e8:	430b      	orrs	r3, r1
 80033ea:	441a      	add	r2, r3
 80033ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f6:	441a      	add	r2, r3
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <mbedtls_internal_sha1_process+0x108c>)
 80033fa:	4413      	add	r3, r2
 80033fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033fe:	4413      	add	r3, r2
 8003400:	657b      	str	r3, [r7, #84]	; 0x54
 8003402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003404:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8003408:	e002      	b.n	8003410 <mbedtls_internal_sha1_process+0x1090>
 800340a:	bf00      	nop
 800340c:	8f1bbcdc 	.word	0x8f1bbcdc
 8003410:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, R(58) );
 8003412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	405a      	eors	r2, r3
 8003418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341a:	405a      	eors	r2, r3
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	4053      	eors	r3, r2
 8003420:	64bb      	str	r3, [r7, #72]	; 0x48
 8003422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003424:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003428:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800342a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800342c:	4019      	ands	r1, r3
 800342e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003432:	4318      	orrs	r0, r3
 8003434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003436:	4003      	ands	r3, r0
 8003438:	430b      	orrs	r3, r1
 800343a:	441a      	add	r2, r3
 800343c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800343e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003442:	633b      	str	r3, [r7, #48]	; 0x30
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	441a      	add	r2, r3
 8003448:	4ba6      	ldr	r3, [pc, #664]	; (80036e4 <mbedtls_internal_sha1_process+0x1364>)
 800344a:	4413      	add	r3, r2
 800344c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800344e:	4413      	add	r3, r2
 8003450:	65bb      	str	r3, [r7, #88]	; 0x58
 8003452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003454:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8003458:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, R(59) );
 800345a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	405a      	eors	r2, r3
 8003460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003462:	405a      	eors	r2, r3
 8003464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003466:	4053      	eors	r3, r2
 8003468:	64bb      	str	r3, [r7, #72]	; 0x48
 800346a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800346c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003470:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003474:	4019      	ands	r1, r3
 8003476:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800347a:	4318      	orrs	r0, r3
 800347c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800347e:	4003      	ands	r3, r0
 8003480:	430b      	orrs	r3, r1
 8003482:	441a      	add	r2, r3
 8003484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003486:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
 800348c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348e:	441a      	add	r2, r3
 8003490:	4b94      	ldr	r3, [pc, #592]	; (80036e4 <mbedtls_internal_sha1_process+0x1364>)
 8003492:	4413      	add	r3, r2
 8003494:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003496:	4413      	add	r3, r2
 8003498:	65fb      	str	r3, [r7, #92]	; 0x5c
 800349a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80034a0:	657b      	str	r3, [r7, #84]	; 0x54
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80034a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	405a      	eors	r2, r3
 80034a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034aa:	405a      	eors	r2, r3
 80034ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ae:	4053      	eors	r3, r2
 80034b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80034b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80034b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80034ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034bc:	4059      	eors	r1, r3
 80034be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c0:	404b      	eors	r3, r1
 80034c2:	441a      	add	r2, r3
 80034c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80034ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80034cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ce:	441a      	add	r2, r3
 80034d0:	4b85      	ldr	r3, [pc, #532]	; (80036e8 <mbedtls_internal_sha1_process+0x1368>)
 80034d2:	4413      	add	r3, r2
 80034d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034d6:	4413      	add	r3, r2
 80034d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034dc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80034e0:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, R(61) );
 80034e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	405a      	eors	r2, r3
 80034e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ea:	405a      	eors	r2, r3
 80034ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ee:	4053      	eors	r3, r2
 80034f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80034f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80034f8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80034fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034fc:	4059      	eors	r1, r3
 80034fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003500:	404b      	eors	r3, r1
 8003502:	441a      	add	r2, r3
 8003504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003506:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800350c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350e:	441a      	add	r2, r3
 8003510:	4b75      	ldr	r3, [pc, #468]	; (80036e8 <mbedtls_internal_sha1_process+0x1368>)
 8003512:	4413      	add	r3, r2
 8003514:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003516:	4413      	add	r3, r2
 8003518:	653b      	str	r3, [r7, #80]	; 0x50
 800351a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800351c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8003520:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, R(62) );
 8003522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	405a      	eors	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	405a      	eors	r2, r3
 800352c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800352e:	4053      	eors	r3, r2
 8003530:	64bb      	str	r3, [r7, #72]	; 0x48
 8003532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003534:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003538:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800353a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353c:	4059      	eors	r1, r3
 800353e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003540:	404b      	eors	r3, r1
 8003542:	441a      	add	r2, r3
 8003544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003546:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800354a:	643b      	str	r3, [r7, #64]	; 0x40
 800354c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354e:	441a      	add	r2, r3
 8003550:	4b65      	ldr	r3, [pc, #404]	; (80036e8 <mbedtls_internal_sha1_process+0x1368>)
 8003552:	4413      	add	r3, r2
 8003554:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003556:	4413      	add	r3, r2
 8003558:	657b      	str	r3, [r7, #84]	; 0x54
 800355a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800355c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8003560:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, R(63) );
 8003562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	405a      	eors	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	405a      	eors	r2, r3
 800356c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356e:	4053      	eors	r3, r2
 8003570:	64bb      	str	r3, [r7, #72]	; 0x48
 8003572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003574:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003578:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800357a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357c:	4059      	eors	r1, r3
 800357e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003580:	404b      	eors	r3, r1
 8003582:	441a      	add	r2, r3
 8003584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003586:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800358a:	647b      	str	r3, [r7, #68]	; 0x44
 800358c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358e:	441a      	add	r2, r3
 8003590:	4b55      	ldr	r3, [pc, #340]	; (80036e8 <mbedtls_internal_sha1_process+0x1368>)
 8003592:	4413      	add	r3, r2
 8003594:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003596:	4413      	add	r3, r2
 8003598:	65bb      	str	r3, [r7, #88]	; 0x58
 800359a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800359c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80035a0:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, R(64) );
 80035a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	405a      	eors	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	405a      	eors	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4053      	eors	r3, r2
 80035b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80035b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80035b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035bc:	4059      	eors	r1, r3
 80035be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c0:	404b      	eors	r3, r1
 80035c2:	441a      	add	r2, r3
 80035c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	441a      	add	r2, r3
 80035d0:	4b45      	ldr	r3, [pc, #276]	; (80036e8 <mbedtls_internal_sha1_process+0x1368>)
 80035d2:	4413      	add	r3, r2
 80035d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035d6:	4413      	add	r3, r2
 80035d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035dc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80035e0:	657b      	str	r3, [r7, #84]	; 0x54
    P( A, B, C, D, E, R(65) );
 80035e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e6:	405a      	eors	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	405a      	eors	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4053      	eors	r3, r2
 80035f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80035f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80035f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035fc:	4059      	eors	r1, r3
 80035fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003600:	404b      	eors	r3, r1
 8003602:	441a      	add	r2, r3
 8003604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003606:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	441a      	add	r2, r3
 8003610:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <mbedtls_internal_sha1_process+0x1368>)
 8003612:	4413      	add	r3, r2
 8003614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003616:	4413      	add	r3, r2
 8003618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800361a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800361c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8003620:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, R(66) );
 8003622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	405a      	eors	r2, r3
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	405a      	eors	r2, r3
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4053      	eors	r3, r2
 8003630:	64bb      	str	r3, [r7, #72]	; 0x48
 8003632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003634:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003638:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800363a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800363c:	4059      	eors	r1, r3
 800363e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003640:	404b      	eors	r3, r1
 8003642:	441a      	add	r2, r3
 8003644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003646:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	441a      	add	r2, r3
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <mbedtls_internal_sha1_process+0x1368>)
 8003652:	4413      	add	r3, r2
 8003654:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003656:	4413      	add	r3, r2
 8003658:	653b      	str	r3, [r7, #80]	; 0x50
 800365a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800365c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8003660:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, R(67) );
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003666:	405a      	eors	r2, r3
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	405a      	eors	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	4053      	eors	r3, r2
 8003670:	64bb      	str	r3, [r7, #72]	; 0x48
 8003672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003674:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003678:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800367a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800367c:	4059      	eors	r1, r3
 800367e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003680:	404b      	eors	r3, r1
 8003682:	441a      	add	r2, r3
 8003684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003686:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	441a      	add	r2, r3
 8003690:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <mbedtls_internal_sha1_process+0x1368>)
 8003692:	4413      	add	r3, r2
 8003694:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003696:	4413      	add	r3, r2
 8003698:	657b      	str	r3, [r7, #84]	; 0x54
 800369a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80036a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, R(68) );
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	405a      	eors	r2, r3
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	405a      	eors	r2, r3
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	4053      	eors	r3, r2
 80036b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80036b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80036b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80036ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036bc:	4059      	eors	r1, r3
 80036be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c0:	404b      	eors	r3, r1
 80036c2:	441a      	add	r2, r3
 80036c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	441a      	add	r2, r3
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <mbedtls_internal_sha1_process+0x1368>)
 80036d2:	4413      	add	r3, r2
 80036d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036d6:	4413      	add	r3, r2
 80036d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80036da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036dc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80036e0:	e004      	b.n	80036ec <mbedtls_internal_sha1_process+0x136c>
 80036e2:	bf00      	nop
 80036e4:	8f1bbcdc 	.word	0x8f1bbcdc
 80036e8:	ca62c1d6 	.word	0xca62c1d6
 80036ec:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, R(69) );
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f2:	405a      	eors	r2, r3
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	405a      	eors	r2, r3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	4053      	eors	r3, r2
 80036fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80036fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003700:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003704:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003708:	4059      	eors	r1, r3
 800370a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370c:	404b      	eors	r3, r1
 800370e:	441a      	add	r2, r3
 8003710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003712:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	441a      	add	r2, r3
 800371c:	4ba5      	ldr	r3, [pc, #660]	; (80039b4 <mbedtls_internal_sha1_process+0x1634>)
 800371e:	4413      	add	r3, r2
 8003720:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003722:	4413      	add	r3, r2
 8003724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003728:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800372c:	657b      	str	r3, [r7, #84]	; 0x54
    P( A, B, C, D, E, R(70) );
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003732:	405a      	eors	r2, r3
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003736:	405a      	eors	r2, r3
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	4053      	eors	r3, r2
 800373c:	64bb      	str	r3, [r7, #72]	; 0x48
 800373e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003740:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003744:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003748:	4059      	eors	r1, r3
 800374a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800374c:	404b      	eors	r3, r1
 800374e:	441a      	add	r2, r3
 8003750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003752:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003756:	623b      	str	r3, [r7, #32]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	441a      	add	r2, r3
 800375c:	4b95      	ldr	r3, [pc, #596]	; (80039b4 <mbedtls_internal_sha1_process+0x1634>)
 800375e:	4413      	add	r3, r2
 8003760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003762:	4413      	add	r3, r2
 8003764:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003766:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003768:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800376c:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, R(71) );
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003772:	405a      	eors	r2, r3
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	405a      	eors	r2, r3
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	4053      	eors	r3, r2
 800377c:	64bb      	str	r3, [r7, #72]	; 0x48
 800377e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003780:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003784:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003788:	4059      	eors	r1, r3
 800378a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800378c:	404b      	eors	r3, r1
 800378e:	441a      	add	r2, r3
 8003790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003792:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	441a      	add	r2, r3
 800379c:	4b85      	ldr	r3, [pc, #532]	; (80039b4 <mbedtls_internal_sha1_process+0x1634>)
 800379e:	4413      	add	r3, r2
 80037a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037a2:	4413      	add	r3, r2
 80037a4:	653b      	str	r3, [r7, #80]	; 0x50
 80037a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80037ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, R(72) );
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	405a      	eors	r2, r3
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	405a      	eors	r2, r3
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	4053      	eors	r3, r2
 80037bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80037be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80037c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80037c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c8:	4059      	eors	r1, r3
 80037ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037cc:	404b      	eors	r3, r1
 80037ce:	441a      	add	r2, r3
 80037d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037da:	441a      	add	r2, r3
 80037dc:	4b75      	ldr	r3, [pc, #468]	; (80039b4 <mbedtls_internal_sha1_process+0x1634>)
 80037de:	4413      	add	r3, r2
 80037e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037e2:	4413      	add	r3, r2
 80037e4:	657b      	str	r3, [r7, #84]	; 0x54
 80037e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80037ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, R(73) );
 80037ee:	6a3a      	ldr	r2, [r7, #32]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	405a      	eors	r2, r3
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f6:	405a      	eors	r2, r3
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fa:	4053      	eors	r3, r2
 80037fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80037fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003800:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003804:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003808:	4059      	eors	r1, r3
 800380a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380c:	404b      	eors	r3, r1
 800380e:	441a      	add	r2, r3
 8003810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003812:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	441a      	add	r2, r3
 800381c:	4b65      	ldr	r3, [pc, #404]	; (80039b4 <mbedtls_internal_sha1_process+0x1634>)
 800381e:	4413      	add	r3, r2
 8003820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003822:	4413      	add	r3, r2
 8003824:	65bb      	str	r3, [r7, #88]	; 0x58
 8003826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003828:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800382c:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, R(74) );
 800382e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	405a      	eors	r2, r3
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	405a      	eors	r2, r3
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	4053      	eors	r3, r2
 800383c:	64bb      	str	r3, [r7, #72]	; 0x48
 800383e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003840:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003844:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003848:	4059      	eors	r1, r3
 800384a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384c:	404b      	eors	r3, r1
 800384e:	441a      	add	r2, r3
 8003850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003852:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003856:	633b      	str	r3, [r7, #48]	; 0x30
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	441a      	add	r2, r3
 800385c:	4b55      	ldr	r3, [pc, #340]	; (80039b4 <mbedtls_internal_sha1_process+0x1634>)
 800385e:	4413      	add	r3, r2
 8003860:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003862:	4413      	add	r3, r2
 8003864:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003868:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800386c:	657b      	str	r3, [r7, #84]	; 0x54
    P( A, B, C, D, E, R(75) );
 800386e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	405a      	eors	r2, r3
 8003874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003876:	405a      	eors	r2, r3
 8003878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387a:	4053      	eors	r3, r2
 800387c:	64bb      	str	r3, [r7, #72]	; 0x48
 800387e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003880:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003884:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003888:	4059      	eors	r1, r3
 800388a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388c:	404b      	eors	r3, r1
 800388e:	441a      	add	r2, r3
 8003890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003892:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
 8003898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389a:	441a      	add	r2, r3
 800389c:	4b45      	ldr	r3, [pc, #276]	; (80039b4 <mbedtls_internal_sha1_process+0x1634>)
 800389e:	4413      	add	r3, r2
 80038a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038a2:	4413      	add	r3, r2
 80038a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038a8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80038ac:	65bb      	str	r3, [r7, #88]	; 0x58
    P( E, A, B, C, D, R(76) );
 80038ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	405a      	eors	r2, r3
 80038b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b6:	405a      	eors	r2, r3
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	4053      	eors	r3, r2
 80038bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80038be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80038c4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80038c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038c8:	4059      	eors	r1, r3
 80038ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038cc:	404b      	eors	r3, r1
 80038ce:	441a      	add	r2, r3
 80038d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80038d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80038d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038da:	441a      	add	r2, r3
 80038dc:	4b35      	ldr	r3, [pc, #212]	; (80039b4 <mbedtls_internal_sha1_process+0x1634>)
 80038de:	4413      	add	r3, r2
 80038e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038e2:	4413      	add	r3, r2
 80038e4:	653b      	str	r3, [r7, #80]	; 0x50
 80038e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80038ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    P( D, E, A, B, C, R(77) );
 80038ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	405a      	eors	r2, r3
 80038f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f6:	405a      	eors	r2, r3
 80038f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fa:	4053      	eors	r3, r2
 80038fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80038fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003900:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003904:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003908:	4059      	eors	r1, r3
 800390a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800390c:	404b      	eors	r3, r1
 800390e:	441a      	add	r2, r3
 8003910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003912:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391a:	441a      	add	r2, r3
 800391c:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <mbedtls_internal_sha1_process+0x1634>)
 800391e:	4413      	add	r3, r2
 8003920:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003922:	4413      	add	r3, r2
 8003924:	657b      	str	r3, [r7, #84]	; 0x54
 8003926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003928:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800392c:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( C, D, E, A, B, R(78) );
 800392e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	405a      	eors	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	405a      	eors	r2, r3
 8003938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393a:	4053      	eors	r3, r2
 800393c:	64bb      	str	r3, [r7, #72]	; 0x48
 800393e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003940:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003944:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003948:	4059      	eors	r1, r3
 800394a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800394c:	404b      	eors	r3, r1
 800394e:	441a      	add	r2, r3
 8003950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003952:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003956:	643b      	str	r3, [r7, #64]	; 0x40
 8003958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800395a:	441a      	add	r2, r3
 800395c:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <mbedtls_internal_sha1_process+0x1634>)
 800395e:	4413      	add	r3, r2
 8003960:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003962:	4413      	add	r3, r2
 8003964:	65bb      	str	r3, [r7, #88]	; 0x58
 8003966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003968:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800396c:	653b      	str	r3, [r7, #80]	; 0x50
    P( B, C, D, E, A, R(79) );
 800396e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	405a      	eors	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	405a      	eors	r2, r3
 8003978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800397a:	4053      	eors	r3, r2
 800397c:	64bb      	str	r3, [r7, #72]	; 0x48
 800397e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003980:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003984:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003988:	4059      	eors	r1, r3
 800398a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800398c:	404b      	eors	r3, r1
 800398e:	441a      	add	r2, r3
 8003990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003992:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003996:	647b      	str	r3, [r7, #68]	; 0x44
 8003998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800399a:	441a      	add	r2, r3
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <mbedtls_internal_sha1_process+0x1634>)
 800399e:	4413      	add	r3, r2
 80039a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039a2:	4413      	add	r3, r2
 80039a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80039ac:	657b      	str	r3, [r7, #84]	; 0x54

#undef K
#undef F

    ctx->state[0] += A;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	e001      	b.n	80039b8 <mbedtls_internal_sha1_process+0x1638>
 80039b4:	ca62c1d6 	.word	0xca62c1d6
 80039b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ba:	441a      	add	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039c6:	441a      	add	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d2:	441a      	add	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039de:	441a      	add	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	615a      	str	r2, [r3, #20]
    ctx->state[4] += E;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ea:	441a      	add	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	619a      	str	r2, [r3, #24]

    return( 0 );
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3764      	adds	r7, #100	; 0x64
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop

08003a00 <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
    uint32_t left;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <mbedtls_sha1_update_ret+0x16>
        return( 0 );
 8003a12:	2300      	movs	r3, #0
 8003a14:	e065      	b.n	8003ae2 <mbedtls_sha1_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a1e:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003a26:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	441a      	add	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d904      	bls.n	8003a50 <mbedtls_sha1_update_ret+0x50>
        ctx->total[1]++;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d034      	beq.n	8003ac0 <mbedtls_sha1_update_ret+0xc0>
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d330      	bcc.n	8003ac0 <mbedtls_sha1_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f103 021c 	add.w	r2, r3, #28
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f003 f96e 	bl	8006d4e <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	331c      	adds	r3, #28
 8003a76:	4619      	mov	r1, r3
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f7fe fc81 	bl	8002380 <mbedtls_internal_sha1_process>
 8003a7e:	6178      	str	r0, [r7, #20]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <mbedtls_sha1_update_ret+0x8a>
            return( ret );
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	e02b      	b.n	8003ae2 <mbedtls_sha1_update_ret+0xe2>

        input += fill;
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	4413      	add	r3, r2
 8003a90:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	607b      	str	r3, [r7, #4]
        left = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 8003a9e:	e00f      	b.n	8003ac0 <mbedtls_sha1_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7fe fc6c 	bl	8002380 <mbedtls_internal_sha1_process>
 8003aa8:	6178      	str	r0, [r7, #20]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <mbedtls_sha1_update_ret+0xb4>
            return( ret );
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	e016      	b.n	8003ae2 <mbedtls_sha1_update_ret+0xe2>

        input += 64;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	3340      	adds	r3, #64	; 0x40
 8003ab8:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3b40      	subs	r3, #64	; 0x40
 8003abe:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b3f      	cmp	r3, #63	; 0x3f
 8003ac4:	d8ec      	bhi.n	8003aa0 <mbedtls_sha1_update_ret+0xa0>
    }

    if( ilen > 0 )
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <mbedtls_sha1_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f103 021c 	add.w	r2, r3, #28
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 f937 	bl	8006d4e <memcpy>

    return( 0 );
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3720      	adds	r7, #32
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <mbedtls_sha1_update>:

#if !defined(MBEDTLS_DEPRECATED_REMOVED)
void mbedtls_sha1_update( mbedtls_sha1_context *ctx,
                          const unsigned char *input,
                          size_t ilen )
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
    mbedtls_sha1_update_ret( ctx, input, ilen );
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7ff ff80 	bl	8003a00 <mbedtls_sha1_update_ret>
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b1a:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	617a      	str	r2, [r7, #20]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	2280      	movs	r2, #128	; 0x80
 8003b28:	771a      	strb	r2, [r3, #28]

    if( used <= 56 )
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b38      	cmp	r3, #56	; 0x38
 8003b2e:	d80c      	bhi.n	8003b4a <mbedtls_sha1_finish_ret+0x42>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f103 021c 	add.w	r2, r3, #28
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	18d0      	adds	r0, r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003b40:	461a      	mov	r2, r3
 8003b42:	2100      	movs	r1, #0
 8003b44:	f003 f888 	bl	8006c58 <memset>
 8003b48:	e01e      	b.n	8003b88 <mbedtls_sha1_finish_ret+0x80>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f103 021c 	add.w	r2, r3, #28
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	18d0      	adds	r0, r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	f003 f87b 	bl	8006c58 <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	331c      	adds	r3, #28
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7fe fc09 	bl	8002380 <mbedtls_internal_sha1_process>
 8003b6e:	6138      	str	r0, [r7, #16]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <mbedtls_sha1_finish_ret+0x72>
            return( ret );
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	e0d3      	b.n	8003d22 <mbedtls_sha1_finish_ret+0x21a>

        memset( ctx->buffer, 0, 56 );
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	331c      	adds	r3, #28
 8003b7e:	2238      	movs	r2, #56	; 0x38
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f003 f868 	bl	8006c58 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	0e1b      	lsrs	r3, r3, #24
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	0c1b      	lsrs	r3, r3, #16
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	0e1b      	lsrs	r3, r3, #24
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	331c      	adds	r3, #28
 8003c00:	4619      	mov	r1, r3
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fe fbbc 	bl	8002380 <mbedtls_internal_sha1_process>
 8003c08:	6138      	str	r0, [r7, #16]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <mbedtls_sha1_finish_ret+0x10c>
        return( ret );
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	e086      	b.n	8003d22 <mbedtls_sha1_finish_ret+0x21a>

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	0e1b      	lsrs	r3, r3, #24
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	0c1a      	lsrs	r2, r3, #16
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	0a1a      	lsrs	r2, r3, #8
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	3302      	adds	r3, #2
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	3303      	adds	r3, #3
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	0e1a      	lsrs	r2, r3, #24
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	3304      	adds	r3, #4
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	0c1a      	lsrs	r2, r3, #16
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	3305      	adds	r3, #5
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0a1a      	lsrs	r2, r3, #8
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	3306      	adds	r3, #6
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	3307      	adds	r3, #7
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	0e1a      	lsrs	r2, r3, #24
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	3308      	adds	r3, #8
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	0c1a      	lsrs	r2, r3, #16
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	3309      	adds	r3, #9
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	0a1a      	lsrs	r2, r3, #8
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	330a      	adds	r3, #10
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	330b      	adds	r3, #11
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	0e1a      	lsrs	r2, r3, #24
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	0c1a      	lsrs	r2, r3, #16
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	330d      	adds	r3, #13
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	0a1a      	lsrs	r2, r3, #8
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	330e      	adds	r3, #14
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	330f      	adds	r3, #15
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	0e1a      	lsrs	r2, r3, #24
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	3310      	adds	r3, #16
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	0c1a      	lsrs	r2, r3, #16
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	3311      	adds	r3, #17
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	0a1a      	lsrs	r2, r3, #8
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	3312      	adds	r3, #18
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	3313      	adds	r3, #19
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <mbedtls_sha1_finish>:

#if !defined(MBEDTLS_DEPRECATED_REMOVED)
void mbedtls_sha1_finish( mbedtls_sha1_context *ctx,
                          unsigned char output[20] )
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
    mbedtls_sha1_finish_ret( ctx, output );
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fee6 	bl	8003b08 <mbedtls_sha1_finish_ret>
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <PN532_Reset>:

extern I2C_HandleTypeDef hi2c1;


/*************Reset and Log implements*****************/
int PN532_Reset(void) {
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
    HAL_Delay(100);
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_RESET);
    HAL_Delay(500);
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
    HAL_Delay(100);*/
    return PN532_STATUS_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <PN532_Log>:

void PN532_Log(const char* log) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4803      	ldr	r0, [pc, #12]	; (8003d6c <PN532_Log+0x18>)
 8003d60:	f002 fe2c 	bl	80069bc <iprintf>
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	08007c04 	.word	0x08007c04

08003d70 <i2c_read>:
    PN532_SPI_Init(pn532);
}


/********************I2C************************/
void i2c_read(uint8_t* data, uint16_t count) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Receive(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8003d7c:	887b      	ldrh	r3, [r7, #2]
 8003d7e:	220a      	movs	r2, #10
 8003d80:	9200      	str	r2, [sp, #0]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	2148      	movs	r1, #72	; 0x48
 8003d86:	4803      	ldr	r0, [pc, #12]	; (8003d94 <i2c_read+0x24>)
 8003d88:	f001 f804 	bl	8004d94 <HAL_I2C_Master_Receive>
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	200000b8 	.word	0x200000b8

08003d98 <i2c_write>:

void i2c_write(uint8_t* data, uint16_t count) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8003da4:	887b      	ldrh	r3, [r7, #2]
 8003da6:	220a      	movs	r2, #10
 8003da8:	9200      	str	r2, [sp, #0]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	2148      	movs	r1, #72	; 0x48
 8003dae:	4803      	ldr	r0, [pc, #12]	; (8003dbc <i2c_write+0x24>)
 8003db0:	f000 fef2 	bl	8004b98 <HAL_I2C_Master_Transmit>
}
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	200000b8 	.word	0x200000b8

08003dc0 <PN532_I2C_ReadData>:

int PN532_I2C_ReadData(uint8_t* data, uint16_t count) {
 8003dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dc4:	b087      	sub	sp, #28
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	807b      	strh	r3, [r7, #2]
 8003dce:	466b      	mov	r3, sp
 8003dd0:	461e      	mov	r6, r3
    uint8_t status[] = {0x00};
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	723b      	strb	r3, [r7, #8]
    uint8_t frame[count + 1];
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	1c59      	adds	r1, r3, #1
 8003dda:	1e4b      	subs	r3, r1, #1
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	460a      	mov	r2, r1
 8003de0:	2300      	movs	r3, #0
 8003de2:	4690      	mov	r8, r2
 8003de4:	4699      	mov	r9, r3
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dfa:	460a      	mov	r2, r1
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	4614      	mov	r4, r2
 8003e00:	461d      	mov	r5, r3
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	00eb      	lsls	r3, r5, #3
 8003e0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e10:	00e2      	lsls	r2, r4, #3
 8003e12:	460b      	mov	r3, r1
 8003e14:	3307      	adds	r3, #7
 8003e16:	08db      	lsrs	r3, r3, #3
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	ebad 0d03 	sub.w	sp, sp, r3
 8003e1e:	466b      	mov	r3, sp
 8003e20:	3300      	adds	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
    i2c_read(status, sizeof(status));
 8003e24:	f107 0308 	add.w	r3, r7, #8
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ffa0 	bl	8003d70 <i2c_read>
    if (status[0] != PN532_I2C_READY) {
 8003e30:	7a3b      	ldrb	r3, [r7, #8]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d002      	beq.n	8003e3c <PN532_I2C_ReadData+0x7c>
        return PN532_STATUS_ERROR;
 8003e36:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3a:	e01a      	b.n	8003e72 <PN532_I2C_ReadData+0xb2>
    }
    i2c_read(frame, count + 1);
 8003e3c:	887b      	ldrh	r3, [r7, #2]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	4619      	mov	r1, r3
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7ff ff93 	bl	8003d70 <i2c_read>
    for (uint8_t i = 0; i < count; i++) {
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	75fb      	strb	r3, [r7, #23]
 8003e4e:	e00a      	b.n	8003e66 <PN532_I2C_ReadData+0xa6>
        data[i] = frame[i + 1];
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	440b      	add	r3, r1
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	5c8a      	ldrb	r2, [r1, r2]
 8003e5e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	3301      	adds	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d8ef      	bhi.n	8003e50 <PN532_I2C_ReadData+0x90>
    }
    return PN532_STATUS_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	46b5      	mov	sp, r6
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003e7e <PN532_I2C_WriteData>:

int PN532_I2C_WriteData(uint8_t *data, uint16_t count) {
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	807b      	strh	r3, [r7, #2]
    i2c_write(data, count);
 8003e8a:	887b      	ldrh	r3, [r7, #2]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff ff82 	bl	8003d98 <i2c_write>
    return PN532_STATUS_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <PN532_I2C_WaitReady>:

bool PN532_I2C_WaitReady(uint32_t timeout) {
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {0x00};
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	723b      	strb	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8003eaa:	f000 fa7d 	bl	80043a8 <HAL_GetTick>
 8003eae:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8003eb0:	e00d      	b.n	8003ece <PN532_I2C_WaitReady+0x30>
        i2c_read(status, sizeof(status));
 8003eb2:	f107 0308 	add.w	r3, r7, #8
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff59 	bl	8003d70 <i2c_read>
        if (status[0] == PN532_I2C_READY) {
 8003ebe:	7a3b      	ldrb	r3, [r7, #8]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <PN532_I2C_WaitReady+0x2a>
            return true;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e00b      	b.n	8003ee0 <PN532_I2C_WaitReady+0x42>
        } else {
            HAL_Delay(5);
 8003ec8:	2005      	movs	r0, #5
 8003eca:	f000 fa79 	bl	80043c0 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8003ece:	f000 fa6b 	bl	80043a8 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d8e9      	bhi.n	8003eb2 <PN532_I2C_WaitReady+0x14>
        }
    }
    return false;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <PN532_I2C_Wakeup>:

int PN532_I2C_Wakeup(void) {
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
    HAL_Delay(100);
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_RESET);
    HAL_Delay(100);
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_SET);
    HAL_Delay(500);*/
    return PN532_STATUS_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <PN532_I2C_Init>:

void PN532_I2C_Init(PN532* pn532) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0c      	ldr	r2, [pc, #48]	; (8003f34 <PN532_I2C_Init+0x3c>)
 8003f04:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_I2C_ReadData;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a0b      	ldr	r2, [pc, #44]	; (8003f38 <PN532_I2C_Init+0x40>)
 8003f0a:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_I2C_WriteData;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a0b      	ldr	r2, [pc, #44]	; (8003f3c <PN532_I2C_Init+0x44>)
 8003f10:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_I2C_WaitReady;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <PN532_I2C_Init+0x48>)
 8003f16:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_I2C_Wakeup;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a0a      	ldr	r2, [pc, #40]	; (8003f44 <PN532_I2C_Init+0x4c>)
 8003f1c:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <PN532_I2C_Init+0x50>)
 8003f22:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	4798      	blx	r3
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	08003d45 	.word	0x08003d45
 8003f38:	08003dc1 	.word	0x08003dc1
 8003f3c:	08003e7f 	.word	0x08003e7f
 8003f40:	08003e9f 	.word	0x08003e9f
 8003f44:	08003ee9 	.word	0x08003ee9
 8003f48:	08003d55 	.word	0x08003d55

08003f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	607b      	str	r3, [r7, #4]
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <HAL_MspInit+0x4c>)
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	4a0f      	ldr	r2, [pc, #60]	; (8003f98 <HAL_MspInit+0x4c>)
 8003f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f60:	6453      	str	r3, [r2, #68]	; 0x44
 8003f62:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <HAL_MspInit+0x4c>)
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f6a:	607b      	str	r3, [r7, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <HAL_MspInit+0x4c>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <HAL_MspInit+0x4c>)
 8003f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <HAL_MspInit+0x4c>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f8a:	2007      	movs	r0, #7
 8003f8c:	f000 faee 	bl	800456c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40023800 	.word	0x40023800

08003f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	; 0x28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa4:	f107 0314 	add.w	r3, r7, #20
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a19      	ldr	r2, [pc, #100]	; (8004020 <HAL_I2C_MspInit+0x84>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d12c      	bne.n	8004018 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	4b18      	ldr	r3, [pc, #96]	; (8004024 <HAL_I2C_MspInit+0x88>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	4a17      	ldr	r2, [pc, #92]	; (8004024 <HAL_I2C_MspInit+0x88>)
 8003fc8:	f043 0302 	orr.w	r3, r3, #2
 8003fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <HAL_I2C_MspInit+0x88>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003fda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fe0:	2312      	movs	r3, #18
 8003fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fec:	2304      	movs	r3, #4
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ff0:	f107 0314 	add.w	r3, r7, #20
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	480c      	ldr	r0, [pc, #48]	; (8004028 <HAL_I2C_MspInit+0x8c>)
 8003ff8:	f000 faec 	bl	80045d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	4b08      	ldr	r3, [pc, #32]	; (8004024 <HAL_I2C_MspInit+0x88>)
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	4a07      	ldr	r2, [pc, #28]	; (8004024 <HAL_I2C_MspInit+0x88>)
 8004006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800400a:	6413      	str	r3, [r2, #64]	; 0x40
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <HAL_I2C_MspInit+0x88>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004018:	bf00      	nop
 800401a:	3728      	adds	r7, #40	; 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40005400 	.word	0x40005400
 8004024:	40023800 	.word	0x40023800
 8004028:	40020400 	.word	0x40020400

0800402c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	; 0x28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004034:	f107 0314 	add.w	r3, r7, #20
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	60da      	str	r2, [r3, #12]
 8004042:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <HAL_UART_MspInit+0x84>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d12b      	bne.n	80040a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <HAL_UART_MspInit+0x88>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <HAL_UART_MspInit+0x88>)
 8004058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800405c:	6413      	str	r3, [r2, #64]	; 0x40
 800405e:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <HAL_UART_MspInit+0x88>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <HAL_UART_MspInit+0x88>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	4a10      	ldr	r2, [pc, #64]	; (80040b4 <HAL_UART_MspInit+0x88>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6313      	str	r3, [r2, #48]	; 0x30
 800407a:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <HAL_UART_MspInit+0x88>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004086:	230c      	movs	r3, #12
 8004088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408a:	2302      	movs	r3, #2
 800408c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004092:	2303      	movs	r3, #3
 8004094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004096:	2307      	movs	r3, #7
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800409a:	f107 0314 	add.w	r3, r7, #20
 800409e:	4619      	mov	r1, r3
 80040a0:	4805      	ldr	r0, [pc, #20]	; (80040b8 <HAL_UART_MspInit+0x8c>)
 80040a2:	f000 fa97 	bl	80045d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80040a6:	bf00      	nop
 80040a8:	3728      	adds	r7, #40	; 0x28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40004400 	.word	0x40004400
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40020000 	.word	0x40020000

080040bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040c0:	e7fe      	b.n	80040c0 <NMI_Handler+0x4>

080040c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040c6:	e7fe      	b.n	80040c6 <HardFault_Handler+0x4>

080040c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040cc:	e7fe      	b.n	80040cc <MemManage_Handler+0x4>

080040ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040d2:	e7fe      	b.n	80040d2 <BusFault_Handler+0x4>

080040d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040d8:	e7fe      	b.n	80040d8 <UsageFault_Handler+0x4>

080040da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040da:	b480      	push	{r7}
 80040dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040de:	bf00      	nop
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040f6:	b480      	push	{r7}
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004108:	f000 f93a 	bl	8004380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800410c:	bf00      	nop
 800410e:	bd80      	pop	{r7, pc}

08004110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return 1;
 8004114:	2301      	movs	r3, #1
}
 8004116:	4618      	mov	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <_kill>:

int _kill(int pid, int sig)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800412a:	f002 fde3 	bl	8006cf4 <__errno>
 800412e:	4603      	mov	r3, r0
 8004130:	2216      	movs	r2, #22
 8004132:	601a      	str	r2, [r3, #0]
  return -1;
 8004134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <_exit>:

void _exit (int status)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004148:	f04f 31ff 	mov.w	r1, #4294967295
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff ffe7 	bl	8004120 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004152:	e7fe      	b.n	8004152 <_exit+0x12>

08004154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	e00a      	b.n	800417c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004166:	f3af 8000 	nop.w
 800416a:	4601      	mov	r1, r0
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	60ba      	str	r2, [r7, #8]
 8004172:	b2ca      	uxtb	r2, r1
 8004174:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	3301      	adds	r3, #1
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	429a      	cmp	r2, r3
 8004182:	dbf0      	blt.n	8004166 <_read+0x12>
  }

  return len;
 8004184:	687b      	ldr	r3, [r7, #4]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <_close>:
  }
  return len;
}

int _close(int file)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041b6:	605a      	str	r2, [r3, #4]
  return 0;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <_isatty>:

int _isatty(int file)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041ce:	2301      	movs	r3, #1
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004200:	4a14      	ldr	r2, [pc, #80]	; (8004254 <_sbrk+0x5c>)
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <_sbrk+0x60>)
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <_sbrk+0x64>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004214:	4b11      	ldr	r3, [pc, #68]	; (800425c <_sbrk+0x64>)
 8004216:	4a12      	ldr	r2, [pc, #72]	; (8004260 <_sbrk+0x68>)
 8004218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <_sbrk+0x64>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4413      	add	r3, r2
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	429a      	cmp	r2, r3
 8004226:	d207      	bcs.n	8004238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004228:	f002 fd64 	bl	8006cf4 <__errno>
 800422c:	4603      	mov	r3, r0
 800422e:	220c      	movs	r2, #12
 8004230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004232:	f04f 33ff 	mov.w	r3, #4294967295
 8004236:	e009      	b.n	800424c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <_sbrk+0x64>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <_sbrk+0x64>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	4a05      	ldr	r2, [pc, #20]	; (800425c <_sbrk+0x64>)
 8004248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800424a:	68fb      	ldr	r3, [r7, #12]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20020000 	.word	0x20020000
 8004258:	00000400 	.word	0x00000400
 800425c:	20000154 	.word	0x20000154
 8004260:	200002a8 	.word	0x200002a8

08004264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004268:	4b06      	ldr	r3, [pc, #24]	; (8004284 <SystemInit+0x20>)
 800426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426e:	4a05      	ldr	r2, [pc, #20]	; (8004284 <SystemInit+0x20>)
 8004270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004278:	bf00      	nop
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800428c:	f7ff ffea 	bl	8004264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004290:	480c      	ldr	r0, [pc, #48]	; (80042c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004292:	490d      	ldr	r1, [pc, #52]	; (80042c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004294:	4a0d      	ldr	r2, [pc, #52]	; (80042cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004298:	e002      	b.n	80042a0 <LoopCopyDataInit>

0800429a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800429a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800429c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429e:	3304      	adds	r3, #4

080042a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a4:	d3f9      	bcc.n	800429a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a6:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042a8:	4c0a      	ldr	r4, [pc, #40]	; (80042d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042ac:	e001      	b.n	80042b2 <LoopFillZerobss>

080042ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b0:	3204      	adds	r2, #4

080042b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b4:	d3fb      	bcc.n	80042ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042b6:	f002 fd23 	bl	8006d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ba:	f7fd fde5 	bl	8001e88 <main>
  bx  lr    
 80042be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80042c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042c8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80042cc:	0800859c 	.word	0x0800859c
  ldr r2, =_sbss
 80042d0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80042d4:	200002a8 	.word	0x200002a8

080042d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042d8:	e7fe      	b.n	80042d8 <ADC_IRQHandler>
	...

080042dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <HAL_Init+0x40>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a0d      	ldr	r2, [pc, #52]	; (800431c <HAL_Init+0x40>)
 80042e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_Init+0x40>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0a      	ldr	r2, [pc, #40]	; (800431c <HAL_Init+0x40>)
 80042f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042f8:	4b08      	ldr	r3, [pc, #32]	; (800431c <HAL_Init+0x40>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a07      	ldr	r2, [pc, #28]	; (800431c <HAL_Init+0x40>)
 80042fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004304:	2003      	movs	r0, #3
 8004306:	f000 f931 	bl	800456c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800430a:	2000      	movs	r0, #0
 800430c:	f000 f808 	bl	8004320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004310:	f7ff fe1c 	bl	8003f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023c00 	.word	0x40023c00

08004320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004328:	4b12      	ldr	r3, [pc, #72]	; (8004374 <HAL_InitTick+0x54>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_InitTick+0x58>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	4619      	mov	r1, r3
 8004332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004336:	fbb3 f3f1 	udiv	r3, r3, r1
 800433a:	fbb2 f3f3 	udiv	r3, r2, r3
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f93b 	bl	80045ba <HAL_SYSTICK_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e00e      	b.n	800436c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b0f      	cmp	r3, #15
 8004352:	d80a      	bhi.n	800436a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004354:	2200      	movs	r2, #0
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	f000 f911 	bl	8004582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004360:	4a06      	ldr	r2, [pc, #24]	; (800437c <HAL_InitTick+0x5c>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e000      	b.n	800436c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000004 	.word	0x20000004
 8004378:	2000000c 	.word	0x2000000c
 800437c:	20000008 	.word	0x20000008

08004380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_IncTick+0x20>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_IncTick+0x24>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4413      	add	r3, r2
 8004390:	4a04      	ldr	r2, [pc, #16]	; (80043a4 <HAL_IncTick+0x24>)
 8004392:	6013      	str	r3, [r2, #0]
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	2000000c 	.word	0x2000000c
 80043a4:	20000158 	.word	0x20000158

080043a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return uwTick;
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <HAL_GetTick+0x14>)
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000158 	.word	0x20000158

080043c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043c8:	f7ff ffee 	bl	80043a8 <HAL_GetTick>
 80043cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d005      	beq.n	80043e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043da:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <HAL_Delay+0x44>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043e6:	bf00      	nop
 80043e8:	f7ff ffde 	bl	80043a8 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d8f7      	bhi.n	80043e8 <HAL_Delay+0x28>
  {
  }
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	2000000c 	.word	0x2000000c

08004408 <__NVIC_SetPriorityGrouping>:
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <__NVIC_SetPriorityGrouping+0x44>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004424:	4013      	ands	r3, r2
 8004426:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800443a:	4a04      	ldr	r2, [pc, #16]	; (800444c <__NVIC_SetPriorityGrouping+0x44>)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	60d3      	str	r3, [r2, #12]
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <__NVIC_GetPriorityGrouping>:
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004454:	4b04      	ldr	r3, [pc, #16]	; (8004468 <__NVIC_GetPriorityGrouping+0x18>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	f003 0307 	and.w	r3, r3, #7
}
 800445e:	4618      	mov	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	e000ed00 	.word	0xe000ed00

0800446c <__NVIC_SetPriority>:
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	6039      	str	r1, [r7, #0]
 8004476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447c:	2b00      	cmp	r3, #0
 800447e:	db0a      	blt.n	8004496 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	490c      	ldr	r1, [pc, #48]	; (80044b8 <__NVIC_SetPriority+0x4c>)
 8004486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448a:	0112      	lsls	r2, r2, #4
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	440b      	add	r3, r1
 8004490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004494:	e00a      	b.n	80044ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	4908      	ldr	r1, [pc, #32]	; (80044bc <__NVIC_SetPriority+0x50>)
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	3b04      	subs	r3, #4
 80044a4:	0112      	lsls	r2, r2, #4
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	440b      	add	r3, r1
 80044aa:	761a      	strb	r2, [r3, #24]
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	e000e100 	.word	0xe000e100
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <NVIC_EncodePriority>:
{
 80044c0:	b480      	push	{r7}
 80044c2:	b089      	sub	sp, #36	; 0x24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f1c3 0307 	rsb	r3, r3, #7
 80044da:	2b04      	cmp	r3, #4
 80044dc:	bf28      	it	cs
 80044de:	2304      	movcs	r3, #4
 80044e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	3304      	adds	r3, #4
 80044e6:	2b06      	cmp	r3, #6
 80044e8:	d902      	bls.n	80044f0 <NVIC_EncodePriority+0x30>
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	3b03      	subs	r3, #3
 80044ee:	e000      	b.n	80044f2 <NVIC_EncodePriority+0x32>
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f4:	f04f 32ff 	mov.w	r2, #4294967295
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43da      	mvns	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	401a      	ands	r2, r3
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004508:	f04f 31ff 	mov.w	r1, #4294967295
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	fa01 f303 	lsl.w	r3, r1, r3
 8004512:	43d9      	mvns	r1, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004518:	4313      	orrs	r3, r2
}
 800451a:	4618      	mov	r0, r3
 800451c:	3724      	adds	r7, #36	; 0x24
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <SysTick_Config>:
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3b01      	subs	r3, #1
 8004534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004538:	d301      	bcc.n	800453e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800453a:	2301      	movs	r3, #1
 800453c:	e00f      	b.n	800455e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800453e:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <SysTick_Config+0x40>)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3b01      	subs	r3, #1
 8004544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004546:	210f      	movs	r1, #15
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	f7ff ff8e 	bl	800446c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <SysTick_Config+0x40>)
 8004552:	2200      	movs	r2, #0
 8004554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004556:	4b04      	ldr	r3, [pc, #16]	; (8004568 <SysTick_Config+0x40>)
 8004558:	2207      	movs	r2, #7
 800455a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	e000e010 	.word	0xe000e010

0800456c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff ff47 	bl	8004408 <__NVIC_SetPriorityGrouping>
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004582:	b580      	push	{r7, lr}
 8004584:	b086      	sub	sp, #24
 8004586:	af00      	add	r7, sp, #0
 8004588:	4603      	mov	r3, r0
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004594:	f7ff ff5c 	bl	8004450 <__NVIC_GetPriorityGrouping>
 8004598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	6978      	ldr	r0, [r7, #20]
 80045a0:	f7ff ff8e 	bl	80044c0 <NVIC_EncodePriority>
 80045a4:	4602      	mov	r2, r0
 80045a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff ff5d 	bl	800446c <__NVIC_SetPriority>
}
 80045b2:	bf00      	nop
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff ffb0 	bl	8004528 <SysTick_Config>
 80045c8:	4603      	mov	r3, r0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b089      	sub	sp, #36	; 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	e159      	b.n	80048a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045f0:	2201      	movs	r2, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4013      	ands	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	429a      	cmp	r2, r3
 800460a:	f040 8148 	bne.w	800489e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b01      	cmp	r3, #1
 8004618:	d005      	beq.n	8004626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004622:	2b02      	cmp	r3, #2
 8004624:	d130      	bne.n	8004688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	2203      	movs	r2, #3
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800465c:	2201      	movs	r2, #1
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 0201 	and.w	r2, r3, #1
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2b03      	cmp	r3, #3
 8004692:	d017      	beq.n	80046c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	2203      	movs	r2, #3
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d123      	bne.n	8004718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	08da      	lsrs	r2, r3, #3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3208      	adds	r2, #8
 80046d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	220f      	movs	r2, #15
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	08da      	lsrs	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3208      	adds	r2, #8
 8004712:	69b9      	ldr	r1, [r7, #24]
 8004714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	2203      	movs	r2, #3
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0203 	and.w	r2, r3, #3
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80a2 	beq.w	800489e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	4b57      	ldr	r3, [pc, #348]	; (80048bc <HAL_GPIO_Init+0x2e8>)
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	4a56      	ldr	r2, [pc, #344]	; (80048bc <HAL_GPIO_Init+0x2e8>)
 8004764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004768:	6453      	str	r3, [r2, #68]	; 0x44
 800476a:	4b54      	ldr	r3, [pc, #336]	; (80048bc <HAL_GPIO_Init+0x2e8>)
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004776:	4a52      	ldr	r2, [pc, #328]	; (80048c0 <HAL_GPIO_Init+0x2ec>)
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	089b      	lsrs	r3, r3, #2
 800477c:	3302      	adds	r3, #2
 800477e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	220f      	movs	r2, #15
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43db      	mvns	r3, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a49      	ldr	r2, [pc, #292]	; (80048c4 <HAL_GPIO_Init+0x2f0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d019      	beq.n	80047d6 <HAL_GPIO_Init+0x202>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a48      	ldr	r2, [pc, #288]	; (80048c8 <HAL_GPIO_Init+0x2f4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d013      	beq.n	80047d2 <HAL_GPIO_Init+0x1fe>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a47      	ldr	r2, [pc, #284]	; (80048cc <HAL_GPIO_Init+0x2f8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00d      	beq.n	80047ce <HAL_GPIO_Init+0x1fa>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a46      	ldr	r2, [pc, #280]	; (80048d0 <HAL_GPIO_Init+0x2fc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d007      	beq.n	80047ca <HAL_GPIO_Init+0x1f6>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a45      	ldr	r2, [pc, #276]	; (80048d4 <HAL_GPIO_Init+0x300>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d101      	bne.n	80047c6 <HAL_GPIO_Init+0x1f2>
 80047c2:	2304      	movs	r3, #4
 80047c4:	e008      	b.n	80047d8 <HAL_GPIO_Init+0x204>
 80047c6:	2307      	movs	r3, #7
 80047c8:	e006      	b.n	80047d8 <HAL_GPIO_Init+0x204>
 80047ca:	2303      	movs	r3, #3
 80047cc:	e004      	b.n	80047d8 <HAL_GPIO_Init+0x204>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e002      	b.n	80047d8 <HAL_GPIO_Init+0x204>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <HAL_GPIO_Init+0x204>
 80047d6:	2300      	movs	r3, #0
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	f002 0203 	and.w	r2, r2, #3
 80047de:	0092      	lsls	r2, r2, #2
 80047e0:	4093      	lsls	r3, r2
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047e8:	4935      	ldr	r1, [pc, #212]	; (80048c0 <HAL_GPIO_Init+0x2ec>)
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	089b      	lsrs	r3, r3, #2
 80047ee:	3302      	adds	r3, #2
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047f6:	4b38      	ldr	r3, [pc, #224]	; (80048d8 <HAL_GPIO_Init+0x304>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	43db      	mvns	r3, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800481a:	4a2f      	ldr	r2, [pc, #188]	; (80048d8 <HAL_GPIO_Init+0x304>)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004820:	4b2d      	ldr	r3, [pc, #180]	; (80048d8 <HAL_GPIO_Init+0x304>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	43db      	mvns	r3, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4013      	ands	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004844:	4a24      	ldr	r2, [pc, #144]	; (80048d8 <HAL_GPIO_Init+0x304>)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800484a:	4b23      	ldr	r3, [pc, #140]	; (80048d8 <HAL_GPIO_Init+0x304>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800486e:	4a1a      	ldr	r2, [pc, #104]	; (80048d8 <HAL_GPIO_Init+0x304>)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004874:	4b18      	ldr	r3, [pc, #96]	; (80048d8 <HAL_GPIO_Init+0x304>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004898:	4a0f      	ldr	r2, [pc, #60]	; (80048d8 <HAL_GPIO_Init+0x304>)
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3301      	adds	r3, #1
 80048a2:	61fb      	str	r3, [r7, #28]
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	2b0f      	cmp	r3, #15
 80048a8:	f67f aea2 	bls.w	80045f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	3724      	adds	r7, #36	; 0x24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40023800 	.word	0x40023800
 80048c0:	40013800 	.word	0x40013800
 80048c4:	40020000 	.word	0x40020000
 80048c8:	40020400 	.word	0x40020400
 80048cc:	40020800 	.word	0x40020800
 80048d0:	40020c00 	.word	0x40020c00
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40013c00 	.word	0x40013c00

080048dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	807b      	strh	r3, [r7, #2]
 80048e8:	4613      	mov	r3, r2
 80048ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048ec:	787b      	ldrb	r3, [r7, #1]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048f2:	887a      	ldrh	r2, [r7, #2]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048f8:	e003      	b.n	8004902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048fa:	887b      	ldrh	r3, [r7, #2]
 80048fc:	041a      	lsls	r2, r3, #16
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	619a      	str	r2, [r3, #24]
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
	...

08004910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e12b      	b.n	8004b7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff fb30 	bl	8003f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2224      	movs	r2, #36	; 0x24
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004962:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004972:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004974:	f001 fc36 	bl	80061e4 <HAL_RCC_GetPCLK1Freq>
 8004978:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4a81      	ldr	r2, [pc, #516]	; (8004b84 <HAL_I2C_Init+0x274>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d807      	bhi.n	8004994 <HAL_I2C_Init+0x84>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4a80      	ldr	r2, [pc, #512]	; (8004b88 <HAL_I2C_Init+0x278>)
 8004988:	4293      	cmp	r3, r2
 800498a:	bf94      	ite	ls
 800498c:	2301      	movls	r3, #1
 800498e:	2300      	movhi	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	e006      	b.n	80049a2 <HAL_I2C_Init+0x92>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4a7d      	ldr	r2, [pc, #500]	; (8004b8c <HAL_I2C_Init+0x27c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	bf94      	ite	ls
 800499c:	2301      	movls	r3, #1
 800499e:	2300      	movhi	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0e7      	b.n	8004b7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4a78      	ldr	r2, [pc, #480]	; (8004b90 <HAL_I2C_Init+0x280>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	0c9b      	lsrs	r3, r3, #18
 80049b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4a6a      	ldr	r2, [pc, #424]	; (8004b84 <HAL_I2C_Init+0x274>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d802      	bhi.n	80049e4 <HAL_I2C_Init+0xd4>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	3301      	adds	r3, #1
 80049e2:	e009      	b.n	80049f8 <HAL_I2C_Init+0xe8>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	4a69      	ldr	r2, [pc, #420]	; (8004b94 <HAL_I2C_Init+0x284>)
 80049f0:	fba2 2303 	umull	r2, r3, r2, r3
 80049f4:	099b      	lsrs	r3, r3, #6
 80049f6:	3301      	adds	r3, #1
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	430b      	orrs	r3, r1
 80049fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	495c      	ldr	r1, [pc, #368]	; (8004b84 <HAL_I2C_Init+0x274>)
 8004a14:	428b      	cmp	r3, r1
 8004a16:	d819      	bhi.n	8004a4c <HAL_I2C_Init+0x13c>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1e59      	subs	r1, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a26:	1c59      	adds	r1, r3, #1
 8004a28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a2c:	400b      	ands	r3, r1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_I2C_Init+0x138>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1e59      	subs	r1, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a40:	3301      	adds	r3, #1
 8004a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a46:	e051      	b.n	8004aec <HAL_I2C_Init+0x1dc>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	e04f      	b.n	8004aec <HAL_I2C_Init+0x1dc>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d111      	bne.n	8004a78 <HAL_I2C_Init+0x168>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	1e58      	subs	r0, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6859      	ldr	r1, [r3, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	440b      	add	r3, r1
 8004a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e012      	b.n	8004a9e <HAL_I2C_Init+0x18e>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	1e58      	subs	r0, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6859      	ldr	r1, [r3, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	0099      	lsls	r1, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a8e:	3301      	adds	r3, #1
 8004a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_I2C_Init+0x196>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e022      	b.n	8004aec <HAL_I2C_Init+0x1dc>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10e      	bne.n	8004acc <HAL_I2C_Init+0x1bc>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1e58      	subs	r0, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	440b      	add	r3, r1
 8004abc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aca:	e00f      	b.n	8004aec <HAL_I2C_Init+0x1dc>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1e58      	subs	r0, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6859      	ldr	r1, [r3, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	0099      	lsls	r1, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	6809      	ldr	r1, [r1, #0]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69da      	ldr	r2, [r3, #28]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6911      	ldr	r1, [r2, #16]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68d2      	ldr	r2, [r2, #12]
 8004b26:	4311      	orrs	r1, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	000186a0 	.word	0x000186a0
 8004b88:	001e847f 	.word	0x001e847f
 8004b8c:	003d08ff 	.word	0x003d08ff
 8004b90:	431bde83 	.word	0x431bde83
 8004b94:	10624dd3 	.word	0x10624dd3

08004b98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	817b      	strh	r3, [r7, #10]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bac:	f7ff fbfc 	bl	80043a8 <HAL_GetTick>
 8004bb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	f040 80e0 	bne.w	8004d80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2319      	movs	r3, #25
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4970      	ldr	r1, [pc, #448]	; (8004d8c <HAL_I2C_Master_Transmit+0x1f4>)
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fc64 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e0d3      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_I2C_Master_Transmit+0x50>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e0cc      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d007      	beq.n	8004c0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2221      	movs	r2, #33	; 0x21
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2210      	movs	r2, #16
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	893a      	ldrh	r2, [r7, #8]
 8004c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4a50      	ldr	r2, [pc, #320]	; (8004d90 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c50:	8979      	ldrh	r1, [r7, #10]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	6a3a      	ldr	r2, [r7, #32]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 face 	bl	80051f8 <I2C_MasterRequestWrite>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e08d      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c7c:	e066      	b.n	8004d4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	6a39      	ldr	r1, [r7, #32]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fd22 	bl	80056cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d107      	bne.n	8004ca6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e06b      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	781a      	ldrb	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d11b      	bne.n	8004d20 <HAL_I2C_Master_Transmit+0x188>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d017      	beq.n	8004d20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	781a      	ldrb	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	6a39      	ldr	r1, [r7, #32]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fd19 	bl	800575c <I2C_WaitOnBTFFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00d      	beq.n	8004d4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d107      	bne.n	8004d48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e01a      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d194      	bne.n	8004c7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	00100002 	.word	0x00100002
 8004d90:	ffff0000 	.word	0xffff0000

08004d94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08c      	sub	sp, #48	; 0x30
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	460b      	mov	r3, r1
 8004da2:	817b      	strh	r3, [r7, #10]
 8004da4:	4613      	mov	r3, r2
 8004da6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004da8:	f7ff fafe 	bl	80043a8 <HAL_GetTick>
 8004dac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	f040 8217 	bne.w	80051ea <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	2319      	movs	r3, #25
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	497c      	ldr	r1, [pc, #496]	; (8004fb8 <HAL_I2C_Master_Receive+0x224>)
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fb66 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e20a      	b.n	80051ec <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_I2C_Master_Receive+0x50>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e203      	b.n	80051ec <HAL_I2C_Master_Receive+0x458>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d007      	beq.n	8004e0a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2222      	movs	r2, #34	; 0x22
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2210      	movs	r2, #16
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	893a      	ldrh	r2, [r7, #8]
 8004e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4a5c      	ldr	r2, [pc, #368]	; (8004fbc <HAL_I2C_Master_Receive+0x228>)
 8004e4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e4c:	8979      	ldrh	r1, [r7, #10]
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 fa52 	bl	80052fc <I2C_MasterRequestRead>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e1c4      	b.n	80051ec <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d113      	bne.n	8004e92 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	623b      	str	r3, [r7, #32]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	623b      	str	r3, [r7, #32]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	623b      	str	r3, [r7, #32]
 8004e7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e198      	b.n	80051c4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d11b      	bne.n	8004ed2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	e178      	b.n	80051c4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d11b      	bne.n	8004f12 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efa:	2300      	movs	r3, #0
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	e158      	b.n	80051c4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f38:	e144      	b.n	80051c4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	f200 80f1 	bhi.w	8005126 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d123      	bne.n	8004f94 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fc4b 	bl	80057ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e145      	b.n	80051ec <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f92:	e117      	b.n	80051c4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d14e      	bne.n	800503a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	4906      	ldr	r1, [pc, #24]	; (8004fc0 <HAL_I2C_Master_Receive+0x22c>)
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 fa76 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d008      	beq.n	8004fc4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e11a      	b.n	80051ec <HAL_I2C_Master_Receive+0x458>
 8004fb6:	bf00      	nop
 8004fb8:	00100002 	.word	0x00100002
 8004fbc:	ffff0000 	.word	0xffff0000
 8004fc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005038:	e0c4      	b.n	80051c4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	2200      	movs	r2, #0
 8005042:	496c      	ldr	r1, [pc, #432]	; (80051f4 <HAL_I2C_Master_Receive+0x460>)
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fa27 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0cb      	b.n	80051ec <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	2200      	movs	r2, #0
 800509e:	4955      	ldr	r1, [pc, #340]	; (80051f4 <HAL_I2C_Master_Receive+0x460>)
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f9f9 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e09d      	b.n	80051ec <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005124:	e04e      	b.n	80051c4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005128:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fb5e 	bl	80057ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e058      	b.n	80051ec <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b04      	cmp	r3, #4
 8005178:	d124      	bne.n	80051c4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517e:	2b03      	cmp	r3, #3
 8005180:	d107      	bne.n	8005192 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005190:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f47f aeb6 	bne.w	8004f3a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e000      	b.n	80051ec <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80051ea:	2302      	movs	r3, #2
  }
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3728      	adds	r7, #40	; 0x28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	00010004 	.word	0x00010004

080051f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	460b      	mov	r3, r1
 8005206:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d006      	beq.n	8005222 <I2C_MasterRequestWrite+0x2a>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d003      	beq.n	8005222 <I2C_MasterRequestWrite+0x2a>
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005220:	d108      	bne.n	8005234 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e00b      	b.n	800524c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	2b12      	cmp	r3, #18
 800523a:	d107      	bne.n	800524c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800524a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f91d 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00d      	beq.n	8005280 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005272:	d103      	bne.n	800527c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800527a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e035      	b.n	80052ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005288:	d108      	bne.n	800529c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800528a:	897b      	ldrh	r3, [r7, #10]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005298:	611a      	str	r2, [r3, #16]
 800529a:	e01b      	b.n	80052d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800529c:	897b      	ldrh	r3, [r7, #10]
 800529e:	11db      	asrs	r3, r3, #7
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	f003 0306 	and.w	r3, r3, #6
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	f063 030f 	orn	r3, r3, #15
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	490e      	ldr	r1, [pc, #56]	; (80052f4 <I2C_MasterRequestWrite+0xfc>)
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f966 	bl	800558c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e010      	b.n	80052ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052ca:	897b      	ldrh	r3, [r7, #10]
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	4907      	ldr	r1, [pc, #28]	; (80052f8 <I2C_MasterRequestWrite+0x100>)
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f956 	bl	800558c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	00010008 	.word	0x00010008
 80052f8:	00010002 	.word	0x00010002

080052fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	607a      	str	r2, [r7, #4]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	460b      	mov	r3, r1
 800530a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005320:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d006      	beq.n	8005336 <I2C_MasterRequestRead+0x3a>
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d003      	beq.n	8005336 <I2C_MasterRequestRead+0x3a>
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005334:	d108      	bne.n	8005348 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e00b      	b.n	8005360 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	2b11      	cmp	r3, #17
 800534e:	d107      	bne.n	8005360 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800535e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f893 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00d      	beq.n	8005394 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005386:	d103      	bne.n	8005390 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800538e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e079      	b.n	8005488 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800539c:	d108      	bne.n	80053b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800539e:	897b      	ldrh	r3, [r7, #10]
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	611a      	str	r2, [r3, #16]
 80053ae:	e05f      	b.n	8005470 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053b0:	897b      	ldrh	r3, [r7, #10]
 80053b2:	11db      	asrs	r3, r3, #7
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f003 0306 	and.w	r3, r3, #6
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	f063 030f 	orn	r3, r3, #15
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	4930      	ldr	r1, [pc, #192]	; (8005490 <I2C_MasterRequestRead+0x194>)
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f8dc 	bl	800558c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e054      	b.n	8005488 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053de:	897b      	ldrh	r3, [r7, #10]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	4929      	ldr	r1, [pc, #164]	; (8005494 <I2C_MasterRequestRead+0x198>)
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f8cc 	bl	800558c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e044      	b.n	8005488 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053fe:	2300      	movs	r3, #0
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005422:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 f831 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00d      	beq.n	8005458 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544a:	d103      	bne.n	8005454 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005452:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e017      	b.n	8005488 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005458:	897b      	ldrh	r3, [r7, #10]
 800545a:	11db      	asrs	r3, r3, #7
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f003 0306 	and.w	r3, r3, #6
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f063 030e 	orn	r3, r3, #14
 8005468:	b2da      	uxtb	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	4907      	ldr	r1, [pc, #28]	; (8005494 <I2C_MasterRequestRead+0x198>)
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f888 	bl	800558c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	00010008 	.word	0x00010008
 8005494:	00010002 	.word	0x00010002

08005498 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	603b      	str	r3, [r7, #0]
 80054a4:	4613      	mov	r3, r2
 80054a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054a8:	e048      	b.n	800553c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d044      	beq.n	800553c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b2:	f7fe ff79 	bl	80043a8 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d302      	bcc.n	80054c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d139      	bne.n	800553c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	0c1b      	lsrs	r3, r3, #16
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d10d      	bne.n	80054ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	43da      	mvns	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4013      	ands	r3, r2
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	e00c      	b.n	8005508 <I2C_WaitOnFlagUntilTimeout+0x70>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	43da      	mvns	r2, r3
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	4013      	ands	r3, r2
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	461a      	mov	r2, r3
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	429a      	cmp	r2, r3
 800550c:	d116      	bne.n	800553c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	f043 0220 	orr.w	r2, r3, #32
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e023      	b.n	8005584 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	0c1b      	lsrs	r3, r3, #16
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b01      	cmp	r3, #1
 8005544:	d10d      	bne.n	8005562 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	43da      	mvns	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4013      	ands	r3, r2
 8005552:	b29b      	uxth	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	bf0c      	ite	eq
 8005558:	2301      	moveq	r3, #1
 800555a:	2300      	movne	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	e00c      	b.n	800557c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	43da      	mvns	r2, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4013      	ands	r3, r2
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	429a      	cmp	r2, r3
 8005580:	d093      	beq.n	80054aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800559a:	e071      	b.n	8005680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055aa:	d123      	bne.n	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	f043 0204 	orr.w	r2, r3, #4
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e067      	b.n	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	d041      	beq.n	8005680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fc:	f7fe fed4 	bl	80043a8 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d302      	bcc.n	8005612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d136      	bne.n	8005680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	0c1b      	lsrs	r3, r3, #16
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b01      	cmp	r3, #1
 800561a:	d10c      	bne.n	8005636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	43da      	mvns	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4013      	ands	r3, r2
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	bf14      	ite	ne
 800562e:	2301      	movne	r3, #1
 8005630:	2300      	moveq	r3, #0
 8005632:	b2db      	uxtb	r3, r3
 8005634:	e00b      	b.n	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	43da      	mvns	r2, r3
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4013      	ands	r3, r2
 8005642:	b29b      	uxth	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	bf14      	ite	ne
 8005648:	2301      	movne	r3, #1
 800564a:	2300      	moveq	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d016      	beq.n	8005680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	f043 0220 	orr.w	r2, r3, #32
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e021      	b.n	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	0c1b      	lsrs	r3, r3, #16
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b01      	cmp	r3, #1
 8005688:	d10c      	bne.n	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	43da      	mvns	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	4013      	ands	r3, r2
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	bf14      	ite	ne
 800569c:	2301      	movne	r3, #1
 800569e:	2300      	moveq	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	e00b      	b.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	43da      	mvns	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4013      	ands	r3, r2
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	bf14      	ite	ne
 80056b6:	2301      	movne	r3, #1
 80056b8:	2300      	moveq	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f47f af6d 	bne.w	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d8:	e034      	b.n	8005744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 f8e3 	bl	80058a6 <I2C_IsAcknowledgeFailed>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e034      	b.n	8005754 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d028      	beq.n	8005744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f2:	f7fe fe59 	bl	80043a8 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d302      	bcc.n	8005708 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11d      	bne.n	8005744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005712:	2b80      	cmp	r3, #128	; 0x80
 8005714:	d016      	beq.n	8005744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	f043 0220 	orr.w	r2, r3, #32
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e007      	b.n	8005754 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574e:	2b80      	cmp	r3, #128	; 0x80
 8005750:	d1c3      	bne.n	80056da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005768:	e034      	b.n	80057d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f89b 	bl	80058a6 <I2C_IsAcknowledgeFailed>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e034      	b.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005780:	d028      	beq.n	80057d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005782:	f7fe fe11 	bl	80043a8 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	429a      	cmp	r2, r3
 8005790:	d302      	bcc.n	8005798 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d11d      	bne.n	80057d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f003 0304 	and.w	r3, r3, #4
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d016      	beq.n	80057d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e007      	b.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d1c3      	bne.n	800576a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057f8:	e049      	b.n	800588e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b10      	cmp	r3, #16
 8005806:	d119      	bne.n	800583c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0210 	mvn.w	r2, #16
 8005810:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e030      	b.n	800589e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583c:	f7fe fdb4 	bl	80043a8 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	429a      	cmp	r2, r3
 800584a:	d302      	bcc.n	8005852 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d11d      	bne.n	800588e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585c:	2b40      	cmp	r3, #64	; 0x40
 800585e:	d016      	beq.n	800588e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	f043 0220 	orr.w	r2, r3, #32
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e007      	b.n	800589e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005898:	2b40      	cmp	r3, #64	; 0x40
 800589a:	d1ae      	bne.n	80057fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058bc:	d11b      	bne.n	80058f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f043 0204 	orr.w	r2, r3, #4
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e267      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d075      	beq.n	8005a0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005922:	4b88      	ldr	r3, [pc, #544]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	2b04      	cmp	r3, #4
 800592c:	d00c      	beq.n	8005948 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800592e:	4b85      	ldr	r3, [pc, #532]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005936:	2b08      	cmp	r3, #8
 8005938:	d112      	bne.n	8005960 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800593a:	4b82      	ldr	r3, [pc, #520]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005946:	d10b      	bne.n	8005960 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005948:	4b7e      	ldr	r3, [pc, #504]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d05b      	beq.n	8005a0c <HAL_RCC_OscConfig+0x108>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d157      	bne.n	8005a0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e242      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005968:	d106      	bne.n	8005978 <HAL_RCC_OscConfig+0x74>
 800596a:	4b76      	ldr	r3, [pc, #472]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a75      	ldr	r2, [pc, #468]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	e01d      	b.n	80059b4 <HAL_RCC_OscConfig+0xb0>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005980:	d10c      	bne.n	800599c <HAL_RCC_OscConfig+0x98>
 8005982:	4b70      	ldr	r3, [pc, #448]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a6f      	ldr	r2, [pc, #444]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	4b6d      	ldr	r3, [pc, #436]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a6c      	ldr	r2, [pc, #432]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	e00b      	b.n	80059b4 <HAL_RCC_OscConfig+0xb0>
 800599c:	4b69      	ldr	r3, [pc, #420]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a68      	ldr	r2, [pc, #416]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 80059a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	4b66      	ldr	r3, [pc, #408]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a65      	ldr	r2, [pc, #404]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 80059ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d013      	beq.n	80059e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059bc:	f7fe fcf4 	bl	80043a8 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c4:	f7fe fcf0 	bl	80043a8 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b64      	cmp	r3, #100	; 0x64
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e207      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d6:	4b5b      	ldr	r3, [pc, #364]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0f0      	beq.n	80059c4 <HAL_RCC_OscConfig+0xc0>
 80059e2:	e014      	b.n	8005a0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e4:	f7fe fce0 	bl	80043a8 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ec:	f7fe fcdc 	bl	80043a8 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	; 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e1f3      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fe:	4b51      	ldr	r3, [pc, #324]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f0      	bne.n	80059ec <HAL_RCC_OscConfig+0xe8>
 8005a0a:	e000      	b.n	8005a0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d063      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a1a:	4b4a      	ldr	r3, [pc, #296]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 030c 	and.w	r3, r3, #12
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a26:	4b47      	ldr	r3, [pc, #284]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d11c      	bne.n	8005a6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a32:	4b44      	ldr	r3, [pc, #272]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d116      	bne.n	8005a6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a3e:	4b41      	ldr	r3, [pc, #260]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <HAL_RCC_OscConfig+0x152>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d001      	beq.n	8005a56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e1c7      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a56:	4b3b      	ldr	r3, [pc, #236]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	4937      	ldr	r1, [pc, #220]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a6a:	e03a      	b.n	8005ae2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d020      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a74:	4b34      	ldr	r3, [pc, #208]	; (8005b48 <HAL_RCC_OscConfig+0x244>)
 8005a76:	2201      	movs	r2, #1
 8005a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7a:	f7fe fc95 	bl	80043a8 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a82:	f7fe fc91 	bl	80043a8 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e1a8      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a94:	4b2b      	ldr	r3, [pc, #172]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa0:	4b28      	ldr	r3, [pc, #160]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	4925      	ldr	r1, [pc, #148]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	600b      	str	r3, [r1, #0]
 8005ab4:	e015      	b.n	8005ae2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ab6:	4b24      	ldr	r3, [pc, #144]	; (8005b48 <HAL_RCC_OscConfig+0x244>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fe fc74 	bl	80043a8 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac4:	f7fe fc70 	bl	80043a8 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e187      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ad6:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f0      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d036      	beq.n	8005b5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d016      	beq.n	8005b24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005af6:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <HAL_RCC_OscConfig+0x248>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afc:	f7fe fc54 	bl	80043a8 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b04:	f7fe fc50 	bl	80043a8 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e167      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b16:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0f0      	beq.n	8005b04 <HAL_RCC_OscConfig+0x200>
 8005b22:	e01b      	b.n	8005b5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b24:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <HAL_RCC_OscConfig+0x248>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b2a:	f7fe fc3d 	bl	80043a8 <HAL_GetTick>
 8005b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b30:	e00e      	b.n	8005b50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b32:	f7fe fc39 	bl	80043a8 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d907      	bls.n	8005b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e150      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
 8005b44:	40023800 	.word	0x40023800
 8005b48:	42470000 	.word	0x42470000
 8005b4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b50:	4b88      	ldr	r3, [pc, #544]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1ea      	bne.n	8005b32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8097 	beq.w	8005c98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b6e:	4b81      	ldr	r3, [pc, #516]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10f      	bne.n	8005b9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	4b7d      	ldr	r3, [pc, #500]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	4a7c      	ldr	r2, [pc, #496]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b88:	6413      	str	r3, [r2, #64]	; 0x40
 8005b8a:	4b7a      	ldr	r3, [pc, #488]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b92:	60bb      	str	r3, [r7, #8]
 8005b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b96:	2301      	movs	r3, #1
 8005b98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9a:	4b77      	ldr	r3, [pc, #476]	; (8005d78 <HAL_RCC_OscConfig+0x474>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d118      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ba6:	4b74      	ldr	r3, [pc, #464]	; (8005d78 <HAL_RCC_OscConfig+0x474>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a73      	ldr	r2, [pc, #460]	; (8005d78 <HAL_RCC_OscConfig+0x474>)
 8005bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb2:	f7fe fbf9 	bl	80043a8 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bba:	f7fe fbf5 	bl	80043a8 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e10c      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bcc:	4b6a      	ldr	r3, [pc, #424]	; (8005d78 <HAL_RCC_OscConfig+0x474>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0f0      	beq.n	8005bba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d106      	bne.n	8005bee <HAL_RCC_OscConfig+0x2ea>
 8005be0:	4b64      	ldr	r3, [pc, #400]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be4:	4a63      	ldr	r2, [pc, #396]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005be6:	f043 0301 	orr.w	r3, r3, #1
 8005bea:	6713      	str	r3, [r2, #112]	; 0x70
 8005bec:	e01c      	b.n	8005c28 <HAL_RCC_OscConfig+0x324>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	2b05      	cmp	r3, #5
 8005bf4:	d10c      	bne.n	8005c10 <HAL_RCC_OscConfig+0x30c>
 8005bf6:	4b5f      	ldr	r3, [pc, #380]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfa:	4a5e      	ldr	r2, [pc, #376]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005bfc:	f043 0304 	orr.w	r3, r3, #4
 8005c00:	6713      	str	r3, [r2, #112]	; 0x70
 8005c02:	4b5c      	ldr	r3, [pc, #368]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c06:	4a5b      	ldr	r2, [pc, #364]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c0e:	e00b      	b.n	8005c28 <HAL_RCC_OscConfig+0x324>
 8005c10:	4b58      	ldr	r3, [pc, #352]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c14:	4a57      	ldr	r2, [pc, #348]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c1c:	4b55      	ldr	r3, [pc, #340]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c20:	4a54      	ldr	r2, [pc, #336]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c22:	f023 0304 	bic.w	r3, r3, #4
 8005c26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d015      	beq.n	8005c5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c30:	f7fe fbba 	bl	80043a8 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c36:	e00a      	b.n	8005c4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c38:	f7fe fbb6 	bl	80043a8 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e0cb      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4e:	4b49      	ldr	r3, [pc, #292]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0ee      	beq.n	8005c38 <HAL_RCC_OscConfig+0x334>
 8005c5a:	e014      	b.n	8005c86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c5c:	f7fe fba4 	bl	80043a8 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c62:	e00a      	b.n	8005c7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c64:	f7fe fba0 	bl	80043a8 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e0b5      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c7a:	4b3e      	ldr	r3, [pc, #248]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1ee      	bne.n	8005c64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d105      	bne.n	8005c98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c8c:	4b39      	ldr	r3, [pc, #228]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	4a38      	ldr	r2, [pc, #224]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 80a1 	beq.w	8005de4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ca2:	4b34      	ldr	r3, [pc, #208]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d05c      	beq.n	8005d68 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d141      	bne.n	8005d3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb6:	4b31      	ldr	r3, [pc, #196]	; (8005d7c <HAL_RCC_OscConfig+0x478>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cbc:	f7fe fb74 	bl	80043a8 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc4:	f7fe fb70 	bl	80043a8 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e087      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd6:	4b27      	ldr	r3, [pc, #156]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1f0      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69da      	ldr	r2, [r3, #28]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	019b      	lsls	r3, r3, #6
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	041b      	lsls	r3, r3, #16
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	061b      	lsls	r3, r3, #24
 8005d06:	491b      	ldr	r1, [pc, #108]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <HAL_RCC_OscConfig+0x478>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d12:	f7fe fb49 	bl	80043a8 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1a:	f7fe fb45 	bl	80043a8 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e05c      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d2c:	4b11      	ldr	r3, [pc, #68]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCC_OscConfig+0x416>
 8005d38:	e054      	b.n	8005de4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3a:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <HAL_RCC_OscConfig+0x478>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d40:	f7fe fb32 	bl	80043a8 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d48:	f7fe fb2e 	bl	80043a8 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e045      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d5a:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1f0      	bne.n	8005d48 <HAL_RCC_OscConfig+0x444>
 8005d66:	e03d      	b.n	8005de4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d107      	bne.n	8005d80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e038      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
 8005d74:	40023800 	.word	0x40023800
 8005d78:	40007000 	.word	0x40007000
 8005d7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d80:	4b1b      	ldr	r3, [pc, #108]	; (8005df0 <HAL_RCC_OscConfig+0x4ec>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d028      	beq.n	8005de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d121      	bne.n	8005de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d11a      	bne.n	8005de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005db0:	4013      	ands	r3, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005db6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d111      	bne.n	8005de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d107      	bne.n	8005de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d001      	beq.n	8005de4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e000      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40023800 	.word	0x40023800

08005df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e0cc      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e08:	4b68      	ldr	r3, [pc, #416]	; (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d90c      	bls.n	8005e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e16:	4b65      	ldr	r3, [pc, #404]	; (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1e:	4b63      	ldr	r3, [pc, #396]	; (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d001      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e0b8      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d020      	beq.n	8005e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e48:	4b59      	ldr	r3, [pc, #356]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	4a58      	ldr	r2, [pc, #352]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e60:	4b53      	ldr	r3, [pc, #332]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	4a52      	ldr	r2, [pc, #328]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e6c:	4b50      	ldr	r3, [pc, #320]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	494d      	ldr	r1, [pc, #308]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d044      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d107      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e92:	4b47      	ldr	r3, [pc, #284]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d119      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e07f      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d003      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d107      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb2:	4b3f      	ldr	r3, [pc, #252]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e06f      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec2:	4b3b      	ldr	r3, [pc, #236]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e067      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ed2:	4b37      	ldr	r3, [pc, #220]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f023 0203 	bic.w	r2, r3, #3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	4934      	ldr	r1, [pc, #208]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ee4:	f7fe fa60 	bl	80043a8 <HAL_GetTick>
 8005ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eea:	e00a      	b.n	8005f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eec:	f7fe fa5c 	bl	80043a8 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e04f      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f02:	4b2b      	ldr	r3, [pc, #172]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 020c 	and.w	r2, r3, #12
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d1eb      	bne.n	8005eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f14:	4b25      	ldr	r3, [pc, #148]	; (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d20c      	bcs.n	8005f3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f22:	4b22      	ldr	r3, [pc, #136]	; (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2a:	4b20      	ldr	r3, [pc, #128]	; (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d001      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e032      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f48:	4b19      	ldr	r3, [pc, #100]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	4916      	ldr	r1, [pc, #88]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d009      	beq.n	8005f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f66:	4b12      	ldr	r3, [pc, #72]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	490e      	ldr	r1, [pc, #56]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f7a:	f000 f821 	bl	8005fc0 <HAL_RCC_GetSysClockFreq>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	091b      	lsrs	r3, r3, #4
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	490a      	ldr	r1, [pc, #40]	; (8005fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f8c:	5ccb      	ldrb	r3, [r1, r3]
 8005f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f92:	4a09      	ldr	r2, [pc, #36]	; (8005fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f96:	4b09      	ldr	r3, [pc, #36]	; (8005fbc <HAL_RCC_ClockConfig+0x1c8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fe f9c0 	bl	8004320 <HAL_InitTick>

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40023c00 	.word	0x40023c00
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	08008494 	.word	0x08008494
 8005fb8:	20000004 	.word	0x20000004
 8005fbc:	20000008 	.word	0x20000008

08005fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fc4:	b094      	sub	sp, #80	; 0x50
 8005fc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fd8:	4b79      	ldr	r3, [pc, #484]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f003 030c 	and.w	r3, r3, #12
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d00d      	beq.n	8006000 <HAL_RCC_GetSysClockFreq+0x40>
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	f200 80e1 	bhi.w	80061ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d003      	beq.n	8005ffa <HAL_RCC_GetSysClockFreq+0x3a>
 8005ff2:	e0db      	b.n	80061ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ff4:	4b73      	ldr	r3, [pc, #460]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ff6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ff8:	e0db      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ffa:	4b73      	ldr	r3, [pc, #460]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ffc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ffe:	e0d8      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006000:	4b6f      	ldr	r3, [pc, #444]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006008:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800600a:	4b6d      	ldr	r3, [pc, #436]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d063      	beq.n	80060de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006016:	4b6a      	ldr	r3, [pc, #424]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	099b      	lsrs	r3, r3, #6
 800601c:	2200      	movs	r2, #0
 800601e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006020:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006028:	633b      	str	r3, [r7, #48]	; 0x30
 800602a:	2300      	movs	r3, #0
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
 800602e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006032:	4622      	mov	r2, r4
 8006034:	462b      	mov	r3, r5
 8006036:	f04f 0000 	mov.w	r0, #0
 800603a:	f04f 0100 	mov.w	r1, #0
 800603e:	0159      	lsls	r1, r3, #5
 8006040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006044:	0150      	lsls	r0, r2, #5
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	4621      	mov	r1, r4
 800604c:	1a51      	subs	r1, r2, r1
 800604e:	6139      	str	r1, [r7, #16]
 8006050:	4629      	mov	r1, r5
 8006052:	eb63 0301 	sbc.w	r3, r3, r1
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	f04f 0200 	mov.w	r2, #0
 800605c:	f04f 0300 	mov.w	r3, #0
 8006060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006064:	4659      	mov	r1, fp
 8006066:	018b      	lsls	r3, r1, #6
 8006068:	4651      	mov	r1, sl
 800606a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800606e:	4651      	mov	r1, sl
 8006070:	018a      	lsls	r2, r1, #6
 8006072:	4651      	mov	r1, sl
 8006074:	ebb2 0801 	subs.w	r8, r2, r1
 8006078:	4659      	mov	r1, fp
 800607a:	eb63 0901 	sbc.w	r9, r3, r1
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800608a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800608e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006092:	4690      	mov	r8, r2
 8006094:	4699      	mov	r9, r3
 8006096:	4623      	mov	r3, r4
 8006098:	eb18 0303 	adds.w	r3, r8, r3
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	462b      	mov	r3, r5
 80060a0:	eb49 0303 	adc.w	r3, r9, r3
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060b2:	4629      	mov	r1, r5
 80060b4:	024b      	lsls	r3, r1, #9
 80060b6:	4621      	mov	r1, r4
 80060b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060bc:	4621      	mov	r1, r4
 80060be:	024a      	lsls	r2, r1, #9
 80060c0:	4610      	mov	r0, r2
 80060c2:	4619      	mov	r1, r3
 80060c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c6:	2200      	movs	r2, #0
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060d0:	f7fa f8d6 	bl	8000280 <__aeabi_uldivmod>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4613      	mov	r3, r2
 80060da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060dc:	e058      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060de:	4b38      	ldr	r3, [pc, #224]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	099b      	lsrs	r3, r3, #6
 80060e4:	2200      	movs	r2, #0
 80060e6:	4618      	mov	r0, r3
 80060e8:	4611      	mov	r1, r2
 80060ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060ee:	623b      	str	r3, [r7, #32]
 80060f0:	2300      	movs	r3, #0
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
 80060f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060f8:	4642      	mov	r2, r8
 80060fa:	464b      	mov	r3, r9
 80060fc:	f04f 0000 	mov.w	r0, #0
 8006100:	f04f 0100 	mov.w	r1, #0
 8006104:	0159      	lsls	r1, r3, #5
 8006106:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800610a:	0150      	lsls	r0, r2, #5
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4641      	mov	r1, r8
 8006112:	ebb2 0a01 	subs.w	sl, r2, r1
 8006116:	4649      	mov	r1, r9
 8006118:	eb63 0b01 	sbc.w	fp, r3, r1
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006128:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800612c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006130:	ebb2 040a 	subs.w	r4, r2, sl
 8006134:	eb63 050b 	sbc.w	r5, r3, fp
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	00eb      	lsls	r3, r5, #3
 8006142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006146:	00e2      	lsls	r2, r4, #3
 8006148:	4614      	mov	r4, r2
 800614a:	461d      	mov	r5, r3
 800614c:	4643      	mov	r3, r8
 800614e:	18e3      	adds	r3, r4, r3
 8006150:	603b      	str	r3, [r7, #0]
 8006152:	464b      	mov	r3, r9
 8006154:	eb45 0303 	adc.w	r3, r5, r3
 8006158:	607b      	str	r3, [r7, #4]
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	f04f 0300 	mov.w	r3, #0
 8006162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006166:	4629      	mov	r1, r5
 8006168:	028b      	lsls	r3, r1, #10
 800616a:	4621      	mov	r1, r4
 800616c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006170:	4621      	mov	r1, r4
 8006172:	028a      	lsls	r2, r1, #10
 8006174:	4610      	mov	r0, r2
 8006176:	4619      	mov	r1, r3
 8006178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800617a:	2200      	movs	r2, #0
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	61fa      	str	r2, [r7, #28]
 8006180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006184:	f7fa f87c 	bl	8000280 <__aeabi_uldivmod>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4613      	mov	r3, r2
 800618e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006190:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	0c1b      	lsrs	r3, r3, #16
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	3301      	adds	r3, #1
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80061a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061aa:	e002      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80061ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3750      	adds	r7, #80	; 0x50
 80061b8:	46bd      	mov	sp, r7
 80061ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061be:	bf00      	nop
 80061c0:	40023800 	.word	0x40023800
 80061c4:	00f42400 	.word	0x00f42400
 80061c8:	007a1200 	.word	0x007a1200

080061cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061d0:	4b03      	ldr	r3, [pc, #12]	; (80061e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80061d2:	681b      	ldr	r3, [r3, #0]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20000004 	.word	0x20000004

080061e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061e8:	f7ff fff0 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 80061ec:	4602      	mov	r2, r0
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	0a9b      	lsrs	r3, r3, #10
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	4903      	ldr	r1, [pc, #12]	; (8006208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061fa:	5ccb      	ldrb	r3, [r1, r3]
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006200:	4618      	mov	r0, r3
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40023800 	.word	0x40023800
 8006208:	080084a4 	.word	0x080084a4

0800620c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006210:	f7ff ffdc 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 8006214:	4602      	mov	r2, r0
 8006216:	4b05      	ldr	r3, [pc, #20]	; (800622c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	0b5b      	lsrs	r3, r3, #13
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	4903      	ldr	r1, [pc, #12]	; (8006230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006222:	5ccb      	ldrb	r3, [r1, r3]
 8006224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006228:	4618      	mov	r0, r3
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40023800 	.word	0x40023800
 8006230:	080084a4 	.word	0x080084a4

08006234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e042      	b.n	80062cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fd fee6 	bl	800402c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2224      	movs	r2, #36	; 0x24
 8006264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f82b 	bl	80062d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800628c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	695a      	ldr	r2, [r3, #20]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800629c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062d8:	b0c0      	sub	sp, #256	; 0x100
 80062da:	af00      	add	r7, sp, #0
 80062dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f0:	68d9      	ldr	r1, [r3, #12]
 80062f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	ea40 0301 	orr.w	r3, r0, r1
 80062fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	431a      	orrs	r2, r3
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	431a      	orrs	r2, r3
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800632c:	f021 010c 	bic.w	r1, r1, #12
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800633a:	430b      	orrs	r3, r1
 800633c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800633e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800634a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634e:	6999      	ldr	r1, [r3, #24]
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	ea40 0301 	orr.w	r3, r0, r1
 800635a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800635c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	4b8f      	ldr	r3, [pc, #572]	; (80065a0 <UART_SetConfig+0x2cc>)
 8006364:	429a      	cmp	r2, r3
 8006366:	d005      	beq.n	8006374 <UART_SetConfig+0xa0>
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	4b8d      	ldr	r3, [pc, #564]	; (80065a4 <UART_SetConfig+0x2d0>)
 8006370:	429a      	cmp	r2, r3
 8006372:	d104      	bne.n	800637e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006374:	f7ff ff4a 	bl	800620c <HAL_RCC_GetPCLK2Freq>
 8006378:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800637c:	e003      	b.n	8006386 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800637e:	f7ff ff31 	bl	80061e4 <HAL_RCC_GetPCLK1Freq>
 8006382:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006390:	f040 810c 	bne.w	80065ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006398:	2200      	movs	r2, #0
 800639a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800639e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063a6:	4622      	mov	r2, r4
 80063a8:	462b      	mov	r3, r5
 80063aa:	1891      	adds	r1, r2, r2
 80063ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80063ae:	415b      	adcs	r3, r3
 80063b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063b6:	4621      	mov	r1, r4
 80063b8:	eb12 0801 	adds.w	r8, r2, r1
 80063bc:	4629      	mov	r1, r5
 80063be:	eb43 0901 	adc.w	r9, r3, r1
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063d6:	4690      	mov	r8, r2
 80063d8:	4699      	mov	r9, r3
 80063da:	4623      	mov	r3, r4
 80063dc:	eb18 0303 	adds.w	r3, r8, r3
 80063e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063e4:	462b      	mov	r3, r5
 80063e6:	eb49 0303 	adc.w	r3, r9, r3
 80063ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006402:	460b      	mov	r3, r1
 8006404:	18db      	adds	r3, r3, r3
 8006406:	653b      	str	r3, [r7, #80]	; 0x50
 8006408:	4613      	mov	r3, r2
 800640a:	eb42 0303 	adc.w	r3, r2, r3
 800640e:	657b      	str	r3, [r7, #84]	; 0x54
 8006410:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006414:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006418:	f7f9 ff32 	bl	8000280 <__aeabi_uldivmod>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4b61      	ldr	r3, [pc, #388]	; (80065a8 <UART_SetConfig+0x2d4>)
 8006422:	fba3 2302 	umull	r2, r3, r3, r2
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	011c      	lsls	r4, r3, #4
 800642a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800642e:	2200      	movs	r2, #0
 8006430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006434:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006438:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800643c:	4642      	mov	r2, r8
 800643e:	464b      	mov	r3, r9
 8006440:	1891      	adds	r1, r2, r2
 8006442:	64b9      	str	r1, [r7, #72]	; 0x48
 8006444:	415b      	adcs	r3, r3
 8006446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006448:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800644c:	4641      	mov	r1, r8
 800644e:	eb12 0a01 	adds.w	sl, r2, r1
 8006452:	4649      	mov	r1, r9
 8006454:	eb43 0b01 	adc.w	fp, r3, r1
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006464:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800646c:	4692      	mov	sl, r2
 800646e:	469b      	mov	fp, r3
 8006470:	4643      	mov	r3, r8
 8006472:	eb1a 0303 	adds.w	r3, sl, r3
 8006476:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800647a:	464b      	mov	r3, r9
 800647c:	eb4b 0303 	adc.w	r3, fp, r3
 8006480:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006490:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006494:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006498:	460b      	mov	r3, r1
 800649a:	18db      	adds	r3, r3, r3
 800649c:	643b      	str	r3, [r7, #64]	; 0x40
 800649e:	4613      	mov	r3, r2
 80064a0:	eb42 0303 	adc.w	r3, r2, r3
 80064a4:	647b      	str	r3, [r7, #68]	; 0x44
 80064a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064ae:	f7f9 fee7 	bl	8000280 <__aeabi_uldivmod>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4611      	mov	r1, r2
 80064b8:	4b3b      	ldr	r3, [pc, #236]	; (80065a8 <UART_SetConfig+0x2d4>)
 80064ba:	fba3 2301 	umull	r2, r3, r3, r1
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	2264      	movs	r2, #100	; 0x64
 80064c2:	fb02 f303 	mul.w	r3, r2, r3
 80064c6:	1acb      	subs	r3, r1, r3
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064ce:	4b36      	ldr	r3, [pc, #216]	; (80065a8 <UART_SetConfig+0x2d4>)
 80064d0:	fba3 2302 	umull	r2, r3, r3, r2
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064dc:	441c      	add	r4, r3
 80064de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064f0:	4642      	mov	r2, r8
 80064f2:	464b      	mov	r3, r9
 80064f4:	1891      	adds	r1, r2, r2
 80064f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80064f8:	415b      	adcs	r3, r3
 80064fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006500:	4641      	mov	r1, r8
 8006502:	1851      	adds	r1, r2, r1
 8006504:	6339      	str	r1, [r7, #48]	; 0x30
 8006506:	4649      	mov	r1, r9
 8006508:	414b      	adcs	r3, r1
 800650a:	637b      	str	r3, [r7, #52]	; 0x34
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006518:	4659      	mov	r1, fp
 800651a:	00cb      	lsls	r3, r1, #3
 800651c:	4651      	mov	r1, sl
 800651e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006522:	4651      	mov	r1, sl
 8006524:	00ca      	lsls	r2, r1, #3
 8006526:	4610      	mov	r0, r2
 8006528:	4619      	mov	r1, r3
 800652a:	4603      	mov	r3, r0
 800652c:	4642      	mov	r2, r8
 800652e:	189b      	adds	r3, r3, r2
 8006530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006534:	464b      	mov	r3, r9
 8006536:	460a      	mov	r2, r1
 8006538:	eb42 0303 	adc.w	r3, r2, r3
 800653c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800654c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006550:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006554:	460b      	mov	r3, r1
 8006556:	18db      	adds	r3, r3, r3
 8006558:	62bb      	str	r3, [r7, #40]	; 0x28
 800655a:	4613      	mov	r3, r2
 800655c:	eb42 0303 	adc.w	r3, r2, r3
 8006560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006562:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006566:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800656a:	f7f9 fe89 	bl	8000280 <__aeabi_uldivmod>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <UART_SetConfig+0x2d4>)
 8006574:	fba3 1302 	umull	r1, r3, r3, r2
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	2164      	movs	r1, #100	; 0x64
 800657c:	fb01 f303 	mul.w	r3, r1, r3
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	3332      	adds	r3, #50	; 0x32
 8006586:	4a08      	ldr	r2, [pc, #32]	; (80065a8 <UART_SetConfig+0x2d4>)
 8006588:	fba2 2303 	umull	r2, r3, r2, r3
 800658c:	095b      	lsrs	r3, r3, #5
 800658e:	f003 0207 	and.w	r2, r3, #7
 8006592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4422      	add	r2, r4
 800659a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800659c:	e106      	b.n	80067ac <UART_SetConfig+0x4d8>
 800659e:	bf00      	nop
 80065a0:	40011000 	.word	0x40011000
 80065a4:	40011400 	.word	0x40011400
 80065a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065be:	4642      	mov	r2, r8
 80065c0:	464b      	mov	r3, r9
 80065c2:	1891      	adds	r1, r2, r2
 80065c4:	6239      	str	r1, [r7, #32]
 80065c6:	415b      	adcs	r3, r3
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065ce:	4641      	mov	r1, r8
 80065d0:	1854      	adds	r4, r2, r1
 80065d2:	4649      	mov	r1, r9
 80065d4:	eb43 0501 	adc.w	r5, r3, r1
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	00eb      	lsls	r3, r5, #3
 80065e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065e6:	00e2      	lsls	r2, r4, #3
 80065e8:	4614      	mov	r4, r2
 80065ea:	461d      	mov	r5, r3
 80065ec:	4643      	mov	r3, r8
 80065ee:	18e3      	adds	r3, r4, r3
 80065f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065f4:	464b      	mov	r3, r9
 80065f6:	eb45 0303 	adc.w	r3, r5, r3
 80065fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800660a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	f04f 0300 	mov.w	r3, #0
 8006616:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800661a:	4629      	mov	r1, r5
 800661c:	008b      	lsls	r3, r1, #2
 800661e:	4621      	mov	r1, r4
 8006620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006624:	4621      	mov	r1, r4
 8006626:	008a      	lsls	r2, r1, #2
 8006628:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800662c:	f7f9 fe28 	bl	8000280 <__aeabi_uldivmod>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4b60      	ldr	r3, [pc, #384]	; (80067b8 <UART_SetConfig+0x4e4>)
 8006636:	fba3 2302 	umull	r2, r3, r3, r2
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	011c      	lsls	r4, r3, #4
 800663e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006642:	2200      	movs	r2, #0
 8006644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006648:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800664c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006650:	4642      	mov	r2, r8
 8006652:	464b      	mov	r3, r9
 8006654:	1891      	adds	r1, r2, r2
 8006656:	61b9      	str	r1, [r7, #24]
 8006658:	415b      	adcs	r3, r3
 800665a:	61fb      	str	r3, [r7, #28]
 800665c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006660:	4641      	mov	r1, r8
 8006662:	1851      	adds	r1, r2, r1
 8006664:	6139      	str	r1, [r7, #16]
 8006666:	4649      	mov	r1, r9
 8006668:	414b      	adcs	r3, r1
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	f04f 0300 	mov.w	r3, #0
 8006674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006678:	4659      	mov	r1, fp
 800667a:	00cb      	lsls	r3, r1, #3
 800667c:	4651      	mov	r1, sl
 800667e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006682:	4651      	mov	r1, sl
 8006684:	00ca      	lsls	r2, r1, #3
 8006686:	4610      	mov	r0, r2
 8006688:	4619      	mov	r1, r3
 800668a:	4603      	mov	r3, r0
 800668c:	4642      	mov	r2, r8
 800668e:	189b      	adds	r3, r3, r2
 8006690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006694:	464b      	mov	r3, r9
 8006696:	460a      	mov	r2, r1
 8006698:	eb42 0303 	adc.w	r3, r2, r3
 800669c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80066aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066b8:	4649      	mov	r1, r9
 80066ba:	008b      	lsls	r3, r1, #2
 80066bc:	4641      	mov	r1, r8
 80066be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066c2:	4641      	mov	r1, r8
 80066c4:	008a      	lsls	r2, r1, #2
 80066c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066ca:	f7f9 fdd9 	bl	8000280 <__aeabi_uldivmod>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4611      	mov	r1, r2
 80066d4:	4b38      	ldr	r3, [pc, #224]	; (80067b8 <UART_SetConfig+0x4e4>)
 80066d6:	fba3 2301 	umull	r2, r3, r3, r1
 80066da:	095b      	lsrs	r3, r3, #5
 80066dc:	2264      	movs	r2, #100	; 0x64
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	1acb      	subs	r3, r1, r3
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	3332      	adds	r3, #50	; 0x32
 80066e8:	4a33      	ldr	r2, [pc, #204]	; (80067b8 <UART_SetConfig+0x4e4>)
 80066ea:	fba2 2303 	umull	r2, r3, r2, r3
 80066ee:	095b      	lsrs	r3, r3, #5
 80066f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066f4:	441c      	add	r4, r3
 80066f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066fa:	2200      	movs	r2, #0
 80066fc:	673b      	str	r3, [r7, #112]	; 0x70
 80066fe:	677a      	str	r2, [r7, #116]	; 0x74
 8006700:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006704:	4642      	mov	r2, r8
 8006706:	464b      	mov	r3, r9
 8006708:	1891      	adds	r1, r2, r2
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	415b      	adcs	r3, r3
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006714:	4641      	mov	r1, r8
 8006716:	1851      	adds	r1, r2, r1
 8006718:	6039      	str	r1, [r7, #0]
 800671a:	4649      	mov	r1, r9
 800671c:	414b      	adcs	r3, r1
 800671e:	607b      	str	r3, [r7, #4]
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800672c:	4659      	mov	r1, fp
 800672e:	00cb      	lsls	r3, r1, #3
 8006730:	4651      	mov	r1, sl
 8006732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006736:	4651      	mov	r1, sl
 8006738:	00ca      	lsls	r2, r1, #3
 800673a:	4610      	mov	r0, r2
 800673c:	4619      	mov	r1, r3
 800673e:	4603      	mov	r3, r0
 8006740:	4642      	mov	r2, r8
 8006742:	189b      	adds	r3, r3, r2
 8006744:	66bb      	str	r3, [r7, #104]	; 0x68
 8006746:	464b      	mov	r3, r9
 8006748:	460a      	mov	r2, r1
 800674a:	eb42 0303 	adc.w	r3, r2, r3
 800674e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	663b      	str	r3, [r7, #96]	; 0x60
 800675a:	667a      	str	r2, [r7, #100]	; 0x64
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006768:	4649      	mov	r1, r9
 800676a:	008b      	lsls	r3, r1, #2
 800676c:	4641      	mov	r1, r8
 800676e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006772:	4641      	mov	r1, r8
 8006774:	008a      	lsls	r2, r1, #2
 8006776:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800677a:	f7f9 fd81 	bl	8000280 <__aeabi_uldivmod>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <UART_SetConfig+0x4e4>)
 8006784:	fba3 1302 	umull	r1, r3, r3, r2
 8006788:	095b      	lsrs	r3, r3, #5
 800678a:	2164      	movs	r1, #100	; 0x64
 800678c:	fb01 f303 	mul.w	r3, r1, r3
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	3332      	adds	r3, #50	; 0x32
 8006796:	4a08      	ldr	r2, [pc, #32]	; (80067b8 <UART_SetConfig+0x4e4>)
 8006798:	fba2 2303 	umull	r2, r3, r2, r3
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	f003 020f 	and.w	r2, r3, #15
 80067a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4422      	add	r2, r4
 80067aa:	609a      	str	r2, [r3, #8]
}
 80067ac:	bf00      	nop
 80067ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067b2:	46bd      	mov	sp, r7
 80067b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067b8:	51eb851f 	.word	0x51eb851f

080067bc <rand>:
 80067bc:	4b16      	ldr	r3, [pc, #88]	; (8006818 <rand+0x5c>)
 80067be:	b510      	push	{r4, lr}
 80067c0:	681c      	ldr	r4, [r3, #0]
 80067c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067c4:	b9b3      	cbnz	r3, 80067f4 <rand+0x38>
 80067c6:	2018      	movs	r0, #24
 80067c8:	f000 fb3a 	bl	8006e40 <malloc>
 80067cc:	4602      	mov	r2, r0
 80067ce:	6320      	str	r0, [r4, #48]	; 0x30
 80067d0:	b920      	cbnz	r0, 80067dc <rand+0x20>
 80067d2:	4b12      	ldr	r3, [pc, #72]	; (800681c <rand+0x60>)
 80067d4:	4812      	ldr	r0, [pc, #72]	; (8006820 <rand+0x64>)
 80067d6:	2152      	movs	r1, #82	; 0x52
 80067d8:	f000 fac8 	bl	8006d6c <__assert_func>
 80067dc:	4911      	ldr	r1, [pc, #68]	; (8006824 <rand+0x68>)
 80067de:	4b12      	ldr	r3, [pc, #72]	; (8006828 <rand+0x6c>)
 80067e0:	e9c0 1300 	strd	r1, r3, [r0]
 80067e4:	4b11      	ldr	r3, [pc, #68]	; (800682c <rand+0x70>)
 80067e6:	6083      	str	r3, [r0, #8]
 80067e8:	230b      	movs	r3, #11
 80067ea:	8183      	strh	r3, [r0, #12]
 80067ec:	2100      	movs	r1, #0
 80067ee:	2001      	movs	r0, #1
 80067f0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80067f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80067f6:	480e      	ldr	r0, [pc, #56]	; (8006830 <rand+0x74>)
 80067f8:	690b      	ldr	r3, [r1, #16]
 80067fa:	694c      	ldr	r4, [r1, #20]
 80067fc:	4a0d      	ldr	r2, [pc, #52]	; (8006834 <rand+0x78>)
 80067fe:	4358      	muls	r0, r3
 8006800:	fb02 0004 	mla	r0, r2, r4, r0
 8006804:	fba3 3202 	umull	r3, r2, r3, r2
 8006808:	3301      	adds	r3, #1
 800680a:	eb40 0002 	adc.w	r0, r0, r2
 800680e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006812:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006816:	bd10      	pop	{r4, pc}
 8006818:	20000068 	.word	0x20000068
 800681c:	080084ac 	.word	0x080084ac
 8006820:	080084c3 	.word	0x080084c3
 8006824:	abcd330e 	.word	0xabcd330e
 8006828:	e66d1234 	.word	0xe66d1234
 800682c:	0005deec 	.word	0x0005deec
 8006830:	5851f42d 	.word	0x5851f42d
 8006834:	4c957f2d 	.word	0x4c957f2d

08006838 <std>:
 8006838:	2300      	movs	r3, #0
 800683a:	b510      	push	{r4, lr}
 800683c:	4604      	mov	r4, r0
 800683e:	e9c0 3300 	strd	r3, r3, [r0]
 8006842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006846:	6083      	str	r3, [r0, #8]
 8006848:	8181      	strh	r1, [r0, #12]
 800684a:	6643      	str	r3, [r0, #100]	; 0x64
 800684c:	81c2      	strh	r2, [r0, #14]
 800684e:	6183      	str	r3, [r0, #24]
 8006850:	4619      	mov	r1, r3
 8006852:	2208      	movs	r2, #8
 8006854:	305c      	adds	r0, #92	; 0x5c
 8006856:	f000 f9ff 	bl	8006c58 <memset>
 800685a:	4b0d      	ldr	r3, [pc, #52]	; (8006890 <std+0x58>)
 800685c:	6263      	str	r3, [r4, #36]	; 0x24
 800685e:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <std+0x5c>)
 8006860:	62a3      	str	r3, [r4, #40]	; 0x28
 8006862:	4b0d      	ldr	r3, [pc, #52]	; (8006898 <std+0x60>)
 8006864:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006866:	4b0d      	ldr	r3, [pc, #52]	; (800689c <std+0x64>)
 8006868:	6323      	str	r3, [r4, #48]	; 0x30
 800686a:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <std+0x68>)
 800686c:	6224      	str	r4, [r4, #32]
 800686e:	429c      	cmp	r4, r3
 8006870:	d006      	beq.n	8006880 <std+0x48>
 8006872:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006876:	4294      	cmp	r4, r2
 8006878:	d002      	beq.n	8006880 <std+0x48>
 800687a:	33d0      	adds	r3, #208	; 0xd0
 800687c:	429c      	cmp	r4, r3
 800687e:	d105      	bne.n	800688c <std+0x54>
 8006880:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006888:	f000 ba5e 	b.w	8006d48 <__retarget_lock_init_recursive>
 800688c:	bd10      	pop	{r4, pc}
 800688e:	bf00      	nop
 8006890:	08006aa9 	.word	0x08006aa9
 8006894:	08006acb 	.word	0x08006acb
 8006898:	08006b03 	.word	0x08006b03
 800689c:	08006b27 	.word	0x08006b27
 80068a0:	2000015c 	.word	0x2000015c

080068a4 <stdio_exit_handler>:
 80068a4:	4a02      	ldr	r2, [pc, #8]	; (80068b0 <stdio_exit_handler+0xc>)
 80068a6:	4903      	ldr	r1, [pc, #12]	; (80068b4 <stdio_exit_handler+0x10>)
 80068a8:	4803      	ldr	r0, [pc, #12]	; (80068b8 <stdio_exit_handler+0x14>)
 80068aa:	f000 b869 	b.w	8006980 <_fwalk_sglue>
 80068ae:	bf00      	nop
 80068b0:	20000010 	.word	0x20000010
 80068b4:	0800765d 	.word	0x0800765d
 80068b8:	2000001c 	.word	0x2000001c

080068bc <cleanup_stdio>:
 80068bc:	6841      	ldr	r1, [r0, #4]
 80068be:	4b0c      	ldr	r3, [pc, #48]	; (80068f0 <cleanup_stdio+0x34>)
 80068c0:	4299      	cmp	r1, r3
 80068c2:	b510      	push	{r4, lr}
 80068c4:	4604      	mov	r4, r0
 80068c6:	d001      	beq.n	80068cc <cleanup_stdio+0x10>
 80068c8:	f000 fec8 	bl	800765c <_fflush_r>
 80068cc:	68a1      	ldr	r1, [r4, #8]
 80068ce:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <cleanup_stdio+0x38>)
 80068d0:	4299      	cmp	r1, r3
 80068d2:	d002      	beq.n	80068da <cleanup_stdio+0x1e>
 80068d4:	4620      	mov	r0, r4
 80068d6:	f000 fec1 	bl	800765c <_fflush_r>
 80068da:	68e1      	ldr	r1, [r4, #12]
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <cleanup_stdio+0x3c>)
 80068de:	4299      	cmp	r1, r3
 80068e0:	d004      	beq.n	80068ec <cleanup_stdio+0x30>
 80068e2:	4620      	mov	r0, r4
 80068e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068e8:	f000 beb8 	b.w	800765c <_fflush_r>
 80068ec:	bd10      	pop	{r4, pc}
 80068ee:	bf00      	nop
 80068f0:	2000015c 	.word	0x2000015c
 80068f4:	200001c4 	.word	0x200001c4
 80068f8:	2000022c 	.word	0x2000022c

080068fc <global_stdio_init.part.0>:
 80068fc:	b510      	push	{r4, lr}
 80068fe:	4b0b      	ldr	r3, [pc, #44]	; (800692c <global_stdio_init.part.0+0x30>)
 8006900:	4c0b      	ldr	r4, [pc, #44]	; (8006930 <global_stdio_init.part.0+0x34>)
 8006902:	4a0c      	ldr	r2, [pc, #48]	; (8006934 <global_stdio_init.part.0+0x38>)
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	4620      	mov	r0, r4
 8006908:	2200      	movs	r2, #0
 800690a:	2104      	movs	r1, #4
 800690c:	f7ff ff94 	bl	8006838 <std>
 8006910:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006914:	2201      	movs	r2, #1
 8006916:	2109      	movs	r1, #9
 8006918:	f7ff ff8e 	bl	8006838 <std>
 800691c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006920:	2202      	movs	r2, #2
 8006922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006926:	2112      	movs	r1, #18
 8006928:	f7ff bf86 	b.w	8006838 <std>
 800692c:	20000294 	.word	0x20000294
 8006930:	2000015c 	.word	0x2000015c
 8006934:	080068a5 	.word	0x080068a5

08006938 <__sfp_lock_acquire>:
 8006938:	4801      	ldr	r0, [pc, #4]	; (8006940 <__sfp_lock_acquire+0x8>)
 800693a:	f000 ba06 	b.w	8006d4a <__retarget_lock_acquire_recursive>
 800693e:	bf00      	nop
 8006940:	2000029d 	.word	0x2000029d

08006944 <__sfp_lock_release>:
 8006944:	4801      	ldr	r0, [pc, #4]	; (800694c <__sfp_lock_release+0x8>)
 8006946:	f000 ba01 	b.w	8006d4c <__retarget_lock_release_recursive>
 800694a:	bf00      	nop
 800694c:	2000029d 	.word	0x2000029d

08006950 <__sinit>:
 8006950:	b510      	push	{r4, lr}
 8006952:	4604      	mov	r4, r0
 8006954:	f7ff fff0 	bl	8006938 <__sfp_lock_acquire>
 8006958:	6a23      	ldr	r3, [r4, #32]
 800695a:	b11b      	cbz	r3, 8006964 <__sinit+0x14>
 800695c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006960:	f7ff bff0 	b.w	8006944 <__sfp_lock_release>
 8006964:	4b04      	ldr	r3, [pc, #16]	; (8006978 <__sinit+0x28>)
 8006966:	6223      	str	r3, [r4, #32]
 8006968:	4b04      	ldr	r3, [pc, #16]	; (800697c <__sinit+0x2c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1f5      	bne.n	800695c <__sinit+0xc>
 8006970:	f7ff ffc4 	bl	80068fc <global_stdio_init.part.0>
 8006974:	e7f2      	b.n	800695c <__sinit+0xc>
 8006976:	bf00      	nop
 8006978:	080068bd 	.word	0x080068bd
 800697c:	20000294 	.word	0x20000294

08006980 <_fwalk_sglue>:
 8006980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006984:	4607      	mov	r7, r0
 8006986:	4688      	mov	r8, r1
 8006988:	4614      	mov	r4, r2
 800698a:	2600      	movs	r6, #0
 800698c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006990:	f1b9 0901 	subs.w	r9, r9, #1
 8006994:	d505      	bpl.n	80069a2 <_fwalk_sglue+0x22>
 8006996:	6824      	ldr	r4, [r4, #0]
 8006998:	2c00      	cmp	r4, #0
 800699a:	d1f7      	bne.n	800698c <_fwalk_sglue+0xc>
 800699c:	4630      	mov	r0, r6
 800699e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069a2:	89ab      	ldrh	r3, [r5, #12]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d907      	bls.n	80069b8 <_fwalk_sglue+0x38>
 80069a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069ac:	3301      	adds	r3, #1
 80069ae:	d003      	beq.n	80069b8 <_fwalk_sglue+0x38>
 80069b0:	4629      	mov	r1, r5
 80069b2:	4638      	mov	r0, r7
 80069b4:	47c0      	blx	r8
 80069b6:	4306      	orrs	r6, r0
 80069b8:	3568      	adds	r5, #104	; 0x68
 80069ba:	e7e9      	b.n	8006990 <_fwalk_sglue+0x10>

080069bc <iprintf>:
 80069bc:	b40f      	push	{r0, r1, r2, r3}
 80069be:	b507      	push	{r0, r1, r2, lr}
 80069c0:	4906      	ldr	r1, [pc, #24]	; (80069dc <iprintf+0x20>)
 80069c2:	ab04      	add	r3, sp, #16
 80069c4:	6808      	ldr	r0, [r1, #0]
 80069c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ca:	6881      	ldr	r1, [r0, #8]
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	f000 fb15 	bl	8006ffc <_vfiprintf_r>
 80069d2:	b003      	add	sp, #12
 80069d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069d8:	b004      	add	sp, #16
 80069da:	4770      	bx	lr
 80069dc:	20000068 	.word	0x20000068

080069e0 <putchar>:
 80069e0:	4b02      	ldr	r3, [pc, #8]	; (80069ec <putchar+0xc>)
 80069e2:	4601      	mov	r1, r0
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	6882      	ldr	r2, [r0, #8]
 80069e8:	f000 bed4 	b.w	8007794 <_putc_r>
 80069ec:	20000068 	.word	0x20000068

080069f0 <_puts_r>:
 80069f0:	6a03      	ldr	r3, [r0, #32]
 80069f2:	b570      	push	{r4, r5, r6, lr}
 80069f4:	6884      	ldr	r4, [r0, #8]
 80069f6:	4605      	mov	r5, r0
 80069f8:	460e      	mov	r6, r1
 80069fa:	b90b      	cbnz	r3, 8006a00 <_puts_r+0x10>
 80069fc:	f7ff ffa8 	bl	8006950 <__sinit>
 8006a00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a02:	07db      	lsls	r3, r3, #31
 8006a04:	d405      	bmi.n	8006a12 <_puts_r+0x22>
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	0598      	lsls	r0, r3, #22
 8006a0a:	d402      	bmi.n	8006a12 <_puts_r+0x22>
 8006a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a0e:	f000 f99c 	bl	8006d4a <__retarget_lock_acquire_recursive>
 8006a12:	89a3      	ldrh	r3, [r4, #12]
 8006a14:	0719      	lsls	r1, r3, #28
 8006a16:	d513      	bpl.n	8006a40 <_puts_r+0x50>
 8006a18:	6923      	ldr	r3, [r4, #16]
 8006a1a:	b18b      	cbz	r3, 8006a40 <_puts_r+0x50>
 8006a1c:	3e01      	subs	r6, #1
 8006a1e:	68a3      	ldr	r3, [r4, #8]
 8006a20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a24:	3b01      	subs	r3, #1
 8006a26:	60a3      	str	r3, [r4, #8]
 8006a28:	b9e9      	cbnz	r1, 8006a66 <_puts_r+0x76>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	da2e      	bge.n	8006a8c <_puts_r+0x9c>
 8006a2e:	4622      	mov	r2, r4
 8006a30:	210a      	movs	r1, #10
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 f87b 	bl	8006b2e <__swbuf_r>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d007      	beq.n	8006a4c <_puts_r+0x5c>
 8006a3c:	250a      	movs	r5, #10
 8006a3e:	e007      	b.n	8006a50 <_puts_r+0x60>
 8006a40:	4621      	mov	r1, r4
 8006a42:	4628      	mov	r0, r5
 8006a44:	f000 f8b0 	bl	8006ba8 <__swsetup_r>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d0e7      	beq.n	8006a1c <_puts_r+0x2c>
 8006a4c:	f04f 35ff 	mov.w	r5, #4294967295
 8006a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a52:	07da      	lsls	r2, r3, #31
 8006a54:	d405      	bmi.n	8006a62 <_puts_r+0x72>
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	059b      	lsls	r3, r3, #22
 8006a5a:	d402      	bmi.n	8006a62 <_puts_r+0x72>
 8006a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a5e:	f000 f975 	bl	8006d4c <__retarget_lock_release_recursive>
 8006a62:	4628      	mov	r0, r5
 8006a64:	bd70      	pop	{r4, r5, r6, pc}
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	da04      	bge.n	8006a74 <_puts_r+0x84>
 8006a6a:	69a2      	ldr	r2, [r4, #24]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	dc06      	bgt.n	8006a7e <_puts_r+0x8e>
 8006a70:	290a      	cmp	r1, #10
 8006a72:	d004      	beq.n	8006a7e <_puts_r+0x8e>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	6022      	str	r2, [r4, #0]
 8006a7a:	7019      	strb	r1, [r3, #0]
 8006a7c:	e7cf      	b.n	8006a1e <_puts_r+0x2e>
 8006a7e:	4622      	mov	r2, r4
 8006a80:	4628      	mov	r0, r5
 8006a82:	f000 f854 	bl	8006b2e <__swbuf_r>
 8006a86:	3001      	adds	r0, #1
 8006a88:	d1c9      	bne.n	8006a1e <_puts_r+0x2e>
 8006a8a:	e7df      	b.n	8006a4c <_puts_r+0x5c>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	250a      	movs	r5, #10
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	6022      	str	r2, [r4, #0]
 8006a94:	701d      	strb	r5, [r3, #0]
 8006a96:	e7db      	b.n	8006a50 <_puts_r+0x60>

08006a98 <puts>:
 8006a98:	4b02      	ldr	r3, [pc, #8]	; (8006aa4 <puts+0xc>)
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	f7ff bfa7 	b.w	80069f0 <_puts_r>
 8006aa2:	bf00      	nop
 8006aa4:	20000068 	.word	0x20000068

08006aa8 <__sread>:
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	460c      	mov	r4, r1
 8006aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab0:	f000 f8fc 	bl	8006cac <_read_r>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	bfab      	itete	ge
 8006ab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aba:	89a3      	ldrhlt	r3, [r4, #12]
 8006abc:	181b      	addge	r3, r3, r0
 8006abe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ac2:	bfac      	ite	ge
 8006ac4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ac6:	81a3      	strhlt	r3, [r4, #12]
 8006ac8:	bd10      	pop	{r4, pc}

08006aca <__swrite>:
 8006aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ace:	461f      	mov	r7, r3
 8006ad0:	898b      	ldrh	r3, [r1, #12]
 8006ad2:	05db      	lsls	r3, r3, #23
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	4616      	mov	r6, r2
 8006ada:	d505      	bpl.n	8006ae8 <__swrite+0x1e>
 8006adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f000 f8d0 	bl	8006c88 <_lseek_r>
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	4632      	mov	r2, r6
 8006af6:	463b      	mov	r3, r7
 8006af8:	4628      	mov	r0, r5
 8006afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006afe:	f000 b8e7 	b.w	8006cd0 <_write_r>

08006b02 <__sseek>:
 8006b02:	b510      	push	{r4, lr}
 8006b04:	460c      	mov	r4, r1
 8006b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b0a:	f000 f8bd 	bl	8006c88 <_lseek_r>
 8006b0e:	1c43      	adds	r3, r0, #1
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	bf15      	itete	ne
 8006b14:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b1e:	81a3      	strheq	r3, [r4, #12]
 8006b20:	bf18      	it	ne
 8006b22:	81a3      	strhne	r3, [r4, #12]
 8006b24:	bd10      	pop	{r4, pc}

08006b26 <__sclose>:
 8006b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b2a:	f000 b89d 	b.w	8006c68 <_close_r>

08006b2e <__swbuf_r>:
 8006b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b30:	460e      	mov	r6, r1
 8006b32:	4614      	mov	r4, r2
 8006b34:	4605      	mov	r5, r0
 8006b36:	b118      	cbz	r0, 8006b40 <__swbuf_r+0x12>
 8006b38:	6a03      	ldr	r3, [r0, #32]
 8006b3a:	b90b      	cbnz	r3, 8006b40 <__swbuf_r+0x12>
 8006b3c:	f7ff ff08 	bl	8006950 <__sinit>
 8006b40:	69a3      	ldr	r3, [r4, #24]
 8006b42:	60a3      	str	r3, [r4, #8]
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	071a      	lsls	r2, r3, #28
 8006b48:	d525      	bpl.n	8006b96 <__swbuf_r+0x68>
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	b31b      	cbz	r3, 8006b96 <__swbuf_r+0x68>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	6922      	ldr	r2, [r4, #16]
 8006b52:	1a98      	subs	r0, r3, r2
 8006b54:	6963      	ldr	r3, [r4, #20]
 8006b56:	b2f6      	uxtb	r6, r6
 8006b58:	4283      	cmp	r3, r0
 8006b5a:	4637      	mov	r7, r6
 8006b5c:	dc04      	bgt.n	8006b68 <__swbuf_r+0x3a>
 8006b5e:	4621      	mov	r1, r4
 8006b60:	4628      	mov	r0, r5
 8006b62:	f000 fd7b 	bl	800765c <_fflush_r>
 8006b66:	b9e0      	cbnz	r0, 8006ba2 <__swbuf_r+0x74>
 8006b68:	68a3      	ldr	r3, [r4, #8]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	60a3      	str	r3, [r4, #8]
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	6022      	str	r2, [r4, #0]
 8006b74:	701e      	strb	r6, [r3, #0]
 8006b76:	6962      	ldr	r2, [r4, #20]
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d004      	beq.n	8006b88 <__swbuf_r+0x5a>
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	07db      	lsls	r3, r3, #31
 8006b82:	d506      	bpl.n	8006b92 <__swbuf_r+0x64>
 8006b84:	2e0a      	cmp	r6, #10
 8006b86:	d104      	bne.n	8006b92 <__swbuf_r+0x64>
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f000 fd66 	bl	800765c <_fflush_r>
 8006b90:	b938      	cbnz	r0, 8006ba2 <__swbuf_r+0x74>
 8006b92:	4638      	mov	r0, r7
 8006b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b96:	4621      	mov	r1, r4
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f000 f805 	bl	8006ba8 <__swsetup_r>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d0d5      	beq.n	8006b4e <__swbuf_r+0x20>
 8006ba2:	f04f 37ff 	mov.w	r7, #4294967295
 8006ba6:	e7f4      	b.n	8006b92 <__swbuf_r+0x64>

08006ba8 <__swsetup_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4b2a      	ldr	r3, [pc, #168]	; (8006c54 <__swsetup_r+0xac>)
 8006bac:	4605      	mov	r5, r0
 8006bae:	6818      	ldr	r0, [r3, #0]
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	b118      	cbz	r0, 8006bbc <__swsetup_r+0x14>
 8006bb4:	6a03      	ldr	r3, [r0, #32]
 8006bb6:	b90b      	cbnz	r3, 8006bbc <__swsetup_r+0x14>
 8006bb8:	f7ff feca 	bl	8006950 <__sinit>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bc2:	0718      	lsls	r0, r3, #28
 8006bc4:	d422      	bmi.n	8006c0c <__swsetup_r+0x64>
 8006bc6:	06d9      	lsls	r1, r3, #27
 8006bc8:	d407      	bmi.n	8006bda <__swsetup_r+0x32>
 8006bca:	2309      	movs	r3, #9
 8006bcc:	602b      	str	r3, [r5, #0]
 8006bce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bd2:	81a3      	strh	r3, [r4, #12]
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	e034      	b.n	8006c44 <__swsetup_r+0x9c>
 8006bda:	0758      	lsls	r0, r3, #29
 8006bdc:	d512      	bpl.n	8006c04 <__swsetup_r+0x5c>
 8006bde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006be0:	b141      	cbz	r1, 8006bf4 <__swsetup_r+0x4c>
 8006be2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006be6:	4299      	cmp	r1, r3
 8006be8:	d002      	beq.n	8006bf0 <__swsetup_r+0x48>
 8006bea:	4628      	mov	r0, r5
 8006bec:	f000 f8dc 	bl	8006da8 <_free_r>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	6363      	str	r3, [r4, #52]	; 0x34
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	6063      	str	r3, [r4, #4]
 8006c00:	6923      	ldr	r3, [r4, #16]
 8006c02:	6023      	str	r3, [r4, #0]
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	f043 0308 	orr.w	r3, r3, #8
 8006c0a:	81a3      	strh	r3, [r4, #12]
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	b94b      	cbnz	r3, 8006c24 <__swsetup_r+0x7c>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c1a:	d003      	beq.n	8006c24 <__swsetup_r+0x7c>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 fd7c 	bl	800771c <__smakebuf_r>
 8006c24:	89a0      	ldrh	r0, [r4, #12]
 8006c26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c2a:	f010 0301 	ands.w	r3, r0, #1
 8006c2e:	d00a      	beq.n	8006c46 <__swsetup_r+0x9e>
 8006c30:	2300      	movs	r3, #0
 8006c32:	60a3      	str	r3, [r4, #8]
 8006c34:	6963      	ldr	r3, [r4, #20]
 8006c36:	425b      	negs	r3, r3
 8006c38:	61a3      	str	r3, [r4, #24]
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	b943      	cbnz	r3, 8006c50 <__swsetup_r+0xa8>
 8006c3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c42:	d1c4      	bne.n	8006bce <__swsetup_r+0x26>
 8006c44:	bd38      	pop	{r3, r4, r5, pc}
 8006c46:	0781      	lsls	r1, r0, #30
 8006c48:	bf58      	it	pl
 8006c4a:	6963      	ldrpl	r3, [r4, #20]
 8006c4c:	60a3      	str	r3, [r4, #8]
 8006c4e:	e7f4      	b.n	8006c3a <__swsetup_r+0x92>
 8006c50:	2000      	movs	r0, #0
 8006c52:	e7f7      	b.n	8006c44 <__swsetup_r+0x9c>
 8006c54:	20000068 	.word	0x20000068

08006c58 <memset>:
 8006c58:	4402      	add	r2, r0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d100      	bne.n	8006c62 <memset+0xa>
 8006c60:	4770      	bx	lr
 8006c62:	f803 1b01 	strb.w	r1, [r3], #1
 8006c66:	e7f9      	b.n	8006c5c <memset+0x4>

08006c68 <_close_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4d06      	ldr	r5, [pc, #24]	; (8006c84 <_close_r+0x1c>)
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4604      	mov	r4, r0
 8006c70:	4608      	mov	r0, r1
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	f7fd fa8b 	bl	800418e <_close>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_close_r+0x1a>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_close_r+0x1a>
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	20000298 	.word	0x20000298

08006c88 <_lseek_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d07      	ldr	r5, [pc, #28]	; (8006ca8 <_lseek_r+0x20>)
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	4608      	mov	r0, r1
 8006c90:	4611      	mov	r1, r2
 8006c92:	2200      	movs	r2, #0
 8006c94:	602a      	str	r2, [r5, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f7fd faa0 	bl	80041dc <_lseek>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_lseek_r+0x1e>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_lseek_r+0x1e>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	20000298 	.word	0x20000298

08006cac <_read_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d07      	ldr	r5, [pc, #28]	; (8006ccc <_read_r+0x20>)
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	4608      	mov	r0, r1
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	602a      	str	r2, [r5, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f7fd fa4a 	bl	8004154 <_read>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_read_r+0x1e>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_read_r+0x1e>
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	20000298 	.word	0x20000298

08006cd0 <_write_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	4d07      	ldr	r5, [pc, #28]	; (8006cf0 <_write_r+0x20>)
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	4608      	mov	r0, r1
 8006cd8:	4611      	mov	r1, r2
 8006cda:	2200      	movs	r2, #0
 8006cdc:	602a      	str	r2, [r5, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f7fb fac6 	bl	8002270 <_write>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d102      	bne.n	8006cee <_write_r+0x1e>
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	b103      	cbz	r3, 8006cee <_write_r+0x1e>
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	bd38      	pop	{r3, r4, r5, pc}
 8006cf0:	20000298 	.word	0x20000298

08006cf4 <__errno>:
 8006cf4:	4b01      	ldr	r3, [pc, #4]	; (8006cfc <__errno+0x8>)
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	20000068 	.word	0x20000068

08006d00 <__libc_init_array>:
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	4d0d      	ldr	r5, [pc, #52]	; (8006d38 <__libc_init_array+0x38>)
 8006d04:	4c0d      	ldr	r4, [pc, #52]	; (8006d3c <__libc_init_array+0x3c>)
 8006d06:	1b64      	subs	r4, r4, r5
 8006d08:	10a4      	asrs	r4, r4, #2
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	42a6      	cmp	r6, r4
 8006d0e:	d109      	bne.n	8006d24 <__libc_init_array+0x24>
 8006d10:	4d0b      	ldr	r5, [pc, #44]	; (8006d40 <__libc_init_array+0x40>)
 8006d12:	4c0c      	ldr	r4, [pc, #48]	; (8006d44 <__libc_init_array+0x44>)
 8006d14:	f000 fdf0 	bl	80078f8 <_init>
 8006d18:	1b64      	subs	r4, r4, r5
 8006d1a:	10a4      	asrs	r4, r4, #2
 8006d1c:	2600      	movs	r6, #0
 8006d1e:	42a6      	cmp	r6, r4
 8006d20:	d105      	bne.n	8006d2e <__libc_init_array+0x2e>
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
 8006d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d28:	4798      	blx	r3
 8006d2a:	3601      	adds	r6, #1
 8006d2c:	e7ee      	b.n	8006d0c <__libc_init_array+0xc>
 8006d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d32:	4798      	blx	r3
 8006d34:	3601      	adds	r6, #1
 8006d36:	e7f2      	b.n	8006d1e <__libc_init_array+0x1e>
 8006d38:	08008594 	.word	0x08008594
 8006d3c:	08008594 	.word	0x08008594
 8006d40:	08008594 	.word	0x08008594
 8006d44:	08008598 	.word	0x08008598

08006d48 <__retarget_lock_init_recursive>:
 8006d48:	4770      	bx	lr

08006d4a <__retarget_lock_acquire_recursive>:
 8006d4a:	4770      	bx	lr

08006d4c <__retarget_lock_release_recursive>:
 8006d4c:	4770      	bx	lr

08006d4e <memcpy>:
 8006d4e:	440a      	add	r2, r1
 8006d50:	4291      	cmp	r1, r2
 8006d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d56:	d100      	bne.n	8006d5a <memcpy+0xc>
 8006d58:	4770      	bx	lr
 8006d5a:	b510      	push	{r4, lr}
 8006d5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d64:	4291      	cmp	r1, r2
 8006d66:	d1f9      	bne.n	8006d5c <memcpy+0xe>
 8006d68:	bd10      	pop	{r4, pc}
	...

08006d6c <__assert_func>:
 8006d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d6e:	4614      	mov	r4, r2
 8006d70:	461a      	mov	r2, r3
 8006d72:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <__assert_func+0x2c>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4605      	mov	r5, r0
 8006d78:	68d8      	ldr	r0, [r3, #12]
 8006d7a:	b14c      	cbz	r4, 8006d90 <__assert_func+0x24>
 8006d7c:	4b07      	ldr	r3, [pc, #28]	; (8006d9c <__assert_func+0x30>)
 8006d7e:	9100      	str	r1, [sp, #0]
 8006d80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d84:	4906      	ldr	r1, [pc, #24]	; (8006da0 <__assert_func+0x34>)
 8006d86:	462b      	mov	r3, r5
 8006d88:	f000 fc90 	bl	80076ac <fiprintf>
 8006d8c:	f000 fd68 	bl	8007860 <abort>
 8006d90:	4b04      	ldr	r3, [pc, #16]	; (8006da4 <__assert_func+0x38>)
 8006d92:	461c      	mov	r4, r3
 8006d94:	e7f3      	b.n	8006d7e <__assert_func+0x12>
 8006d96:	bf00      	nop
 8006d98:	20000068 	.word	0x20000068
 8006d9c:	0800851b 	.word	0x0800851b
 8006da0:	08008528 	.word	0x08008528
 8006da4:	08008556 	.word	0x08008556

08006da8 <_free_r>:
 8006da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006daa:	2900      	cmp	r1, #0
 8006dac:	d044      	beq.n	8006e38 <_free_r+0x90>
 8006dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006db2:	9001      	str	r0, [sp, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f1a1 0404 	sub.w	r4, r1, #4
 8006dba:	bfb8      	it	lt
 8006dbc:	18e4      	addlt	r4, r4, r3
 8006dbe:	f000 f8e7 	bl	8006f90 <__malloc_lock>
 8006dc2:	4a1e      	ldr	r2, [pc, #120]	; (8006e3c <_free_r+0x94>)
 8006dc4:	9801      	ldr	r0, [sp, #4]
 8006dc6:	6813      	ldr	r3, [r2, #0]
 8006dc8:	b933      	cbnz	r3, 8006dd8 <_free_r+0x30>
 8006dca:	6063      	str	r3, [r4, #4]
 8006dcc:	6014      	str	r4, [r2, #0]
 8006dce:	b003      	add	sp, #12
 8006dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dd4:	f000 b8e2 	b.w	8006f9c <__malloc_unlock>
 8006dd8:	42a3      	cmp	r3, r4
 8006dda:	d908      	bls.n	8006dee <_free_r+0x46>
 8006ddc:	6825      	ldr	r5, [r4, #0]
 8006dde:	1961      	adds	r1, r4, r5
 8006de0:	428b      	cmp	r3, r1
 8006de2:	bf01      	itttt	eq
 8006de4:	6819      	ldreq	r1, [r3, #0]
 8006de6:	685b      	ldreq	r3, [r3, #4]
 8006de8:	1949      	addeq	r1, r1, r5
 8006dea:	6021      	streq	r1, [r4, #0]
 8006dec:	e7ed      	b.n	8006dca <_free_r+0x22>
 8006dee:	461a      	mov	r2, r3
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	b10b      	cbz	r3, 8006df8 <_free_r+0x50>
 8006df4:	42a3      	cmp	r3, r4
 8006df6:	d9fa      	bls.n	8006dee <_free_r+0x46>
 8006df8:	6811      	ldr	r1, [r2, #0]
 8006dfa:	1855      	adds	r5, r2, r1
 8006dfc:	42a5      	cmp	r5, r4
 8006dfe:	d10b      	bne.n	8006e18 <_free_r+0x70>
 8006e00:	6824      	ldr	r4, [r4, #0]
 8006e02:	4421      	add	r1, r4
 8006e04:	1854      	adds	r4, r2, r1
 8006e06:	42a3      	cmp	r3, r4
 8006e08:	6011      	str	r1, [r2, #0]
 8006e0a:	d1e0      	bne.n	8006dce <_free_r+0x26>
 8006e0c:	681c      	ldr	r4, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	6053      	str	r3, [r2, #4]
 8006e12:	440c      	add	r4, r1
 8006e14:	6014      	str	r4, [r2, #0]
 8006e16:	e7da      	b.n	8006dce <_free_r+0x26>
 8006e18:	d902      	bls.n	8006e20 <_free_r+0x78>
 8006e1a:	230c      	movs	r3, #12
 8006e1c:	6003      	str	r3, [r0, #0]
 8006e1e:	e7d6      	b.n	8006dce <_free_r+0x26>
 8006e20:	6825      	ldr	r5, [r4, #0]
 8006e22:	1961      	adds	r1, r4, r5
 8006e24:	428b      	cmp	r3, r1
 8006e26:	bf04      	itt	eq
 8006e28:	6819      	ldreq	r1, [r3, #0]
 8006e2a:	685b      	ldreq	r3, [r3, #4]
 8006e2c:	6063      	str	r3, [r4, #4]
 8006e2e:	bf04      	itt	eq
 8006e30:	1949      	addeq	r1, r1, r5
 8006e32:	6021      	streq	r1, [r4, #0]
 8006e34:	6054      	str	r4, [r2, #4]
 8006e36:	e7ca      	b.n	8006dce <_free_r+0x26>
 8006e38:	b003      	add	sp, #12
 8006e3a:	bd30      	pop	{r4, r5, pc}
 8006e3c:	200002a0 	.word	0x200002a0

08006e40 <malloc>:
 8006e40:	4b02      	ldr	r3, [pc, #8]	; (8006e4c <malloc+0xc>)
 8006e42:	4601      	mov	r1, r0
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	f000 b823 	b.w	8006e90 <_malloc_r>
 8006e4a:	bf00      	nop
 8006e4c:	20000068 	.word	0x20000068

08006e50 <sbrk_aligned>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	4e0e      	ldr	r6, [pc, #56]	; (8006e8c <sbrk_aligned+0x3c>)
 8006e54:	460c      	mov	r4, r1
 8006e56:	6831      	ldr	r1, [r6, #0]
 8006e58:	4605      	mov	r5, r0
 8006e5a:	b911      	cbnz	r1, 8006e62 <sbrk_aligned+0x12>
 8006e5c:	f000 fcf0 	bl	8007840 <_sbrk_r>
 8006e60:	6030      	str	r0, [r6, #0]
 8006e62:	4621      	mov	r1, r4
 8006e64:	4628      	mov	r0, r5
 8006e66:	f000 fceb 	bl	8007840 <_sbrk_r>
 8006e6a:	1c43      	adds	r3, r0, #1
 8006e6c:	d00a      	beq.n	8006e84 <sbrk_aligned+0x34>
 8006e6e:	1cc4      	adds	r4, r0, #3
 8006e70:	f024 0403 	bic.w	r4, r4, #3
 8006e74:	42a0      	cmp	r0, r4
 8006e76:	d007      	beq.n	8006e88 <sbrk_aligned+0x38>
 8006e78:	1a21      	subs	r1, r4, r0
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f000 fce0 	bl	8007840 <_sbrk_r>
 8006e80:	3001      	adds	r0, #1
 8006e82:	d101      	bne.n	8006e88 <sbrk_aligned+0x38>
 8006e84:	f04f 34ff 	mov.w	r4, #4294967295
 8006e88:	4620      	mov	r0, r4
 8006e8a:	bd70      	pop	{r4, r5, r6, pc}
 8006e8c:	200002a4 	.word	0x200002a4

08006e90 <_malloc_r>:
 8006e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e94:	1ccd      	adds	r5, r1, #3
 8006e96:	f025 0503 	bic.w	r5, r5, #3
 8006e9a:	3508      	adds	r5, #8
 8006e9c:	2d0c      	cmp	r5, #12
 8006e9e:	bf38      	it	cc
 8006ea0:	250c      	movcc	r5, #12
 8006ea2:	2d00      	cmp	r5, #0
 8006ea4:	4607      	mov	r7, r0
 8006ea6:	db01      	blt.n	8006eac <_malloc_r+0x1c>
 8006ea8:	42a9      	cmp	r1, r5
 8006eaa:	d905      	bls.n	8006eb8 <_malloc_r+0x28>
 8006eac:	230c      	movs	r3, #12
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	2600      	movs	r6, #0
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eb8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f8c <_malloc_r+0xfc>
 8006ebc:	f000 f868 	bl	8006f90 <__malloc_lock>
 8006ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec4:	461c      	mov	r4, r3
 8006ec6:	bb5c      	cbnz	r4, 8006f20 <_malloc_r+0x90>
 8006ec8:	4629      	mov	r1, r5
 8006eca:	4638      	mov	r0, r7
 8006ecc:	f7ff ffc0 	bl	8006e50 <sbrk_aligned>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	d155      	bne.n	8006f82 <_malloc_r+0xf2>
 8006ed6:	f8d8 4000 	ldr.w	r4, [r8]
 8006eda:	4626      	mov	r6, r4
 8006edc:	2e00      	cmp	r6, #0
 8006ede:	d145      	bne.n	8006f6c <_malloc_r+0xdc>
 8006ee0:	2c00      	cmp	r4, #0
 8006ee2:	d048      	beq.n	8006f76 <_malloc_r+0xe6>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	4638      	mov	r0, r7
 8006eea:	eb04 0903 	add.w	r9, r4, r3
 8006eee:	f000 fca7 	bl	8007840 <_sbrk_r>
 8006ef2:	4581      	cmp	r9, r0
 8006ef4:	d13f      	bne.n	8006f76 <_malloc_r+0xe6>
 8006ef6:	6821      	ldr	r1, [r4, #0]
 8006ef8:	1a6d      	subs	r5, r5, r1
 8006efa:	4629      	mov	r1, r5
 8006efc:	4638      	mov	r0, r7
 8006efe:	f7ff ffa7 	bl	8006e50 <sbrk_aligned>
 8006f02:	3001      	adds	r0, #1
 8006f04:	d037      	beq.n	8006f76 <_malloc_r+0xe6>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	442b      	add	r3, r5
 8006f0a:	6023      	str	r3, [r4, #0]
 8006f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d038      	beq.n	8006f86 <_malloc_r+0xf6>
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	42a2      	cmp	r2, r4
 8006f18:	d12b      	bne.n	8006f72 <_malloc_r+0xe2>
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	605a      	str	r2, [r3, #4]
 8006f1e:	e00f      	b.n	8006f40 <_malloc_r+0xb0>
 8006f20:	6822      	ldr	r2, [r4, #0]
 8006f22:	1b52      	subs	r2, r2, r5
 8006f24:	d41f      	bmi.n	8006f66 <_malloc_r+0xd6>
 8006f26:	2a0b      	cmp	r2, #11
 8006f28:	d917      	bls.n	8006f5a <_malloc_r+0xca>
 8006f2a:	1961      	adds	r1, r4, r5
 8006f2c:	42a3      	cmp	r3, r4
 8006f2e:	6025      	str	r5, [r4, #0]
 8006f30:	bf18      	it	ne
 8006f32:	6059      	strne	r1, [r3, #4]
 8006f34:	6863      	ldr	r3, [r4, #4]
 8006f36:	bf08      	it	eq
 8006f38:	f8c8 1000 	streq.w	r1, [r8]
 8006f3c:	5162      	str	r2, [r4, r5]
 8006f3e:	604b      	str	r3, [r1, #4]
 8006f40:	4638      	mov	r0, r7
 8006f42:	f104 060b 	add.w	r6, r4, #11
 8006f46:	f000 f829 	bl	8006f9c <__malloc_unlock>
 8006f4a:	f026 0607 	bic.w	r6, r6, #7
 8006f4e:	1d23      	adds	r3, r4, #4
 8006f50:	1af2      	subs	r2, r6, r3
 8006f52:	d0ae      	beq.n	8006eb2 <_malloc_r+0x22>
 8006f54:	1b9b      	subs	r3, r3, r6
 8006f56:	50a3      	str	r3, [r4, r2]
 8006f58:	e7ab      	b.n	8006eb2 <_malloc_r+0x22>
 8006f5a:	42a3      	cmp	r3, r4
 8006f5c:	6862      	ldr	r2, [r4, #4]
 8006f5e:	d1dd      	bne.n	8006f1c <_malloc_r+0x8c>
 8006f60:	f8c8 2000 	str.w	r2, [r8]
 8006f64:	e7ec      	b.n	8006f40 <_malloc_r+0xb0>
 8006f66:	4623      	mov	r3, r4
 8006f68:	6864      	ldr	r4, [r4, #4]
 8006f6a:	e7ac      	b.n	8006ec6 <_malloc_r+0x36>
 8006f6c:	4634      	mov	r4, r6
 8006f6e:	6876      	ldr	r6, [r6, #4]
 8006f70:	e7b4      	b.n	8006edc <_malloc_r+0x4c>
 8006f72:	4613      	mov	r3, r2
 8006f74:	e7cc      	b.n	8006f10 <_malloc_r+0x80>
 8006f76:	230c      	movs	r3, #12
 8006f78:	603b      	str	r3, [r7, #0]
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	f000 f80e 	bl	8006f9c <__malloc_unlock>
 8006f80:	e797      	b.n	8006eb2 <_malloc_r+0x22>
 8006f82:	6025      	str	r5, [r4, #0]
 8006f84:	e7dc      	b.n	8006f40 <_malloc_r+0xb0>
 8006f86:	605b      	str	r3, [r3, #4]
 8006f88:	deff      	udf	#255	; 0xff
 8006f8a:	bf00      	nop
 8006f8c:	200002a0 	.word	0x200002a0

08006f90 <__malloc_lock>:
 8006f90:	4801      	ldr	r0, [pc, #4]	; (8006f98 <__malloc_lock+0x8>)
 8006f92:	f7ff beda 	b.w	8006d4a <__retarget_lock_acquire_recursive>
 8006f96:	bf00      	nop
 8006f98:	2000029c 	.word	0x2000029c

08006f9c <__malloc_unlock>:
 8006f9c:	4801      	ldr	r0, [pc, #4]	; (8006fa4 <__malloc_unlock+0x8>)
 8006f9e:	f7ff bed5 	b.w	8006d4c <__retarget_lock_release_recursive>
 8006fa2:	bf00      	nop
 8006fa4:	2000029c 	.word	0x2000029c

08006fa8 <__sfputc_r>:
 8006fa8:	6893      	ldr	r3, [r2, #8]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	b410      	push	{r4}
 8006fb0:	6093      	str	r3, [r2, #8]
 8006fb2:	da08      	bge.n	8006fc6 <__sfputc_r+0x1e>
 8006fb4:	6994      	ldr	r4, [r2, #24]
 8006fb6:	42a3      	cmp	r3, r4
 8006fb8:	db01      	blt.n	8006fbe <__sfputc_r+0x16>
 8006fba:	290a      	cmp	r1, #10
 8006fbc:	d103      	bne.n	8006fc6 <__sfputc_r+0x1e>
 8006fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fc2:	f7ff bdb4 	b.w	8006b2e <__swbuf_r>
 8006fc6:	6813      	ldr	r3, [r2, #0]
 8006fc8:	1c58      	adds	r0, r3, #1
 8006fca:	6010      	str	r0, [r2, #0]
 8006fcc:	7019      	strb	r1, [r3, #0]
 8006fce:	4608      	mov	r0, r1
 8006fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <__sfputs_r>:
 8006fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd8:	4606      	mov	r6, r0
 8006fda:	460f      	mov	r7, r1
 8006fdc:	4614      	mov	r4, r2
 8006fde:	18d5      	adds	r5, r2, r3
 8006fe0:	42ac      	cmp	r4, r5
 8006fe2:	d101      	bne.n	8006fe8 <__sfputs_r+0x12>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	e007      	b.n	8006ff8 <__sfputs_r+0x22>
 8006fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fec:	463a      	mov	r2, r7
 8006fee:	4630      	mov	r0, r6
 8006ff0:	f7ff ffda 	bl	8006fa8 <__sfputc_r>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d1f3      	bne.n	8006fe0 <__sfputs_r+0xa>
 8006ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ffc <_vfiprintf_r>:
 8006ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007000:	460d      	mov	r5, r1
 8007002:	b09d      	sub	sp, #116	; 0x74
 8007004:	4614      	mov	r4, r2
 8007006:	4698      	mov	r8, r3
 8007008:	4606      	mov	r6, r0
 800700a:	b118      	cbz	r0, 8007014 <_vfiprintf_r+0x18>
 800700c:	6a03      	ldr	r3, [r0, #32]
 800700e:	b90b      	cbnz	r3, 8007014 <_vfiprintf_r+0x18>
 8007010:	f7ff fc9e 	bl	8006950 <__sinit>
 8007014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007016:	07d9      	lsls	r1, r3, #31
 8007018:	d405      	bmi.n	8007026 <_vfiprintf_r+0x2a>
 800701a:	89ab      	ldrh	r3, [r5, #12]
 800701c:	059a      	lsls	r2, r3, #22
 800701e:	d402      	bmi.n	8007026 <_vfiprintf_r+0x2a>
 8007020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007022:	f7ff fe92 	bl	8006d4a <__retarget_lock_acquire_recursive>
 8007026:	89ab      	ldrh	r3, [r5, #12]
 8007028:	071b      	lsls	r3, r3, #28
 800702a:	d501      	bpl.n	8007030 <_vfiprintf_r+0x34>
 800702c:	692b      	ldr	r3, [r5, #16]
 800702e:	b99b      	cbnz	r3, 8007058 <_vfiprintf_r+0x5c>
 8007030:	4629      	mov	r1, r5
 8007032:	4630      	mov	r0, r6
 8007034:	f7ff fdb8 	bl	8006ba8 <__swsetup_r>
 8007038:	b170      	cbz	r0, 8007058 <_vfiprintf_r+0x5c>
 800703a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800703c:	07dc      	lsls	r4, r3, #31
 800703e:	d504      	bpl.n	800704a <_vfiprintf_r+0x4e>
 8007040:	f04f 30ff 	mov.w	r0, #4294967295
 8007044:	b01d      	add	sp, #116	; 0x74
 8007046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704a:	89ab      	ldrh	r3, [r5, #12]
 800704c:	0598      	lsls	r0, r3, #22
 800704e:	d4f7      	bmi.n	8007040 <_vfiprintf_r+0x44>
 8007050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007052:	f7ff fe7b 	bl	8006d4c <__retarget_lock_release_recursive>
 8007056:	e7f3      	b.n	8007040 <_vfiprintf_r+0x44>
 8007058:	2300      	movs	r3, #0
 800705a:	9309      	str	r3, [sp, #36]	; 0x24
 800705c:	2320      	movs	r3, #32
 800705e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007062:	f8cd 800c 	str.w	r8, [sp, #12]
 8007066:	2330      	movs	r3, #48	; 0x30
 8007068:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800721c <_vfiprintf_r+0x220>
 800706c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007070:	f04f 0901 	mov.w	r9, #1
 8007074:	4623      	mov	r3, r4
 8007076:	469a      	mov	sl, r3
 8007078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800707c:	b10a      	cbz	r2, 8007082 <_vfiprintf_r+0x86>
 800707e:	2a25      	cmp	r2, #37	; 0x25
 8007080:	d1f9      	bne.n	8007076 <_vfiprintf_r+0x7a>
 8007082:	ebba 0b04 	subs.w	fp, sl, r4
 8007086:	d00b      	beq.n	80070a0 <_vfiprintf_r+0xa4>
 8007088:	465b      	mov	r3, fp
 800708a:	4622      	mov	r2, r4
 800708c:	4629      	mov	r1, r5
 800708e:	4630      	mov	r0, r6
 8007090:	f7ff ffa1 	bl	8006fd6 <__sfputs_r>
 8007094:	3001      	adds	r0, #1
 8007096:	f000 80a9 	beq.w	80071ec <_vfiprintf_r+0x1f0>
 800709a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800709c:	445a      	add	r2, fp
 800709e:	9209      	str	r2, [sp, #36]	; 0x24
 80070a0:	f89a 3000 	ldrb.w	r3, [sl]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 80a1 	beq.w	80071ec <_vfiprintf_r+0x1f0>
 80070aa:	2300      	movs	r3, #0
 80070ac:	f04f 32ff 	mov.w	r2, #4294967295
 80070b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070b4:	f10a 0a01 	add.w	sl, sl, #1
 80070b8:	9304      	str	r3, [sp, #16]
 80070ba:	9307      	str	r3, [sp, #28]
 80070bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070c0:	931a      	str	r3, [sp, #104]	; 0x68
 80070c2:	4654      	mov	r4, sl
 80070c4:	2205      	movs	r2, #5
 80070c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ca:	4854      	ldr	r0, [pc, #336]	; (800721c <_vfiprintf_r+0x220>)
 80070cc:	f7f9 f888 	bl	80001e0 <memchr>
 80070d0:	9a04      	ldr	r2, [sp, #16]
 80070d2:	b9d8      	cbnz	r0, 800710c <_vfiprintf_r+0x110>
 80070d4:	06d1      	lsls	r1, r2, #27
 80070d6:	bf44      	itt	mi
 80070d8:	2320      	movmi	r3, #32
 80070da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070de:	0713      	lsls	r3, r2, #28
 80070e0:	bf44      	itt	mi
 80070e2:	232b      	movmi	r3, #43	; 0x2b
 80070e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070e8:	f89a 3000 	ldrb.w	r3, [sl]
 80070ec:	2b2a      	cmp	r3, #42	; 0x2a
 80070ee:	d015      	beq.n	800711c <_vfiprintf_r+0x120>
 80070f0:	9a07      	ldr	r2, [sp, #28]
 80070f2:	4654      	mov	r4, sl
 80070f4:	2000      	movs	r0, #0
 80070f6:	f04f 0c0a 	mov.w	ip, #10
 80070fa:	4621      	mov	r1, r4
 80070fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007100:	3b30      	subs	r3, #48	; 0x30
 8007102:	2b09      	cmp	r3, #9
 8007104:	d94d      	bls.n	80071a2 <_vfiprintf_r+0x1a6>
 8007106:	b1b0      	cbz	r0, 8007136 <_vfiprintf_r+0x13a>
 8007108:	9207      	str	r2, [sp, #28]
 800710a:	e014      	b.n	8007136 <_vfiprintf_r+0x13a>
 800710c:	eba0 0308 	sub.w	r3, r0, r8
 8007110:	fa09 f303 	lsl.w	r3, r9, r3
 8007114:	4313      	orrs	r3, r2
 8007116:	9304      	str	r3, [sp, #16]
 8007118:	46a2      	mov	sl, r4
 800711a:	e7d2      	b.n	80070c2 <_vfiprintf_r+0xc6>
 800711c:	9b03      	ldr	r3, [sp, #12]
 800711e:	1d19      	adds	r1, r3, #4
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	9103      	str	r1, [sp, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	bfbb      	ittet	lt
 8007128:	425b      	neglt	r3, r3
 800712a:	f042 0202 	orrlt.w	r2, r2, #2
 800712e:	9307      	strge	r3, [sp, #28]
 8007130:	9307      	strlt	r3, [sp, #28]
 8007132:	bfb8      	it	lt
 8007134:	9204      	strlt	r2, [sp, #16]
 8007136:	7823      	ldrb	r3, [r4, #0]
 8007138:	2b2e      	cmp	r3, #46	; 0x2e
 800713a:	d10c      	bne.n	8007156 <_vfiprintf_r+0x15a>
 800713c:	7863      	ldrb	r3, [r4, #1]
 800713e:	2b2a      	cmp	r3, #42	; 0x2a
 8007140:	d134      	bne.n	80071ac <_vfiprintf_r+0x1b0>
 8007142:	9b03      	ldr	r3, [sp, #12]
 8007144:	1d1a      	adds	r2, r3, #4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	9203      	str	r2, [sp, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	bfb8      	it	lt
 800714e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007152:	3402      	adds	r4, #2
 8007154:	9305      	str	r3, [sp, #20]
 8007156:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800722c <_vfiprintf_r+0x230>
 800715a:	7821      	ldrb	r1, [r4, #0]
 800715c:	2203      	movs	r2, #3
 800715e:	4650      	mov	r0, sl
 8007160:	f7f9 f83e 	bl	80001e0 <memchr>
 8007164:	b138      	cbz	r0, 8007176 <_vfiprintf_r+0x17a>
 8007166:	9b04      	ldr	r3, [sp, #16]
 8007168:	eba0 000a 	sub.w	r0, r0, sl
 800716c:	2240      	movs	r2, #64	; 0x40
 800716e:	4082      	lsls	r2, r0
 8007170:	4313      	orrs	r3, r2
 8007172:	3401      	adds	r4, #1
 8007174:	9304      	str	r3, [sp, #16]
 8007176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717a:	4829      	ldr	r0, [pc, #164]	; (8007220 <_vfiprintf_r+0x224>)
 800717c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007180:	2206      	movs	r2, #6
 8007182:	f7f9 f82d 	bl	80001e0 <memchr>
 8007186:	2800      	cmp	r0, #0
 8007188:	d03f      	beq.n	800720a <_vfiprintf_r+0x20e>
 800718a:	4b26      	ldr	r3, [pc, #152]	; (8007224 <_vfiprintf_r+0x228>)
 800718c:	bb1b      	cbnz	r3, 80071d6 <_vfiprintf_r+0x1da>
 800718e:	9b03      	ldr	r3, [sp, #12]
 8007190:	3307      	adds	r3, #7
 8007192:	f023 0307 	bic.w	r3, r3, #7
 8007196:	3308      	adds	r3, #8
 8007198:	9303      	str	r3, [sp, #12]
 800719a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719c:	443b      	add	r3, r7
 800719e:	9309      	str	r3, [sp, #36]	; 0x24
 80071a0:	e768      	b.n	8007074 <_vfiprintf_r+0x78>
 80071a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80071a6:	460c      	mov	r4, r1
 80071a8:	2001      	movs	r0, #1
 80071aa:	e7a6      	b.n	80070fa <_vfiprintf_r+0xfe>
 80071ac:	2300      	movs	r3, #0
 80071ae:	3401      	adds	r4, #1
 80071b0:	9305      	str	r3, [sp, #20]
 80071b2:	4619      	mov	r1, r3
 80071b4:	f04f 0c0a 	mov.w	ip, #10
 80071b8:	4620      	mov	r0, r4
 80071ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071be:	3a30      	subs	r2, #48	; 0x30
 80071c0:	2a09      	cmp	r2, #9
 80071c2:	d903      	bls.n	80071cc <_vfiprintf_r+0x1d0>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0c6      	beq.n	8007156 <_vfiprintf_r+0x15a>
 80071c8:	9105      	str	r1, [sp, #20]
 80071ca:	e7c4      	b.n	8007156 <_vfiprintf_r+0x15a>
 80071cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80071d0:	4604      	mov	r4, r0
 80071d2:	2301      	movs	r3, #1
 80071d4:	e7f0      	b.n	80071b8 <_vfiprintf_r+0x1bc>
 80071d6:	ab03      	add	r3, sp, #12
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	462a      	mov	r2, r5
 80071dc:	4b12      	ldr	r3, [pc, #72]	; (8007228 <_vfiprintf_r+0x22c>)
 80071de:	a904      	add	r1, sp, #16
 80071e0:	4630      	mov	r0, r6
 80071e2:	f3af 8000 	nop.w
 80071e6:	4607      	mov	r7, r0
 80071e8:	1c78      	adds	r0, r7, #1
 80071ea:	d1d6      	bne.n	800719a <_vfiprintf_r+0x19e>
 80071ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ee:	07d9      	lsls	r1, r3, #31
 80071f0:	d405      	bmi.n	80071fe <_vfiprintf_r+0x202>
 80071f2:	89ab      	ldrh	r3, [r5, #12]
 80071f4:	059a      	lsls	r2, r3, #22
 80071f6:	d402      	bmi.n	80071fe <_vfiprintf_r+0x202>
 80071f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071fa:	f7ff fda7 	bl	8006d4c <__retarget_lock_release_recursive>
 80071fe:	89ab      	ldrh	r3, [r5, #12]
 8007200:	065b      	lsls	r3, r3, #25
 8007202:	f53f af1d 	bmi.w	8007040 <_vfiprintf_r+0x44>
 8007206:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007208:	e71c      	b.n	8007044 <_vfiprintf_r+0x48>
 800720a:	ab03      	add	r3, sp, #12
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	462a      	mov	r2, r5
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <_vfiprintf_r+0x22c>)
 8007212:	a904      	add	r1, sp, #16
 8007214:	4630      	mov	r0, r6
 8007216:	f000 f879 	bl	800730c <_printf_i>
 800721a:	e7e4      	b.n	80071e6 <_vfiprintf_r+0x1ea>
 800721c:	08008557 	.word	0x08008557
 8007220:	08008561 	.word	0x08008561
 8007224:	00000000 	.word	0x00000000
 8007228:	08006fd7 	.word	0x08006fd7
 800722c:	0800855d 	.word	0x0800855d

08007230 <_printf_common>:
 8007230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	4616      	mov	r6, r2
 8007236:	4699      	mov	r9, r3
 8007238:	688a      	ldr	r2, [r1, #8]
 800723a:	690b      	ldr	r3, [r1, #16]
 800723c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007240:	4293      	cmp	r3, r2
 8007242:	bfb8      	it	lt
 8007244:	4613      	movlt	r3, r2
 8007246:	6033      	str	r3, [r6, #0]
 8007248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800724c:	4607      	mov	r7, r0
 800724e:	460c      	mov	r4, r1
 8007250:	b10a      	cbz	r2, 8007256 <_printf_common+0x26>
 8007252:	3301      	adds	r3, #1
 8007254:	6033      	str	r3, [r6, #0]
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	0699      	lsls	r1, r3, #26
 800725a:	bf42      	ittt	mi
 800725c:	6833      	ldrmi	r3, [r6, #0]
 800725e:	3302      	addmi	r3, #2
 8007260:	6033      	strmi	r3, [r6, #0]
 8007262:	6825      	ldr	r5, [r4, #0]
 8007264:	f015 0506 	ands.w	r5, r5, #6
 8007268:	d106      	bne.n	8007278 <_printf_common+0x48>
 800726a:	f104 0a19 	add.w	sl, r4, #25
 800726e:	68e3      	ldr	r3, [r4, #12]
 8007270:	6832      	ldr	r2, [r6, #0]
 8007272:	1a9b      	subs	r3, r3, r2
 8007274:	42ab      	cmp	r3, r5
 8007276:	dc26      	bgt.n	80072c6 <_printf_common+0x96>
 8007278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800727c:	1e13      	subs	r3, r2, #0
 800727e:	6822      	ldr	r2, [r4, #0]
 8007280:	bf18      	it	ne
 8007282:	2301      	movne	r3, #1
 8007284:	0692      	lsls	r2, r2, #26
 8007286:	d42b      	bmi.n	80072e0 <_printf_common+0xb0>
 8007288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800728c:	4649      	mov	r1, r9
 800728e:	4638      	mov	r0, r7
 8007290:	47c0      	blx	r8
 8007292:	3001      	adds	r0, #1
 8007294:	d01e      	beq.n	80072d4 <_printf_common+0xa4>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	6922      	ldr	r2, [r4, #16]
 800729a:	f003 0306 	and.w	r3, r3, #6
 800729e:	2b04      	cmp	r3, #4
 80072a0:	bf02      	ittt	eq
 80072a2:	68e5      	ldreq	r5, [r4, #12]
 80072a4:	6833      	ldreq	r3, [r6, #0]
 80072a6:	1aed      	subeq	r5, r5, r3
 80072a8:	68a3      	ldr	r3, [r4, #8]
 80072aa:	bf0c      	ite	eq
 80072ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072b0:	2500      	movne	r5, #0
 80072b2:	4293      	cmp	r3, r2
 80072b4:	bfc4      	itt	gt
 80072b6:	1a9b      	subgt	r3, r3, r2
 80072b8:	18ed      	addgt	r5, r5, r3
 80072ba:	2600      	movs	r6, #0
 80072bc:	341a      	adds	r4, #26
 80072be:	42b5      	cmp	r5, r6
 80072c0:	d11a      	bne.n	80072f8 <_printf_common+0xc8>
 80072c2:	2000      	movs	r0, #0
 80072c4:	e008      	b.n	80072d8 <_printf_common+0xa8>
 80072c6:	2301      	movs	r3, #1
 80072c8:	4652      	mov	r2, sl
 80072ca:	4649      	mov	r1, r9
 80072cc:	4638      	mov	r0, r7
 80072ce:	47c0      	blx	r8
 80072d0:	3001      	adds	r0, #1
 80072d2:	d103      	bne.n	80072dc <_printf_common+0xac>
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072dc:	3501      	adds	r5, #1
 80072de:	e7c6      	b.n	800726e <_printf_common+0x3e>
 80072e0:	18e1      	adds	r1, r4, r3
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	2030      	movs	r0, #48	; 0x30
 80072e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ea:	4422      	add	r2, r4
 80072ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072f4:	3302      	adds	r3, #2
 80072f6:	e7c7      	b.n	8007288 <_printf_common+0x58>
 80072f8:	2301      	movs	r3, #1
 80072fa:	4622      	mov	r2, r4
 80072fc:	4649      	mov	r1, r9
 80072fe:	4638      	mov	r0, r7
 8007300:	47c0      	blx	r8
 8007302:	3001      	adds	r0, #1
 8007304:	d0e6      	beq.n	80072d4 <_printf_common+0xa4>
 8007306:	3601      	adds	r6, #1
 8007308:	e7d9      	b.n	80072be <_printf_common+0x8e>
	...

0800730c <_printf_i>:
 800730c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007310:	7e0f      	ldrb	r7, [r1, #24]
 8007312:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007314:	2f78      	cmp	r7, #120	; 0x78
 8007316:	4691      	mov	r9, r2
 8007318:	4680      	mov	r8, r0
 800731a:	460c      	mov	r4, r1
 800731c:	469a      	mov	sl, r3
 800731e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007322:	d807      	bhi.n	8007334 <_printf_i+0x28>
 8007324:	2f62      	cmp	r7, #98	; 0x62
 8007326:	d80a      	bhi.n	800733e <_printf_i+0x32>
 8007328:	2f00      	cmp	r7, #0
 800732a:	f000 80d4 	beq.w	80074d6 <_printf_i+0x1ca>
 800732e:	2f58      	cmp	r7, #88	; 0x58
 8007330:	f000 80c0 	beq.w	80074b4 <_printf_i+0x1a8>
 8007334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800733c:	e03a      	b.n	80073b4 <_printf_i+0xa8>
 800733e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007342:	2b15      	cmp	r3, #21
 8007344:	d8f6      	bhi.n	8007334 <_printf_i+0x28>
 8007346:	a101      	add	r1, pc, #4	; (adr r1, 800734c <_printf_i+0x40>)
 8007348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800734c:	080073a5 	.word	0x080073a5
 8007350:	080073b9 	.word	0x080073b9
 8007354:	08007335 	.word	0x08007335
 8007358:	08007335 	.word	0x08007335
 800735c:	08007335 	.word	0x08007335
 8007360:	08007335 	.word	0x08007335
 8007364:	080073b9 	.word	0x080073b9
 8007368:	08007335 	.word	0x08007335
 800736c:	08007335 	.word	0x08007335
 8007370:	08007335 	.word	0x08007335
 8007374:	08007335 	.word	0x08007335
 8007378:	080074bd 	.word	0x080074bd
 800737c:	080073e5 	.word	0x080073e5
 8007380:	08007477 	.word	0x08007477
 8007384:	08007335 	.word	0x08007335
 8007388:	08007335 	.word	0x08007335
 800738c:	080074df 	.word	0x080074df
 8007390:	08007335 	.word	0x08007335
 8007394:	080073e5 	.word	0x080073e5
 8007398:	08007335 	.word	0x08007335
 800739c:	08007335 	.word	0x08007335
 80073a0:	0800747f 	.word	0x0800747f
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	1d1a      	adds	r2, r3, #4
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	602a      	str	r2, [r5, #0]
 80073ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073b4:	2301      	movs	r3, #1
 80073b6:	e09f      	b.n	80074f8 <_printf_i+0x1ec>
 80073b8:	6820      	ldr	r0, [r4, #0]
 80073ba:	682b      	ldr	r3, [r5, #0]
 80073bc:	0607      	lsls	r7, r0, #24
 80073be:	f103 0104 	add.w	r1, r3, #4
 80073c2:	6029      	str	r1, [r5, #0]
 80073c4:	d501      	bpl.n	80073ca <_printf_i+0xbe>
 80073c6:	681e      	ldr	r6, [r3, #0]
 80073c8:	e003      	b.n	80073d2 <_printf_i+0xc6>
 80073ca:	0646      	lsls	r6, r0, #25
 80073cc:	d5fb      	bpl.n	80073c6 <_printf_i+0xba>
 80073ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80073d2:	2e00      	cmp	r6, #0
 80073d4:	da03      	bge.n	80073de <_printf_i+0xd2>
 80073d6:	232d      	movs	r3, #45	; 0x2d
 80073d8:	4276      	negs	r6, r6
 80073da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073de:	485a      	ldr	r0, [pc, #360]	; (8007548 <_printf_i+0x23c>)
 80073e0:	230a      	movs	r3, #10
 80073e2:	e012      	b.n	800740a <_printf_i+0xfe>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	6820      	ldr	r0, [r4, #0]
 80073e8:	1d19      	adds	r1, r3, #4
 80073ea:	6029      	str	r1, [r5, #0]
 80073ec:	0605      	lsls	r5, r0, #24
 80073ee:	d501      	bpl.n	80073f4 <_printf_i+0xe8>
 80073f0:	681e      	ldr	r6, [r3, #0]
 80073f2:	e002      	b.n	80073fa <_printf_i+0xee>
 80073f4:	0641      	lsls	r1, r0, #25
 80073f6:	d5fb      	bpl.n	80073f0 <_printf_i+0xe4>
 80073f8:	881e      	ldrh	r6, [r3, #0]
 80073fa:	4853      	ldr	r0, [pc, #332]	; (8007548 <_printf_i+0x23c>)
 80073fc:	2f6f      	cmp	r7, #111	; 0x6f
 80073fe:	bf0c      	ite	eq
 8007400:	2308      	moveq	r3, #8
 8007402:	230a      	movne	r3, #10
 8007404:	2100      	movs	r1, #0
 8007406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800740a:	6865      	ldr	r5, [r4, #4]
 800740c:	60a5      	str	r5, [r4, #8]
 800740e:	2d00      	cmp	r5, #0
 8007410:	bfa2      	ittt	ge
 8007412:	6821      	ldrge	r1, [r4, #0]
 8007414:	f021 0104 	bicge.w	r1, r1, #4
 8007418:	6021      	strge	r1, [r4, #0]
 800741a:	b90e      	cbnz	r6, 8007420 <_printf_i+0x114>
 800741c:	2d00      	cmp	r5, #0
 800741e:	d04b      	beq.n	80074b8 <_printf_i+0x1ac>
 8007420:	4615      	mov	r5, r2
 8007422:	fbb6 f1f3 	udiv	r1, r6, r3
 8007426:	fb03 6711 	mls	r7, r3, r1, r6
 800742a:	5dc7      	ldrb	r7, [r0, r7]
 800742c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007430:	4637      	mov	r7, r6
 8007432:	42bb      	cmp	r3, r7
 8007434:	460e      	mov	r6, r1
 8007436:	d9f4      	bls.n	8007422 <_printf_i+0x116>
 8007438:	2b08      	cmp	r3, #8
 800743a:	d10b      	bne.n	8007454 <_printf_i+0x148>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	07de      	lsls	r6, r3, #31
 8007440:	d508      	bpl.n	8007454 <_printf_i+0x148>
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	6861      	ldr	r1, [r4, #4]
 8007446:	4299      	cmp	r1, r3
 8007448:	bfde      	ittt	le
 800744a:	2330      	movle	r3, #48	; 0x30
 800744c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007450:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007454:	1b52      	subs	r2, r2, r5
 8007456:	6122      	str	r2, [r4, #16]
 8007458:	f8cd a000 	str.w	sl, [sp]
 800745c:	464b      	mov	r3, r9
 800745e:	aa03      	add	r2, sp, #12
 8007460:	4621      	mov	r1, r4
 8007462:	4640      	mov	r0, r8
 8007464:	f7ff fee4 	bl	8007230 <_printf_common>
 8007468:	3001      	adds	r0, #1
 800746a:	d14a      	bne.n	8007502 <_printf_i+0x1f6>
 800746c:	f04f 30ff 	mov.w	r0, #4294967295
 8007470:	b004      	add	sp, #16
 8007472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	f043 0320 	orr.w	r3, r3, #32
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	4833      	ldr	r0, [pc, #204]	; (800754c <_printf_i+0x240>)
 8007480:	2778      	movs	r7, #120	; 0x78
 8007482:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	6829      	ldr	r1, [r5, #0]
 800748a:	061f      	lsls	r7, r3, #24
 800748c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007490:	d402      	bmi.n	8007498 <_printf_i+0x18c>
 8007492:	065f      	lsls	r7, r3, #25
 8007494:	bf48      	it	mi
 8007496:	b2b6      	uxthmi	r6, r6
 8007498:	07df      	lsls	r7, r3, #31
 800749a:	bf48      	it	mi
 800749c:	f043 0320 	orrmi.w	r3, r3, #32
 80074a0:	6029      	str	r1, [r5, #0]
 80074a2:	bf48      	it	mi
 80074a4:	6023      	strmi	r3, [r4, #0]
 80074a6:	b91e      	cbnz	r6, 80074b0 <_printf_i+0x1a4>
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	f023 0320 	bic.w	r3, r3, #32
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	2310      	movs	r3, #16
 80074b2:	e7a7      	b.n	8007404 <_printf_i+0xf8>
 80074b4:	4824      	ldr	r0, [pc, #144]	; (8007548 <_printf_i+0x23c>)
 80074b6:	e7e4      	b.n	8007482 <_printf_i+0x176>
 80074b8:	4615      	mov	r5, r2
 80074ba:	e7bd      	b.n	8007438 <_printf_i+0x12c>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	6826      	ldr	r6, [r4, #0]
 80074c0:	6961      	ldr	r1, [r4, #20]
 80074c2:	1d18      	adds	r0, r3, #4
 80074c4:	6028      	str	r0, [r5, #0]
 80074c6:	0635      	lsls	r5, r6, #24
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	d501      	bpl.n	80074d0 <_printf_i+0x1c4>
 80074cc:	6019      	str	r1, [r3, #0]
 80074ce:	e002      	b.n	80074d6 <_printf_i+0x1ca>
 80074d0:	0670      	lsls	r0, r6, #25
 80074d2:	d5fb      	bpl.n	80074cc <_printf_i+0x1c0>
 80074d4:	8019      	strh	r1, [r3, #0]
 80074d6:	2300      	movs	r3, #0
 80074d8:	6123      	str	r3, [r4, #16]
 80074da:	4615      	mov	r5, r2
 80074dc:	e7bc      	b.n	8007458 <_printf_i+0x14c>
 80074de:	682b      	ldr	r3, [r5, #0]
 80074e0:	1d1a      	adds	r2, r3, #4
 80074e2:	602a      	str	r2, [r5, #0]
 80074e4:	681d      	ldr	r5, [r3, #0]
 80074e6:	6862      	ldr	r2, [r4, #4]
 80074e8:	2100      	movs	r1, #0
 80074ea:	4628      	mov	r0, r5
 80074ec:	f7f8 fe78 	bl	80001e0 <memchr>
 80074f0:	b108      	cbz	r0, 80074f6 <_printf_i+0x1ea>
 80074f2:	1b40      	subs	r0, r0, r5
 80074f4:	6060      	str	r0, [r4, #4]
 80074f6:	6863      	ldr	r3, [r4, #4]
 80074f8:	6123      	str	r3, [r4, #16]
 80074fa:	2300      	movs	r3, #0
 80074fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007500:	e7aa      	b.n	8007458 <_printf_i+0x14c>
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	462a      	mov	r2, r5
 8007506:	4649      	mov	r1, r9
 8007508:	4640      	mov	r0, r8
 800750a:	47d0      	blx	sl
 800750c:	3001      	adds	r0, #1
 800750e:	d0ad      	beq.n	800746c <_printf_i+0x160>
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	079b      	lsls	r3, r3, #30
 8007514:	d413      	bmi.n	800753e <_printf_i+0x232>
 8007516:	68e0      	ldr	r0, [r4, #12]
 8007518:	9b03      	ldr	r3, [sp, #12]
 800751a:	4298      	cmp	r0, r3
 800751c:	bfb8      	it	lt
 800751e:	4618      	movlt	r0, r3
 8007520:	e7a6      	b.n	8007470 <_printf_i+0x164>
 8007522:	2301      	movs	r3, #1
 8007524:	4632      	mov	r2, r6
 8007526:	4649      	mov	r1, r9
 8007528:	4640      	mov	r0, r8
 800752a:	47d0      	blx	sl
 800752c:	3001      	adds	r0, #1
 800752e:	d09d      	beq.n	800746c <_printf_i+0x160>
 8007530:	3501      	adds	r5, #1
 8007532:	68e3      	ldr	r3, [r4, #12]
 8007534:	9903      	ldr	r1, [sp, #12]
 8007536:	1a5b      	subs	r3, r3, r1
 8007538:	42ab      	cmp	r3, r5
 800753a:	dcf2      	bgt.n	8007522 <_printf_i+0x216>
 800753c:	e7eb      	b.n	8007516 <_printf_i+0x20a>
 800753e:	2500      	movs	r5, #0
 8007540:	f104 0619 	add.w	r6, r4, #25
 8007544:	e7f5      	b.n	8007532 <_printf_i+0x226>
 8007546:	bf00      	nop
 8007548:	08008568 	.word	0x08008568
 800754c:	08008579 	.word	0x08008579

08007550 <__sflush_r>:
 8007550:	898a      	ldrh	r2, [r1, #12]
 8007552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007556:	4605      	mov	r5, r0
 8007558:	0710      	lsls	r0, r2, #28
 800755a:	460c      	mov	r4, r1
 800755c:	d458      	bmi.n	8007610 <__sflush_r+0xc0>
 800755e:	684b      	ldr	r3, [r1, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	dc05      	bgt.n	8007570 <__sflush_r+0x20>
 8007564:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	dc02      	bgt.n	8007570 <__sflush_r+0x20>
 800756a:	2000      	movs	r0, #0
 800756c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007572:	2e00      	cmp	r6, #0
 8007574:	d0f9      	beq.n	800756a <__sflush_r+0x1a>
 8007576:	2300      	movs	r3, #0
 8007578:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800757c:	682f      	ldr	r7, [r5, #0]
 800757e:	6a21      	ldr	r1, [r4, #32]
 8007580:	602b      	str	r3, [r5, #0]
 8007582:	d032      	beq.n	80075ea <__sflush_r+0x9a>
 8007584:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	075a      	lsls	r2, r3, #29
 800758a:	d505      	bpl.n	8007598 <__sflush_r+0x48>
 800758c:	6863      	ldr	r3, [r4, #4]
 800758e:	1ac0      	subs	r0, r0, r3
 8007590:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007592:	b10b      	cbz	r3, 8007598 <__sflush_r+0x48>
 8007594:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007596:	1ac0      	subs	r0, r0, r3
 8007598:	2300      	movs	r3, #0
 800759a:	4602      	mov	r2, r0
 800759c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800759e:	6a21      	ldr	r1, [r4, #32]
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b0      	blx	r6
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	89a3      	ldrh	r3, [r4, #12]
 80075a8:	d106      	bne.n	80075b8 <__sflush_r+0x68>
 80075aa:	6829      	ldr	r1, [r5, #0]
 80075ac:	291d      	cmp	r1, #29
 80075ae:	d82b      	bhi.n	8007608 <__sflush_r+0xb8>
 80075b0:	4a29      	ldr	r2, [pc, #164]	; (8007658 <__sflush_r+0x108>)
 80075b2:	410a      	asrs	r2, r1
 80075b4:	07d6      	lsls	r6, r2, #31
 80075b6:	d427      	bmi.n	8007608 <__sflush_r+0xb8>
 80075b8:	2200      	movs	r2, #0
 80075ba:	6062      	str	r2, [r4, #4]
 80075bc:	04d9      	lsls	r1, r3, #19
 80075be:	6922      	ldr	r2, [r4, #16]
 80075c0:	6022      	str	r2, [r4, #0]
 80075c2:	d504      	bpl.n	80075ce <__sflush_r+0x7e>
 80075c4:	1c42      	adds	r2, r0, #1
 80075c6:	d101      	bne.n	80075cc <__sflush_r+0x7c>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b903      	cbnz	r3, 80075ce <__sflush_r+0x7e>
 80075cc:	6560      	str	r0, [r4, #84]	; 0x54
 80075ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075d0:	602f      	str	r7, [r5, #0]
 80075d2:	2900      	cmp	r1, #0
 80075d4:	d0c9      	beq.n	800756a <__sflush_r+0x1a>
 80075d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075da:	4299      	cmp	r1, r3
 80075dc:	d002      	beq.n	80075e4 <__sflush_r+0x94>
 80075de:	4628      	mov	r0, r5
 80075e0:	f7ff fbe2 	bl	8006da8 <_free_r>
 80075e4:	2000      	movs	r0, #0
 80075e6:	6360      	str	r0, [r4, #52]	; 0x34
 80075e8:	e7c0      	b.n	800756c <__sflush_r+0x1c>
 80075ea:	2301      	movs	r3, #1
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b0      	blx	r6
 80075f0:	1c41      	adds	r1, r0, #1
 80075f2:	d1c8      	bne.n	8007586 <__sflush_r+0x36>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0c5      	beq.n	8007586 <__sflush_r+0x36>
 80075fa:	2b1d      	cmp	r3, #29
 80075fc:	d001      	beq.n	8007602 <__sflush_r+0xb2>
 80075fe:	2b16      	cmp	r3, #22
 8007600:	d101      	bne.n	8007606 <__sflush_r+0xb6>
 8007602:	602f      	str	r7, [r5, #0]
 8007604:	e7b1      	b.n	800756a <__sflush_r+0x1a>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800760c:	81a3      	strh	r3, [r4, #12]
 800760e:	e7ad      	b.n	800756c <__sflush_r+0x1c>
 8007610:	690f      	ldr	r7, [r1, #16]
 8007612:	2f00      	cmp	r7, #0
 8007614:	d0a9      	beq.n	800756a <__sflush_r+0x1a>
 8007616:	0793      	lsls	r3, r2, #30
 8007618:	680e      	ldr	r6, [r1, #0]
 800761a:	bf08      	it	eq
 800761c:	694b      	ldreq	r3, [r1, #20]
 800761e:	600f      	str	r7, [r1, #0]
 8007620:	bf18      	it	ne
 8007622:	2300      	movne	r3, #0
 8007624:	eba6 0807 	sub.w	r8, r6, r7
 8007628:	608b      	str	r3, [r1, #8]
 800762a:	f1b8 0f00 	cmp.w	r8, #0
 800762e:	dd9c      	ble.n	800756a <__sflush_r+0x1a>
 8007630:	6a21      	ldr	r1, [r4, #32]
 8007632:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007634:	4643      	mov	r3, r8
 8007636:	463a      	mov	r2, r7
 8007638:	4628      	mov	r0, r5
 800763a:	47b0      	blx	r6
 800763c:	2800      	cmp	r0, #0
 800763e:	dc06      	bgt.n	800764e <__sflush_r+0xfe>
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	f04f 30ff 	mov.w	r0, #4294967295
 800764c:	e78e      	b.n	800756c <__sflush_r+0x1c>
 800764e:	4407      	add	r7, r0
 8007650:	eba8 0800 	sub.w	r8, r8, r0
 8007654:	e7e9      	b.n	800762a <__sflush_r+0xda>
 8007656:	bf00      	nop
 8007658:	dfbffffe 	.word	0xdfbffffe

0800765c <_fflush_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	690b      	ldr	r3, [r1, #16]
 8007660:	4605      	mov	r5, r0
 8007662:	460c      	mov	r4, r1
 8007664:	b913      	cbnz	r3, 800766c <_fflush_r+0x10>
 8007666:	2500      	movs	r5, #0
 8007668:	4628      	mov	r0, r5
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	b118      	cbz	r0, 8007676 <_fflush_r+0x1a>
 800766e:	6a03      	ldr	r3, [r0, #32]
 8007670:	b90b      	cbnz	r3, 8007676 <_fflush_r+0x1a>
 8007672:	f7ff f96d 	bl	8006950 <__sinit>
 8007676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0f3      	beq.n	8007666 <_fflush_r+0xa>
 800767e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007680:	07d0      	lsls	r0, r2, #31
 8007682:	d404      	bmi.n	800768e <_fflush_r+0x32>
 8007684:	0599      	lsls	r1, r3, #22
 8007686:	d402      	bmi.n	800768e <_fflush_r+0x32>
 8007688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800768a:	f7ff fb5e 	bl	8006d4a <__retarget_lock_acquire_recursive>
 800768e:	4628      	mov	r0, r5
 8007690:	4621      	mov	r1, r4
 8007692:	f7ff ff5d 	bl	8007550 <__sflush_r>
 8007696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007698:	07da      	lsls	r2, r3, #31
 800769a:	4605      	mov	r5, r0
 800769c:	d4e4      	bmi.n	8007668 <_fflush_r+0xc>
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	059b      	lsls	r3, r3, #22
 80076a2:	d4e1      	bmi.n	8007668 <_fflush_r+0xc>
 80076a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076a6:	f7ff fb51 	bl	8006d4c <__retarget_lock_release_recursive>
 80076aa:	e7dd      	b.n	8007668 <_fflush_r+0xc>

080076ac <fiprintf>:
 80076ac:	b40e      	push	{r1, r2, r3}
 80076ae:	b503      	push	{r0, r1, lr}
 80076b0:	4601      	mov	r1, r0
 80076b2:	ab03      	add	r3, sp, #12
 80076b4:	4805      	ldr	r0, [pc, #20]	; (80076cc <fiprintf+0x20>)
 80076b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ba:	6800      	ldr	r0, [r0, #0]
 80076bc:	9301      	str	r3, [sp, #4]
 80076be:	f7ff fc9d 	bl	8006ffc <_vfiprintf_r>
 80076c2:	b002      	add	sp, #8
 80076c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80076c8:	b003      	add	sp, #12
 80076ca:	4770      	bx	lr
 80076cc:	20000068 	.word	0x20000068

080076d0 <__swhatbuf_r>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	460c      	mov	r4, r1
 80076d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d8:	2900      	cmp	r1, #0
 80076da:	b096      	sub	sp, #88	; 0x58
 80076dc:	4615      	mov	r5, r2
 80076de:	461e      	mov	r6, r3
 80076e0:	da0d      	bge.n	80076fe <__swhatbuf_r+0x2e>
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80076e8:	f04f 0100 	mov.w	r1, #0
 80076ec:	bf0c      	ite	eq
 80076ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80076f2:	2340      	movne	r3, #64	; 0x40
 80076f4:	2000      	movs	r0, #0
 80076f6:	6031      	str	r1, [r6, #0]
 80076f8:	602b      	str	r3, [r5, #0]
 80076fa:	b016      	add	sp, #88	; 0x58
 80076fc:	bd70      	pop	{r4, r5, r6, pc}
 80076fe:	466a      	mov	r2, sp
 8007700:	f000 f87c 	bl	80077fc <_fstat_r>
 8007704:	2800      	cmp	r0, #0
 8007706:	dbec      	blt.n	80076e2 <__swhatbuf_r+0x12>
 8007708:	9901      	ldr	r1, [sp, #4]
 800770a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800770e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007712:	4259      	negs	r1, r3
 8007714:	4159      	adcs	r1, r3
 8007716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800771a:	e7eb      	b.n	80076f4 <__swhatbuf_r+0x24>

0800771c <__smakebuf_r>:
 800771c:	898b      	ldrh	r3, [r1, #12]
 800771e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007720:	079d      	lsls	r5, r3, #30
 8007722:	4606      	mov	r6, r0
 8007724:	460c      	mov	r4, r1
 8007726:	d507      	bpl.n	8007738 <__smakebuf_r+0x1c>
 8007728:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	6123      	str	r3, [r4, #16]
 8007730:	2301      	movs	r3, #1
 8007732:	6163      	str	r3, [r4, #20]
 8007734:	b002      	add	sp, #8
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	ab01      	add	r3, sp, #4
 800773a:	466a      	mov	r2, sp
 800773c:	f7ff ffc8 	bl	80076d0 <__swhatbuf_r>
 8007740:	9900      	ldr	r1, [sp, #0]
 8007742:	4605      	mov	r5, r0
 8007744:	4630      	mov	r0, r6
 8007746:	f7ff fba3 	bl	8006e90 <_malloc_r>
 800774a:	b948      	cbnz	r0, 8007760 <__smakebuf_r+0x44>
 800774c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007750:	059a      	lsls	r2, r3, #22
 8007752:	d4ef      	bmi.n	8007734 <__smakebuf_r+0x18>
 8007754:	f023 0303 	bic.w	r3, r3, #3
 8007758:	f043 0302 	orr.w	r3, r3, #2
 800775c:	81a3      	strh	r3, [r4, #12]
 800775e:	e7e3      	b.n	8007728 <__smakebuf_r+0xc>
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	6020      	str	r0, [r4, #0]
 8007764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007768:	81a3      	strh	r3, [r4, #12]
 800776a:	9b00      	ldr	r3, [sp, #0]
 800776c:	6163      	str	r3, [r4, #20]
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	6120      	str	r0, [r4, #16]
 8007772:	b15b      	cbz	r3, 800778c <__smakebuf_r+0x70>
 8007774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007778:	4630      	mov	r0, r6
 800777a:	f000 f851 	bl	8007820 <_isatty_r>
 800777e:	b128      	cbz	r0, 800778c <__smakebuf_r+0x70>
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	f023 0303 	bic.w	r3, r3, #3
 8007786:	f043 0301 	orr.w	r3, r3, #1
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	431d      	orrs	r5, r3
 8007790:	81a5      	strh	r5, [r4, #12]
 8007792:	e7cf      	b.n	8007734 <__smakebuf_r+0x18>

08007794 <_putc_r>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	460d      	mov	r5, r1
 8007798:	4614      	mov	r4, r2
 800779a:	4606      	mov	r6, r0
 800779c:	b118      	cbz	r0, 80077a6 <_putc_r+0x12>
 800779e:	6a03      	ldr	r3, [r0, #32]
 80077a0:	b90b      	cbnz	r3, 80077a6 <_putc_r+0x12>
 80077a2:	f7ff f8d5 	bl	8006950 <__sinit>
 80077a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077a8:	07d8      	lsls	r0, r3, #31
 80077aa:	d405      	bmi.n	80077b8 <_putc_r+0x24>
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	0599      	lsls	r1, r3, #22
 80077b0:	d402      	bmi.n	80077b8 <_putc_r+0x24>
 80077b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077b4:	f7ff fac9 	bl	8006d4a <__retarget_lock_acquire_recursive>
 80077b8:	68a3      	ldr	r3, [r4, #8]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	60a3      	str	r3, [r4, #8]
 80077c0:	da05      	bge.n	80077ce <_putc_r+0x3a>
 80077c2:	69a2      	ldr	r2, [r4, #24]
 80077c4:	4293      	cmp	r3, r2
 80077c6:	db12      	blt.n	80077ee <_putc_r+0x5a>
 80077c8:	b2eb      	uxtb	r3, r5
 80077ca:	2b0a      	cmp	r3, #10
 80077cc:	d00f      	beq.n	80077ee <_putc_r+0x5a>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	6022      	str	r2, [r4, #0]
 80077d4:	701d      	strb	r5, [r3, #0]
 80077d6:	b2ed      	uxtb	r5, r5
 80077d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077da:	07da      	lsls	r2, r3, #31
 80077dc:	d405      	bmi.n	80077ea <_putc_r+0x56>
 80077de:	89a3      	ldrh	r3, [r4, #12]
 80077e0:	059b      	lsls	r3, r3, #22
 80077e2:	d402      	bmi.n	80077ea <_putc_r+0x56>
 80077e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077e6:	f7ff fab1 	bl	8006d4c <__retarget_lock_release_recursive>
 80077ea:	4628      	mov	r0, r5
 80077ec:	bd70      	pop	{r4, r5, r6, pc}
 80077ee:	4629      	mov	r1, r5
 80077f0:	4622      	mov	r2, r4
 80077f2:	4630      	mov	r0, r6
 80077f4:	f7ff f99b 	bl	8006b2e <__swbuf_r>
 80077f8:	4605      	mov	r5, r0
 80077fa:	e7ed      	b.n	80077d8 <_putc_r+0x44>

080077fc <_fstat_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4d07      	ldr	r5, [pc, #28]	; (800781c <_fstat_r+0x20>)
 8007800:	2300      	movs	r3, #0
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	4611      	mov	r1, r2
 8007808:	602b      	str	r3, [r5, #0]
 800780a:	f7fc fccc 	bl	80041a6 <_fstat>
 800780e:	1c43      	adds	r3, r0, #1
 8007810:	d102      	bne.n	8007818 <_fstat_r+0x1c>
 8007812:	682b      	ldr	r3, [r5, #0]
 8007814:	b103      	cbz	r3, 8007818 <_fstat_r+0x1c>
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	bd38      	pop	{r3, r4, r5, pc}
 800781a:	bf00      	nop
 800781c:	20000298 	.word	0x20000298

08007820 <_isatty_r>:
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	4d06      	ldr	r5, [pc, #24]	; (800783c <_isatty_r+0x1c>)
 8007824:	2300      	movs	r3, #0
 8007826:	4604      	mov	r4, r0
 8007828:	4608      	mov	r0, r1
 800782a:	602b      	str	r3, [r5, #0]
 800782c:	f7fc fccb 	bl	80041c6 <_isatty>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_isatty_r+0x1a>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_isatty_r+0x1a>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	20000298 	.word	0x20000298

08007840 <_sbrk_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4d06      	ldr	r5, [pc, #24]	; (800785c <_sbrk_r+0x1c>)
 8007844:	2300      	movs	r3, #0
 8007846:	4604      	mov	r4, r0
 8007848:	4608      	mov	r0, r1
 800784a:	602b      	str	r3, [r5, #0]
 800784c:	f7fc fcd4 	bl	80041f8 <_sbrk>
 8007850:	1c43      	adds	r3, r0, #1
 8007852:	d102      	bne.n	800785a <_sbrk_r+0x1a>
 8007854:	682b      	ldr	r3, [r5, #0]
 8007856:	b103      	cbz	r3, 800785a <_sbrk_r+0x1a>
 8007858:	6023      	str	r3, [r4, #0]
 800785a:	bd38      	pop	{r3, r4, r5, pc}
 800785c:	20000298 	.word	0x20000298

08007860 <abort>:
 8007860:	b508      	push	{r3, lr}
 8007862:	2006      	movs	r0, #6
 8007864:	f000 f82c 	bl	80078c0 <raise>
 8007868:	2001      	movs	r0, #1
 800786a:	f7fc fc69 	bl	8004140 <_exit>

0800786e <_raise_r>:
 800786e:	291f      	cmp	r1, #31
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	4604      	mov	r4, r0
 8007874:	460d      	mov	r5, r1
 8007876:	d904      	bls.n	8007882 <_raise_r+0x14>
 8007878:	2316      	movs	r3, #22
 800787a:	6003      	str	r3, [r0, #0]
 800787c:	f04f 30ff 	mov.w	r0, #4294967295
 8007880:	bd38      	pop	{r3, r4, r5, pc}
 8007882:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007884:	b112      	cbz	r2, 800788c <_raise_r+0x1e>
 8007886:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800788a:	b94b      	cbnz	r3, 80078a0 <_raise_r+0x32>
 800788c:	4620      	mov	r0, r4
 800788e:	f000 f831 	bl	80078f4 <_getpid_r>
 8007892:	462a      	mov	r2, r5
 8007894:	4601      	mov	r1, r0
 8007896:	4620      	mov	r0, r4
 8007898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800789c:	f000 b818 	b.w	80078d0 <_kill_r>
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d00a      	beq.n	80078ba <_raise_r+0x4c>
 80078a4:	1c59      	adds	r1, r3, #1
 80078a6:	d103      	bne.n	80078b0 <_raise_r+0x42>
 80078a8:	2316      	movs	r3, #22
 80078aa:	6003      	str	r3, [r0, #0]
 80078ac:	2001      	movs	r0, #1
 80078ae:	e7e7      	b.n	8007880 <_raise_r+0x12>
 80078b0:	2400      	movs	r4, #0
 80078b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078b6:	4628      	mov	r0, r5
 80078b8:	4798      	blx	r3
 80078ba:	2000      	movs	r0, #0
 80078bc:	e7e0      	b.n	8007880 <_raise_r+0x12>
	...

080078c0 <raise>:
 80078c0:	4b02      	ldr	r3, [pc, #8]	; (80078cc <raise+0xc>)
 80078c2:	4601      	mov	r1, r0
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	f7ff bfd2 	b.w	800786e <_raise_r>
 80078ca:	bf00      	nop
 80078cc:	20000068 	.word	0x20000068

080078d0 <_kill_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d07      	ldr	r5, [pc, #28]	; (80078f0 <_kill_r+0x20>)
 80078d4:	2300      	movs	r3, #0
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	4611      	mov	r1, r2
 80078dc:	602b      	str	r3, [r5, #0]
 80078de:	f7fc fc1f 	bl	8004120 <_kill>
 80078e2:	1c43      	adds	r3, r0, #1
 80078e4:	d102      	bne.n	80078ec <_kill_r+0x1c>
 80078e6:	682b      	ldr	r3, [r5, #0]
 80078e8:	b103      	cbz	r3, 80078ec <_kill_r+0x1c>
 80078ea:	6023      	str	r3, [r4, #0]
 80078ec:	bd38      	pop	{r3, r4, r5, pc}
 80078ee:	bf00      	nop
 80078f0:	20000298 	.word	0x20000298

080078f4 <_getpid_r>:
 80078f4:	f7fc bc0c 	b.w	8004110 <_getpid>

080078f8 <_init>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	bf00      	nop
 80078fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fe:	bc08      	pop	{r3}
 8007900:	469e      	mov	lr, r3
 8007902:	4770      	bx	lr

08007904 <_fini>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	bf00      	nop
 8007908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790a:	bc08      	pop	{r3}
 800790c:	469e      	mov	lr, r3
 800790e:	4770      	bx	lr
